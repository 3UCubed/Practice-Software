
STM32F0ADC7890SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003a70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003a70  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096c6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f5  00000000  00000000  0002975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f00  00000000  00000000  0002bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4eb  00000000  00000000  0003db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b10f  00000000  00000000  0004804b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b315a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e8c  00000000  00000000  000b31ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003940 	.word	0x08003940

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003940 	.word	0x08003940

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b099      	sub	sp, #100	; 0x64
 8000238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb7d 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f92b 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f9ef 	bl	8000624 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000246:	f000 f97f 	bl	8000548 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f9bb 	bl	80005c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // CS pin should default high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800024e:	4b88      	ldr	r3, [pc, #544]	; (8000470 <main+0x23c>)
 8000250:	2201      	movs	r2, #1
 8000252:	2140      	movs	r1, #64	; 0x40
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fdf7 	bl	8000e48 <HAL_GPIO_WritePin>

    // Say something
    uart_buf_len = sprintf(uart_buf, "SPI Test\r\n");
 800025a:	4a86      	ldr	r2, [pc, #536]	; (8000474 <main+0x240>)
 800025c:	251c      	movs	r5, #28
 800025e:	197b      	adds	r3, r7, r5
 8000260:	0011      	movs	r1, r2
 8000262:	0018      	movs	r0, r3
 8000264:	f002 ff02 	bl	800306c <siprintf>
 8000268:	0003      	movs	r3, r0
 800026a:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 800026c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800026e:	b29a      	uxth	r2, r3
 8000270:	1979      	adds	r1, r7, r5
 8000272:	4881      	ldr	r0, [pc, #516]	; (8000478 <main+0x244>)
 8000274:	2364      	movs	r3, #100	; 0x64
 8000276:	f002 fabd 	bl	80027f4 <HAL_UART_Transmit>

    // Enable write enable latch (allow write operations)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800027a:	4b7d      	ldr	r3, [pc, #500]	; (8000470 <main+0x23c>)
 800027c:	2200      	movs	r2, #0
 800027e:	2140      	movs	r1, #64	; 0x40
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fde1 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);
 8000286:	497d      	ldr	r1, [pc, #500]	; (800047c <main+0x248>)
 8000288:	487d      	ldr	r0, [pc, #500]	; (8000480 <main+0x24c>)
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	2201      	movs	r2, #1
 800028e:	f001 fbed 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000292:	4b77      	ldr	r3, [pc, #476]	; (8000470 <main+0x23c>)
 8000294:	2201      	movs	r2, #1
 8000296:	2140      	movs	r1, #64	; 0x40
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fdd5 	bl	8000e48 <HAL_GPIO_WritePin>

    // Read status register
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800029e:	4b74      	ldr	r3, [pc, #464]	; (8000470 <main+0x23c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fdcf 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 80002aa:	4976      	ldr	r1, [pc, #472]	; (8000484 <main+0x250>)
 80002ac:	4874      	ldr	r0, [pc, #464]	; (8000480 <main+0x24c>)
 80002ae:	2364      	movs	r3, #100	; 0x64
 80002b0:	2201      	movs	r2, #1
 80002b2:	f001 fbdb 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80002b6:	2408      	movs	r4, #8
 80002b8:	1939      	adds	r1, r7, r4
 80002ba:	4871      	ldr	r0, [pc, #452]	; (8000480 <main+0x24c>)
 80002bc:	2364      	movs	r3, #100	; 0x64
 80002be:	2201      	movs	r2, #1
 80002c0:	f001 fd34 	bl	8001d2c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80002c4:	4b6a      	ldr	r3, [pc, #424]	; (8000470 <main+0x23c>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fdbc 	bl	8000e48 <HAL_GPIO_WritePin>

    // Print out status register
    uart_buf_len = sprintf(uart_buf,
                            "Status: 0xx\r\n",
                            (unsigned int)spi_buf[0]);
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	781b      	ldrb	r3, [r3, #0]
    uart_buf_len = sprintf(uart_buf,
 80002d4:	001a      	movs	r2, r3
 80002d6:	496c      	ldr	r1, [pc, #432]	; (8000488 <main+0x254>)
 80002d8:	197b      	adds	r3, r7, r5
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 fec6 	bl	800306c <siprintf>
 80002e0:	0003      	movs	r3, r0
 80002e2:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 80002e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	1979      	adds	r1, r7, r5
 80002ea:	4863      	ldr	r0, [pc, #396]	; (8000478 <main+0x244>)
 80002ec:	2364      	movs	r3, #100	; 0x64
 80002ee:	f002 fa81 	bl	80027f4 <HAL_UART_Transmit>

    // Test bytes to write to EEPROM
    spi_buf[0] = 0xAB;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	22ab      	movs	r2, #171	; 0xab
 80002f6:	701a      	strb	r2, [r3, #0]
    spi_buf[1] = 0xCD;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	22cd      	movs	r2, #205	; 0xcd
 80002fc:	705a      	strb	r2, [r3, #1]
    spi_buf[2] = 0xEF;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	22ef      	movs	r2, #239	; 0xef
 8000302:	709a      	strb	r2, [r3, #2]

    // Set starting address
    addr = 0x05;
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	2205      	movs	r2, #5
 8000308:	701a      	strb	r2, [r3, #0]

    // Write 3 bytes starting at given address
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800030a:	4b59      	ldr	r3, [pc, #356]	; (8000470 <main+0x23c>)
 800030c:	2200      	movs	r2, #0
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fd99 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WRITE, 1, 100);
 8000316:	495d      	ldr	r1, [pc, #372]	; (800048c <main+0x258>)
 8000318:	4859      	ldr	r0, [pc, #356]	; (8000480 <main+0x24c>)
 800031a:	2364      	movs	r3, #100	; 0x64
 800031c:	2201      	movs	r2, #1
 800031e:	f001 fba5 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100);
 8000322:	1df9      	adds	r1, r7, #7
 8000324:	4856      	ldr	r0, [pc, #344]	; (8000480 <main+0x24c>)
 8000326:	2364      	movs	r3, #100	; 0x64
 8000328:	2201      	movs	r2, #1
 800032a:	f001 fb9f 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_buf, 3, 100);
 800032e:	1939      	adds	r1, r7, r4
 8000330:	4853      	ldr	r0, [pc, #332]	; (8000480 <main+0x24c>)
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	2203      	movs	r2, #3
 8000336:	f001 fb99 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800033a:	4b4d      	ldr	r3, [pc, #308]	; (8000470 <main+0x23c>)
 800033c:	2201      	movs	r2, #1
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fd81 	bl	8000e48 <HAL_GPIO_WritePin>

    // Clear buffer
    spi_buf[0] = 0;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
    spi_buf[1] = 0;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2200      	movs	r2, #0
 8000350:	705a      	strb	r2, [r3, #1]
    spi_buf[2] = 0;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2200      	movs	r2, #0
 8000356:	709a      	strb	r2, [r3, #2]

    // Wait until WIP bit is cleared
    wip = 1;
 8000358:	2357      	movs	r3, #87	; 0x57
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	2201      	movs	r2, #1
 800035e:	701a      	strb	r2, [r3, #0]
    while (wip)
 8000360:	e01f      	b.n	80003a2 <main+0x16e>
    {
      // Read status register
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000362:	4b43      	ldr	r3, [pc, #268]	; (8000470 <main+0x23c>)
 8000364:	2200      	movs	r2, #0
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fd6d 	bl	8000e48 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 800036e:	4945      	ldr	r1, [pc, #276]	; (8000484 <main+0x250>)
 8000370:	4843      	ldr	r0, [pc, #268]	; (8000480 <main+0x24c>)
 8000372:	2364      	movs	r3, #100	; 0x64
 8000374:	2201      	movs	r2, #1
 8000376:	f001 fb79 	bl	8001a6c <HAL_SPI_Transmit>
      HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 800037a:	2408      	movs	r4, #8
 800037c:	1939      	adds	r1, r7, r4
 800037e:	4840      	ldr	r0, [pc, #256]	; (8000480 <main+0x24c>)
 8000380:	2364      	movs	r3, #100	; 0x64
 8000382:	2201      	movs	r2, #1
 8000384:	f001 fcd2 	bl	8001d2c <HAL_SPI_Receive>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000388:	4b39      	ldr	r3, [pc, #228]	; (8000470 <main+0x23c>)
 800038a:	2201      	movs	r2, #1
 800038c:	2140      	movs	r1, #64	; 0x40
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fd5a 	bl	8000e48 <HAL_GPIO_WritePin>

      // Mask out WIP bit
      wip = spi_buf[0] & 0b00000001;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	2357      	movs	r3, #87	; 0x57
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	2101      	movs	r1, #1
 800039e:	400a      	ands	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
    while (wip)
 80003a2:	2357      	movs	r3, #87	; 0x57
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1da      	bne.n	8000362 <main+0x12e>
    }

    // Read the 3 bytes back
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003ac:	4b30      	ldr	r3, [pc, #192]	; (8000470 <main+0x23c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	2140      	movs	r1, #64	; 0x40
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fd48 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_READ, 1, 100);
 80003b8:	4935      	ldr	r1, [pc, #212]	; (8000490 <main+0x25c>)
 80003ba:	4831      	ldr	r0, [pc, #196]	; (8000480 <main+0x24c>)
 80003bc:	2364      	movs	r3, #100	; 0x64
 80003be:	2201      	movs	r2, #1
 80003c0:	f001 fb54 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100);
 80003c4:	1df9      	adds	r1, r7, #7
 80003c6:	482e      	ldr	r0, [pc, #184]	; (8000480 <main+0x24c>)
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	2201      	movs	r2, #1
 80003cc:	f001 fb4e 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 3, 100);
 80003d0:	2508      	movs	r5, #8
 80003d2:	1979      	adds	r1, r7, r5
 80003d4:	482a      	ldr	r0, [pc, #168]	; (8000480 <main+0x24c>)
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	2203      	movs	r2, #3
 80003da:	f001 fca7 	bl	8001d2c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003de:	4b24      	ldr	r3, [pc, #144]	; (8000470 <main+0x23c>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fd2f 	bl	8000e48 <HAL_GPIO_WritePin>

    // Print out bytes read
    uart_buf_len = sprintf(uart_buf,
                            "0xx 0xx 0xx\r\n",
                            (unsigned int)spi_buf[0],
 80003ea:	197b      	adds	r3, r7, r5
 80003ec:	781b      	ldrb	r3, [r3, #0]
    uart_buf_len = sprintf(uart_buf,
 80003ee:	001a      	movs	r2, r3
                            (unsigned int)spi_buf[1],
 80003f0:	197b      	adds	r3, r7, r5
 80003f2:	785b      	ldrb	r3, [r3, #1]
    uart_buf_len = sprintf(uart_buf,
 80003f4:	001c      	movs	r4, r3
                            (unsigned int)spi_buf[2]);
 80003f6:	197b      	adds	r3, r7, r5
 80003f8:	789b      	ldrb	r3, [r3, #2]
    uart_buf_len = sprintf(uart_buf,
 80003fa:	4926      	ldr	r1, [pc, #152]	; (8000494 <main+0x260>)
 80003fc:	261c      	movs	r6, #28
 80003fe:	19b8      	adds	r0, r7, r6
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	0023      	movs	r3, r4
 8000404:	f002 fe32 	bl	800306c <siprintf>
 8000408:	0003      	movs	r3, r0
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 800040c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800040e:	b29a      	uxth	r2, r3
 8000410:	0034      	movs	r4, r6
 8000412:	1939      	adds	r1, r7, r4
 8000414:	4818      	ldr	r0, [pc, #96]	; (8000478 <main+0x244>)
 8000416:	2364      	movs	r3, #100	; 0x64
 8000418:	f002 f9ec 	bl	80027f4 <HAL_UART_Transmit>

    // Read status register
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <main+0x23c>)
 800041e:	2200      	movs	r2, #0
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fd10 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 8000428:	4916      	ldr	r1, [pc, #88]	; (8000484 <main+0x250>)
 800042a:	4815      	ldr	r0, [pc, #84]	; (8000480 <main+0x24c>)
 800042c:	2364      	movs	r3, #100	; 0x64
 800042e:	2201      	movs	r2, #1
 8000430:	f001 fb1c 	bl	8001a6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000434:	1979      	adds	r1, r7, r5
 8000436:	4812      	ldr	r0, [pc, #72]	; (8000480 <main+0x24c>)
 8000438:	2364      	movs	r3, #100	; 0x64
 800043a:	2201      	movs	r2, #1
 800043c:	f001 fc76 	bl	8001d2c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <main+0x23c>)
 8000442:	2201      	movs	r2, #1
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fcfe 	bl	8000e48 <HAL_GPIO_WritePin>

    // Print out status register
    uart_buf_len = sprintf(uart_buf,
                            "Status: 0xx\r\n",
                            (unsigned int)spi_buf[0]);
 800044c:	197b      	adds	r3, r7, r5
 800044e:	781b      	ldrb	r3, [r3, #0]
    uart_buf_len = sprintf(uart_buf,
 8000450:	001a      	movs	r2, r3
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <main+0x254>)
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	f002 fe08 	bl	800306c <siprintf>
 800045c:	0003      	movs	r3, r0
 800045e:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000462:	b29a      	uxth	r2, r3
 8000464:	1939      	adds	r1, r7, r4
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <main+0x244>)
 8000468:	2364      	movs	r3, #100	; 0x64
 800046a:	f002 f9c3 	bl	80027f4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046e:	e7fe      	b.n	800046e <main+0x23a>
 8000470:	48000400 	.word	0x48000400
 8000474:	08003958 	.word	0x08003958
 8000478:	200000f0 	.word	0x200000f0
 800047c:	08003987 	.word	0x08003987
 8000480:	2000008c 	.word	0x2000008c
 8000484:	08003988 	.word	0x08003988
 8000488:	08003964 	.word	0x08003964
 800048c:	08003986 	.word	0x08003986
 8000490:	08003985 	.word	0x08003985
 8000494:	08003974 	.word	0x08003974

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b097      	sub	sp, #92	; 0x5c
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	2428      	movs	r4, #40	; 0x28
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2330      	movs	r3, #48	; 0x30
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f002 fdd7 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	2318      	movs	r3, #24
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	0018      	movs	r0, r3
 80004b4:	2310      	movs	r3, #16
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f002 fdcf 	bl	800305c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	0018      	movs	r0, r3
 80004c2:	2314      	movs	r3, #20
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f002 fdc8 	bl	800305c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004cc:	0021      	movs	r1, r4
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2202      	movs	r2, #2
 80004d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2201      	movs	r2, #1
 80004d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2210      	movs	r2, #16
 80004de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fccb 	bl	8000e84 <HAL_RCC_OscConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004f2:	f000 f8df 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	2118      	movs	r1, #24
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2207      	movs	r2, #7
 80004fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2100      	movs	r1, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ffcf 	bl	80014b8 <HAL_RCC_ClockConfig>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800051e:	f000 f8c9 	bl	80006b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2201      	movs	r2, #1
 8000526:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	0018      	movs	r0, r3
 8000532:	f001 f905 	bl	8001740 <HAL_RCCEx_PeriphCLKConfig>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800053a:	f000 f8bb 	bl	80006b4 <Error_Handler>
  }
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b017      	add	sp, #92	; 0x5c
 8000544:	bd90      	pop	{r4, r7, pc}
	...

08000548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_SPI1_Init+0x74>)
 800054e:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <MX_SPI1_Init+0x78>)
 8000550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_SPI1_Init+0x74>)
 8000554:	2282      	movs	r2, #130	; 0x82
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_SPI1_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_SPI1_Init+0x74>)
 8000562:	22c0      	movs	r2, #192	; 0xc0
 8000564:	0092      	lsls	r2, r2, #2
 8000566:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_SPI1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_SPI1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_SPI1_Init+0x74>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_SPI1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_SPI1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_SPI1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_SPI1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_SPI1_Init+0x74>)
 8000596:	2207      	movs	r2, #7
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_SPI1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_SPI1_Init+0x74>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MX_SPI1_Init+0x74>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f9a7 	bl	80018fc <HAL_SPI_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005b2:	f000 f87f 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	40013000 	.word	0x40013000

080005c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <MX_USART1_UART_Init+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005d0:	22e1      	movs	r2, #225	; 0xe1
 80005d2:	0252      	lsls	r2, r2, #9
 80005d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART1_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_USART1_UART_Init+0x58>)
 8000608:	0018      	movs	r0, r3
 800060a:	f002 f897 	bl	800273c <HAL_HalfDuplex_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f84f 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000f0 	.word	0x200000f0
 8000620:	40013800 	.word	0x40013800

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	240c      	movs	r4, #12
 800062c:	193b      	adds	r3, r7, r4
 800062e:	0018      	movs	r0, r3
 8000630:	2314      	movs	r3, #20
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f002 fd11 	bl	800305c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_GPIO_Init+0x88>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_GPIO_Init+0x88>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_GPIO_Init+0x88>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_GPIO_Init+0x88>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0x88>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	02c9      	lsls	r1, r1, #11
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_GPIO_Init+0x88>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	02db      	lsls	r3, r3, #11
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fbe5 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067e:	0021      	movs	r1, r4
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2240      	movs	r2, #64	; 0x40
 8000684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2201      	movs	r2, #1
 800068a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	187b      	adds	r3, r7, r1
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <MX_GPIO_Init+0x8c>)
 800069c:	0019      	movs	r1, r3
 800069e:	0010      	movs	r0, r2
 80006a0:	f000 fa62 	bl	8000b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b009      	add	sp, #36	; 0x24
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x44>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_MspInit+0x44>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	619a      	str	r2, [r3, #24]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x44>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_MspInit+0x44>)
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_MspInit+0x44>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0549      	lsls	r1, r1, #21
 80006e8:	430a      	orrs	r2, r1
 80006ea:	61da      	str	r2, [r3, #28]
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_MspInit+0x44>)
 80006ee:	69da      	ldr	r2, [r3, #28]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	055b      	lsls	r3, r3, #21
 80006f4:	4013      	ands	r3, r2
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2414      	movs	r4, #20
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	2314      	movs	r3, #20
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f002 fc9e 	bl	800305c <memset>
  if(hspi->Instance==SPI1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <HAL_SPI_MspInit+0x90>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d132      	bne.n	8000790 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <HAL_SPI_MspInit+0x94>)
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_SPI_MspInit+0x94>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0149      	lsls	r1, r1, #5
 8000734:	430a      	orrs	r2, r1
 8000736:	619a      	str	r2, [r3, #24]
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_SPI_MspInit+0x94>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	015b      	lsls	r3, r3, #5
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_SPI_MspInit+0x94>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_SPI_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0289      	lsls	r1, r1, #10
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_SPI_MspInit+0x94>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22e0      	movs	r2, #224	; 0xe0
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	187a      	adds	r2, r7, r1
 8000784:	2390      	movs	r3, #144	; 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f9ec 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b00b      	add	sp, #44	; 0x2c
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40013000 	.word	0x40013000
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b08b      	sub	sp, #44	; 0x2c
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	2414      	movs	r4, #20
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	2314      	movs	r3, #20
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f002 fc52 	bl	800305c <memset>
  if(huart->Instance==USART1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <HAL_UART_MspInit+0x94>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d133      	bne.n	800082a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	01c9      	lsls	r1, r1, #7
 80007cc:	430a      	orrs	r2, r1
 80007ce:	619a      	str	r2, [r3, #24]
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007d2:	699a      	ldr	r2, [r3, #24]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	0289      	lsls	r1, r1, #10
 80007e8:	430a      	orrs	r2, r1
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	029b      	lsls	r3, r3, #10
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0092      	lsls	r2, r2, #2
 8000800:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000802:	0021      	movs	r1, r4
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2212      	movs	r2, #18
 8000808:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2201      	movs	r2, #1
 800080e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2203      	movs	r2, #3
 8000814:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2201      	movs	r2, #1
 800081a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	187a      	adds	r2, r7, r1
 800081e:	2390      	movs	r3, #144	; 0x90
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f000 f99f 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b00b      	add	sp, #44	; 0x2c
 8000830:	bd90      	pop	{r4, r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40013800 	.word	0x40013800
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f8b2 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	18d3      	adds	r3, r2, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f002 fbb4 	bl	8003008 <__errno>
 80008a0:	0003      	movs	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	425b      	negs	r3, r3
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b006      	add	sp, #24
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20002000 	.word	0x20002000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	20000178 	.word	0x20000178
 80008d4:	20000190 	.word	0x20000190

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e6:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80008e8:	f7ff fff6 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	; (8000924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	; (8000930 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000912:	f002 fb7f 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fc8d 	bl	8000234 <main>

0800091a <LoopForever>:

LoopForever:
    b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000928:	08003a00 	.word	0x08003a00
  ldr r2, =_sbss
 800092c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000930:	20000190 	.word	0x20000190

08000934 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_COMP_IRQHandler>
	...

08000938 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_Init+0x24>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_Init+0x24>)
 8000942:	2110      	movs	r1, #16
 8000944:	430a      	orrs	r2, r1
 8000946:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f809 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094e:	f7ff feb7 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_InitTick+0x5c>)
 800096a:	681c      	ldr	r4, [r3, #0]
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_InitTick+0x60>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	0019      	movs	r1, r3
 8000972:	23fa      	movs	r3, #250	; 0xfa
 8000974:	0098      	lsls	r0, r3, #2
 8000976:	f7ff fbd1 	bl	800011c <__udivsi3>
 800097a:	0003      	movs	r3, r0
 800097c:	0019      	movs	r1, r3
 800097e:	0020      	movs	r0, r4
 8000980:	f7ff fbcc 	bl	800011c <__udivsi3>
 8000984:	0003      	movs	r3, r0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8e1 	bl	8000b4e <HAL_SYSTICK_Config>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e00f      	b.n	80009b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d80b      	bhi.n	80009b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	2301      	movs	r3, #1
 800099e:	425b      	negs	r3, r3
 80009a0:	2200      	movs	r2, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f8be 	bl	8000b24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_InitTick+0x64>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b003      	add	sp, #12
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	18d2      	adds	r2, r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000008 	.word	0x20000008
 80009e8:	2000017c 	.word	0x2000017c

080009ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	2000017c 	.word	0x2000017c

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b7f      	cmp	r3, #127	; 0x7f
 8000a14:	d828      	bhi.n	8000a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	33c0      	adds	r3, #192	; 0xc0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	589b      	ldr	r3, [r3, r2]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	; 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	33c0      	adds	r3, #192	; 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a66:	e031      	b.n	8000acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0019      	movs	r1, r3
 8000a70:	230f      	movs	r3, #15
 8000a72:	400b      	ands	r3, r1
 8000a74:	3b08      	subs	r3, #8
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3306      	adds	r3, #6
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	3304      	adds	r3, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1dfa      	adds	r2, r7, #7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	0011      	movs	r1, r2
 8000a88:	2203      	movs	r2, #3
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	21ff      	movs	r1, #255	; 0xff
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	401a      	ands	r2, r3
 8000a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4003      	ands	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	3b08      	subs	r3, #8
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	18c3      	adds	r3, r0, r3
 8000ac8:	3304      	adds	r3, #4
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d301      	bcc.n	8000af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af0:	2301      	movs	r3, #1
 8000af2:	e010      	b.n	8000b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <SysTick_Config+0x44>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2103      	movs	r1, #3
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff7c 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x44>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	210f      	movs	r1, #15
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffbf 	bl	8000adc <SysTick_Config>
 8000b5e:	0003      	movs	r3, r0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e14f      	b.n	8000e18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x28>
 8000b8e:	e140      	b.n	8000e12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2207      	movs	r2, #7
 8000c64:	4013      	ands	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	400b      	ands	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x174>
 8000cda:	e09a      	b.n	8000e12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000cde:	699a      	ldr	r2, [r3, #24]
 8000ce0:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	619a      	str	r2, [r3, #24]
 8000ce8:	4b51      	ldr	r3, [pc, #324]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	2201      	movs	r2, #1
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	589b      	ldr	r3, [r3, r2]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	2390      	movs	r3, #144	; 0x90
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x1de>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a43      	ldr	r2, [pc, #268]	; (8000e3c <HAL_GPIO_Init+0x2d4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x1da>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a42      	ldr	r2, [pc, #264]	; (8000e40 <HAL_GPIO_Init+0x2d8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x1d6>
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	2103      	movs	r1, #3
 8000d50:	400a      	ands	r2, r1
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	035b      	lsls	r3, r3, #13
 8000d82:	4013      	ands	r3, r2
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	039b      	lsls	r3, r3, #14
 8000dac:	4013      	ands	r3, r2
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	1e13      	subs	r3, r2, #0
 8000e22:	d000      	beq.n	8000e26 <HAL_GPIO_Init+0x2be>
 8000e24:	e6a8      	b.n	8000b78 <HAL_GPIO_Init+0x10>
  } 
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	48000c00 	.word	0x48000c00
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	0008      	movs	r0, r1
 8000e52:	0011      	movs	r1, r2
 8000e54:	1cbb      	adds	r3, r7, #2
 8000e56:	1c02      	adds	r2, r0, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	1c7b      	adds	r3, r7, #1
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	1c7b      	adds	r3, r7, #1
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e68:	1cbb      	adds	r3, r7, #2
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e301      	b.n	800149a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d100      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x1e>
 8000ea0:	e08d      	b.n	8000fbe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ea2:	4bc3      	ldr	r3, [pc, #780]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d00e      	beq.n	8000ecc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eae:	4bc0      	ldr	r3, [pc, #768]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d116      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x64>
 8000eba:	4bbd      	ldr	r3, [pc, #756]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d10d      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	4bb8      	ldr	r3, [pc, #736]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d100      	bne.n	8000eda <HAL_RCC_OscConfig+0x56>
 8000ed8:	e070      	b.n	8000fbc <HAL_RCC_OscConfig+0x138>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d000      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x60>
 8000ee2:	e06b      	b.n	8000fbc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e2d8      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d107      	bne.n	8000f00 <HAL_RCC_OscConfig+0x7c>
 8000ef0:	4baf      	ldr	r3, [pc, #700]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4bae      	ldr	r3, [pc, #696]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0249      	lsls	r1, r1, #9
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e02f      	b.n	8000f60 <HAL_RCC_OscConfig+0xdc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10c      	bne.n	8000f22 <HAL_RCC_OscConfig+0x9e>
 8000f08:	4ba9      	ldr	r3, [pc, #676]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4ba8      	ldr	r3, [pc, #672]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	49a9      	ldr	r1, [pc, #676]	; (80011b4 <HAL_RCC_OscConfig+0x330>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	4ba6      	ldr	r3, [pc, #664]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4ba5      	ldr	r3, [pc, #660]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	49a7      	ldr	r1, [pc, #668]	; (80011b8 <HAL_RCC_OscConfig+0x334>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	e01e      	b.n	8000f60 <HAL_RCC_OscConfig+0xdc>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d10e      	bne.n	8000f48 <HAL_RCC_OscConfig+0xc4>
 8000f2a:	4ba1      	ldr	r3, [pc, #644]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4ba0      	ldr	r3, [pc, #640]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	02c9      	lsls	r1, r1, #11
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	4b9d      	ldr	r3, [pc, #628]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b9c      	ldr	r3, [pc, #624]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	0249      	lsls	r1, r1, #9
 8000f42:	430a      	orrs	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xdc>
 8000f48:	4b99      	ldr	r3, [pc, #612]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b98      	ldr	r3, [pc, #608]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	4999      	ldr	r1, [pc, #612]	; (80011b4 <HAL_RCC_OscConfig+0x330>)
 8000f50:	400a      	ands	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	4b96      	ldr	r3, [pc, #600]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b95      	ldr	r3, [pc, #596]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	4997      	ldr	r1, [pc, #604]	; (80011b8 <HAL_RCC_OscConfig+0x334>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d014      	beq.n	8000f92 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fd40 	bl	80009ec <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f72:	f7ff fd3b 	bl	80009ec <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e28a      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f84:	4b8a      	ldr	r3, [pc, #552]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0xee>
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fd2b 	bl	80009ec <HAL_GetTick>
 8000f96:	0003      	movs	r3, r0
 8000f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fd26 	bl	80009ec <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e275      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	029b      	lsls	r3, r3, #10
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x118>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_OscConfig+0x146>
 8000fc8:	e069      	b.n	800109e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fca:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	220c      	movs	r2, #12
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d00b      	beq.n	8000fec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd4:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d11c      	bne.n	800101a <HAL_RCC_OscConfig+0x196>
 8000fe0:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	025b      	lsls	r3, r3, #9
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d116      	bne.n	800101a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x17e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e24b      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	22f8      	movs	r2, #248	; 0xf8
 8001008:	4393      	bics	r3, r2
 800100a:	0019      	movs	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	00da      	lsls	r2, r3, #3
 8001012:	4b67      	ldr	r3, [pc, #412]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001018:	e041      	b.n	800109e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d024      	beq.n	800106c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b62      	ldr	r3, [pc, #392]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fcdd 	bl	80009ec <HAL_GetTick>
 8001032:	0003      	movs	r3, r0
 8001034:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff fcd8 	bl	80009ec <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e227      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2202      	movs	r2, #2
 8001050:	4013      	ands	r3, r2
 8001052:	d0f1      	beq.n	8001038 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	22f8      	movs	r2, #248	; 0xf8
 800105a:	4393      	bics	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	00da      	lsls	r2, r3, #3
 8001064:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e018      	b.n	800109e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001072:	2101      	movs	r1, #1
 8001074:	438a      	bics	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fcb8 	bl	80009ec <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fcb3 	bl	80009ec <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e202      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d1f1      	bne.n	8001082 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2208      	movs	r2, #8
 80010a4:	4013      	ands	r3, r2
 80010a6:	d036      	beq.n	8001116 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d019      	beq.n	80010e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc96 	bl	80009ec <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c6:	f7ff fc91 	bl	80009ec <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e1e0      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	d0f1      	beq.n	80010c6 <HAL_RCC_OscConfig+0x242>
 80010e2:	e018      	b.n	8001116 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	438a      	bics	r2, r1
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fc7c 	bl	80009ec <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc77 	bl	80009ec <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1c6      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d1f1      	bne.n	80010fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2204      	movs	r2, #4
 800111c:	4013      	ands	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_RCC_OscConfig+0x29e>
 8001120:	e0b4      	b.n	800128c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	201f      	movs	r0, #31
 8001124:	183b      	adds	r3, r7, r0
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 800112c:	69da      	ldr	r2, [r3, #28]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	055b      	lsls	r3, r3, #21
 8001132:	4013      	ands	r3, r2
 8001134:	d110      	bne.n	8001158 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001138:	69da      	ldr	r2, [r3, #28]
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	0549      	lsls	r1, r1, #21
 8001140:	430a      	orrs	r2, r1
 8001142:	61da      	str	r2, [r3, #28]
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 8001146:	69da      	ldr	r2, [r3, #28]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	055b      	lsls	r3, r3, #21
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001152:	183b      	adds	r3, r7, r0
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4013      	ands	r3, r2
 8001162:	d11a      	bne.n	800119a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	0049      	lsls	r1, r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001172:	f7ff fc3b 	bl	80009ec <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117c:	f7ff fc36 	bl	80009ec <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e185      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4013      	ands	r3, r2
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10e      	bne.n	80011c0 <HAL_RCC_OscConfig+0x33c>
 80011a2:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	621a      	str	r2, [r3, #32]
 80011ae:	e035      	b.n	800121c <HAL_RCC_OscConfig+0x398>
 80011b0:	40021000 	.word	0x40021000
 80011b4:	fffeffff 	.word	0xfffeffff
 80011b8:	fffbffff 	.word	0xfffbffff
 80011bc:	40007000 	.word	0x40007000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x35e>
 80011c8:	4bb6      	ldr	r3, [pc, #728]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	4bb5      	ldr	r3, [pc, #724]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	438a      	bics	r2, r1
 80011d2:	621a      	str	r2, [r3, #32]
 80011d4:	4bb3      	ldr	r3, [pc, #716]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4bb2      	ldr	r3, [pc, #712]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011da:	2104      	movs	r1, #4
 80011dc:	438a      	bics	r2, r1
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	e01c      	b.n	800121c <HAL_RCC_OscConfig+0x398>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x380>
 80011ea:	4bae      	ldr	r3, [pc, #696]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011ec:	6a1a      	ldr	r2, [r3, #32]
 80011ee:	4bad      	ldr	r3, [pc, #692]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011f0:	2104      	movs	r1, #4
 80011f2:	430a      	orrs	r2, r1
 80011f4:	621a      	str	r2, [r3, #32]
 80011f6:	4bab      	ldr	r3, [pc, #684]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4baa      	ldr	r3, [pc, #680]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0x398>
 8001204:	4ba7      	ldr	r3, [pc, #668]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	4ba6      	ldr	r3, [pc, #664]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	621a      	str	r2, [r3, #32]
 8001210:	4ba4      	ldr	r3, [pc, #656]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	4ba3      	ldr	r3, [pc, #652]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001216:	2104      	movs	r1, #4
 8001218:	438a      	bics	r2, r1
 800121a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d014      	beq.n	800124e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fbe2 	bl	80009ec <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	e009      	b.n	8001242 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fbdd 	bl	80009ec <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4a9b      	ldr	r2, [pc, #620]	; (80014a8 <HAL_RCC_OscConfig+0x624>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e12b      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001242:	4b98      	ldr	r3, [pc, #608]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x3aa>
 800124c:	e013      	b.n	8001276 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fbcd 	bl	80009ec <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001256:	e009      	b.n	800126c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff fbc8 	bl	80009ec <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	4a91      	ldr	r2, [pc, #580]	; (80014a8 <HAL_RCC_OscConfig+0x624>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e116      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	4b8d      	ldr	r3, [pc, #564]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	2202      	movs	r2, #2
 8001272:	4013      	ands	r3, r2
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001276:	231f      	movs	r3, #31
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	4b87      	ldr	r3, [pc, #540]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001286:	4989      	ldr	r1, [pc, #548]	; (80014ac <HAL_RCC_OscConfig+0x628>)
 8001288:	400a      	ands	r2, r1
 800128a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2210      	movs	r2, #16
 8001292:	4013      	ands	r3, r2
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d12a      	bne.n	80012f4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	4b80      	ldr	r3, [pc, #512]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012a4:	2104      	movs	r1, #4
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012aa:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ae:	4b7d      	ldr	r3, [pc, #500]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	430a      	orrs	r2, r1
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb99 	bl	80009ec <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012c0:	f7ff fb94 	bl	80009ec <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e0e3      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012d2:	4b74      	ldr	r3, [pc, #464]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f1      	beq.n	80012c0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012dc:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	22f8      	movs	r2, #248	; 0xf8
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	00da      	lsls	r2, r3, #3
 80012ec:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
 80012f2:	e034      	b.n	800135e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	3305      	adds	r3, #5
 80012fa:	d111      	bne.n	8001320 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012fc:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80012fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001300:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001302:	2104      	movs	r1, #4
 8001304:	438a      	bics	r2, r1
 8001306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	22f8      	movs	r2, #248	; 0xf8
 800130e:	4393      	bics	r3, r2
 8001310:	0019      	movs	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	00da      	lsls	r2, r3, #3
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
 800131e:	e01e      	b.n	800135e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001320:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001324:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001326:	2104      	movs	r1, #4
 8001328:	430a      	orrs	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800132c:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001330:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fb58 	bl	80009ec <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001342:	f7ff fb53 	bl	80009ec <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0a2      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d1f1      	bne.n	8001342 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <HAL_RCC_OscConfig+0x4e4>
 8001366:	e097      	b.n	8001498 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001368:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	220c      	movs	r2, #12
 800136e:	4013      	ands	r3, r2
 8001370:	2b08      	cmp	r3, #8
 8001372:	d100      	bne.n	8001376 <HAL_RCC_OscConfig+0x4f2>
 8001374:	e06b      	b.n	800144e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d14c      	bne.n	8001418 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001384:	494a      	ldr	r1, [pc, #296]	; (80014b0 <HAL_RCC_OscConfig+0x62c>)
 8001386:	400a      	ands	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb2f 	bl	80009ec <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fb2a 	bl	80009ec <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e079      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	049b      	lsls	r3, r3, #18
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	220f      	movs	r2, #15
 80013b8:	4393      	bics	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4a3a      	ldr	r2, [pc, #232]	; (80014b4 <HAL_RCC_OscConfig+0x630>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	431a      	orrs	r2, r3
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0449      	lsls	r1, r1, #17
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fafd 	bl	80009ec <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff faf8 	bl	80009ec <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e047      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	049b      	lsls	r3, r3, #18
 8001412:	4013      	ands	r3, r2
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x574>
 8001416:	e03f      	b.n	8001498 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800141e:	4924      	ldr	r1, [pc, #144]	; (80014b0 <HAL_RCC_OscConfig+0x62c>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fae2 	bl	80009ec <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142e:	f7ff fadd 	bl	80009ec <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e02c      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	049b      	lsls	r3, r3, #18
 8001448:	4013      	ands	r3, r2
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x5aa>
 800144c:	e024      	b.n	8001498 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e01f      	b.n	800149a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x620>)
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	401a      	ands	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	429a      	cmp	r2, r3
 8001474:	d10e      	bne.n	8001494 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	220f      	movs	r2, #15
 800147a:	401a      	ands	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	23f0      	movs	r3, #240	; 0xf0
 8001488:	039b      	lsls	r3, r3, #14
 800148a:	401a      	ands	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b008      	add	sp, #32
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	40021000 	.word	0x40021000
 80014a8:	00001388 	.word	0x00001388
 80014ac:	efffffff 	.word	0xefffffff
 80014b0:	feffffff 	.word	0xfeffffff
 80014b4:	ffc2ffff 	.word	0xffc2ffff

080014b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0b3      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d911      	bls.n	80014fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b55      	ldr	r3, [pc, #340]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e09a      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d015      	beq.n	8001534 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2204      	movs	r2, #4
 800150e:	4013      	ands	r3, r2
 8001510:	d006      	beq.n	8001520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001518:	21e0      	movs	r1, #224	; 0xe0
 800151a:	00c9      	lsls	r1, r1, #3
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	22f0      	movs	r2, #240	; 0xf0
 8001526:	4393      	bics	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	d040      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d114      	bne.n	800157c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06e      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	049b      	lsls	r3, r3, #18
 8001566:	4013      	ands	r3, r2
 8001568:	d108      	bne.n	800157c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e062      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e05b      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa2c 	bl	80009ec <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001598:	e009      	b.n	80015ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159a:	f7ff fa27 	bl	80009ec <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_RCC_ClockConfig+0x18c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e042      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	220c      	movs	r2, #12
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1ec      	bne.n	800159a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d211      	bcs.n	80015f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_RCC_ClockConfig+0x184>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e020      	b.n	8001634 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2204      	movs	r2, #4
 80015f8:	4013      	ands	r3, r2
 80015fa:	d009      	beq.n	8001610 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_RCC_ClockConfig+0x190>)
 8001602:	4013      	ands	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001610:	f000 f820 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001614:	0001      	movs	r1, r0
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x188>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	220f      	movs	r2, #15
 800161e:	4013      	ands	r3, r2
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_RCC_ClockConfig+0x194>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	000a      	movs	r2, r1
 8001626:	40da      	lsrs	r2, r3
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x198>)
 800162a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800162c:	2003      	movs	r0, #3
 800162e:	f7ff f997 	bl	8000960 <HAL_InitTick>
  
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40022000 	.word	0x40022000
 8001640:	40021000 	.word	0x40021000
 8001644:	00001388 	.word	0x00001388
 8001648:	fffff8ff 	.word	0xfffff8ff
 800164c:	0800398c 	.word	0x0800398c
 8001650:	20000000 	.word	0x20000000

08001654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	220c      	movs	r2, #12
 8001678:	4013      	ands	r3, r2
 800167a:	2b04      	cmp	r3, #4
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x30>
 800167e:	2b08      	cmp	r3, #8
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x36>
 8001682:	e02c      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001686:	613b      	str	r3, [r7, #16]
      break;
 8001688:	e02c      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	220f      	movs	r2, #15
 8001690:	4013      	ands	r3, r2
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	220f      	movs	r2, #15
 800169e:	4013      	ands	r3, r2
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	4013      	ands	r3, r2
 80016ae:	d009      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016b4:	f7fe fd32 	bl	800011c <__udivsi3>
 80016b8:	0003      	movs	r3, r0
 80016ba:	001a      	movs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4353      	muls	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	000a      	movs	r2, r1
 80016c8:	0152      	lsls	r2, r2, #5
 80016ca:	1a52      	subs	r2, r2, r1
 80016cc:	0193      	lsls	r3, r2, #6
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	185b      	adds	r3, r3, r1
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
      break;
 80016dc:	e002      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016e0:	613b      	str	r3, [r7, #16]
      break;
 80016e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016e4:	693b      	ldr	r3, [r7, #16]
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b006      	add	sp, #24
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	007a1200 	.word	0x007a1200
 80016f8:	080039a4 	.word	0x080039a4
 80016fc:	080039b4 	.word	0x080039b4

08001700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_RCC_GetHCLKFreq+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	20000000 	.word	0x20000000

08001714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001718:	f7ff fff2 	bl	8001700 <HAL_RCC_GetHCLKFreq>
 800171c:	0001      	movs	r1, r0
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	2207      	movs	r2, #7
 8001726:	4013      	ands	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_RCC_GetPCLK1Freq+0x28>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	40d9      	lsrs	r1, r3
 800172e:	000b      	movs	r3, r1
}    
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40021000 	.word	0x40021000
 800173c:	0800399c 	.word	0x0800399c

08001740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	4013      	ands	r3, r2
 800175a:	d100      	bne.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800175c:	e08e      	b.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2017      	movs	r0, #23
 8001760:	183b      	adds	r3, r7, r0
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	055b      	lsls	r3, r3, #21
 800176e:	4013      	ands	r3, r2
 8001770:	d110      	bne.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0549      	lsls	r1, r1, #21
 800177c:	430a      	orrs	r2, r1
 800177e:	61da      	str	r2, [r3, #28]
 8001780:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	055b      	lsls	r3, r3, #21
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	183b      	adds	r3, r7, r0
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4013      	ands	r3, r2
 800179e:	d11a      	bne.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a0:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0049      	lsls	r1, r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f91d 	bl	80009ec <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	e008      	b.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b8:	f7ff f918 	bl	80009ec <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e087      	b.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4013      	ands	r3, r2
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017d6:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	23c0      	movs	r3, #192	; 0xc0
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d034      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	23c0      	movs	r3, #192	; 0xc0
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d02c      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a3b      	ldr	r2, [pc, #236]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80017fe:	4013      	ands	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0249      	lsls	r1, r1, #9
 800180c:	430a      	orrs	r2, r1
 800180e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001816:	4936      	ldr	r1, [pc, #216]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001818:	400a      	ands	r2, r1
 800181a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f8df 	bl	80009ec <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001832:	e009      	b.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff f8da 	bl	80009ec <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e048      	b.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d0f0      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a25      	ldr	r2, [pc, #148]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001858:	4013      	ands	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001862:	430a      	orrs	r2, r1
 8001864:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001866:	2317      	movs	r3, #23
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001872:	69da      	ldr	r2, [r3, #28]
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001876:	4920      	ldr	r1, [pc, #128]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001878:	400a      	ands	r2, r1
 800187a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	d009      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	2203      	movs	r2, #3
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001896:	430a      	orrs	r2, r1
 8001898:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2220      	movs	r2, #32
 80018a0:	4013      	ands	r3, r2
 80018a2:	d009      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	2210      	movs	r2, #16
 80018aa:	4393      	bics	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4013      	ands	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b006      	add	sp, #24
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40007000 	.word	0x40007000
 80018ec:	fffffcff 	.word	0xfffffcff
 80018f0:	fffeffff 	.word	0xfffeffff
 80018f4:	00001388 	.word	0x00001388
 80018f8:	efffffff 	.word	0xefffffff

080018fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0a8      	b.n	8001a60 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	2382      	movs	r3, #130	; 0x82
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	429a      	cmp	r2, r3
 8001920:	d009      	beq.n	8001936 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
 8001928:	e005      	b.n	8001936 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	225d      	movs	r2, #93	; 0x5d
 8001940:	5c9b      	ldrb	r3, [r3, r2]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	225c      	movs	r2, #92	; 0x5c
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0018      	movs	r0, r3
 8001954:	f7fe fed8 	bl	8000708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	225d      	movs	r2, #93	; 0x5d
 800195c:	2102      	movs	r1, #2
 800195e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2140      	movs	r1, #64	; 0x40
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	23e0      	movs	r3, #224	; 0xe0
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	429a      	cmp	r2, r3
 800197a:	d902      	bls.n	8001982 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e002      	b.n	8001988 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	015b      	lsls	r3, r3, #5
 8001986:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	23f0      	movs	r3, #240	; 0xf0
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	429a      	cmp	r2, r3
 8001992:	d008      	beq.n	80019a6 <HAL_SPI_Init+0xaa>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	23e0      	movs	r3, #224	; 0xe0
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	429a      	cmp	r2, r3
 800199e:	d002      	beq.n	80019a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	2382      	movs	r3, #130	; 0x82
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	2384      	movs	r3, #132	; 0x84
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	400b      	ands	r3, r1
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2102      	movs	r1, #2
 80019c2:	400b      	ands	r3, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2101      	movs	r1, #1
 80019cc:	400b      	ands	r3, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6999      	ldr	r1, [r3, #24]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	400b      	ands	r3, r1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2138      	movs	r1, #56	; 0x38
 80019e2:	400b      	ands	r3, r1
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	400b      	ands	r3, r1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	0011      	movs	r1, r2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2110      	movs	r1, #16
 8001a14:	400b      	ands	r3, r1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	400b      	ands	r3, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68d9      	ldr	r1, [r3, #12]
 8001a26:	23f0      	movs	r3, #240	; 0xf0
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	0011      	movs	r1, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	015b      	lsls	r3, r3, #5
 8001a36:	401a      	ands	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4907      	ldr	r1, [pc, #28]	; (8001a68 <HAL_SPI_Init+0x16c>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	225d      	movs	r2, #93	; 0x5d
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	fffff7ff 	.word	0xfffff7ff

08001a6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	1dbb      	adds	r3, r7, #6
 8001a7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a7c:	231f      	movs	r3, #31
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	225c      	movs	r2, #92	; 0x5c
 8001a88:	5c9b      	ldrb	r3, [r3, r2]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_SPI_Transmit+0x26>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e147      	b.n	8001d22 <HAL_SPI_Transmit+0x2b6>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	225c      	movs	r2, #92	; 0x5c
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a9a:	f7fe ffa7 	bl	80009ec <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001aa2:	2316      	movs	r3, #22
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	1dba      	adds	r2, r7, #6
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	225d      	movs	r2, #93	; 0x5d
 8001ab0:	5c9b      	ldrb	r3, [r3, r2]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d004      	beq.n	8001ac2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ab8:	231f      	movs	r3, #31
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	2202      	movs	r2, #2
 8001abe:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ac0:	e128      	b.n	8001d14 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_SPI_Transmit+0x64>
 8001ac8:	1dbb      	adds	r3, r7, #6
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ad0:	231f      	movs	r3, #31
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ad8:	e11c      	b.n	8001d14 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	225d      	movs	r2, #93	; 0x5d
 8001ade:	2103      	movs	r1, #3
 8001ae0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1dba      	adds	r2, r7, #6
 8001af2:	8812      	ldrh	r2, [r2, #0]
 8001af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1dba      	adds	r2, r7, #6
 8001afa:	8812      	ldrh	r2, [r2, #0]
 8001afc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2244      	movs	r2, #68	; 0x44
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2246      	movs	r2, #70	; 0x46
 8001b10:	2100      	movs	r1, #0
 8001b12:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d110      	bne.n	8001b4e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	438a      	bics	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	01c9      	lsls	r1, r1, #7
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d007      	beq.n	8001b6c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	23e0      	movs	r3, #224	; 0xe0
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d952      	bls.n	8001c1e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_SPI_Transmit+0x11e>
 8001b80:	2316      	movs	r3, #22
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d143      	bne.n	8001c12 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	1c9a      	adds	r2, r3, #2
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bae:	e030      	b.n	8001c12 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d112      	bne.n	8001be4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	1c9a      	adds	r2, r3, #2
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001be2:	e016      	b.n	8001c12 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be4:	f7fe ff02 	bl	80009ec <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d802      	bhi.n	8001bfa <HAL_SPI_Transmit+0x18e>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_SPI_Transmit+0x194>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001c00:	231f      	movs	r3, #31
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2203      	movs	r2, #3
 8001c06:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	225d      	movs	r2, #93	; 0x5d
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c10:	e080      	b.n	8001d14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1c9      	bne.n	8001bb0 <HAL_SPI_Transmit+0x144>
 8001c1c:	e053      	b.n	8001cc6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d004      	beq.n	8001c30 <HAL_SPI_Transmit+0x1c4>
 8001c26:	2316      	movs	r3, #22
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d145      	bne.n	8001cbc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001c56:	e031      	b.n	8001cbc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d113      	bne.n	8001c8e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	330c      	adds	r3, #12
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c8c:	e016      	b.n	8001cbc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c8e:	f7fe fead 	bl	80009ec <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_SPI_Transmit+0x238>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_SPI_Transmit+0x23e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d108      	bne.n	8001cbc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001caa:	231f      	movs	r3, #31
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2203      	movs	r2, #3
 8001cb0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	225d      	movs	r2, #93	; 0x5d
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001cba:	e02b      	b.n	8001d14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1c8      	bne.n	8001c58 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fcef 	bl	80026b0 <SPI_EndRxTxTransaction>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001d02:	231f      	movs	r3, #31
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e003      	b.n	8001d14 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	225d      	movs	r2, #93	; 0x5d
 8001d10:	2101      	movs	r1, #1
 8001d12:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	225c      	movs	r2, #92	; 0x5c
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d1c:	231f      	movs	r3, #31
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	781b      	ldrb	r3, [r3, #0]
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b008      	add	sp, #32
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	1dbb      	adds	r3, r7, #6
 8001d3a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d3c:	2117      	movs	r1, #23
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	225d      	movs	r2, #93	; 0x5d
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d003      	beq.n	8001d58 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d56:	e12b      	b.n	8001fb0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	2382      	movs	r3, #130	; 0x82
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d113      	bne.n	8001d8c <HAL_SPI_Receive+0x60>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10f      	bne.n	8001d8c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	225d      	movs	r2, #93	; 0x5d
 8001d70:	2104      	movs	r1, #4
 8001d72:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d74:	1dbb      	adds	r3, r7, #6
 8001d76:	881c      	ldrh	r4, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	0023      	movs	r3, r4
 8001d84:	f000 f924 	bl	8001fd0 <HAL_SPI_TransmitReceive>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	e118      	b.n	8001fbe <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	225c      	movs	r2, #92	; 0x5c
 8001d90:	5c9b      	ldrb	r3, [r3, r2]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_SPI_Receive+0x6e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e111      	b.n	8001fbe <HAL_SPI_Receive+0x292>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	225c      	movs	r2, #92	; 0x5c
 8001d9e:	2101      	movs	r1, #1
 8001da0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da2:	f7fe fe23 	bl	80009ec <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_SPI_Receive+0x8c>
 8001db0:	1dbb      	adds	r3, r7, #6
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001db8:	2317      	movs	r3, #23
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dc0:	e0f6      	b.n	8001fb0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	225d      	movs	r2, #93	; 0x5d
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1dba      	adds	r2, r7, #6
 8001dda:	2144      	movs	r1, #68	; 0x44
 8001ddc:	8812      	ldrh	r2, [r2, #0]
 8001dde:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1dba      	adds	r2, r7, #6
 8001de4:	2146      	movs	r1, #70	; 0x46
 8001de6:	8812      	ldrh	r2, [r2, #0]
 8001de8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	23e0      	movs	r3, #224	; 0xe0
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	496a      	ldr	r1, [pc, #424]	; (8001fc8 <HAL_SPI_Receive+0x29c>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	e008      	b.n	8001e38 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0149      	lsls	r1, r1, #5
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d10f      	bne.n	8001e64 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2140      	movs	r1, #64	; 0x40
 8001e50:	438a      	bics	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	495b      	ldr	r1, [pc, #364]	; (8001fcc <HAL_SPI_Receive+0x2a0>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b40      	cmp	r3, #64	; 0x40
 8001e70:	d007      	beq.n	8001e82 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2140      	movs	r1, #64	; 0x40
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	23e0      	movs	r3, #224	; 0xe0
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d900      	bls.n	8001e90 <HAL_SPI_Receive+0x164>
 8001e8e:	e071      	b.n	8001f74 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e90:	e035      	b.n	8001efe <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d117      	bne.n	8001ed0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2246      	movs	r2, #70	; 0x46
 8001ec0:	5a9b      	ldrh	r3, [r3, r2]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b299      	uxth	r1, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2246      	movs	r2, #70	; 0x46
 8001ecc:	5299      	strh	r1, [r3, r2]
 8001ece:	e016      	b.n	8001efe <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed0:	f7fe fd8c 	bl	80009ec <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d802      	bhi.n	8001ee6 <HAL_SPI_Receive+0x1ba>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_SPI_Receive+0x1c0>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d108      	bne.n	8001efe <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001eec:	2317      	movs	r3, #23
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	225d      	movs	r2, #93	; 0x5d
 8001ef8:	2101      	movs	r1, #1
 8001efa:	5499      	strb	r1, [r3, r2]
          goto error;
 8001efc:	e058      	b.n	8001fb0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2246      	movs	r2, #70	; 0x46
 8001f02:	5a9b      	ldrh	r3, [r3, r2]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1c3      	bne.n	8001e92 <HAL_SPI_Receive+0x166>
 8001f0a:	e039      	b.n	8001f80 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d115      	bne.n	8001f46 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	b292      	uxth	r2, r2
 8001f26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	1c9a      	adds	r2, r3, #2
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2246      	movs	r2, #70	; 0x46
 8001f36:	5a9b      	ldrh	r3, [r3, r2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2246      	movs	r2, #70	; 0x46
 8001f42:	5299      	strh	r1, [r3, r2]
 8001f44:	e016      	b.n	8001f74 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f46:	f7fe fd51 	bl	80009ec <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d802      	bhi.n	8001f5c <HAL_SPI_Receive+0x230>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <HAL_SPI_Receive+0x236>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001f62:	2317      	movs	r3, #23
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2203      	movs	r2, #3
 8001f68:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	225d      	movs	r2, #93	; 0x5d
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f72:	e01d      	b.n	8001fb0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2246      	movs	r2, #70	; 0x46
 8001f78:	5a9b      	ldrh	r3, [r3, r2]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1c5      	bne.n	8001f0c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	6839      	ldr	r1, [r7, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fb34 	bl	80025f4 <SPI_EndRxTransaction>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d004      	beq.n	8001fa8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001f9e:	2317      	movs	r3, #23
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e003      	b.n	8001fb0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	225d      	movs	r2, #93	; 0x5d
 8001fac:	2101      	movs	r1, #1
 8001fae:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	225c      	movs	r2, #92	; 0x5c
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fb8:	2317      	movs	r3, #23
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	781b      	ldrb	r3, [r3, #0]
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b007      	add	sp, #28
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	ffffefff 	.word	0xffffefff
 8001fcc:	ffffbfff 	.word	0xffffbfff

08001fd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	001a      	movs	r2, r3
 8001fde:	1cbb      	adds	r3, r7, #2
 8001fe0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fe6:	2323      	movs	r3, #35	; 0x23
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	225c      	movs	r2, #92	; 0x5c
 8001ff2:	5c9b      	ldrb	r3, [r3, r2]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_SPI_TransmitReceive+0x2c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e1c4      	b.n	8002386 <HAL_SPI_TransmitReceive+0x3b6>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	225c      	movs	r2, #92	; 0x5c
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002004:	f7fe fcf2 	bl	80009ec <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800200c:	201b      	movs	r0, #27
 800200e:	183b      	adds	r3, r7, r0
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	215d      	movs	r1, #93	; 0x5d
 8002014:	5c52      	ldrb	r2, [r2, r1]
 8002016:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800201e:	2312      	movs	r3, #18
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	1cba      	adds	r2, r7, #2
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002028:	183b      	adds	r3, r7, r0
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d011      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x84>
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	2382      	movs	r3, #130	; 0x82
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	429a      	cmp	r2, r3
 8002038:	d107      	bne.n	800204a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <HAL_SPI_TransmitReceive+0x7a>
 8002042:	183b      	adds	r3, r7, r0
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d004      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800204a:	2323      	movs	r3, #35	; 0x23
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
    goto error;
 8002052:	e191      	b.n	8002378 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <HAL_SPI_TransmitReceive+0x98>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_SPI_TransmitReceive+0x98>
 8002060:	1cbb      	adds	r3, r7, #2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002068:	2323      	movs	r3, #35	; 0x23
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002070:	e182      	b.n	8002378 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	225d      	movs	r2, #93	; 0x5d
 8002076:	5c9b      	ldrb	r3, [r3, r2]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b04      	cmp	r3, #4
 800207c:	d003      	beq.n	8002086 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	225d      	movs	r2, #93	; 0x5d
 8002082:	2105      	movs	r1, #5
 8002084:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1cba      	adds	r2, r7, #2
 8002096:	2146      	movs	r1, #70	; 0x46
 8002098:	8812      	ldrh	r2, [r2, #0]
 800209a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1cba      	adds	r2, r7, #2
 80020a0:	2144      	movs	r1, #68	; 0x44
 80020a2:	8812      	ldrh	r2, [r2, #0]
 80020a4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1cba      	adds	r2, r7, #2
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1cba      	adds	r2, r7, #2
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	23e0      	movs	r3, #224	; 0xe0
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d908      	bls.n	80020e6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	49ac      	ldr	r1, [pc, #688]	; (8002390 <HAL_SPI_TransmitReceive+0x3c0>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	e008      	b.n	80020f8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	0149      	lsls	r1, r1, #5
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	4013      	ands	r3, r2
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d007      	beq.n	8002116 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2140      	movs	r1, #64	; 0x40
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	23e0      	movs	r3, #224	; 0xe0
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	429a      	cmp	r2, r3
 8002120:	d800      	bhi.n	8002124 <HAL_SPI_TransmitReceive+0x154>
 8002122:	e083      	b.n	800222c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_SPI_TransmitReceive+0x168>
 800212c:	2312      	movs	r3, #18
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d000      	beq.n	8002138 <HAL_SPI_TransmitReceive+0x168>
 8002136:	e06d      	b.n	8002214 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	1c9a      	adds	r2, r3, #2
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800215c:	e05a      	b.n	8002214 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11b      	bne.n	80021a4 <HAL_SPI_TransmitReceive+0x1d4>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x1d4>
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	2b01      	cmp	r3, #1
 800217a:	d113      	bne.n	80021a4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d11c      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x21c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2246      	movs	r2, #70	; 0x46
 80021b6:	5a9b      	ldrh	r3, [r3, r2]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	b292      	uxth	r2, r2
 80021ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2246      	movs	r2, #70	; 0x46
 80021da:	5a9b      	ldrh	r3, [r3, r2]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b299      	uxth	r1, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2246      	movs	r2, #70	; 0x46
 80021e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021ec:	f7fe fbfe 	bl	80009ec <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d80b      	bhi.n	8002214 <HAL_SPI_TransmitReceive+0x244>
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	3301      	adds	r3, #1
 8002200:	d008      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002202:	2323      	movs	r3, #35	; 0x23
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2203      	movs	r2, #3
 8002208:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	225d      	movs	r2, #93	; 0x5d
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
        goto error;
 8002212:	e0b1      	b.n	8002378 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d19f      	bne.n	800215e <HAL_SPI_TransmitReceive+0x18e>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2246      	movs	r2, #70	; 0x46
 8002222:	5a9b      	ldrh	r3, [r3, r2]
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d199      	bne.n	800215e <HAL_SPI_TransmitReceive+0x18e>
 800222a:	e089      	b.n	8002340 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x270>
 8002234:	2312      	movs	r3, #18
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d000      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x270>
 800223e:	e074      	b.n	800232a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	330c      	adds	r3, #12
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002266:	e060      	b.n	800232a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d11c      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x2e0>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d017      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x2e0>
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	2b01      	cmp	r3, #1
 8002284:	d114      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d11e      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x32c>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2246      	movs	r2, #70	; 0x46
 80022c2:	5a9b      	ldrh	r3, [r3, r2]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	330c      	adds	r3, #12
 80022d0:	001a      	movs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2246      	movs	r2, #70	; 0x46
 80022ea:	5a9b      	ldrh	r3, [r3, r2]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b299      	uxth	r1, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2246      	movs	r2, #70	; 0x46
 80022f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022fc:	f7fe fb76 	bl	80009ec <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002308:	429a      	cmp	r2, r3
 800230a:	d802      	bhi.n	8002312 <HAL_SPI_TransmitReceive+0x342>
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	3301      	adds	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x348>
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002318:	2323      	movs	r3, #35	; 0x23
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	2203      	movs	r2, #3
 800231e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	225d      	movs	r2, #93	; 0x5d
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]
        goto error;
 8002328:	e026      	b.n	8002378 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d199      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x298>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2246      	movs	r2, #70	; 0x46
 8002338:	5a9b      	ldrh	r3, [r3, r2]
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d193      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 f9b2 	bl	80026b0 <SPI_EndRxTxTransaction>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d006      	beq.n	800235e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002350:	2323      	movs	r3, #35	; 0x23
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002366:	2323      	movs	r3, #35	; 0x23
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e003      	b.n	8002378 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	225d      	movs	r2, #93	; 0x5d
 8002374:	2101      	movs	r1, #1
 8002376:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	225c      	movs	r2, #92	; 0x5c
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002380:	2323      	movs	r3, #35	; 0x23
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	781b      	ldrb	r3, [r3, #0]
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b00a      	add	sp, #40	; 0x28
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	ffffefff 	.word	0xffffefff

08002394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023a4:	f7fe fb22 	bl	80009ec <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023b4:	f7fe fb1a 	bl	80009ec <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	015b      	lsls	r3, r3, #5
 80023c2:	0d1b      	lsrs	r3, r3, #20
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	4353      	muls	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ca:	e058      	b.n	800247e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	d055      	beq.n	800247e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023d2:	f7fe fb0b 	bl	80009ec <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d902      	bls.n	80023e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d142      	bne.n	800246e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	21e0      	movs	r1, #224	; 0xe0
 80023f4:	438a      	bics	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	2382      	movs	r3, #130	; 0x82
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	429a      	cmp	r2, r3
 8002402:	d113      	bne.n	800242c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	429a      	cmp	r2, r3
 800240e:	d005      	beq.n	800241c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	438a      	bics	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	019b      	lsls	r3, r3, #6
 8002434:	429a      	cmp	r2, r3
 8002436:	d110      	bne.n	800245a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	491a      	ldr	r1, [pc, #104]	; (80024ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0189      	lsls	r1, r1, #6
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	225d      	movs	r2, #93	; 0x5d
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	225c      	movs	r2, #92	; 0x5c
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e017      	b.n	800249e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3b01      	subs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	425a      	negs	r2, r3
 800248e:	4153      	adcs	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	001a      	movs	r2, r3
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d197      	bne.n	80023cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b008      	add	sp, #32
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20000000 	.word	0x20000000
 80024ac:	ffffdfff 	.word	0xffffdfff

080024b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80024be:	2317      	movs	r3, #23
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80024c6:	f7fe fa91 	bl	80009ec <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	18d3      	adds	r3, r2, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80024d6:	f7fe fa89 	bl	80009ec <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	0013      	movs	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	189b      	adds	r3, r3, r2
 80024f0:	00da      	lsls	r2, r3, #3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	0d1b      	lsrs	r3, r3, #20
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	4353      	muls	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80024fc:	e068      	b.n	80025d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	23c0      	movs	r3, #192	; 0xc0
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	429a      	cmp	r2, r3
 8002506:	d10a      	bne.n	800251e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	2117      	movs	r1, #23
 8002516:	187b      	adds	r3, r7, r1
 8002518:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800251a:	187b      	adds	r3, r7, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	d055      	beq.n	80025d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002524:	f7fe fa62 	bl	80009ec <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	429a      	cmp	r2, r3
 8002532:	d902      	bls.n	800253a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d142      	bne.n	80025c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	21e0      	movs	r1, #224	; 0xe0
 8002546:	438a      	bics	r2, r1
 8002548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2382      	movs	r3, #130	; 0x82
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	429a      	cmp	r2, r3
 8002554:	d113      	bne.n	800257e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	429a      	cmp	r2, r3
 8002560:	d005      	beq.n	800256e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	429a      	cmp	r2, r3
 800256c:	d107      	bne.n	800257e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	438a      	bics	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	429a      	cmp	r2, r3
 8002588:	d110      	bne.n	80025ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0189      	lsls	r1, r1, #6
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	225d      	movs	r2, #93	; 0x5d
 80025b0:	2101      	movs	r1, #1
 80025b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	225c      	movs	r2, #92	; 0x5c
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e010      	b.n	80025e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d18e      	bne.n	80024fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b00a      	add	sp, #40	; 0x28
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000000 	.word	0x20000000
 80025f0:	ffffdfff 	.word	0xffffdfff

080025f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	2382      	movs	r3, #130	; 0x82
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	429a      	cmp	r2, r3
 800260a:	d113      	bne.n	8002634 <SPI_EndRxTransaction+0x40>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	429a      	cmp	r2, r3
 8002616:	d005      	beq.n	8002624 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	438a      	bics	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	0013      	movs	r3, r2
 800263e:	2200      	movs	r2, #0
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	f7ff fea7 	bl	8002394 <SPI_WaitFlagStateUntilTimeout>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d007      	beq.n	800265a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264e:	2220      	movs	r2, #32
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e026      	b.n	80026a8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	2382      	movs	r3, #130	; 0x82
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	429a      	cmp	r2, r3
 8002664:	d11f      	bne.n	80026a6 <SPI_EndRxTransaction+0xb2>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	429a      	cmp	r2, r3
 8002670:	d005      	beq.n	800267e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	429a      	cmp	r2, r3
 800267c:	d113      	bne.n	80026a6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	00d9      	lsls	r1, r3, #3
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	0013      	movs	r3, r2
 800268c:	2200      	movs	r2, #0
 800268e:	f7ff ff0f 	bl	80024b0 <SPI_WaitFifoStateUntilTimeout>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d007      	beq.n	80026a6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	2220      	movs	r2, #32
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e000      	b.n	80026a8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	23c0      	movs	r3, #192	; 0xc0
 80026c0:	0159      	lsls	r1, r3, #5
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	0013      	movs	r3, r2
 80026ca:	2200      	movs	r2, #0
 80026cc:	f7ff fef0 	bl	80024b0 <SPI_WaitFifoStateUntilTimeout>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d007      	beq.n	80026e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	2220      	movs	r2, #32
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e027      	b.n	8002734 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	0013      	movs	r3, r2
 80026ee:	2200      	movs	r2, #0
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	f7ff fe4f 	bl	8002394 <SPI_WaitFlagStateUntilTimeout>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d007      	beq.n	800270a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	2220      	movs	r2, #32
 8002700:	431a      	orrs	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e014      	b.n	8002734 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	23c0      	movs	r3, #192	; 0xc0
 800270e:	00d9      	lsls	r1, r3, #3
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	0013      	movs	r3, r2
 8002718:	2200      	movs	r2, #0
 800271a:	f7ff fec9 	bl	80024b0 <SPI_WaitFifoStateUntilTimeout>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d007      	beq.n	8002732 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	2220      	movs	r2, #32
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e000      	b.n	8002734 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e04c      	b.n	80027e8 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2278      	movs	r2, #120	; 0x78
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe f81d 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2224      	movs	r2, #36	; 0x24
 800276a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f8d8 	bl	8002934 <UART_SetConfig>
 8002784:	0003      	movs	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e02c      	b.n	80027e8 <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fa0b 	bl	8002bb4 <UART_AdvFeatureConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported) and IREN (if IrDA is supported) bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4911      	ldr	r1, [pc, #68]	; (80027f0 <HAL_HalfDuplex_Init+0xb4>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2122      	movs	r1, #34	; 0x22
 80027ba:	438a      	bics	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2108      	movs	r1, #8
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fa9b 	bl	8002d1c <UART_CheckIdleState>
 80027e6:	0003      	movs	r3, r0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	ffffb7ff 	.word	0xffffb7ff

080027f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	1dbb      	adds	r3, r7, #6
 8002802:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002808:	2b20      	cmp	r3, #32
 800280a:	d000      	beq.n	800280e <HAL_UART_Transmit+0x1a>
 800280c:	e08d      	b.n	800292a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_UART_Transmit+0x28>
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e085      	b.n	800292c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	429a      	cmp	r2, r3
 800282a:	d109      	bne.n	8002840 <HAL_UART_Transmit+0x4c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d001      	beq.n	8002840 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e075      	b.n	800292c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2284      	movs	r2, #132	; 0x84
 8002844:	2100      	movs	r1, #0
 8002846:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2221      	movs	r2, #33	; 0x21
 800284c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800284e:	f7fe f8cd 	bl	80009ec <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1dba      	adds	r2, r7, #6
 800285a:	2150      	movs	r1, #80	; 0x50
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1dba      	adds	r2, r7, #6
 8002864:	2152      	movs	r1, #82	; 0x52
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	015b      	lsls	r3, r3, #5
 8002872:	429a      	cmp	r2, r3
 8002874:	d108      	bne.n	8002888 <HAL_UART_Transmit+0x94>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e003      	b.n	8002890 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002890:	e030      	b.n	80028f4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	0013      	movs	r3, r2
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	f000 fae4 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e03c      	b.n	800292c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	05d2      	lsls	r2, r2, #23
 80028c2:	0dd2      	lsrs	r2, r2, #23
 80028c4:	b292      	uxth	r2, r2
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	3302      	adds	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	e008      	b.n	80028e2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b292      	uxth	r2, r2
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2252      	movs	r2, #82	; 0x52
 80028e6:	5a9b      	ldrh	r3, [r3, r2]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b299      	uxth	r1, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2252      	movs	r2, #82	; 0x52
 80028f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2252      	movs	r2, #82	; 0x52
 80028f8:	5a9b      	ldrh	r3, [r3, r2]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1c8      	bne.n	8002892 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	0013      	movs	r3, r2
 800290a:	2200      	movs	r2, #0
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	f000 faad 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d004      	beq.n	8002920 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e005      	b.n	800292c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b008      	add	sp, #32
 8002932:	bd80      	pop	{r7, pc}

08002934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800293c:	231e      	movs	r3, #30
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a8d      	ldr	r2, [pc, #564]	; (8002b98 <UART_SetConfig+0x264>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a88      	ldr	r2, [pc, #544]	; (8002b9c <UART_SetConfig+0x268>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a7f      	ldr	r2, [pc, #508]	; (8002ba0 <UART_SetConfig+0x26c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7b      	ldr	r2, [pc, #492]	; (8002ba4 <UART_SetConfig+0x270>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d127      	bne.n	8002a0a <UART_SetConfig+0xd6>
 80029ba:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <UART_SetConfig+0x274>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2203      	movs	r2, #3
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d00d      	beq.n	80029e2 <UART_SetConfig+0xae>
 80029c6:	d81b      	bhi.n	8002a00 <UART_SetConfig+0xcc>
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d014      	beq.n	80029f6 <UART_SetConfig+0xc2>
 80029cc:	d818      	bhi.n	8002a00 <UART_SetConfig+0xcc>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <UART_SetConfig+0xa4>
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d00a      	beq.n	80029ec <UART_SetConfig+0xb8>
 80029d6:	e013      	b.n	8002a00 <UART_SetConfig+0xcc>
 80029d8:	231f      	movs	r3, #31
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e021      	b.n	8002a26 <UART_SetConfig+0xf2>
 80029e2:	231f      	movs	r3, #31
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2202      	movs	r2, #2
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e01c      	b.n	8002a26 <UART_SetConfig+0xf2>
 80029ec:	231f      	movs	r3, #31
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2204      	movs	r2, #4
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e017      	b.n	8002a26 <UART_SetConfig+0xf2>
 80029f6:	231f      	movs	r3, #31
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2208      	movs	r2, #8
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e012      	b.n	8002a26 <UART_SetConfig+0xf2>
 8002a00:	231f      	movs	r3, #31
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	2210      	movs	r2, #16
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e00d      	b.n	8002a26 <UART_SetConfig+0xf2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a67      	ldr	r2, [pc, #412]	; (8002bac <UART_SetConfig+0x278>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d104      	bne.n	8002a1e <UART_SetConfig+0xea>
 8002a14:	231f      	movs	r3, #31
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e003      	b.n	8002a26 <UART_SetConfig+0xf2>
 8002a1e:	231f      	movs	r3, #31
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2210      	movs	r2, #16
 8002a24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d15c      	bne.n	8002aec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002a32:	231f      	movs	r3, #31
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d015      	beq.n	8002a68 <UART_SetConfig+0x134>
 8002a3c:	dc18      	bgt.n	8002a70 <UART_SetConfig+0x13c>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d00d      	beq.n	8002a5e <UART_SetConfig+0x12a>
 8002a42:	dc15      	bgt.n	8002a70 <UART_SetConfig+0x13c>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <UART_SetConfig+0x11a>
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0x124>
 8002a4c:	e010      	b.n	8002a70 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4e:	f7fe fe61 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 8002a52:	0003      	movs	r3, r0
 8002a54:	61bb      	str	r3, [r7, #24]
        break;
 8002a56:	e012      	b.n	8002a7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <UART_SetConfig+0x27c>)
 8002a5a:	61bb      	str	r3, [r7, #24]
        break;
 8002a5c:	e00f      	b.n	8002a7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5e:	f7fe fdf9 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8002a62:	0003      	movs	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
        break;
 8002a66:	e00a      	b.n	8002a7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	61bb      	str	r3, [r7, #24]
        break;
 8002a6e:	e006      	b.n	8002a7e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a74:	231e      	movs	r3, #30
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
        break;
 8002a7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d100      	bne.n	8002a86 <UART_SetConfig+0x152>
 8002a84:	e07a      	b.n	8002b7c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	005a      	lsls	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	18d2      	adds	r2, r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	0019      	movs	r1, r3
 8002a98:	0010      	movs	r0, r2
 8002a9a:	f7fd fb3f 	bl	800011c <__udivsi3>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b0f      	cmp	r3, #15
 8002aa6:	d91c      	bls.n	8002ae2 <UART_SetConfig+0x1ae>
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d217      	bcs.n	8002ae2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	200e      	movs	r0, #14
 8002ab8:	183b      	adds	r3, r7, r0
 8002aba:	210f      	movs	r1, #15
 8002abc:	438a      	bics	r2, r1
 8002abe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b299      	uxth	r1, r3
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	183a      	adds	r2, r7, r0
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	183a      	adds	r2, r7, r0
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	60da      	str	r2, [r3, #12]
 8002ae0:	e04c      	b.n	8002b7c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002ae2:	231e      	movs	r3, #30
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e047      	b.n	8002b7c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aec:	231f      	movs	r3, #31
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d015      	beq.n	8002b22 <UART_SetConfig+0x1ee>
 8002af6:	dc18      	bgt.n	8002b2a <UART_SetConfig+0x1f6>
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00d      	beq.n	8002b18 <UART_SetConfig+0x1e4>
 8002afc:	dc15      	bgt.n	8002b2a <UART_SetConfig+0x1f6>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <UART_SetConfig+0x1d4>
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d005      	beq.n	8002b12 <UART_SetConfig+0x1de>
 8002b06:	e010      	b.n	8002b2a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b08:	f7fe fe04 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	61bb      	str	r3, [r7, #24]
        break;
 8002b10:	e012      	b.n	8002b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <UART_SetConfig+0x27c>)
 8002b14:	61bb      	str	r3, [r7, #24]
        break;
 8002b16:	e00f      	b.n	8002b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b18:	f7fe fd9c 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	61bb      	str	r3, [r7, #24]
        break;
 8002b20:	e00a      	b.n	8002b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	61bb      	str	r3, [r7, #24]
        break;
 8002b28:	e006      	b.n	8002b38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b2e:	231e      	movs	r3, #30
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
        break;
 8002b36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01e      	beq.n	8002b7c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085a      	lsrs	r2, r3, #1
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	18d2      	adds	r2, r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	0010      	movs	r0, r2
 8002b50:	f7fd fae4 	bl	800011c <__udivsi3>
 8002b54:	0003      	movs	r3, r0
 8002b56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	d90a      	bls.n	8002b74 <UART_SetConfig+0x240>
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	025b      	lsls	r3, r3, #9
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d205      	bcs.n	8002b74 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	e003      	b.n	8002b7c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002b74:	231e      	movs	r3, #30
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b88:	231e      	movs	r3, #30
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b008      	add	sp, #32
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	ffff69f3 	.word	0xffff69f3
 8002b9c:	ffffcfff 	.word	0xffffcfff
 8002ba0:	fffff4ff 	.word	0xfffff4ff
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40004400 	.word	0x40004400
 8002bb0:	007a1200 	.word	0x007a1200

08002bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <UART_AdvFeatureConfig+0x144>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <UART_AdvFeatureConfig+0x148>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <UART_AdvFeatureConfig+0x14c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2208      	movs	r2, #8
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <UART_AdvFeatureConfig+0x150>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2210      	movs	r2, #16
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <UART_AdvFeatureConfig+0x154>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <UART_AdvFeatureConfig+0x158>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d01d      	beq.n	8002cce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <UART_AdvFeatureConfig+0x15c>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	035b      	lsls	r3, r3, #13
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10b      	bne.n	8002cce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <UART_AdvFeatureConfig+0x160>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <UART_AdvFeatureConfig+0x164>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffdffff 	.word	0xfffdffff
 8002cfc:	fffeffff 	.word	0xfffeffff
 8002d00:	fffbffff 	.word	0xfffbffff
 8002d04:	ffff7fff 	.word	0xffff7fff
 8002d08:	ffffefff 	.word	0xffffefff
 8002d0c:	ffffdfff 	.word	0xffffdfff
 8002d10:	ffefffff 	.word	0xffefffff
 8002d14:	ff9fffff 	.word	0xff9fffff
 8002d18:	fff7ffff 	.word	0xfff7ffff

08002d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b092      	sub	sp, #72	; 0x48
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2284      	movs	r2, #132	; 0x84
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d2c:	f7fd fe5e 	bl	80009ec <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d12c      	bne.n	8002d9c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0391      	lsls	r1, r2, #14
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4a46      	ldr	r2, [pc, #280]	; (8002e64 <UART_CheckIdleState+0x148>)
 8002d4c:	9200      	str	r2, [sp, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f000 f88c 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d021      	beq.n	8002d9c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d58:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d62:	2301      	movs	r3, #1
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	f383 8810 	msr	PRIMASK, r3
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	f383 8810 	msr	PRIMASK, r3
}
 8002d88:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2278      	movs	r2, #120	; 0x78
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e05f      	b.n	8002e5c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d146      	bne.n	8002e38 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	03d1      	lsls	r1, r2, #15
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <UART_CheckIdleState+0x148>)
 8002db4:	9200      	str	r2, [sp, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f000 f858 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d03b      	beq.n	8002e38 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dca:	2301      	movs	r3, #1
 8002dcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4921      	ldr	r1, [pc, #132]	; (8002e68 <UART_CheckIdleState+0x14c>)
 8002de2:	400a      	ands	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df2:	f3ef 8310 	mrs	r3, PRIMASK
 8002df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002df8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	438a      	bics	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f383 8810 	msr	PRIMASK, r3
}
 8002e22:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	2120      	movs	r1, #32
 8002e2a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2278      	movs	r2, #120	; 0x78
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e011      	b.n	8002e5c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	2120      	movs	r1, #32
 8002e44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2278      	movs	r2, #120	; 0x78
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b010      	add	sp, #64	; 0x40
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	01ffffff 	.word	0x01ffffff
 8002e68:	fffffedf 	.word	0xfffffedf

08002e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	1dfb      	adds	r3, r7, #7
 8002e7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7c:	e04b      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	3301      	adds	r3, #1
 8002e82:	d048      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e84:	f7fd fdb2 	bl	80009ec <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e04b      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d035      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d111      	bne.n	8002edc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 f83c 	bl	8002f40 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2284      	movs	r2, #132	; 0x84
 8002ecc:	2108      	movs	r1, #8
 8002ece:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2278      	movs	r2, #120	; 0x78
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e02c      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d112      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 f81f 	bl	8002f40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2284      	movs	r2, #132	; 0x84
 8002f06:	2120      	movs	r1, #32
 8002f08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2278      	movs	r2, #120	; 0x78
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e00f      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	425a      	negs	r2, r3
 8002f26:	4153      	adcs	r3, r2
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d0a4      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	; 0x38
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f48:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4926      	ldr	r1, [pc, #152]	; (8003004 <UART_EndRxTransfer+0xc4>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f7e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
 8002f84:	2301      	movs	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	f383 8810 	msr	PRIMASK, r3
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d118      	bne.n	8002fe6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2110      	movs	r1, #16
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	2120      	movs	r1, #32
 8002fec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b00e      	add	sp, #56	; 0x38
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	fffffedf 	.word	0xfffffedf

08003008 <__errno>:
 8003008:	4b01      	ldr	r3, [pc, #4]	; (8003010 <__errno+0x8>)
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	4770      	bx	lr
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	2000000c 	.word	0x2000000c

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	2600      	movs	r6, #0
 8003018:	4d0c      	ldr	r5, [pc, #48]	; (800304c <__libc_init_array+0x38>)
 800301a:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	42a6      	cmp	r6, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	2600      	movs	r6, #0
 8003026:	f000 fc8b 	bl	8003940 <_init>
 800302a:	4d0a      	ldr	r5, [pc, #40]	; (8003054 <__libc_init_array+0x40>)
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <__libc_init_array+0x44>)
 800302e:	1b64      	subs	r4, r4, r5
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	42a6      	cmp	r6, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	00b3      	lsls	r3, r6, #2
 800303a:	58eb      	ldr	r3, [r5, r3]
 800303c:	4798      	blx	r3
 800303e:	3601      	adds	r6, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	00b3      	lsls	r3, r6, #2
 8003044:	58eb      	ldr	r3, [r5, r3]
 8003046:	4798      	blx	r3
 8003048:	3601      	adds	r6, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	080039f8 	.word	0x080039f8
 8003050:	080039f8 	.word	0x080039f8
 8003054:	080039f8 	.word	0x080039f8
 8003058:	080039fc 	.word	0x080039fc

0800305c <memset>:
 800305c:	0003      	movs	r3, r0
 800305e:	1882      	adds	r2, r0, r2
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	7019      	strb	r1, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <siprintf>:
 800306c:	b40e      	push	{r1, r2, r3}
 800306e:	b500      	push	{lr}
 8003070:	490b      	ldr	r1, [pc, #44]	; (80030a0 <siprintf+0x34>)
 8003072:	b09c      	sub	sp, #112	; 0x70
 8003074:	ab1d      	add	r3, sp, #116	; 0x74
 8003076:	9002      	str	r0, [sp, #8]
 8003078:	9006      	str	r0, [sp, #24]
 800307a:	9107      	str	r1, [sp, #28]
 800307c:	9104      	str	r1, [sp, #16]
 800307e:	4809      	ldr	r0, [pc, #36]	; (80030a4 <siprintf+0x38>)
 8003080:	4909      	ldr	r1, [pc, #36]	; (80030a8 <siprintf+0x3c>)
 8003082:	cb04      	ldmia	r3!, {r2}
 8003084:	9105      	str	r1, [sp, #20]
 8003086:	6800      	ldr	r0, [r0, #0]
 8003088:	a902      	add	r1, sp, #8
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	f000 f870 	bl	8003170 <_svfiprintf_r>
 8003090:	2300      	movs	r3, #0
 8003092:	9a02      	ldr	r2, [sp, #8]
 8003094:	7013      	strb	r3, [r2, #0]
 8003096:	b01c      	add	sp, #112	; 0x70
 8003098:	bc08      	pop	{r3}
 800309a:	b003      	add	sp, #12
 800309c:	4718      	bx	r3
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	7fffffff 	.word	0x7fffffff
 80030a4:	2000000c 	.word	0x2000000c
 80030a8:	ffff0208 	.word	0xffff0208

080030ac <__ssputs_r>:
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	688e      	ldr	r6, [r1, #8]
 80030b0:	b085      	sub	sp, #20
 80030b2:	0007      	movs	r7, r0
 80030b4:	000c      	movs	r4, r1
 80030b6:	9203      	str	r2, [sp, #12]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	429e      	cmp	r6, r3
 80030bc:	d83c      	bhi.n	8003138 <__ssputs_r+0x8c>
 80030be:	2390      	movs	r3, #144	; 0x90
 80030c0:	898a      	ldrh	r2, [r1, #12]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	421a      	tst	r2, r3
 80030c6:	d034      	beq.n	8003132 <__ssputs_r+0x86>
 80030c8:	6909      	ldr	r1, [r1, #16]
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	6960      	ldr	r0, [r4, #20]
 80030ce:	1a5b      	subs	r3, r3, r1
 80030d0:	9302      	str	r3, [sp, #8]
 80030d2:	2303      	movs	r3, #3
 80030d4:	4343      	muls	r3, r0
 80030d6:	0fdd      	lsrs	r5, r3, #31
 80030d8:	18ed      	adds	r5, r5, r3
 80030da:	9b01      	ldr	r3, [sp, #4]
 80030dc:	9802      	ldr	r0, [sp, #8]
 80030de:	3301      	adds	r3, #1
 80030e0:	181b      	adds	r3, r3, r0
 80030e2:	106d      	asrs	r5, r5, #1
 80030e4:	42ab      	cmp	r3, r5
 80030e6:	d900      	bls.n	80030ea <__ssputs_r+0x3e>
 80030e8:	001d      	movs	r5, r3
 80030ea:	0553      	lsls	r3, r2, #21
 80030ec:	d532      	bpl.n	8003154 <__ssputs_r+0xa8>
 80030ee:	0029      	movs	r1, r5
 80030f0:	0038      	movs	r0, r7
 80030f2:	f000 fb53 	bl	800379c <_malloc_r>
 80030f6:	1e06      	subs	r6, r0, #0
 80030f8:	d109      	bne.n	800310e <__ssputs_r+0x62>
 80030fa:	230c      	movs	r3, #12
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	2340      	movs	r3, #64	; 0x40
 8003100:	2001      	movs	r0, #1
 8003102:	89a2      	ldrh	r2, [r4, #12]
 8003104:	4240      	negs	r0, r0
 8003106:	4313      	orrs	r3, r2
 8003108:	81a3      	strh	r3, [r4, #12]
 800310a:	b005      	add	sp, #20
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310e:	9a02      	ldr	r2, [sp, #8]
 8003110:	6921      	ldr	r1, [r4, #16]
 8003112:	f000 faba 	bl	800368a <memcpy>
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <__ssputs_r+0xc0>)
 800311a:	401a      	ands	r2, r3
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	4313      	orrs	r3, r2
 8003120:	81a3      	strh	r3, [r4, #12]
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	6126      	str	r6, [r4, #16]
 8003126:	18f6      	adds	r6, r6, r3
 8003128:	6026      	str	r6, [r4, #0]
 800312a:	6165      	str	r5, [r4, #20]
 800312c:	9e01      	ldr	r6, [sp, #4]
 800312e:	1aed      	subs	r5, r5, r3
 8003130:	60a5      	str	r5, [r4, #8]
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	429e      	cmp	r6, r3
 8003136:	d900      	bls.n	800313a <__ssputs_r+0x8e>
 8003138:	9e01      	ldr	r6, [sp, #4]
 800313a:	0032      	movs	r2, r6
 800313c:	9903      	ldr	r1, [sp, #12]
 800313e:	6820      	ldr	r0, [r4, #0]
 8003140:	f000 faac 	bl	800369c <memmove>
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	2000      	movs	r0, #0
 8003148:	1b9b      	subs	r3, r3, r6
 800314a:	60a3      	str	r3, [r4, #8]
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	199e      	adds	r6, r3, r6
 8003150:	6026      	str	r6, [r4, #0]
 8003152:	e7da      	b.n	800310a <__ssputs_r+0x5e>
 8003154:	002a      	movs	r2, r5
 8003156:	0038      	movs	r0, r7
 8003158:	f000 fb96 	bl	8003888 <_realloc_r>
 800315c:	1e06      	subs	r6, r0, #0
 800315e:	d1e0      	bne.n	8003122 <__ssputs_r+0x76>
 8003160:	0038      	movs	r0, r7
 8003162:	6921      	ldr	r1, [r4, #16]
 8003164:	f000 faae 	bl	80036c4 <_free_r>
 8003168:	e7c7      	b.n	80030fa <__ssputs_r+0x4e>
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	fffffb7f 	.word	0xfffffb7f

08003170 <_svfiprintf_r>:
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003172:	b0a1      	sub	sp, #132	; 0x84
 8003174:	9003      	str	r0, [sp, #12]
 8003176:	001d      	movs	r5, r3
 8003178:	898b      	ldrh	r3, [r1, #12]
 800317a:	000f      	movs	r7, r1
 800317c:	0016      	movs	r6, r2
 800317e:	061b      	lsls	r3, r3, #24
 8003180:	d511      	bpl.n	80031a6 <_svfiprintf_r+0x36>
 8003182:	690b      	ldr	r3, [r1, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10e      	bne.n	80031a6 <_svfiprintf_r+0x36>
 8003188:	2140      	movs	r1, #64	; 0x40
 800318a:	f000 fb07 	bl	800379c <_malloc_r>
 800318e:	6038      	str	r0, [r7, #0]
 8003190:	6138      	str	r0, [r7, #16]
 8003192:	2800      	cmp	r0, #0
 8003194:	d105      	bne.n	80031a2 <_svfiprintf_r+0x32>
 8003196:	230c      	movs	r3, #12
 8003198:	9a03      	ldr	r2, [sp, #12]
 800319a:	3801      	subs	r0, #1
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	b021      	add	sp, #132	; 0x84
 80031a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a2:	2340      	movs	r3, #64	; 0x40
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	2300      	movs	r3, #0
 80031a8:	ac08      	add	r4, sp, #32
 80031aa:	6163      	str	r3, [r4, #20]
 80031ac:	3320      	adds	r3, #32
 80031ae:	7663      	strb	r3, [r4, #25]
 80031b0:	3310      	adds	r3, #16
 80031b2:	76a3      	strb	r3, [r4, #26]
 80031b4:	9507      	str	r5, [sp, #28]
 80031b6:	0035      	movs	r5, r6
 80031b8:	782b      	ldrb	r3, [r5, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <_svfiprintf_r+0x52>
 80031be:	2b25      	cmp	r3, #37	; 0x25
 80031c0:	d147      	bne.n	8003252 <_svfiprintf_r+0xe2>
 80031c2:	1bab      	subs	r3, r5, r6
 80031c4:	9305      	str	r3, [sp, #20]
 80031c6:	42b5      	cmp	r5, r6
 80031c8:	d00c      	beq.n	80031e4 <_svfiprintf_r+0x74>
 80031ca:	0032      	movs	r2, r6
 80031cc:	0039      	movs	r1, r7
 80031ce:	9803      	ldr	r0, [sp, #12]
 80031d0:	f7ff ff6c 	bl	80030ac <__ssputs_r>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d100      	bne.n	80031da <_svfiprintf_r+0x6a>
 80031d8:	e0ae      	b.n	8003338 <_svfiprintf_r+0x1c8>
 80031da:	6962      	ldr	r2, [r4, #20]
 80031dc:	9b05      	ldr	r3, [sp, #20]
 80031de:	4694      	mov	ip, r2
 80031e0:	4463      	add	r3, ip
 80031e2:	6163      	str	r3, [r4, #20]
 80031e4:	782b      	ldrb	r3, [r5, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d100      	bne.n	80031ec <_svfiprintf_r+0x7c>
 80031ea:	e0a5      	b.n	8003338 <_svfiprintf_r+0x1c8>
 80031ec:	2201      	movs	r2, #1
 80031ee:	2300      	movs	r3, #0
 80031f0:	4252      	negs	r2, r2
 80031f2:	6062      	str	r2, [r4, #4]
 80031f4:	a904      	add	r1, sp, #16
 80031f6:	3254      	adds	r2, #84	; 0x54
 80031f8:	1852      	adds	r2, r2, r1
 80031fa:	1c6e      	adds	r6, r5, #1
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	60e3      	str	r3, [r4, #12]
 8003200:	60a3      	str	r3, [r4, #8]
 8003202:	7013      	strb	r3, [r2, #0]
 8003204:	65a3      	str	r3, [r4, #88]	; 0x58
 8003206:	2205      	movs	r2, #5
 8003208:	7831      	ldrb	r1, [r6, #0]
 800320a:	4854      	ldr	r0, [pc, #336]	; (800335c <_svfiprintf_r+0x1ec>)
 800320c:	f000 fa32 	bl	8003674 <memchr>
 8003210:	1c75      	adds	r5, r6, #1
 8003212:	2800      	cmp	r0, #0
 8003214:	d11f      	bne.n	8003256 <_svfiprintf_r+0xe6>
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	06d3      	lsls	r3, r2, #27
 800321a:	d504      	bpl.n	8003226 <_svfiprintf_r+0xb6>
 800321c:	2353      	movs	r3, #83	; 0x53
 800321e:	a904      	add	r1, sp, #16
 8003220:	185b      	adds	r3, r3, r1
 8003222:	2120      	movs	r1, #32
 8003224:	7019      	strb	r1, [r3, #0]
 8003226:	0713      	lsls	r3, r2, #28
 8003228:	d504      	bpl.n	8003234 <_svfiprintf_r+0xc4>
 800322a:	2353      	movs	r3, #83	; 0x53
 800322c:	a904      	add	r1, sp, #16
 800322e:	185b      	adds	r3, r3, r1
 8003230:	212b      	movs	r1, #43	; 0x2b
 8003232:	7019      	strb	r1, [r3, #0]
 8003234:	7833      	ldrb	r3, [r6, #0]
 8003236:	2b2a      	cmp	r3, #42	; 0x2a
 8003238:	d016      	beq.n	8003268 <_svfiprintf_r+0xf8>
 800323a:	0035      	movs	r5, r6
 800323c:	2100      	movs	r1, #0
 800323e:	200a      	movs	r0, #10
 8003240:	68e3      	ldr	r3, [r4, #12]
 8003242:	782a      	ldrb	r2, [r5, #0]
 8003244:	1c6e      	adds	r6, r5, #1
 8003246:	3a30      	subs	r2, #48	; 0x30
 8003248:	2a09      	cmp	r2, #9
 800324a:	d94e      	bls.n	80032ea <_svfiprintf_r+0x17a>
 800324c:	2900      	cmp	r1, #0
 800324e:	d111      	bne.n	8003274 <_svfiprintf_r+0x104>
 8003250:	e017      	b.n	8003282 <_svfiprintf_r+0x112>
 8003252:	3501      	adds	r5, #1
 8003254:	e7b0      	b.n	80031b8 <_svfiprintf_r+0x48>
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <_svfiprintf_r+0x1ec>)
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	1ac0      	subs	r0, r0, r3
 800325c:	2301      	movs	r3, #1
 800325e:	4083      	lsls	r3, r0
 8003260:	4313      	orrs	r3, r2
 8003262:	002e      	movs	r6, r5
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	e7ce      	b.n	8003206 <_svfiprintf_r+0x96>
 8003268:	9b07      	ldr	r3, [sp, #28]
 800326a:	1d19      	adds	r1, r3, #4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	9107      	str	r1, [sp, #28]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db01      	blt.n	8003278 <_svfiprintf_r+0x108>
 8003274:	930b      	str	r3, [sp, #44]	; 0x2c
 8003276:	e004      	b.n	8003282 <_svfiprintf_r+0x112>
 8003278:	425b      	negs	r3, r3
 800327a:	60e3      	str	r3, [r4, #12]
 800327c:	2302      	movs	r3, #2
 800327e:	4313      	orrs	r3, r2
 8003280:	6023      	str	r3, [r4, #0]
 8003282:	782b      	ldrb	r3, [r5, #0]
 8003284:	2b2e      	cmp	r3, #46	; 0x2e
 8003286:	d10a      	bne.n	800329e <_svfiprintf_r+0x12e>
 8003288:	786b      	ldrb	r3, [r5, #1]
 800328a:	2b2a      	cmp	r3, #42	; 0x2a
 800328c:	d135      	bne.n	80032fa <_svfiprintf_r+0x18a>
 800328e:	9b07      	ldr	r3, [sp, #28]
 8003290:	3502      	adds	r5, #2
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	9207      	str	r2, [sp, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db2b      	blt.n	80032f4 <_svfiprintf_r+0x184>
 800329c:	9309      	str	r3, [sp, #36]	; 0x24
 800329e:	4e30      	ldr	r6, [pc, #192]	; (8003360 <_svfiprintf_r+0x1f0>)
 80032a0:	2203      	movs	r2, #3
 80032a2:	0030      	movs	r0, r6
 80032a4:	7829      	ldrb	r1, [r5, #0]
 80032a6:	f000 f9e5 	bl	8003674 <memchr>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d006      	beq.n	80032bc <_svfiprintf_r+0x14c>
 80032ae:	2340      	movs	r3, #64	; 0x40
 80032b0:	1b80      	subs	r0, r0, r6
 80032b2:	4083      	lsls	r3, r0
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	3501      	adds	r5, #1
 80032b8:	4313      	orrs	r3, r2
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	7829      	ldrb	r1, [r5, #0]
 80032be:	2206      	movs	r2, #6
 80032c0:	4828      	ldr	r0, [pc, #160]	; (8003364 <_svfiprintf_r+0x1f4>)
 80032c2:	1c6e      	adds	r6, r5, #1
 80032c4:	7621      	strb	r1, [r4, #24]
 80032c6:	f000 f9d5 	bl	8003674 <memchr>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d03c      	beq.n	8003348 <_svfiprintf_r+0x1d8>
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <_svfiprintf_r+0x1f8>)
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d125      	bne.n	8003320 <_svfiprintf_r+0x1b0>
 80032d4:	2207      	movs	r2, #7
 80032d6:	9b07      	ldr	r3, [sp, #28]
 80032d8:	3307      	adds	r3, #7
 80032da:	4393      	bics	r3, r2
 80032dc:	3308      	adds	r3, #8
 80032de:	9307      	str	r3, [sp, #28]
 80032e0:	6963      	ldr	r3, [r4, #20]
 80032e2:	9a04      	ldr	r2, [sp, #16]
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	6163      	str	r3, [r4, #20]
 80032e8:	e765      	b.n	80031b6 <_svfiprintf_r+0x46>
 80032ea:	4343      	muls	r3, r0
 80032ec:	0035      	movs	r5, r6
 80032ee:	2101      	movs	r1, #1
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	e7a6      	b.n	8003242 <_svfiprintf_r+0xd2>
 80032f4:	2301      	movs	r3, #1
 80032f6:	425b      	negs	r3, r3
 80032f8:	e7d0      	b.n	800329c <_svfiprintf_r+0x12c>
 80032fa:	2300      	movs	r3, #0
 80032fc:	200a      	movs	r0, #10
 80032fe:	001a      	movs	r2, r3
 8003300:	3501      	adds	r5, #1
 8003302:	6063      	str	r3, [r4, #4]
 8003304:	7829      	ldrb	r1, [r5, #0]
 8003306:	1c6e      	adds	r6, r5, #1
 8003308:	3930      	subs	r1, #48	; 0x30
 800330a:	2909      	cmp	r1, #9
 800330c:	d903      	bls.n	8003316 <_svfiprintf_r+0x1a6>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0c5      	beq.n	800329e <_svfiprintf_r+0x12e>
 8003312:	9209      	str	r2, [sp, #36]	; 0x24
 8003314:	e7c3      	b.n	800329e <_svfiprintf_r+0x12e>
 8003316:	4342      	muls	r2, r0
 8003318:	0035      	movs	r5, r6
 800331a:	2301      	movs	r3, #1
 800331c:	1852      	adds	r2, r2, r1
 800331e:	e7f1      	b.n	8003304 <_svfiprintf_r+0x194>
 8003320:	ab07      	add	r3, sp, #28
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	003a      	movs	r2, r7
 8003326:	0021      	movs	r1, r4
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <_svfiprintf_r+0x1fc>)
 800332a:	9803      	ldr	r0, [sp, #12]
 800332c:	e000      	b.n	8003330 <_svfiprintf_r+0x1c0>
 800332e:	bf00      	nop
 8003330:	9004      	str	r0, [sp, #16]
 8003332:	9b04      	ldr	r3, [sp, #16]
 8003334:	3301      	adds	r3, #1
 8003336:	d1d3      	bne.n	80032e0 <_svfiprintf_r+0x170>
 8003338:	89bb      	ldrh	r3, [r7, #12]
 800333a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800333c:	065b      	lsls	r3, r3, #25
 800333e:	d400      	bmi.n	8003342 <_svfiprintf_r+0x1d2>
 8003340:	e72d      	b.n	800319e <_svfiprintf_r+0x2e>
 8003342:	2001      	movs	r0, #1
 8003344:	4240      	negs	r0, r0
 8003346:	e72a      	b.n	800319e <_svfiprintf_r+0x2e>
 8003348:	ab07      	add	r3, sp, #28
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	003a      	movs	r2, r7
 800334e:	0021      	movs	r1, r4
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <_svfiprintf_r+0x1fc>)
 8003352:	9803      	ldr	r0, [sp, #12]
 8003354:	f000 f87c 	bl	8003450 <_printf_i>
 8003358:	e7ea      	b.n	8003330 <_svfiprintf_r+0x1c0>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	080039c4 	.word	0x080039c4
 8003360:	080039ca 	.word	0x080039ca
 8003364:	080039ce 	.word	0x080039ce
 8003368:	00000000 	.word	0x00000000
 800336c:	080030ad 	.word	0x080030ad

08003370 <_printf_common>:
 8003370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003372:	0015      	movs	r5, r2
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	688a      	ldr	r2, [r1, #8]
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	000c      	movs	r4, r1
 800337c:	9000      	str	r0, [sp, #0]
 800337e:	4293      	cmp	r3, r2
 8003380:	da00      	bge.n	8003384 <_printf_common+0x14>
 8003382:	0013      	movs	r3, r2
 8003384:	0022      	movs	r2, r4
 8003386:	602b      	str	r3, [r5, #0]
 8003388:	3243      	adds	r2, #67	; 0x43
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	2a00      	cmp	r2, #0
 800338e:	d001      	beq.n	8003394 <_printf_common+0x24>
 8003390:	3301      	adds	r3, #1
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	069b      	lsls	r3, r3, #26
 8003398:	d502      	bpl.n	80033a0 <_printf_common+0x30>
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	3302      	adds	r3, #2
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	2306      	movs	r3, #6
 80033a4:	0017      	movs	r7, r2
 80033a6:	401f      	ands	r7, r3
 80033a8:	421a      	tst	r2, r3
 80033aa:	d027      	beq.n	80033fc <_printf_common+0x8c>
 80033ac:	0023      	movs	r3, r4
 80033ae:	3343      	adds	r3, #67	; 0x43
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	4193      	sbcs	r3, r2
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	0692      	lsls	r2, r2, #26
 80033ba:	d430      	bmi.n	800341e <_printf_common+0xae>
 80033bc:	0022      	movs	r2, r4
 80033be:	9901      	ldr	r1, [sp, #4]
 80033c0:	9800      	ldr	r0, [sp, #0]
 80033c2:	9e08      	ldr	r6, [sp, #32]
 80033c4:	3243      	adds	r2, #67	; 0x43
 80033c6:	47b0      	blx	r6
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d025      	beq.n	8003418 <_printf_common+0xa8>
 80033cc:	2306      	movs	r3, #6
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	682a      	ldr	r2, [r5, #0]
 80033d2:	68e1      	ldr	r1, [r4, #12]
 80033d4:	2500      	movs	r5, #0
 80033d6:	4003      	ands	r3, r0
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d103      	bne.n	80033e4 <_printf_common+0x74>
 80033dc:	1a8d      	subs	r5, r1, r2
 80033de:	43eb      	mvns	r3, r5
 80033e0:	17db      	asrs	r3, r3, #31
 80033e2:	401d      	ands	r5, r3
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	6922      	ldr	r2, [r4, #16]
 80033e8:	4293      	cmp	r3, r2
 80033ea:	dd01      	ble.n	80033f0 <_printf_common+0x80>
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	18ed      	adds	r5, r5, r3
 80033f0:	2700      	movs	r7, #0
 80033f2:	42bd      	cmp	r5, r7
 80033f4:	d120      	bne.n	8003438 <_printf_common+0xc8>
 80033f6:	2000      	movs	r0, #0
 80033f8:	e010      	b.n	800341c <_printf_common+0xac>
 80033fa:	3701      	adds	r7, #1
 80033fc:	68e3      	ldr	r3, [r4, #12]
 80033fe:	682a      	ldr	r2, [r5, #0]
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	42bb      	cmp	r3, r7
 8003404:	ddd2      	ble.n	80033ac <_printf_common+0x3c>
 8003406:	0022      	movs	r2, r4
 8003408:	2301      	movs	r3, #1
 800340a:	9901      	ldr	r1, [sp, #4]
 800340c:	9800      	ldr	r0, [sp, #0]
 800340e:	9e08      	ldr	r6, [sp, #32]
 8003410:	3219      	adds	r2, #25
 8003412:	47b0      	blx	r6
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d1f0      	bne.n	80033fa <_printf_common+0x8a>
 8003418:	2001      	movs	r0, #1
 800341a:	4240      	negs	r0, r0
 800341c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800341e:	2030      	movs	r0, #48	; 0x30
 8003420:	18e1      	adds	r1, r4, r3
 8003422:	3143      	adds	r1, #67	; 0x43
 8003424:	7008      	strb	r0, [r1, #0]
 8003426:	0021      	movs	r1, r4
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	3145      	adds	r1, #69	; 0x45
 800342c:	7809      	ldrb	r1, [r1, #0]
 800342e:	18a2      	adds	r2, r4, r2
 8003430:	3243      	adds	r2, #67	; 0x43
 8003432:	3302      	adds	r3, #2
 8003434:	7011      	strb	r1, [r2, #0]
 8003436:	e7c1      	b.n	80033bc <_printf_common+0x4c>
 8003438:	0022      	movs	r2, r4
 800343a:	2301      	movs	r3, #1
 800343c:	9901      	ldr	r1, [sp, #4]
 800343e:	9800      	ldr	r0, [sp, #0]
 8003440:	9e08      	ldr	r6, [sp, #32]
 8003442:	321a      	adds	r2, #26
 8003444:	47b0      	blx	r6
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	d0e6      	beq.n	8003418 <_printf_common+0xa8>
 800344a:	3701      	adds	r7, #1
 800344c:	e7d1      	b.n	80033f2 <_printf_common+0x82>
	...

08003450 <_printf_i>:
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	9206      	str	r2, [sp, #24]
 8003456:	000a      	movs	r2, r1
 8003458:	3243      	adds	r2, #67	; 0x43
 800345a:	9307      	str	r3, [sp, #28]
 800345c:	9005      	str	r0, [sp, #20]
 800345e:	9204      	str	r2, [sp, #16]
 8003460:	7e0a      	ldrb	r2, [r1, #24]
 8003462:	000c      	movs	r4, r1
 8003464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003466:	2a78      	cmp	r2, #120	; 0x78
 8003468:	d807      	bhi.n	800347a <_printf_i+0x2a>
 800346a:	2a62      	cmp	r2, #98	; 0x62
 800346c:	d809      	bhi.n	8003482 <_printf_i+0x32>
 800346e:	2a00      	cmp	r2, #0
 8003470:	d100      	bne.n	8003474 <_printf_i+0x24>
 8003472:	e0c1      	b.n	80035f8 <_printf_i+0x1a8>
 8003474:	2a58      	cmp	r2, #88	; 0x58
 8003476:	d100      	bne.n	800347a <_printf_i+0x2a>
 8003478:	e08c      	b.n	8003594 <_printf_i+0x144>
 800347a:	0026      	movs	r6, r4
 800347c:	3642      	adds	r6, #66	; 0x42
 800347e:	7032      	strb	r2, [r6, #0]
 8003480:	e022      	b.n	80034c8 <_printf_i+0x78>
 8003482:	0010      	movs	r0, r2
 8003484:	3863      	subs	r0, #99	; 0x63
 8003486:	2815      	cmp	r0, #21
 8003488:	d8f7      	bhi.n	800347a <_printf_i+0x2a>
 800348a:	f7fc fe3d 	bl	8000108 <__gnu_thumb1_case_shi>
 800348e:	0016      	.short	0x0016
 8003490:	fff6001f 	.word	0xfff6001f
 8003494:	fff6fff6 	.word	0xfff6fff6
 8003498:	001ffff6 	.word	0x001ffff6
 800349c:	fff6fff6 	.word	0xfff6fff6
 80034a0:	fff6fff6 	.word	0xfff6fff6
 80034a4:	003600a8 	.word	0x003600a8
 80034a8:	fff6009a 	.word	0xfff6009a
 80034ac:	00b9fff6 	.word	0x00b9fff6
 80034b0:	0036fff6 	.word	0x0036fff6
 80034b4:	fff6fff6 	.word	0xfff6fff6
 80034b8:	009e      	.short	0x009e
 80034ba:	0026      	movs	r6, r4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	3642      	adds	r6, #66	; 0x42
 80034c0:	1d11      	adds	r1, r2, #4
 80034c2:	6019      	str	r1, [r3, #0]
 80034c4:	6813      	ldr	r3, [r2, #0]
 80034c6:	7033      	strb	r3, [r6, #0]
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0a7      	b.n	800361c <_printf_i+0x1cc>
 80034cc:	6808      	ldr	r0, [r1, #0]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	1d0a      	adds	r2, r1, #4
 80034d2:	0605      	lsls	r5, r0, #24
 80034d4:	d50b      	bpl.n	80034ee <_printf_i+0x9e>
 80034d6:	680d      	ldr	r5, [r1, #0]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	2d00      	cmp	r5, #0
 80034dc:	da03      	bge.n	80034e6 <_printf_i+0x96>
 80034de:	232d      	movs	r3, #45	; 0x2d
 80034e0:	9a04      	ldr	r2, [sp, #16]
 80034e2:	426d      	negs	r5, r5
 80034e4:	7013      	strb	r3, [r2, #0]
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <_printf_i+0x21c>)
 80034e8:	270a      	movs	r7, #10
 80034ea:	9303      	str	r3, [sp, #12]
 80034ec:	e01b      	b.n	8003526 <_printf_i+0xd6>
 80034ee:	680d      	ldr	r5, [r1, #0]
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	0641      	lsls	r1, r0, #25
 80034f4:	d5f1      	bpl.n	80034da <_printf_i+0x8a>
 80034f6:	b22d      	sxth	r5, r5
 80034f8:	e7ef      	b.n	80034da <_printf_i+0x8a>
 80034fa:	680d      	ldr	r5, [r1, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	1d08      	adds	r0, r1, #4
 8003500:	6018      	str	r0, [r3, #0]
 8003502:	062e      	lsls	r6, r5, #24
 8003504:	d501      	bpl.n	800350a <_printf_i+0xba>
 8003506:	680d      	ldr	r5, [r1, #0]
 8003508:	e003      	b.n	8003512 <_printf_i+0xc2>
 800350a:	066d      	lsls	r5, r5, #25
 800350c:	d5fb      	bpl.n	8003506 <_printf_i+0xb6>
 800350e:	680d      	ldr	r5, [r1, #0]
 8003510:	b2ad      	uxth	r5, r5
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <_printf_i+0x21c>)
 8003514:	2708      	movs	r7, #8
 8003516:	9303      	str	r3, [sp, #12]
 8003518:	2a6f      	cmp	r2, #111	; 0x6f
 800351a:	d000      	beq.n	800351e <_printf_i+0xce>
 800351c:	3702      	adds	r7, #2
 800351e:	0023      	movs	r3, r4
 8003520:	2200      	movs	r2, #0
 8003522:	3343      	adds	r3, #67	; 0x43
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	6863      	ldr	r3, [r4, #4]
 8003528:	60a3      	str	r3, [r4, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db03      	blt.n	8003536 <_printf_i+0xe6>
 800352e:	2204      	movs	r2, #4
 8003530:	6821      	ldr	r1, [r4, #0]
 8003532:	4391      	bics	r1, r2
 8003534:	6021      	str	r1, [r4, #0]
 8003536:	2d00      	cmp	r5, #0
 8003538:	d102      	bne.n	8003540 <_printf_i+0xf0>
 800353a:	9e04      	ldr	r6, [sp, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00c      	beq.n	800355a <_printf_i+0x10a>
 8003540:	9e04      	ldr	r6, [sp, #16]
 8003542:	0028      	movs	r0, r5
 8003544:	0039      	movs	r1, r7
 8003546:	f7fc fe6f 	bl	8000228 <__aeabi_uidivmod>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	3e01      	subs	r6, #1
 800354e:	5c5b      	ldrb	r3, [r3, r1]
 8003550:	7033      	strb	r3, [r6, #0]
 8003552:	002b      	movs	r3, r5
 8003554:	0005      	movs	r5, r0
 8003556:	429f      	cmp	r7, r3
 8003558:	d9f3      	bls.n	8003542 <_printf_i+0xf2>
 800355a:	2f08      	cmp	r7, #8
 800355c:	d109      	bne.n	8003572 <_printf_i+0x122>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	07db      	lsls	r3, r3, #31
 8003562:	d506      	bpl.n	8003572 <_printf_i+0x122>
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	4293      	cmp	r3, r2
 800356a:	dc02      	bgt.n	8003572 <_printf_i+0x122>
 800356c:	2330      	movs	r3, #48	; 0x30
 800356e:	3e01      	subs	r6, #1
 8003570:	7033      	strb	r3, [r6, #0]
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	1b9b      	subs	r3, r3, r6
 8003576:	6123      	str	r3, [r4, #16]
 8003578:	9b07      	ldr	r3, [sp, #28]
 800357a:	0021      	movs	r1, r4
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	9805      	ldr	r0, [sp, #20]
 8003580:	9b06      	ldr	r3, [sp, #24]
 8003582:	aa09      	add	r2, sp, #36	; 0x24
 8003584:	f7ff fef4 	bl	8003370 <_printf_common>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d14c      	bne.n	8003626 <_printf_i+0x1d6>
 800358c:	2001      	movs	r0, #1
 800358e:	4240      	negs	r0, r0
 8003590:	b00b      	add	sp, #44	; 0x2c
 8003592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003594:	3145      	adds	r1, #69	; 0x45
 8003596:	700a      	strb	r2, [r1, #0]
 8003598:	4a34      	ldr	r2, [pc, #208]	; (800366c <_printf_i+0x21c>)
 800359a:	9203      	str	r2, [sp, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	6821      	ldr	r1, [r4, #0]
 80035a0:	ca20      	ldmia	r2!, {r5}
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	0608      	lsls	r0, r1, #24
 80035a6:	d516      	bpl.n	80035d6 <_printf_i+0x186>
 80035a8:	07cb      	lsls	r3, r1, #31
 80035aa:	d502      	bpl.n	80035b2 <_printf_i+0x162>
 80035ac:	2320      	movs	r3, #32
 80035ae:	4319      	orrs	r1, r3
 80035b0:	6021      	str	r1, [r4, #0]
 80035b2:	2710      	movs	r7, #16
 80035b4:	2d00      	cmp	r5, #0
 80035b6:	d1b2      	bne.n	800351e <_printf_i+0xce>
 80035b8:	2320      	movs	r3, #32
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	439a      	bics	r2, r3
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	e7ad      	b.n	800351e <_printf_i+0xce>
 80035c2:	2220      	movs	r2, #32
 80035c4:	6809      	ldr	r1, [r1, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	6022      	str	r2, [r4, #0]
 80035ca:	0022      	movs	r2, r4
 80035cc:	2178      	movs	r1, #120	; 0x78
 80035ce:	3245      	adds	r2, #69	; 0x45
 80035d0:	7011      	strb	r1, [r2, #0]
 80035d2:	4a27      	ldr	r2, [pc, #156]	; (8003670 <_printf_i+0x220>)
 80035d4:	e7e1      	b.n	800359a <_printf_i+0x14a>
 80035d6:	0648      	lsls	r0, r1, #25
 80035d8:	d5e6      	bpl.n	80035a8 <_printf_i+0x158>
 80035da:	b2ad      	uxth	r5, r5
 80035dc:	e7e4      	b.n	80035a8 <_printf_i+0x158>
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	680d      	ldr	r5, [r1, #0]
 80035e2:	1d10      	adds	r0, r2, #4
 80035e4:	6949      	ldr	r1, [r1, #20]
 80035e6:	6018      	str	r0, [r3, #0]
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	062e      	lsls	r6, r5, #24
 80035ec:	d501      	bpl.n	80035f2 <_printf_i+0x1a2>
 80035ee:	6019      	str	r1, [r3, #0]
 80035f0:	e002      	b.n	80035f8 <_printf_i+0x1a8>
 80035f2:	066d      	lsls	r5, r5, #25
 80035f4:	d5fb      	bpl.n	80035ee <_printf_i+0x19e>
 80035f6:	8019      	strh	r1, [r3, #0]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9e04      	ldr	r6, [sp, #16]
 80035fc:	6123      	str	r3, [r4, #16]
 80035fe:	e7bb      	b.n	8003578 <_printf_i+0x128>
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	1d11      	adds	r1, r2, #4
 8003604:	6019      	str	r1, [r3, #0]
 8003606:	6816      	ldr	r6, [r2, #0]
 8003608:	2100      	movs	r1, #0
 800360a:	0030      	movs	r0, r6
 800360c:	6862      	ldr	r2, [r4, #4]
 800360e:	f000 f831 	bl	8003674 <memchr>
 8003612:	2800      	cmp	r0, #0
 8003614:	d001      	beq.n	800361a <_printf_i+0x1ca>
 8003616:	1b80      	subs	r0, r0, r6
 8003618:	6060      	str	r0, [r4, #4]
 800361a:	6863      	ldr	r3, [r4, #4]
 800361c:	6123      	str	r3, [r4, #16]
 800361e:	2300      	movs	r3, #0
 8003620:	9a04      	ldr	r2, [sp, #16]
 8003622:	7013      	strb	r3, [r2, #0]
 8003624:	e7a8      	b.n	8003578 <_printf_i+0x128>
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	0032      	movs	r2, r6
 800362a:	9906      	ldr	r1, [sp, #24]
 800362c:	9805      	ldr	r0, [sp, #20]
 800362e:	9d07      	ldr	r5, [sp, #28]
 8003630:	47a8      	blx	r5
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	d0aa      	beq.n	800358c <_printf_i+0x13c>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	079b      	lsls	r3, r3, #30
 800363a:	d415      	bmi.n	8003668 <_printf_i+0x218>
 800363c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363e:	68e0      	ldr	r0, [r4, #12]
 8003640:	4298      	cmp	r0, r3
 8003642:	daa5      	bge.n	8003590 <_printf_i+0x140>
 8003644:	0018      	movs	r0, r3
 8003646:	e7a3      	b.n	8003590 <_printf_i+0x140>
 8003648:	0022      	movs	r2, r4
 800364a:	2301      	movs	r3, #1
 800364c:	9906      	ldr	r1, [sp, #24]
 800364e:	9805      	ldr	r0, [sp, #20]
 8003650:	9e07      	ldr	r6, [sp, #28]
 8003652:	3219      	adds	r2, #25
 8003654:	47b0      	blx	r6
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	d098      	beq.n	800358c <_printf_i+0x13c>
 800365a:	3501      	adds	r5, #1
 800365c:	68e3      	ldr	r3, [r4, #12]
 800365e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	42ab      	cmp	r3, r5
 8003664:	dcf0      	bgt.n	8003648 <_printf_i+0x1f8>
 8003666:	e7e9      	b.n	800363c <_printf_i+0x1ec>
 8003668:	2500      	movs	r5, #0
 800366a:	e7f7      	b.n	800365c <_printf_i+0x20c>
 800366c:	080039d5 	.word	0x080039d5
 8003670:	080039e6 	.word	0x080039e6

08003674 <memchr>:
 8003674:	b2c9      	uxtb	r1, r1
 8003676:	1882      	adds	r2, r0, r2
 8003678:	4290      	cmp	r0, r2
 800367a:	d101      	bne.n	8003680 <memchr+0xc>
 800367c:	2000      	movs	r0, #0
 800367e:	4770      	bx	lr
 8003680:	7803      	ldrb	r3, [r0, #0]
 8003682:	428b      	cmp	r3, r1
 8003684:	d0fb      	beq.n	800367e <memchr+0xa>
 8003686:	3001      	adds	r0, #1
 8003688:	e7f6      	b.n	8003678 <memchr+0x4>

0800368a <memcpy>:
 800368a:	2300      	movs	r3, #0
 800368c:	b510      	push	{r4, lr}
 800368e:	429a      	cmp	r2, r3
 8003690:	d100      	bne.n	8003694 <memcpy+0xa>
 8003692:	bd10      	pop	{r4, pc}
 8003694:	5ccc      	ldrb	r4, [r1, r3]
 8003696:	54c4      	strb	r4, [r0, r3]
 8003698:	3301      	adds	r3, #1
 800369a:	e7f8      	b.n	800368e <memcpy+0x4>

0800369c <memmove>:
 800369c:	b510      	push	{r4, lr}
 800369e:	4288      	cmp	r0, r1
 80036a0:	d902      	bls.n	80036a8 <memmove+0xc>
 80036a2:	188b      	adds	r3, r1, r2
 80036a4:	4298      	cmp	r0, r3
 80036a6:	d303      	bcc.n	80036b0 <memmove+0x14>
 80036a8:	2300      	movs	r3, #0
 80036aa:	e007      	b.n	80036bc <memmove+0x20>
 80036ac:	5c8b      	ldrb	r3, [r1, r2]
 80036ae:	5483      	strb	r3, [r0, r2]
 80036b0:	3a01      	subs	r2, #1
 80036b2:	d2fb      	bcs.n	80036ac <memmove+0x10>
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	5ccc      	ldrb	r4, [r1, r3]
 80036b8:	54c4      	strb	r4, [r0, r3]
 80036ba:	3301      	adds	r3, #1
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1fa      	bne.n	80036b6 <memmove+0x1a>
 80036c0:	e7f8      	b.n	80036b4 <memmove+0x18>
	...

080036c4 <_free_r>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	0005      	movs	r5, r0
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d010      	beq.n	80036ee <_free_r+0x2a>
 80036cc:	1f0c      	subs	r4, r1, #4
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da00      	bge.n	80036d6 <_free_r+0x12>
 80036d4:	18e4      	adds	r4, r4, r3
 80036d6:	0028      	movs	r0, r5
 80036d8:	f000 f918 	bl	800390c <__malloc_lock>
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <_free_r+0x90>)
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <_free_r+0x2c>
 80036e4:	6063      	str	r3, [r4, #4]
 80036e6:	6014      	str	r4, [r2, #0]
 80036e8:	0028      	movs	r0, r5
 80036ea:	f000 f917 	bl	800391c <__malloc_unlock>
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	42a3      	cmp	r3, r4
 80036f2:	d908      	bls.n	8003706 <_free_r+0x42>
 80036f4:	6821      	ldr	r1, [r4, #0]
 80036f6:	1860      	adds	r0, r4, r1
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d1f3      	bne.n	80036e4 <_free_r+0x20>
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	1841      	adds	r1, r0, r1
 8003702:	6021      	str	r1, [r4, #0]
 8003704:	e7ee      	b.n	80036e4 <_free_r+0x20>
 8003706:	001a      	movs	r2, r3
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <_free_r+0x4e>
 800370e:	42a3      	cmp	r3, r4
 8003710:	d9f9      	bls.n	8003706 <_free_r+0x42>
 8003712:	6811      	ldr	r1, [r2, #0]
 8003714:	1850      	adds	r0, r2, r1
 8003716:	42a0      	cmp	r0, r4
 8003718:	d10b      	bne.n	8003732 <_free_r+0x6e>
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	1809      	adds	r1, r1, r0
 800371e:	1850      	adds	r0, r2, r1
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	4283      	cmp	r3, r0
 8003724:	d1e0      	bne.n	80036e8 <_free_r+0x24>
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	1841      	adds	r1, r0, r1
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	6053      	str	r3, [r2, #4]
 8003730:	e7da      	b.n	80036e8 <_free_r+0x24>
 8003732:	42a0      	cmp	r0, r4
 8003734:	d902      	bls.n	800373c <_free_r+0x78>
 8003736:	230c      	movs	r3, #12
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	e7d5      	b.n	80036e8 <_free_r+0x24>
 800373c:	6821      	ldr	r1, [r4, #0]
 800373e:	1860      	adds	r0, r4, r1
 8003740:	4283      	cmp	r3, r0
 8003742:	d103      	bne.n	800374c <_free_r+0x88>
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	1841      	adds	r1, r0, r1
 800374a:	6021      	str	r1, [r4, #0]
 800374c:	6063      	str	r3, [r4, #4]
 800374e:	6054      	str	r4, [r2, #4]
 8003750:	e7ca      	b.n	80036e8 <_free_r+0x24>
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	20000180 	.word	0x20000180

08003758 <sbrk_aligned>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4e0f      	ldr	r6, [pc, #60]	; (8003798 <sbrk_aligned+0x40>)
 800375c:	000d      	movs	r5, r1
 800375e:	6831      	ldr	r1, [r6, #0]
 8003760:	0004      	movs	r4, r0
 8003762:	2900      	cmp	r1, #0
 8003764:	d102      	bne.n	800376c <sbrk_aligned+0x14>
 8003766:	f000 f8bf 	bl	80038e8 <_sbrk_r>
 800376a:	6030      	str	r0, [r6, #0]
 800376c:	0029      	movs	r1, r5
 800376e:	0020      	movs	r0, r4
 8003770:	f000 f8ba 	bl	80038e8 <_sbrk_r>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d00a      	beq.n	800378e <sbrk_aligned+0x36>
 8003778:	2303      	movs	r3, #3
 800377a:	1cc5      	adds	r5, r0, #3
 800377c:	439d      	bics	r5, r3
 800377e:	42a8      	cmp	r0, r5
 8003780:	d007      	beq.n	8003792 <sbrk_aligned+0x3a>
 8003782:	1a29      	subs	r1, r5, r0
 8003784:	0020      	movs	r0, r4
 8003786:	f000 f8af 	bl	80038e8 <_sbrk_r>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	d101      	bne.n	8003792 <sbrk_aligned+0x3a>
 800378e:	2501      	movs	r5, #1
 8003790:	426d      	negs	r5, r5
 8003792:	0028      	movs	r0, r5
 8003794:	bd70      	pop	{r4, r5, r6, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	20000184 	.word	0x20000184

0800379c <_malloc_r>:
 800379c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800379e:	2203      	movs	r2, #3
 80037a0:	1ccb      	adds	r3, r1, #3
 80037a2:	4393      	bics	r3, r2
 80037a4:	3308      	adds	r3, #8
 80037a6:	0006      	movs	r6, r0
 80037a8:	001f      	movs	r7, r3
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d232      	bcs.n	8003814 <_malloc_r+0x78>
 80037ae:	270c      	movs	r7, #12
 80037b0:	42b9      	cmp	r1, r7
 80037b2:	d831      	bhi.n	8003818 <_malloc_r+0x7c>
 80037b4:	0030      	movs	r0, r6
 80037b6:	f000 f8a9 	bl	800390c <__malloc_lock>
 80037ba:	4d32      	ldr	r5, [pc, #200]	; (8003884 <_malloc_r+0xe8>)
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	001c      	movs	r4, r3
 80037c0:	2c00      	cmp	r4, #0
 80037c2:	d12e      	bne.n	8003822 <_malloc_r+0x86>
 80037c4:	0039      	movs	r1, r7
 80037c6:	0030      	movs	r0, r6
 80037c8:	f7ff ffc6 	bl	8003758 <sbrk_aligned>
 80037cc:	0004      	movs	r4, r0
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d11e      	bne.n	8003810 <_malloc_r+0x74>
 80037d2:	682c      	ldr	r4, [r5, #0]
 80037d4:	0025      	movs	r5, r4
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	d14a      	bne.n	8003870 <_malloc_r+0xd4>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	0029      	movs	r1, r5
 80037de:	18e3      	adds	r3, r4, r3
 80037e0:	0030      	movs	r0, r6
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	f000 f880 	bl	80038e8 <_sbrk_r>
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	4283      	cmp	r3, r0
 80037ec:	d143      	bne.n	8003876 <_malloc_r+0xda>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	3703      	adds	r7, #3
 80037f2:	1aff      	subs	r7, r7, r3
 80037f4:	2303      	movs	r3, #3
 80037f6:	439f      	bics	r7, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	2f0c      	cmp	r7, #12
 80037fc:	d200      	bcs.n	8003800 <_malloc_r+0x64>
 80037fe:	270c      	movs	r7, #12
 8003800:	0039      	movs	r1, r7
 8003802:	0030      	movs	r0, r6
 8003804:	f7ff ffa8 	bl	8003758 <sbrk_aligned>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d034      	beq.n	8003876 <_malloc_r+0xda>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	19df      	adds	r7, r3, r7
 8003810:	6027      	str	r7, [r4, #0]
 8003812:	e013      	b.n	800383c <_malloc_r+0xa0>
 8003814:	2b00      	cmp	r3, #0
 8003816:	dacb      	bge.n	80037b0 <_malloc_r+0x14>
 8003818:	230c      	movs	r3, #12
 800381a:	2500      	movs	r5, #0
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	0028      	movs	r0, r5
 8003820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	1bd1      	subs	r1, r2, r7
 8003826:	d420      	bmi.n	800386a <_malloc_r+0xce>
 8003828:	290b      	cmp	r1, #11
 800382a:	d917      	bls.n	800385c <_malloc_r+0xc0>
 800382c:	19e2      	adds	r2, r4, r7
 800382e:	6027      	str	r7, [r4, #0]
 8003830:	42a3      	cmp	r3, r4
 8003832:	d111      	bne.n	8003858 <_malloc_r+0xbc>
 8003834:	602a      	str	r2, [r5, #0]
 8003836:	6863      	ldr	r3, [r4, #4]
 8003838:	6011      	str	r1, [r2, #0]
 800383a:	6053      	str	r3, [r2, #4]
 800383c:	0030      	movs	r0, r6
 800383e:	0025      	movs	r5, r4
 8003840:	f000 f86c 	bl	800391c <__malloc_unlock>
 8003844:	2207      	movs	r2, #7
 8003846:	350b      	adds	r5, #11
 8003848:	1d23      	adds	r3, r4, #4
 800384a:	4395      	bics	r5, r2
 800384c:	1aea      	subs	r2, r5, r3
 800384e:	429d      	cmp	r5, r3
 8003850:	d0e5      	beq.n	800381e <_malloc_r+0x82>
 8003852:	1b5b      	subs	r3, r3, r5
 8003854:	50a3      	str	r3, [r4, r2]
 8003856:	e7e2      	b.n	800381e <_malloc_r+0x82>
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e7ec      	b.n	8003836 <_malloc_r+0x9a>
 800385c:	6862      	ldr	r2, [r4, #4]
 800385e:	42a3      	cmp	r3, r4
 8003860:	d101      	bne.n	8003866 <_malloc_r+0xca>
 8003862:	602a      	str	r2, [r5, #0]
 8003864:	e7ea      	b.n	800383c <_malloc_r+0xa0>
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e7e8      	b.n	800383c <_malloc_r+0xa0>
 800386a:	0023      	movs	r3, r4
 800386c:	6864      	ldr	r4, [r4, #4]
 800386e:	e7a7      	b.n	80037c0 <_malloc_r+0x24>
 8003870:	002c      	movs	r4, r5
 8003872:	686d      	ldr	r5, [r5, #4]
 8003874:	e7af      	b.n	80037d6 <_malloc_r+0x3a>
 8003876:	230c      	movs	r3, #12
 8003878:	0030      	movs	r0, r6
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	f000 f84e 	bl	800391c <__malloc_unlock>
 8003880:	e7cd      	b.n	800381e <_malloc_r+0x82>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	20000180 	.word	0x20000180

08003888 <_realloc_r>:
 8003888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800388a:	0007      	movs	r7, r0
 800388c:	000e      	movs	r6, r1
 800388e:	0014      	movs	r4, r2
 8003890:	2900      	cmp	r1, #0
 8003892:	d105      	bne.n	80038a0 <_realloc_r+0x18>
 8003894:	0011      	movs	r1, r2
 8003896:	f7ff ff81 	bl	800379c <_malloc_r>
 800389a:	0005      	movs	r5, r0
 800389c:	0028      	movs	r0, r5
 800389e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038a0:	2a00      	cmp	r2, #0
 80038a2:	d103      	bne.n	80038ac <_realloc_r+0x24>
 80038a4:	f7ff ff0e 	bl	80036c4 <_free_r>
 80038a8:	0025      	movs	r5, r4
 80038aa:	e7f7      	b.n	800389c <_realloc_r+0x14>
 80038ac:	f000 f83e 	bl	800392c <_malloc_usable_size_r>
 80038b0:	9001      	str	r0, [sp, #4]
 80038b2:	4284      	cmp	r4, r0
 80038b4:	d803      	bhi.n	80038be <_realloc_r+0x36>
 80038b6:	0035      	movs	r5, r6
 80038b8:	0843      	lsrs	r3, r0, #1
 80038ba:	42a3      	cmp	r3, r4
 80038bc:	d3ee      	bcc.n	800389c <_realloc_r+0x14>
 80038be:	0021      	movs	r1, r4
 80038c0:	0038      	movs	r0, r7
 80038c2:	f7ff ff6b 	bl	800379c <_malloc_r>
 80038c6:	1e05      	subs	r5, r0, #0
 80038c8:	d0e8      	beq.n	800389c <_realloc_r+0x14>
 80038ca:	9b01      	ldr	r3, [sp, #4]
 80038cc:	0022      	movs	r2, r4
 80038ce:	429c      	cmp	r4, r3
 80038d0:	d900      	bls.n	80038d4 <_realloc_r+0x4c>
 80038d2:	001a      	movs	r2, r3
 80038d4:	0031      	movs	r1, r6
 80038d6:	0028      	movs	r0, r5
 80038d8:	f7ff fed7 	bl	800368a <memcpy>
 80038dc:	0031      	movs	r1, r6
 80038de:	0038      	movs	r0, r7
 80038e0:	f7ff fef0 	bl	80036c4 <_free_r>
 80038e4:	e7da      	b.n	800389c <_realloc_r+0x14>
	...

080038e8 <_sbrk_r>:
 80038e8:	2300      	movs	r3, #0
 80038ea:	b570      	push	{r4, r5, r6, lr}
 80038ec:	4d06      	ldr	r5, [pc, #24]	; (8003908 <_sbrk_r+0x20>)
 80038ee:	0004      	movs	r4, r0
 80038f0:	0008      	movs	r0, r1
 80038f2:	602b      	str	r3, [r5, #0]
 80038f4:	f7fc ffba 	bl	800086c <_sbrk>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d103      	bne.n	8003904 <_sbrk_r+0x1c>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d000      	beq.n	8003904 <_sbrk_r+0x1c>
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20000188 	.word	0x20000188

0800390c <__malloc_lock>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4802      	ldr	r0, [pc, #8]	; (8003918 <__malloc_lock+0xc>)
 8003910:	f000 f814 	bl	800393c <__retarget_lock_acquire_recursive>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	2000018c 	.word	0x2000018c

0800391c <__malloc_unlock>:
 800391c:	b510      	push	{r4, lr}
 800391e:	4802      	ldr	r0, [pc, #8]	; (8003928 <__malloc_unlock+0xc>)
 8003920:	f000 f80d 	bl	800393e <__retarget_lock_release_recursive>
 8003924:	bd10      	pop	{r4, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	2000018c 	.word	0x2000018c

0800392c <_malloc_usable_size_r>:
 800392c:	1f0b      	subs	r3, r1, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1f18      	subs	r0, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	da01      	bge.n	800393a <_malloc_usable_size_r+0xe>
 8003936:	580b      	ldr	r3, [r1, r0]
 8003938:	18c0      	adds	r0, r0, r3
 800393a:	4770      	bx	lr

0800393c <__retarget_lock_acquire_recursive>:
 800393c:	4770      	bx	lr

0800393e <__retarget_lock_release_recursive>:
 800393e:	4770      	bx	lr

08003940 <_init>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr

0800394c <_fini>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr
