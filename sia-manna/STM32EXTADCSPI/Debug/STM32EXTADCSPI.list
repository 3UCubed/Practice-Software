
STM32EXTADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08007c68  08007c68  00017c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081ec  080081ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080081ec  080081ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081ec  080081ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080081f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001dc  080083d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080083d0  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c16  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ab  00000000  00000000  00029e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010938  00000000  00000000  0002c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb9  00000000  00000000  0003cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006057f  00000000  00000000  00047ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f24  00000000  00000000  000a80b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c50 	.word	0x08007c50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08007c50 	.word	0x08007c50

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f999 	bl	8001774 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8e9 	bl	8001624 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f98b 	bl	8001774 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f981 	bl	8001774 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f911 	bl	80016a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f907 	bl	80016a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0047      	lsls	r7, r0, #1
 80004b6:	1c0c      	adds	r4, r1, #0
 80004b8:	0a6d      	lsrs	r5, r5, #9
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	0fc6      	lsrs	r6, r0, #31
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fdiv+0x1c>
 80004c2:	e070      	b.n	80005a6 <__aeabi_fdiv+0xfe>
 80004c4:	2fff      	cmp	r7, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fdiv+0x22>
 80004c8:	e075      	b.n	80005b6 <__aeabi_fdiv+0x10e>
 80004ca:	00eb      	lsls	r3, r5, #3
 80004cc:	2580      	movs	r5, #128	; 0x80
 80004ce:	04ed      	lsls	r5, r5, #19
 80004d0:	431d      	orrs	r5, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	469a      	mov	sl, r3
 80004d8:	3f7f      	subs	r7, #127	; 0x7f
 80004da:	0260      	lsls	r0, r4, #9
 80004dc:	0a43      	lsrs	r3, r0, #9
 80004de:	4698      	mov	r8, r3
 80004e0:	0063      	lsls	r3, r4, #1
 80004e2:	0e1b      	lsrs	r3, r3, #24
 80004e4:	0fe4      	lsrs	r4, r4, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d04e      	beq.n	8000588 <__aeabi_fdiv+0xe0>
 80004ea:	2bff      	cmp	r3, #255	; 0xff
 80004ec:	d046      	beq.n	800057c <__aeabi_fdiv+0xd4>
 80004ee:	4642      	mov	r2, r8
 80004f0:	00d0      	lsls	r0, r2, #3
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4302      	orrs	r2, r0
 80004f8:	4690      	mov	r8, r2
 80004fa:	2200      	movs	r2, #0
 80004fc:	3b7f      	subs	r3, #127	; 0x7f
 80004fe:	0031      	movs	r1, r6
 8000500:	1aff      	subs	r7, r7, r3
 8000502:	464b      	mov	r3, r9
 8000504:	4061      	eors	r1, r4
 8000506:	b2c9      	uxtb	r1, r1
 8000508:	4313      	orrs	r3, r2
 800050a:	2b0f      	cmp	r3, #15
 800050c:	d900      	bls.n	8000510 <__aeabi_fdiv+0x68>
 800050e:	e0b5      	b.n	800067c <__aeabi_fdiv+0x1d4>
 8000510:	486e      	ldr	r0, [pc, #440]	; (80006cc <__aeabi_fdiv+0x224>)
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	58c3      	ldr	r3, [r0, r3]
 8000516:	469f      	mov	pc, r3
 8000518:	2300      	movs	r3, #0
 800051a:	4698      	mov	r8, r3
 800051c:	0026      	movs	r6, r4
 800051e:	4645      	mov	r5, r8
 8000520:	4692      	mov	sl, r2
 8000522:	4653      	mov	r3, sl
 8000524:	2b02      	cmp	r3, #2
 8000526:	d100      	bne.n	800052a <__aeabi_fdiv+0x82>
 8000528:	e089      	b.n	800063e <__aeabi_fdiv+0x196>
 800052a:	2b03      	cmp	r3, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e09e      	b.n	800066e <__aeabi_fdiv+0x1c6>
 8000530:	2b01      	cmp	r3, #1
 8000532:	d018      	beq.n	8000566 <__aeabi_fdiv+0xbe>
 8000534:	003b      	movs	r3, r7
 8000536:	337f      	adds	r3, #127	; 0x7f
 8000538:	2b00      	cmp	r3, #0
 800053a:	dd69      	ble.n	8000610 <__aeabi_fdiv+0x168>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	4b60      	ldr	r3, [pc, #384]	; (80006d0 <__aeabi_fdiv+0x228>)
 8000550:	401d      	ands	r5, r3
 8000552:	003b      	movs	r3, r7
 8000554:	3380      	adds	r3, #128	; 0x80
 8000556:	2bfe      	cmp	r3, #254	; 0xfe
 8000558:	dd00      	ble.n	800055c <__aeabi_fdiv+0xb4>
 800055a:	e070      	b.n	800063e <__aeabi_fdiv+0x196>
 800055c:	01ad      	lsls	r5, r5, #6
 800055e:	0a6d      	lsrs	r5, r5, #9
 8000560:	b2d8      	uxtb	r0, r3
 8000562:	e002      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000564:	000e      	movs	r6, r1
 8000566:	2000      	movs	r0, #0
 8000568:	2500      	movs	r5, #0
 800056a:	05c0      	lsls	r0, r0, #23
 800056c:	4328      	orrs	r0, r5
 800056e:	07f6      	lsls	r6, r6, #31
 8000570:	4330      	orrs	r0, r6
 8000572:	bce0      	pop	{r5, r6, r7}
 8000574:	46ba      	mov	sl, r7
 8000576:	46b1      	mov	r9, r6
 8000578:	46a8      	mov	r8, r5
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4643      	mov	r3, r8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d13f      	bne.n	8000602 <__aeabi_fdiv+0x15a>
 8000582:	2202      	movs	r2, #2
 8000584:	3fff      	subs	r7, #255	; 0xff
 8000586:	e003      	b.n	8000590 <__aeabi_fdiv+0xe8>
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d12d      	bne.n	80005ea <__aeabi_fdiv+0x142>
 800058e:	2201      	movs	r2, #1
 8000590:	0031      	movs	r1, r6
 8000592:	464b      	mov	r3, r9
 8000594:	4061      	eors	r1, r4
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4313      	orrs	r3, r2
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d834      	bhi.n	8000608 <__aeabi_fdiv+0x160>
 800059e:	484d      	ldr	r0, [pc, #308]	; (80006d4 <__aeabi_fdiv+0x22c>)
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	58c3      	ldr	r3, [r0, r3]
 80005a4:	469f      	mov	pc, r3
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d113      	bne.n	80005d2 <__aeabi_fdiv+0x12a>
 80005aa:	2304      	movs	r3, #4
 80005ac:	4699      	mov	r9, r3
 80005ae:	3b03      	subs	r3, #3
 80005b0:	2700      	movs	r7, #0
 80005b2:	469a      	mov	sl, r3
 80005b4:	e791      	b.n	80004da <__aeabi_fdiv+0x32>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d105      	bne.n	80005c6 <__aeabi_fdiv+0x11e>
 80005ba:	2308      	movs	r3, #8
 80005bc:	4699      	mov	r9, r3
 80005be:	3b06      	subs	r3, #6
 80005c0:	27ff      	movs	r7, #255	; 0xff
 80005c2:	469a      	mov	sl, r3
 80005c4:	e789      	b.n	80004da <__aeabi_fdiv+0x32>
 80005c6:	230c      	movs	r3, #12
 80005c8:	4699      	mov	r9, r3
 80005ca:	3b09      	subs	r3, #9
 80005cc:	27ff      	movs	r7, #255	; 0xff
 80005ce:	469a      	mov	sl, r3
 80005d0:	e783      	b.n	80004da <__aeabi_fdiv+0x32>
 80005d2:	0028      	movs	r0, r5
 80005d4:	f002 f822 	bl	800261c <__clzsi2>
 80005d8:	2776      	movs	r7, #118	; 0x76
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	409d      	lsls	r5, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	427f      	negs	r7, r7
 80005e2:	4699      	mov	r9, r3
 80005e4:	469a      	mov	sl, r3
 80005e6:	1a3f      	subs	r7, r7, r0
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x32>
 80005ea:	4640      	mov	r0, r8
 80005ec:	f002 f816 	bl	800261c <__clzsi2>
 80005f0:	4642      	mov	r2, r8
 80005f2:	1f43      	subs	r3, r0, #5
 80005f4:	409a      	lsls	r2, r3
 80005f6:	2376      	movs	r3, #118	; 0x76
 80005f8:	425b      	negs	r3, r3
 80005fa:	4690      	mov	r8, r2
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	2200      	movs	r2, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	2203      	movs	r2, #3
 8000606:	e77a      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000608:	000e      	movs	r6, r1
 800060a:	20ff      	movs	r0, #255	; 0xff
 800060c:	2500      	movs	r5, #0
 800060e:	e7ac      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000610:	2001      	movs	r0, #1
 8000612:	1ac0      	subs	r0, r0, r3
 8000614:	281b      	cmp	r0, #27
 8000616:	dca6      	bgt.n	8000566 <__aeabi_fdiv+0xbe>
 8000618:	379e      	adds	r7, #158	; 0x9e
 800061a:	002a      	movs	r2, r5
 800061c:	40bd      	lsls	r5, r7
 800061e:	40c2      	lsrs	r2, r0
 8000620:	1e6b      	subs	r3, r5, #1
 8000622:	419d      	sbcs	r5, r3
 8000624:	4315      	orrs	r5, r2
 8000626:	076b      	lsls	r3, r5, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 800062a:	230f      	movs	r3, #15
 800062c:	402b      	ands	r3, r5
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 8000632:	3504      	adds	r5, #4
 8000634:	016b      	lsls	r3, r5, #5
 8000636:	d544      	bpl.n	80006c2 <__aeabi_fdiv+0x21a>
 8000638:	2001      	movs	r0, #1
 800063a:	2500      	movs	r5, #0
 800063c:	e795      	b.n	800056a <__aeabi_fdiv+0xc2>
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	2500      	movs	r5, #0
 8000642:	e792      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000644:	2580      	movs	r5, #128	; 0x80
 8000646:	2600      	movs	r6, #0
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	03ed      	lsls	r5, r5, #15
 800064c:	e78d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800064e:	2300      	movs	r3, #0
 8000650:	4698      	mov	r8, r3
 8000652:	2080      	movs	r0, #128	; 0x80
 8000654:	03c0      	lsls	r0, r0, #15
 8000656:	4205      	tst	r5, r0
 8000658:	d009      	beq.n	800066e <__aeabi_fdiv+0x1c6>
 800065a:	4643      	mov	r3, r8
 800065c:	4203      	tst	r3, r0
 800065e:	d106      	bne.n	800066e <__aeabi_fdiv+0x1c6>
 8000660:	4645      	mov	r5, r8
 8000662:	4305      	orrs	r5, r0
 8000664:	026d      	lsls	r5, r5, #9
 8000666:	0026      	movs	r6, r4
 8000668:	20ff      	movs	r0, #255	; 0xff
 800066a:	0a6d      	lsrs	r5, r5, #9
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4305      	orrs	r5, r0
 8000674:	026d      	lsls	r5, r5, #9
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	0a6d      	lsrs	r5, r5, #9
 800067a:	e776      	b.n	800056a <__aeabi_fdiv+0xc2>
 800067c:	4642      	mov	r2, r8
 800067e:	016b      	lsls	r3, r5, #5
 8000680:	0150      	lsls	r0, r2, #5
 8000682:	4283      	cmp	r3, r0
 8000684:	d219      	bcs.n	80006ba <__aeabi_fdiv+0x212>
 8000686:	221b      	movs	r2, #27
 8000688:	2500      	movs	r5, #0
 800068a:	3f01      	subs	r7, #1
 800068c:	2601      	movs	r6, #1
 800068e:	001c      	movs	r4, r3
 8000690:	006d      	lsls	r5, r5, #1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2c00      	cmp	r4, #0
 8000696:	db01      	blt.n	800069c <__aeabi_fdiv+0x1f4>
 8000698:	4298      	cmp	r0, r3
 800069a:	d801      	bhi.n	80006a0 <__aeabi_fdiv+0x1f8>
 800069c:	1a1b      	subs	r3, r3, r0
 800069e:	4335      	orrs	r5, r6
 80006a0:	3a01      	subs	r2, #1
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d1f3      	bne.n	800068e <__aeabi_fdiv+0x1e6>
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	4193      	sbcs	r3, r2
 80006aa:	431d      	orrs	r5, r3
 80006ac:	003b      	movs	r3, r7
 80006ae:	337f      	adds	r3, #127	; 0x7f
 80006b0:	000e      	movs	r6, r1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd00      	ble.n	80006b8 <__aeabi_fdiv+0x210>
 80006b6:	e741      	b.n	800053c <__aeabi_fdiv+0x94>
 80006b8:	e7aa      	b.n	8000610 <__aeabi_fdiv+0x168>
 80006ba:	221a      	movs	r2, #26
 80006bc:	2501      	movs	r5, #1
 80006be:	1a1b      	subs	r3, r3, r0
 80006c0:	e7e4      	b.n	800068c <__aeabi_fdiv+0x1e4>
 80006c2:	01ad      	lsls	r5, r5, #6
 80006c4:	2000      	movs	r0, #0
 80006c6:	0a6d      	lsrs	r5, r5, #9
 80006c8:	e74f      	b.n	800056a <__aeabi_fdiv+0xc2>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	08007c9c 	.word	0x08007c9c
 80006d0:	f7ffffff 	.word	0xf7ffffff
 80006d4:	08007cdc 	.word	0x08007cdc

080006d8 <__aeabi_fmul>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	464f      	mov	r7, r9
 80006dc:	4646      	mov	r6, r8
 80006de:	46d6      	mov	lr, sl
 80006e0:	0244      	lsls	r4, r0, #9
 80006e2:	0045      	lsls	r5, r0, #1
 80006e4:	b5c0      	push	{r6, r7, lr}
 80006e6:	0a64      	lsrs	r4, r4, #9
 80006e8:	1c0f      	adds	r7, r1, #0
 80006ea:	0e2d      	lsrs	r5, r5, #24
 80006ec:	0fc6      	lsrs	r6, r0, #31
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fmul+0x1c>
 80006f2:	e08d      	b.n	8000810 <__aeabi_fmul+0x138>
 80006f4:	2dff      	cmp	r5, #255	; 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fmul+0x22>
 80006f8:	e092      	b.n	8000820 <__aeabi_fmul+0x148>
 80006fa:	2300      	movs	r3, #0
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	00e4      	lsls	r4, r4, #3
 8000704:	04c0      	lsls	r0, r0, #19
 8000706:	4304      	orrs	r4, r0
 8000708:	3d7f      	subs	r5, #127	; 0x7f
 800070a:	0278      	lsls	r0, r7, #9
 800070c:	0a43      	lsrs	r3, r0, #9
 800070e:	4698      	mov	r8, r3
 8000710:	007b      	lsls	r3, r7, #1
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	0fff      	lsrs	r7, r7, #31
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fmul+0x44>
 800071a:	e070      	b.n	80007fe <__aeabi_fmul+0x126>
 800071c:	2bff      	cmp	r3, #255	; 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fmul+0x4a>
 8000720:	e086      	b.n	8000830 <__aeabi_fmul+0x158>
 8000722:	4642      	mov	r2, r8
 8000724:	00d0      	lsls	r0, r2, #3
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	3b7f      	subs	r3, #127	; 0x7f
 800072a:	18ed      	adds	r5, r5, r3
 800072c:	2300      	movs	r3, #0
 800072e:	04d2      	lsls	r2, r2, #19
 8000730:	4302      	orrs	r2, r0
 8000732:	4690      	mov	r8, r2
 8000734:	469c      	mov	ip, r3
 8000736:	0031      	movs	r1, r6
 8000738:	464b      	mov	r3, r9
 800073a:	4079      	eors	r1, r7
 800073c:	1c68      	adds	r0, r5, #1
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d81c      	bhi.n	800077c <__aeabi_fmul+0xa4>
 8000742:	4a76      	ldr	r2, [pc, #472]	; (800091c <__aeabi_fmul+0x244>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	58d3      	ldr	r3, [r2, r3]
 8000748:	469f      	mov	pc, r3
 800074a:	0039      	movs	r1, r7
 800074c:	4644      	mov	r4, r8
 800074e:	46e2      	mov	sl, ip
 8000750:	4653      	mov	r3, sl
 8000752:	2b02      	cmp	r3, #2
 8000754:	d00f      	beq.n	8000776 <__aeabi_fmul+0x9e>
 8000756:	2b03      	cmp	r3, #3
 8000758:	d100      	bne.n	800075c <__aeabi_fmul+0x84>
 800075a:	e0d7      	b.n	800090c <__aeabi_fmul+0x234>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d137      	bne.n	80007d0 <__aeabi_fmul+0xf8>
 8000760:	2000      	movs	r0, #0
 8000762:	2400      	movs	r4, #0
 8000764:	05c0      	lsls	r0, r0, #23
 8000766:	4320      	orrs	r0, r4
 8000768:	07c9      	lsls	r1, r1, #31
 800076a:	4308      	orrs	r0, r1
 800076c:	bce0      	pop	{r5, r6, r7}
 800076e:	46ba      	mov	sl, r7
 8000770:	46b1      	mov	r9, r6
 8000772:	46a8      	mov	r8, r5
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	20ff      	movs	r0, #255	; 0xff
 8000778:	2400      	movs	r4, #0
 800077a:	e7f3      	b.n	8000764 <__aeabi_fmul+0x8c>
 800077c:	0c26      	lsrs	r6, r4, #16
 800077e:	0424      	lsls	r4, r4, #16
 8000780:	0c22      	lsrs	r2, r4, #16
 8000782:	4644      	mov	r4, r8
 8000784:	0424      	lsls	r4, r4, #16
 8000786:	0c24      	lsrs	r4, r4, #16
 8000788:	4643      	mov	r3, r8
 800078a:	0027      	movs	r7, r4
 800078c:	0c1b      	lsrs	r3, r3, #16
 800078e:	4357      	muls	r7, r2
 8000790:	4374      	muls	r4, r6
 8000792:	435a      	muls	r2, r3
 8000794:	435e      	muls	r6, r3
 8000796:	1912      	adds	r2, r2, r4
 8000798:	0c3b      	lsrs	r3, r7, #16
 800079a:	189b      	adds	r3, r3, r2
 800079c:	429c      	cmp	r4, r3
 800079e:	d903      	bls.n	80007a8 <__aeabi_fmul+0xd0>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0252      	lsls	r2, r2, #9
 80007a4:	4694      	mov	ip, r2
 80007a6:	4466      	add	r6, ip
 80007a8:	043f      	lsls	r7, r7, #16
 80007aa:	041a      	lsls	r2, r3, #16
 80007ac:	0c3f      	lsrs	r7, r7, #16
 80007ae:	19d2      	adds	r2, r2, r7
 80007b0:	0194      	lsls	r4, r2, #6
 80007b2:	1e67      	subs	r7, r4, #1
 80007b4:	41bc      	sbcs	r4, r7
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	0e92      	lsrs	r2, r2, #26
 80007ba:	199b      	adds	r3, r3, r6
 80007bc:	4314      	orrs	r4, r2
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	431c      	orrs	r4, r3
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fmul+0xf0>
 80007c6:	e09b      	b.n	8000900 <__aeabi_fmul+0x228>
 80007c8:	2301      	movs	r3, #1
 80007ca:	0862      	lsrs	r2, r4, #1
 80007cc:	401c      	ands	r4, r3
 80007ce:	4314      	orrs	r4, r2
 80007d0:	0002      	movs	r2, r0
 80007d2:	327f      	adds	r2, #127	; 0x7f
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	dd64      	ble.n	80008a2 <__aeabi_fmul+0x1ca>
 80007d8:	0763      	lsls	r3, r4, #29
 80007da:	d004      	beq.n	80007e6 <__aeabi_fmul+0x10e>
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fmul+0x10e>
 80007e4:	3404      	adds	r4, #4
 80007e6:	0123      	lsls	r3, r4, #4
 80007e8:	d503      	bpl.n	80007f2 <__aeabi_fmul+0x11a>
 80007ea:	0002      	movs	r2, r0
 80007ec:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <__aeabi_fmul+0x248>)
 80007ee:	3280      	adds	r2, #128	; 0x80
 80007f0:	401c      	ands	r4, r3
 80007f2:	2afe      	cmp	r2, #254	; 0xfe
 80007f4:	dcbf      	bgt.n	8000776 <__aeabi_fmul+0x9e>
 80007f6:	01a4      	lsls	r4, r4, #6
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	b2d0      	uxtb	r0, r2
 80007fc:	e7b2      	b.n	8000764 <__aeabi_fmul+0x8c>
 80007fe:	4643      	mov	r3, r8
 8000800:	2b00      	cmp	r3, #0
 8000802:	d13d      	bne.n	8000880 <__aeabi_fmul+0x1a8>
 8000804:	464a      	mov	r2, r9
 8000806:	3301      	adds	r3, #1
 8000808:	431a      	orrs	r2, r3
 800080a:	4691      	mov	r9, r2
 800080c:	469c      	mov	ip, r3
 800080e:	e792      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000810:	2c00      	cmp	r4, #0
 8000812:	d129      	bne.n	8000868 <__aeabi_fmul+0x190>
 8000814:	2304      	movs	r3, #4
 8000816:	4699      	mov	r9, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2500      	movs	r5, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e774      	b.n	800070a <__aeabi_fmul+0x32>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d11b      	bne.n	800085c <__aeabi_fmul+0x184>
 8000824:	2308      	movs	r3, #8
 8000826:	4699      	mov	r9, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e76c      	b.n	800070a <__aeabi_fmul+0x32>
 8000830:	4643      	mov	r3, r8
 8000832:	35ff      	adds	r5, #255	; 0xff
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10b      	bne.n	8000850 <__aeabi_fmul+0x178>
 8000838:	2302      	movs	r3, #2
 800083a:	464a      	mov	r2, r9
 800083c:	431a      	orrs	r2, r3
 800083e:	4691      	mov	r9, r2
 8000840:	469c      	mov	ip, r3
 8000842:	e778      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000844:	4653      	mov	r3, sl
 8000846:	0031      	movs	r1, r6
 8000848:	2b02      	cmp	r3, #2
 800084a:	d000      	beq.n	800084e <__aeabi_fmul+0x176>
 800084c:	e783      	b.n	8000756 <__aeabi_fmul+0x7e>
 800084e:	e792      	b.n	8000776 <__aeabi_fmul+0x9e>
 8000850:	2303      	movs	r3, #3
 8000852:	464a      	mov	r2, r9
 8000854:	431a      	orrs	r2, r3
 8000856:	4691      	mov	r9, r2
 8000858:	469c      	mov	ip, r3
 800085a:	e76c      	b.n	8000736 <__aeabi_fmul+0x5e>
 800085c:	230c      	movs	r3, #12
 800085e:	4699      	mov	r9, r3
 8000860:	3b09      	subs	r3, #9
 8000862:	25ff      	movs	r5, #255	; 0xff
 8000864:	469a      	mov	sl, r3
 8000866:	e750      	b.n	800070a <__aeabi_fmul+0x32>
 8000868:	0020      	movs	r0, r4
 800086a:	f001 fed7 	bl	800261c <__clzsi2>
 800086e:	2576      	movs	r5, #118	; 0x76
 8000870:	1f43      	subs	r3, r0, #5
 8000872:	409c      	lsls	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	426d      	negs	r5, r5
 8000878:	4699      	mov	r9, r3
 800087a:	469a      	mov	sl, r3
 800087c:	1a2d      	subs	r5, r5, r0
 800087e:	e744      	b.n	800070a <__aeabi_fmul+0x32>
 8000880:	4640      	mov	r0, r8
 8000882:	f001 fecb 	bl	800261c <__clzsi2>
 8000886:	4642      	mov	r2, r8
 8000888:	1f43      	subs	r3, r0, #5
 800088a:	409a      	lsls	r2, r3
 800088c:	2300      	movs	r3, #0
 800088e:	1a2d      	subs	r5, r5, r0
 8000890:	4690      	mov	r8, r2
 8000892:	469c      	mov	ip, r3
 8000894:	3d76      	subs	r5, #118	; 0x76
 8000896:	e74e      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000898:	2480      	movs	r4, #128	; 0x80
 800089a:	2100      	movs	r1, #0
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	03e4      	lsls	r4, r4, #15
 80008a0:	e760      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008a2:	2301      	movs	r3, #1
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	2b1b      	cmp	r3, #27
 80008a8:	dd00      	ble.n	80008ac <__aeabi_fmul+0x1d4>
 80008aa:	e759      	b.n	8000760 <__aeabi_fmul+0x88>
 80008ac:	0022      	movs	r2, r4
 80008ae:	309e      	adds	r0, #158	; 0x9e
 80008b0:	40da      	lsrs	r2, r3
 80008b2:	4084      	lsls	r4, r0
 80008b4:	0013      	movs	r3, r2
 80008b6:	1e62      	subs	r2, r4, #1
 80008b8:	4194      	sbcs	r4, r2
 80008ba:	431c      	orrs	r4, r3
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x1f2>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x1f2>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0163      	lsls	r3, r4, #5
 80008cc:	d51a      	bpl.n	8000904 <__aeabi_fmul+0x22c>
 80008ce:	2001      	movs	r0, #1
 80008d0:	2400      	movs	r4, #0
 80008d2:	e747      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008d4:	2080      	movs	r0, #128	; 0x80
 80008d6:	03c0      	lsls	r0, r0, #15
 80008d8:	4204      	tst	r4, r0
 80008da:	d009      	beq.n	80008f0 <__aeabi_fmul+0x218>
 80008dc:	4643      	mov	r3, r8
 80008de:	4203      	tst	r3, r0
 80008e0:	d106      	bne.n	80008f0 <__aeabi_fmul+0x218>
 80008e2:	4644      	mov	r4, r8
 80008e4:	4304      	orrs	r4, r0
 80008e6:	0264      	lsls	r4, r4, #9
 80008e8:	0039      	movs	r1, r7
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	e739      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008f0:	2080      	movs	r0, #128	; 0x80
 80008f2:	03c0      	lsls	r0, r0, #15
 80008f4:	4304      	orrs	r4, r0
 80008f6:	0264      	lsls	r4, r4, #9
 80008f8:	0031      	movs	r1, r6
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	0a64      	lsrs	r4, r4, #9
 80008fe:	e731      	b.n	8000764 <__aeabi_fmul+0x8c>
 8000900:	0028      	movs	r0, r5
 8000902:	e765      	b.n	80007d0 <__aeabi_fmul+0xf8>
 8000904:	01a4      	lsls	r4, r4, #6
 8000906:	2000      	movs	r0, #0
 8000908:	0a64      	lsrs	r4, r4, #9
 800090a:	e72b      	b.n	8000764 <__aeabi_fmul+0x8c>
 800090c:	2080      	movs	r0, #128	; 0x80
 800090e:	03c0      	lsls	r0, r0, #15
 8000910:	4304      	orrs	r4, r0
 8000912:	0264      	lsls	r4, r4, #9
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a64      	lsrs	r4, r4, #9
 8000918:	e724      	b.n	8000764 <__aeabi_fmul+0x8c>
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	08007d1c 	.word	0x08007d1c
 8000920:	f7ffffff 	.word	0xf7ffffff

08000924 <__aeabi_i2f>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	2800      	cmp	r0, #0
 8000928:	d013      	beq.n	8000952 <__aeabi_i2f+0x2e>
 800092a:	17c3      	asrs	r3, r0, #31
 800092c:	18c6      	adds	r6, r0, r3
 800092e:	405e      	eors	r6, r3
 8000930:	0fc4      	lsrs	r4, r0, #31
 8000932:	0030      	movs	r0, r6
 8000934:	f001 fe72 	bl	800261c <__clzsi2>
 8000938:	239e      	movs	r3, #158	; 0x9e
 800093a:	0005      	movs	r5, r0
 800093c:	1a1b      	subs	r3, r3, r0
 800093e:	2b96      	cmp	r3, #150	; 0x96
 8000940:	dc0f      	bgt.n	8000962 <__aeabi_i2f+0x3e>
 8000942:	2808      	cmp	r0, #8
 8000944:	dd01      	ble.n	800094a <__aeabi_i2f+0x26>
 8000946:	3d08      	subs	r5, #8
 8000948:	40ae      	lsls	r6, r5
 800094a:	0276      	lsls	r6, r6, #9
 800094c:	0a76      	lsrs	r6, r6, #9
 800094e:	b2d8      	uxtb	r0, r3
 8000950:	e002      	b.n	8000958 <__aeabi_i2f+0x34>
 8000952:	2400      	movs	r4, #0
 8000954:	2000      	movs	r0, #0
 8000956:	2600      	movs	r6, #0
 8000958:	05c0      	lsls	r0, r0, #23
 800095a:	4330      	orrs	r0, r6
 800095c:	07e4      	lsls	r4, r4, #31
 800095e:	4320      	orrs	r0, r4
 8000960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000962:	2b99      	cmp	r3, #153	; 0x99
 8000964:	dd0c      	ble.n	8000980 <__aeabi_i2f+0x5c>
 8000966:	2205      	movs	r2, #5
 8000968:	0031      	movs	r1, r6
 800096a:	1a12      	subs	r2, r2, r0
 800096c:	40d1      	lsrs	r1, r2
 800096e:	000a      	movs	r2, r1
 8000970:	0001      	movs	r1, r0
 8000972:	0030      	movs	r0, r6
 8000974:	311b      	adds	r1, #27
 8000976:	4088      	lsls	r0, r1
 8000978:	1e41      	subs	r1, r0, #1
 800097a:	4188      	sbcs	r0, r1
 800097c:	4302      	orrs	r2, r0
 800097e:	0016      	movs	r6, r2
 8000980:	2d05      	cmp	r5, #5
 8000982:	dc12      	bgt.n	80009aa <__aeabi_i2f+0x86>
 8000984:	0031      	movs	r1, r6
 8000986:	4f0d      	ldr	r7, [pc, #52]	; (80009bc <__aeabi_i2f+0x98>)
 8000988:	4039      	ands	r1, r7
 800098a:	0772      	lsls	r2, r6, #29
 800098c:	d009      	beq.n	80009a2 <__aeabi_i2f+0x7e>
 800098e:	200f      	movs	r0, #15
 8000990:	4030      	ands	r0, r6
 8000992:	2804      	cmp	r0, #4
 8000994:	d005      	beq.n	80009a2 <__aeabi_i2f+0x7e>
 8000996:	3104      	adds	r1, #4
 8000998:	014a      	lsls	r2, r1, #5
 800099a:	d502      	bpl.n	80009a2 <__aeabi_i2f+0x7e>
 800099c:	239f      	movs	r3, #159	; 0x9f
 800099e:	4039      	ands	r1, r7
 80009a0:	1b5b      	subs	r3, r3, r5
 80009a2:	0189      	lsls	r1, r1, #6
 80009a4:	0a4e      	lsrs	r6, r1, #9
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	e7d6      	b.n	8000958 <__aeabi_i2f+0x34>
 80009aa:	1f6a      	subs	r2, r5, #5
 80009ac:	4096      	lsls	r6, r2
 80009ae:	0031      	movs	r1, r6
 80009b0:	4f02      	ldr	r7, [pc, #8]	; (80009bc <__aeabi_i2f+0x98>)
 80009b2:	4039      	ands	r1, r7
 80009b4:	0772      	lsls	r2, r6, #29
 80009b6:	d0f4      	beq.n	80009a2 <__aeabi_i2f+0x7e>
 80009b8:	e7e9      	b.n	800098e <__aeabi_i2f+0x6a>
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	fbffffff 	.word	0xfbffffff

080009c0 <__aeabi_dadd>:
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c2:	464f      	mov	r7, r9
 80009c4:	4646      	mov	r6, r8
 80009c6:	46d6      	mov	lr, sl
 80009c8:	000d      	movs	r5, r1
 80009ca:	0004      	movs	r4, r0
 80009cc:	b5c0      	push	{r6, r7, lr}
 80009ce:	001f      	movs	r7, r3
 80009d0:	0011      	movs	r1, r2
 80009d2:	0328      	lsls	r0, r5, #12
 80009d4:	0f62      	lsrs	r2, r4, #29
 80009d6:	0a40      	lsrs	r0, r0, #9
 80009d8:	4310      	orrs	r0, r2
 80009da:	007a      	lsls	r2, r7, #1
 80009dc:	0d52      	lsrs	r2, r2, #21
 80009de:	00e3      	lsls	r3, r4, #3
 80009e0:	033c      	lsls	r4, r7, #12
 80009e2:	4691      	mov	r9, r2
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0ffa      	lsrs	r2, r7, #31
 80009e8:	0f4f      	lsrs	r7, r1, #29
 80009ea:	006e      	lsls	r6, r5, #1
 80009ec:	4327      	orrs	r7, r4
 80009ee:	4692      	mov	sl, r2
 80009f0:	46b8      	mov	r8, r7
 80009f2:	0d76      	lsrs	r6, r6, #21
 80009f4:	0fed      	lsrs	r5, r5, #31
 80009f6:	00c9      	lsls	r1, r1, #3
 80009f8:	4295      	cmp	r5, r2
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x3e>
 80009fc:	e099      	b.n	8000b32 <__aeabi_dadd+0x172>
 80009fe:	464c      	mov	r4, r9
 8000a00:	1b34      	subs	r4, r6, r4
 8000a02:	46a4      	mov	ip, r4
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	dc00      	bgt.n	8000a0a <__aeabi_dadd+0x4a>
 8000a08:	e07c      	b.n	8000b04 <__aeabi_dadd+0x144>
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x52>
 8000a10:	e0b8      	b.n	8000b84 <__aeabi_dadd+0x1c4>
 8000a12:	4ac5      	ldr	r2, [pc, #788]	; (8000d28 <__aeabi_dadd+0x368>)
 8000a14:	4296      	cmp	r6, r2
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x5a>
 8000a18:	e11c      	b.n	8000c54 <__aeabi_dadd+0x294>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	003c      	movs	r4, r7
 8000a1e:	0412      	lsls	r2, r2, #16
 8000a20:	4314      	orrs	r4, r2
 8000a22:	46a0      	mov	r8, r4
 8000a24:	4662      	mov	r2, ip
 8000a26:	2a38      	cmp	r2, #56	; 0x38
 8000a28:	dd00      	ble.n	8000a2c <__aeabi_dadd+0x6c>
 8000a2a:	e161      	b.n	8000cf0 <__aeabi_dadd+0x330>
 8000a2c:	2a1f      	cmp	r2, #31
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dadd+0x72>
 8000a30:	e1cc      	b.n	8000dcc <__aeabi_dadd+0x40c>
 8000a32:	4664      	mov	r4, ip
 8000a34:	2220      	movs	r2, #32
 8000a36:	1b12      	subs	r2, r2, r4
 8000a38:	4644      	mov	r4, r8
 8000a3a:	4094      	lsls	r4, r2
 8000a3c:	000f      	movs	r7, r1
 8000a3e:	46a1      	mov	r9, r4
 8000a40:	4664      	mov	r4, ip
 8000a42:	4091      	lsls	r1, r2
 8000a44:	40e7      	lsrs	r7, r4
 8000a46:	464c      	mov	r4, r9
 8000a48:	1e4a      	subs	r2, r1, #1
 8000a4a:	4191      	sbcs	r1, r2
 8000a4c:	433c      	orrs	r4, r7
 8000a4e:	4642      	mov	r2, r8
 8000a50:	4321      	orrs	r1, r4
 8000a52:	4664      	mov	r4, ip
 8000a54:	40e2      	lsrs	r2, r4
 8000a56:	1a80      	subs	r0, r0, r2
 8000a58:	1a5c      	subs	r4, r3, r1
 8000a5a:	42a3      	cmp	r3, r4
 8000a5c:	419b      	sbcs	r3, r3
 8000a5e:	425f      	negs	r7, r3
 8000a60:	1bc7      	subs	r7, r0, r7
 8000a62:	023b      	lsls	r3, r7, #8
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_dadd+0xa8>
 8000a66:	e0d0      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000a68:	027f      	lsls	r7, r7, #9
 8000a6a:	0a7f      	lsrs	r7, r7, #9
 8000a6c:	2f00      	cmp	r7, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0xb2>
 8000a70:	e0ff      	b.n	8000c72 <__aeabi_dadd+0x2b2>
 8000a72:	0038      	movs	r0, r7
 8000a74:	f001 fdd2 	bl	800261c <__clzsi2>
 8000a78:	0001      	movs	r1, r0
 8000a7a:	3908      	subs	r1, #8
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	0022      	movs	r2, r4
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	408f      	lsls	r7, r1
 8000a84:	40da      	lsrs	r2, r3
 8000a86:	408c      	lsls	r4, r1
 8000a88:	4317      	orrs	r7, r2
 8000a8a:	42b1      	cmp	r1, r6
 8000a8c:	da00      	bge.n	8000a90 <__aeabi_dadd+0xd0>
 8000a8e:	e0ff      	b.n	8000c90 <__aeabi_dadd+0x2d0>
 8000a90:	1b89      	subs	r1, r1, r6
 8000a92:	1c4b      	adds	r3, r1, #1
 8000a94:	2b1f      	cmp	r3, #31
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0xda>
 8000a98:	e0a8      	b.n	8000bec <__aeabi_dadd+0x22c>
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	0039      	movs	r1, r7
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	40d8      	lsrs	r0, r3
 8000aa8:	1e62      	subs	r2, r4, #1
 8000aaa:	4194      	sbcs	r4, r2
 8000aac:	40df      	lsrs	r7, r3
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4301      	orrs	r1, r0
 8000ab2:	430c      	orrs	r4, r1
 8000ab4:	0763      	lsls	r3, r4, #29
 8000ab6:	d009      	beq.n	8000acc <__aeabi_dadd+0x10c>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d005      	beq.n	8000acc <__aeabi_dadd+0x10c>
 8000ac0:	1d23      	adds	r3, r4, #4
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	41a4      	sbcs	r4, r4
 8000ac6:	4264      	negs	r4, r4
 8000ac8:	193f      	adds	r7, r7, r4
 8000aca:	001c      	movs	r4, r3
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x112>
 8000ad0:	e09e      	b.n	8000c10 <__aeabi_dadd+0x250>
 8000ad2:	4b95      	ldr	r3, [pc, #596]	; (8000d28 <__aeabi_dadd+0x368>)
 8000ad4:	3601      	adds	r6, #1
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x11c>
 8000ada:	e0b7      	b.n	8000c4c <__aeabi_dadd+0x28c>
 8000adc:	4a93      	ldr	r2, [pc, #588]	; (8000d2c <__aeabi_dadd+0x36c>)
 8000ade:	08e4      	lsrs	r4, r4, #3
 8000ae0:	4017      	ands	r7, r2
 8000ae2:	077b      	lsls	r3, r7, #29
 8000ae4:	0571      	lsls	r1, r6, #21
 8000ae6:	027f      	lsls	r7, r7, #9
 8000ae8:	4323      	orrs	r3, r4
 8000aea:	0b3f      	lsrs	r7, r7, #12
 8000aec:	0d4a      	lsrs	r2, r1, #21
 8000aee:	0512      	lsls	r2, r2, #20
 8000af0:	433a      	orrs	r2, r7
 8000af2:	07ed      	lsls	r5, r5, #31
 8000af4:	432a      	orrs	r2, r5
 8000af6:	0018      	movs	r0, r3
 8000af8:	0011      	movs	r1, r2
 8000afa:	bce0      	pop	{r5, r6, r7}
 8000afc:	46ba      	mov	sl, r7
 8000afe:	46b1      	mov	r9, r6
 8000b00:	46a8      	mov	r8, r5
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d04b      	beq.n	8000ba0 <__aeabi_dadd+0x1e0>
 8000b08:	464c      	mov	r4, r9
 8000b0a:	1ba4      	subs	r4, r4, r6
 8000b0c:	46a4      	mov	ip, r4
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d000      	beq.n	8000b14 <__aeabi_dadd+0x154>
 8000b12:	e123      	b.n	8000d5c <__aeabi_dadd+0x39c>
 8000b14:	0004      	movs	r4, r0
 8000b16:	431c      	orrs	r4, r3
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x15c>
 8000b1a:	e1af      	b.n	8000e7c <__aeabi_dadd+0x4bc>
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	1e54      	subs	r4, r2, #1
 8000b20:	2a01      	cmp	r2, #1
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x166>
 8000b24:	e215      	b.n	8000f52 <__aeabi_dadd+0x592>
 8000b26:	4d80      	ldr	r5, [pc, #512]	; (8000d28 <__aeabi_dadd+0x368>)
 8000b28:	45ac      	cmp	ip, r5
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x16e>
 8000b2c:	e1c8      	b.n	8000ec0 <__aeabi_dadd+0x500>
 8000b2e:	46a4      	mov	ip, r4
 8000b30:	e11b      	b.n	8000d6a <__aeabi_dadd+0x3aa>
 8000b32:	464a      	mov	r2, r9
 8000b34:	1ab2      	subs	r2, r6, r2
 8000b36:	4694      	mov	ip, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_dadd+0x17e>
 8000b3c:	e0ac      	b.n	8000c98 <__aeabi_dadd+0x2d8>
 8000b3e:	464a      	mov	r2, r9
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d043      	beq.n	8000bcc <__aeabi_dadd+0x20c>
 8000b44:	4a78      	ldr	r2, [pc, #480]	; (8000d28 <__aeabi_dadd+0x368>)
 8000b46:	4296      	cmp	r6, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x18c>
 8000b4a:	e1af      	b.n	8000eac <__aeabi_dadd+0x4ec>
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	003c      	movs	r4, r7
 8000b50:	0412      	lsls	r2, r2, #16
 8000b52:	4314      	orrs	r4, r2
 8000b54:	46a0      	mov	r8, r4
 8000b56:	4662      	mov	r2, ip
 8000b58:	2a38      	cmp	r2, #56	; 0x38
 8000b5a:	dc67      	bgt.n	8000c2c <__aeabi_dadd+0x26c>
 8000b5c:	2a1f      	cmp	r2, #31
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_dadd+0x1a2>
 8000b60:	e15f      	b.n	8000e22 <__aeabi_dadd+0x462>
 8000b62:	4647      	mov	r7, r8
 8000b64:	3a20      	subs	r2, #32
 8000b66:	40d7      	lsrs	r7, r2
 8000b68:	4662      	mov	r2, ip
 8000b6a:	2a20      	cmp	r2, #32
 8000b6c:	d005      	beq.n	8000b7a <__aeabi_dadd+0x1ba>
 8000b6e:	4664      	mov	r4, ip
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	1b12      	subs	r2, r2, r4
 8000b74:	4644      	mov	r4, r8
 8000b76:	4094      	lsls	r4, r2
 8000b78:	4321      	orrs	r1, r4
 8000b7a:	1e4a      	subs	r2, r1, #1
 8000b7c:	4191      	sbcs	r1, r2
 8000b7e:	000c      	movs	r4, r1
 8000b80:	433c      	orrs	r4, r7
 8000b82:	e057      	b.n	8000c34 <__aeabi_dadd+0x274>
 8000b84:	003a      	movs	r2, r7
 8000b86:	430a      	orrs	r2, r1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x1cc>
 8000b8a:	e105      	b.n	8000d98 <__aeabi_dadd+0x3d8>
 8000b8c:	0022      	movs	r2, r4
 8000b8e:	3a01      	subs	r2, #1
 8000b90:	2c01      	cmp	r4, #1
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x1d6>
 8000b94:	e182      	b.n	8000e9c <__aeabi_dadd+0x4dc>
 8000b96:	4c64      	ldr	r4, [pc, #400]	; (8000d28 <__aeabi_dadd+0x368>)
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	d05b      	beq.n	8000c54 <__aeabi_dadd+0x294>
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	e741      	b.n	8000a24 <__aeabi_dadd+0x64>
 8000ba0:	4c63      	ldr	r4, [pc, #396]	; (8000d30 <__aeabi_dadd+0x370>)
 8000ba2:	1c77      	adds	r7, r6, #1
 8000ba4:	4227      	tst	r7, r4
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x1ea>
 8000ba8:	e0c4      	b.n	8000d34 <__aeabi_dadd+0x374>
 8000baa:	0004      	movs	r4, r0
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_dadd+0x1f4>
 8000bb2:	e169      	b.n	8000e88 <__aeabi_dadd+0x4c8>
 8000bb4:	2c00      	cmp	r4, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dadd+0x1fa>
 8000bb8:	e1bf      	b.n	8000f3a <__aeabi_dadd+0x57a>
 8000bba:	4644      	mov	r4, r8
 8000bbc:	430c      	orrs	r4, r1
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x202>
 8000bc0:	e1d0      	b.n	8000f64 <__aeabi_dadd+0x5a4>
 8000bc2:	0742      	lsls	r2, r0, #29
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	08c0      	lsrs	r0, r0, #3
 8000bca:	e029      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000bcc:	003a      	movs	r2, r7
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x214>
 8000bd2:	e170      	b.n	8000eb6 <__aeabi_dadd+0x4f6>
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	4664      	mov	r4, ip
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	2c01      	cmp	r4, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x220>
 8000bde:	e0e0      	b.n	8000da2 <__aeabi_dadd+0x3e2>
 8000be0:	4c51      	ldr	r4, [pc, #324]	; (8000d28 <__aeabi_dadd+0x368>)
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x228>
 8000be6:	e161      	b.n	8000eac <__aeabi_dadd+0x4ec>
 8000be8:	4694      	mov	ip, r2
 8000bea:	e7b4      	b.n	8000b56 <__aeabi_dadd+0x196>
 8000bec:	003a      	movs	r2, r7
 8000bee:	391f      	subs	r1, #31
 8000bf0:	40ca      	lsrs	r2, r1
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	2b20      	cmp	r3, #32
 8000bf6:	d003      	beq.n	8000c00 <__aeabi_dadd+0x240>
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	433c      	orrs	r4, r7
 8000c00:	1e63      	subs	r3, r4, #1
 8000c02:	419c      	sbcs	r4, r3
 8000c04:	2700      	movs	r7, #0
 8000c06:	2600      	movs	r6, #0
 8000c08:	430c      	orrs	r4, r1
 8000c0a:	0763      	lsls	r3, r4, #29
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_dadd+0x250>
 8000c0e:	e753      	b.n	8000ab8 <__aeabi_dadd+0xf8>
 8000c10:	46b4      	mov	ip, r6
 8000c12:	08e4      	lsrs	r4, r4, #3
 8000c14:	077b      	lsls	r3, r7, #29
 8000c16:	4323      	orrs	r3, r4
 8000c18:	08f8      	lsrs	r0, r7, #3
 8000c1a:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <__aeabi_dadd+0x368>)
 8000c1c:	4594      	cmp	ip, r2
 8000c1e:	d01d      	beq.n	8000c5c <__aeabi_dadd+0x29c>
 8000c20:	4662      	mov	r2, ip
 8000c22:	0307      	lsls	r7, r0, #12
 8000c24:	0552      	lsls	r2, r2, #21
 8000c26:	0b3f      	lsrs	r7, r7, #12
 8000c28:	0d52      	lsrs	r2, r2, #21
 8000c2a:	e760      	b.n	8000aee <__aeabi_dadd+0x12e>
 8000c2c:	4644      	mov	r4, r8
 8000c2e:	430c      	orrs	r4, r1
 8000c30:	1e62      	subs	r2, r4, #1
 8000c32:	4194      	sbcs	r4, r2
 8000c34:	18e4      	adds	r4, r4, r3
 8000c36:	429c      	cmp	r4, r3
 8000c38:	419b      	sbcs	r3, r3
 8000c3a:	425f      	negs	r7, r3
 8000c3c:	183f      	adds	r7, r7, r0
 8000c3e:	023b      	lsls	r3, r7, #8
 8000c40:	d5e3      	bpl.n	8000c0a <__aeabi_dadd+0x24a>
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <__aeabi_dadd+0x368>)
 8000c44:	3601      	adds	r6, #1
 8000c46:	429e      	cmp	r6, r3
 8000c48:	d000      	beq.n	8000c4c <__aeabi_dadd+0x28c>
 8000c4a:	e0b5      	b.n	8000db8 <__aeabi_dadd+0x3f8>
 8000c4c:	0032      	movs	r2, r6
 8000c4e:	2700      	movs	r7, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	e74c      	b.n	8000aee <__aeabi_dadd+0x12e>
 8000c54:	0742      	lsls	r2, r0, #29
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	4302      	orrs	r2, r0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dadd+0x2a4>
 8000c62:	e1e1      	b.n	8001028 <__aeabi_dadd+0x668>
 8000c64:	2780      	movs	r7, #128	; 0x80
 8000c66:	033f      	lsls	r7, r7, #12
 8000c68:	4307      	orrs	r7, r0
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <__aeabi_dadd+0x368>)
 8000c6e:	0b3f      	lsrs	r7, r7, #12
 8000c70:	e73d      	b.n	8000aee <__aeabi_dadd+0x12e>
 8000c72:	0020      	movs	r0, r4
 8000c74:	f001 fcd2 	bl	800261c <__clzsi2>
 8000c78:	0001      	movs	r1, r0
 8000c7a:	3118      	adds	r1, #24
 8000c7c:	291f      	cmp	r1, #31
 8000c7e:	dc00      	bgt.n	8000c82 <__aeabi_dadd+0x2c2>
 8000c80:	e6fc      	b.n	8000a7c <__aeabi_dadd+0xbc>
 8000c82:	3808      	subs	r0, #8
 8000c84:	4084      	lsls	r4, r0
 8000c86:	0027      	movs	r7, r4
 8000c88:	2400      	movs	r4, #0
 8000c8a:	42b1      	cmp	r1, r6
 8000c8c:	db00      	blt.n	8000c90 <__aeabi_dadd+0x2d0>
 8000c8e:	e6ff      	b.n	8000a90 <__aeabi_dadd+0xd0>
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <__aeabi_dadd+0x36c>)
 8000c92:	1a76      	subs	r6, r6, r1
 8000c94:	4017      	ands	r7, r2
 8000c96:	e70d      	b.n	8000ab4 <__aeabi_dadd+0xf4>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d02f      	beq.n	8000cfc <__aeabi_dadd+0x33c>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	1b92      	subs	r2, r2, r6
 8000ca0:	4694      	mov	ip, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x2e8>
 8000ca6:	e0ad      	b.n	8000e04 <__aeabi_dadd+0x444>
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <__aeabi_dadd+0x368>)
 8000caa:	4591      	cmp	r9, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x2f0>
 8000cae:	e10f      	b.n	8000ed0 <__aeabi_dadd+0x510>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	4310      	orrs	r0, r2
 8000cb6:	4662      	mov	r2, ip
 8000cb8:	2a38      	cmp	r2, #56	; 0x38
 8000cba:	dd00      	ble.n	8000cbe <__aeabi_dadd+0x2fe>
 8000cbc:	e10f      	b.n	8000ede <__aeabi_dadd+0x51e>
 8000cbe:	2a1f      	cmp	r2, #31
 8000cc0:	dd00      	ble.n	8000cc4 <__aeabi_dadd+0x304>
 8000cc2:	e180      	b.n	8000fc6 <__aeabi_dadd+0x606>
 8000cc4:	4664      	mov	r4, ip
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	001e      	movs	r6, r3
 8000cca:	1b12      	subs	r2, r2, r4
 8000ccc:	4667      	mov	r7, ip
 8000cce:	0004      	movs	r4, r0
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	4094      	lsls	r4, r2
 8000cd4:	40fe      	lsrs	r6, r7
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	4193      	sbcs	r3, r2
 8000cda:	40f8      	lsrs	r0, r7
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	431c      	orrs	r4, r3
 8000ce0:	4480      	add	r8, r0
 8000ce2:	1864      	adds	r4, r4, r1
 8000ce4:	428c      	cmp	r4, r1
 8000ce6:	41bf      	sbcs	r7, r7
 8000ce8:	427f      	negs	r7, r7
 8000cea:	464e      	mov	r6, r9
 8000cec:	4447      	add	r7, r8
 8000cee:	e7a6      	b.n	8000c3e <__aeabi_dadd+0x27e>
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	1e4a      	subs	r2, r1, #1
 8000cf8:	4191      	sbcs	r1, r2
 8000cfa:	e6ad      	b.n	8000a58 <__aeabi_dadd+0x98>
 8000cfc:	4c0c      	ldr	r4, [pc, #48]	; (8000d30 <__aeabi_dadd+0x370>)
 8000cfe:	1c72      	adds	r2, r6, #1
 8000d00:	4222      	tst	r2, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x346>
 8000d04:	e0a1      	b.n	8000e4a <__aeabi_dadd+0x48a>
 8000d06:	0002      	movs	r2, r0
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_dadd+0x350>
 8000d0e:	e0fa      	b.n	8000f06 <__aeabi_dadd+0x546>
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x356>
 8000d14:	e145      	b.n	8000fa2 <__aeabi_dadd+0x5e2>
 8000d16:	003a      	movs	r2, r7
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x35e>
 8000d1c:	e146      	b.n	8000fac <__aeabi_dadd+0x5ec>
 8000d1e:	0742      	lsls	r2, r0, #29
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	08c0      	lsrs	r0, r0, #3
 8000d26:	e77b      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	ff7fffff 	.word	0xff7fffff
 8000d30:	000007fe 	.word	0x000007fe
 8000d34:	4647      	mov	r7, r8
 8000d36:	1a5c      	subs	r4, r3, r1
 8000d38:	1bc2      	subs	r2, r0, r7
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	41bf      	sbcs	r7, r7
 8000d3e:	427f      	negs	r7, r7
 8000d40:	46b9      	mov	r9, r7
 8000d42:	0017      	movs	r7, r2
 8000d44:	464a      	mov	r2, r9
 8000d46:	1abf      	subs	r7, r7, r2
 8000d48:	023a      	lsls	r2, r7, #8
 8000d4a:	d500      	bpl.n	8000d4e <__aeabi_dadd+0x38e>
 8000d4c:	e08d      	b.n	8000e6a <__aeabi_dadd+0x4aa>
 8000d4e:	0023      	movs	r3, r4
 8000d50:	433b      	orrs	r3, r7
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x396>
 8000d54:	e68a      	b.n	8000a6c <__aeabi_dadd+0xac>
 8000d56:	2000      	movs	r0, #0
 8000d58:	2500      	movs	r5, #0
 8000d5a:	e761      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000d5c:	4cb4      	ldr	r4, [pc, #720]	; (8001030 <__aeabi_dadd+0x670>)
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x3a4>
 8000d62:	e0ad      	b.n	8000ec0 <__aeabi_dadd+0x500>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	4320      	orrs	r0, r4
 8000d6a:	4664      	mov	r4, ip
 8000d6c:	2c38      	cmp	r4, #56	; 0x38
 8000d6e:	dc3d      	bgt.n	8000dec <__aeabi_dadd+0x42c>
 8000d70:	4662      	mov	r2, ip
 8000d72:	2c1f      	cmp	r4, #31
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dadd+0x3b8>
 8000d76:	e0b7      	b.n	8000ee8 <__aeabi_dadd+0x528>
 8000d78:	2520      	movs	r5, #32
 8000d7a:	001e      	movs	r6, r3
 8000d7c:	1b2d      	subs	r5, r5, r4
 8000d7e:	0004      	movs	r4, r0
 8000d80:	40ab      	lsls	r3, r5
 8000d82:	40ac      	lsls	r4, r5
 8000d84:	40d6      	lsrs	r6, r2
 8000d86:	40d0      	lsrs	r0, r2
 8000d88:	4642      	mov	r2, r8
 8000d8a:	1e5d      	subs	r5, r3, #1
 8000d8c:	41ab      	sbcs	r3, r5
 8000d8e:	4334      	orrs	r4, r6
 8000d90:	1a12      	subs	r2, r2, r0
 8000d92:	4690      	mov	r8, r2
 8000d94:	4323      	orrs	r3, r4
 8000d96:	e02c      	b.n	8000df2 <__aeabi_dadd+0x432>
 8000d98:	0742      	lsls	r2, r0, #29
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	e73b      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000da2:	185c      	adds	r4, r3, r1
 8000da4:	429c      	cmp	r4, r3
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	4440      	add	r0, r8
 8000daa:	425b      	negs	r3, r3
 8000dac:	18c7      	adds	r7, r0, r3
 8000dae:	2601      	movs	r6, #1
 8000db0:	023b      	lsls	r3, r7, #8
 8000db2:	d400      	bmi.n	8000db6 <__aeabi_dadd+0x3f6>
 8000db4:	e729      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000db6:	2602      	movs	r6, #2
 8000db8:	4a9e      	ldr	r2, [pc, #632]	; (8001034 <__aeabi_dadd+0x674>)
 8000dba:	0863      	lsrs	r3, r4, #1
 8000dbc:	4017      	ands	r7, r2
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	07fb      	lsls	r3, r7, #31
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	087f      	lsrs	r7, r7, #1
 8000dca:	e673      	b.n	8000ab4 <__aeabi_dadd+0xf4>
 8000dcc:	4644      	mov	r4, r8
 8000dce:	3a20      	subs	r2, #32
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	4662      	mov	r2, ip
 8000dd4:	2a20      	cmp	r2, #32
 8000dd6:	d005      	beq.n	8000de4 <__aeabi_dadd+0x424>
 8000dd8:	4667      	mov	r7, ip
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	1bd2      	subs	r2, r2, r7
 8000dde:	4647      	mov	r7, r8
 8000de0:	4097      	lsls	r7, r2
 8000de2:	4339      	orrs	r1, r7
 8000de4:	1e4a      	subs	r2, r1, #1
 8000de6:	4191      	sbcs	r1, r2
 8000de8:	4321      	orrs	r1, r4
 8000dea:	e635      	b.n	8000a58 <__aeabi_dadd+0x98>
 8000dec:	4303      	orrs	r3, r0
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	4183      	sbcs	r3, r0
 8000df2:	1acc      	subs	r4, r1, r3
 8000df4:	42a1      	cmp	r1, r4
 8000df6:	41bf      	sbcs	r7, r7
 8000df8:	4643      	mov	r3, r8
 8000dfa:	427f      	negs	r7, r7
 8000dfc:	4655      	mov	r5, sl
 8000dfe:	464e      	mov	r6, r9
 8000e00:	1bdf      	subs	r7, r3, r7
 8000e02:	e62e      	b.n	8000a62 <__aeabi_dadd+0xa2>
 8000e04:	0002      	movs	r2, r0
 8000e06:	431a      	orrs	r2, r3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dadd+0x44c>
 8000e0a:	e0bd      	b.n	8000f88 <__aeabi_dadd+0x5c8>
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	4664      	mov	r4, ip
 8000e10:	3a01      	subs	r2, #1
 8000e12:	2c01      	cmp	r4, #1
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0x458>
 8000e16:	e0e5      	b.n	8000fe4 <__aeabi_dadd+0x624>
 8000e18:	4c85      	ldr	r4, [pc, #532]	; (8001030 <__aeabi_dadd+0x670>)
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d058      	beq.n	8000ed0 <__aeabi_dadd+0x510>
 8000e1e:	4694      	mov	ip, r2
 8000e20:	e749      	b.n	8000cb6 <__aeabi_dadd+0x2f6>
 8000e22:	4664      	mov	r4, ip
 8000e24:	2220      	movs	r2, #32
 8000e26:	1b12      	subs	r2, r2, r4
 8000e28:	4644      	mov	r4, r8
 8000e2a:	4094      	lsls	r4, r2
 8000e2c:	000f      	movs	r7, r1
 8000e2e:	46a1      	mov	r9, r4
 8000e30:	4664      	mov	r4, ip
 8000e32:	4091      	lsls	r1, r2
 8000e34:	40e7      	lsrs	r7, r4
 8000e36:	464c      	mov	r4, r9
 8000e38:	1e4a      	subs	r2, r1, #1
 8000e3a:	4191      	sbcs	r1, r2
 8000e3c:	433c      	orrs	r4, r7
 8000e3e:	4642      	mov	r2, r8
 8000e40:	430c      	orrs	r4, r1
 8000e42:	4661      	mov	r1, ip
 8000e44:	40ca      	lsrs	r2, r1
 8000e46:	1880      	adds	r0, r0, r2
 8000e48:	e6f4      	b.n	8000c34 <__aeabi_dadd+0x274>
 8000e4a:	4c79      	ldr	r4, [pc, #484]	; (8001030 <__aeabi_dadd+0x670>)
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x492>
 8000e50:	e6fd      	b.n	8000c4e <__aeabi_dadd+0x28e>
 8000e52:	1859      	adds	r1, r3, r1
 8000e54:	4299      	cmp	r1, r3
 8000e56:	419b      	sbcs	r3, r3
 8000e58:	4440      	add	r0, r8
 8000e5a:	425f      	negs	r7, r3
 8000e5c:	19c7      	adds	r7, r0, r7
 8000e5e:	07fc      	lsls	r4, r7, #31
 8000e60:	0849      	lsrs	r1, r1, #1
 8000e62:	0016      	movs	r6, r2
 8000e64:	430c      	orrs	r4, r1
 8000e66:	087f      	lsrs	r7, r7, #1
 8000e68:	e6cf      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000e6a:	1acc      	subs	r4, r1, r3
 8000e6c:	42a1      	cmp	r1, r4
 8000e6e:	41bf      	sbcs	r7, r7
 8000e70:	4643      	mov	r3, r8
 8000e72:	427f      	negs	r7, r7
 8000e74:	1a18      	subs	r0, r3, r0
 8000e76:	4655      	mov	r5, sl
 8000e78:	1bc7      	subs	r7, r0, r7
 8000e7a:	e5f7      	b.n	8000a6c <__aeabi_dadd+0xac>
 8000e7c:	08c9      	lsrs	r1, r1, #3
 8000e7e:	077b      	lsls	r3, r7, #29
 8000e80:	4655      	mov	r5, sl
 8000e82:	430b      	orrs	r3, r1
 8000e84:	08f8      	lsrs	r0, r7, #3
 8000e86:	e6c8      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x4ce>
 8000e8c:	e081      	b.n	8000f92 <__aeabi_dadd+0x5d2>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	430b      	orrs	r3, r1
 8000e92:	d115      	bne.n	8000ec0 <__aeabi_dadd+0x500>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	2500      	movs	r5, #0
 8000e98:	0300      	lsls	r0, r0, #12
 8000e9a:	e6e3      	b.n	8000c64 <__aeabi_dadd+0x2a4>
 8000e9c:	1a5c      	subs	r4, r3, r1
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	419b      	sbcs	r3, r3
 8000ea2:	1bc7      	subs	r7, r0, r7
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	1aff      	subs	r7, r7, r3
 8000eaa:	e5da      	b.n	8000a62 <__aeabi_dadd+0xa2>
 8000eac:	0742      	lsls	r2, r0, #29
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	08c0      	lsrs	r0, r0, #3
 8000eb4:	e6d2      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000eb6:	0742      	lsls	r2, r0, #29
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	08c0      	lsrs	r0, r0, #3
 8000ebe:	e6ac      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	08c9      	lsrs	r1, r1, #3
 8000ec6:	075b      	lsls	r3, r3, #29
 8000ec8:	4655      	mov	r5, sl
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	08d0      	lsrs	r0, r2, #3
 8000ece:	e6c5      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	075b      	lsls	r3, r3, #29
 8000ed6:	08c9      	lsrs	r1, r1, #3
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	08d0      	lsrs	r0, r2, #3
 8000edc:	e6be      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	001c      	movs	r4, r3
 8000ee2:	1e63      	subs	r3, r4, #1
 8000ee4:	419c      	sbcs	r4, r3
 8000ee6:	e6fc      	b.n	8000ce2 <__aeabi_dadd+0x322>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	3c20      	subs	r4, #32
 8000eec:	40e2      	lsrs	r2, r4
 8000eee:	0014      	movs	r4, r2
 8000ef0:	4662      	mov	r2, ip
 8000ef2:	2a20      	cmp	r2, #32
 8000ef4:	d003      	beq.n	8000efe <__aeabi_dadd+0x53e>
 8000ef6:	2540      	movs	r5, #64	; 0x40
 8000ef8:	1aad      	subs	r5, r5, r2
 8000efa:	40a8      	lsls	r0, r5
 8000efc:	4303      	orrs	r3, r0
 8000efe:	1e58      	subs	r0, r3, #1
 8000f00:	4183      	sbcs	r3, r0
 8000f02:	4323      	orrs	r3, r4
 8000f04:	e775      	b.n	8000df2 <__aeabi_dadd+0x432>
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d0e2      	beq.n	8000ed0 <__aeabi_dadd+0x510>
 8000f0a:	003a      	movs	r2, r7
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	d0cd      	beq.n	8000eac <__aeabi_dadd+0x4ec>
 8000f10:	0742      	lsls	r2, r0, #29
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	08c0      	lsrs	r0, r0, #3
 8000f1a:	0312      	lsls	r2, r2, #12
 8000f1c:	4210      	tst	r0, r2
 8000f1e:	d006      	beq.n	8000f2e <__aeabi_dadd+0x56e>
 8000f20:	08fc      	lsrs	r4, r7, #3
 8000f22:	4214      	tst	r4, r2
 8000f24:	d103      	bne.n	8000f2e <__aeabi_dadd+0x56e>
 8000f26:	0020      	movs	r0, r4
 8000f28:	08cb      	lsrs	r3, r1, #3
 8000f2a:	077a      	lsls	r2, r7, #29
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	0f5a      	lsrs	r2, r3, #29
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	0752      	lsls	r2, r2, #29
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	e690      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x582>
 8000f40:	e709      	b.n	8000d56 <__aeabi_dadd+0x396>
 8000f42:	4643      	mov	r3, r8
 8000f44:	4642      	mov	r2, r8
 8000f46:	08c9      	lsrs	r1, r1, #3
 8000f48:	075b      	lsls	r3, r3, #29
 8000f4a:	4655      	mov	r5, sl
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	08d0      	lsrs	r0, r2, #3
 8000f50:	e666      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000f52:	1acc      	subs	r4, r1, r3
 8000f54:	42a1      	cmp	r1, r4
 8000f56:	4189      	sbcs	r1, r1
 8000f58:	1a3f      	subs	r7, r7, r0
 8000f5a:	4249      	negs	r1, r1
 8000f5c:	4655      	mov	r5, sl
 8000f5e:	2601      	movs	r6, #1
 8000f60:	1a7f      	subs	r7, r7, r1
 8000f62:	e57e      	b.n	8000a62 <__aeabi_dadd+0xa2>
 8000f64:	4642      	mov	r2, r8
 8000f66:	1a5c      	subs	r4, r3, r1
 8000f68:	1a87      	subs	r7, r0, r2
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	4192      	sbcs	r2, r2
 8000f6e:	4252      	negs	r2, r2
 8000f70:	1abf      	subs	r7, r7, r2
 8000f72:	023a      	lsls	r2, r7, #8
 8000f74:	d53d      	bpl.n	8000ff2 <__aeabi_dadd+0x632>
 8000f76:	1acc      	subs	r4, r1, r3
 8000f78:	42a1      	cmp	r1, r4
 8000f7a:	4189      	sbcs	r1, r1
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	4249      	negs	r1, r1
 8000f80:	1a1f      	subs	r7, r3, r0
 8000f82:	4655      	mov	r5, sl
 8000f84:	1a7f      	subs	r7, r7, r1
 8000f86:	e595      	b.n	8000ab4 <__aeabi_dadd+0xf4>
 8000f88:	077b      	lsls	r3, r7, #29
 8000f8a:	08c9      	lsrs	r1, r1, #3
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	08f8      	lsrs	r0, r7, #3
 8000f90:	e643      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000f92:	4644      	mov	r4, r8
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	430c      	orrs	r4, r1
 8000f98:	d130      	bne.n	8000ffc <__aeabi_dadd+0x63c>
 8000f9a:	0742      	lsls	r2, r0, #29
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	e65c      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000fa2:	077b      	lsls	r3, r7, #29
 8000fa4:	08c9      	lsrs	r1, r1, #3
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	08f8      	lsrs	r0, r7, #3
 8000faa:	e639      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000fac:	185c      	adds	r4, r3, r1
 8000fae:	429c      	cmp	r4, r3
 8000fb0:	419b      	sbcs	r3, r3
 8000fb2:	4440      	add	r0, r8
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	18c7      	adds	r7, r0, r3
 8000fb8:	023b      	lsls	r3, r7, #8
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_dadd+0x5fe>
 8000fbc:	e625      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <__aeabi_dadd+0x674>)
 8000fc0:	2601      	movs	r6, #1
 8000fc2:	401f      	ands	r7, r3
 8000fc4:	e621      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000fc6:	0004      	movs	r4, r0
 8000fc8:	3a20      	subs	r2, #32
 8000fca:	40d4      	lsrs	r4, r2
 8000fcc:	4662      	mov	r2, ip
 8000fce:	2a20      	cmp	r2, #32
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_dadd+0x61c>
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	1b92      	subs	r2, r2, r6
 8000fd8:	4090      	lsls	r0, r2
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	4193      	sbcs	r3, r2
 8000fe0:	431c      	orrs	r4, r3
 8000fe2:	e67e      	b.n	8000ce2 <__aeabi_dadd+0x322>
 8000fe4:	185c      	adds	r4, r3, r1
 8000fe6:	428c      	cmp	r4, r1
 8000fe8:	4189      	sbcs	r1, r1
 8000fea:	4440      	add	r0, r8
 8000fec:	4249      	negs	r1, r1
 8000fee:	1847      	adds	r7, r0, r1
 8000ff0:	e6dd      	b.n	8000dae <__aeabi_dadd+0x3ee>
 8000ff2:	0023      	movs	r3, r4
 8000ff4:	433b      	orrs	r3, r7
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dadd+0x63a>
 8000ff8:	e6ad      	b.n	8000d56 <__aeabi_dadd+0x396>
 8000ffa:	e606      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000ffc:	0744      	lsls	r4, r0, #29
 8000ffe:	4323      	orrs	r3, r4
 8001000:	2480      	movs	r4, #128	; 0x80
 8001002:	08c0      	lsrs	r0, r0, #3
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	4220      	tst	r0, r4
 8001008:	d008      	beq.n	800101c <__aeabi_dadd+0x65c>
 800100a:	4642      	mov	r2, r8
 800100c:	08d6      	lsrs	r6, r2, #3
 800100e:	4226      	tst	r6, r4
 8001010:	d104      	bne.n	800101c <__aeabi_dadd+0x65c>
 8001012:	4655      	mov	r5, sl
 8001014:	0030      	movs	r0, r6
 8001016:	08cb      	lsrs	r3, r1, #3
 8001018:	0751      	lsls	r1, r2, #29
 800101a:	430b      	orrs	r3, r1
 800101c:	0f5a      	lsrs	r2, r3, #29
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	0752      	lsls	r2, r2, #29
 8001024:	4313      	orrs	r3, r2
 8001026:	e619      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8001028:	2300      	movs	r3, #0
 800102a:	4a01      	ldr	r2, [pc, #4]	; (8001030 <__aeabi_dadd+0x670>)
 800102c:	001f      	movs	r7, r3
 800102e:	e55e      	b.n	8000aee <__aeabi_dadd+0x12e>
 8001030:	000007ff 	.word	0x000007ff
 8001034:	ff7fffff 	.word	0xff7fffff

08001038 <__aeabi_ddiv>:
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	4657      	mov	r7, sl
 800103c:	464e      	mov	r6, r9
 800103e:	4645      	mov	r5, r8
 8001040:	46de      	mov	lr, fp
 8001042:	b5e0      	push	{r5, r6, r7, lr}
 8001044:	4681      	mov	r9, r0
 8001046:	0005      	movs	r5, r0
 8001048:	030c      	lsls	r4, r1, #12
 800104a:	0048      	lsls	r0, r1, #1
 800104c:	4692      	mov	sl, r2
 800104e:	001f      	movs	r7, r3
 8001050:	b085      	sub	sp, #20
 8001052:	0b24      	lsrs	r4, r4, #12
 8001054:	0d40      	lsrs	r0, r0, #21
 8001056:	0fce      	lsrs	r6, r1, #31
 8001058:	2800      	cmp	r0, #0
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x26>
 800105c:	e156      	b.n	800130c <__aeabi_ddiv+0x2d4>
 800105e:	4bd4      	ldr	r3, [pc, #848]	; (80013b0 <__aeabi_ddiv+0x378>)
 8001060:	4298      	cmp	r0, r3
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0x2e>
 8001064:	e172      	b.n	800134c <__aeabi_ddiv+0x314>
 8001066:	0f6b      	lsrs	r3, r5, #29
 8001068:	00e4      	lsls	r4, r4, #3
 800106a:	431c      	orrs	r4, r3
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	4323      	orrs	r3, r4
 8001072:	4698      	mov	r8, r3
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <__aeabi_ddiv+0x37c>)
 8001076:	00ed      	lsls	r5, r5, #3
 8001078:	469b      	mov	fp, r3
 800107a:	2300      	movs	r3, #0
 800107c:	4699      	mov	r9, r3
 800107e:	4483      	add	fp, r0
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	033c      	lsls	r4, r7, #12
 8001084:	007b      	lsls	r3, r7, #1
 8001086:	4650      	mov	r0, sl
 8001088:	0b24      	lsrs	r4, r4, #12
 800108a:	0d5b      	lsrs	r3, r3, #21
 800108c:	0fff      	lsrs	r7, r7, #31
 800108e:	2b00      	cmp	r3, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x5c>
 8001092:	e11f      	b.n	80012d4 <__aeabi_ddiv+0x29c>
 8001094:	4ac6      	ldr	r2, [pc, #792]	; (80013b0 <__aeabi_ddiv+0x378>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d100      	bne.n	800109c <__aeabi_ddiv+0x64>
 800109a:	e162      	b.n	8001362 <__aeabi_ddiv+0x32a>
 800109c:	49c5      	ldr	r1, [pc, #788]	; (80013b4 <__aeabi_ddiv+0x37c>)
 800109e:	0f42      	lsrs	r2, r0, #29
 80010a0:	468c      	mov	ip, r1
 80010a2:	00e4      	lsls	r4, r4, #3
 80010a4:	4659      	mov	r1, fp
 80010a6:	4314      	orrs	r4, r2
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	4463      	add	r3, ip
 80010ac:	0412      	lsls	r2, r2, #16
 80010ae:	1acb      	subs	r3, r1, r3
 80010b0:	4314      	orrs	r4, r2
 80010b2:	469b      	mov	fp, r3
 80010b4:	00c2      	lsls	r2, r0, #3
 80010b6:	2000      	movs	r0, #0
 80010b8:	0033      	movs	r3, r6
 80010ba:	407b      	eors	r3, r7
 80010bc:	469a      	mov	sl, r3
 80010be:	464b      	mov	r3, r9
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d827      	bhi.n	8001114 <__aeabi_ddiv+0xdc>
 80010c4:	49bc      	ldr	r1, [pc, #752]	; (80013b8 <__aeabi_ddiv+0x380>)
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	58cb      	ldr	r3, [r1, r3]
 80010ca:	469f      	mov	pc, r3
 80010cc:	46b2      	mov	sl, r6
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d016      	beq.n	8001102 <__aeabi_ddiv+0xca>
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d100      	bne.n	80010da <__aeabi_ddiv+0xa2>
 80010d8:	e28e      	b.n	80015f8 <__aeabi_ddiv+0x5c0>
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0xa8>
 80010de:	e0d9      	b.n	8001294 <__aeabi_ddiv+0x25c>
 80010e0:	2300      	movs	r3, #0
 80010e2:	2400      	movs	r4, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	4652      	mov	r2, sl
 80010e8:	051b      	lsls	r3, r3, #20
 80010ea:	4323      	orrs	r3, r4
 80010ec:	07d2      	lsls	r2, r2, #31
 80010ee:	4313      	orrs	r3, r2
 80010f0:	0028      	movs	r0, r5
 80010f2:	0019      	movs	r1, r3
 80010f4:	b005      	add	sp, #20
 80010f6:	bcf0      	pop	{r4, r5, r6, r7}
 80010f8:	46bb      	mov	fp, r7
 80010fa:	46b2      	mov	sl, r6
 80010fc:	46a9      	mov	r9, r5
 80010fe:	46a0      	mov	r8, r4
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001102:	2400      	movs	r4, #0
 8001104:	2500      	movs	r5, #0
 8001106:	4baa      	ldr	r3, [pc, #680]	; (80013b0 <__aeabi_ddiv+0x378>)
 8001108:	e7ed      	b.n	80010e6 <__aeabi_ddiv+0xae>
 800110a:	46ba      	mov	sl, r7
 800110c:	46a0      	mov	r8, r4
 800110e:	0015      	movs	r5, r2
 8001110:	9000      	str	r0, [sp, #0]
 8001112:	e7dc      	b.n	80010ce <__aeabi_ddiv+0x96>
 8001114:	4544      	cmp	r4, r8
 8001116:	d200      	bcs.n	800111a <__aeabi_ddiv+0xe2>
 8001118:	e1c7      	b.n	80014aa <__aeabi_ddiv+0x472>
 800111a:	d100      	bne.n	800111e <__aeabi_ddiv+0xe6>
 800111c:	e1c2      	b.n	80014a4 <__aeabi_ddiv+0x46c>
 800111e:	2301      	movs	r3, #1
 8001120:	425b      	negs	r3, r3
 8001122:	469c      	mov	ip, r3
 8001124:	002e      	movs	r6, r5
 8001126:	4640      	mov	r0, r8
 8001128:	2500      	movs	r5, #0
 800112a:	44e3      	add	fp, ip
 800112c:	0223      	lsls	r3, r4, #8
 800112e:	0e14      	lsrs	r4, r2, #24
 8001130:	431c      	orrs	r4, r3
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	4699      	mov	r9, r3
 8001136:	0423      	lsls	r3, r4, #16
 8001138:	0c1f      	lsrs	r7, r3, #16
 800113a:	0212      	lsls	r2, r2, #8
 800113c:	4649      	mov	r1, r9
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	9701      	str	r7, [sp, #4]
 8001142:	f7ff f883 	bl	800024c <__aeabi_uidivmod>
 8001146:	0002      	movs	r2, r0
 8001148:	437a      	muls	r2, r7
 800114a:	040b      	lsls	r3, r1, #16
 800114c:	0c31      	lsrs	r1, r6, #16
 800114e:	4680      	mov	r8, r0
 8001150:	4319      	orrs	r1, r3
 8001152:	428a      	cmp	r2, r1
 8001154:	d907      	bls.n	8001166 <__aeabi_ddiv+0x12e>
 8001156:	2301      	movs	r3, #1
 8001158:	425b      	negs	r3, r3
 800115a:	469c      	mov	ip, r3
 800115c:	1909      	adds	r1, r1, r4
 800115e:	44e0      	add	r8, ip
 8001160:	428c      	cmp	r4, r1
 8001162:	d800      	bhi.n	8001166 <__aeabi_ddiv+0x12e>
 8001164:	e207      	b.n	8001576 <__aeabi_ddiv+0x53e>
 8001166:	1a88      	subs	r0, r1, r2
 8001168:	4649      	mov	r1, r9
 800116a:	f7ff f86f 	bl	800024c <__aeabi_uidivmod>
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	468c      	mov	ip, r1
 8001172:	0431      	lsls	r1, r6, #16
 8001174:	4666      	mov	r6, ip
 8001176:	9a01      	ldr	r2, [sp, #4]
 8001178:	0c09      	lsrs	r1, r1, #16
 800117a:	4342      	muls	r2, r0
 800117c:	0003      	movs	r3, r0
 800117e:	4331      	orrs	r1, r6
 8001180:	428a      	cmp	r2, r1
 8001182:	d904      	bls.n	800118e <__aeabi_ddiv+0x156>
 8001184:	1909      	adds	r1, r1, r4
 8001186:	3b01      	subs	r3, #1
 8001188:	428c      	cmp	r4, r1
 800118a:	d800      	bhi.n	800118e <__aeabi_ddiv+0x156>
 800118c:	e1ed      	b.n	800156a <__aeabi_ddiv+0x532>
 800118e:	1a88      	subs	r0, r1, r2
 8001190:	4642      	mov	r2, r8
 8001192:	0412      	lsls	r2, r2, #16
 8001194:	431a      	orrs	r2, r3
 8001196:	4690      	mov	r8, r2
 8001198:	4641      	mov	r1, r8
 800119a:	9b00      	ldr	r3, [sp, #0]
 800119c:	040e      	lsls	r6, r1, #16
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	001f      	movs	r7, r3
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9b00      	ldr	r3, [sp, #0]
 80011a6:	0c36      	lsrs	r6, r6, #16
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	000b      	movs	r3, r1
 80011ae:	4373      	muls	r3, r6
 80011b0:	0c12      	lsrs	r2, r2, #16
 80011b2:	437e      	muls	r6, r7
 80011b4:	9103      	str	r1, [sp, #12]
 80011b6:	4351      	muls	r1, r2
 80011b8:	437a      	muls	r2, r7
 80011ba:	0c1f      	lsrs	r7, r3, #16
 80011bc:	46bc      	mov	ip, r7
 80011be:	1876      	adds	r6, r6, r1
 80011c0:	4466      	add	r6, ip
 80011c2:	42b1      	cmp	r1, r6
 80011c4:	d903      	bls.n	80011ce <__aeabi_ddiv+0x196>
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	0249      	lsls	r1, r1, #9
 80011ca:	468c      	mov	ip, r1
 80011cc:	4462      	add	r2, ip
 80011ce:	0c31      	lsrs	r1, r6, #16
 80011d0:	188a      	adds	r2, r1, r2
 80011d2:	0431      	lsls	r1, r6, #16
 80011d4:	041e      	lsls	r6, r3, #16
 80011d6:	0c36      	lsrs	r6, r6, #16
 80011d8:	198e      	adds	r6, r1, r6
 80011da:	4290      	cmp	r0, r2
 80011dc:	d302      	bcc.n	80011e4 <__aeabi_ddiv+0x1ac>
 80011de:	d112      	bne.n	8001206 <__aeabi_ddiv+0x1ce>
 80011e0:	42b5      	cmp	r5, r6
 80011e2:	d210      	bcs.n	8001206 <__aeabi_ddiv+0x1ce>
 80011e4:	4643      	mov	r3, r8
 80011e6:	1e59      	subs	r1, r3, #1
 80011e8:	9b00      	ldr	r3, [sp, #0]
 80011ea:	469c      	mov	ip, r3
 80011ec:	4465      	add	r5, ip
 80011ee:	001f      	movs	r7, r3
 80011f0:	429d      	cmp	r5, r3
 80011f2:	419b      	sbcs	r3, r3
 80011f4:	425b      	negs	r3, r3
 80011f6:	191b      	adds	r3, r3, r4
 80011f8:	18c0      	adds	r0, r0, r3
 80011fa:	4284      	cmp	r4, r0
 80011fc:	d200      	bcs.n	8001200 <__aeabi_ddiv+0x1c8>
 80011fe:	e1a0      	b.n	8001542 <__aeabi_ddiv+0x50a>
 8001200:	d100      	bne.n	8001204 <__aeabi_ddiv+0x1cc>
 8001202:	e19b      	b.n	800153c <__aeabi_ddiv+0x504>
 8001204:	4688      	mov	r8, r1
 8001206:	1bae      	subs	r6, r5, r6
 8001208:	42b5      	cmp	r5, r6
 800120a:	41ad      	sbcs	r5, r5
 800120c:	1a80      	subs	r0, r0, r2
 800120e:	426d      	negs	r5, r5
 8001210:	1b40      	subs	r0, r0, r5
 8001212:	4284      	cmp	r4, r0
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x1e0>
 8001216:	e1d5      	b.n	80015c4 <__aeabi_ddiv+0x58c>
 8001218:	4649      	mov	r1, r9
 800121a:	f7ff f817 	bl	800024c <__aeabi_uidivmod>
 800121e:	9a01      	ldr	r2, [sp, #4]
 8001220:	040b      	lsls	r3, r1, #16
 8001222:	4342      	muls	r2, r0
 8001224:	0c31      	lsrs	r1, r6, #16
 8001226:	0005      	movs	r5, r0
 8001228:	4319      	orrs	r1, r3
 800122a:	428a      	cmp	r2, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x1f8>
 800122e:	e16c      	b.n	800150a <__aeabi_ddiv+0x4d2>
 8001230:	1a88      	subs	r0, r1, r2
 8001232:	4649      	mov	r1, r9
 8001234:	f7ff f80a 	bl	800024c <__aeabi_uidivmod>
 8001238:	9a01      	ldr	r2, [sp, #4]
 800123a:	0436      	lsls	r6, r6, #16
 800123c:	4342      	muls	r2, r0
 800123e:	0409      	lsls	r1, r1, #16
 8001240:	0c36      	lsrs	r6, r6, #16
 8001242:	0003      	movs	r3, r0
 8001244:	430e      	orrs	r6, r1
 8001246:	42b2      	cmp	r2, r6
 8001248:	d900      	bls.n	800124c <__aeabi_ddiv+0x214>
 800124a:	e153      	b.n	80014f4 <__aeabi_ddiv+0x4bc>
 800124c:	9803      	ldr	r0, [sp, #12]
 800124e:	1ab6      	subs	r6, r6, r2
 8001250:	0002      	movs	r2, r0
 8001252:	042d      	lsls	r5, r5, #16
 8001254:	431d      	orrs	r5, r3
 8001256:	9f02      	ldr	r7, [sp, #8]
 8001258:	042b      	lsls	r3, r5, #16
 800125a:	0c1b      	lsrs	r3, r3, #16
 800125c:	435a      	muls	r2, r3
 800125e:	437b      	muls	r3, r7
 8001260:	469c      	mov	ip, r3
 8001262:	0c29      	lsrs	r1, r5, #16
 8001264:	4348      	muls	r0, r1
 8001266:	0c13      	lsrs	r3, r2, #16
 8001268:	4484      	add	ip, r0
 800126a:	4463      	add	r3, ip
 800126c:	4379      	muls	r1, r7
 800126e:	4298      	cmp	r0, r3
 8001270:	d903      	bls.n	800127a <__aeabi_ddiv+0x242>
 8001272:	2080      	movs	r0, #128	; 0x80
 8001274:	0240      	lsls	r0, r0, #9
 8001276:	4684      	mov	ip, r0
 8001278:	4461      	add	r1, ip
 800127a:	0c18      	lsrs	r0, r3, #16
 800127c:	0412      	lsls	r2, r2, #16
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	0c12      	lsrs	r2, r2, #16
 8001282:	1841      	adds	r1, r0, r1
 8001284:	189b      	adds	r3, r3, r2
 8001286:	428e      	cmp	r6, r1
 8001288:	d200      	bcs.n	800128c <__aeabi_ddiv+0x254>
 800128a:	e0ff      	b.n	800148c <__aeabi_ddiv+0x454>
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x258>
 800128e:	e0fa      	b.n	8001486 <__aeabi_ddiv+0x44e>
 8001290:	2301      	movs	r3, #1
 8001292:	431d      	orrs	r5, r3
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <__aeabi_ddiv+0x384>)
 8001296:	445a      	add	r2, fp
 8001298:	2a00      	cmp	r2, #0
 800129a:	dc00      	bgt.n	800129e <__aeabi_ddiv+0x266>
 800129c:	e0aa      	b.n	80013f4 <__aeabi_ddiv+0x3bc>
 800129e:	076b      	lsls	r3, r5, #29
 80012a0:	d000      	beq.n	80012a4 <__aeabi_ddiv+0x26c>
 80012a2:	e13d      	b.n	8001520 <__aeabi_ddiv+0x4e8>
 80012a4:	08ed      	lsrs	r5, r5, #3
 80012a6:	4643      	mov	r3, r8
 80012a8:	01db      	lsls	r3, r3, #7
 80012aa:	d506      	bpl.n	80012ba <__aeabi_ddiv+0x282>
 80012ac:	4642      	mov	r2, r8
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <__aeabi_ddiv+0x388>)
 80012b0:	401a      	ands	r2, r3
 80012b2:	4690      	mov	r8, r2
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	00d2      	lsls	r2, r2, #3
 80012b8:	445a      	add	r2, fp
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <__aeabi_ddiv+0x38c>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	dd00      	ble.n	80012c2 <__aeabi_ddiv+0x28a>
 80012c0:	e71f      	b.n	8001102 <__aeabi_ddiv+0xca>
 80012c2:	4643      	mov	r3, r8
 80012c4:	075b      	lsls	r3, r3, #29
 80012c6:	431d      	orrs	r5, r3
 80012c8:	4643      	mov	r3, r8
 80012ca:	0552      	lsls	r2, r2, #21
 80012cc:	025c      	lsls	r4, r3, #9
 80012ce:	0b24      	lsrs	r4, r4, #12
 80012d0:	0d53      	lsrs	r3, r2, #21
 80012d2:	e708      	b.n	80010e6 <__aeabi_ddiv+0xae>
 80012d4:	4652      	mov	r2, sl
 80012d6:	4322      	orrs	r2, r4
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x2a4>
 80012da:	e07b      	b.n	80013d4 <__aeabi_ddiv+0x39c>
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_ddiv+0x2aa>
 80012e0:	e0fa      	b.n	80014d8 <__aeabi_ddiv+0x4a0>
 80012e2:	0020      	movs	r0, r4
 80012e4:	f001 f99a 	bl	800261c <__clzsi2>
 80012e8:	0002      	movs	r2, r0
 80012ea:	3a0b      	subs	r2, #11
 80012ec:	231d      	movs	r3, #29
 80012ee:	0001      	movs	r1, r0
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	4652      	mov	r2, sl
 80012f4:	3908      	subs	r1, #8
 80012f6:	40da      	lsrs	r2, r3
 80012f8:	408c      	lsls	r4, r1
 80012fa:	4314      	orrs	r4, r2
 80012fc:	4652      	mov	r2, sl
 80012fe:	408a      	lsls	r2, r1
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <__aeabi_ddiv+0x390>)
 8001302:	4458      	add	r0, fp
 8001304:	469b      	mov	fp, r3
 8001306:	4483      	add	fp, r0
 8001308:	2000      	movs	r0, #0
 800130a:	e6d5      	b.n	80010b8 <__aeabi_ddiv+0x80>
 800130c:	464b      	mov	r3, r9
 800130e:	4323      	orrs	r3, r4
 8001310:	4698      	mov	r8, r3
 8001312:	d044      	beq.n	800139e <__aeabi_ddiv+0x366>
 8001314:	2c00      	cmp	r4, #0
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0x2e2>
 8001318:	e0ce      	b.n	80014b8 <__aeabi_ddiv+0x480>
 800131a:	0020      	movs	r0, r4
 800131c:	f001 f97e 	bl	800261c <__clzsi2>
 8001320:	0001      	movs	r1, r0
 8001322:	0002      	movs	r2, r0
 8001324:	390b      	subs	r1, #11
 8001326:	231d      	movs	r3, #29
 8001328:	1a5b      	subs	r3, r3, r1
 800132a:	4649      	mov	r1, r9
 800132c:	0010      	movs	r0, r2
 800132e:	40d9      	lsrs	r1, r3
 8001330:	3808      	subs	r0, #8
 8001332:	4084      	lsls	r4, r0
 8001334:	000b      	movs	r3, r1
 8001336:	464d      	mov	r5, r9
 8001338:	4323      	orrs	r3, r4
 800133a:	4698      	mov	r8, r3
 800133c:	4085      	lsls	r5, r0
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <__aeabi_ddiv+0x394>)
 8001340:	1a83      	subs	r3, r0, r2
 8001342:	469b      	mov	fp, r3
 8001344:	2300      	movs	r3, #0
 8001346:	4699      	mov	r9, r3
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	e69a      	b.n	8001082 <__aeabi_ddiv+0x4a>
 800134c:	464b      	mov	r3, r9
 800134e:	4323      	orrs	r3, r4
 8001350:	4698      	mov	r8, r3
 8001352:	d11d      	bne.n	8001390 <__aeabi_ddiv+0x358>
 8001354:	2308      	movs	r3, #8
 8001356:	4699      	mov	r9, r3
 8001358:	3b06      	subs	r3, #6
 800135a:	2500      	movs	r5, #0
 800135c:	4683      	mov	fp, r0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	e68f      	b.n	8001082 <__aeabi_ddiv+0x4a>
 8001362:	4652      	mov	r2, sl
 8001364:	4322      	orrs	r2, r4
 8001366:	d109      	bne.n	800137c <__aeabi_ddiv+0x344>
 8001368:	2302      	movs	r3, #2
 800136a:	4649      	mov	r1, r9
 800136c:	4319      	orrs	r1, r3
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <__aeabi_ddiv+0x398>)
 8001370:	4689      	mov	r9, r1
 8001372:	469c      	mov	ip, r3
 8001374:	2400      	movs	r4, #0
 8001376:	2002      	movs	r0, #2
 8001378:	44e3      	add	fp, ip
 800137a:	e69d      	b.n	80010b8 <__aeabi_ddiv+0x80>
 800137c:	2303      	movs	r3, #3
 800137e:	464a      	mov	r2, r9
 8001380:	431a      	orrs	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <__aeabi_ddiv+0x398>)
 8001384:	4691      	mov	r9, r2
 8001386:	469c      	mov	ip, r3
 8001388:	4652      	mov	r2, sl
 800138a:	2003      	movs	r0, #3
 800138c:	44e3      	add	fp, ip
 800138e:	e693      	b.n	80010b8 <__aeabi_ddiv+0x80>
 8001390:	230c      	movs	r3, #12
 8001392:	4699      	mov	r9, r3
 8001394:	3b09      	subs	r3, #9
 8001396:	46a0      	mov	r8, r4
 8001398:	4683      	mov	fp, r0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	e671      	b.n	8001082 <__aeabi_ddiv+0x4a>
 800139e:	2304      	movs	r3, #4
 80013a0:	4699      	mov	r9, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	469b      	mov	fp, r3
 80013a6:	3301      	adds	r3, #1
 80013a8:	2500      	movs	r5, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	e669      	b.n	8001082 <__aeabi_ddiv+0x4a>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	fffffc01 	.word	0xfffffc01
 80013b8:	08007d5c 	.word	0x08007d5c
 80013bc:	000003ff 	.word	0x000003ff
 80013c0:	feffffff 	.word	0xfeffffff
 80013c4:	000007fe 	.word	0x000007fe
 80013c8:	000003f3 	.word	0x000003f3
 80013cc:	fffffc0d 	.word	0xfffffc0d
 80013d0:	fffff801 	.word	0xfffff801
 80013d4:	4649      	mov	r1, r9
 80013d6:	2301      	movs	r3, #1
 80013d8:	4319      	orrs	r1, r3
 80013da:	4689      	mov	r9, r1
 80013dc:	2400      	movs	r4, #0
 80013de:	2001      	movs	r0, #1
 80013e0:	e66a      	b.n	80010b8 <__aeabi_ddiv+0x80>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2480      	movs	r4, #128	; 0x80
 80013e6:	469a      	mov	sl, r3
 80013e8:	2500      	movs	r5, #0
 80013ea:	4b8a      	ldr	r3, [pc, #552]	; (8001614 <__aeabi_ddiv+0x5dc>)
 80013ec:	0324      	lsls	r4, r4, #12
 80013ee:	e67a      	b.n	80010e6 <__aeabi_ddiv+0xae>
 80013f0:	2501      	movs	r5, #1
 80013f2:	426d      	negs	r5, r5
 80013f4:	2301      	movs	r3, #1
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	2b38      	cmp	r3, #56	; 0x38
 80013fa:	dd00      	ble.n	80013fe <__aeabi_ddiv+0x3c6>
 80013fc:	e670      	b.n	80010e0 <__aeabi_ddiv+0xa8>
 80013fe:	2b1f      	cmp	r3, #31
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x3cc>
 8001402:	e0bf      	b.n	8001584 <__aeabi_ddiv+0x54c>
 8001404:	211f      	movs	r1, #31
 8001406:	4249      	negs	r1, r1
 8001408:	1a8a      	subs	r2, r1, r2
 800140a:	4641      	mov	r1, r8
 800140c:	40d1      	lsrs	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	2b20      	cmp	r3, #32
 8001412:	d004      	beq.n	800141e <__aeabi_ddiv+0x3e6>
 8001414:	4641      	mov	r1, r8
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <__aeabi_ddiv+0x5e0>)
 8001418:	445b      	add	r3, fp
 800141a:	4099      	lsls	r1, r3
 800141c:	430d      	orrs	r5, r1
 800141e:	1e6b      	subs	r3, r5, #1
 8001420:	419d      	sbcs	r5, r3
 8001422:	2307      	movs	r3, #7
 8001424:	432a      	orrs	r2, r5
 8001426:	001d      	movs	r5, r3
 8001428:	2400      	movs	r4, #0
 800142a:	4015      	ands	r5, r2
 800142c:	4213      	tst	r3, r2
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x3fa>
 8001430:	e0d4      	b.n	80015dc <__aeabi_ddiv+0x5a4>
 8001432:	210f      	movs	r1, #15
 8001434:	2300      	movs	r3, #0
 8001436:	4011      	ands	r1, r2
 8001438:	2904      	cmp	r1, #4
 800143a:	d100      	bne.n	800143e <__aeabi_ddiv+0x406>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x59e>
 800143e:	1d11      	adds	r1, r2, #4
 8001440:	4291      	cmp	r1, r2
 8001442:	4192      	sbcs	r2, r2
 8001444:	4252      	negs	r2, r2
 8001446:	189b      	adds	r3, r3, r2
 8001448:	000a      	movs	r2, r1
 800144a:	0219      	lsls	r1, r3, #8
 800144c:	d400      	bmi.n	8001450 <__aeabi_ddiv+0x418>
 800144e:	e0c2      	b.n	80015d6 <__aeabi_ddiv+0x59e>
 8001450:	2301      	movs	r3, #1
 8001452:	2400      	movs	r4, #0
 8001454:	2500      	movs	r5, #0
 8001456:	e646      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	4641      	mov	r1, r8
 800145c:	031b      	lsls	r3, r3, #12
 800145e:	4219      	tst	r1, r3
 8001460:	d008      	beq.n	8001474 <__aeabi_ddiv+0x43c>
 8001462:	421c      	tst	r4, r3
 8001464:	d106      	bne.n	8001474 <__aeabi_ddiv+0x43c>
 8001466:	431c      	orrs	r4, r3
 8001468:	0324      	lsls	r4, r4, #12
 800146a:	46ba      	mov	sl, r7
 800146c:	0015      	movs	r5, r2
 800146e:	4b69      	ldr	r3, [pc, #420]	; (8001614 <__aeabi_ddiv+0x5dc>)
 8001470:	0b24      	lsrs	r4, r4, #12
 8001472:	e638      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001474:	2480      	movs	r4, #128	; 0x80
 8001476:	4643      	mov	r3, r8
 8001478:	0324      	lsls	r4, r4, #12
 800147a:	431c      	orrs	r4, r3
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	46b2      	mov	sl, r6
 8001480:	4b64      	ldr	r3, [pc, #400]	; (8001614 <__aeabi_ddiv+0x5dc>)
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	e62f      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d100      	bne.n	800148c <__aeabi_ddiv+0x454>
 800148a:	e703      	b.n	8001294 <__aeabi_ddiv+0x25c>
 800148c:	19a6      	adds	r6, r4, r6
 800148e:	1e68      	subs	r0, r5, #1
 8001490:	42a6      	cmp	r6, r4
 8001492:	d200      	bcs.n	8001496 <__aeabi_ddiv+0x45e>
 8001494:	e08d      	b.n	80015b2 <__aeabi_ddiv+0x57a>
 8001496:	428e      	cmp	r6, r1
 8001498:	d200      	bcs.n	800149c <__aeabi_ddiv+0x464>
 800149a:	e0a3      	b.n	80015e4 <__aeabi_ddiv+0x5ac>
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x468>
 800149e:	e0b3      	b.n	8001608 <__aeabi_ddiv+0x5d0>
 80014a0:	0005      	movs	r5, r0
 80014a2:	e6f5      	b.n	8001290 <__aeabi_ddiv+0x258>
 80014a4:	42aa      	cmp	r2, r5
 80014a6:	d900      	bls.n	80014aa <__aeabi_ddiv+0x472>
 80014a8:	e639      	b.n	800111e <__aeabi_ddiv+0xe6>
 80014aa:	4643      	mov	r3, r8
 80014ac:	07de      	lsls	r6, r3, #31
 80014ae:	0858      	lsrs	r0, r3, #1
 80014b0:	086b      	lsrs	r3, r5, #1
 80014b2:	431e      	orrs	r6, r3
 80014b4:	07ed      	lsls	r5, r5, #31
 80014b6:	e639      	b.n	800112c <__aeabi_ddiv+0xf4>
 80014b8:	4648      	mov	r0, r9
 80014ba:	f001 f8af 	bl	800261c <__clzsi2>
 80014be:	0001      	movs	r1, r0
 80014c0:	0002      	movs	r2, r0
 80014c2:	3115      	adds	r1, #21
 80014c4:	3220      	adds	r2, #32
 80014c6:	291c      	cmp	r1, #28
 80014c8:	dc00      	bgt.n	80014cc <__aeabi_ddiv+0x494>
 80014ca:	e72c      	b.n	8001326 <__aeabi_ddiv+0x2ee>
 80014cc:	464b      	mov	r3, r9
 80014ce:	3808      	subs	r0, #8
 80014d0:	4083      	lsls	r3, r0
 80014d2:	2500      	movs	r5, #0
 80014d4:	4698      	mov	r8, r3
 80014d6:	e732      	b.n	800133e <__aeabi_ddiv+0x306>
 80014d8:	f001 f8a0 	bl	800261c <__clzsi2>
 80014dc:	0003      	movs	r3, r0
 80014de:	001a      	movs	r2, r3
 80014e0:	3215      	adds	r2, #21
 80014e2:	3020      	adds	r0, #32
 80014e4:	2a1c      	cmp	r2, #28
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_ddiv+0x4b2>
 80014e8:	e700      	b.n	80012ec <__aeabi_ddiv+0x2b4>
 80014ea:	4654      	mov	r4, sl
 80014ec:	3b08      	subs	r3, #8
 80014ee:	2200      	movs	r2, #0
 80014f0:	409c      	lsls	r4, r3
 80014f2:	e705      	b.n	8001300 <__aeabi_ddiv+0x2c8>
 80014f4:	1936      	adds	r6, r6, r4
 80014f6:	3b01      	subs	r3, #1
 80014f8:	42b4      	cmp	r4, r6
 80014fa:	d900      	bls.n	80014fe <__aeabi_ddiv+0x4c6>
 80014fc:	e6a6      	b.n	800124c <__aeabi_ddiv+0x214>
 80014fe:	42b2      	cmp	r2, r6
 8001500:	d800      	bhi.n	8001504 <__aeabi_ddiv+0x4cc>
 8001502:	e6a3      	b.n	800124c <__aeabi_ddiv+0x214>
 8001504:	1e83      	subs	r3, r0, #2
 8001506:	1936      	adds	r6, r6, r4
 8001508:	e6a0      	b.n	800124c <__aeabi_ddiv+0x214>
 800150a:	1909      	adds	r1, r1, r4
 800150c:	3d01      	subs	r5, #1
 800150e:	428c      	cmp	r4, r1
 8001510:	d900      	bls.n	8001514 <__aeabi_ddiv+0x4dc>
 8001512:	e68d      	b.n	8001230 <__aeabi_ddiv+0x1f8>
 8001514:	428a      	cmp	r2, r1
 8001516:	d800      	bhi.n	800151a <__aeabi_ddiv+0x4e2>
 8001518:	e68a      	b.n	8001230 <__aeabi_ddiv+0x1f8>
 800151a:	1e85      	subs	r5, r0, #2
 800151c:	1909      	adds	r1, r1, r4
 800151e:	e687      	b.n	8001230 <__aeabi_ddiv+0x1f8>
 8001520:	230f      	movs	r3, #15
 8001522:	402b      	ands	r3, r5
 8001524:	2b04      	cmp	r3, #4
 8001526:	d100      	bne.n	800152a <__aeabi_ddiv+0x4f2>
 8001528:	e6bc      	b.n	80012a4 <__aeabi_ddiv+0x26c>
 800152a:	2305      	movs	r3, #5
 800152c:	425b      	negs	r3, r3
 800152e:	42ab      	cmp	r3, r5
 8001530:	419b      	sbcs	r3, r3
 8001532:	3504      	adds	r5, #4
 8001534:	425b      	negs	r3, r3
 8001536:	08ed      	lsrs	r5, r5, #3
 8001538:	4498      	add	r8, r3
 800153a:	e6b4      	b.n	80012a6 <__aeabi_ddiv+0x26e>
 800153c:	42af      	cmp	r7, r5
 800153e:	d900      	bls.n	8001542 <__aeabi_ddiv+0x50a>
 8001540:	e660      	b.n	8001204 <__aeabi_ddiv+0x1cc>
 8001542:	4282      	cmp	r2, r0
 8001544:	d804      	bhi.n	8001550 <__aeabi_ddiv+0x518>
 8001546:	d000      	beq.n	800154a <__aeabi_ddiv+0x512>
 8001548:	e65c      	b.n	8001204 <__aeabi_ddiv+0x1cc>
 800154a:	42ae      	cmp	r6, r5
 800154c:	d800      	bhi.n	8001550 <__aeabi_ddiv+0x518>
 800154e:	e659      	b.n	8001204 <__aeabi_ddiv+0x1cc>
 8001550:	2302      	movs	r3, #2
 8001552:	425b      	negs	r3, r3
 8001554:	469c      	mov	ip, r3
 8001556:	9b00      	ldr	r3, [sp, #0]
 8001558:	44e0      	add	r8, ip
 800155a:	469c      	mov	ip, r3
 800155c:	4465      	add	r5, ip
 800155e:	429d      	cmp	r5, r3
 8001560:	419b      	sbcs	r3, r3
 8001562:	425b      	negs	r3, r3
 8001564:	191b      	adds	r3, r3, r4
 8001566:	18c0      	adds	r0, r0, r3
 8001568:	e64d      	b.n	8001206 <__aeabi_ddiv+0x1ce>
 800156a:	428a      	cmp	r2, r1
 800156c:	d800      	bhi.n	8001570 <__aeabi_ddiv+0x538>
 800156e:	e60e      	b.n	800118e <__aeabi_ddiv+0x156>
 8001570:	1e83      	subs	r3, r0, #2
 8001572:	1909      	adds	r1, r1, r4
 8001574:	e60b      	b.n	800118e <__aeabi_ddiv+0x156>
 8001576:	428a      	cmp	r2, r1
 8001578:	d800      	bhi.n	800157c <__aeabi_ddiv+0x544>
 800157a:	e5f4      	b.n	8001166 <__aeabi_ddiv+0x12e>
 800157c:	1e83      	subs	r3, r0, #2
 800157e:	4698      	mov	r8, r3
 8001580:	1909      	adds	r1, r1, r4
 8001582:	e5f0      	b.n	8001166 <__aeabi_ddiv+0x12e>
 8001584:	4925      	ldr	r1, [pc, #148]	; (800161c <__aeabi_ddiv+0x5e4>)
 8001586:	0028      	movs	r0, r5
 8001588:	4459      	add	r1, fp
 800158a:	408d      	lsls	r5, r1
 800158c:	4642      	mov	r2, r8
 800158e:	408a      	lsls	r2, r1
 8001590:	1e69      	subs	r1, r5, #1
 8001592:	418d      	sbcs	r5, r1
 8001594:	4641      	mov	r1, r8
 8001596:	40d8      	lsrs	r0, r3
 8001598:	40d9      	lsrs	r1, r3
 800159a:	4302      	orrs	r2, r0
 800159c:	432a      	orrs	r2, r5
 800159e:	000b      	movs	r3, r1
 80015a0:	0751      	lsls	r1, r2, #29
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x56e>
 80015a4:	e751      	b.n	800144a <__aeabi_ddiv+0x412>
 80015a6:	210f      	movs	r1, #15
 80015a8:	4011      	ands	r1, r2
 80015aa:	2904      	cmp	r1, #4
 80015ac:	d000      	beq.n	80015b0 <__aeabi_ddiv+0x578>
 80015ae:	e746      	b.n	800143e <__aeabi_ddiv+0x406>
 80015b0:	e74b      	b.n	800144a <__aeabi_ddiv+0x412>
 80015b2:	0005      	movs	r5, r0
 80015b4:	428e      	cmp	r6, r1
 80015b6:	d000      	beq.n	80015ba <__aeabi_ddiv+0x582>
 80015b8:	e66a      	b.n	8001290 <__aeabi_ddiv+0x258>
 80015ba:	9a00      	ldr	r2, [sp, #0]
 80015bc:	4293      	cmp	r3, r2
 80015be:	d000      	beq.n	80015c2 <__aeabi_ddiv+0x58a>
 80015c0:	e666      	b.n	8001290 <__aeabi_ddiv+0x258>
 80015c2:	e667      	b.n	8001294 <__aeabi_ddiv+0x25c>
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <__aeabi_ddiv+0x5e8>)
 80015c6:	445a      	add	r2, fp
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	dc00      	bgt.n	80015ce <__aeabi_ddiv+0x596>
 80015cc:	e710      	b.n	80013f0 <__aeabi_ddiv+0x3b8>
 80015ce:	2301      	movs	r3, #1
 80015d0:	2500      	movs	r5, #0
 80015d2:	4498      	add	r8, r3
 80015d4:	e667      	b.n	80012a6 <__aeabi_ddiv+0x26e>
 80015d6:	075d      	lsls	r5, r3, #29
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	0b1c      	lsrs	r4, r3, #12
 80015dc:	08d2      	lsrs	r2, r2, #3
 80015de:	2300      	movs	r3, #0
 80015e0:	4315      	orrs	r5, r2
 80015e2:	e580      	b.n	80010e6 <__aeabi_ddiv+0xae>
 80015e4:	9800      	ldr	r0, [sp, #0]
 80015e6:	3d02      	subs	r5, #2
 80015e8:	0042      	lsls	r2, r0, #1
 80015ea:	4282      	cmp	r2, r0
 80015ec:	41bf      	sbcs	r7, r7
 80015ee:	427f      	negs	r7, r7
 80015f0:	193c      	adds	r4, r7, r4
 80015f2:	1936      	adds	r6, r6, r4
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	e7dd      	b.n	80015b4 <__aeabi_ddiv+0x57c>
 80015f8:	2480      	movs	r4, #128	; 0x80
 80015fa:	4643      	mov	r3, r8
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	431c      	orrs	r4, r3
 8001600:	0324      	lsls	r4, r4, #12
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__aeabi_ddiv+0x5dc>)
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	e56e      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001608:	9a00      	ldr	r2, [sp, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3ea      	bcc.n	80015e4 <__aeabi_ddiv+0x5ac>
 800160e:	0005      	movs	r5, r0
 8001610:	e7d3      	b.n	80015ba <__aeabi_ddiv+0x582>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	0000043e 	.word	0x0000043e
 800161c:	0000041e 	.word	0x0000041e
 8001620:	000003ff 	.word	0x000003ff

08001624 <__eqdf2>:
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	46de      	mov	lr, fp
 800162c:	4657      	mov	r7, sl
 800162e:	4690      	mov	r8, r2
 8001630:	b5e0      	push	{r5, r6, r7, lr}
 8001632:	0017      	movs	r7, r2
 8001634:	031a      	lsls	r2, r3, #12
 8001636:	0b12      	lsrs	r2, r2, #12
 8001638:	0005      	movs	r5, r0
 800163a:	4684      	mov	ip, r0
 800163c:	4819      	ldr	r0, [pc, #100]	; (80016a4 <__eqdf2+0x80>)
 800163e:	030e      	lsls	r6, r1, #12
 8001640:	004c      	lsls	r4, r1, #1
 8001642:	4691      	mov	r9, r2
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	0fdb      	lsrs	r3, r3, #31
 8001648:	469b      	mov	fp, r3
 800164a:	0b36      	lsrs	r6, r6, #12
 800164c:	0d64      	lsrs	r4, r4, #21
 800164e:	0fc9      	lsrs	r1, r1, #31
 8001650:	0d52      	lsrs	r2, r2, #21
 8001652:	4284      	cmp	r4, r0
 8001654:	d019      	beq.n	800168a <__eqdf2+0x66>
 8001656:	4282      	cmp	r2, r0
 8001658:	d010      	beq.n	800167c <__eqdf2+0x58>
 800165a:	2001      	movs	r0, #1
 800165c:	4294      	cmp	r4, r2
 800165e:	d10e      	bne.n	800167e <__eqdf2+0x5a>
 8001660:	454e      	cmp	r6, r9
 8001662:	d10c      	bne.n	800167e <__eqdf2+0x5a>
 8001664:	2001      	movs	r0, #1
 8001666:	45c4      	cmp	ip, r8
 8001668:	d109      	bne.n	800167e <__eqdf2+0x5a>
 800166a:	4559      	cmp	r1, fp
 800166c:	d017      	beq.n	800169e <__eqdf2+0x7a>
 800166e:	2c00      	cmp	r4, #0
 8001670:	d105      	bne.n	800167e <__eqdf2+0x5a>
 8001672:	0030      	movs	r0, r6
 8001674:	4328      	orrs	r0, r5
 8001676:	1e43      	subs	r3, r0, #1
 8001678:	4198      	sbcs	r0, r3
 800167a:	e000      	b.n	800167e <__eqdf2+0x5a>
 800167c:	2001      	movs	r0, #1
 800167e:	bcf0      	pop	{r4, r5, r6, r7}
 8001680:	46bb      	mov	fp, r7
 8001682:	46b2      	mov	sl, r6
 8001684:	46a9      	mov	r9, r5
 8001686:	46a0      	mov	r8, r4
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	0033      	movs	r3, r6
 800168c:	2001      	movs	r0, #1
 800168e:	432b      	orrs	r3, r5
 8001690:	d1f5      	bne.n	800167e <__eqdf2+0x5a>
 8001692:	42a2      	cmp	r2, r4
 8001694:	d1f3      	bne.n	800167e <__eqdf2+0x5a>
 8001696:	464b      	mov	r3, r9
 8001698:	433b      	orrs	r3, r7
 800169a:	d1f0      	bne.n	800167e <__eqdf2+0x5a>
 800169c:	e7e2      	b.n	8001664 <__eqdf2+0x40>
 800169e:	2000      	movs	r0, #0
 80016a0:	e7ed      	b.n	800167e <__eqdf2+0x5a>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff

080016a8 <__gedf2>:
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	4647      	mov	r7, r8
 80016ac:	46ce      	mov	lr, r9
 80016ae:	0004      	movs	r4, r0
 80016b0:	0018      	movs	r0, r3
 80016b2:	0016      	movs	r6, r2
 80016b4:	031b      	lsls	r3, r3, #12
 80016b6:	0b1b      	lsrs	r3, r3, #12
 80016b8:	4d2d      	ldr	r5, [pc, #180]	; (8001770 <__gedf2+0xc8>)
 80016ba:	004a      	lsls	r2, r1, #1
 80016bc:	4699      	mov	r9, r3
 80016be:	b580      	push	{r7, lr}
 80016c0:	0043      	lsls	r3, r0, #1
 80016c2:	030f      	lsls	r7, r1, #12
 80016c4:	46a4      	mov	ip, r4
 80016c6:	46b0      	mov	r8, r6
 80016c8:	0b3f      	lsrs	r7, r7, #12
 80016ca:	0d52      	lsrs	r2, r2, #21
 80016cc:	0fc9      	lsrs	r1, r1, #31
 80016ce:	0d5b      	lsrs	r3, r3, #21
 80016d0:	0fc0      	lsrs	r0, r0, #31
 80016d2:	42aa      	cmp	r2, r5
 80016d4:	d021      	beq.n	800171a <__gedf2+0x72>
 80016d6:	42ab      	cmp	r3, r5
 80016d8:	d013      	beq.n	8001702 <__gedf2+0x5a>
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d122      	bne.n	8001724 <__gedf2+0x7c>
 80016de:	433c      	orrs	r4, r7
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <__gedf2+0x42>
 80016e4:	464d      	mov	r5, r9
 80016e6:	432e      	orrs	r6, r5
 80016e8:	d022      	beq.n	8001730 <__gedf2+0x88>
 80016ea:	2c00      	cmp	r4, #0
 80016ec:	d010      	beq.n	8001710 <__gedf2+0x68>
 80016ee:	4281      	cmp	r1, r0
 80016f0:	d022      	beq.n	8001738 <__gedf2+0x90>
 80016f2:	2002      	movs	r0, #2
 80016f4:	3901      	subs	r1, #1
 80016f6:	4008      	ands	r0, r1
 80016f8:	3801      	subs	r0, #1
 80016fa:	bcc0      	pop	{r6, r7}
 80016fc:	46b9      	mov	r9, r7
 80016fe:	46b0      	mov	r8, r6
 8001700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001702:	464d      	mov	r5, r9
 8001704:	432e      	orrs	r6, r5
 8001706:	d129      	bne.n	800175c <__gedf2+0xb4>
 8001708:	2a00      	cmp	r2, #0
 800170a:	d1f0      	bne.n	80016ee <__gedf2+0x46>
 800170c:	433c      	orrs	r4, r7
 800170e:	d1ee      	bne.n	80016ee <__gedf2+0x46>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1f2      	bne.n	80016fa <__gedf2+0x52>
 8001714:	2001      	movs	r0, #1
 8001716:	4240      	negs	r0, r0
 8001718:	e7ef      	b.n	80016fa <__gedf2+0x52>
 800171a:	003d      	movs	r5, r7
 800171c:	4325      	orrs	r5, r4
 800171e:	d11d      	bne.n	800175c <__gedf2+0xb4>
 8001720:	4293      	cmp	r3, r2
 8001722:	d0ee      	beq.n	8001702 <__gedf2+0x5a>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e2      	bne.n	80016ee <__gedf2+0x46>
 8001728:	464c      	mov	r4, r9
 800172a:	4326      	orrs	r6, r4
 800172c:	d1df      	bne.n	80016ee <__gedf2+0x46>
 800172e:	e7e0      	b.n	80016f2 <__gedf2+0x4a>
 8001730:	2000      	movs	r0, #0
 8001732:	2c00      	cmp	r4, #0
 8001734:	d0e1      	beq.n	80016fa <__gedf2+0x52>
 8001736:	e7dc      	b.n	80016f2 <__gedf2+0x4a>
 8001738:	429a      	cmp	r2, r3
 800173a:	dc0a      	bgt.n	8001752 <__gedf2+0xaa>
 800173c:	dbe8      	blt.n	8001710 <__gedf2+0x68>
 800173e:	454f      	cmp	r7, r9
 8001740:	d8d7      	bhi.n	80016f2 <__gedf2+0x4a>
 8001742:	d00e      	beq.n	8001762 <__gedf2+0xba>
 8001744:	2000      	movs	r0, #0
 8001746:	454f      	cmp	r7, r9
 8001748:	d2d7      	bcs.n	80016fa <__gedf2+0x52>
 800174a:	2900      	cmp	r1, #0
 800174c:	d0e2      	beq.n	8001714 <__gedf2+0x6c>
 800174e:	0008      	movs	r0, r1
 8001750:	e7d3      	b.n	80016fa <__gedf2+0x52>
 8001752:	4243      	negs	r3, r0
 8001754:	4158      	adcs	r0, r3
 8001756:	0040      	lsls	r0, r0, #1
 8001758:	3801      	subs	r0, #1
 800175a:	e7ce      	b.n	80016fa <__gedf2+0x52>
 800175c:	2002      	movs	r0, #2
 800175e:	4240      	negs	r0, r0
 8001760:	e7cb      	b.n	80016fa <__gedf2+0x52>
 8001762:	45c4      	cmp	ip, r8
 8001764:	d8c5      	bhi.n	80016f2 <__gedf2+0x4a>
 8001766:	2000      	movs	r0, #0
 8001768:	45c4      	cmp	ip, r8
 800176a:	d2c6      	bcs.n	80016fa <__gedf2+0x52>
 800176c:	e7ed      	b.n	800174a <__gedf2+0xa2>
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	000007ff 	.word	0x000007ff

08001774 <__ledf2>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	4647      	mov	r7, r8
 8001778:	46ce      	mov	lr, r9
 800177a:	0004      	movs	r4, r0
 800177c:	0018      	movs	r0, r3
 800177e:	0016      	movs	r6, r2
 8001780:	031b      	lsls	r3, r3, #12
 8001782:	0b1b      	lsrs	r3, r3, #12
 8001784:	4d2c      	ldr	r5, [pc, #176]	; (8001838 <__ledf2+0xc4>)
 8001786:	004a      	lsls	r2, r1, #1
 8001788:	4699      	mov	r9, r3
 800178a:	b580      	push	{r7, lr}
 800178c:	0043      	lsls	r3, r0, #1
 800178e:	030f      	lsls	r7, r1, #12
 8001790:	46a4      	mov	ip, r4
 8001792:	46b0      	mov	r8, r6
 8001794:	0b3f      	lsrs	r7, r7, #12
 8001796:	0d52      	lsrs	r2, r2, #21
 8001798:	0fc9      	lsrs	r1, r1, #31
 800179a:	0d5b      	lsrs	r3, r3, #21
 800179c:	0fc0      	lsrs	r0, r0, #31
 800179e:	42aa      	cmp	r2, r5
 80017a0:	d00d      	beq.n	80017be <__ledf2+0x4a>
 80017a2:	42ab      	cmp	r3, r5
 80017a4:	d010      	beq.n	80017c8 <__ledf2+0x54>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d127      	bne.n	80017fa <__ledf2+0x86>
 80017aa:	433c      	orrs	r4, r7
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <__ledf2+0x60>
 80017b0:	464d      	mov	r5, r9
 80017b2:	432e      	orrs	r6, r5
 80017b4:	d10e      	bne.n	80017d4 <__ledf2+0x60>
 80017b6:	2000      	movs	r0, #0
 80017b8:	2c00      	cmp	r4, #0
 80017ba:	d015      	beq.n	80017e8 <__ledf2+0x74>
 80017bc:	e00e      	b.n	80017dc <__ledf2+0x68>
 80017be:	003d      	movs	r5, r7
 80017c0:	4325      	orrs	r5, r4
 80017c2:	d110      	bne.n	80017e6 <__ledf2+0x72>
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d118      	bne.n	80017fa <__ledf2+0x86>
 80017c8:	464d      	mov	r5, r9
 80017ca:	432e      	orrs	r6, r5
 80017cc:	d10b      	bne.n	80017e6 <__ledf2+0x72>
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d102      	bne.n	80017d8 <__ledf2+0x64>
 80017d2:	433c      	orrs	r4, r7
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d00b      	beq.n	80017f0 <__ledf2+0x7c>
 80017d8:	4281      	cmp	r1, r0
 80017da:	d014      	beq.n	8001806 <__ledf2+0x92>
 80017dc:	2002      	movs	r0, #2
 80017de:	3901      	subs	r1, #1
 80017e0:	4008      	ands	r0, r1
 80017e2:	3801      	subs	r0, #1
 80017e4:	e000      	b.n	80017e8 <__ledf2+0x74>
 80017e6:	2002      	movs	r0, #2
 80017e8:	bcc0      	pop	{r6, r7}
 80017ea:	46b9      	mov	r9, r7
 80017ec:	46b0      	mov	r8, r6
 80017ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d1f9      	bne.n	80017e8 <__ledf2+0x74>
 80017f4:	2001      	movs	r0, #1
 80017f6:	4240      	negs	r0, r0
 80017f8:	e7f6      	b.n	80017e8 <__ledf2+0x74>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ec      	bne.n	80017d8 <__ledf2+0x64>
 80017fe:	464c      	mov	r4, r9
 8001800:	4326      	orrs	r6, r4
 8001802:	d1e9      	bne.n	80017d8 <__ledf2+0x64>
 8001804:	e7ea      	b.n	80017dc <__ledf2+0x68>
 8001806:	429a      	cmp	r2, r3
 8001808:	dd04      	ble.n	8001814 <__ledf2+0xa0>
 800180a:	4243      	negs	r3, r0
 800180c:	4158      	adcs	r0, r3
 800180e:	0040      	lsls	r0, r0, #1
 8001810:	3801      	subs	r0, #1
 8001812:	e7e9      	b.n	80017e8 <__ledf2+0x74>
 8001814:	429a      	cmp	r2, r3
 8001816:	dbeb      	blt.n	80017f0 <__ledf2+0x7c>
 8001818:	454f      	cmp	r7, r9
 800181a:	d8df      	bhi.n	80017dc <__ledf2+0x68>
 800181c:	d006      	beq.n	800182c <__ledf2+0xb8>
 800181e:	2000      	movs	r0, #0
 8001820:	454f      	cmp	r7, r9
 8001822:	d2e1      	bcs.n	80017e8 <__ledf2+0x74>
 8001824:	2900      	cmp	r1, #0
 8001826:	d0e5      	beq.n	80017f4 <__ledf2+0x80>
 8001828:	0008      	movs	r0, r1
 800182a:	e7dd      	b.n	80017e8 <__ledf2+0x74>
 800182c:	45c4      	cmp	ip, r8
 800182e:	d8d5      	bhi.n	80017dc <__ledf2+0x68>
 8001830:	2000      	movs	r0, #0
 8001832:	45c4      	cmp	ip, r8
 8001834:	d2d8      	bcs.n	80017e8 <__ledf2+0x74>
 8001836:	e7f5      	b.n	8001824 <__ledf2+0xb0>
 8001838:	000007ff 	.word	0x000007ff

0800183c <__aeabi_dmul>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	464e      	mov	r6, r9
 8001842:	4645      	mov	r5, r8
 8001844:	46de      	mov	lr, fp
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	4698      	mov	r8, r3
 800184a:	030c      	lsls	r4, r1, #12
 800184c:	004b      	lsls	r3, r1, #1
 800184e:	0006      	movs	r6, r0
 8001850:	4692      	mov	sl, r2
 8001852:	b087      	sub	sp, #28
 8001854:	0b24      	lsrs	r4, r4, #12
 8001856:	0d5b      	lsrs	r3, r3, #21
 8001858:	0fcf      	lsrs	r7, r1, #31
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <__aeabi_dmul+0x24>
 800185e:	e15c      	b.n	8001b1a <__aeabi_dmul+0x2de>
 8001860:	4ad9      	ldr	r2, [pc, #868]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x2c>
 8001866:	e175      	b.n	8001b54 <__aeabi_dmul+0x318>
 8001868:	0f42      	lsrs	r2, r0, #29
 800186a:	00e4      	lsls	r4, r4, #3
 800186c:	4314      	orrs	r4, r2
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	0412      	lsls	r2, r2, #16
 8001872:	4314      	orrs	r4, r2
 8001874:	4ad5      	ldr	r2, [pc, #852]	; (8001bcc <__aeabi_dmul+0x390>)
 8001876:	00c5      	lsls	r5, r0, #3
 8001878:	4694      	mov	ip, r2
 800187a:	4463      	add	r3, ip
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	4699      	mov	r9, r3
 8001882:	469b      	mov	fp, r3
 8001884:	4643      	mov	r3, r8
 8001886:	4642      	mov	r2, r8
 8001888:	031e      	lsls	r6, r3, #12
 800188a:	0fd2      	lsrs	r2, r2, #31
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4650      	mov	r0, sl
 8001890:	4690      	mov	r8, r2
 8001892:	0b36      	lsrs	r6, r6, #12
 8001894:	0d5b      	lsrs	r3, r3, #21
 8001896:	d100      	bne.n	800189a <__aeabi_dmul+0x5e>
 8001898:	e120      	b.n	8001adc <__aeabi_dmul+0x2a0>
 800189a:	4acb      	ldr	r2, [pc, #812]	; (8001bc8 <__aeabi_dmul+0x38c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d100      	bne.n	80018a2 <__aeabi_dmul+0x66>
 80018a0:	e162      	b.n	8001b68 <__aeabi_dmul+0x32c>
 80018a2:	49ca      	ldr	r1, [pc, #808]	; (8001bcc <__aeabi_dmul+0x390>)
 80018a4:	0f42      	lsrs	r2, r0, #29
 80018a6:	468c      	mov	ip, r1
 80018a8:	9900      	ldr	r1, [sp, #0]
 80018aa:	4463      	add	r3, ip
 80018ac:	00f6      	lsls	r6, r6, #3
 80018ae:	468c      	mov	ip, r1
 80018b0:	4316      	orrs	r6, r2
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	449c      	add	ip, r3
 80018b6:	0412      	lsls	r2, r2, #16
 80018b8:	4663      	mov	r3, ip
 80018ba:	4316      	orrs	r6, r2
 80018bc:	00c2      	lsls	r2, r0, #3
 80018be:	2000      	movs	r0, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	9900      	ldr	r1, [sp, #0]
 80018c4:	4643      	mov	r3, r8
 80018c6:	3101      	adds	r1, #1
 80018c8:	468c      	mov	ip, r1
 80018ca:	4649      	mov	r1, r9
 80018cc:	407b      	eors	r3, r7
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	290f      	cmp	r1, #15
 80018d2:	d826      	bhi.n	8001922 <__aeabi_dmul+0xe6>
 80018d4:	4bbe      	ldr	r3, [pc, #760]	; (8001bd0 <__aeabi_dmul+0x394>)
 80018d6:	0089      	lsls	r1, r1, #2
 80018d8:	5859      	ldr	r1, [r3, r1]
 80018da:	468f      	mov	pc, r1
 80018dc:	4643      	mov	r3, r8
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	0034      	movs	r4, r6
 80018e2:	0015      	movs	r5, r2
 80018e4:	4683      	mov	fp, r0
 80018e6:	465b      	mov	r3, fp
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d016      	beq.n	800191a <__aeabi_dmul+0xde>
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dmul+0xb6>
 80018f0:	e203      	b.n	8001cfa <__aeabi_dmul+0x4be>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dmul+0xbc>
 80018f6:	e0cd      	b.n	8001a94 <__aeabi_dmul+0x258>
 80018f8:	2200      	movs	r2, #0
 80018fa:	2400      	movs	r4, #0
 80018fc:	2500      	movs	r5, #0
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	0512      	lsls	r2, r2, #20
 8001902:	4322      	orrs	r2, r4
 8001904:	07db      	lsls	r3, r3, #31
 8001906:	431a      	orrs	r2, r3
 8001908:	0028      	movs	r0, r5
 800190a:	0011      	movs	r1, r2
 800190c:	b007      	add	sp, #28
 800190e:	bcf0      	pop	{r4, r5, r6, r7}
 8001910:	46bb      	mov	fp, r7
 8001912:	46b2      	mov	sl, r6
 8001914:	46a9      	mov	r9, r5
 8001916:	46a0      	mov	r8, r4
 8001918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191a:	2400      	movs	r4, #0
 800191c:	2500      	movs	r5, #0
 800191e:	4aaa      	ldr	r2, [pc, #680]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001920:	e7ed      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001922:	0c28      	lsrs	r0, r5, #16
 8001924:	042d      	lsls	r5, r5, #16
 8001926:	0c2d      	lsrs	r5, r5, #16
 8001928:	002b      	movs	r3, r5
 800192a:	0c11      	lsrs	r1, r2, #16
 800192c:	0412      	lsls	r2, r2, #16
 800192e:	0c12      	lsrs	r2, r2, #16
 8001930:	4353      	muls	r3, r2
 8001932:	4698      	mov	r8, r3
 8001934:	0013      	movs	r3, r2
 8001936:	002f      	movs	r7, r5
 8001938:	4343      	muls	r3, r0
 800193a:	4699      	mov	r9, r3
 800193c:	434f      	muls	r7, r1
 800193e:	444f      	add	r7, r9
 8001940:	46bb      	mov	fp, r7
 8001942:	4647      	mov	r7, r8
 8001944:	000b      	movs	r3, r1
 8001946:	0c3f      	lsrs	r7, r7, #16
 8001948:	46ba      	mov	sl, r7
 800194a:	4343      	muls	r3, r0
 800194c:	44da      	add	sl, fp
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	45d1      	cmp	r9, sl
 8001952:	d904      	bls.n	800195e <__aeabi_dmul+0x122>
 8001954:	2780      	movs	r7, #128	; 0x80
 8001956:	027f      	lsls	r7, r7, #9
 8001958:	46b9      	mov	r9, r7
 800195a:	444b      	add	r3, r9
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	4653      	mov	r3, sl
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	469b      	mov	fp, r3
 8001964:	4653      	mov	r3, sl
 8001966:	041f      	lsls	r7, r3, #16
 8001968:	4643      	mov	r3, r8
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	4698      	mov	r8, r3
 8001970:	003b      	movs	r3, r7
 8001972:	4443      	add	r3, r8
 8001974:	9304      	str	r3, [sp, #16]
 8001976:	0c33      	lsrs	r3, r6, #16
 8001978:	0436      	lsls	r6, r6, #16
 800197a:	0c36      	lsrs	r6, r6, #16
 800197c:	4698      	mov	r8, r3
 800197e:	0033      	movs	r3, r6
 8001980:	4343      	muls	r3, r0
 8001982:	4699      	mov	r9, r3
 8001984:	4643      	mov	r3, r8
 8001986:	4343      	muls	r3, r0
 8001988:	002f      	movs	r7, r5
 800198a:	469a      	mov	sl, r3
 800198c:	4643      	mov	r3, r8
 800198e:	4377      	muls	r7, r6
 8001990:	435d      	muls	r5, r3
 8001992:	0c38      	lsrs	r0, r7, #16
 8001994:	444d      	add	r5, r9
 8001996:	1945      	adds	r5, r0, r5
 8001998:	45a9      	cmp	r9, r5
 800199a:	d903      	bls.n	80019a4 <__aeabi_dmul+0x168>
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	025b      	lsls	r3, r3, #9
 80019a0:	4699      	mov	r9, r3
 80019a2:	44ca      	add	sl, r9
 80019a4:	043f      	lsls	r7, r7, #16
 80019a6:	0c28      	lsrs	r0, r5, #16
 80019a8:	0c3f      	lsrs	r7, r7, #16
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	19ed      	adds	r5, r5, r7
 80019ae:	0c27      	lsrs	r7, r4, #16
 80019b0:	0424      	lsls	r4, r4, #16
 80019b2:	0c24      	lsrs	r4, r4, #16
 80019b4:	0003      	movs	r3, r0
 80019b6:	0020      	movs	r0, r4
 80019b8:	4350      	muls	r0, r2
 80019ba:	437a      	muls	r2, r7
 80019bc:	4691      	mov	r9, r2
 80019be:	003a      	movs	r2, r7
 80019c0:	4453      	add	r3, sl
 80019c2:	9305      	str	r3, [sp, #20]
 80019c4:	0c03      	lsrs	r3, r0, #16
 80019c6:	469a      	mov	sl, r3
 80019c8:	434a      	muls	r2, r1
 80019ca:	4361      	muls	r1, r4
 80019cc:	4449      	add	r1, r9
 80019ce:	4451      	add	r1, sl
 80019d0:	44ab      	add	fp, r5
 80019d2:	4589      	cmp	r9, r1
 80019d4:	d903      	bls.n	80019de <__aeabi_dmul+0x1a2>
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	4699      	mov	r9, r3
 80019dc:	444a      	add	r2, r9
 80019de:	0400      	lsls	r0, r0, #16
 80019e0:	0c0b      	lsrs	r3, r1, #16
 80019e2:	0c00      	lsrs	r0, r0, #16
 80019e4:	0409      	lsls	r1, r1, #16
 80019e6:	1809      	adds	r1, r1, r0
 80019e8:	0020      	movs	r0, r4
 80019ea:	4699      	mov	r9, r3
 80019ec:	4643      	mov	r3, r8
 80019ee:	4370      	muls	r0, r6
 80019f0:	435c      	muls	r4, r3
 80019f2:	437e      	muls	r6, r7
 80019f4:	435f      	muls	r7, r3
 80019f6:	0c03      	lsrs	r3, r0, #16
 80019f8:	4698      	mov	r8, r3
 80019fa:	19a4      	adds	r4, r4, r6
 80019fc:	4444      	add	r4, r8
 80019fe:	444a      	add	r2, r9
 8001a00:	9703      	str	r7, [sp, #12]
 8001a02:	42a6      	cmp	r6, r4
 8001a04:	d904      	bls.n	8001a10 <__aeabi_dmul+0x1d4>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	4447      	add	r7, r8
 8001a0e:	9703      	str	r7, [sp, #12]
 8001a10:	0423      	lsls	r3, r4, #16
 8001a12:	9e02      	ldr	r6, [sp, #8]
 8001a14:	469a      	mov	sl, r3
 8001a16:	9b05      	ldr	r3, [sp, #20]
 8001a18:	445e      	add	r6, fp
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	42ae      	cmp	r6, r5
 8001a1e:	41ad      	sbcs	r5, r5
 8001a20:	1876      	adds	r6, r6, r1
 8001a22:	428e      	cmp	r6, r1
 8001a24:	4189      	sbcs	r1, r1
 8001a26:	0400      	lsls	r0, r0, #16
 8001a28:	0c00      	lsrs	r0, r0, #16
 8001a2a:	4450      	add	r0, sl
 8001a2c:	4440      	add	r0, r8
 8001a2e:	426d      	negs	r5, r5
 8001a30:	1947      	adds	r7, r0, r5
 8001a32:	46b8      	mov	r8, r7
 8001a34:	4693      	mov	fp, r2
 8001a36:	4249      	negs	r1, r1
 8001a38:	4689      	mov	r9, r1
 8001a3a:	44c3      	add	fp, r8
 8001a3c:	44d9      	add	r9, fp
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	4180      	sbcs	r0, r0
 8001a42:	45a8      	cmp	r8, r5
 8001a44:	41ad      	sbcs	r5, r5
 8001a46:	4593      	cmp	fp, r2
 8001a48:	4192      	sbcs	r2, r2
 8001a4a:	4589      	cmp	r9, r1
 8001a4c:	4189      	sbcs	r1, r1
 8001a4e:	426d      	negs	r5, r5
 8001a50:	4240      	negs	r0, r0
 8001a52:	4328      	orrs	r0, r5
 8001a54:	0c24      	lsrs	r4, r4, #16
 8001a56:	4252      	negs	r2, r2
 8001a58:	4249      	negs	r1, r1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	1900      	adds	r0, r0, r4
 8001a60:	1880      	adds	r0, r0, r2
 8001a62:	18c7      	adds	r7, r0, r3
 8001a64:	464b      	mov	r3, r9
 8001a66:	0ddc      	lsrs	r4, r3, #23
 8001a68:	9b04      	ldr	r3, [sp, #16]
 8001a6a:	0275      	lsls	r5, r6, #9
 8001a6c:	431d      	orrs	r5, r3
 8001a6e:	1e6a      	subs	r2, r5, #1
 8001a70:	4195      	sbcs	r5, r2
 8001a72:	464b      	mov	r3, r9
 8001a74:	0df6      	lsrs	r6, r6, #23
 8001a76:	027f      	lsls	r7, r7, #9
 8001a78:	4335      	orrs	r5, r6
 8001a7a:	025a      	lsls	r2, r3, #9
 8001a7c:	433c      	orrs	r4, r7
 8001a7e:	4315      	orrs	r5, r2
 8001a80:	01fb      	lsls	r3, r7, #7
 8001a82:	d400      	bmi.n	8001a86 <__aeabi_dmul+0x24a>
 8001a84:	e11c      	b.n	8001cc0 <__aeabi_dmul+0x484>
 8001a86:	2101      	movs	r1, #1
 8001a88:	086a      	lsrs	r2, r5, #1
 8001a8a:	400d      	ands	r5, r1
 8001a8c:	4315      	orrs	r5, r2
 8001a8e:	07e2      	lsls	r2, r4, #31
 8001a90:	4315      	orrs	r5, r2
 8001a92:	0864      	lsrs	r4, r4, #1
 8001a94:	494f      	ldr	r1, [pc, #316]	; (8001bd4 <__aeabi_dmul+0x398>)
 8001a96:	4461      	add	r1, ip
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	dc00      	bgt.n	8001a9e <__aeabi_dmul+0x262>
 8001a9c:	e0b0      	b.n	8001c00 <__aeabi_dmul+0x3c4>
 8001a9e:	076b      	lsls	r3, r5, #29
 8001aa0:	d009      	beq.n	8001ab6 <__aeabi_dmul+0x27a>
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	402a      	ands	r2, r5
 8001aa6:	2a04      	cmp	r2, #4
 8001aa8:	d005      	beq.n	8001ab6 <__aeabi_dmul+0x27a>
 8001aaa:	1d2a      	adds	r2, r5, #4
 8001aac:	42aa      	cmp	r2, r5
 8001aae:	41ad      	sbcs	r5, r5
 8001ab0:	426d      	negs	r5, r5
 8001ab2:	1964      	adds	r4, r4, r5
 8001ab4:	0015      	movs	r5, r2
 8001ab6:	01e3      	lsls	r3, r4, #7
 8001ab8:	d504      	bpl.n	8001ac4 <__aeabi_dmul+0x288>
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <__aeabi_dmul+0x39c>)
 8001abe:	00c9      	lsls	r1, r1, #3
 8001ac0:	4014      	ands	r4, r2
 8001ac2:	4461      	add	r1, ip
 8001ac4:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <__aeabi_dmul+0x3a0>)
 8001ac6:	4291      	cmp	r1, r2
 8001ac8:	dd00      	ble.n	8001acc <__aeabi_dmul+0x290>
 8001aca:	e726      	b.n	800191a <__aeabi_dmul+0xde>
 8001acc:	0762      	lsls	r2, r4, #29
 8001ace:	08ed      	lsrs	r5, r5, #3
 8001ad0:	0264      	lsls	r4, r4, #9
 8001ad2:	0549      	lsls	r1, r1, #21
 8001ad4:	4315      	orrs	r5, r2
 8001ad6:	0b24      	lsrs	r4, r4, #12
 8001ad8:	0d4a      	lsrs	r2, r1, #21
 8001ada:	e710      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001adc:	4652      	mov	r2, sl
 8001ade:	4332      	orrs	r2, r6
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dmul+0x2a8>
 8001ae2:	e07f      	b.n	8001be4 <__aeabi_dmul+0x3a8>
 8001ae4:	2e00      	cmp	r6, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dmul+0x2ae>
 8001ae8:	e0dc      	b.n	8001ca4 <__aeabi_dmul+0x468>
 8001aea:	0030      	movs	r0, r6
 8001aec:	f000 fd96 	bl	800261c <__clzsi2>
 8001af0:	0002      	movs	r2, r0
 8001af2:	3a0b      	subs	r2, #11
 8001af4:	231d      	movs	r3, #29
 8001af6:	0001      	movs	r1, r0
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	4652      	mov	r2, sl
 8001afc:	3908      	subs	r1, #8
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	408e      	lsls	r6, r1
 8001b02:	4316      	orrs	r6, r2
 8001b04:	4652      	mov	r2, sl
 8001b06:	408a      	lsls	r2, r1
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	4935      	ldr	r1, [pc, #212]	; (8001be0 <__aeabi_dmul+0x3a4>)
 8001b0c:	1a18      	subs	r0, r3, r0
 8001b0e:	0003      	movs	r3, r0
 8001b10:	468c      	mov	ip, r1
 8001b12:	4463      	add	r3, ip
 8001b14:	2000      	movs	r0, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	e6d3      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001b1a:	0025      	movs	r5, r4
 8001b1c:	4305      	orrs	r5, r0
 8001b1e:	d04a      	beq.n	8001bb6 <__aeabi_dmul+0x37a>
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x2ea>
 8001b24:	e0b0      	b.n	8001c88 <__aeabi_dmul+0x44c>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fd78 	bl	800261c <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	390b      	subs	r1, #11
 8001b32:	231d      	movs	r3, #29
 8001b34:	0010      	movs	r0, r2
 8001b36:	1a5b      	subs	r3, r3, r1
 8001b38:	0031      	movs	r1, r6
 8001b3a:	0035      	movs	r5, r6
 8001b3c:	3808      	subs	r0, #8
 8001b3e:	4084      	lsls	r4, r0
 8001b40:	40d9      	lsrs	r1, r3
 8001b42:	4085      	lsls	r5, r0
 8001b44:	430c      	orrs	r4, r1
 8001b46:	4826      	ldr	r0, [pc, #152]	; (8001be0 <__aeabi_dmul+0x3a4>)
 8001b48:	1a83      	subs	r3, r0, r2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4699      	mov	r9, r3
 8001b50:	469b      	mov	fp, r3
 8001b52:	e697      	b.n	8001884 <__aeabi_dmul+0x48>
 8001b54:	0005      	movs	r5, r0
 8001b56:	4325      	orrs	r5, r4
 8001b58:	d126      	bne.n	8001ba8 <__aeabi_dmul+0x36c>
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	2400      	movs	r4, #0
 8001b62:	4691      	mov	r9, r2
 8001b64:	469b      	mov	fp, r3
 8001b66:	e68d      	b.n	8001884 <__aeabi_dmul+0x48>
 8001b68:	4652      	mov	r2, sl
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	4332      	orrs	r2, r6
 8001b6e:	d110      	bne.n	8001b92 <__aeabi_dmul+0x356>
 8001b70:	4915      	ldr	r1, [pc, #84]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001b72:	2600      	movs	r6, #0
 8001b74:	468c      	mov	ip, r1
 8001b76:	4463      	add	r3, ip
 8001b78:	4649      	mov	r1, r9
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	4319      	orrs	r1, r3
 8001b80:	4689      	mov	r9, r1
 8001b82:	2002      	movs	r0, #2
 8001b84:	e69d      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001b86:	465b      	mov	r3, fp
 8001b88:	9701      	str	r7, [sp, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dmul+0x354>
 8001b8e:	e6ad      	b.n	80018ec <__aeabi_dmul+0xb0>
 8001b90:	e6c3      	b.n	800191a <__aeabi_dmul+0xde>
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001b94:	2003      	movs	r0, #3
 8001b96:	4694      	mov	ip, r2
 8001b98:	4463      	add	r3, ip
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	4691      	mov	r9, r2
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	e68c      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001ba8:	220c      	movs	r2, #12
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2303      	movs	r3, #3
 8001bae:	0005      	movs	r5, r0
 8001bb0:	4691      	mov	r9, r2
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	e666      	b.n	8001884 <__aeabi_dmul+0x48>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	4699      	mov	r9, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	469b      	mov	fp, r3
 8001bc4:	e65e      	b.n	8001884 <__aeabi_dmul+0x48>
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	000007ff 	.word	0x000007ff
 8001bcc:	fffffc01 	.word	0xfffffc01
 8001bd0:	08007d9c 	.word	0x08007d9c
 8001bd4:	000003ff 	.word	0x000003ff
 8001bd8:	feffffff 	.word	0xfeffffff
 8001bdc:	000007fe 	.word	0x000007fe
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	4649      	mov	r1, r9
 8001be6:	2301      	movs	r3, #1
 8001be8:	4319      	orrs	r1, r3
 8001bea:	4689      	mov	r9, r1
 8001bec:	2600      	movs	r6, #0
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e667      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2480      	movs	r4, #128	; 0x80
 8001bf6:	2500      	movs	r5, #0
 8001bf8:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	0324      	lsls	r4, r4, #12
 8001bfe:	e67e      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c00:	2001      	movs	r0, #1
 8001c02:	1a40      	subs	r0, r0, r1
 8001c04:	2838      	cmp	r0, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dmul+0x3ce>
 8001c08:	e676      	b.n	80018f8 <__aeabi_dmul+0xbc>
 8001c0a:	281f      	cmp	r0, #31
 8001c0c:	dd5b      	ble.n	8001cc6 <__aeabi_dmul+0x48a>
 8001c0e:	221f      	movs	r2, #31
 8001c10:	0023      	movs	r3, r4
 8001c12:	4252      	negs	r2, r2
 8001c14:	1a51      	subs	r1, r2, r1
 8001c16:	40cb      	lsrs	r3, r1
 8001c18:	0019      	movs	r1, r3
 8001c1a:	2820      	cmp	r0, #32
 8001c1c:	d003      	beq.n	8001c26 <__aeabi_dmul+0x3ea>
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <__aeabi_dmul+0x4d0>)
 8001c20:	4462      	add	r2, ip
 8001c22:	4094      	lsls	r4, r2
 8001c24:	4325      	orrs	r5, r4
 8001c26:	1e6a      	subs	r2, r5, #1
 8001c28:	4195      	sbcs	r5, r2
 8001c2a:	002a      	movs	r2, r5
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	2107      	movs	r1, #7
 8001c30:	000d      	movs	r5, r1
 8001c32:	2400      	movs	r4, #0
 8001c34:	4015      	ands	r5, r2
 8001c36:	4211      	tst	r1, r2
 8001c38:	d05b      	beq.n	8001cf2 <__aeabi_dmul+0x4b6>
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	4011      	ands	r1, r2
 8001c40:	2904      	cmp	r1, #4
 8001c42:	d053      	beq.n	8001cec <__aeabi_dmul+0x4b0>
 8001c44:	1d11      	adds	r1, r2, #4
 8001c46:	4291      	cmp	r1, r2
 8001c48:	4192      	sbcs	r2, r2
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	18a4      	adds	r4, r4, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	0223      	lsls	r3, r4, #8
 8001c52:	d54b      	bpl.n	8001cec <__aeabi_dmul+0x4b0>
 8001c54:	2201      	movs	r2, #1
 8001c56:	2400      	movs	r4, #0
 8001c58:	2500      	movs	r5, #0
 8001c5a:	e650      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	421c      	tst	r4, r3
 8001c62:	d009      	beq.n	8001c78 <__aeabi_dmul+0x43c>
 8001c64:	421e      	tst	r6, r3
 8001c66:	d107      	bne.n	8001c78 <__aeabi_dmul+0x43c>
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	031c      	lsls	r4, r3, #12
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	0015      	movs	r5, r2
 8001c70:	0b24      	lsrs	r4, r4, #12
 8001c72:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	e642      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	0312      	lsls	r2, r2, #12
 8001c7c:	4314      	orrs	r4, r2
 8001c7e:	0324      	lsls	r4, r4, #12
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001c82:	0b24      	lsrs	r4, r4, #12
 8001c84:	9701      	str	r7, [sp, #4]
 8001c86:	e63a      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c88:	f000 fcc8 	bl	800261c <__clzsi2>
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	0002      	movs	r2, r0
 8001c90:	3115      	adds	r1, #21
 8001c92:	3220      	adds	r2, #32
 8001c94:	291c      	cmp	r1, #28
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dmul+0x45e>
 8001c98:	e74b      	b.n	8001b32 <__aeabi_dmul+0x2f6>
 8001c9a:	0034      	movs	r4, r6
 8001c9c:	3808      	subs	r0, #8
 8001c9e:	2500      	movs	r5, #0
 8001ca0:	4084      	lsls	r4, r0
 8001ca2:	e750      	b.n	8001b46 <__aeabi_dmul+0x30a>
 8001ca4:	f000 fcba 	bl	800261c <__clzsi2>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	001a      	movs	r2, r3
 8001cac:	3215      	adds	r2, #21
 8001cae:	3020      	adds	r0, #32
 8001cb0:	2a1c      	cmp	r2, #28
 8001cb2:	dc00      	bgt.n	8001cb6 <__aeabi_dmul+0x47a>
 8001cb4:	e71e      	b.n	8001af4 <__aeabi_dmul+0x2b8>
 8001cb6:	4656      	mov	r6, sl
 8001cb8:	3b08      	subs	r3, #8
 8001cba:	2200      	movs	r2, #0
 8001cbc:	409e      	lsls	r6, r3
 8001cbe:	e723      	b.n	8001b08 <__aeabi_dmul+0x2cc>
 8001cc0:	9b00      	ldr	r3, [sp, #0]
 8001cc2:	469c      	mov	ip, r3
 8001cc4:	e6e6      	b.n	8001a94 <__aeabi_dmul+0x258>
 8001cc6:	4912      	ldr	r1, [pc, #72]	; (8001d10 <__aeabi_dmul+0x4d4>)
 8001cc8:	0022      	movs	r2, r4
 8001cca:	4461      	add	r1, ip
 8001ccc:	002e      	movs	r6, r5
 8001cce:	408d      	lsls	r5, r1
 8001cd0:	408a      	lsls	r2, r1
 8001cd2:	40c6      	lsrs	r6, r0
 8001cd4:	1e69      	subs	r1, r5, #1
 8001cd6:	418d      	sbcs	r5, r1
 8001cd8:	4332      	orrs	r2, r6
 8001cda:	432a      	orrs	r2, r5
 8001cdc:	40c4      	lsrs	r4, r0
 8001cde:	0753      	lsls	r3, r2, #29
 8001ce0:	d0b6      	beq.n	8001c50 <__aeabi_dmul+0x414>
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	4011      	ands	r1, r2
 8001ce6:	2904      	cmp	r1, #4
 8001ce8:	d1ac      	bne.n	8001c44 <__aeabi_dmul+0x408>
 8001cea:	e7b1      	b.n	8001c50 <__aeabi_dmul+0x414>
 8001cec:	0765      	lsls	r5, r4, #29
 8001cee:	0264      	lsls	r4, r4, #9
 8001cf0:	0b24      	lsrs	r4, r4, #12
 8001cf2:	08d2      	lsrs	r2, r2, #3
 8001cf4:	4315      	orrs	r5, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	e601      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0312      	lsls	r2, r2, #12
 8001cfe:	4314      	orrs	r4, r2
 8001d00:	0324      	lsls	r4, r4, #12
 8001d02:	4a01      	ldr	r2, [pc, #4]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001d04:	0b24      	lsrs	r4, r4, #12
 8001d06:	e5fa      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001d08:	000007ff 	.word	0x000007ff
 8001d0c:	0000043e 	.word	0x0000043e
 8001d10:	0000041e 	.word	0x0000041e

08001d14 <__aeabi_dsub>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	4657      	mov	r7, sl
 8001d18:	464e      	mov	r6, r9
 8001d1a:	4645      	mov	r5, r8
 8001d1c:	46de      	mov	lr, fp
 8001d1e:	b5e0      	push	{r5, r6, r7, lr}
 8001d20:	001e      	movs	r6, r3
 8001d22:	0017      	movs	r7, r2
 8001d24:	004a      	lsls	r2, r1, #1
 8001d26:	030b      	lsls	r3, r1, #12
 8001d28:	0d52      	lsrs	r2, r2, #21
 8001d2a:	0a5b      	lsrs	r3, r3, #9
 8001d2c:	4690      	mov	r8, r2
 8001d2e:	0f42      	lsrs	r2, r0, #29
 8001d30:	431a      	orrs	r2, r3
 8001d32:	0fcd      	lsrs	r5, r1, #31
 8001d34:	4ccd      	ldr	r4, [pc, #820]	; (800206c <__aeabi_dsub+0x358>)
 8001d36:	0331      	lsls	r1, r6, #12
 8001d38:	00c3      	lsls	r3, r0, #3
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	0070      	lsls	r0, r6, #1
 8001d3e:	0f7a      	lsrs	r2, r7, #29
 8001d40:	0a49      	lsrs	r1, r1, #9
 8001d42:	00ff      	lsls	r7, r7, #3
 8001d44:	469a      	mov	sl, r3
 8001d46:	46b9      	mov	r9, r7
 8001d48:	0d40      	lsrs	r0, r0, #21
 8001d4a:	0ff6      	lsrs	r6, r6, #31
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	42a0      	cmp	r0, r4
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x40>
 8001d52:	e0b1      	b.n	8001eb8 <__aeabi_dsub+0x1a4>
 8001d54:	2201      	movs	r2, #1
 8001d56:	4056      	eors	r6, r2
 8001d58:	46b3      	mov	fp, r6
 8001d5a:	42b5      	cmp	r5, r6
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x4c>
 8001d5e:	e088      	b.n	8001e72 <__aeabi_dsub+0x15e>
 8001d60:	4642      	mov	r2, r8
 8001d62:	1a12      	subs	r2, r2, r0
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x56>
 8001d68:	e0ae      	b.n	8001ec8 <__aeabi_dsub+0x1b4>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x5c>
 8001d6e:	e0c1      	b.n	8001ef4 <__aeabi_dsub+0x1e0>
 8001d70:	48be      	ldr	r0, [pc, #760]	; (800206c <__aeabi_dsub+0x358>)
 8001d72:	4580      	cmp	r8, r0
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x64>
 8001d76:	e151      	b.n	800201c <__aeabi_dsub+0x308>
 8001d78:	2080      	movs	r0, #128	; 0x80
 8001d7a:	0400      	lsls	r0, r0, #16
 8001d7c:	4301      	orrs	r1, r0
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x70>
 8001d82:	e17b      	b.n	800207c <__aeabi_dsub+0x368>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dd00      	ble.n	8001d8a <__aeabi_dsub+0x76>
 8001d88:	e1ee      	b.n	8002168 <__aeabi_dsub+0x454>
 8001d8a:	2020      	movs	r0, #32
 8001d8c:	003e      	movs	r6, r7
 8001d8e:	1a80      	subs	r0, r0, r2
 8001d90:	000c      	movs	r4, r1
 8001d92:	40d6      	lsrs	r6, r2
 8001d94:	40d1      	lsrs	r1, r2
 8001d96:	4087      	lsls	r7, r0
 8001d98:	4662      	mov	r2, ip
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	1a52      	subs	r2, r2, r1
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	4694      	mov	ip, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	4327      	orrs	r7, r4
 8001da8:	1bdc      	subs	r4, r3, r7
 8001daa:	42a3      	cmp	r3, r4
 8001dac:	419b      	sbcs	r3, r3
 8001dae:	4662      	mov	r2, ip
 8001db0:	425b      	negs	r3, r3
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4699      	mov	r9, r3
 8001db6:	464b      	mov	r3, r9
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	d400      	bmi.n	8001dbe <__aeabi_dsub+0xaa>
 8001dbc:	e118      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	0258      	lsls	r0, r3, #9
 8001dc2:	0a43      	lsrs	r3, r0, #9
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <__aeabi_dsub+0xba>
 8001dcc:	e137      	b.n	800203e <__aeabi_dsub+0x32a>
 8001dce:	4648      	mov	r0, r9
 8001dd0:	f000 fc24 	bl	800261c <__clzsi2>
 8001dd4:	0001      	movs	r1, r0
 8001dd6:	3908      	subs	r1, #8
 8001dd8:	2320      	movs	r3, #32
 8001dda:	0022      	movs	r2, r4
 8001ddc:	4648      	mov	r0, r9
 8001dde:	1a5b      	subs	r3, r3, r1
 8001de0:	40da      	lsrs	r2, r3
 8001de2:	4088      	lsls	r0, r1
 8001de4:	408c      	lsls	r4, r1
 8001de6:	4643      	mov	r3, r8
 8001de8:	4310      	orrs	r0, r2
 8001dea:	4588      	cmp	r8, r1
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0xdc>
 8001dee:	e136      	b.n	800205e <__aeabi_dsub+0x34a>
 8001df0:	1ac9      	subs	r1, r1, r3
 8001df2:	1c4b      	adds	r3, r1, #1
 8001df4:	2b1f      	cmp	r3, #31
 8001df6:	dd00      	ble.n	8001dfa <__aeabi_dsub+0xe6>
 8001df8:	e0ea      	b.n	8001fd0 <__aeabi_dsub+0x2bc>
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	0026      	movs	r6, r4
 8001dfe:	1ad2      	subs	r2, r2, r3
 8001e00:	0001      	movs	r1, r0
 8001e02:	4094      	lsls	r4, r2
 8001e04:	40de      	lsrs	r6, r3
 8001e06:	40d8      	lsrs	r0, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4091      	lsls	r1, r2
 8001e0c:	1e62      	subs	r2, r4, #1
 8001e0e:	4194      	sbcs	r4, r2
 8001e10:	4681      	mov	r9, r0
 8001e12:	4698      	mov	r8, r3
 8001e14:	4331      	orrs	r1, r6
 8001e16:	430c      	orrs	r4, r1
 8001e18:	0763      	lsls	r3, r4, #29
 8001e1a:	d009      	beq.n	8001e30 <__aeabi_dsub+0x11c>
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	4023      	ands	r3, r4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d005      	beq.n	8001e30 <__aeabi_dsub+0x11c>
 8001e24:	1d23      	adds	r3, r4, #4
 8001e26:	42a3      	cmp	r3, r4
 8001e28:	41a4      	sbcs	r4, r4
 8001e2a:	4264      	negs	r4, r4
 8001e2c:	44a1      	add	r9, r4
 8001e2e:	001c      	movs	r4, r3
 8001e30:	464b      	mov	r3, r9
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	d400      	bmi.n	8001e38 <__aeabi_dsub+0x124>
 8001e36:	e0de      	b.n	8001ff6 <__aeabi_dsub+0x2e2>
 8001e38:	4641      	mov	r1, r8
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <__aeabi_dsub+0x358>)
 8001e3c:	3101      	adds	r1, #1
 8001e3e:	4299      	cmp	r1, r3
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x130>
 8001e42:	e0e7      	b.n	8002014 <__aeabi_dsub+0x300>
 8001e44:	464b      	mov	r3, r9
 8001e46:	488a      	ldr	r0, [pc, #552]	; (8002070 <__aeabi_dsub+0x35c>)
 8001e48:	08e4      	lsrs	r4, r4, #3
 8001e4a:	4003      	ands	r3, r0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	0549      	lsls	r1, r1, #21
 8001e50:	075b      	lsls	r3, r3, #29
 8001e52:	0240      	lsls	r0, r0, #9
 8001e54:	4323      	orrs	r3, r4
 8001e56:	0d4a      	lsrs	r2, r1, #21
 8001e58:	0b04      	lsrs	r4, r0, #12
 8001e5a:	0512      	lsls	r2, r2, #20
 8001e5c:	07ed      	lsls	r5, r5, #31
 8001e5e:	4322      	orrs	r2, r4
 8001e60:	432a      	orrs	r2, r5
 8001e62:	0018      	movs	r0, r3
 8001e64:	0011      	movs	r1, r2
 8001e66:	bcf0      	pop	{r4, r5, r6, r7}
 8001e68:	46bb      	mov	fp, r7
 8001e6a:	46b2      	mov	sl, r6
 8001e6c:	46a9      	mov	r9, r5
 8001e6e:	46a0      	mov	r8, r4
 8001e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e72:	4642      	mov	r2, r8
 8001e74:	1a12      	subs	r2, r2, r0
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	dd52      	ble.n	8001f20 <__aeabi_dsub+0x20c>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dsub+0x16c>
 8001e7e:	e09c      	b.n	8001fba <__aeabi_dsub+0x2a6>
 8001e80:	45a0      	cmp	r8, r4
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dsub+0x172>
 8001e84:	e0ca      	b.n	800201c <__aeabi_dsub+0x308>
 8001e86:	2080      	movs	r0, #128	; 0x80
 8001e88:	0400      	lsls	r0, r0, #16
 8001e8a:	4301      	orrs	r1, r0
 8001e8c:	2a38      	cmp	r2, #56	; 0x38
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_dsub+0x17e>
 8001e90:	e149      	b.n	8002126 <__aeabi_dsub+0x412>
 8001e92:	2a1f      	cmp	r2, #31
 8001e94:	dc00      	bgt.n	8001e98 <__aeabi_dsub+0x184>
 8001e96:	e197      	b.n	80021c8 <__aeabi_dsub+0x4b4>
 8001e98:	0010      	movs	r0, r2
 8001e9a:	000e      	movs	r6, r1
 8001e9c:	3820      	subs	r0, #32
 8001e9e:	40c6      	lsrs	r6, r0
 8001ea0:	2a20      	cmp	r2, #32
 8001ea2:	d004      	beq.n	8001eae <__aeabi_dsub+0x19a>
 8001ea4:	2040      	movs	r0, #64	; 0x40
 8001ea6:	1a82      	subs	r2, r0, r2
 8001ea8:	4091      	lsls	r1, r2
 8001eaa:	430f      	orrs	r7, r1
 8001eac:	46b9      	mov	r9, r7
 8001eae:	464c      	mov	r4, r9
 8001eb0:	1e62      	subs	r2, r4, #1
 8001eb2:	4194      	sbcs	r4, r2
 8001eb4:	4334      	orrs	r4, r6
 8001eb6:	e13a      	b.n	800212e <__aeabi_dsub+0x41a>
 8001eb8:	000a      	movs	r2, r1
 8001eba:	433a      	orrs	r2, r7
 8001ebc:	d028      	beq.n	8001f10 <__aeabi_dsub+0x1fc>
 8001ebe:	46b3      	mov	fp, r6
 8001ec0:	42b5      	cmp	r5, r6
 8001ec2:	d02b      	beq.n	8001f1c <__aeabi_dsub+0x208>
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <__aeabi_dsub+0x360>)
 8001ec6:	4442      	add	r2, r8
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d05d      	beq.n	8001f88 <__aeabi_dsub+0x274>
 8001ecc:	4642      	mov	r2, r8
 8001ece:	4644      	mov	r4, r8
 8001ed0:	1a82      	subs	r2, r0, r2
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d000      	beq.n	8001ed8 <__aeabi_dsub+0x1c4>
 8001ed6:	e0f5      	b.n	80020c4 <__aeabi_dsub+0x3b0>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	431d      	orrs	r5, r3
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x1cc>
 8001ede:	e19c      	b.n	800221a <__aeabi_dsub+0x506>
 8001ee0:	1e55      	subs	r5, r2, #1
 8001ee2:	2a01      	cmp	r2, #1
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x1d4>
 8001ee6:	e1fb      	b.n	80022e0 <__aeabi_dsub+0x5cc>
 8001ee8:	4c60      	ldr	r4, [pc, #384]	; (800206c <__aeabi_dsub+0x358>)
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x1dc>
 8001eee:	e1bd      	b.n	800226c <__aeabi_dsub+0x558>
 8001ef0:	002a      	movs	r2, r5
 8001ef2:	e0f0      	b.n	80020d6 <__aeabi_dsub+0x3c2>
 8001ef4:	0008      	movs	r0, r1
 8001ef6:	4338      	orrs	r0, r7
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x1e8>
 8001efa:	e0c3      	b.n	8002084 <__aeabi_dsub+0x370>
 8001efc:	1e50      	subs	r0, r2, #1
 8001efe:	2a01      	cmp	r2, #1
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x1f0>
 8001f02:	e1a8      	b.n	8002256 <__aeabi_dsub+0x542>
 8001f04:	4c59      	ldr	r4, [pc, #356]	; (800206c <__aeabi_dsub+0x358>)
 8001f06:	42a2      	cmp	r2, r4
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x1f8>
 8001f0a:	e087      	b.n	800201c <__aeabi_dsub+0x308>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	e736      	b.n	8001d7e <__aeabi_dsub+0x6a>
 8001f10:	2201      	movs	r2, #1
 8001f12:	4056      	eors	r6, r2
 8001f14:	46b3      	mov	fp, r6
 8001f16:	42b5      	cmp	r5, r6
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x208>
 8001f1a:	e721      	b.n	8001d60 <__aeabi_dsub+0x4c>
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <__aeabi_dsub+0x360>)
 8001f1e:	4442      	add	r2, r8
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x212>
 8001f24:	e0b5      	b.n	8002092 <__aeabi_dsub+0x37e>
 8001f26:	4642      	mov	r2, r8
 8001f28:	4644      	mov	r4, r8
 8001f2a:	1a82      	subs	r2, r0, r2
 8001f2c:	2c00      	cmp	r4, #0
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x21e>
 8001f30:	e138      	b.n	80021a4 <__aeabi_dsub+0x490>
 8001f32:	4e4e      	ldr	r6, [pc, #312]	; (800206c <__aeabi_dsub+0x358>)
 8001f34:	42b0      	cmp	r0, r6
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x226>
 8001f38:	e1de      	b.n	80022f8 <__aeabi_dsub+0x5e4>
 8001f3a:	2680      	movs	r6, #128	; 0x80
 8001f3c:	4664      	mov	r4, ip
 8001f3e:	0436      	lsls	r6, r6, #16
 8001f40:	4334      	orrs	r4, r6
 8001f42:	46a4      	mov	ip, r4
 8001f44:	2a38      	cmp	r2, #56	; 0x38
 8001f46:	dd00      	ble.n	8001f4a <__aeabi_dsub+0x236>
 8001f48:	e196      	b.n	8002278 <__aeabi_dsub+0x564>
 8001f4a:	2a1f      	cmp	r2, #31
 8001f4c:	dd00      	ble.n	8001f50 <__aeabi_dsub+0x23c>
 8001f4e:	e224      	b.n	800239a <__aeabi_dsub+0x686>
 8001f50:	2620      	movs	r6, #32
 8001f52:	1ab4      	subs	r4, r6, r2
 8001f54:	46a2      	mov	sl, r4
 8001f56:	4664      	mov	r4, ip
 8001f58:	4656      	mov	r6, sl
 8001f5a:	40b4      	lsls	r4, r6
 8001f5c:	46a1      	mov	r9, r4
 8001f5e:	001c      	movs	r4, r3
 8001f60:	464e      	mov	r6, r9
 8001f62:	40d4      	lsrs	r4, r2
 8001f64:	4326      	orrs	r6, r4
 8001f66:	0034      	movs	r4, r6
 8001f68:	4656      	mov	r6, sl
 8001f6a:	40b3      	lsls	r3, r6
 8001f6c:	1e5e      	subs	r6, r3, #1
 8001f6e:	41b3      	sbcs	r3, r6
 8001f70:	431c      	orrs	r4, r3
 8001f72:	4663      	mov	r3, ip
 8001f74:	40d3      	lsrs	r3, r2
 8001f76:	18c9      	adds	r1, r1, r3
 8001f78:	19e4      	adds	r4, r4, r7
 8001f7a:	42bc      	cmp	r4, r7
 8001f7c:	41bf      	sbcs	r7, r7
 8001f7e:	427f      	negs	r7, r7
 8001f80:	46b9      	mov	r9, r7
 8001f82:	4680      	mov	r8, r0
 8001f84:	4489      	add	r9, r1
 8001f86:	e0d8      	b.n	800213a <__aeabi_dsub+0x426>
 8001f88:	4640      	mov	r0, r8
 8001f8a:	4c3b      	ldr	r4, [pc, #236]	; (8002078 <__aeabi_dsub+0x364>)
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	4220      	tst	r0, r4
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x280>
 8001f92:	e0b4      	b.n	80020fe <__aeabi_dsub+0x3ea>
 8001f94:	4640      	mov	r0, r8
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d000      	beq.n	8001f9c <__aeabi_dsub+0x288>
 8001f9a:	e144      	b.n	8002226 <__aeabi_dsub+0x512>
 8001f9c:	4660      	mov	r0, ip
 8001f9e:	4318      	orrs	r0, r3
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x290>
 8001fa2:	e190      	b.n	80022c6 <__aeabi_dsub+0x5b2>
 8001fa4:	0008      	movs	r0, r1
 8001fa6:	4338      	orrs	r0, r7
 8001fa8:	d000      	beq.n	8001fac <__aeabi_dsub+0x298>
 8001faa:	e1aa      	b.n	8002302 <__aeabi_dsub+0x5ee>
 8001fac:	4661      	mov	r1, ip
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	0749      	lsls	r1, r1, #29
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	4661      	mov	r1, ip
 8001fb6:	08cc      	lsrs	r4, r1, #3
 8001fb8:	e027      	b.n	800200a <__aeabi_dsub+0x2f6>
 8001fba:	0008      	movs	r0, r1
 8001fbc:	4338      	orrs	r0, r7
 8001fbe:	d061      	beq.n	8002084 <__aeabi_dsub+0x370>
 8001fc0:	1e50      	subs	r0, r2, #1
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x2b4>
 8001fc6:	e139      	b.n	800223c <__aeabi_dsub+0x528>
 8001fc8:	42a2      	cmp	r2, r4
 8001fca:	d027      	beq.n	800201c <__aeabi_dsub+0x308>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	e75d      	b.n	8001e8c <__aeabi_dsub+0x178>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	391f      	subs	r1, #31
 8001fd4:	40ca      	lsrs	r2, r1
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d003      	beq.n	8001fe4 <__aeabi_dsub+0x2d0>
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4098      	lsls	r0, r3
 8001fe2:	4304      	orrs	r4, r0
 8001fe4:	1e63      	subs	r3, r4, #1
 8001fe6:	419c      	sbcs	r4, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4699      	mov	r9, r3
 8001fec:	4698      	mov	r8, r3
 8001fee:	430c      	orrs	r4, r1
 8001ff0:	0763      	lsls	r3, r4, #29
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x2e2>
 8001ff4:	e712      	b.n	8001e1c <__aeabi_dsub+0x108>
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	464a      	mov	r2, r9
 8001ffa:	08e4      	lsrs	r4, r4, #3
 8001ffc:	075b      	lsls	r3, r3, #29
 8001ffe:	4323      	orrs	r3, r4
 8002000:	08d4      	lsrs	r4, r2, #3
 8002002:	4642      	mov	r2, r8
 8002004:	4919      	ldr	r1, [pc, #100]	; (800206c <__aeabi_dsub+0x358>)
 8002006:	428a      	cmp	r2, r1
 8002008:	d00e      	beq.n	8002028 <__aeabi_dsub+0x314>
 800200a:	0324      	lsls	r4, r4, #12
 800200c:	0552      	lsls	r2, r2, #21
 800200e:	0b24      	lsrs	r4, r4, #12
 8002010:	0d52      	lsrs	r2, r2, #21
 8002012:	e722      	b.n	8001e5a <__aeabi_dsub+0x146>
 8002014:	000a      	movs	r2, r1
 8002016:	2400      	movs	r4, #0
 8002018:	2300      	movs	r3, #0
 800201a:	e71e      	b.n	8001e5a <__aeabi_dsub+0x146>
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	4662      	mov	r2, ip
 8002020:	0752      	lsls	r2, r2, #29
 8002022:	4313      	orrs	r3, r2
 8002024:	4662      	mov	r2, ip
 8002026:	08d4      	lsrs	r4, r2, #3
 8002028:	001a      	movs	r2, r3
 800202a:	4322      	orrs	r2, r4
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x31c>
 800202e:	e1fc      	b.n	800242a <__aeabi_dsub+0x716>
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	0312      	lsls	r2, r2, #12
 8002034:	4314      	orrs	r4, r2
 8002036:	0324      	lsls	r4, r4, #12
 8002038:	4a0c      	ldr	r2, [pc, #48]	; (800206c <__aeabi_dsub+0x358>)
 800203a:	0b24      	lsrs	r4, r4, #12
 800203c:	e70d      	b.n	8001e5a <__aeabi_dsub+0x146>
 800203e:	0020      	movs	r0, r4
 8002040:	f000 faec 	bl	800261c <__clzsi2>
 8002044:	0001      	movs	r1, r0
 8002046:	3118      	adds	r1, #24
 8002048:	291f      	cmp	r1, #31
 800204a:	dc00      	bgt.n	800204e <__aeabi_dsub+0x33a>
 800204c:	e6c4      	b.n	8001dd8 <__aeabi_dsub+0xc4>
 800204e:	3808      	subs	r0, #8
 8002050:	4084      	lsls	r4, r0
 8002052:	4643      	mov	r3, r8
 8002054:	0020      	movs	r0, r4
 8002056:	2400      	movs	r4, #0
 8002058:	4588      	cmp	r8, r1
 800205a:	dc00      	bgt.n	800205e <__aeabi_dsub+0x34a>
 800205c:	e6c8      	b.n	8001df0 <__aeabi_dsub+0xdc>
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__aeabi_dsub+0x35c>)
 8002060:	1a5b      	subs	r3, r3, r1
 8002062:	4010      	ands	r0, r2
 8002064:	4698      	mov	r8, r3
 8002066:	4681      	mov	r9, r0
 8002068:	e6d6      	b.n	8001e18 <__aeabi_dsub+0x104>
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	000007ff 	.word	0x000007ff
 8002070:	ff7fffff 	.word	0xff7fffff
 8002074:	fffff801 	.word	0xfffff801
 8002078:	000007fe 	.word	0x000007fe
 800207c:	430f      	orrs	r7, r1
 800207e:	1e7a      	subs	r2, r7, #1
 8002080:	4197      	sbcs	r7, r2
 8002082:	e691      	b.n	8001da8 <__aeabi_dsub+0x94>
 8002084:	4661      	mov	r1, ip
 8002086:	08db      	lsrs	r3, r3, #3
 8002088:	0749      	lsls	r1, r1, #29
 800208a:	430b      	orrs	r3, r1
 800208c:	4661      	mov	r1, ip
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e7b8      	b.n	8002004 <__aeabi_dsub+0x2f0>
 8002092:	4640      	mov	r0, r8
 8002094:	4cd3      	ldr	r4, [pc, #844]	; (80023e4 <__aeabi_dsub+0x6d0>)
 8002096:	3001      	adds	r0, #1
 8002098:	4220      	tst	r0, r4
 800209a:	d000      	beq.n	800209e <__aeabi_dsub+0x38a>
 800209c:	e0a2      	b.n	80021e4 <__aeabi_dsub+0x4d0>
 800209e:	4640      	mov	r0, r8
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x392>
 80020a4:	e101      	b.n	80022aa <__aeabi_dsub+0x596>
 80020a6:	4660      	mov	r0, ip
 80020a8:	4318      	orrs	r0, r3
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x39a>
 80020ac:	e15e      	b.n	800236c <__aeabi_dsub+0x658>
 80020ae:	0008      	movs	r0, r1
 80020b0:	4338      	orrs	r0, r7
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x3a2>
 80020b4:	e15f      	b.n	8002376 <__aeabi_dsub+0x662>
 80020b6:	4661      	mov	r1, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0749      	lsls	r1, r1, #29
 80020bc:	430b      	orrs	r3, r1
 80020be:	4661      	mov	r1, ip
 80020c0:	08cc      	lsrs	r4, r1, #3
 80020c2:	e7a2      	b.n	800200a <__aeabi_dsub+0x2f6>
 80020c4:	4dc8      	ldr	r5, [pc, #800]	; (80023e8 <__aeabi_dsub+0x6d4>)
 80020c6:	42a8      	cmp	r0, r5
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x3b8>
 80020ca:	e0cf      	b.n	800226c <__aeabi_dsub+0x558>
 80020cc:	2580      	movs	r5, #128	; 0x80
 80020ce:	4664      	mov	r4, ip
 80020d0:	042d      	lsls	r5, r5, #16
 80020d2:	432c      	orrs	r4, r5
 80020d4:	46a4      	mov	ip, r4
 80020d6:	2a38      	cmp	r2, #56	; 0x38
 80020d8:	dc56      	bgt.n	8002188 <__aeabi_dsub+0x474>
 80020da:	2a1f      	cmp	r2, #31
 80020dc:	dd00      	ble.n	80020e0 <__aeabi_dsub+0x3cc>
 80020de:	e0d1      	b.n	8002284 <__aeabi_dsub+0x570>
 80020e0:	2520      	movs	r5, #32
 80020e2:	001e      	movs	r6, r3
 80020e4:	1aad      	subs	r5, r5, r2
 80020e6:	4664      	mov	r4, ip
 80020e8:	40ab      	lsls	r3, r5
 80020ea:	40ac      	lsls	r4, r5
 80020ec:	40d6      	lsrs	r6, r2
 80020ee:	1e5d      	subs	r5, r3, #1
 80020f0:	41ab      	sbcs	r3, r5
 80020f2:	4334      	orrs	r4, r6
 80020f4:	4323      	orrs	r3, r4
 80020f6:	4664      	mov	r4, ip
 80020f8:	40d4      	lsrs	r4, r2
 80020fa:	1b09      	subs	r1, r1, r4
 80020fc:	e049      	b.n	8002192 <__aeabi_dsub+0x47e>
 80020fe:	4660      	mov	r0, ip
 8002100:	1bdc      	subs	r4, r3, r7
 8002102:	1a46      	subs	r6, r0, r1
 8002104:	42a3      	cmp	r3, r4
 8002106:	4180      	sbcs	r0, r0
 8002108:	4240      	negs	r0, r0
 800210a:	4681      	mov	r9, r0
 800210c:	0030      	movs	r0, r6
 800210e:	464e      	mov	r6, r9
 8002110:	1b80      	subs	r0, r0, r6
 8002112:	4681      	mov	r9, r0
 8002114:	0200      	lsls	r0, r0, #8
 8002116:	d476      	bmi.n	8002206 <__aeabi_dsub+0x4f2>
 8002118:	464b      	mov	r3, r9
 800211a:	4323      	orrs	r3, r4
 800211c:	d000      	beq.n	8002120 <__aeabi_dsub+0x40c>
 800211e:	e652      	b.n	8001dc6 <__aeabi_dsub+0xb2>
 8002120:	2400      	movs	r4, #0
 8002122:	2500      	movs	r5, #0
 8002124:	e771      	b.n	800200a <__aeabi_dsub+0x2f6>
 8002126:	4339      	orrs	r1, r7
 8002128:	000c      	movs	r4, r1
 800212a:	1e62      	subs	r2, r4, #1
 800212c:	4194      	sbcs	r4, r2
 800212e:	18e4      	adds	r4, r4, r3
 8002130:	429c      	cmp	r4, r3
 8002132:	419b      	sbcs	r3, r3
 8002134:	425b      	negs	r3, r3
 8002136:	4463      	add	r3, ip
 8002138:	4699      	mov	r9, r3
 800213a:	464b      	mov	r3, r9
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	d400      	bmi.n	8002142 <__aeabi_dsub+0x42e>
 8002140:	e756      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8002142:	2301      	movs	r3, #1
 8002144:	469c      	mov	ip, r3
 8002146:	4ba8      	ldr	r3, [pc, #672]	; (80023e8 <__aeabi_dsub+0x6d4>)
 8002148:	44e0      	add	r8, ip
 800214a:	4598      	cmp	r8, r3
 800214c:	d038      	beq.n	80021c0 <__aeabi_dsub+0x4ac>
 800214e:	464b      	mov	r3, r9
 8002150:	48a6      	ldr	r0, [pc, #664]	; (80023ec <__aeabi_dsub+0x6d8>)
 8002152:	2201      	movs	r2, #1
 8002154:	4003      	ands	r3, r0
 8002156:	0018      	movs	r0, r3
 8002158:	0863      	lsrs	r3, r4, #1
 800215a:	4014      	ands	r4, r2
 800215c:	431c      	orrs	r4, r3
 800215e:	07c3      	lsls	r3, r0, #31
 8002160:	431c      	orrs	r4, r3
 8002162:	0843      	lsrs	r3, r0, #1
 8002164:	4699      	mov	r9, r3
 8002166:	e657      	b.n	8001e18 <__aeabi_dsub+0x104>
 8002168:	0010      	movs	r0, r2
 800216a:	000e      	movs	r6, r1
 800216c:	3820      	subs	r0, #32
 800216e:	40c6      	lsrs	r6, r0
 8002170:	2a20      	cmp	r2, #32
 8002172:	d004      	beq.n	800217e <__aeabi_dsub+0x46a>
 8002174:	2040      	movs	r0, #64	; 0x40
 8002176:	1a82      	subs	r2, r0, r2
 8002178:	4091      	lsls	r1, r2
 800217a:	430f      	orrs	r7, r1
 800217c:	46b9      	mov	r9, r7
 800217e:	464f      	mov	r7, r9
 8002180:	1e7a      	subs	r2, r7, #1
 8002182:	4197      	sbcs	r7, r2
 8002184:	4337      	orrs	r7, r6
 8002186:	e60f      	b.n	8001da8 <__aeabi_dsub+0x94>
 8002188:	4662      	mov	r2, ip
 800218a:	431a      	orrs	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	4193      	sbcs	r3, r2
 8002192:	1afc      	subs	r4, r7, r3
 8002194:	42a7      	cmp	r7, r4
 8002196:	41bf      	sbcs	r7, r7
 8002198:	427f      	negs	r7, r7
 800219a:	1bcb      	subs	r3, r1, r7
 800219c:	4699      	mov	r9, r3
 800219e:	465d      	mov	r5, fp
 80021a0:	4680      	mov	r8, r0
 80021a2:	e608      	b.n	8001db6 <__aeabi_dsub+0xa2>
 80021a4:	4666      	mov	r6, ip
 80021a6:	431e      	orrs	r6, r3
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x498>
 80021aa:	e0be      	b.n	800232a <__aeabi_dsub+0x616>
 80021ac:	1e56      	subs	r6, r2, #1
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x4a0>
 80021b2:	e109      	b.n	80023c8 <__aeabi_dsub+0x6b4>
 80021b4:	4c8c      	ldr	r4, [pc, #560]	; (80023e8 <__aeabi_dsub+0x6d4>)
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x4a8>
 80021ba:	e119      	b.n	80023f0 <__aeabi_dsub+0x6dc>
 80021bc:	0032      	movs	r2, r6
 80021be:	e6c1      	b.n	8001f44 <__aeabi_dsub+0x230>
 80021c0:	4642      	mov	r2, r8
 80021c2:	2400      	movs	r4, #0
 80021c4:	2300      	movs	r3, #0
 80021c6:	e648      	b.n	8001e5a <__aeabi_dsub+0x146>
 80021c8:	2020      	movs	r0, #32
 80021ca:	000c      	movs	r4, r1
 80021cc:	1a80      	subs	r0, r0, r2
 80021ce:	003e      	movs	r6, r7
 80021d0:	4087      	lsls	r7, r0
 80021d2:	4084      	lsls	r4, r0
 80021d4:	40d6      	lsrs	r6, r2
 80021d6:	1e78      	subs	r0, r7, #1
 80021d8:	4187      	sbcs	r7, r0
 80021da:	40d1      	lsrs	r1, r2
 80021dc:	4334      	orrs	r4, r6
 80021de:	433c      	orrs	r4, r7
 80021e0:	448c      	add	ip, r1
 80021e2:	e7a4      	b.n	800212e <__aeabi_dsub+0x41a>
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <__aeabi_dsub+0x6d4>)
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d100      	bne.n	80021ec <__aeabi_dsub+0x4d8>
 80021ea:	e0e9      	b.n	80023c0 <__aeabi_dsub+0x6ac>
 80021ec:	19df      	adds	r7, r3, r7
 80021ee:	429f      	cmp	r7, r3
 80021f0:	419b      	sbcs	r3, r3
 80021f2:	4461      	add	r1, ip
 80021f4:	425b      	negs	r3, r3
 80021f6:	18c9      	adds	r1, r1, r3
 80021f8:	07cc      	lsls	r4, r1, #31
 80021fa:	087f      	lsrs	r7, r7, #1
 80021fc:	084b      	lsrs	r3, r1, #1
 80021fe:	4699      	mov	r9, r3
 8002200:	4680      	mov	r8, r0
 8002202:	433c      	orrs	r4, r7
 8002204:	e6f4      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8002206:	1afc      	subs	r4, r7, r3
 8002208:	42a7      	cmp	r7, r4
 800220a:	41bf      	sbcs	r7, r7
 800220c:	4663      	mov	r3, ip
 800220e:	427f      	negs	r7, r7
 8002210:	1ac9      	subs	r1, r1, r3
 8002212:	1bcb      	subs	r3, r1, r7
 8002214:	4699      	mov	r9, r3
 8002216:	465d      	mov	r5, fp
 8002218:	e5d5      	b.n	8001dc6 <__aeabi_dsub+0xb2>
 800221a:	08ff      	lsrs	r7, r7, #3
 800221c:	074b      	lsls	r3, r1, #29
 800221e:	465d      	mov	r5, fp
 8002220:	433b      	orrs	r3, r7
 8002222:	08cc      	lsrs	r4, r1, #3
 8002224:	e6ee      	b.n	8002004 <__aeabi_dsub+0x2f0>
 8002226:	4662      	mov	r2, ip
 8002228:	431a      	orrs	r2, r3
 800222a:	d000      	beq.n	800222e <__aeabi_dsub+0x51a>
 800222c:	e082      	b.n	8002334 <__aeabi_dsub+0x620>
 800222e:	000b      	movs	r3, r1
 8002230:	433b      	orrs	r3, r7
 8002232:	d11b      	bne.n	800226c <__aeabi_dsub+0x558>
 8002234:	2480      	movs	r4, #128	; 0x80
 8002236:	2500      	movs	r5, #0
 8002238:	0324      	lsls	r4, r4, #12
 800223a:	e6f9      	b.n	8002030 <__aeabi_dsub+0x31c>
 800223c:	19dc      	adds	r4, r3, r7
 800223e:	429c      	cmp	r4, r3
 8002240:	419b      	sbcs	r3, r3
 8002242:	4461      	add	r1, ip
 8002244:	4689      	mov	r9, r1
 8002246:	425b      	negs	r3, r3
 8002248:	4499      	add	r9, r3
 800224a:	464b      	mov	r3, r9
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	d444      	bmi.n	80022da <__aeabi_dsub+0x5c6>
 8002250:	2301      	movs	r3, #1
 8002252:	4698      	mov	r8, r3
 8002254:	e6cc      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8002256:	1bdc      	subs	r4, r3, r7
 8002258:	4662      	mov	r2, ip
 800225a:	42a3      	cmp	r3, r4
 800225c:	419b      	sbcs	r3, r3
 800225e:	1a51      	subs	r1, r2, r1
 8002260:	425b      	negs	r3, r3
 8002262:	1acb      	subs	r3, r1, r3
 8002264:	4699      	mov	r9, r3
 8002266:	2301      	movs	r3, #1
 8002268:	4698      	mov	r8, r3
 800226a:	e5a4      	b.n	8001db6 <__aeabi_dsub+0xa2>
 800226c:	08ff      	lsrs	r7, r7, #3
 800226e:	074b      	lsls	r3, r1, #29
 8002270:	465d      	mov	r5, fp
 8002272:	433b      	orrs	r3, r7
 8002274:	08cc      	lsrs	r4, r1, #3
 8002276:	e6d7      	b.n	8002028 <__aeabi_dsub+0x314>
 8002278:	4662      	mov	r2, ip
 800227a:	431a      	orrs	r2, r3
 800227c:	0014      	movs	r4, r2
 800227e:	1e63      	subs	r3, r4, #1
 8002280:	419c      	sbcs	r4, r3
 8002282:	e679      	b.n	8001f78 <__aeabi_dsub+0x264>
 8002284:	0015      	movs	r5, r2
 8002286:	4664      	mov	r4, ip
 8002288:	3d20      	subs	r5, #32
 800228a:	40ec      	lsrs	r4, r5
 800228c:	46a0      	mov	r8, r4
 800228e:	2a20      	cmp	r2, #32
 8002290:	d005      	beq.n	800229e <__aeabi_dsub+0x58a>
 8002292:	2540      	movs	r5, #64	; 0x40
 8002294:	4664      	mov	r4, ip
 8002296:	1aaa      	subs	r2, r5, r2
 8002298:	4094      	lsls	r4, r2
 800229a:	4323      	orrs	r3, r4
 800229c:	469a      	mov	sl, r3
 800229e:	4654      	mov	r4, sl
 80022a0:	1e63      	subs	r3, r4, #1
 80022a2:	419c      	sbcs	r4, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	4323      	orrs	r3, r4
 80022a8:	e773      	b.n	8002192 <__aeabi_dsub+0x47e>
 80022aa:	4662      	mov	r2, ip
 80022ac:	431a      	orrs	r2, r3
 80022ae:	d023      	beq.n	80022f8 <__aeabi_dsub+0x5e4>
 80022b0:	000a      	movs	r2, r1
 80022b2:	433a      	orrs	r2, r7
 80022b4:	d000      	beq.n	80022b8 <__aeabi_dsub+0x5a4>
 80022b6:	e0a0      	b.n	80023fa <__aeabi_dsub+0x6e6>
 80022b8:	4662      	mov	r2, ip
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	0752      	lsls	r2, r2, #29
 80022be:	4313      	orrs	r3, r2
 80022c0:	4662      	mov	r2, ip
 80022c2:	08d4      	lsrs	r4, r2, #3
 80022c4:	e6b0      	b.n	8002028 <__aeabi_dsub+0x314>
 80022c6:	000b      	movs	r3, r1
 80022c8:	433b      	orrs	r3, r7
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x5ba>
 80022cc:	e728      	b.n	8002120 <__aeabi_dsub+0x40c>
 80022ce:	08ff      	lsrs	r7, r7, #3
 80022d0:	074b      	lsls	r3, r1, #29
 80022d2:	465d      	mov	r5, fp
 80022d4:	433b      	orrs	r3, r7
 80022d6:	08cc      	lsrs	r4, r1, #3
 80022d8:	e697      	b.n	800200a <__aeabi_dsub+0x2f6>
 80022da:	2302      	movs	r3, #2
 80022dc:	4698      	mov	r8, r3
 80022de:	e736      	b.n	800214e <__aeabi_dsub+0x43a>
 80022e0:	1afc      	subs	r4, r7, r3
 80022e2:	42a7      	cmp	r7, r4
 80022e4:	41bf      	sbcs	r7, r7
 80022e6:	4663      	mov	r3, ip
 80022e8:	427f      	negs	r7, r7
 80022ea:	1ac9      	subs	r1, r1, r3
 80022ec:	1bcb      	subs	r3, r1, r7
 80022ee:	4699      	mov	r9, r3
 80022f0:	2301      	movs	r3, #1
 80022f2:	465d      	mov	r5, fp
 80022f4:	4698      	mov	r8, r3
 80022f6:	e55e      	b.n	8001db6 <__aeabi_dsub+0xa2>
 80022f8:	074b      	lsls	r3, r1, #29
 80022fa:	08ff      	lsrs	r7, r7, #3
 80022fc:	433b      	orrs	r3, r7
 80022fe:	08cc      	lsrs	r4, r1, #3
 8002300:	e692      	b.n	8002028 <__aeabi_dsub+0x314>
 8002302:	1bdc      	subs	r4, r3, r7
 8002304:	4660      	mov	r0, ip
 8002306:	42a3      	cmp	r3, r4
 8002308:	41b6      	sbcs	r6, r6
 800230a:	1a40      	subs	r0, r0, r1
 800230c:	4276      	negs	r6, r6
 800230e:	1b80      	subs	r0, r0, r6
 8002310:	4681      	mov	r9, r0
 8002312:	0200      	lsls	r0, r0, #8
 8002314:	d560      	bpl.n	80023d8 <__aeabi_dsub+0x6c4>
 8002316:	1afc      	subs	r4, r7, r3
 8002318:	42a7      	cmp	r7, r4
 800231a:	41bf      	sbcs	r7, r7
 800231c:	4663      	mov	r3, ip
 800231e:	427f      	negs	r7, r7
 8002320:	1ac9      	subs	r1, r1, r3
 8002322:	1bcb      	subs	r3, r1, r7
 8002324:	4699      	mov	r9, r3
 8002326:	465d      	mov	r5, fp
 8002328:	e576      	b.n	8001e18 <__aeabi_dsub+0x104>
 800232a:	08ff      	lsrs	r7, r7, #3
 800232c:	074b      	lsls	r3, r1, #29
 800232e:	433b      	orrs	r3, r7
 8002330:	08cc      	lsrs	r4, r1, #3
 8002332:	e667      	b.n	8002004 <__aeabi_dsub+0x2f0>
 8002334:	000a      	movs	r2, r1
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	433a      	orrs	r2, r7
 800233a:	d100      	bne.n	800233e <__aeabi_dsub+0x62a>
 800233c:	e66f      	b.n	800201e <__aeabi_dsub+0x30a>
 800233e:	4662      	mov	r2, ip
 8002340:	0752      	lsls	r2, r2, #29
 8002342:	4313      	orrs	r3, r2
 8002344:	4662      	mov	r2, ip
 8002346:	08d4      	lsrs	r4, r2, #3
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0312      	lsls	r2, r2, #12
 800234c:	4214      	tst	r4, r2
 800234e:	d007      	beq.n	8002360 <__aeabi_dsub+0x64c>
 8002350:	08c8      	lsrs	r0, r1, #3
 8002352:	4210      	tst	r0, r2
 8002354:	d104      	bne.n	8002360 <__aeabi_dsub+0x64c>
 8002356:	465d      	mov	r5, fp
 8002358:	0004      	movs	r4, r0
 800235a:	08fb      	lsrs	r3, r7, #3
 800235c:	0749      	lsls	r1, r1, #29
 800235e:	430b      	orrs	r3, r1
 8002360:	0f5a      	lsrs	r2, r3, #29
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	0752      	lsls	r2, r2, #29
 8002368:	4313      	orrs	r3, r2
 800236a:	e65d      	b.n	8002028 <__aeabi_dsub+0x314>
 800236c:	074b      	lsls	r3, r1, #29
 800236e:	08ff      	lsrs	r7, r7, #3
 8002370:	433b      	orrs	r3, r7
 8002372:	08cc      	lsrs	r4, r1, #3
 8002374:	e649      	b.n	800200a <__aeabi_dsub+0x2f6>
 8002376:	19dc      	adds	r4, r3, r7
 8002378:	429c      	cmp	r4, r3
 800237a:	419b      	sbcs	r3, r3
 800237c:	4461      	add	r1, ip
 800237e:	4689      	mov	r9, r1
 8002380:	425b      	negs	r3, r3
 8002382:	4499      	add	r9, r3
 8002384:	464b      	mov	r3, r9
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	d400      	bmi.n	800238c <__aeabi_dsub+0x678>
 800238a:	e631      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 800238c:	464a      	mov	r2, r9
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <__aeabi_dsub+0x6d8>)
 8002390:	401a      	ands	r2, r3
 8002392:	2301      	movs	r3, #1
 8002394:	4691      	mov	r9, r2
 8002396:	4698      	mov	r8, r3
 8002398:	e62a      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 800239a:	0016      	movs	r6, r2
 800239c:	4664      	mov	r4, ip
 800239e:	3e20      	subs	r6, #32
 80023a0:	40f4      	lsrs	r4, r6
 80023a2:	46a0      	mov	r8, r4
 80023a4:	2a20      	cmp	r2, #32
 80023a6:	d005      	beq.n	80023b4 <__aeabi_dsub+0x6a0>
 80023a8:	2640      	movs	r6, #64	; 0x40
 80023aa:	4664      	mov	r4, ip
 80023ac:	1ab2      	subs	r2, r6, r2
 80023ae:	4094      	lsls	r4, r2
 80023b0:	4323      	orrs	r3, r4
 80023b2:	469a      	mov	sl, r3
 80023b4:	4654      	mov	r4, sl
 80023b6:	1e63      	subs	r3, r4, #1
 80023b8:	419c      	sbcs	r4, r3
 80023ba:	4643      	mov	r3, r8
 80023bc:	431c      	orrs	r4, r3
 80023be:	e5db      	b.n	8001f78 <__aeabi_dsub+0x264>
 80023c0:	0002      	movs	r2, r0
 80023c2:	2400      	movs	r4, #0
 80023c4:	2300      	movs	r3, #0
 80023c6:	e548      	b.n	8001e5a <__aeabi_dsub+0x146>
 80023c8:	19dc      	adds	r4, r3, r7
 80023ca:	42bc      	cmp	r4, r7
 80023cc:	41bf      	sbcs	r7, r7
 80023ce:	4461      	add	r1, ip
 80023d0:	4689      	mov	r9, r1
 80023d2:	427f      	negs	r7, r7
 80023d4:	44b9      	add	r9, r7
 80023d6:	e738      	b.n	800224a <__aeabi_dsub+0x536>
 80023d8:	464b      	mov	r3, r9
 80023da:	4323      	orrs	r3, r4
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x6cc>
 80023de:	e69f      	b.n	8002120 <__aeabi_dsub+0x40c>
 80023e0:	e606      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	000007fe 	.word	0x000007fe
 80023e8:	000007ff 	.word	0x000007ff
 80023ec:	ff7fffff 	.word	0xff7fffff
 80023f0:	08ff      	lsrs	r7, r7, #3
 80023f2:	074b      	lsls	r3, r1, #29
 80023f4:	433b      	orrs	r3, r7
 80023f6:	08cc      	lsrs	r4, r1, #3
 80023f8:	e616      	b.n	8002028 <__aeabi_dsub+0x314>
 80023fa:	4662      	mov	r2, ip
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	0752      	lsls	r2, r2, #29
 8002400:	4313      	orrs	r3, r2
 8002402:	4662      	mov	r2, ip
 8002404:	08d4      	lsrs	r4, r2, #3
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	0312      	lsls	r2, r2, #12
 800240a:	4214      	tst	r4, r2
 800240c:	d007      	beq.n	800241e <__aeabi_dsub+0x70a>
 800240e:	08c8      	lsrs	r0, r1, #3
 8002410:	4210      	tst	r0, r2
 8002412:	d104      	bne.n	800241e <__aeabi_dsub+0x70a>
 8002414:	465d      	mov	r5, fp
 8002416:	0004      	movs	r4, r0
 8002418:	08fb      	lsrs	r3, r7, #3
 800241a:	0749      	lsls	r1, r1, #29
 800241c:	430b      	orrs	r3, r1
 800241e:	0f5a      	lsrs	r2, r3, #29
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	0752      	lsls	r2, r2, #29
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	4313      	orrs	r3, r2
 8002428:	e5fe      	b.n	8002028 <__aeabi_dsub+0x314>
 800242a:	2300      	movs	r3, #0
 800242c:	4a01      	ldr	r2, [pc, #4]	; (8002434 <__aeabi_dsub+0x720>)
 800242e:	001c      	movs	r4, r3
 8002430:	e513      	b.n	8001e5a <__aeabi_dsub+0x146>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff

08002438 <__aeabi_dcmpun>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	0005      	movs	r5, r0
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <__aeabi_dcmpun+0x38>)
 800243e:	031c      	lsls	r4, r3, #12
 8002440:	0016      	movs	r6, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	030a      	lsls	r2, r1, #12
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	0b12      	lsrs	r2, r2, #12
 800244a:	0d49      	lsrs	r1, r1, #21
 800244c:	0b24      	lsrs	r4, r4, #12
 800244e:	0d5b      	lsrs	r3, r3, #21
 8002450:	4281      	cmp	r1, r0
 8002452:	d008      	beq.n	8002466 <__aeabi_dcmpun+0x2e>
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <__aeabi_dcmpun+0x38>)
 8002456:	2000      	movs	r0, #0
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <__aeabi_dcmpun+0x2c>
 800245c:	0020      	movs	r0, r4
 800245e:	4330      	orrs	r0, r6
 8002460:	1e43      	subs	r3, r0, #1
 8002462:	4198      	sbcs	r0, r3
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	2001      	movs	r0, #1
 8002468:	432a      	orrs	r2, r5
 800246a:	d1fb      	bne.n	8002464 <__aeabi_dcmpun+0x2c>
 800246c:	e7f2      	b.n	8002454 <__aeabi_dcmpun+0x1c>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	000007ff 	.word	0x000007ff

08002474 <__aeabi_d2iz>:
 8002474:	000a      	movs	r2, r1
 8002476:	b530      	push	{r4, r5, lr}
 8002478:	4c13      	ldr	r4, [pc, #76]	; (80024c8 <__aeabi_d2iz+0x54>)
 800247a:	0053      	lsls	r3, r2, #1
 800247c:	0309      	lsls	r1, r1, #12
 800247e:	0005      	movs	r5, r0
 8002480:	0b09      	lsrs	r1, r1, #12
 8002482:	2000      	movs	r0, #0
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	0fd2      	lsrs	r2, r2, #31
 8002488:	42a3      	cmp	r3, r4
 800248a:	dd04      	ble.n	8002496 <__aeabi_d2iz+0x22>
 800248c:	480f      	ldr	r0, [pc, #60]	; (80024cc <__aeabi_d2iz+0x58>)
 800248e:	4283      	cmp	r3, r0
 8002490:	dd02      	ble.n	8002498 <__aeabi_d2iz+0x24>
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <__aeabi_d2iz+0x5c>)
 8002494:	18d0      	adds	r0, r2, r3
 8002496:	bd30      	pop	{r4, r5, pc}
 8002498:	2080      	movs	r0, #128	; 0x80
 800249a:	0340      	lsls	r0, r0, #13
 800249c:	4301      	orrs	r1, r0
 800249e:	480d      	ldr	r0, [pc, #52]	; (80024d4 <__aeabi_d2iz+0x60>)
 80024a0:	1ac0      	subs	r0, r0, r3
 80024a2:	281f      	cmp	r0, #31
 80024a4:	dd08      	ble.n	80024b8 <__aeabi_d2iz+0x44>
 80024a6:	480c      	ldr	r0, [pc, #48]	; (80024d8 <__aeabi_d2iz+0x64>)
 80024a8:	1ac3      	subs	r3, r0, r3
 80024aa:	40d9      	lsrs	r1, r3
 80024ac:	000b      	movs	r3, r1
 80024ae:	4258      	negs	r0, r3
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d1f0      	bne.n	8002496 <__aeabi_d2iz+0x22>
 80024b4:	0018      	movs	r0, r3
 80024b6:	e7ee      	b.n	8002496 <__aeabi_d2iz+0x22>
 80024b8:	4c08      	ldr	r4, [pc, #32]	; (80024dc <__aeabi_d2iz+0x68>)
 80024ba:	40c5      	lsrs	r5, r0
 80024bc:	46a4      	mov	ip, r4
 80024be:	4463      	add	r3, ip
 80024c0:	4099      	lsls	r1, r3
 80024c2:	000b      	movs	r3, r1
 80024c4:	432b      	orrs	r3, r5
 80024c6:	e7f2      	b.n	80024ae <__aeabi_d2iz+0x3a>
 80024c8:	000003fe 	.word	0x000003fe
 80024cc:	0000041d 	.word	0x0000041d
 80024d0:	7fffffff 	.word	0x7fffffff
 80024d4:	00000433 	.word	0x00000433
 80024d8:	00000413 	.word	0x00000413
 80024dc:	fffffbed 	.word	0xfffffbed

080024e0 <__aeabi_i2d>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d016      	beq.n	8002514 <__aeabi_i2d+0x34>
 80024e6:	17c3      	asrs	r3, r0, #31
 80024e8:	18c5      	adds	r5, r0, r3
 80024ea:	405d      	eors	r5, r3
 80024ec:	0fc4      	lsrs	r4, r0, #31
 80024ee:	0028      	movs	r0, r5
 80024f0:	f000 f894 	bl	800261c <__clzsi2>
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <__aeabi_i2d+0x5c>)
 80024f6:	1a12      	subs	r2, r2, r0
 80024f8:	280a      	cmp	r0, #10
 80024fa:	dc16      	bgt.n	800252a <__aeabi_i2d+0x4a>
 80024fc:	0003      	movs	r3, r0
 80024fe:	002e      	movs	r6, r5
 8002500:	3315      	adds	r3, #21
 8002502:	409e      	lsls	r6, r3
 8002504:	230b      	movs	r3, #11
 8002506:	1a18      	subs	r0, r3, r0
 8002508:	40c5      	lsrs	r5, r0
 800250a:	0552      	lsls	r2, r2, #21
 800250c:	032d      	lsls	r5, r5, #12
 800250e:	0b2d      	lsrs	r5, r5, #12
 8002510:	0d53      	lsrs	r3, r2, #21
 8002512:	e003      	b.n	800251c <__aeabi_i2d+0x3c>
 8002514:	2400      	movs	r4, #0
 8002516:	2300      	movs	r3, #0
 8002518:	2500      	movs	r5, #0
 800251a:	2600      	movs	r6, #0
 800251c:	051b      	lsls	r3, r3, #20
 800251e:	432b      	orrs	r3, r5
 8002520:	07e4      	lsls	r4, r4, #31
 8002522:	4323      	orrs	r3, r4
 8002524:	0030      	movs	r0, r6
 8002526:	0019      	movs	r1, r3
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	380b      	subs	r0, #11
 800252c:	4085      	lsls	r5, r0
 800252e:	0552      	lsls	r2, r2, #21
 8002530:	032d      	lsls	r5, r5, #12
 8002532:	2600      	movs	r6, #0
 8002534:	0b2d      	lsrs	r5, r5, #12
 8002536:	0d53      	lsrs	r3, r2, #21
 8002538:	e7f0      	b.n	800251c <__aeabi_i2d+0x3c>
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	0000041e 	.word	0x0000041e

08002540 <__aeabi_ui2d>:
 8002540:	b510      	push	{r4, lr}
 8002542:	1e04      	subs	r4, r0, #0
 8002544:	d010      	beq.n	8002568 <__aeabi_ui2d+0x28>
 8002546:	f000 f869 	bl	800261c <__clzsi2>
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <__aeabi_ui2d+0x48>)
 800254c:	1a1b      	subs	r3, r3, r0
 800254e:	280a      	cmp	r0, #10
 8002550:	dc11      	bgt.n	8002576 <__aeabi_ui2d+0x36>
 8002552:	220b      	movs	r2, #11
 8002554:	0021      	movs	r1, r4
 8002556:	1a12      	subs	r2, r2, r0
 8002558:	40d1      	lsrs	r1, r2
 800255a:	3015      	adds	r0, #21
 800255c:	030a      	lsls	r2, r1, #12
 800255e:	055b      	lsls	r3, r3, #21
 8002560:	4084      	lsls	r4, r0
 8002562:	0b12      	lsrs	r2, r2, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e001      	b.n	800256c <__aeabi_ui2d+0x2c>
 8002568:	2300      	movs	r3, #0
 800256a:	2200      	movs	r2, #0
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	4313      	orrs	r3, r2
 8002570:	0020      	movs	r0, r4
 8002572:	0019      	movs	r1, r3
 8002574:	bd10      	pop	{r4, pc}
 8002576:	0022      	movs	r2, r4
 8002578:	380b      	subs	r0, #11
 800257a:	4082      	lsls	r2, r0
 800257c:	055b      	lsls	r3, r3, #21
 800257e:	0312      	lsls	r2, r2, #12
 8002580:	2400      	movs	r4, #0
 8002582:	0b12      	lsrs	r2, r2, #12
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	e7f1      	b.n	800256c <__aeabi_ui2d+0x2c>
 8002588:	0000041e 	.word	0x0000041e

0800258c <__aeabi_f2d>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	0043      	lsls	r3, r0, #1
 8002590:	0246      	lsls	r6, r0, #9
 8002592:	0fc4      	lsrs	r4, r0, #31
 8002594:	20fe      	movs	r0, #254	; 0xfe
 8002596:	0e1b      	lsrs	r3, r3, #24
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	0a75      	lsrs	r5, r6, #9
 800259c:	4208      	tst	r0, r1
 800259e:	d00c      	beq.n	80025ba <__aeabi_f2d+0x2e>
 80025a0:	22e0      	movs	r2, #224	; 0xe0
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4694      	mov	ip, r2
 80025a6:	076d      	lsls	r5, r5, #29
 80025a8:	0b36      	lsrs	r6, r6, #12
 80025aa:	4463      	add	r3, ip
 80025ac:	051b      	lsls	r3, r3, #20
 80025ae:	4333      	orrs	r3, r6
 80025b0:	07e4      	lsls	r4, r4, #31
 80025b2:	4323      	orrs	r3, r4
 80025b4:	0028      	movs	r0, r5
 80025b6:	0019      	movs	r1, r3
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d114      	bne.n	80025e8 <__aeabi_f2d+0x5c>
 80025be:	2d00      	cmp	r5, #0
 80025c0:	d01b      	beq.n	80025fa <__aeabi_f2d+0x6e>
 80025c2:	0028      	movs	r0, r5
 80025c4:	f000 f82a 	bl	800261c <__clzsi2>
 80025c8:	280a      	cmp	r0, #10
 80025ca:	dc1c      	bgt.n	8002606 <__aeabi_f2d+0x7a>
 80025cc:	230b      	movs	r3, #11
 80025ce:	002e      	movs	r6, r5
 80025d0:	1a1b      	subs	r3, r3, r0
 80025d2:	40de      	lsrs	r6, r3
 80025d4:	0003      	movs	r3, r0
 80025d6:	3315      	adds	r3, #21
 80025d8:	409d      	lsls	r5, r3
 80025da:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <__aeabi_f2d+0x88>)
 80025dc:	0336      	lsls	r6, r6, #12
 80025de:	1a12      	subs	r2, r2, r0
 80025e0:	0552      	lsls	r2, r2, #21
 80025e2:	0b36      	lsrs	r6, r6, #12
 80025e4:	0d53      	lsrs	r3, r2, #21
 80025e6:	e7e1      	b.n	80025ac <__aeabi_f2d+0x20>
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d009      	beq.n	8002600 <__aeabi_f2d+0x74>
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0b36      	lsrs	r6, r6, #12
 80025f0:	0312      	lsls	r2, r2, #12
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <__aeabi_f2d+0x8c>)
 80025f4:	076d      	lsls	r5, r5, #29
 80025f6:	4316      	orrs	r6, r2
 80025f8:	e7d8      	b.n	80025ac <__aeabi_f2d+0x20>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2600      	movs	r6, #0
 80025fe:	e7d5      	b.n	80025ac <__aeabi_f2d+0x20>
 8002600:	2600      	movs	r6, #0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <__aeabi_f2d+0x8c>)
 8002604:	e7d2      	b.n	80025ac <__aeabi_f2d+0x20>
 8002606:	0003      	movs	r3, r0
 8002608:	3b0b      	subs	r3, #11
 800260a:	409d      	lsls	r5, r3
 800260c:	002e      	movs	r6, r5
 800260e:	2500      	movs	r5, #0
 8002610:	e7e3      	b.n	80025da <__aeabi_f2d+0x4e>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	00000389 	.word	0x00000389
 8002618:	000007ff 	.word	0x000007ff

0800261c <__clzsi2>:
 800261c:	211c      	movs	r1, #28
 800261e:	2301      	movs	r3, #1
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	4298      	cmp	r0, r3
 8002624:	d301      	bcc.n	800262a <__clzsi2+0xe>
 8002626:	0c00      	lsrs	r0, r0, #16
 8002628:	3910      	subs	r1, #16
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	4298      	cmp	r0, r3
 800262e:	d301      	bcc.n	8002634 <__clzsi2+0x18>
 8002630:	0a00      	lsrs	r0, r0, #8
 8002632:	3908      	subs	r1, #8
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	4298      	cmp	r0, r3
 8002638:	d301      	bcc.n	800263e <__clzsi2+0x22>
 800263a:	0900      	lsrs	r0, r0, #4
 800263c:	3904      	subs	r1, #4
 800263e:	a202      	add	r2, pc, #8	; (adr r2, 8002648 <__clzsi2+0x2c>)
 8002640:	5c10      	ldrb	r0, [r2, r0]
 8002642:	1840      	adds	r0, r0, r1
 8002644:	4770      	bx	lr
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	02020304 	.word	0x02020304
 800264c:	01010101 	.word	0x01010101
	...

08002658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b0a1      	sub	sp, #132	; 0x84
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//char test_buffer[50];
	//int test_buffer_length;
	float voltage = 0.0;
 800265e:	2300      	movs	r3, #0
 8002660:	67fb      	str	r3, [r7, #124]	; 0x7c
	char voltage_buffer[50];
	int voltage_buffer_length;
	int raw = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	67bb      	str	r3, [r7, #120]	; 0x78
	//float print_raw = 0.0;
	int raw_buffer_length;
	char raw_buffer[50];
	//char test_raw_buffer[50];
	//int test_raw_buffer_length;
	const int WRITE = 0x1;
 8002666:	2301      	movs	r3, #1
 8002668:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800266a:	f000 fb43 	bl	8002cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800266e:	f000 f869 	bl	8002744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002672:	f000 f92f 	bl	80028d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002676:	f000 f8bd 	bl	80027f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800267a:	f000 f8fb 	bl	8002874 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float rawconvert = 0.0;
 800267e:	2300      	movs	r3, #0
 8002680:	677b      	str	r3, [r7, #116]	; 0x74
  while (1)
  {
	  // Chip Select set to default low
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <main+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	0018      	movs	r0, r3
 800268a:	f000 fddf 	bl	800324c <HAL_GPIO_WritePin>
	  //test_buffer_length = sprintf(test_buffer, "\nSPI Test #%d\r\n", i);
	  //HAL_UART_Transmit(&huart1, (uint8_t *) test_buffer, test_buffer_length, 100);
	  //i++;
	  // Read status register
	  //HAL_SPI_Receive(&hspi1, raw, 2, 100);
	  HAL_SPI_Transmit(&hspi1, (uint8_t*) &WRITE, 1, 1);
 800268e:	0039      	movs	r1, r7
 8002690:	4825      	ldr	r0, [pc, #148]	; (8002728 <main+0xd0>)
 8002692:	2301      	movs	r3, #1
 8002694:	2201      	movs	r2, #1
 8002696:	f001 fbdb 	bl	8003e50 <HAL_SPI_Transmit>
	  while (!(SPI1->SR));
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <main+0xd4>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0fb      	beq.n	800269c <main+0x44>
	  raw = SPI1->DR;
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <main+0xd4>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	67bb      	str	r3, [r7, #120]	; 0x78
		  if ((raw &(1 & j))) {
			  reversed_num |= 1<<((NO_OF_BITS-1)-j);
		  }
	  }*/

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <main+0xcc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	2140      	movs	r1, #64	; 0x40
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fdcb 	bl	800324c <HAL_GPIO_WritePin>
	  //Test values
	  //test_raw_buffer_length = sprintf(test_raw_buffer, "Raw value test:     %u\r\n", raw);
	  //HAL_UART_Transmit(&huart1, (uint8_t *) test_raw_buffer, test_raw_buffer_length, 100);
	  //print_raw = 5;
	  //Print raw value
	  raw_buffer_length = sprintf(raw_buffer, "Raw value:        %d\r\n", raw);
 80026b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026b8:	491d      	ldr	r1, [pc, #116]	; (8002730 <main+0xd8>)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	0018      	movs	r0, r3
 80026be:	f002 ff9b 	bl	80055f8 <siprintf>
 80026c2:	0003      	movs	r3, r0
 80026c4:	673b      	str	r3, [r7, #112]	; 0x70
	  HAL_UART_Transmit(&huart1, (uint8_t *) raw_buffer, raw_buffer_length, 100);
 80026c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	1d39      	adds	r1, r7, #4
 80026cc:	4819      	ldr	r0, [pc, #100]	; (8002734 <main+0xdc>)
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	f001 fee8 	bl	80044a4 <HAL_UART_Transmit>
	  //Calculate voltage
	  rawconvert = (float)raw;
 80026d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026d6:	f7fe f925 	bl	8000924 <__aeabi_i2f>
 80026da:	1c03      	adds	r3, r0, #0
 80026dc:	677b      	str	r3, [r7, #116]	; 0x74
	  voltage = (rawconvert/65535)*5;
 80026de:	4916      	ldr	r1, [pc, #88]	; (8002738 <main+0xe0>)
 80026e0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80026e2:	f7fd fee1 	bl	80004a8 <__aeabi_fdiv>
 80026e6:	1c03      	adds	r3, r0, #0
 80026e8:	4914      	ldr	r1, [pc, #80]	; (800273c <main+0xe4>)
 80026ea:	1c18      	adds	r0, r3, #0
 80026ec:	f7fd fff4 	bl	80006d8 <__aeabi_fmul>
 80026f0:	1c03      	adds	r3, r0, #0
 80026f2:	67fb      	str	r3, [r7, #124]	; 0x7c
	  //Print voltage
	  voltage_buffer_length = sprintf(voltage_buffer, "Voltage from ADC: %.6f\r\n", voltage);
 80026f4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80026f6:	f7ff ff49 	bl	800258c <__aeabi_f2d>
 80026fa:	0002      	movs	r2, r0
 80026fc:	000b      	movs	r3, r1
 80026fe:	4910      	ldr	r1, [pc, #64]	; (8002740 <main+0xe8>)
 8002700:	2438      	movs	r4, #56	; 0x38
 8002702:	1938      	adds	r0, r7, r4
 8002704:	f002 ff78 	bl	80055f8 <siprintf>
 8002708:	0003      	movs	r3, r0
 800270a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_UART_Transmit(&huart1, (uint8_t *) voltage_buffer, voltage_buffer_length, 100);
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	b29a      	uxth	r2, r3
 8002710:	1939      	adds	r1, r7, r4
 8002712:	4808      	ldr	r0, [pc, #32]	; (8002734 <main+0xdc>)
 8002714:	2364      	movs	r3, #100	; 0x64
 8002716:	f001 fec5 	bl	80044a4 <HAL_UART_Transmit>
	  //Set a 2 second delay
	  HAL_Delay(50);
 800271a:	2032      	movs	r0, #50	; 0x32
 800271c:	f000 fb4e 	bl	8002dbc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002720:	e7af      	b.n	8002682 <main+0x2a>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	48000400 	.word	0x48000400
 8002728:	200001f8 	.word	0x200001f8
 800272c:	40013000 	.word	0x40013000
 8002730:	08007c68 	.word	0x08007c68
 8002734:	2000025c 	.word	0x2000025c
 8002738:	477fff00 	.word	0x477fff00
 800273c:	40a00000 	.word	0x40a00000
 8002740:	08007c80 	.word	0x08007c80

08002744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b095      	sub	sp, #84	; 0x54
 8002748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274a:	2420      	movs	r4, #32
 800274c:	193b      	adds	r3, r7, r4
 800274e:	0018      	movs	r0, r3
 8002750:	2330      	movs	r3, #48	; 0x30
 8002752:	001a      	movs	r2, r3
 8002754:	2100      	movs	r1, #0
 8002756:	f002 fad9 	bl	8004d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275a:	2310      	movs	r3, #16
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	0018      	movs	r0, r3
 8002760:	2310      	movs	r3, #16
 8002762:	001a      	movs	r2, r3
 8002764:	2100      	movs	r1, #0
 8002766:	f002 fad1 	bl	8004d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800276a:	003b      	movs	r3, r7
 800276c:	0018      	movs	r0, r3
 800276e:	2310      	movs	r3, #16
 8002770:	001a      	movs	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f002 faca 	bl	8004d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002778:	0021      	movs	r1, r4
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2201      	movs	r2, #1
 8002784:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2210      	movs	r2, #16
 800278a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002792:	187b      	adds	r3, r7, r1
 8002794:	0018      	movs	r0, r3
 8002796:	f000 fd77 	bl	8003288 <HAL_RCC_OscConfig>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800279e:	f000 f8e1 	bl	8002964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a2:	2110      	movs	r1, #16
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2207      	movs	r2, #7
 80027a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2100      	movs	r1, #0
 80027c0:	0018      	movs	r0, r3
 80027c2:	f001 f87b 	bl	80038bc <HAL_RCC_ClockConfig>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d001      	beq.n	80027ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80027ca:	f000 f8cb 	bl	8002964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027ce:	003b      	movs	r3, r7
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80027d4:	003b      	movs	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027da:	003b      	movs	r3, r7
 80027dc:	0018      	movs	r0, r3
 80027de:	f001 f9b1 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d001      	beq.n	80027ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80027e6:	f000 f8bd 	bl	8002964 <Error_Handler>
  }
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b015      	add	sp, #84	; 0x54
 80027f0:	bd90      	pop	{r4, r7, pc}
	...

080027f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <MX_SPI1_Init+0x78>)
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <MX_SPI1_Init+0x7c>)
 80027fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <MX_SPI1_Init+0x78>)
 8002800:	2282      	movs	r2, #130	; 0x82
 8002802:	0052      	lsls	r2, r2, #1
 8002804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_SPI1_Init+0x78>)
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	00d2      	lsls	r2, r2, #3
 800280c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_SPI1_Init+0x78>)
 8002810:	22f0      	movs	r2, #240	; 0xf0
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <MX_SPI1_Init+0x78>)
 8002818:	2202      	movs	r2, #2
 800281a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_SPI1_Init+0x78>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <MX_SPI1_Init+0x78>)
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <MX_SPI1_Init+0x78>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_SPI1_Init+0x78>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <MX_SPI1_Init+0x78>)
 8002838:	2200      	movs	r2, #0
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_SPI1_Init+0x78>)
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_SPI1_Init+0x78>)
 8002844:	2207      	movs	r2, #7
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_SPI1_Init+0x78>)
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <MX_SPI1_Init+0x78>)
 8002850:	2208      	movs	r2, #8
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <MX_SPI1_Init+0x78>)
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fa42 	bl	8003ce0 <HAL_SPI_Init>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002860:	f000 f880 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	200001f8 	.word	0x200001f8
 8002870:	40013000 	.word	0x40013000

08002874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_USART1_UART_Init+0x58>)
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <MX_USART1_UART_Init+0x5c>)
 800287c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_USART1_UART_Init+0x58>)
 8002880:	22e1      	movs	r2, #225	; 0xe1
 8002882:	0252      	lsls	r2, r2, #9
 8002884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART1_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_USART1_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART1_UART_Init+0x58>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART1_UART_Init+0x58>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <MX_USART1_UART_Init+0x58>)
 80028b8:	0018      	movs	r0, r3
 80028ba:	f001 fd9f 	bl	80043fc <HAL_UART_Init>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028c2:	f000 f84f 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000025c 	.word	0x2000025c
 80028d0:	40013800 	.word	0x40013800

080028d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	240c      	movs	r4, #12
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	0018      	movs	r0, r3
 80028e0:	2314      	movs	r3, #20
 80028e2:	001a      	movs	r2, r3
 80028e4:	2100      	movs	r1, #0
 80028e6:	f002 fa11 	bl	8004d0c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_GPIO_Init+0x88>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_GPIO_Init+0x88>)
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0289      	lsls	r1, r1, #10
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_GPIO_Init+0x88>)
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <MX_GPIO_Init+0x88>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <MX_GPIO_Init+0x88>)
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	02c9      	lsls	r1, r1, #11
 8002910:	430a      	orrs	r2, r1
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_GPIO_Init+0x88>)
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	02db      	lsls	r3, r3, #11
 800291c:	4013      	ands	r3, r2
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_GPIO_Init+0x8c>)
 8002924:	2200      	movs	r2, #0
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	0018      	movs	r0, r3
 800292a:	f000 fc8f 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800292e:	0021      	movs	r1, r4
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2201      	movs	r2, #1
 800293a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	187b      	adds	r3, r7, r1
 800294a:	4a05      	ldr	r2, [pc, #20]	; (8002960 <MX_GPIO_Init+0x8c>)
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f000 fb0c 	bl	8002f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b009      	add	sp, #36	; 0x24
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	48000400 	.word	0x48000400

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800296c:	e7fe      	b.n	800296c <Error_Handler+0x8>
	...

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_MspInit+0x44>)
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_MspInit+0x44>)
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_MspInit+0x44>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2201      	movs	r2, #1
 8002988:	4013      	ands	r3, r2
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_MspInit+0x44>)
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_MspInit+0x44>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0549      	lsls	r1, r1, #21
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_MspInit+0x44>)
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	055b      	lsls	r3, r3, #21
 80029a4:	4013      	ands	r3, r2
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	2414      	movs	r4, #20
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	0018      	movs	r0, r3
 80029c6:	2314      	movs	r3, #20
 80029c8:	001a      	movs	r2, r3
 80029ca:	2100      	movs	r1, #0
 80029cc:	f002 f99e 	bl	8004d0c <memset>
  if(hspi->Instance==SPI1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_SPI_MspInit+0x90>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d132      	bne.n	8002a40 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_SPI_MspInit+0x94>)
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_SPI_MspInit+0x94>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	0149      	lsls	r1, r1, #5
 80029e4:	430a      	orrs	r2, r1
 80029e6:	619a      	str	r2, [r3, #24]
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_SPI_MspInit+0x94>)
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_SPI_MspInit+0x94>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_SPI_MspInit+0x94>)
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0289      	lsls	r1, r1, #10
 8002a00:	430a      	orrs	r2, r1
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_SPI_MspInit+0x94>)
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a12:	0021      	movs	r1, r4
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	2260      	movs	r2, #96	; 0x60
 8002a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a32:	187a      	adds	r2, r7, r1
 8002a34:	2390      	movs	r3, #144	; 0x90
 8002a36:	05db      	lsls	r3, r3, #23
 8002a38:	0011      	movs	r1, r2
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fa96 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b00b      	add	sp, #44	; 0x2c
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	40013000 	.word	0x40013000
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08b      	sub	sp, #44	; 0x2c
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	2414      	movs	r4, #20
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	2314      	movs	r3, #20
 8002a60:	001a      	movs	r2, r3
 8002a62:	2100      	movs	r1, #0
 8002a64:	f002 f952 	bl	8004d0c <memset>
  if(huart->Instance==USART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_UART_MspInit+0x94>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d133      	bne.n	8002ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_UART_MspInit+0x98>)
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_UART_MspInit+0x98>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	01c9      	lsls	r1, r1, #7
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	619a      	str	r2, [r3, #24]
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x98>)
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	01db      	lsls	r3, r3, #7
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_UART_MspInit+0x98>)
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_UART_MspInit+0x98>)
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0289      	lsls	r1, r1, #10
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	615a      	str	r2, [r3, #20]
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_UART_MspInit+0x98>)
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	22c0      	movs	r2, #192	; 0xc0
 8002aae:	00d2      	lsls	r2, r2, #3
 8002ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	0021      	movs	r1, r4
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2201      	movs	r2, #1
 8002aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	187a      	adds	r2, r7, r1
 8002ace:	2390      	movs	r3, #144	; 0x90
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fa49 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b00b      	add	sp, #44	; 0x2c
 8002ae0:	bd90      	pop	{r4, r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000

08002aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <NMI_Handler+0x4>

08002af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <HardFault_Handler+0x4>

08002af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b10:	f000 f938 	bl	8002d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	af00      	add	r7, sp, #0
  return 1;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_kill>:

int _kill(int pid, int sig)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b30:	f002 f8c2 	bl	8004cb8 <__errno>
 8002b34:	0003      	movs	r3, r0
 8002b36:	2216      	movs	r2, #22
 8002b38:	601a      	str	r2, [r3, #0]
  return -1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	425b      	negs	r3, r3
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_exit>:

void _exit (int status)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b4e:	2301      	movs	r3, #1
 8002b50:	425a      	negs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff ffe5 	bl	8002b26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b5c:	e7fe      	b.n	8002b5c <_exit+0x16>

08002b5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e00a      	b.n	8002b86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b70:	e000      	b.n	8002b74 <_read+0x16>
 8002b72:	bf00      	nop
 8002b74:	0001      	movs	r1, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	60ba      	str	r2, [r7, #8]
 8002b7c:	b2ca      	uxtb	r2, r1
 8002b7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	dbf0      	blt.n	8002b70 <_read+0x12>
  }

  return len;
 8002b8e:	687b      	ldr	r3, [r7, #4]
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e009      	b.n	8002bbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	e000      	b.n	8002bb8 <_write+0x20>
 8002bb6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	dbf1      	blt.n	8002baa <_write+0x12>
  }
  return len;
 8002bc6:	687b      	ldr	r3, [r7, #4]
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b006      	add	sp, #24
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_close>:

int _close(int file)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	425b      	negs	r3, r3
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	0192      	lsls	r2, r2, #6
 8002bf4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_isatty>:

int _isatty(int file)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c08:	2301      	movs	r3, #1
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b002      	add	sp, #8
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <_sbrk+0x5c>)
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <_sbrk+0x60>)
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <_sbrk+0x64>)
 8002c46:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <_sbrk+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <_sbrk+0x64>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d207      	bcs.n	8002c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c58:	f002 f82e 	bl	8004cb8 <__errno>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	220c      	movs	r2, #12
 8002c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	425b      	negs	r3, r3
 8002c66:	e009      	b.n	8002c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	18d2      	adds	r2, r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <_sbrk+0x64>)
 8002c78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b006      	add	sp, #24
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20002000 	.word	0x20002000
 8002c88:	00000400 	.word	0x00000400
 8002c8c:	200002e4 	.word	0x200002e4
 8002c90:	20000300 	.word	0x20000300

08002c94 <SystemInit>:
/**
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ca2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ca4:	f7ff fff6 	bl	8002c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002caa:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <LoopForever+0xe>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	; (8002cec <LoopForever+0x16>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cce:	f001 fff9 	bl	8004cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd2:	f7ff fcc1 	bl	8002658 <main>

08002cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd6:	e7fe      	b.n	8002cd6 <LoopForever>
  ldr   r0, =_estack
 8002cd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ce4:	080081f4 	.word	0x080081f4
  ldr r2, =_sbss
 8002ce8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002cec:	200002fc 	.word	0x200002fc

08002cf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC1_IRQHandler>
	...

08002cf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_Init+0x24>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_Init+0x24>)
 8002cfe:	2110      	movs	r1, #16
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f000 f809 	bl	8002d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0a:	f7ff fe31 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40022000 	.word	0x40022000

08002d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_InitTick+0x5c>)
 8002d26:	681c      	ldr	r4, [r3, #0]
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_InitTick+0x60>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	23fa      	movs	r3, #250	; 0xfa
 8002d30:	0098      	lsls	r0, r3, #2
 8002d32:	f7fd fa05 	bl	8000140 <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	0019      	movs	r1, r3
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	f7fd fa00 	bl	8000140 <__udivsi3>
 8002d40:	0003      	movs	r3, r0
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f905 	bl	8002f52 <HAL_SYSTICK_Config>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e00f      	b.n	8002d70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d80b      	bhi.n	8002d6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	425b      	negs	r3, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 f8e2 	bl	8002f28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_InitTick+0x64>)
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b003      	add	sp, #12
 8002d76:	bd90      	pop	{r4, r7, pc}
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000008 	.word	0x20000008
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	18d2      	adds	r2, r2, r3
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_IncTick+0x20>)
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000008 	.word	0x20000008
 8002da4:	200002e8 	.word	0x200002e8

08002da8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_GetTick+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	200002e8 	.word	0x200002e8

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	d005      	beq.n	8002de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_Delay+0x44>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	001a      	movs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	f7ff ffe0 	bl	8002da8 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d8f7      	bhi.n	8002de4 <HAL_Delay+0x28>
  {
  }
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	20000008 	.word	0x20000008

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b7f      	cmp	r3, #127	; 0x7f
 8002e18:	d828      	bhi.n	8002e6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <__NVIC_SetPriority+0xd4>)
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	33c0      	adds	r3, #192	; 0xc0
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	589b      	ldr	r3, [r3, r2]
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	2203      	movs	r2, #3
 8002e32:	400a      	ands	r2, r1
 8002e34:	00d2      	lsls	r2, r2, #3
 8002e36:	21ff      	movs	r1, #255	; 0xff
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	401a      	ands	r2, r3
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	2303      	movs	r3, #3
 8002e52:	4003      	ands	r3, r0
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e58:	481f      	ldr	r0, [pc, #124]	; (8002ed8 <__NVIC_SetPriority+0xd4>)
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	430a      	orrs	r2, r1
 8002e64:	33c0      	adds	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e6a:	e031      	b.n	8002ed0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <__NVIC_SetPriority+0xd8>)
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	0019      	movs	r1, r3
 8002e74:	230f      	movs	r3, #15
 8002e76:	400b      	ands	r3, r1
 8002e78:	3b08      	subs	r3, #8
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	18d3      	adds	r3, r2, r3
 8002e82:	3304      	adds	r3, #4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1dfa      	adds	r2, r7, #7
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	400a      	ands	r2, r1
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	21ff      	movs	r1, #255	; 0xff
 8002e94:	4091      	lsls	r1, r2
 8002e96:	000a      	movs	r2, r1
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2303      	movs	r3, #3
 8002eae:	4003      	ands	r3, r0
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <__NVIC_SetPriority+0xd8>)
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	001c      	movs	r4, r3
 8002ebc:	230f      	movs	r3, #15
 8002ebe:	4023      	ands	r3, r4
 8002ec0:	3b08      	subs	r3, #8
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	18c3      	adds	r3, r0, r3
 8002ecc:	3304      	adds	r3, #4
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b003      	add	sp, #12
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	045b      	lsls	r3, r3, #17
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d301      	bcc.n	8002ef8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e010      	b.n	8002f1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <SysTick_Config+0x44>)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	3a01      	subs	r2, #1
 8002efe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f00:	2301      	movs	r3, #1
 8002f02:	425b      	negs	r3, r3
 8002f04:	2103      	movs	r1, #3
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff ff7c 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SysTick_Config+0x44>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SysTick_Config+0x44>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	210f      	movs	r1, #15
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	1c02      	adds	r2, r0, #0
 8002f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ffbf 	bl	8002ee0 <SysTick_Config>
 8002f62:	0003      	movs	r3, r0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e14f      	b.n	800321c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d100      	bne.n	8002f94 <HAL_GPIO_Init+0x28>
 8002f92:	e140      	b.n	8003216 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	0013      	movs	r3, r2
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	0013      	movs	r3, r2
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2203      	movs	r2, #3
 8003014:	4013      	ands	r3, r2
 8003016:	2b03      	cmp	r3, #3
 8003018:	d017      	beq.n	800304a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	43da      	mvns	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	4013      	ands	r3, r2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d123      	bne.n	800309e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	58d3      	ldr	r3, [r2, r3]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2207      	movs	r2, #7
 8003068:	4013      	ands	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	409a      	lsls	r2, r3
 8003070:	0013      	movs	r3, r2
 8003072:	43da      	mvns	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2107      	movs	r1, #7
 8003082:	400b      	ands	r3, r1
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	409a      	lsls	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	6939      	ldr	r1, [r7, #16]
 800309c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	43da      	mvns	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	401a      	ands	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	23c0      	movs	r3, #192	; 0xc0
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	4013      	ands	r3, r2
 80030dc:	d100      	bne.n	80030e0 <HAL_GPIO_Init+0x174>
 80030de:	e09a      	b.n	8003216 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e0:	4b54      	ldr	r3, [pc, #336]	; (8003234 <HAL_GPIO_Init+0x2c8>)
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_GPIO_Init+0x2c8>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
 80030ec:	4b51      	ldr	r3, [pc, #324]	; (8003234 <HAL_GPIO_Init+0x2c8>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030f8:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <HAL_GPIO_Init+0x2cc>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	589b      	ldr	r3, [r3, r2]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	409a      	lsls	r2, r3
 8003112:	0013      	movs	r3, r2
 8003114:	43da      	mvns	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	2390      	movs	r3, #144	; 0x90
 8003120:	05db      	lsls	r3, r3, #23
 8003122:	429a      	cmp	r2, r3
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x1e2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a44      	ldr	r2, [pc, #272]	; (800323c <HAL_GPIO_Init+0x2d0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x1de>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a43      	ldr	r2, [pc, #268]	; (8003240 <HAL_GPIO_Init+0x2d4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x1da>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a42      	ldr	r2, [pc, #264]	; (8003244 <HAL_GPIO_Init+0x2d8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x1d6>
 800313e:	2303      	movs	r3, #3
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x1e4>
 8003142:	2305      	movs	r3, #5
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x1e4>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x1e4>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x1e4>
 800314e:	2300      	movs	r3, #0
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	2103      	movs	r1, #3
 8003154:	400a      	ands	r2, r1
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003160:	4935      	ldr	r1, [pc, #212]	; (8003238 <HAL_GPIO_Init+0x2cc>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43da      	mvns	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	035b      	lsls	r3, r3, #13
 8003186:	4013      	ands	r3, r2
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	039b      	lsls	r3, r3, #14
 80031b0:	4013      	ands	r3, r2
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031bc:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43da      	mvns	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	029b      	lsls	r3, r3, #10
 80031da:	4013      	ands	r3, r2
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	025b      	lsls	r3, r3, #9
 8003204:	4013      	ands	r3, r2
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3301      	adds	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	40da      	lsrs	r2, r3
 8003224:	1e13      	subs	r3, r2, #0
 8003226:	d000      	beq.n	800322a <HAL_GPIO_Init+0x2be>
 8003228:	e6a8      	b.n	8002f7c <HAL_GPIO_Init+0x10>
  } 
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b006      	add	sp, #24
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	40010000 	.word	0x40010000
 800323c:	48000400 	.word	0x48000400
 8003240:	48000800 	.word	0x48000800
 8003244:	48000c00 	.word	0x48000c00
 8003248:	40010400 	.word	0x40010400

0800324c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	0008      	movs	r0, r1
 8003256:	0011      	movs	r1, r2
 8003258:	1cbb      	adds	r3, r7, #2
 800325a:	1c02      	adds	r2, r0, #0
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	1c7b      	adds	r3, r7, #1
 8003260:	1c0a      	adds	r2, r1, #0
 8003262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003264:	1c7b      	adds	r3, r7, #1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326c:	1cbb      	adds	r3, r7, #2
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003276:	1cbb      	adds	r3, r7, #2
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e301      	b.n	800389e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	d100      	bne.n	80032a6 <HAL_RCC_OscConfig+0x1e>
 80032a4:	e08d      	b.n	80033c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032a6:	4bc3      	ldr	r3, [pc, #780]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	220c      	movs	r2, #12
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00e      	beq.n	80032d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b2:	4bc0      	ldr	r3, [pc, #768]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	220c      	movs	r2, #12
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d116      	bne.n	80032ec <HAL_RCC_OscConfig+0x64>
 80032be:	4bbd      	ldr	r3, [pc, #756]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	025b      	lsls	r3, r3, #9
 80032c6:	401a      	ands	r2, r3
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	025b      	lsls	r3, r3, #9
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	4bb8      	ldr	r3, [pc, #736]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	d100      	bne.n	80032de <HAL_RCC_OscConfig+0x56>
 80032dc:	e070      	b.n	80033c0 <HAL_RCC_OscConfig+0x138>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d000      	beq.n	80032e8 <HAL_RCC_OscConfig+0x60>
 80032e6:	e06b      	b.n	80033c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e2d8      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x7c>
 80032f4:	4baf      	ldr	r3, [pc, #700]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4bae      	ldr	r3, [pc, #696]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	0249      	lsls	r1, r1, #9
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e02f      	b.n	8003364 <HAL_RCC_OscConfig+0xdc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10c      	bne.n	8003326 <HAL_RCC_OscConfig+0x9e>
 800330c:	4ba9      	ldr	r3, [pc, #676]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4ba8      	ldr	r3, [pc, #672]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003312:	49a9      	ldr	r1, [pc, #676]	; (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4ba6      	ldr	r3, [pc, #664]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4ba5      	ldr	r3, [pc, #660]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800331e:	49a7      	ldr	r1, [pc, #668]	; (80035bc <HAL_RCC_OscConfig+0x334>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e01e      	b.n	8003364 <HAL_RCC_OscConfig+0xdc>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b05      	cmp	r3, #5
 800332c:	d10e      	bne.n	800334c <HAL_RCC_OscConfig+0xc4>
 800332e:	4ba1      	ldr	r3, [pc, #644]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4ba0      	ldr	r3, [pc, #640]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	02c9      	lsls	r1, r1, #11
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	4b9d      	ldr	r3, [pc, #628]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	0249      	lsls	r1, r1, #9
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xdc>
 800334c:	4b99      	ldr	r3, [pc, #612]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b98      	ldr	r3, [pc, #608]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003352:	4999      	ldr	r1, [pc, #612]	; (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b95      	ldr	r3, [pc, #596]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800335e:	4997      	ldr	r1, [pc, #604]	; (80035bc <HAL_RCC_OscConfig+0x334>)
 8003360:	400a      	ands	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d014      	beq.n	8003396 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7ff fd1c 	bl	8002da8 <HAL_GetTick>
 8003370:	0003      	movs	r3, r0
 8003372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003376:	f7ff fd17 	bl	8002da8 <HAL_GetTick>
 800337a:	0002      	movs	r2, r0
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e28a      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003388:	4b8a      	ldr	r3, [pc, #552]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	4013      	ands	r3, r2
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0xee>
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7ff fd07 	bl	8002da8 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a0:	f7ff fd02 	bl	8002da8 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e275      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	4013      	ands	r3, r2
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x118>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d100      	bne.n	80033ce <HAL_RCC_OscConfig+0x146>
 80033cc:	e069      	b.n	80034a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033ce:	4b79      	ldr	r3, [pc, #484]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	220c      	movs	r2, #12
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033d8:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	220c      	movs	r2, #12
 80033de:	4013      	ands	r3, r2
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d11c      	bne.n	800341e <HAL_RCC_OscConfig+0x196>
 80033e4:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	025b      	lsls	r3, r3, #9
 80033ec:	4013      	ands	r3, r2
 80033ee:	d116      	bne.n	800341e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f0:	4b70      	ldr	r3, [pc, #448]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2202      	movs	r2, #2
 80033f6:	4013      	ands	r3, r2
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x17e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e24b      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b6b      	ldr	r3, [pc, #428]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	22f8      	movs	r2, #248	; 0xf8
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	00da      	lsls	r2, r3, #3
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341c:	e041      	b.n	80034a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d024      	beq.n	8003470 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7ff fcb9 	bl	8002da8 <HAL_GetTick>
 8003436:	0003      	movs	r3, r0
 8003438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343c:	f7ff fcb4 	bl	8002da8 <HAL_GetTick>
 8003440:	0002      	movs	r2, r0
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e227      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2202      	movs	r2, #2
 8003454:	4013      	ands	r3, r2
 8003456:	d0f1      	beq.n	800343c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	22f8      	movs	r2, #248	; 0xf8
 800345e:	4393      	bics	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00da      	lsls	r2, r3, #3
 8003468:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e018      	b.n	80034a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b4f      	ldr	r3, [pc, #316]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003476:	2101      	movs	r1, #1
 8003478:	438a      	bics	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7ff fc94 	bl	8002da8 <HAL_GetTick>
 8003480:	0003      	movs	r3, r0
 8003482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7ff fc8f 	bl	8002da8 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e202      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2202      	movs	r2, #2
 800349e:	4013      	ands	r3, r2
 80034a0:	d1f1      	bne.n	8003486 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2208      	movs	r2, #8
 80034a8:	4013      	ands	r3, r2
 80034aa:	d036      	beq.n	800351a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d019      	beq.n	80034e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	430a      	orrs	r2, r1
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7ff fc72 	bl	8002da8 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7ff fc6d 	bl	8002da8 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1e0      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2202      	movs	r2, #2
 80034e2:	4013      	ands	r3, r2
 80034e4:	d0f1      	beq.n	80034ca <HAL_RCC_OscConfig+0x242>
 80034e6:	e018      	b.n	800351a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80034ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ec:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	438a      	bics	r2, r1
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7ff fc58 	bl	8002da8 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fe:	f7ff fc53 	bl	8002da8 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1c6      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2202      	movs	r2, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d1f1      	bne.n	80034fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	d100      	bne.n	8003526 <HAL_RCC_OscConfig+0x29e>
 8003524:	e0b4      	b.n	8003690 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	201f      	movs	r0, #31
 8003528:	183b      	adds	r3, r7, r0
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	055b      	lsls	r3, r3, #21
 8003536:	4013      	ands	r3, r2
 8003538:	d110      	bne.n	800355c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	0549      	lsls	r1, r1, #21
 8003544:	430a      	orrs	r2, r1
 8003546:	61da      	str	r2, [r3, #28]
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	055b      	lsls	r3, r3, #21
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003556:	183b      	adds	r3, r7, r0
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_RCC_OscConfig+0x338>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d11a      	bne.n	800359e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x338>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_RCC_OscConfig+0x338>)
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	0049      	lsls	r1, r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7ff fc17 	bl	8002da8 <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7ff fc12 	bl	8002da8 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e185      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x338>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4013      	ands	r3, r2
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10e      	bne.n	80035c4 <HAL_RCC_OscConfig+0x33c>
 80035a6:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	6a1a      	ldr	r2, [r3, #32]
 80035aa:	4b02      	ldr	r3, [pc, #8]	; (80035b4 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	621a      	str	r2, [r3, #32]
 80035b2:	e035      	b.n	8003620 <HAL_RCC_OscConfig+0x398>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	fffeffff 	.word	0xfffeffff
 80035bc:	fffbffff 	.word	0xfffbffff
 80035c0:	40007000 	.word	0x40007000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCC_OscConfig+0x35e>
 80035cc:	4bb6      	ldr	r3, [pc, #728]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	4bb5      	ldr	r3, [pc, #724]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	438a      	bics	r2, r1
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	4bb3      	ldr	r3, [pc, #716]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	4bb2      	ldr	r3, [pc, #712]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035de:	2104      	movs	r1, #4
 80035e0:	438a      	bics	r2, r1
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x398>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x380>
 80035ee:	4bae      	ldr	r3, [pc, #696]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	4bad      	ldr	r3, [pc, #692]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035f4:	2104      	movs	r1, #4
 80035f6:	430a      	orrs	r2, r1
 80035f8:	621a      	str	r2, [r3, #32]
 80035fa:	4bab      	ldr	r3, [pc, #684]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	4baa      	ldr	r3, [pc, #680]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	621a      	str	r2, [r3, #32]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x398>
 8003608:	4ba7      	ldr	r3, [pc, #668]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	4ba6      	ldr	r3, [pc, #664]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	621a      	str	r2, [r3, #32]
 8003614:	4ba4      	ldr	r3, [pc, #656]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003616:	6a1a      	ldr	r2, [r3, #32]
 8003618:	4ba3      	ldr	r3, [pc, #652]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800361a:	2104      	movs	r1, #4
 800361c:	438a      	bics	r2, r1
 800361e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d014      	beq.n	8003652 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7ff fbbe 	bl	8002da8 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	e009      	b.n	8003646 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7ff fbb9 	bl	8002da8 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	4a9b      	ldr	r2, [pc, #620]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e12b      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	4b98      	ldr	r3, [pc, #608]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x3aa>
 8003650:	e013      	b.n	800367a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7ff fba9 	bl	8002da8 <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	e009      	b.n	8003670 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7ff fba4 	bl	8002da8 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	4a91      	ldr	r2, [pc, #580]	; (80038ac <HAL_RCC_OscConfig+0x624>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e116      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	4b8d      	ldr	r3, [pc, #564]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	2202      	movs	r2, #2
 8003676:	4013      	ands	r3, r2
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800367a:	231f      	movs	r3, #31
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b88      	ldr	r3, [pc, #544]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800368a:	4989      	ldr	r1, [pc, #548]	; (80038b0 <HAL_RCC_OscConfig+0x628>)
 800368c:	400a      	ands	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2210      	movs	r2, #16
 8003696:	4013      	ands	r3, r2
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d12a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036a2:	4b81      	ldr	r3, [pc, #516]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a6:	4b80      	ldr	r3, [pc, #512]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036a8:	2104      	movs	r1, #4
 80036aa:	430a      	orrs	r2, r1
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80036ae:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b2:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	430a      	orrs	r2, r1
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff fb75 	bl	8002da8 <HAL_GetTick>
 80036be:	0003      	movs	r3, r0
 80036c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036c4:	f7ff fb70 	bl	8002da8 <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0e3      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036d6:	4b74      	ldr	r3, [pc, #464]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	22f8      	movs	r2, #248	; 0xf8
 80036e6:	4393      	bics	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	00da      	lsls	r2, r3, #3
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80036f2:	430a      	orrs	r2, r1
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34
 80036f6:	e034      	b.n	8003762 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	3305      	adds	r3, #5
 80036fe:	d111      	bne.n	8003724 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003700:	4b69      	ldr	r3, [pc, #420]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003706:	2104      	movs	r1, #4
 8003708:	438a      	bics	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800370c:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	22f8      	movs	r2, #248	; 0xf8
 8003712:	4393      	bics	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	00da      	lsls	r2, r3, #3
 800371c:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800371e:	430a      	orrs	r2, r1
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
 8003722:	e01e      	b.n	8003762 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003724:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003728:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800372a:	2104      	movs	r1, #4
 800372c:	430a      	orrs	r2, r1
 800372e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003730:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003736:	2101      	movs	r1, #1
 8003738:	438a      	bics	r2, r1
 800373a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7ff fb34 	bl	8002da8 <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003746:	f7ff fb2f 	bl	8002da8 <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e0a2      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	2202      	movs	r2, #2
 800375e:	4013      	ands	r3, r2
 8003760:	d1f1      	bne.n	8003746 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d100      	bne.n	800376c <HAL_RCC_OscConfig+0x4e4>
 800376a:	e097      	b.n	800389c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376c:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	220c      	movs	r2, #12
 8003772:	4013      	ands	r3, r2
 8003774:	2b08      	cmp	r3, #8
 8003776:	d100      	bne.n	800377a <HAL_RCC_OscConfig+0x4f2>
 8003778:	e06b      	b.n	8003852 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d14c      	bne.n	800381c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003788:	494a      	ldr	r1, [pc, #296]	; (80038b4 <HAL_RCC_OscConfig+0x62c>)
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7ff fb0b 	bl	8002da8 <HAL_GetTick>
 8003792:	0003      	movs	r3, r0
 8003794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7ff fb06 	bl	8002da8 <HAL_GetTick>
 800379c:	0002      	movs	r2, r0
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e079      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	049b      	lsls	r3, r3, #18
 80037b2:	4013      	ands	r3, r2
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b6:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	220f      	movs	r2, #15
 80037bc:	4393      	bics	r3, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037c6:	430a      	orrs	r2, r1
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <HAL_RCC_OscConfig+0x630>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	431a      	orrs	r2, r3
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e4:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	0449      	lsls	r1, r1, #17
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7ff fad9 	bl	8002da8 <HAL_GetTick>
 80037f6:	0003      	movs	r3, r0
 80037f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7ff fad4 	bl	8002da8 <HAL_GetTick>
 8003800:	0002      	movs	r2, r0
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e047      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380e:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	049b      	lsls	r3, r3, #18
 8003816:	4013      	ands	r3, r2
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x574>
 800381a:	e03f      	b.n	800389c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003822:	4924      	ldr	r1, [pc, #144]	; (80038b4 <HAL_RCC_OscConfig+0x62c>)
 8003824:	400a      	ands	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7ff fabe 	bl	8002da8 <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003832:	f7ff fab9 	bl	8002da8 <HAL_GetTick>
 8003836:	0002      	movs	r2, r0
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e02c      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	049b      	lsls	r3, r3, #18
 800384c:	4013      	ands	r3, r2
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x5aa>
 8003850:	e024      	b.n	800389c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e01f      	b.n	800389e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x620>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	025b      	lsls	r3, r3, #9
 8003870:	401a      	ands	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	429a      	cmp	r2, r3
 8003878:	d10e      	bne.n	8003898 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	220f      	movs	r2, #15
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d107      	bne.n	8003898 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	23f0      	movs	r3, #240	; 0xf0
 800388c:	039b      	lsls	r3, r3, #14
 800388e:	401a      	ands	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b008      	add	sp, #32
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	40021000 	.word	0x40021000
 80038ac:	00001388 	.word	0x00001388
 80038b0:	efffffff 	.word	0xefffffff
 80038b4:	feffffff 	.word	0xfeffffff
 80038b8:	ffc2ffff 	.word	0xffc2ffff

080038bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b3      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d911      	bls.n	8003902 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e09a      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	d015      	beq.n	8003938 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2204      	movs	r2, #4
 8003912:	4013      	ands	r3, r2
 8003914:	d006      	beq.n	8003924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003916:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 800391c:	21e0      	movs	r1, #224	; 0xe0
 800391e:	00c9      	lsls	r1, r1, #3
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	22f0      	movs	r2, #240	; 0xf0
 800392a:	4393      	bics	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	d040      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	029b      	lsls	r3, r3, #10
 8003952:	4013      	ands	r3, r2
 8003954:	d114      	bne.n	8003980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e06e      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	049b      	lsls	r3, r3, #18
 800396a:	4013      	ands	r3, r2
 800396c:	d108      	bne.n	8003980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e062      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2202      	movs	r2, #2
 8003978:	4013      	ands	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e05b      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003980:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2203      	movs	r2, #3
 8003986:	4393      	bics	r3, r2
 8003988:	0019      	movs	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7ff fa08 	bl	8002da8 <HAL_GetTick>
 8003998:	0003      	movs	r3, r0
 800399a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399c:	e009      	b.n	80039b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399e:	f7ff fa03 	bl	8002da8 <HAL_GetTick>
 80039a2:	0002      	movs	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_RCC_ClockConfig+0x18c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e042      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	220c      	movs	r2, #12
 80039b8:	401a      	ands	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1ec      	bne.n	800399e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4013      	ands	r3, r2
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d211      	bcs.n	80039f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4393      	bics	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <HAL_RCC_ClockConfig+0x184>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e020      	b.n	8003a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2204      	movs	r2, #4
 80039fc:	4013      	ands	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_RCC_ClockConfig+0x190>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a14:	f000 f820 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a18:	0001      	movs	r1, r0
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_ClockConfig+0x188>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	220f      	movs	r2, #15
 8003a22:	4013      	ands	r3, r2
 8003a24:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x194>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	000a      	movs	r2, r1
 8003a2a:	40da      	lsrs	r2, r3
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x198>)
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a30:	2003      	movs	r0, #3
 8003a32:	f7ff f973 	bl	8002d1c <HAL_InitTick>
  
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b004      	add	sp, #16
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40021000 	.word	0x40021000
 8003a48:	00001388 	.word	0x00001388
 8003a4c:	fffff8ff 	.word	0xfffff8ff
 8003a50:	08007ddc 	.word	0x08007ddc
 8003a54:	20000000 	.word	0x20000000

08003a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x30>
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x36>
 8003a86:	e02c      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a8a:	613b      	str	r3, [r7, #16]
      break;
 8003a8c:	e02c      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	0c9b      	lsrs	r3, r3, #18
 8003a92:	220f      	movs	r2, #15
 8003a94:	4013      	ands	r3, r2
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003a9c:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	025b      	lsls	r3, r3, #9
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4810      	ldr	r0, [pc, #64]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ab8:	f7fc fb42 	bl	8000140 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	001a      	movs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4353      	muls	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e009      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	000a      	movs	r2, r1
 8003acc:	0152      	lsls	r2, r2, #5
 8003ace:	1a52      	subs	r2, r2, r1
 8003ad0:	0193      	lsls	r3, r2, #6
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	185b      	adds	r3, r3, r1
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	613b      	str	r3, [r7, #16]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ae4:	613b      	str	r3, [r7, #16]
      break;
 8003ae6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ae8:	693b      	ldr	r3, [r7, #16]
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b006      	add	sp, #24
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	08007df4 	.word	0x08007df4
 8003b00:	08007e04 	.word	0x08007e04

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000000 	.word	0x20000000

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b1c:	f7ff fff2 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b20:	0001      	movs	r1, r0
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	2207      	movs	r2, #7
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	40d9      	lsrs	r1, r3
 8003b32:	000b      	movs	r3, r1
}    
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08007dec 	.word	0x08007dec

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	025b      	lsls	r3, r3, #9
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003b60:	e08e      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2017      	movs	r0, #23
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b57      	ldr	r3, [pc, #348]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	055b      	lsls	r3, r3, #21
 8003b72:	4013      	ands	r3, r2
 8003b74:	d110      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b54      	ldr	r3, [pc, #336]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	0549      	lsls	r1, r1, #21
 8003b80:	430a      	orrs	r2, r1
 8003b82:	61da      	str	r2, [r3, #28]
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	055b      	lsls	r3, r3, #21
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	183b      	adds	r3, r7, r0
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d11a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b48      	ldr	r3, [pc, #288]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	0049      	lsls	r1, r1, #1
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb2:	f7ff f8f9 	bl	8002da8 <HAL_GetTick>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	e008      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7ff f8f4 	bl	8002da8 <HAL_GetTick>
 8003bc0:	0002      	movs	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e077      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	23c0      	movs	r3, #192	; 0xc0
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d034      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	23c0      	movs	r3, #192	; 0xc0
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d02c      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c0c:	2180      	movs	r1, #128	; 0x80
 8003c0e:	0249      	lsls	r1, r1, #9
 8003c10:	430a      	orrs	r2, r1
 8003c12:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c1a:	492e      	ldr	r1, [pc, #184]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c20:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7ff f8bb 	bl	8002da8 <HAL_GetTick>
 8003c32:	0003      	movs	r3, r0
 8003c34:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	e009      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7ff f8b6 	bl	8002da8 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e038      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4013      	ands	r3, r2
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c56:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c6a:	2317      	movs	r3, #23
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c7a:	4918      	ldr	r1, [pc, #96]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	2203      	movs	r2, #3
 8003c90:	4393      	bics	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	2210      	movs	r2, #16
 8003cae:	4393      	bics	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b006      	add	sp, #24
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	fffffcff 	.word	0xfffffcff
 8003cd4:	fffeffff 	.word	0xfffeffff
 8003cd8:	00001388 	.word	0x00001388
 8003cdc:	efffffff 	.word	0xefffffff

08003ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0a8      	b.n	8003e44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	2382      	movs	r3, #130	; 0x82
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d009      	beq.n	8003d1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	61da      	str	r2, [r3, #28]
 8003d0c:	e005      	b.n	8003d1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	225d      	movs	r2, #93	; 0x5d
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	225c      	movs	r2, #92	; 0x5c
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7fe fe3e 	bl	80029b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	225d      	movs	r2, #93	; 0x5d
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	438a      	bics	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	23e0      	movs	r3, #224	; 0xe0
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d902      	bls.n	8003d66 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e002      	b.n	8003d6c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	015b      	lsls	r3, r3, #5
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	23f0      	movs	r3, #240	; 0xf0
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d008      	beq.n	8003d8a <HAL_SPI_Init+0xaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	23e0      	movs	r3, #224	; 0xe0
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2382      	movs	r3, #130	; 0x82
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6899      	ldr	r1, [r3, #8]
 8003d98:	2384      	movs	r3, #132	; 0x84
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2102      	movs	r1, #2
 8003da6:	400b      	ands	r3, r1
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2101      	movs	r1, #1
 8003db0:	400b      	ands	r3, r1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6999      	ldr	r1, [r3, #24]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2138      	movs	r1, #56	; 0x38
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	400b      	ands	r3, r1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	401a      	ands	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	2204      	movs	r2, #4
 8003df0:	401a      	ands	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2110      	movs	r1, #16
 8003df8:	400b      	ands	r3, r1
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	2108      	movs	r1, #8
 8003e02:	400b      	ands	r3, r1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68d9      	ldr	r1, [r3, #12]
 8003e0a:	23f0      	movs	r3, #240	; 0xf0
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	400b      	ands	r3, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	0011      	movs	r1, r2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4907      	ldr	r1, [pc, #28]	; (8003e4c <HAL_SPI_Init+0x16c>)
 8003e30:	400a      	ands	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	225d      	movs	r2, #93	; 0x5d
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	fffff7ff 	.word	0xfffff7ff

08003e50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	1dbb      	adds	r3, r7, #6
 8003e5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e60:	231f      	movs	r3, #31
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	225c      	movs	r2, #92	; 0x5c
 8003e6c:	5c9b      	ldrb	r3, [r3, r2]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_SPI_Transmit+0x26>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e147      	b.n	8004106 <HAL_SPI_Transmit+0x2b6>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	225c      	movs	r2, #92	; 0x5c
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7e:	f7fe ff93 	bl	8002da8 <HAL_GetTick>
 8003e82:	0003      	movs	r3, r0
 8003e84:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e86:	2316      	movs	r3, #22
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	1dba      	adds	r2, r7, #6
 8003e8c:	8812      	ldrh	r2, [r2, #0]
 8003e8e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	225d      	movs	r2, #93	; 0x5d
 8003e94:	5c9b      	ldrb	r3, [r3, r2]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d004      	beq.n	8003ea6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e9c:	231f      	movs	r3, #31
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ea4:	e128      	b.n	80040f8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_SPI_Transmit+0x64>
 8003eac:	1dbb      	adds	r3, r7, #6
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003eb4:	231f      	movs	r3, #31
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ebc:	e11c      	b.n	80040f8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	225d      	movs	r2, #93	; 0x5d
 8003ec2:	2103      	movs	r1, #3
 8003ec4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1dba      	adds	r2, r7, #6
 8003ed6:	8812      	ldrh	r2, [r2, #0]
 8003ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1dba      	adds	r2, r7, #6
 8003ede:	8812      	ldrh	r2, [r2, #0]
 8003ee0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2244      	movs	r2, #68	; 0x44
 8003eec:	2100      	movs	r1, #0
 8003eee:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2246      	movs	r2, #70	; 0x46
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d110      	bne.n	8003f32 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	01c9      	lsls	r1, r1, #7
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2240      	movs	r2, #64	; 0x40
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d007      	beq.n	8003f50 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	23e0      	movs	r3, #224	; 0xe0
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d952      	bls.n	8004002 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <HAL_SPI_Transmit+0x11e>
 8003f64:	2316      	movs	r3, #22
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d143      	bne.n	8003ff6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f92:	e030      	b.n	8003ff6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d112      	bne.n	8003fc8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc6:	e016      	b.n	8003ff6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc8:	f7fe feee 	bl	8002da8 <HAL_GetTick>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d802      	bhi.n	8003fde <HAL_SPI_Transmit+0x18e>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_Transmit+0x194>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003fe4:	231f      	movs	r3, #31
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2203      	movs	r2, #3
 8003fea:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	225d      	movs	r2, #93	; 0x5d
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]
          goto error;
 8003ff4:	e080      	b.n	80040f8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1c9      	bne.n	8003f94 <HAL_SPI_Transmit+0x144>
 8004000:	e053      	b.n	80040aa <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_SPI_Transmit+0x1c4>
 800400a:	2316      	movs	r3, #22
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d145      	bne.n	80040a0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800403a:	e031      	b.n	80040a0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2202      	movs	r2, #2
 8004044:	4013      	ands	r3, r2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d113      	bne.n	8004072 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004070:	e016      	b.n	80040a0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004072:	f7fe fe99 	bl	8002da8 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d802      	bhi.n	8004088 <HAL_SPI_Transmit+0x238>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_SPI_Transmit+0x23e>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800408e:	231f      	movs	r3, #31
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2203      	movs	r2, #3
 8004094:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	225d      	movs	r2, #93	; 0x5d
 800409a:	2101      	movs	r1, #1
 800409c:	5499      	strb	r1, [r3, r2]
          goto error;
 800409e:	e02b      	b.n	80040f8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1c8      	bne.n	800403c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f95d 	bl	8004370 <SPI_EndRxTxTransaction>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80040e6:	231f      	movs	r3, #31
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e003      	b.n	80040f8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	225d      	movs	r2, #93	; 0x5d
 80040f4:	2101      	movs	r1, #1
 80040f6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	225c      	movs	r2, #92	; 0x5c
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004100:	231f      	movs	r3, #31
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	781b      	ldrb	r3, [r3, #0]
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b008      	add	sp, #32
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004120:	f7fe fe42 	bl	8002da8 <HAL_GetTick>
 8004124:	0002      	movs	r2, r0
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	18d3      	adds	r3, r2, r3
 800412e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004130:	f7fe fe3a 	bl	8002da8 <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004138:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	0d1b      	lsrs	r3, r3, #20
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	4353      	muls	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004146:	e058      	b.n	80041fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	d055      	beq.n	80041fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800414e:	f7fe fe2b 	bl	8002da8 <HAL_GetTick>
 8004152:	0002      	movs	r2, r0
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d902      	bls.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x54>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d142      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	21e0      	movs	r1, #224	; 0xe0
 8004170:	438a      	bics	r2, r1
 8004172:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	2382      	movs	r3, #130	; 0x82
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	429a      	cmp	r2, r3
 800417e:	d113      	bne.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	429a      	cmp	r2, r3
 8004196:	d107      	bne.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	438a      	bics	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	019b      	lsls	r3, r3, #6
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d110      	bne.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	491a      	ldr	r1, [pc, #104]	; (8004228 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2180      	movs	r1, #128	; 0x80
 80041d0:	0189      	lsls	r1, r1, #6
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	225d      	movs	r2, #93	; 0x5d
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	225c      	movs	r2, #92	; 0x5c
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e017      	b.n	800421a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	425a      	negs	r2, r3
 800420a:	4153      	adcs	r3, r2
 800420c:	b2db      	uxtb	r3, r3
 800420e:	001a      	movs	r2, r3
 8004210:	1dfb      	adds	r3, r7, #7
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d197      	bne.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b008      	add	sp, #32
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	20000000 	.word	0x20000000
 8004228:	ffffdfff 	.word	0xffffdfff

0800422c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800423a:	2317      	movs	r3, #23
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004242:	f7fe fdb1 	bl	8002da8 <HAL_GetTick>
 8004246:	0002      	movs	r2, r0
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004252:	f7fe fda9 	bl	8002da8 <HAL_GetTick>
 8004256:	0003      	movs	r3, r0
 8004258:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	0013      	movs	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	189b      	adds	r3, r3, r2
 800426c:	00da      	lsls	r2, r3, #3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	0d1b      	lsrs	r3, r3, #20
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	4353      	muls	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004278:	e068      	b.n	800434c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	23c0      	movs	r3, #192	; 0xc0
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	429a      	cmp	r2, r3
 8004282:	d10a      	bne.n	800429a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	2117      	movs	r1, #23
 8004292:	187b      	adds	r3, r7, r1
 8004294:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004296:	187b      	adds	r3, r7, r1
 8004298:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	d055      	beq.n	800434c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a0:	f7fe fd82 	bl	8002da8 <HAL_GetTick>
 80042a4:	0002      	movs	r2, r0
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d902      	bls.n	80042b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d142      	bne.n	800433c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	21e0      	movs	r1, #224	; 0xe0
 80042c2:	438a      	bics	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	2382      	movs	r3, #130	; 0x82
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d113      	bne.n	80042fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	429a      	cmp	r2, r3
 80042dc:	d005      	beq.n	80042ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d107      	bne.n	80042fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	438a      	bics	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	429a      	cmp	r2, r3
 8004304:	d110      	bne.n	8004328 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4916      	ldr	r1, [pc, #88]	; (800436c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004312:	400a      	ands	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	0189      	lsls	r1, r1, #6
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	225d      	movs	r2, #93	; 0x5d
 800432c:	2101      	movs	r1, #1
 800432e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	225c      	movs	r2, #92	; 0x5c
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e010      	b.n	800435e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3b01      	subs	r3, #1
 800434a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d18e      	bne.n	800427a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b00a      	add	sp, #40	; 0x28
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	20000000 	.word	0x20000000
 800436c:	ffffdfff 	.word	0xffffdfff

08004370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	23c0      	movs	r3, #192	; 0xc0
 8004380:	0159      	lsls	r1, r3, #5
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	0013      	movs	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	f7ff ff4e 	bl	800422c <SPI_WaitFifoStateUntilTimeout>
 8004390:	1e03      	subs	r3, r0, #0
 8004392:	d007      	beq.n	80043a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	2220      	movs	r2, #32
 800439a:	431a      	orrs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e027      	b.n	80043f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	0013      	movs	r3, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	f7ff fead 	bl	8004110 <SPI_WaitFlagStateUntilTimeout>
 80043b6:	1e03      	subs	r3, r0, #0
 80043b8:	d007      	beq.n	80043ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	2220      	movs	r2, #32
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e014      	b.n	80043f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	23c0      	movs	r3, #192	; 0xc0
 80043ce:	00d9      	lsls	r1, r3, #3
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	0013      	movs	r3, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	f7ff ff27 	bl	800422c <SPI_WaitFifoStateUntilTimeout>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d007      	beq.n	80043f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e6:	2220      	movs	r2, #32
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e000      	b.n	80043f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b004      	add	sp, #16
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e044      	b.n	8004498 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2278      	movs	r2, #120	; 0x78
 800441a:	2100      	movs	r1, #0
 800441c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	0018      	movs	r0, r3
 8004422:	f7fe fb15 	bl	8002a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2224      	movs	r2, #36	; 0x24
 800442a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2101      	movs	r1, #1
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f8d0 	bl	80045e4 <UART_SetConfig>
 8004444:	0003      	movs	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e024      	b.n	8004498 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0018      	movs	r0, r3
 800445a:	f000 fa03 	bl	8004864 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	490d      	ldr	r1, [pc, #52]	; (80044a0 <HAL_UART_Init+0xa4>)
 800446a:	400a      	ands	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2108      	movs	r1, #8
 800447a:	438a      	bics	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	430a      	orrs	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f000 fa9b 	bl	80049cc <UART_CheckIdleState>
 8004496:	0003      	movs	r3, r0
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b002      	add	sp, #8
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	fffff7ff 	.word	0xfffff7ff

080044a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	1dbb      	adds	r3, r7, #6
 80044b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d000      	beq.n	80044be <HAL_UART_Transmit+0x1a>
 80044bc:	e08d      	b.n	80045da <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_UART_Transmit+0x28>
 80044c4:	1dbb      	adds	r3, r7, #6
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e085      	b.n	80045dc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	015b      	lsls	r3, r3, #5
 80044d8:	429a      	cmp	r2, r3
 80044da:	d109      	bne.n	80044f0 <HAL_UART_Transmit+0x4c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2201      	movs	r2, #1
 80044e8:	4013      	ands	r3, r2
 80044ea:	d001      	beq.n	80044f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e075      	b.n	80045dc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2284      	movs	r2, #132	; 0x84
 80044f4:	2100      	movs	r1, #0
 80044f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	; 0x21
 80044fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044fe:	f7fe fc53 	bl	8002da8 <HAL_GetTick>
 8004502:	0003      	movs	r3, r0
 8004504:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1dba      	adds	r2, r7, #6
 800450a:	2150      	movs	r1, #80	; 0x50
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1dba      	adds	r2, r7, #6
 8004514:	2152      	movs	r1, #82	; 0x52
 8004516:	8812      	ldrh	r2, [r2, #0]
 8004518:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	015b      	lsls	r3, r3, #5
 8004522:	429a      	cmp	r2, r3
 8004524:	d108      	bne.n	8004538 <HAL_UART_Transmit+0x94>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e003      	b.n	8004540 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004540:	e030      	b.n	80045a4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	0013      	movs	r3, r2
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	f000 fae4 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004554:	1e03      	subs	r3, r0, #0
 8004556:	d004      	beq.n	8004562 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e03c      	b.n	80045dc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	05d2      	lsls	r2, r2, #23
 8004572:	0dd2      	lsrs	r2, r2, #23
 8004574:	b292      	uxth	r2, r2
 8004576:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	3302      	adds	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e008      	b.n	8004592 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b292      	uxth	r2, r2
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	3301      	adds	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2252      	movs	r2, #82	; 0x52
 8004596:	5a9b      	ldrh	r3, [r3, r2]
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b299      	uxth	r1, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2252      	movs	r2, #82	; 0x52
 80045a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2252      	movs	r2, #82	; 0x52
 80045a8:	5a9b      	ldrh	r3, [r3, r2]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1c8      	bne.n	8004542 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	0013      	movs	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	f000 faad 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e005      	b.n	80045dc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b008      	add	sp, #32
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ec:	231e      	movs	r3, #30
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a8d      	ldr	r2, [pc, #564]	; (8004848 <UART_SetConfig+0x264>)
 8004614:	4013      	ands	r3, r2
 8004616:	0019      	movs	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a88      	ldr	r2, [pc, #544]	; (800484c <UART_SetConfig+0x268>)
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a7f      	ldr	r2, [pc, #508]	; (8004850 <UART_SetConfig+0x26c>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	430a      	orrs	r2, r1
 800465e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a7b      	ldr	r2, [pc, #492]	; (8004854 <UART_SetConfig+0x270>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d127      	bne.n	80046ba <UART_SetConfig+0xd6>
 800466a:	4b7b      	ldr	r3, [pc, #492]	; (8004858 <UART_SetConfig+0x274>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	2203      	movs	r2, #3
 8004670:	4013      	ands	r3, r2
 8004672:	2b03      	cmp	r3, #3
 8004674:	d00d      	beq.n	8004692 <UART_SetConfig+0xae>
 8004676:	d81b      	bhi.n	80046b0 <UART_SetConfig+0xcc>
 8004678:	2b02      	cmp	r3, #2
 800467a:	d014      	beq.n	80046a6 <UART_SetConfig+0xc2>
 800467c:	d818      	bhi.n	80046b0 <UART_SetConfig+0xcc>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <UART_SetConfig+0xa4>
 8004682:	2b01      	cmp	r3, #1
 8004684:	d00a      	beq.n	800469c <UART_SetConfig+0xb8>
 8004686:	e013      	b.n	80046b0 <UART_SetConfig+0xcc>
 8004688:	231f      	movs	r3, #31
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e021      	b.n	80046d6 <UART_SetConfig+0xf2>
 8004692:	231f      	movs	r3, #31
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e01c      	b.n	80046d6 <UART_SetConfig+0xf2>
 800469c:	231f      	movs	r3, #31
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2204      	movs	r2, #4
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e017      	b.n	80046d6 <UART_SetConfig+0xf2>
 80046a6:	231f      	movs	r3, #31
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2208      	movs	r2, #8
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e012      	b.n	80046d6 <UART_SetConfig+0xf2>
 80046b0:	231f      	movs	r3, #31
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2210      	movs	r2, #16
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0xf2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a67      	ldr	r2, [pc, #412]	; (800485c <UART_SetConfig+0x278>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d104      	bne.n	80046ce <UART_SetConfig+0xea>
 80046c4:	231f      	movs	r3, #31
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e003      	b.n	80046d6 <UART_SetConfig+0xf2>
 80046ce:	231f      	movs	r3, #31
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2210      	movs	r2, #16
 80046d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	429a      	cmp	r2, r3
 80046e0:	d15c      	bne.n	800479c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80046e2:	231f      	movs	r3, #31
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d015      	beq.n	8004718 <UART_SetConfig+0x134>
 80046ec:	dc18      	bgt.n	8004720 <UART_SetConfig+0x13c>
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d00d      	beq.n	800470e <UART_SetConfig+0x12a>
 80046f2:	dc15      	bgt.n	8004720 <UART_SetConfig+0x13c>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <UART_SetConfig+0x11a>
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d005      	beq.n	8004708 <UART_SetConfig+0x124>
 80046fc:	e010      	b.n	8004720 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046fe:	f7ff fa0b 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8004702:	0003      	movs	r3, r0
 8004704:	61bb      	str	r3, [r7, #24]
        break;
 8004706:	e012      	b.n	800472e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b55      	ldr	r3, [pc, #340]	; (8004860 <UART_SetConfig+0x27c>)
 800470a:	61bb      	str	r3, [r7, #24]
        break;
 800470c:	e00f      	b.n	800472e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7ff f9a3 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8004712:	0003      	movs	r3, r0
 8004714:	61bb      	str	r3, [r7, #24]
        break;
 8004716:	e00a      	b.n	800472e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	61bb      	str	r3, [r7, #24]
        break;
 800471e:	e006      	b.n	800472e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004724:	231e      	movs	r3, #30
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
        break;
 800472c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <UART_SetConfig+0x152>
 8004734:	e07a      	b.n	800482c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	005a      	lsls	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	18d2      	adds	r2, r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	0019      	movs	r1, r3
 8004748:	0010      	movs	r0, r2
 800474a:	f7fb fcf9 	bl	8000140 <__udivsi3>
 800474e:	0003      	movs	r3, r0
 8004750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b0f      	cmp	r3, #15
 8004756:	d91c      	bls.n	8004792 <UART_SetConfig+0x1ae>
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	025b      	lsls	r3, r3, #9
 800475e:	429a      	cmp	r2, r3
 8004760:	d217      	bcs.n	8004792 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	b29a      	uxth	r2, r3
 8004766:	200e      	movs	r0, #14
 8004768:	183b      	adds	r3, r7, r0
 800476a:	210f      	movs	r1, #15
 800476c:	438a      	bics	r2, r1
 800476e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	2207      	movs	r2, #7
 8004778:	4013      	ands	r3, r2
 800477a:	b299      	uxth	r1, r3
 800477c:	183b      	adds	r3, r7, r0
 800477e:	183a      	adds	r2, r7, r0
 8004780:	8812      	ldrh	r2, [r2, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	183a      	adds	r2, r7, r0
 800478c:	8812      	ldrh	r2, [r2, #0]
 800478e:	60da      	str	r2, [r3, #12]
 8004790:	e04c      	b.n	800482c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004792:	231e      	movs	r3, #30
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e047      	b.n	800482c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800479c:	231f      	movs	r3, #31
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d015      	beq.n	80047d2 <UART_SetConfig+0x1ee>
 80047a6:	dc18      	bgt.n	80047da <UART_SetConfig+0x1f6>
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d00d      	beq.n	80047c8 <UART_SetConfig+0x1e4>
 80047ac:	dc15      	bgt.n	80047da <UART_SetConfig+0x1f6>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <UART_SetConfig+0x1d4>
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d005      	beq.n	80047c2 <UART_SetConfig+0x1de>
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7ff f9ae 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 80047bc:	0003      	movs	r3, r0
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e012      	b.n	80047e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <UART_SetConfig+0x27c>)
 80047c4:	61bb      	str	r3, [r7, #24]
        break;
 80047c6:	e00f      	b.n	80047e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c8:	f7ff f946 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80047cc:	0003      	movs	r3, r0
 80047ce:	61bb      	str	r3, [r7, #24]
        break;
 80047d0:	e00a      	b.n	80047e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e006      	b.n	80047e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047de:	231e      	movs	r3, #30
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
        break;
 80047e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01e      	beq.n	800482c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085a      	lsrs	r2, r3, #1
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	18d2      	adds	r2, r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0019      	movs	r1, r3
 80047fe:	0010      	movs	r0, r2
 8004800:	f7fb fc9e 	bl	8000140 <__udivsi3>
 8004804:	0003      	movs	r3, r0
 8004806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b0f      	cmp	r3, #15
 800480c:	d90a      	bls.n	8004824 <UART_SetConfig+0x240>
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	025b      	lsls	r3, r3, #9
 8004814:	429a      	cmp	r2, r3
 8004816:	d205      	bcs.n	8004824 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	e003      	b.n	800482c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004824:	231e      	movs	r3, #30
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	2201      	movs	r2, #1
 800482a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004838:	231e      	movs	r3, #30
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b008      	add	sp, #32
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	ffff69f3 	.word	0xffff69f3
 800484c:	ffffcfff 	.word	0xffffcfff
 8004850:	fffff4ff 	.word	0xfffff4ff
 8004854:	40013800 	.word	0x40013800
 8004858:	40021000 	.word	0x40021000
 800485c:	40004400 	.word	0x40004400
 8004860:	007a1200 	.word	0x007a1200

08004864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d00b      	beq.n	800488e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <UART_AdvFeatureConfig+0x144>)
 800487e:	4013      	ands	r3, r2
 8004880:	0019      	movs	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2202      	movs	r2, #2
 8004894:	4013      	ands	r3, r2
 8004896:	d00b      	beq.n	80048b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a43      	ldr	r2, [pc, #268]	; (80049ac <UART_AdvFeatureConfig+0x148>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	0019      	movs	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	2204      	movs	r2, #4
 80048b6:	4013      	ands	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <UART_AdvFeatureConfig+0x14c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2208      	movs	r2, #8
 80048d8:	4013      	ands	r3, r2
 80048da:	d00b      	beq.n	80048f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a34      	ldr	r2, [pc, #208]	; (80049b4 <UART_AdvFeatureConfig+0x150>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2210      	movs	r2, #16
 80048fa:	4013      	ands	r3, r2
 80048fc:	d00b      	beq.n	8004916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <UART_AdvFeatureConfig+0x154>)
 8004906:	4013      	ands	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2220      	movs	r2, #32
 800491c:	4013      	ands	r3, r2
 800491e:	d00b      	beq.n	8004938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4a25      	ldr	r2, [pc, #148]	; (80049bc <UART_AdvFeatureConfig+0x158>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4013      	ands	r3, r2
 8004940:	d01d      	beq.n	800497e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <UART_AdvFeatureConfig+0x15c>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	035b      	lsls	r3, r3, #13
 8004962:	429a      	cmp	r2, r3
 8004964:	d10b      	bne.n	800497e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <UART_AdvFeatureConfig+0x160>)
 800496e:	4013      	ands	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	4013      	ands	r3, r2
 8004986:	d00b      	beq.n	80049a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <UART_AdvFeatureConfig+0x164>)
 8004990:	4013      	ands	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	fffdffff 	.word	0xfffdffff
 80049ac:	fffeffff 	.word	0xfffeffff
 80049b0:	fffbffff 	.word	0xfffbffff
 80049b4:	ffff7fff 	.word	0xffff7fff
 80049b8:	ffffefff 	.word	0xffffefff
 80049bc:	ffffdfff 	.word	0xffffdfff
 80049c0:	ffefffff 	.word	0xffefffff
 80049c4:	ff9fffff 	.word	0xff9fffff
 80049c8:	fff7ffff 	.word	0xfff7ffff

080049cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b092      	sub	sp, #72	; 0x48
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	; 0x84
 80049d8:	2100      	movs	r1, #0
 80049da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049dc:	f7fe f9e4 	bl	8002da8 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2208      	movs	r2, #8
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d12c      	bne.n	8004a4c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	0391      	lsls	r1, r2, #14
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4a46      	ldr	r2, [pc, #280]	; (8004b14 <UART_CheckIdleState+0x148>)
 80049fc:	9200      	str	r2, [sp, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f000 f88c 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a04:	1e03      	subs	r3, r0, #0
 8004a06:	d021      	beq.n	8004a4c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a08:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a12:	2301      	movs	r3, #1
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	438a      	bics	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2278      	movs	r2, #120	; 0x78
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e05f      	b.n	8004b0c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2204      	movs	r2, #4
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d146      	bne.n	8004ae8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5c:	2280      	movs	r2, #128	; 0x80
 8004a5e:	03d1      	lsls	r1, r2, #15
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <UART_CheckIdleState+0x148>)
 8004a64:	9200      	str	r2, [sp, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f000 f858 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d03b      	beq.n	8004ae8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a76:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4921      	ldr	r1, [pc, #132]	; (8004b18 <UART_CheckIdleState+0x14c>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004aac:	2301      	movs	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2280      	movs	r2, #128	; 0x80
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2278      	movs	r2, #120	; 0x78
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e011      	b.n	8004b0c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	2120      	movs	r1, #32
 8004af4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2278      	movs	r2, #120	; 0x78
 8004b06:	2100      	movs	r1, #0
 8004b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b010      	add	sp, #64	; 0x40
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	01ffffff 	.word	0x01ffffff
 8004b18:	fffffedf 	.word	0xfffffedf

08004b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	1dfb      	adds	r3, r7, #7
 8004b2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	e04b      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	3301      	adds	r3, #1
 8004b32:	d048      	beq.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b34:	f7fe f938 	bl	8002da8 <HAL_GetTick>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e04b      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2204      	movs	r2, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	d035      	beq.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2208      	movs	r2, #8
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d111      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 f83c 	bl	8004bf0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2284      	movs	r2, #132	; 0x84
 8004b7c:	2108      	movs	r1, #8
 8004b7e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2278      	movs	r2, #120	; 0x78
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e02c      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	401a      	ands	r2, r3
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d112      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f81f 	bl	8004bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2284      	movs	r2, #132	; 0x84
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2278      	movs	r2, #120	; 0x78
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e00f      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	425a      	negs	r2, r3
 8004bd6:	4153      	adcs	r3, r2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	001a      	movs	r2, r3
 8004bdc:	1dfb      	adds	r3, r7, #7
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d0a4      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	0018      	movs	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b004      	add	sp, #16
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	; 0x38
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfc:	617b      	str	r3, [r7, #20]
  return(result);
 8004bfe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	2301      	movs	r3, #1
 8004c04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4926      	ldr	r1, [pc, #152]	; (8004cb4 <UART_EndRxTransfer+0xc4>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2e:	623b      	str	r3, [r7, #32]
  return(result);
 8004c30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
 8004c34:	2301      	movs	r3, #1
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f383 8810 	msr	PRIMASK, r3
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f383 8810 	msr	PRIMASK, r3
}
 8004c5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d118      	bne.n	8004c96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c64:	f3ef 8310 	mrs	r3, PRIMASK
 8004c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	2301      	movs	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2110      	movs	r1, #16
 8004c86:	438a      	bics	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f383 8810 	msr	PRIMASK, r3
}
 8004c94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2280      	movs	r2, #128	; 0x80
 8004c9a:	2120      	movs	r1, #32
 8004c9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b00e      	add	sp, #56	; 0x38
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	fffffedf 	.word	0xfffffedf

08004cb8 <__errno>:
 8004cb8:	4b01      	ldr	r3, [pc, #4]	; (8004cc0 <__errno+0x8>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	4770      	bx	lr
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	2000000c 	.word	0x2000000c

08004cc4 <__libc_init_array>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	4d0c      	ldr	r5, [pc, #48]	; (8004cfc <__libc_init_array+0x38>)
 8004cca:	4c0d      	ldr	r4, [pc, #52]	; (8004d00 <__libc_init_array+0x3c>)
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	42a6      	cmp	r6, r4
 8004cd2:	d109      	bne.n	8004ce8 <__libc_init_array+0x24>
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	f002 ffbb 	bl	8007c50 <_init>
 8004cda:	4d0a      	ldr	r5, [pc, #40]	; (8004d04 <__libc_init_array+0x40>)
 8004cdc:	4c0a      	ldr	r4, [pc, #40]	; (8004d08 <__libc_init_array+0x44>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	42a6      	cmp	r6, r4
 8004ce4:	d105      	bne.n	8004cf2 <__libc_init_array+0x2e>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	00b3      	lsls	r3, r6, #2
 8004cea:	58eb      	ldr	r3, [r5, r3]
 8004cec:	4798      	blx	r3
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7ee      	b.n	8004cd0 <__libc_init_array+0xc>
 8004cf2:	00b3      	lsls	r3, r6, #2
 8004cf4:	58eb      	ldr	r3, [r5, r3]
 8004cf6:	4798      	blx	r3
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e7f2      	b.n	8004ce2 <__libc_init_array+0x1e>
 8004cfc:	080081ec 	.word	0x080081ec
 8004d00:	080081ec 	.word	0x080081ec
 8004d04:	080081ec 	.word	0x080081ec
 8004d08:	080081f0 	.word	0x080081f0

08004d0c <memset>:
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	1882      	adds	r2, r0, r2
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d100      	bne.n	8004d16 <memset+0xa>
 8004d14:	4770      	bx	lr
 8004d16:	7019      	strb	r1, [r3, #0]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	e7f9      	b.n	8004d10 <memset+0x4>

08004d1c <__cvt>:
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	001e      	movs	r6, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	0014      	movs	r4, r2
 8004d24:	b08b      	sub	sp, #44	; 0x2c
 8004d26:	429e      	cmp	r6, r3
 8004d28:	da04      	bge.n	8004d34 <__cvt+0x18>
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	0609      	lsls	r1, r1, #24
 8004d2e:	1873      	adds	r3, r6, r1
 8004d30:	001e      	movs	r6, r3
 8004d32:	232d      	movs	r3, #45	; 0x2d
 8004d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d36:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d38:	7013      	strb	r3, [r2, #0]
 8004d3a:	2320      	movs	r3, #32
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	439f      	bics	r7, r3
 8004d40:	2f46      	cmp	r7, #70	; 0x46
 8004d42:	d007      	beq.n	8004d54 <__cvt+0x38>
 8004d44:	003b      	movs	r3, r7
 8004d46:	3b45      	subs	r3, #69	; 0x45
 8004d48:	4259      	negs	r1, r3
 8004d4a:	414b      	adcs	r3, r1
 8004d4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d4e:	3a01      	subs	r2, #1
 8004d50:	18cb      	adds	r3, r1, r3
 8004d52:	9310      	str	r3, [sp, #64]	; 0x40
 8004d54:	ab09      	add	r3, sp, #36	; 0x24
 8004d56:	9304      	str	r3, [sp, #16]
 8004d58:	ab08      	add	r3, sp, #32
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d5e:	9200      	str	r2, [sp, #0]
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d64:	0022      	movs	r2, r4
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	0033      	movs	r3, r6
 8004d6a:	f000 fcf1 	bl	8005750 <_dtoa_r>
 8004d6e:	0005      	movs	r5, r0
 8004d70:	2f47      	cmp	r7, #71	; 0x47
 8004d72:	d102      	bne.n	8004d7a <__cvt+0x5e>
 8004d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d76:	07db      	lsls	r3, r3, #31
 8004d78:	d528      	bpl.n	8004dcc <__cvt+0xb0>
 8004d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d7c:	18eb      	adds	r3, r5, r3
 8004d7e:	9307      	str	r3, [sp, #28]
 8004d80:	2f46      	cmp	r7, #70	; 0x46
 8004d82:	d114      	bne.n	8004dae <__cvt+0x92>
 8004d84:	782b      	ldrb	r3, [r5, #0]
 8004d86:	2b30      	cmp	r3, #48	; 0x30
 8004d88:	d10c      	bne.n	8004da4 <__cvt+0x88>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	0020      	movs	r0, r4
 8004d90:	0031      	movs	r1, r6
 8004d92:	f7fb fb5b 	bl	800044c <__aeabi_dcmpeq>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d104      	bne.n	8004da4 <__cvt+0x88>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004da6:	9a07      	ldr	r2, [sp, #28]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	18d3      	adds	r3, r2, r3
 8004dac:	9307      	str	r3, [sp, #28]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2300      	movs	r3, #0
 8004db2:	0020      	movs	r0, r4
 8004db4:	0031      	movs	r1, r6
 8004db6:	f7fb fb49 	bl	800044c <__aeabi_dcmpeq>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d001      	beq.n	8004dc2 <__cvt+0xa6>
 8004dbe:	9b07      	ldr	r3, [sp, #28]
 8004dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc2:	2230      	movs	r2, #48	; 0x30
 8004dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc6:	9907      	ldr	r1, [sp, #28]
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	d306      	bcc.n	8004dda <__cvt+0xbe>
 8004dcc:	0028      	movs	r0, r5
 8004dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004dd2:	1b5b      	subs	r3, r3, r5
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	b00b      	add	sp, #44	; 0x2c
 8004dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dda:	1c59      	adds	r1, r3, #1
 8004ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e7f0      	b.n	8004dc4 <__cvt+0xa8>

08004de2 <__exponent>:
 8004de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de4:	1c83      	adds	r3, r0, #2
 8004de6:	b087      	sub	sp, #28
 8004de8:	9303      	str	r3, [sp, #12]
 8004dea:	0005      	movs	r5, r0
 8004dec:	000c      	movs	r4, r1
 8004dee:	232b      	movs	r3, #43	; 0x2b
 8004df0:	7002      	strb	r2, [r0, #0]
 8004df2:	2900      	cmp	r1, #0
 8004df4:	da01      	bge.n	8004dfa <__exponent+0x18>
 8004df6:	424c      	negs	r4, r1
 8004df8:	3302      	adds	r3, #2
 8004dfa:	706b      	strb	r3, [r5, #1]
 8004dfc:	2c09      	cmp	r4, #9
 8004dfe:	dd31      	ble.n	8004e64 <__exponent+0x82>
 8004e00:	270a      	movs	r7, #10
 8004e02:	ab04      	add	r3, sp, #16
 8004e04:	1dde      	adds	r6, r3, #7
 8004e06:	0020      	movs	r0, r4
 8004e08:	0039      	movs	r1, r7
 8004e0a:	9601      	str	r6, [sp, #4]
 8004e0c:	f7fb fb08 	bl	8000420 <__aeabi_idivmod>
 8004e10:	3e01      	subs	r6, #1
 8004e12:	3130      	adds	r1, #48	; 0x30
 8004e14:	0020      	movs	r0, r4
 8004e16:	7031      	strb	r1, [r6, #0]
 8004e18:	0039      	movs	r1, r7
 8004e1a:	9402      	str	r4, [sp, #8]
 8004e1c:	f7fb fa1a 	bl	8000254 <__divsi3>
 8004e20:	9b02      	ldr	r3, [sp, #8]
 8004e22:	0004      	movs	r4, r0
 8004e24:	2b63      	cmp	r3, #99	; 0x63
 8004e26:	dcee      	bgt.n	8004e06 <__exponent+0x24>
 8004e28:	9b01      	ldr	r3, [sp, #4]
 8004e2a:	3430      	adds	r4, #48	; 0x30
 8004e2c:	1e9a      	subs	r2, r3, #2
 8004e2e:	0013      	movs	r3, r2
 8004e30:	9903      	ldr	r1, [sp, #12]
 8004e32:	7014      	strb	r4, [r2, #0]
 8004e34:	a804      	add	r0, sp, #16
 8004e36:	3007      	adds	r0, #7
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	d80e      	bhi.n	8004e5a <__exponent+0x78>
 8004e3c:	ab04      	add	r3, sp, #16
 8004e3e:	3307      	adds	r3, #7
 8004e40:	2000      	movs	r0, #0
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d804      	bhi.n	8004e50 <__exponent+0x6e>
 8004e46:	ab04      	add	r3, sp, #16
 8004e48:	3009      	adds	r0, #9
 8004e4a:	18c0      	adds	r0, r0, r3
 8004e4c:	9b01      	ldr	r3, [sp, #4]
 8004e4e:	1ac0      	subs	r0, r0, r3
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	1818      	adds	r0, r3, r0
 8004e54:	1b40      	subs	r0, r0, r5
 8004e56:	b007      	add	sp, #28
 8004e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5a:	7818      	ldrb	r0, [r3, #0]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	7008      	strb	r0, [r1, #0]
 8004e60:	3101      	adds	r1, #1
 8004e62:	e7e7      	b.n	8004e34 <__exponent+0x52>
 8004e64:	2330      	movs	r3, #48	; 0x30
 8004e66:	18e4      	adds	r4, r4, r3
 8004e68:	70ab      	strb	r3, [r5, #2]
 8004e6a:	1d28      	adds	r0, r5, #4
 8004e6c:	70ec      	strb	r4, [r5, #3]
 8004e6e:	e7f1      	b.n	8004e54 <__exponent+0x72>

08004e70 <_printf_float>:
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b095      	sub	sp, #84	; 0x54
 8004e74:	000c      	movs	r4, r1
 8004e76:	9209      	str	r2, [sp, #36]	; 0x24
 8004e78:	001e      	movs	r6, r3
 8004e7a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004e7c:	0007      	movs	r7, r0
 8004e7e:	f001 fa81 	bl	8006384 <_localeconv_r>
 8004e82:	6803      	ldr	r3, [r0, #0]
 8004e84:	0018      	movs	r0, r3
 8004e86:	930c      	str	r3, [sp, #48]	; 0x30
 8004e88:	f7fb f93e 	bl	8000108 <strlen>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9312      	str	r3, [sp, #72]	; 0x48
 8004e90:	7e23      	ldrb	r3, [r4, #24]
 8004e92:	2207      	movs	r2, #7
 8004e94:	930a      	str	r3, [sp, #40]	; 0x28
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	900e      	str	r0, [sp, #56]	; 0x38
 8004e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8004e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e9e:	682b      	ldr	r3, [r5, #0]
 8004ea0:	05c9      	lsls	r1, r1, #23
 8004ea2:	d547      	bpl.n	8004f34 <_printf_float+0xc4>
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	4393      	bics	r3, r2
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	3208      	adds	r2, #8
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	64a2      	str	r2, [r4, #72]	; 0x48
 8004eb4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004eba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ebe:	006b      	lsls	r3, r5, #1
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004ec6:	4ba7      	ldr	r3, [pc, #668]	; (8005164 <_printf_float+0x2f4>)
 8004ec8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004eca:	4252      	negs	r2, r2
 8004ecc:	f7fd fab4 	bl	8002438 <__aeabi_dcmpun>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d131      	bne.n	8004f38 <_printf_float+0xc8>
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	4ba3      	ldr	r3, [pc, #652]	; (8005164 <_printf_float+0x2f4>)
 8004ed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004eda:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004edc:	4252      	negs	r2, r2
 8004ede:	f7fb fac5 	bl	800046c <__aeabi_dcmple>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d128      	bne.n	8004f38 <_printf_float+0xc8>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	0029      	movs	r1, r5
 8004eec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004eee:	f7fb fab3 	bl	8000458 <__aeabi_dcmplt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d003      	beq.n	8004efe <_printf_float+0x8e>
 8004ef6:	0023      	movs	r3, r4
 8004ef8:	222d      	movs	r2, #45	; 0x2d
 8004efa:	3343      	adds	r3, #67	; 0x43
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f00:	4d99      	ldr	r5, [pc, #612]	; (8005168 <_printf_float+0x2f8>)
 8004f02:	2b47      	cmp	r3, #71	; 0x47
 8004f04:	d900      	bls.n	8004f08 <_printf_float+0x98>
 8004f06:	4d99      	ldr	r5, [pc, #612]	; (800516c <_printf_float+0x2fc>)
 8004f08:	2303      	movs	r3, #3
 8004f0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	439a      	bics	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6022      	str	r2, [r4, #0]
 8004f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1a:	0021      	movs	r1, r4
 8004f1c:	0038      	movs	r0, r7
 8004f1e:	9600      	str	r6, [sp, #0]
 8004f20:	aa13      	add	r2, sp, #76	; 0x4c
 8004f22:	f000 f9e7 	bl	80052f4 <_printf_common>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d000      	beq.n	8004f2c <_printf_float+0xbc>
 8004f2a:	e0a2      	b.n	8005072 <_printf_float+0x202>
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	4240      	negs	r0, r0
 8004f30:	b015      	add	sp, #84	; 0x54
 8004f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f34:	3307      	adds	r3, #7
 8004f36:	e7b6      	b.n	8004ea6 <_printf_float+0x36>
 8004f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f3a:	002b      	movs	r3, r5
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	0029      	movs	r1, r5
 8004f40:	f7fd fa7a 	bl	8002438 <__aeabi_dcmpun>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d00b      	beq.n	8004f60 <_printf_float+0xf0>
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	da03      	bge.n	8004f54 <_printf_float+0xe4>
 8004f4c:	0023      	movs	r3, r4
 8004f4e:	222d      	movs	r2, #45	; 0x2d
 8004f50:	3343      	adds	r3, #67	; 0x43
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f56:	4d86      	ldr	r5, [pc, #536]	; (8005170 <_printf_float+0x300>)
 8004f58:	2b47      	cmp	r3, #71	; 0x47
 8004f5a:	d9d5      	bls.n	8004f08 <_printf_float+0x98>
 8004f5c:	4d85      	ldr	r5, [pc, #532]	; (8005174 <_printf_float+0x304>)
 8004f5e:	e7d3      	b.n	8004f08 <_printf_float+0x98>
 8004f60:	2220      	movs	r2, #32
 8004f62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	4391      	bics	r1, r2
 8004f68:	910f      	str	r1, [sp, #60]	; 0x3c
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	d149      	bne.n	8005002 <_printf_float+0x192>
 8004f6e:	3307      	adds	r3, #7
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	9206      	str	r2, [sp, #24]
 8004f7e:	aa12      	add	r2, sp, #72	; 0x48
 8004f80:	9205      	str	r2, [sp, #20]
 8004f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f84:	a908      	add	r1, sp, #32
 8004f86:	9204      	str	r2, [sp, #16]
 8004f88:	aa11      	add	r2, sp, #68	; 0x44
 8004f8a:	9203      	str	r2, [sp, #12]
 8004f8c:	2223      	movs	r2, #35	; 0x23
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	6863      	ldr	r3, [r4, #4]
 8004f94:	1852      	adds	r2, r2, r1
 8004f96:	9202      	str	r2, [sp, #8]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	0038      	movs	r0, r7
 8004f9c:	002b      	movs	r3, r5
 8004f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fa0:	f7ff febc 	bl	8004d1c <__cvt>
 8004fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fa6:	0005      	movs	r5, r0
 8004fa8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004faa:	2b47      	cmp	r3, #71	; 0x47
 8004fac:	d108      	bne.n	8004fc0 <_printf_float+0x150>
 8004fae:	1ccb      	adds	r3, r1, #3
 8004fb0:	db02      	blt.n	8004fb8 <_printf_float+0x148>
 8004fb2:	6863      	ldr	r3, [r4, #4]
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	dd48      	ble.n	800504a <_printf_float+0x1da>
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fba:	3b02      	subs	r3, #2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc2:	2b65      	cmp	r3, #101	; 0x65
 8004fc4:	d824      	bhi.n	8005010 <_printf_float+0x1a0>
 8004fc6:	0020      	movs	r0, r4
 8004fc8:	001a      	movs	r2, r3
 8004fca:	3901      	subs	r1, #1
 8004fcc:	3050      	adds	r0, #80	; 0x50
 8004fce:	9111      	str	r1, [sp, #68]	; 0x44
 8004fd0:	f7ff ff07 	bl	8004de2 <__exponent>
 8004fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fd6:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fd8:	1813      	adds	r3, r2, r0
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	2a01      	cmp	r2, #1
 8004fde:	dc02      	bgt.n	8004fe6 <_printf_float+0x176>
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	07d2      	lsls	r2, r2, #31
 8004fe4:	d501      	bpl.n	8004fea <_printf_float+0x17a>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	2323      	movs	r3, #35	; 0x23
 8004fec:	aa08      	add	r2, sp, #32
 8004fee:	189b      	adds	r3, r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d100      	bne.n	8004ff8 <_printf_float+0x188>
 8004ff6:	e78f      	b.n	8004f18 <_printf_float+0xa8>
 8004ff8:	0023      	movs	r3, r4
 8004ffa:	222d      	movs	r2, #45	; 0x2d
 8004ffc:	3343      	adds	r3, #67	; 0x43
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e78a      	b.n	8004f18 <_printf_float+0xa8>
 8005002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005004:	2a47      	cmp	r2, #71	; 0x47
 8005006:	d1b4      	bne.n	8004f72 <_printf_float+0x102>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1b2      	bne.n	8004f72 <_printf_float+0x102>
 800500c:	3301      	adds	r3, #1
 800500e:	e7af      	b.n	8004f70 <_printf_float+0x100>
 8005010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005012:	2b66      	cmp	r3, #102	; 0x66
 8005014:	d11b      	bne.n	800504e <_printf_float+0x1de>
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	2900      	cmp	r1, #0
 800501a:	dd0d      	ble.n	8005038 <_printf_float+0x1c8>
 800501c:	6121      	str	r1, [r4, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <_printf_float+0x1b8>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	07d2      	lsls	r2, r2, #31
 8005026:	d502      	bpl.n	800502e <_printf_float+0x1be>
 8005028:	3301      	adds	r3, #1
 800502a:	1859      	adds	r1, r3, r1
 800502c:	6121      	str	r1, [r4, #16]
 800502e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005030:	65a3      	str	r3, [r4, #88]	; 0x58
 8005032:	2300      	movs	r3, #0
 8005034:	930b      	str	r3, [sp, #44]	; 0x2c
 8005036:	e7d8      	b.n	8004fea <_printf_float+0x17a>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <_printf_float+0x1d4>
 800503c:	2201      	movs	r2, #1
 800503e:	6821      	ldr	r1, [r4, #0]
 8005040:	4211      	tst	r1, r2
 8005042:	d000      	beq.n	8005046 <_printf_float+0x1d6>
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	6122      	str	r2, [r4, #16]
 8005048:	e7f1      	b.n	800502e <_printf_float+0x1be>
 800504a:	2367      	movs	r3, #103	; 0x67
 800504c:	930a      	str	r3, [sp, #40]	; 0x28
 800504e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005050:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005052:	4293      	cmp	r3, r2
 8005054:	db06      	blt.n	8005064 <_printf_float+0x1f4>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	07d2      	lsls	r2, r2, #31
 800505c:	d5e7      	bpl.n	800502e <_printf_float+0x1be>
 800505e:	3301      	adds	r3, #1
 8005060:	6123      	str	r3, [r4, #16]
 8005062:	e7e4      	b.n	800502e <_printf_float+0x1be>
 8005064:	2101      	movs	r1, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	dc01      	bgt.n	800506e <_printf_float+0x1fe>
 800506a:	1849      	adds	r1, r1, r1
 800506c:	1ac9      	subs	r1, r1, r3
 800506e:	1852      	adds	r2, r2, r1
 8005070:	e7e9      	b.n	8005046 <_printf_float+0x1d6>
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	0553      	lsls	r3, r2, #21
 8005076:	d407      	bmi.n	8005088 <_printf_float+0x218>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	002a      	movs	r2, r5
 800507c:	0038      	movs	r0, r7
 800507e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005080:	47b0      	blx	r6
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d128      	bne.n	80050d8 <_printf_float+0x268>
 8005086:	e751      	b.n	8004f2c <_printf_float+0xbc>
 8005088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508a:	2b65      	cmp	r3, #101	; 0x65
 800508c:	d800      	bhi.n	8005090 <_printf_float+0x220>
 800508e:	e0e1      	b.n	8005254 <_printf_float+0x3e4>
 8005090:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005092:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	f7fb f9d8 	bl	800044c <__aeabi_dcmpeq>
 800509c:	2800      	cmp	r0, #0
 800509e:	d031      	beq.n	8005104 <_printf_float+0x294>
 80050a0:	2301      	movs	r3, #1
 80050a2:	0038      	movs	r0, r7
 80050a4:	4a34      	ldr	r2, [pc, #208]	; (8005178 <_printf_float+0x308>)
 80050a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050a8:	47b0      	blx	r6
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d100      	bne.n	80050b0 <_printf_float+0x240>
 80050ae:	e73d      	b.n	8004f2c <_printf_float+0xbc>
 80050b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050b4:	4293      	cmp	r3, r2
 80050b6:	db02      	blt.n	80050be <_printf_float+0x24e>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	07db      	lsls	r3, r3, #31
 80050bc:	d50c      	bpl.n	80050d8 <_printf_float+0x268>
 80050be:	0038      	movs	r0, r7
 80050c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050c6:	47b0      	blx	r6
 80050c8:	2500      	movs	r5, #0
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d100      	bne.n	80050d0 <_printf_float+0x260>
 80050ce:	e72d      	b.n	8004f2c <_printf_float+0xbc>
 80050d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050d2:	3b01      	subs	r3, #1
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dc0a      	bgt.n	80050ee <_printf_float+0x27e>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	079b      	lsls	r3, r3, #30
 80050dc:	d500      	bpl.n	80050e0 <_printf_float+0x270>
 80050de:	e106      	b.n	80052ee <_printf_float+0x47e>
 80050e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	4298      	cmp	r0, r3
 80050e6:	db00      	blt.n	80050ea <_printf_float+0x27a>
 80050e8:	e722      	b.n	8004f30 <_printf_float+0xc0>
 80050ea:	0018      	movs	r0, r3
 80050ec:	e720      	b.n	8004f30 <_printf_float+0xc0>
 80050ee:	0022      	movs	r2, r4
 80050f0:	2301      	movs	r3, #1
 80050f2:	0038      	movs	r0, r7
 80050f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f6:	321a      	adds	r2, #26
 80050f8:	47b0      	blx	r6
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d100      	bne.n	8005100 <_printf_float+0x290>
 80050fe:	e715      	b.n	8004f2c <_printf_float+0xbc>
 8005100:	3501      	adds	r5, #1
 8005102:	e7e5      	b.n	80050d0 <_printf_float+0x260>
 8005104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005106:	2b00      	cmp	r3, #0
 8005108:	dc38      	bgt.n	800517c <_printf_float+0x30c>
 800510a:	2301      	movs	r3, #1
 800510c:	0038      	movs	r0, r7
 800510e:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <_printf_float+0x308>)
 8005110:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005112:	47b0      	blx	r6
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d100      	bne.n	800511a <_printf_float+0x2aa>
 8005118:	e708      	b.n	8004f2c <_printf_float+0xbc>
 800511a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800511c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800511e:	4313      	orrs	r3, r2
 8005120:	d102      	bne.n	8005128 <_printf_float+0x2b8>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	07db      	lsls	r3, r3, #31
 8005126:	d5d7      	bpl.n	80050d8 <_printf_float+0x268>
 8005128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800512a:	0038      	movs	r0, r7
 800512c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800512e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005130:	47b0      	blx	r6
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d100      	bne.n	8005138 <_printf_float+0x2c8>
 8005136:	e6f9      	b.n	8004f2c <_printf_float+0xbc>
 8005138:	2300      	movs	r3, #0
 800513a:	930a      	str	r3, [sp, #40]	; 0x28
 800513c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800513e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005140:	425b      	negs	r3, r3
 8005142:	4293      	cmp	r3, r2
 8005144:	dc01      	bgt.n	800514a <_printf_float+0x2da>
 8005146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005148:	e797      	b.n	800507a <_printf_float+0x20a>
 800514a:	0022      	movs	r2, r4
 800514c:	2301      	movs	r3, #1
 800514e:	0038      	movs	r0, r7
 8005150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005152:	321a      	adds	r2, #26
 8005154:	47b0      	blx	r6
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	d100      	bne.n	800515c <_printf_float+0x2ec>
 800515a:	e6e7      	b.n	8004f2c <_printf_float+0xbc>
 800515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515e:	3301      	adds	r3, #1
 8005160:	e7eb      	b.n	800513a <_printf_float+0x2ca>
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	7fefffff 	.word	0x7fefffff
 8005168:	08007e18 	.word	0x08007e18
 800516c:	08007e1c 	.word	0x08007e1c
 8005170:	08007e20 	.word	0x08007e20
 8005174:	08007e24 	.word	0x08007e24
 8005178:	08007e28 	.word	0x08007e28
 800517c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800517e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005180:	920a      	str	r2, [sp, #40]	; 0x28
 8005182:	429a      	cmp	r2, r3
 8005184:	dd00      	ble.n	8005188 <_printf_float+0x318>
 8005186:	930a      	str	r3, [sp, #40]	; 0x28
 8005188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	dc3c      	bgt.n	8005208 <_printf_float+0x398>
 800518e:	2300      	movs	r3, #0
 8005190:	930d      	str	r3, [sp, #52]	; 0x34
 8005192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005194:	43db      	mvns	r3, r3
 8005196:	17db      	asrs	r3, r3, #31
 8005198:	930f      	str	r3, [sp, #60]	; 0x3c
 800519a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800519c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800519e:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	4013      	ands	r3, r2
 80051a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051aa:	4293      	cmp	r3, r2
 80051ac:	dc34      	bgt.n	8005218 <_printf_float+0x3a8>
 80051ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051b2:	4293      	cmp	r3, r2
 80051b4:	db3d      	blt.n	8005232 <_printf_float+0x3c2>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	07db      	lsls	r3, r3, #31
 80051ba:	d43a      	bmi.n	8005232 <_printf_float+0x3c2>
 80051bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	1a52      	subs	r2, r2, r1
 80051c6:	920a      	str	r2, [sp, #40]	; 0x28
 80051c8:	429a      	cmp	r2, r3
 80051ca:	dd00      	ble.n	80051ce <_printf_float+0x35e>
 80051cc:	930a      	str	r3, [sp, #40]	; 0x28
 80051ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	dc36      	bgt.n	8005242 <_printf_float+0x3d2>
 80051d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d6:	2500      	movs	r5, #0
 80051d8:	43db      	mvns	r3, r3
 80051da:	17db      	asrs	r3, r3, #31
 80051dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80051de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051e8:	400a      	ands	r2, r1
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	42ab      	cmp	r3, r5
 80051ee:	dc00      	bgt.n	80051f2 <_printf_float+0x382>
 80051f0:	e772      	b.n	80050d8 <_printf_float+0x268>
 80051f2:	0022      	movs	r2, r4
 80051f4:	2301      	movs	r3, #1
 80051f6:	0038      	movs	r0, r7
 80051f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051fa:	321a      	adds	r2, #26
 80051fc:	47b0      	blx	r6
 80051fe:	1c43      	adds	r3, r0, #1
 8005200:	d100      	bne.n	8005204 <_printf_float+0x394>
 8005202:	e693      	b.n	8004f2c <_printf_float+0xbc>
 8005204:	3501      	adds	r5, #1
 8005206:	e7ea      	b.n	80051de <_printf_float+0x36e>
 8005208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520a:	002a      	movs	r2, r5
 800520c:	0038      	movs	r0, r7
 800520e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005210:	47b0      	blx	r6
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d1bb      	bne.n	800518e <_printf_float+0x31e>
 8005216:	e689      	b.n	8004f2c <_printf_float+0xbc>
 8005218:	0022      	movs	r2, r4
 800521a:	2301      	movs	r3, #1
 800521c:	0038      	movs	r0, r7
 800521e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005220:	321a      	adds	r2, #26
 8005222:	47b0      	blx	r6
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d100      	bne.n	800522a <_printf_float+0x3ba>
 8005228:	e680      	b.n	8004f2c <_printf_float+0xbc>
 800522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800522c:	3301      	adds	r3, #1
 800522e:	930d      	str	r3, [sp, #52]	; 0x34
 8005230:	e7b3      	b.n	800519a <_printf_float+0x32a>
 8005232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005234:	0038      	movs	r0, r7
 8005236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800523a:	47b0      	blx	r6
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d1bd      	bne.n	80051bc <_printf_float+0x34c>
 8005240:	e674      	b.n	8004f2c <_printf_float+0xbc>
 8005242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005244:	0038      	movs	r0, r7
 8005246:	18ea      	adds	r2, r5, r3
 8005248:	9909      	ldr	r1, [sp, #36]	; 0x24
 800524a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524c:	47b0      	blx	r6
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	d1c0      	bne.n	80051d4 <_printf_float+0x364>
 8005252:	e66b      	b.n	8004f2c <_printf_float+0xbc>
 8005254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005256:	2b01      	cmp	r3, #1
 8005258:	dc02      	bgt.n	8005260 <_printf_float+0x3f0>
 800525a:	2301      	movs	r3, #1
 800525c:	421a      	tst	r2, r3
 800525e:	d034      	beq.n	80052ca <_printf_float+0x45a>
 8005260:	2301      	movs	r3, #1
 8005262:	002a      	movs	r2, r5
 8005264:	0038      	movs	r0, r7
 8005266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005268:	47b0      	blx	r6
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	d100      	bne.n	8005270 <_printf_float+0x400>
 800526e:	e65d      	b.n	8004f2c <_printf_float+0xbc>
 8005270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005272:	0038      	movs	r0, r7
 8005274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005278:	47b0      	blx	r6
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d100      	bne.n	8005280 <_printf_float+0x410>
 800527e:	e655      	b.n	8004f2c <_printf_float+0xbc>
 8005280:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005282:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	f7fb f8e0 	bl	800044c <__aeabi_dcmpeq>
 800528c:	2800      	cmp	r0, #0
 800528e:	d11a      	bne.n	80052c6 <_printf_float+0x456>
 8005290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005292:	1c6a      	adds	r2, r5, #1
 8005294:	3b01      	subs	r3, #1
 8005296:	0038      	movs	r0, r7
 8005298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800529a:	47b0      	blx	r6
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d10e      	bne.n	80052be <_printf_float+0x44e>
 80052a0:	e644      	b.n	8004f2c <_printf_float+0xbc>
 80052a2:	0022      	movs	r2, r4
 80052a4:	2301      	movs	r3, #1
 80052a6:	0038      	movs	r0, r7
 80052a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052aa:	321a      	adds	r2, #26
 80052ac:	47b0      	blx	r6
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	d100      	bne.n	80052b4 <_printf_float+0x444>
 80052b2:	e63b      	b.n	8004f2c <_printf_float+0xbc>
 80052b4:	3501      	adds	r5, #1
 80052b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052b8:	3b01      	subs	r3, #1
 80052ba:	42ab      	cmp	r3, r5
 80052bc:	dcf1      	bgt.n	80052a2 <_printf_float+0x432>
 80052be:	0022      	movs	r2, r4
 80052c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c2:	3250      	adds	r2, #80	; 0x50
 80052c4:	e6da      	b.n	800507c <_printf_float+0x20c>
 80052c6:	2500      	movs	r5, #0
 80052c8:	e7f5      	b.n	80052b6 <_printf_float+0x446>
 80052ca:	002a      	movs	r2, r5
 80052cc:	e7e3      	b.n	8005296 <_printf_float+0x426>
 80052ce:	0022      	movs	r2, r4
 80052d0:	2301      	movs	r3, #1
 80052d2:	0038      	movs	r0, r7
 80052d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052d6:	3219      	adds	r2, #25
 80052d8:	47b0      	blx	r6
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	d100      	bne.n	80052e0 <_printf_float+0x470>
 80052de:	e625      	b.n	8004f2c <_printf_float+0xbc>
 80052e0:	3501      	adds	r5, #1
 80052e2:	68e3      	ldr	r3, [r4, #12]
 80052e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	dcf0      	bgt.n	80052ce <_printf_float+0x45e>
 80052ec:	e6f8      	b.n	80050e0 <_printf_float+0x270>
 80052ee:	2500      	movs	r5, #0
 80052f0:	e7f7      	b.n	80052e2 <_printf_float+0x472>
 80052f2:	46c0      	nop			; (mov r8, r8)

080052f4 <_printf_common>:
 80052f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052f6:	0015      	movs	r5, r2
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	688a      	ldr	r2, [r1, #8]
 80052fc:	690b      	ldr	r3, [r1, #16]
 80052fe:	000c      	movs	r4, r1
 8005300:	9000      	str	r0, [sp, #0]
 8005302:	4293      	cmp	r3, r2
 8005304:	da00      	bge.n	8005308 <_printf_common+0x14>
 8005306:	0013      	movs	r3, r2
 8005308:	0022      	movs	r2, r4
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	3243      	adds	r2, #67	; 0x43
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	2a00      	cmp	r2, #0
 8005312:	d001      	beq.n	8005318 <_printf_common+0x24>
 8005314:	3301      	adds	r3, #1
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	069b      	lsls	r3, r3, #26
 800531c:	d502      	bpl.n	8005324 <_printf_common+0x30>
 800531e:	682b      	ldr	r3, [r5, #0]
 8005320:	3302      	adds	r3, #2
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	2306      	movs	r3, #6
 8005328:	0017      	movs	r7, r2
 800532a:	401f      	ands	r7, r3
 800532c:	421a      	tst	r2, r3
 800532e:	d027      	beq.n	8005380 <_printf_common+0x8c>
 8005330:	0023      	movs	r3, r4
 8005332:	3343      	adds	r3, #67	; 0x43
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	4193      	sbcs	r3, r2
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	0692      	lsls	r2, r2, #26
 800533e:	d430      	bmi.n	80053a2 <_printf_common+0xae>
 8005340:	0022      	movs	r2, r4
 8005342:	9901      	ldr	r1, [sp, #4]
 8005344:	9800      	ldr	r0, [sp, #0]
 8005346:	9e08      	ldr	r6, [sp, #32]
 8005348:	3243      	adds	r2, #67	; 0x43
 800534a:	47b0      	blx	r6
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d025      	beq.n	800539c <_printf_common+0xa8>
 8005350:	2306      	movs	r3, #6
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	682a      	ldr	r2, [r5, #0]
 8005356:	68e1      	ldr	r1, [r4, #12]
 8005358:	2500      	movs	r5, #0
 800535a:	4003      	ands	r3, r0
 800535c:	2b04      	cmp	r3, #4
 800535e:	d103      	bne.n	8005368 <_printf_common+0x74>
 8005360:	1a8d      	subs	r5, r1, r2
 8005362:	43eb      	mvns	r3, r5
 8005364:	17db      	asrs	r3, r3, #31
 8005366:	401d      	ands	r5, r3
 8005368:	68a3      	ldr	r3, [r4, #8]
 800536a:	6922      	ldr	r2, [r4, #16]
 800536c:	4293      	cmp	r3, r2
 800536e:	dd01      	ble.n	8005374 <_printf_common+0x80>
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	18ed      	adds	r5, r5, r3
 8005374:	2700      	movs	r7, #0
 8005376:	42bd      	cmp	r5, r7
 8005378:	d120      	bne.n	80053bc <_printf_common+0xc8>
 800537a:	2000      	movs	r0, #0
 800537c:	e010      	b.n	80053a0 <_printf_common+0xac>
 800537e:	3701      	adds	r7, #1
 8005380:	68e3      	ldr	r3, [r4, #12]
 8005382:	682a      	ldr	r2, [r5, #0]
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	42bb      	cmp	r3, r7
 8005388:	ddd2      	ble.n	8005330 <_printf_common+0x3c>
 800538a:	0022      	movs	r2, r4
 800538c:	2301      	movs	r3, #1
 800538e:	9901      	ldr	r1, [sp, #4]
 8005390:	9800      	ldr	r0, [sp, #0]
 8005392:	9e08      	ldr	r6, [sp, #32]
 8005394:	3219      	adds	r2, #25
 8005396:	47b0      	blx	r6
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d1f0      	bne.n	800537e <_printf_common+0x8a>
 800539c:	2001      	movs	r0, #1
 800539e:	4240      	negs	r0, r0
 80053a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053a2:	2030      	movs	r0, #48	; 0x30
 80053a4:	18e1      	adds	r1, r4, r3
 80053a6:	3143      	adds	r1, #67	; 0x43
 80053a8:	7008      	strb	r0, [r1, #0]
 80053aa:	0021      	movs	r1, r4
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	3145      	adds	r1, #69	; 0x45
 80053b0:	7809      	ldrb	r1, [r1, #0]
 80053b2:	18a2      	adds	r2, r4, r2
 80053b4:	3243      	adds	r2, #67	; 0x43
 80053b6:	3302      	adds	r3, #2
 80053b8:	7011      	strb	r1, [r2, #0]
 80053ba:	e7c1      	b.n	8005340 <_printf_common+0x4c>
 80053bc:	0022      	movs	r2, r4
 80053be:	2301      	movs	r3, #1
 80053c0:	9901      	ldr	r1, [sp, #4]
 80053c2:	9800      	ldr	r0, [sp, #0]
 80053c4:	9e08      	ldr	r6, [sp, #32]
 80053c6:	321a      	adds	r2, #26
 80053c8:	47b0      	blx	r6
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	d0e6      	beq.n	800539c <_printf_common+0xa8>
 80053ce:	3701      	adds	r7, #1
 80053d0:	e7d1      	b.n	8005376 <_printf_common+0x82>
	...

080053d4 <_printf_i>:
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	b08b      	sub	sp, #44	; 0x2c
 80053d8:	9206      	str	r2, [sp, #24]
 80053da:	000a      	movs	r2, r1
 80053dc:	3243      	adds	r2, #67	; 0x43
 80053de:	9307      	str	r3, [sp, #28]
 80053e0:	9005      	str	r0, [sp, #20]
 80053e2:	9204      	str	r2, [sp, #16]
 80053e4:	7e0a      	ldrb	r2, [r1, #24]
 80053e6:	000c      	movs	r4, r1
 80053e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053ea:	2a78      	cmp	r2, #120	; 0x78
 80053ec:	d807      	bhi.n	80053fe <_printf_i+0x2a>
 80053ee:	2a62      	cmp	r2, #98	; 0x62
 80053f0:	d809      	bhi.n	8005406 <_printf_i+0x32>
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	d100      	bne.n	80053f8 <_printf_i+0x24>
 80053f6:	e0c1      	b.n	800557c <_printf_i+0x1a8>
 80053f8:	2a58      	cmp	r2, #88	; 0x58
 80053fa:	d100      	bne.n	80053fe <_printf_i+0x2a>
 80053fc:	e08c      	b.n	8005518 <_printf_i+0x144>
 80053fe:	0026      	movs	r6, r4
 8005400:	3642      	adds	r6, #66	; 0x42
 8005402:	7032      	strb	r2, [r6, #0]
 8005404:	e022      	b.n	800544c <_printf_i+0x78>
 8005406:	0010      	movs	r0, r2
 8005408:	3863      	subs	r0, #99	; 0x63
 800540a:	2815      	cmp	r0, #21
 800540c:	d8f7      	bhi.n	80053fe <_printf_i+0x2a>
 800540e:	f7fa fe8d 	bl	800012c <__gnu_thumb1_case_shi>
 8005412:	0016      	.short	0x0016
 8005414:	fff6001f 	.word	0xfff6001f
 8005418:	fff6fff6 	.word	0xfff6fff6
 800541c:	001ffff6 	.word	0x001ffff6
 8005420:	fff6fff6 	.word	0xfff6fff6
 8005424:	fff6fff6 	.word	0xfff6fff6
 8005428:	003600a8 	.word	0x003600a8
 800542c:	fff6009a 	.word	0xfff6009a
 8005430:	00b9fff6 	.word	0x00b9fff6
 8005434:	0036fff6 	.word	0x0036fff6
 8005438:	fff6fff6 	.word	0xfff6fff6
 800543c:	009e      	.short	0x009e
 800543e:	0026      	movs	r6, r4
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	3642      	adds	r6, #66	; 0x42
 8005444:	1d11      	adds	r1, r2, #4
 8005446:	6019      	str	r1, [r3, #0]
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	7033      	strb	r3, [r6, #0]
 800544c:	2301      	movs	r3, #1
 800544e:	e0a7      	b.n	80055a0 <_printf_i+0x1cc>
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	1d0a      	adds	r2, r1, #4
 8005456:	0605      	lsls	r5, r0, #24
 8005458:	d50b      	bpl.n	8005472 <_printf_i+0x9e>
 800545a:	680d      	ldr	r5, [r1, #0]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	2d00      	cmp	r5, #0
 8005460:	da03      	bge.n	800546a <_printf_i+0x96>
 8005462:	232d      	movs	r3, #45	; 0x2d
 8005464:	9a04      	ldr	r2, [sp, #16]
 8005466:	426d      	negs	r5, r5
 8005468:	7013      	strb	r3, [r2, #0]
 800546a:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <_printf_i+0x21c>)
 800546c:	270a      	movs	r7, #10
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	e01b      	b.n	80054aa <_printf_i+0xd6>
 8005472:	680d      	ldr	r5, [r1, #0]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	0641      	lsls	r1, r0, #25
 8005478:	d5f1      	bpl.n	800545e <_printf_i+0x8a>
 800547a:	b22d      	sxth	r5, r5
 800547c:	e7ef      	b.n	800545e <_printf_i+0x8a>
 800547e:	680d      	ldr	r5, [r1, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	1d08      	adds	r0, r1, #4
 8005484:	6018      	str	r0, [r3, #0]
 8005486:	062e      	lsls	r6, r5, #24
 8005488:	d501      	bpl.n	800548e <_printf_i+0xba>
 800548a:	680d      	ldr	r5, [r1, #0]
 800548c:	e003      	b.n	8005496 <_printf_i+0xc2>
 800548e:	066d      	lsls	r5, r5, #25
 8005490:	d5fb      	bpl.n	800548a <_printf_i+0xb6>
 8005492:	680d      	ldr	r5, [r1, #0]
 8005494:	b2ad      	uxth	r5, r5
 8005496:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <_printf_i+0x21c>)
 8005498:	2708      	movs	r7, #8
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	2a6f      	cmp	r2, #111	; 0x6f
 800549e:	d000      	beq.n	80054a2 <_printf_i+0xce>
 80054a0:	3702      	adds	r7, #2
 80054a2:	0023      	movs	r3, r4
 80054a4:	2200      	movs	r2, #0
 80054a6:	3343      	adds	r3, #67	; 0x43
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	60a3      	str	r3, [r4, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db03      	blt.n	80054ba <_printf_i+0xe6>
 80054b2:	2204      	movs	r2, #4
 80054b4:	6821      	ldr	r1, [r4, #0]
 80054b6:	4391      	bics	r1, r2
 80054b8:	6021      	str	r1, [r4, #0]
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	d102      	bne.n	80054c4 <_printf_i+0xf0>
 80054be:	9e04      	ldr	r6, [sp, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00c      	beq.n	80054de <_printf_i+0x10a>
 80054c4:	9e04      	ldr	r6, [sp, #16]
 80054c6:	0028      	movs	r0, r5
 80054c8:	0039      	movs	r1, r7
 80054ca:	f7fa febf 	bl	800024c <__aeabi_uidivmod>
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	3e01      	subs	r6, #1
 80054d2:	5c5b      	ldrb	r3, [r3, r1]
 80054d4:	7033      	strb	r3, [r6, #0]
 80054d6:	002b      	movs	r3, r5
 80054d8:	0005      	movs	r5, r0
 80054da:	429f      	cmp	r7, r3
 80054dc:	d9f3      	bls.n	80054c6 <_printf_i+0xf2>
 80054de:	2f08      	cmp	r7, #8
 80054e0:	d109      	bne.n	80054f6 <_printf_i+0x122>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	07db      	lsls	r3, r3, #31
 80054e6:	d506      	bpl.n	80054f6 <_printf_i+0x122>
 80054e8:	6863      	ldr	r3, [r4, #4]
 80054ea:	6922      	ldr	r2, [r4, #16]
 80054ec:	4293      	cmp	r3, r2
 80054ee:	dc02      	bgt.n	80054f6 <_printf_i+0x122>
 80054f0:	2330      	movs	r3, #48	; 0x30
 80054f2:	3e01      	subs	r6, #1
 80054f4:	7033      	strb	r3, [r6, #0]
 80054f6:	9b04      	ldr	r3, [sp, #16]
 80054f8:	1b9b      	subs	r3, r3, r6
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	9b07      	ldr	r3, [sp, #28]
 80054fe:	0021      	movs	r1, r4
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	9805      	ldr	r0, [sp, #20]
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	aa09      	add	r2, sp, #36	; 0x24
 8005508:	f7ff fef4 	bl	80052f4 <_printf_common>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d14c      	bne.n	80055aa <_printf_i+0x1d6>
 8005510:	2001      	movs	r0, #1
 8005512:	4240      	negs	r0, r0
 8005514:	b00b      	add	sp, #44	; 0x2c
 8005516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005518:	3145      	adds	r1, #69	; 0x45
 800551a:	700a      	strb	r2, [r1, #0]
 800551c:	4a34      	ldr	r2, [pc, #208]	; (80055f0 <_printf_i+0x21c>)
 800551e:	9203      	str	r2, [sp, #12]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	6821      	ldr	r1, [r4, #0]
 8005524:	ca20      	ldmia	r2!, {r5}
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	0608      	lsls	r0, r1, #24
 800552a:	d516      	bpl.n	800555a <_printf_i+0x186>
 800552c:	07cb      	lsls	r3, r1, #31
 800552e:	d502      	bpl.n	8005536 <_printf_i+0x162>
 8005530:	2320      	movs	r3, #32
 8005532:	4319      	orrs	r1, r3
 8005534:	6021      	str	r1, [r4, #0]
 8005536:	2710      	movs	r7, #16
 8005538:	2d00      	cmp	r5, #0
 800553a:	d1b2      	bne.n	80054a2 <_printf_i+0xce>
 800553c:	2320      	movs	r3, #32
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	439a      	bics	r2, r3
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	e7ad      	b.n	80054a2 <_printf_i+0xce>
 8005546:	2220      	movs	r2, #32
 8005548:	6809      	ldr	r1, [r1, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	0022      	movs	r2, r4
 8005550:	2178      	movs	r1, #120	; 0x78
 8005552:	3245      	adds	r2, #69	; 0x45
 8005554:	7011      	strb	r1, [r2, #0]
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <_printf_i+0x220>)
 8005558:	e7e1      	b.n	800551e <_printf_i+0x14a>
 800555a:	0648      	lsls	r0, r1, #25
 800555c:	d5e6      	bpl.n	800552c <_printf_i+0x158>
 800555e:	b2ad      	uxth	r5, r5
 8005560:	e7e4      	b.n	800552c <_printf_i+0x158>
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	680d      	ldr	r5, [r1, #0]
 8005566:	1d10      	adds	r0, r2, #4
 8005568:	6949      	ldr	r1, [r1, #20]
 800556a:	6018      	str	r0, [r3, #0]
 800556c:	6813      	ldr	r3, [r2, #0]
 800556e:	062e      	lsls	r6, r5, #24
 8005570:	d501      	bpl.n	8005576 <_printf_i+0x1a2>
 8005572:	6019      	str	r1, [r3, #0]
 8005574:	e002      	b.n	800557c <_printf_i+0x1a8>
 8005576:	066d      	lsls	r5, r5, #25
 8005578:	d5fb      	bpl.n	8005572 <_printf_i+0x19e>
 800557a:	8019      	strh	r1, [r3, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	9e04      	ldr	r6, [sp, #16]
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	e7bb      	b.n	80054fc <_printf_i+0x128>
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	1d11      	adds	r1, r2, #4
 8005588:	6019      	str	r1, [r3, #0]
 800558a:	6816      	ldr	r6, [r2, #0]
 800558c:	2100      	movs	r1, #0
 800558e:	0030      	movs	r0, r6
 8005590:	6862      	ldr	r2, [r4, #4]
 8005592:	f000 ff05 	bl	80063a0 <memchr>
 8005596:	2800      	cmp	r0, #0
 8005598:	d001      	beq.n	800559e <_printf_i+0x1ca>
 800559a:	1b80      	subs	r0, r0, r6
 800559c:	6060      	str	r0, [r4, #4]
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9a04      	ldr	r2, [sp, #16]
 80055a6:	7013      	strb	r3, [r2, #0]
 80055a8:	e7a8      	b.n	80054fc <_printf_i+0x128>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	0032      	movs	r2, r6
 80055ae:	9906      	ldr	r1, [sp, #24]
 80055b0:	9805      	ldr	r0, [sp, #20]
 80055b2:	9d07      	ldr	r5, [sp, #28]
 80055b4:	47a8      	blx	r5
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d0aa      	beq.n	8005510 <_printf_i+0x13c>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	079b      	lsls	r3, r3, #30
 80055be:	d415      	bmi.n	80055ec <_printf_i+0x218>
 80055c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c2:	68e0      	ldr	r0, [r4, #12]
 80055c4:	4298      	cmp	r0, r3
 80055c6:	daa5      	bge.n	8005514 <_printf_i+0x140>
 80055c8:	0018      	movs	r0, r3
 80055ca:	e7a3      	b.n	8005514 <_printf_i+0x140>
 80055cc:	0022      	movs	r2, r4
 80055ce:	2301      	movs	r3, #1
 80055d0:	9906      	ldr	r1, [sp, #24]
 80055d2:	9805      	ldr	r0, [sp, #20]
 80055d4:	9e07      	ldr	r6, [sp, #28]
 80055d6:	3219      	adds	r2, #25
 80055d8:	47b0      	blx	r6
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	d098      	beq.n	8005510 <_printf_i+0x13c>
 80055de:	3501      	adds	r5, #1
 80055e0:	68e3      	ldr	r3, [r4, #12]
 80055e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	42ab      	cmp	r3, r5
 80055e8:	dcf0      	bgt.n	80055cc <_printf_i+0x1f8>
 80055ea:	e7e9      	b.n	80055c0 <_printf_i+0x1ec>
 80055ec:	2500      	movs	r5, #0
 80055ee:	e7f7      	b.n	80055e0 <_printf_i+0x20c>
 80055f0:	08007e2a 	.word	0x08007e2a
 80055f4:	08007e3b 	.word	0x08007e3b

080055f8 <siprintf>:
 80055f8:	b40e      	push	{r1, r2, r3}
 80055fa:	b500      	push	{lr}
 80055fc:	490b      	ldr	r1, [pc, #44]	; (800562c <siprintf+0x34>)
 80055fe:	b09c      	sub	sp, #112	; 0x70
 8005600:	ab1d      	add	r3, sp, #116	; 0x74
 8005602:	9002      	str	r0, [sp, #8]
 8005604:	9006      	str	r0, [sp, #24]
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4809      	ldr	r0, [pc, #36]	; (8005630 <siprintf+0x38>)
 800560c:	4909      	ldr	r1, [pc, #36]	; (8005634 <siprintf+0x3c>)
 800560e:	cb04      	ldmia	r3!, {r2}
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	a902      	add	r1, sp, #8
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	f001 fbe2 	bl	8006de0 <_svfiprintf_r>
 800561c:	2300      	movs	r3, #0
 800561e:	9a02      	ldr	r2, [sp, #8]
 8005620:	7013      	strb	r3, [r2, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	bc08      	pop	{r3}
 8005626:	b003      	add	sp, #12
 8005628:	4718      	bx	r3
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	7fffffff 	.word	0x7fffffff
 8005630:	2000000c 	.word	0x2000000c
 8005634:	ffff0208 	.word	0xffff0208

08005638 <quorem>:
 8005638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800563a:	0006      	movs	r6, r0
 800563c:	690b      	ldr	r3, [r1, #16]
 800563e:	6932      	ldr	r2, [r6, #16]
 8005640:	b087      	sub	sp, #28
 8005642:	2000      	movs	r0, #0
 8005644:	9103      	str	r1, [sp, #12]
 8005646:	429a      	cmp	r2, r3
 8005648:	db65      	blt.n	8005716 <quorem+0xde>
 800564a:	3b01      	subs	r3, #1
 800564c:	009c      	lsls	r4, r3, #2
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	000b      	movs	r3, r1
 8005652:	3314      	adds	r3, #20
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	191b      	adds	r3, r3, r4
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	0033      	movs	r3, r6
 800565c:	3314      	adds	r3, #20
 800565e:	9302      	str	r3, [sp, #8]
 8005660:	191c      	adds	r4, r3, r4
 8005662:	9b04      	ldr	r3, [sp, #16]
 8005664:	6827      	ldr	r7, [r4, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	0038      	movs	r0, r7
 800566a:	1c5d      	adds	r5, r3, #1
 800566c:	0029      	movs	r1, r5
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	f7fa fd66 	bl	8000140 <__udivsi3>
 8005674:	9001      	str	r0, [sp, #4]
 8005676:	42af      	cmp	r7, r5
 8005678:	d324      	bcc.n	80056c4 <quorem+0x8c>
 800567a:	2500      	movs	r5, #0
 800567c:	46ac      	mov	ip, r5
 800567e:	9802      	ldr	r0, [sp, #8]
 8005680:	9f05      	ldr	r7, [sp, #20]
 8005682:	cf08      	ldmia	r7!, {r3}
 8005684:	9a01      	ldr	r2, [sp, #4]
 8005686:	b299      	uxth	r1, r3
 8005688:	4351      	muls	r1, r2
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	4353      	muls	r3, r2
 800568e:	1949      	adds	r1, r1, r5
 8005690:	0c0a      	lsrs	r2, r1, #16
 8005692:	189b      	adds	r3, r3, r2
 8005694:	6802      	ldr	r2, [r0, #0]
 8005696:	b289      	uxth	r1, r1
 8005698:	b292      	uxth	r2, r2
 800569a:	4462      	add	r2, ip
 800569c:	1a52      	subs	r2, r2, r1
 800569e:	6801      	ldr	r1, [r0, #0]
 80056a0:	0c1d      	lsrs	r5, r3, #16
 80056a2:	0c09      	lsrs	r1, r1, #16
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	1acb      	subs	r3, r1, r3
 80056a8:	1411      	asrs	r1, r2, #16
 80056aa:	185b      	adds	r3, r3, r1
 80056ac:	1419      	asrs	r1, r3, #16
 80056ae:	b292      	uxth	r2, r2
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	431a      	orrs	r2, r3
 80056b4:	9b04      	ldr	r3, [sp, #16]
 80056b6:	468c      	mov	ip, r1
 80056b8:	c004      	stmia	r0!, {r2}
 80056ba:	42bb      	cmp	r3, r7
 80056bc:	d2e1      	bcs.n	8005682 <quorem+0x4a>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d030      	beq.n	8005726 <quorem+0xee>
 80056c4:	0030      	movs	r0, r6
 80056c6:	9903      	ldr	r1, [sp, #12]
 80056c8:	f001 f902 	bl	80068d0 <__mcmp>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	db21      	blt.n	8005714 <quorem+0xdc>
 80056d0:	0030      	movs	r0, r6
 80056d2:	2400      	movs	r4, #0
 80056d4:	9b01      	ldr	r3, [sp, #4]
 80056d6:	9903      	ldr	r1, [sp, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	3014      	adds	r0, #20
 80056de:	3114      	adds	r1, #20
 80056e0:	6803      	ldr	r3, [r0, #0]
 80056e2:	c920      	ldmia	r1!, {r5}
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	1914      	adds	r4, r2, r4
 80056e8:	b2aa      	uxth	r2, r5
 80056ea:	1aa2      	subs	r2, r4, r2
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	0c2d      	lsrs	r5, r5, #16
 80056f0:	1414      	asrs	r4, r2, #16
 80056f2:	1b5b      	subs	r3, r3, r5
 80056f4:	191b      	adds	r3, r3, r4
 80056f6:	141c      	asrs	r4, r3, #16
 80056f8:	b292      	uxth	r2, r2
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	4313      	orrs	r3, r2
 80056fe:	c008      	stmia	r0!, {r3}
 8005700:	9b04      	ldr	r3, [sp, #16]
 8005702:	428b      	cmp	r3, r1
 8005704:	d2ec      	bcs.n	80056e0 <quorem+0xa8>
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	9a02      	ldr	r2, [sp, #8]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	18d3      	adds	r3, r2, r3
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	2a00      	cmp	r2, #0
 8005712:	d015      	beq.n	8005740 <quorem+0x108>
 8005714:	9801      	ldr	r0, [sp, #4]
 8005716:	b007      	add	sp, #28
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <quorem+0xf6>
 8005720:	9b00      	ldr	r3, [sp, #0]
 8005722:	3b01      	subs	r3, #1
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	3c04      	subs	r4, #4
 800572a:	42a3      	cmp	r3, r4
 800572c:	d3f5      	bcc.n	800571a <quorem+0xe2>
 800572e:	9b00      	ldr	r3, [sp, #0]
 8005730:	6133      	str	r3, [r6, #16]
 8005732:	e7c7      	b.n	80056c4 <quorem+0x8c>
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	2a00      	cmp	r2, #0
 8005738:	d106      	bne.n	8005748 <quorem+0x110>
 800573a:	9a00      	ldr	r2, [sp, #0]
 800573c:	3a01      	subs	r2, #1
 800573e:	9200      	str	r2, [sp, #0]
 8005740:	9a02      	ldr	r2, [sp, #8]
 8005742:	3b04      	subs	r3, #4
 8005744:	429a      	cmp	r2, r3
 8005746:	d3f5      	bcc.n	8005734 <quorem+0xfc>
 8005748:	9b00      	ldr	r3, [sp, #0]
 800574a:	6133      	str	r3, [r6, #16]
 800574c:	e7e2      	b.n	8005714 <quorem+0xdc>
	...

08005750 <_dtoa_r>:
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b09d      	sub	sp, #116	; 0x74
 8005754:	9202      	str	r2, [sp, #8]
 8005756:	9303      	str	r3, [sp, #12]
 8005758:	9b02      	ldr	r3, [sp, #8]
 800575a:	9c03      	ldr	r4, [sp, #12]
 800575c:	9308      	str	r3, [sp, #32]
 800575e:	9409      	str	r4, [sp, #36]	; 0x24
 8005760:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005762:	0007      	movs	r7, r0
 8005764:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005766:	2c00      	cmp	r4, #0
 8005768:	d10e      	bne.n	8005788 <_dtoa_r+0x38>
 800576a:	2010      	movs	r0, #16
 800576c:	f000 fe0e 	bl	800638c <malloc>
 8005770:	1e02      	subs	r2, r0, #0
 8005772:	6278      	str	r0, [r7, #36]	; 0x24
 8005774:	d104      	bne.n	8005780 <_dtoa_r+0x30>
 8005776:	21ea      	movs	r1, #234	; 0xea
 8005778:	4bc7      	ldr	r3, [pc, #796]	; (8005a98 <_dtoa_r+0x348>)
 800577a:	48c8      	ldr	r0, [pc, #800]	; (8005a9c <_dtoa_r+0x34c>)
 800577c:	f001 fc42 	bl	8007004 <__assert_func>
 8005780:	6044      	str	r4, [r0, #4]
 8005782:	6084      	str	r4, [r0, #8]
 8005784:	6004      	str	r4, [r0, #0]
 8005786:	60c4      	str	r4, [r0, #12]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	2900      	cmp	r1, #0
 800578e:	d00a      	beq.n	80057a6 <_dtoa_r+0x56>
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	2301      	movs	r3, #1
 8005794:	4093      	lsls	r3, r2
 8005796:	604a      	str	r2, [r1, #4]
 8005798:	608b      	str	r3, [r1, #8]
 800579a:	0038      	movs	r0, r7
 800579c:	f000 fe58 	bl	8006450 <_Bfree>
 80057a0:	2200      	movs	r2, #0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da20      	bge.n	80057ee <_dtoa_r+0x9e>
 80057ac:	2301      	movs	r3, #1
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	9309      	str	r3, [sp, #36]	; 0x24
 80057b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057ba:	4bb9      	ldr	r3, [pc, #740]	; (8005aa0 <_dtoa_r+0x350>)
 80057bc:	4ab8      	ldr	r2, [pc, #736]	; (8005aa0 <_dtoa_r+0x350>)
 80057be:	402b      	ands	r3, r5
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d117      	bne.n	80057f4 <_dtoa_r+0xa4>
 80057c4:	4bb7      	ldr	r3, [pc, #732]	; (8005aa4 <_dtoa_r+0x354>)
 80057c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057c8:	0328      	lsls	r0, r5, #12
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	9b02      	ldr	r3, [sp, #8]
 80057ce:	0b00      	lsrs	r0, r0, #12
 80057d0:	4318      	orrs	r0, r3
 80057d2:	d101      	bne.n	80057d8 <_dtoa_r+0x88>
 80057d4:	f000 fdbf 	bl	8006356 <_dtoa_r+0xc06>
 80057d8:	48b3      	ldr	r0, [pc, #716]	; (8005aa8 <_dtoa_r+0x358>)
 80057da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057dc:	9006      	str	r0, [sp, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <_dtoa_r+0x98>
 80057e2:	4bb2      	ldr	r3, [pc, #712]	; (8005aac <_dtoa_r+0x35c>)
 80057e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	9806      	ldr	r0, [sp, #24]
 80057ea:	b01d      	add	sp, #116	; 0x74
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ee:	2300      	movs	r3, #0
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	e7e1      	b.n	80057b8 <_dtoa_r+0x68>
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80057f8:	9312      	str	r3, [sp, #72]	; 0x48
 80057fa:	9413      	str	r4, [sp, #76]	; 0x4c
 80057fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80057fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	f7fa fe22 	bl	800044c <__aeabi_dcmpeq>
 8005808:	1e04      	subs	r4, r0, #0
 800580a:	d009      	beq.n	8005820 <_dtoa_r+0xd0>
 800580c:	2301      	movs	r3, #1
 800580e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4ba7      	ldr	r3, [pc, #668]	; (8005ab0 <_dtoa_r+0x360>)
 8005814:	9306      	str	r3, [sp, #24]
 8005816:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0e5      	beq.n	80057e8 <_dtoa_r+0x98>
 800581c:	4ba5      	ldr	r3, [pc, #660]	; (8005ab4 <_dtoa_r+0x364>)
 800581e:	e7e1      	b.n	80057e4 <_dtoa_r+0x94>
 8005820:	ab1a      	add	r3, sp, #104	; 0x68
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	ab1b      	add	r3, sp, #108	; 0x6c
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	0038      	movs	r0, r7
 800582a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800582c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800582e:	f001 f903 	bl	8006a38 <__d2b>
 8005832:	006e      	lsls	r6, r5, #1
 8005834:	9005      	str	r0, [sp, #20]
 8005836:	0d76      	lsrs	r6, r6, #21
 8005838:	d100      	bne.n	800583c <_dtoa_r+0xec>
 800583a:	e07c      	b.n	8005936 <_dtoa_r+0x1e6>
 800583c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800583e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005842:	4a9d      	ldr	r2, [pc, #628]	; (8005ab8 <_dtoa_r+0x368>)
 8005844:	031b      	lsls	r3, r3, #12
 8005846:	0b1b      	lsrs	r3, r3, #12
 8005848:	431a      	orrs	r2, r3
 800584a:	0011      	movs	r1, r2
 800584c:	4b9b      	ldr	r3, [pc, #620]	; (8005abc <_dtoa_r+0x36c>)
 800584e:	9418      	str	r4, [sp, #96]	; 0x60
 8005850:	18f6      	adds	r6, r6, r3
 8005852:	2200      	movs	r2, #0
 8005854:	4b9a      	ldr	r3, [pc, #616]	; (8005ac0 <_dtoa_r+0x370>)
 8005856:	f7fc fa5d 	bl	8001d14 <__aeabi_dsub>
 800585a:	4a9a      	ldr	r2, [pc, #616]	; (8005ac4 <_dtoa_r+0x374>)
 800585c:	4b9a      	ldr	r3, [pc, #616]	; (8005ac8 <_dtoa_r+0x378>)
 800585e:	f7fb ffed 	bl	800183c <__aeabi_dmul>
 8005862:	4a9a      	ldr	r2, [pc, #616]	; (8005acc <_dtoa_r+0x37c>)
 8005864:	4b9a      	ldr	r3, [pc, #616]	; (8005ad0 <_dtoa_r+0x380>)
 8005866:	f7fb f8ab 	bl	80009c0 <__aeabi_dadd>
 800586a:	0004      	movs	r4, r0
 800586c:	0030      	movs	r0, r6
 800586e:	000d      	movs	r5, r1
 8005870:	f7fc fe36 	bl	80024e0 <__aeabi_i2d>
 8005874:	4a97      	ldr	r2, [pc, #604]	; (8005ad4 <_dtoa_r+0x384>)
 8005876:	4b98      	ldr	r3, [pc, #608]	; (8005ad8 <_dtoa_r+0x388>)
 8005878:	f7fb ffe0 	bl	800183c <__aeabi_dmul>
 800587c:	0002      	movs	r2, r0
 800587e:	000b      	movs	r3, r1
 8005880:	0020      	movs	r0, r4
 8005882:	0029      	movs	r1, r5
 8005884:	f7fb f89c 	bl	80009c0 <__aeabi_dadd>
 8005888:	0004      	movs	r4, r0
 800588a:	000d      	movs	r5, r1
 800588c:	f7fc fdf2 	bl	8002474 <__aeabi_d2iz>
 8005890:	2200      	movs	r2, #0
 8005892:	9002      	str	r0, [sp, #8]
 8005894:	2300      	movs	r3, #0
 8005896:	0020      	movs	r0, r4
 8005898:	0029      	movs	r1, r5
 800589a:	f7fa fddd 	bl	8000458 <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d00b      	beq.n	80058ba <_dtoa_r+0x16a>
 80058a2:	9802      	ldr	r0, [sp, #8]
 80058a4:	f7fc fe1c 	bl	80024e0 <__aeabi_i2d>
 80058a8:	002b      	movs	r3, r5
 80058aa:	0022      	movs	r2, r4
 80058ac:	f7fa fdce 	bl	800044c <__aeabi_dcmpeq>
 80058b0:	4243      	negs	r3, r0
 80058b2:	4158      	adcs	r0, r3
 80058b4:	9b02      	ldr	r3, [sp, #8]
 80058b6:	1a1b      	subs	r3, r3, r0
 80058b8:	9302      	str	r3, [sp, #8]
 80058ba:	2301      	movs	r3, #1
 80058bc:	9316      	str	r3, [sp, #88]	; 0x58
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	2b16      	cmp	r3, #22
 80058c2:	d80f      	bhi.n	80058e4 <_dtoa_r+0x194>
 80058c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80058c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80058c8:	00da      	lsls	r2, r3, #3
 80058ca:	4b84      	ldr	r3, [pc, #528]	; (8005adc <_dtoa_r+0x38c>)
 80058cc:	189b      	adds	r3, r3, r2
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f7fa fdc1 	bl	8000458 <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d049      	beq.n	800596e <_dtoa_r+0x21e>
 80058da:	9b02      	ldr	r3, [sp, #8]
 80058dc:	3b01      	subs	r3, #1
 80058de:	9302      	str	r3, [sp, #8]
 80058e0:	2300      	movs	r3, #0
 80058e2:	9316      	str	r3, [sp, #88]	; 0x58
 80058e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80058e6:	1b9e      	subs	r6, r3, r6
 80058e8:	2300      	movs	r3, #0
 80058ea:	930a      	str	r3, [sp, #40]	; 0x28
 80058ec:	0033      	movs	r3, r6
 80058ee:	3b01      	subs	r3, #1
 80058f0:	930d      	str	r3, [sp, #52]	; 0x34
 80058f2:	d504      	bpl.n	80058fe <_dtoa_r+0x1ae>
 80058f4:	2301      	movs	r3, #1
 80058f6:	1b9b      	subs	r3, r3, r6
 80058f8:	930a      	str	r3, [sp, #40]	; 0x28
 80058fa:	2300      	movs	r3, #0
 80058fc:	930d      	str	r3, [sp, #52]	; 0x34
 80058fe:	9b02      	ldr	r3, [sp, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	db36      	blt.n	8005972 <_dtoa_r+0x222>
 8005904:	9a02      	ldr	r2, [sp, #8]
 8005906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005908:	4694      	mov	ip, r2
 800590a:	4463      	add	r3, ip
 800590c:	930d      	str	r3, [sp, #52]	; 0x34
 800590e:	2300      	movs	r3, #0
 8005910:	9215      	str	r2, [sp, #84]	; 0x54
 8005912:	930e      	str	r3, [sp, #56]	; 0x38
 8005914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005916:	2401      	movs	r4, #1
 8005918:	2b09      	cmp	r3, #9
 800591a:	d864      	bhi.n	80059e6 <_dtoa_r+0x296>
 800591c:	2b05      	cmp	r3, #5
 800591e:	dd02      	ble.n	8005926 <_dtoa_r+0x1d6>
 8005920:	2400      	movs	r4, #0
 8005922:	3b04      	subs	r3, #4
 8005924:	9322      	str	r3, [sp, #136]	; 0x88
 8005926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005928:	1e98      	subs	r0, r3, #2
 800592a:	2803      	cmp	r0, #3
 800592c:	d864      	bhi.n	80059f8 <_dtoa_r+0x2a8>
 800592e:	f7fa fbf3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005932:	3829      	.short	0x3829
 8005934:	5836      	.short	0x5836
 8005936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005938:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800593a:	189e      	adds	r6, r3, r2
 800593c:	4b68      	ldr	r3, [pc, #416]	; (8005ae0 <_dtoa_r+0x390>)
 800593e:	18f2      	adds	r2, r6, r3
 8005940:	2a20      	cmp	r2, #32
 8005942:	dd0f      	ble.n	8005964 <_dtoa_r+0x214>
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	409d      	lsls	r5, r3
 800594a:	4b66      	ldr	r3, [pc, #408]	; (8005ae4 <_dtoa_r+0x394>)
 800594c:	9802      	ldr	r0, [sp, #8]
 800594e:	18f3      	adds	r3, r6, r3
 8005950:	40d8      	lsrs	r0, r3
 8005952:	4328      	orrs	r0, r5
 8005954:	f7fc fdf4 	bl	8002540 <__aeabi_ui2d>
 8005958:	2301      	movs	r3, #1
 800595a:	4c63      	ldr	r4, [pc, #396]	; (8005ae8 <_dtoa_r+0x398>)
 800595c:	3e01      	subs	r6, #1
 800595e:	1909      	adds	r1, r1, r4
 8005960:	9318      	str	r3, [sp, #96]	; 0x60
 8005962:	e776      	b.n	8005852 <_dtoa_r+0x102>
 8005964:	2320      	movs	r3, #32
 8005966:	9802      	ldr	r0, [sp, #8]
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	4098      	lsls	r0, r3
 800596c:	e7f2      	b.n	8005954 <_dtoa_r+0x204>
 800596e:	9016      	str	r0, [sp, #88]	; 0x58
 8005970:	e7b8      	b.n	80058e4 <_dtoa_r+0x194>
 8005972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005974:	9a02      	ldr	r2, [sp, #8]
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	930a      	str	r3, [sp, #40]	; 0x28
 800597a:	4253      	negs	r3, r2
 800597c:	930e      	str	r3, [sp, #56]	; 0x38
 800597e:	2300      	movs	r3, #0
 8005980:	9315      	str	r3, [sp, #84]	; 0x54
 8005982:	e7c7      	b.n	8005914 <_dtoa_r+0x1c4>
 8005984:	2300      	movs	r3, #0
 8005986:	930f      	str	r3, [sp, #60]	; 0x3c
 8005988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800598a:	930c      	str	r3, [sp, #48]	; 0x30
 800598c:	9307      	str	r3, [sp, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	dc13      	bgt.n	80059ba <_dtoa_r+0x26a>
 8005992:	2301      	movs	r3, #1
 8005994:	001a      	movs	r2, r3
 8005996:	930c      	str	r3, [sp, #48]	; 0x30
 8005998:	9307      	str	r3, [sp, #28]
 800599a:	9223      	str	r2, [sp, #140]	; 0x8c
 800599c:	e00d      	b.n	80059ba <_dtoa_r+0x26a>
 800599e:	2301      	movs	r3, #1
 80059a0:	e7f1      	b.n	8005986 <_dtoa_r+0x236>
 80059a2:	2300      	movs	r3, #0
 80059a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80059a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80059a8:	4694      	mov	ip, r2
 80059aa:	9b02      	ldr	r3, [sp, #8]
 80059ac:	4463      	add	r3, ip
 80059ae:	930c      	str	r3, [sp, #48]	; 0x30
 80059b0:	3301      	adds	r3, #1
 80059b2:	9307      	str	r3, [sp, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dc00      	bgt.n	80059ba <_dtoa_r+0x26a>
 80059b8:	2301      	movs	r3, #1
 80059ba:	2200      	movs	r2, #0
 80059bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059be:	6042      	str	r2, [r0, #4]
 80059c0:	3204      	adds	r2, #4
 80059c2:	0015      	movs	r5, r2
 80059c4:	3514      	adds	r5, #20
 80059c6:	6841      	ldr	r1, [r0, #4]
 80059c8:	429d      	cmp	r5, r3
 80059ca:	d919      	bls.n	8005a00 <_dtoa_r+0x2b0>
 80059cc:	0038      	movs	r0, r7
 80059ce:	f000 fcfb 	bl	80063c8 <_Balloc>
 80059d2:	9006      	str	r0, [sp, #24]
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d117      	bne.n	8005a08 <_dtoa_r+0x2b8>
 80059d8:	21d5      	movs	r1, #213	; 0xd5
 80059da:	0002      	movs	r2, r0
 80059dc:	4b43      	ldr	r3, [pc, #268]	; (8005aec <_dtoa_r+0x39c>)
 80059de:	0049      	lsls	r1, r1, #1
 80059e0:	e6cb      	b.n	800577a <_dtoa_r+0x2a>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7de      	b.n	80059a4 <_dtoa_r+0x254>
 80059e6:	2300      	movs	r3, #0
 80059e8:	940f      	str	r4, [sp, #60]	; 0x3c
 80059ea:	9322      	str	r3, [sp, #136]	; 0x88
 80059ec:	3b01      	subs	r3, #1
 80059ee:	930c      	str	r3, [sp, #48]	; 0x30
 80059f0:	9307      	str	r3, [sp, #28]
 80059f2:	2200      	movs	r2, #0
 80059f4:	3313      	adds	r3, #19
 80059f6:	e7d0      	b.n	800599a <_dtoa_r+0x24a>
 80059f8:	2301      	movs	r3, #1
 80059fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80059fc:	3b02      	subs	r3, #2
 80059fe:	e7f6      	b.n	80059ee <_dtoa_r+0x29e>
 8005a00:	3101      	adds	r1, #1
 8005a02:	6041      	str	r1, [r0, #4]
 8005a04:	0052      	lsls	r2, r2, #1
 8005a06:	e7dc      	b.n	80059c2 <_dtoa_r+0x272>
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	9a06      	ldr	r2, [sp, #24]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	2b0e      	cmp	r3, #14
 8005a12:	d900      	bls.n	8005a16 <_dtoa_r+0x2c6>
 8005a14:	e0eb      	b.n	8005bee <_dtoa_r+0x49e>
 8005a16:	2c00      	cmp	r4, #0
 8005a18:	d100      	bne.n	8005a1c <_dtoa_r+0x2cc>
 8005a1a:	e0e8      	b.n	8005bee <_dtoa_r+0x49e>
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dd68      	ble.n	8005af4 <_dtoa_r+0x3a4>
 8005a22:	001a      	movs	r2, r3
 8005a24:	210f      	movs	r1, #15
 8005a26:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <_dtoa_r+0x38c>)
 8005a28:	400a      	ands	r2, r1
 8005a2a:	00d2      	lsls	r2, r2, #3
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	681d      	ldr	r5, [r3, #0]
 8005a30:	685e      	ldr	r6, [r3, #4]
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	111c      	asrs	r4, r3, #4
 8005a36:	2302      	movs	r3, #2
 8005a38:	9310      	str	r3, [sp, #64]	; 0x40
 8005a3a:	9b02      	ldr	r3, [sp, #8]
 8005a3c:	05db      	lsls	r3, r3, #23
 8005a3e:	d50b      	bpl.n	8005a58 <_dtoa_r+0x308>
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <_dtoa_r+0x3a0>)
 8005a42:	400c      	ands	r4, r1
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005a4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a4c:	f7fb faf4 	bl	8001038 <__aeabi_ddiv>
 8005a50:	2303      	movs	r3, #3
 8005a52:	9008      	str	r0, [sp, #32]
 8005a54:	9109      	str	r1, [sp, #36]	; 0x24
 8005a56:	9310      	str	r3, [sp, #64]	; 0x40
 8005a58:	4b25      	ldr	r3, [pc, #148]	; (8005af0 <_dtoa_r+0x3a0>)
 8005a5a:	9314      	str	r3, [sp, #80]	; 0x50
 8005a5c:	2c00      	cmp	r4, #0
 8005a5e:	d108      	bne.n	8005a72 <_dtoa_r+0x322>
 8005a60:	9808      	ldr	r0, [sp, #32]
 8005a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a64:	002a      	movs	r2, r5
 8005a66:	0033      	movs	r3, r6
 8005a68:	f7fb fae6 	bl	8001038 <__aeabi_ddiv>
 8005a6c:	9008      	str	r0, [sp, #32]
 8005a6e:	9109      	str	r1, [sp, #36]	; 0x24
 8005a70:	e05c      	b.n	8005b2c <_dtoa_r+0x3dc>
 8005a72:	2301      	movs	r3, #1
 8005a74:	421c      	tst	r4, r3
 8005a76:	d00b      	beq.n	8005a90 <_dtoa_r+0x340>
 8005a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a7a:	0028      	movs	r0, r5
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	9310      	str	r3, [sp, #64]	; 0x40
 8005a80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a82:	0031      	movs	r1, r6
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f7fb fed8 	bl	800183c <__aeabi_dmul>
 8005a8c:	0005      	movs	r5, r0
 8005a8e:	000e      	movs	r6, r1
 8005a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a92:	1064      	asrs	r4, r4, #1
 8005a94:	3308      	adds	r3, #8
 8005a96:	e7e0      	b.n	8005a5a <_dtoa_r+0x30a>
 8005a98:	08007e59 	.word	0x08007e59
 8005a9c:	08007e70 	.word	0x08007e70
 8005aa0:	7ff00000 	.word	0x7ff00000
 8005aa4:	0000270f 	.word	0x0000270f
 8005aa8:	08007e55 	.word	0x08007e55
 8005aac:	08007e58 	.word	0x08007e58
 8005ab0:	08007e28 	.word	0x08007e28
 8005ab4:	08007e29 	.word	0x08007e29
 8005ab8:	3ff00000 	.word	0x3ff00000
 8005abc:	fffffc01 	.word	0xfffffc01
 8005ac0:	3ff80000 	.word	0x3ff80000
 8005ac4:	636f4361 	.word	0x636f4361
 8005ac8:	3fd287a7 	.word	0x3fd287a7
 8005acc:	8b60c8b3 	.word	0x8b60c8b3
 8005ad0:	3fc68a28 	.word	0x3fc68a28
 8005ad4:	509f79fb 	.word	0x509f79fb
 8005ad8:	3fd34413 	.word	0x3fd34413
 8005adc:	08007f60 	.word	0x08007f60
 8005ae0:	00000432 	.word	0x00000432
 8005ae4:	00000412 	.word	0x00000412
 8005ae8:	fe100000 	.word	0xfe100000
 8005aec:	08007ecb 	.word	0x08007ecb
 8005af0:	08007f38 	.word	0x08007f38
 8005af4:	2302      	movs	r3, #2
 8005af6:	9310      	str	r3, [sp, #64]	; 0x40
 8005af8:	9b02      	ldr	r3, [sp, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <_dtoa_r+0x3dc>
 8005afe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005b00:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b02:	425c      	negs	r4, r3
 8005b04:	230f      	movs	r3, #15
 8005b06:	4ab6      	ldr	r2, [pc, #728]	; (8005de0 <_dtoa_r+0x690>)
 8005b08:	4023      	ands	r3, r4
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f7fb fe93 	bl	800183c <__aeabi_dmul>
 8005b16:	2601      	movs	r6, #1
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9008      	str	r0, [sp, #32]
 8005b1c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b1e:	4db1      	ldr	r5, [pc, #708]	; (8005de4 <_dtoa_r+0x694>)
 8005b20:	1124      	asrs	r4, r4, #4
 8005b22:	2c00      	cmp	r4, #0
 8005b24:	d000      	beq.n	8005b28 <_dtoa_r+0x3d8>
 8005b26:	e094      	b.n	8005c52 <_dtoa_r+0x502>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d19f      	bne.n	8005a6c <_dtoa_r+0x31c>
 8005b2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d100      	bne.n	8005b34 <_dtoa_r+0x3e4>
 8005b32:	e09b      	b.n	8005c6c <_dtoa_r+0x51c>
 8005b34:	9c08      	ldr	r4, [sp, #32]
 8005b36:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b38:	2200      	movs	r2, #0
 8005b3a:	0020      	movs	r0, r4
 8005b3c:	0029      	movs	r1, r5
 8005b3e:	4baa      	ldr	r3, [pc, #680]	; (8005de8 <_dtoa_r+0x698>)
 8005b40:	f7fa fc8a 	bl	8000458 <__aeabi_dcmplt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d100      	bne.n	8005b4a <_dtoa_r+0x3fa>
 8005b48:	e090      	b.n	8005c6c <_dtoa_r+0x51c>
 8005b4a:	9b07      	ldr	r3, [sp, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d100      	bne.n	8005b52 <_dtoa_r+0x402>
 8005b50:	e08c      	b.n	8005c6c <_dtoa_r+0x51c>
 8005b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dd46      	ble.n	8005be6 <_dtoa_r+0x496>
 8005b58:	9b02      	ldr	r3, [sp, #8]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	0029      	movs	r1, r5
 8005b60:	1e5e      	subs	r6, r3, #1
 8005b62:	4ba2      	ldr	r3, [pc, #648]	; (8005dec <_dtoa_r+0x69c>)
 8005b64:	f7fb fe6a 	bl	800183c <__aeabi_dmul>
 8005b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b6a:	9008      	str	r0, [sp, #32]
 8005b6c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9310      	str	r3, [sp, #64]	; 0x40
 8005b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005b76:	9c08      	ldr	r4, [sp, #32]
 8005b78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b7a:	9314      	str	r3, [sp, #80]	; 0x50
 8005b7c:	f7fc fcb0 	bl	80024e0 <__aeabi_i2d>
 8005b80:	0022      	movs	r2, r4
 8005b82:	002b      	movs	r3, r5
 8005b84:	f7fb fe5a 	bl	800183c <__aeabi_dmul>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4b99      	ldr	r3, [pc, #612]	; (8005df0 <_dtoa_r+0x6a0>)
 8005b8c:	f7fa ff18 	bl	80009c0 <__aeabi_dadd>
 8005b90:	9010      	str	r0, [sp, #64]	; 0x40
 8005b92:	9111      	str	r1, [sp, #68]	; 0x44
 8005b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b98:	9208      	str	r2, [sp, #32]
 8005b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9c:	4a95      	ldr	r2, [pc, #596]	; (8005df4 <_dtoa_r+0x6a4>)
 8005b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba0:	4694      	mov	ip, r2
 8005ba2:	4463      	add	r3, ip
 8005ba4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d161      	bne.n	8005c72 <_dtoa_r+0x522>
 8005bae:	2200      	movs	r2, #0
 8005bb0:	0020      	movs	r0, r4
 8005bb2:	0029      	movs	r1, r5
 8005bb4:	4b90      	ldr	r3, [pc, #576]	; (8005df8 <_dtoa_r+0x6a8>)
 8005bb6:	f7fc f8ad 	bl	8001d14 <__aeabi_dsub>
 8005bba:	9a08      	ldr	r2, [sp, #32]
 8005bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bbe:	0004      	movs	r4, r0
 8005bc0:	000d      	movs	r5, r1
 8005bc2:	f7fa fc5d 	bl	8000480 <__aeabi_dcmpgt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d000      	beq.n	8005bcc <_dtoa_r+0x47c>
 8005bca:	e2af      	b.n	800612c <_dtoa_r+0x9dc>
 8005bcc:	488b      	ldr	r0, [pc, #556]	; (8005dfc <_dtoa_r+0x6ac>)
 8005bce:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005bd0:	4684      	mov	ip, r0
 8005bd2:	4461      	add	r1, ip
 8005bd4:	000b      	movs	r3, r1
 8005bd6:	0020      	movs	r0, r4
 8005bd8:	0029      	movs	r1, r5
 8005bda:	9a08      	ldr	r2, [sp, #32]
 8005bdc:	f7fa fc3c 	bl	8000458 <__aeabi_dcmplt>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d000      	beq.n	8005be6 <_dtoa_r+0x496>
 8005be4:	e29f      	b.n	8006126 <_dtoa_r+0x9d6>
 8005be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005be8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005bea:	9308      	str	r3, [sp, #32]
 8005bec:	9409      	str	r4, [sp, #36]	; 0x24
 8005bee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da00      	bge.n	8005bf6 <_dtoa_r+0x4a6>
 8005bf4:	e172      	b.n	8005edc <_dtoa_r+0x78c>
 8005bf6:	9a02      	ldr	r2, [sp, #8]
 8005bf8:	2a0e      	cmp	r2, #14
 8005bfa:	dd00      	ble.n	8005bfe <_dtoa_r+0x4ae>
 8005bfc:	e16e      	b.n	8005edc <_dtoa_r+0x78c>
 8005bfe:	4b78      	ldr	r3, [pc, #480]	; (8005de0 <_dtoa_r+0x690>)
 8005c00:	00d2      	lsls	r2, r2, #3
 8005c02:	189b      	adds	r3, r3, r2
 8005c04:	685c      	ldr	r4, [r3, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	930a      	str	r3, [sp, #40]	; 0x28
 8005c0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	db00      	blt.n	8005c14 <_dtoa_r+0x4c4>
 8005c12:	e0f7      	b.n	8005e04 <_dtoa_r+0x6b4>
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	dd00      	ble.n	8005c1c <_dtoa_r+0x4cc>
 8005c1a:	e0f3      	b.n	8005e04 <_dtoa_r+0x6b4>
 8005c1c:	d000      	beq.n	8005c20 <_dtoa_r+0x4d0>
 8005c1e:	e282      	b.n	8006126 <_dtoa_r+0x9d6>
 8005c20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c24:	2200      	movs	r2, #0
 8005c26:	4b74      	ldr	r3, [pc, #464]	; (8005df8 <_dtoa_r+0x6a8>)
 8005c28:	f7fb fe08 	bl	800183c <__aeabi_dmul>
 8005c2c:	9a08      	ldr	r2, [sp, #32]
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	f7fa fc30 	bl	8000494 <__aeabi_dcmpge>
 8005c34:	9e07      	ldr	r6, [sp, #28]
 8005c36:	0035      	movs	r5, r6
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d000      	beq.n	8005c3e <_dtoa_r+0x4ee>
 8005c3c:	e259      	b.n	80060f2 <_dtoa_r+0x9a2>
 8005c3e:	9b06      	ldr	r3, [sp, #24]
 8005c40:	9a06      	ldr	r2, [sp, #24]
 8005c42:	3301      	adds	r3, #1
 8005c44:	9308      	str	r3, [sp, #32]
 8005c46:	2331      	movs	r3, #49	; 0x31
 8005c48:	7013      	strb	r3, [r2, #0]
 8005c4a:	9b02      	ldr	r3, [sp, #8]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	9302      	str	r3, [sp, #8]
 8005c50:	e254      	b.n	80060fc <_dtoa_r+0x9ac>
 8005c52:	4234      	tst	r4, r6
 8005c54:	d007      	beq.n	8005c66 <_dtoa_r+0x516>
 8005c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c58:	3301      	adds	r3, #1
 8005c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8005c5c:	682a      	ldr	r2, [r5, #0]
 8005c5e:	686b      	ldr	r3, [r5, #4]
 8005c60:	f7fb fdec 	bl	800183c <__aeabi_dmul>
 8005c64:	0033      	movs	r3, r6
 8005c66:	1064      	asrs	r4, r4, #1
 8005c68:	3508      	adds	r5, #8
 8005c6a:	e75a      	b.n	8005b22 <_dtoa_r+0x3d2>
 8005c6c:	9e02      	ldr	r6, [sp, #8]
 8005c6e:	9b07      	ldr	r3, [sp, #28]
 8005c70:	e780      	b.n	8005b74 <_dtoa_r+0x424>
 8005c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c76:	1e5a      	subs	r2, r3, #1
 8005c78:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <_dtoa_r+0x690>)
 8005c7a:	00d2      	lsls	r2, r2, #3
 8005c7c:	189b      	adds	r3, r3, r2
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2900      	cmp	r1, #0
 8005c84:	d051      	beq.n	8005d2a <_dtoa_r+0x5da>
 8005c86:	2000      	movs	r0, #0
 8005c88:	495d      	ldr	r1, [pc, #372]	; (8005e00 <_dtoa_r+0x6b0>)
 8005c8a:	f7fb f9d5 	bl	8001038 <__aeabi_ddiv>
 8005c8e:	9a08      	ldr	r2, [sp, #32]
 8005c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c92:	f7fc f83f 	bl	8001d14 <__aeabi_dsub>
 8005c96:	9a06      	ldr	r2, [sp, #24]
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	4694      	mov	ip, r2
 8005c9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ca0:	9010      	str	r0, [sp, #64]	; 0x40
 8005ca2:	9111      	str	r1, [sp, #68]	; 0x44
 8005ca4:	4463      	add	r3, ip
 8005ca6:	9319      	str	r3, [sp, #100]	; 0x64
 8005ca8:	0029      	movs	r1, r5
 8005caa:	0020      	movs	r0, r4
 8005cac:	f7fc fbe2 	bl	8002474 <__aeabi_d2iz>
 8005cb0:	9014      	str	r0, [sp, #80]	; 0x50
 8005cb2:	f7fc fc15 	bl	80024e0 <__aeabi_i2d>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	000b      	movs	r3, r1
 8005cba:	0020      	movs	r0, r4
 8005cbc:	0029      	movs	r1, r5
 8005cbe:	f7fc f829 	bl	8001d14 <__aeabi_dsub>
 8005cc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	9308      	str	r3, [sp, #32]
 8005cca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ccc:	0004      	movs	r4, r0
 8005cce:	3330      	adds	r3, #48	; 0x30
 8005cd0:	7013      	strb	r3, [r2, #0]
 8005cd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cd6:	000d      	movs	r5, r1
 8005cd8:	f7fa fbbe 	bl	8000458 <__aeabi_dcmplt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d175      	bne.n	8005dcc <_dtoa_r+0x67c>
 8005ce0:	0022      	movs	r2, r4
 8005ce2:	002b      	movs	r3, r5
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	4940      	ldr	r1, [pc, #256]	; (8005de8 <_dtoa_r+0x698>)
 8005ce8:	f7fc f814 	bl	8001d14 <__aeabi_dsub>
 8005cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cf0:	f7fa fbb2 	bl	8000458 <__aeabi_dcmplt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d000      	beq.n	8005cfa <_dtoa_r+0x5aa>
 8005cf8:	e0d2      	b.n	8005ea0 <_dtoa_r+0x750>
 8005cfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cfc:	9a08      	ldr	r2, [sp, #32]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d100      	bne.n	8005d04 <_dtoa_r+0x5b4>
 8005d02:	e770      	b.n	8005be6 <_dtoa_r+0x496>
 8005d04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4b38      	ldr	r3, [pc, #224]	; (8005dec <_dtoa_r+0x69c>)
 8005d0c:	f7fb fd96 	bl	800183c <__aeabi_dmul>
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <_dtoa_r+0x69c>)
 8005d12:	9010      	str	r0, [sp, #64]	; 0x40
 8005d14:	9111      	str	r1, [sp, #68]	; 0x44
 8005d16:	2200      	movs	r2, #0
 8005d18:	0020      	movs	r0, r4
 8005d1a:	0029      	movs	r1, r5
 8005d1c:	f7fb fd8e 	bl	800183c <__aeabi_dmul>
 8005d20:	9b08      	ldr	r3, [sp, #32]
 8005d22:	0004      	movs	r4, r0
 8005d24:	000d      	movs	r5, r1
 8005d26:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d28:	e7be      	b.n	8005ca8 <_dtoa_r+0x558>
 8005d2a:	9808      	ldr	r0, [sp, #32]
 8005d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d2e:	f7fb fd85 	bl	800183c <__aeabi_dmul>
 8005d32:	9a06      	ldr	r2, [sp, #24]
 8005d34:	9b06      	ldr	r3, [sp, #24]
 8005d36:	4694      	mov	ip, r2
 8005d38:	9308      	str	r3, [sp, #32]
 8005d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d3c:	9010      	str	r0, [sp, #64]	; 0x40
 8005d3e:	9111      	str	r1, [sp, #68]	; 0x44
 8005d40:	4463      	add	r3, ip
 8005d42:	9319      	str	r3, [sp, #100]	; 0x64
 8005d44:	0029      	movs	r1, r5
 8005d46:	0020      	movs	r0, r4
 8005d48:	f7fc fb94 	bl	8002474 <__aeabi_d2iz>
 8005d4c:	9017      	str	r0, [sp, #92]	; 0x5c
 8005d4e:	f7fc fbc7 	bl	80024e0 <__aeabi_i2d>
 8005d52:	0002      	movs	r2, r0
 8005d54:	000b      	movs	r3, r1
 8005d56:	0020      	movs	r0, r4
 8005d58:	0029      	movs	r1, r5
 8005d5a:	f7fb ffdb 	bl	8001d14 <__aeabi_dsub>
 8005d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d60:	9a08      	ldr	r2, [sp, #32]
 8005d62:	3330      	adds	r3, #48	; 0x30
 8005d64:	7013      	strb	r3, [r2, #0]
 8005d66:	0013      	movs	r3, r2
 8005d68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	0004      	movs	r4, r0
 8005d6e:	000d      	movs	r5, r1
 8005d70:	9308      	str	r3, [sp, #32]
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d12c      	bne.n	8005dd0 <_dtoa_r+0x680>
 8005d76:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d78:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d7a:	9a06      	ldr	r2, [sp, #24]
 8005d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d7e:	4694      	mov	ip, r2
 8005d80:	4463      	add	r3, ip
 8005d82:	2200      	movs	r2, #0
 8005d84:	9308      	str	r3, [sp, #32]
 8005d86:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <_dtoa_r+0x6b0>)
 8005d88:	f7fa fe1a 	bl	80009c0 <__aeabi_dadd>
 8005d8c:	0002      	movs	r2, r0
 8005d8e:	000b      	movs	r3, r1
 8005d90:	0020      	movs	r0, r4
 8005d92:	0029      	movs	r1, r5
 8005d94:	f7fa fb74 	bl	8000480 <__aeabi_dcmpgt>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d000      	beq.n	8005d9e <_dtoa_r+0x64e>
 8005d9c:	e080      	b.n	8005ea0 <_dtoa_r+0x750>
 8005d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005da2:	2000      	movs	r0, #0
 8005da4:	4916      	ldr	r1, [pc, #88]	; (8005e00 <_dtoa_r+0x6b0>)
 8005da6:	f7fb ffb5 	bl	8001d14 <__aeabi_dsub>
 8005daa:	0002      	movs	r2, r0
 8005dac:	000b      	movs	r3, r1
 8005dae:	0020      	movs	r0, r4
 8005db0:	0029      	movs	r1, r5
 8005db2:	f7fa fb51 	bl	8000458 <__aeabi_dcmplt>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d100      	bne.n	8005dbc <_dtoa_r+0x66c>
 8005dba:	e714      	b.n	8005be6 <_dtoa_r+0x496>
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	9208      	str	r2, [sp, #32]
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	2a30      	cmp	r2, #48	; 0x30
 8005dc8:	d0f8      	beq.n	8005dbc <_dtoa_r+0x66c>
 8005dca:	9308      	str	r3, [sp, #32]
 8005dcc:	9602      	str	r6, [sp, #8]
 8005dce:	e055      	b.n	8005e7c <_dtoa_r+0x72c>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <_dtoa_r+0x69c>)
 8005dd4:	f7fb fd32 	bl	800183c <__aeabi_dmul>
 8005dd8:	0004      	movs	r4, r0
 8005dda:	000d      	movs	r5, r1
 8005ddc:	e7b2      	b.n	8005d44 <_dtoa_r+0x5f4>
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	08007f60 	.word	0x08007f60
 8005de4:	08007f38 	.word	0x08007f38
 8005de8:	3ff00000 	.word	0x3ff00000
 8005dec:	40240000 	.word	0x40240000
 8005df0:	401c0000 	.word	0x401c0000
 8005df4:	fcc00000 	.word	0xfcc00000
 8005df8:	40140000 	.word	0x40140000
 8005dfc:	7cc00000 	.word	0x7cc00000
 8005e00:	3fe00000 	.word	0x3fe00000
 8005e04:	9b07      	ldr	r3, [sp, #28]
 8005e06:	9e06      	ldr	r6, [sp, #24]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	199b      	adds	r3, r3, r6
 8005e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e0e:	9c08      	ldr	r4, [sp, #32]
 8005e10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e16:	0020      	movs	r0, r4
 8005e18:	0029      	movs	r1, r5
 8005e1a:	f7fb f90d 	bl	8001038 <__aeabi_ddiv>
 8005e1e:	f7fc fb29 	bl	8002474 <__aeabi_d2iz>
 8005e22:	9007      	str	r0, [sp, #28]
 8005e24:	f7fc fb5c 	bl	80024e0 <__aeabi_i2d>
 8005e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e2c:	f7fb fd06 	bl	800183c <__aeabi_dmul>
 8005e30:	0002      	movs	r2, r0
 8005e32:	000b      	movs	r3, r1
 8005e34:	0020      	movs	r0, r4
 8005e36:	0029      	movs	r1, r5
 8005e38:	f7fb ff6c 	bl	8001d14 <__aeabi_dsub>
 8005e3c:	0033      	movs	r3, r6
 8005e3e:	9a07      	ldr	r2, [sp, #28]
 8005e40:	3601      	adds	r6, #1
 8005e42:	3230      	adds	r2, #48	; 0x30
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e48:	9608      	str	r6, [sp, #32]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d139      	bne.n	8005ec2 <_dtoa_r+0x772>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	000b      	movs	r3, r1
 8005e52:	f7fa fdb5 	bl	80009c0 <__aeabi_dadd>
 8005e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e5a:	0004      	movs	r4, r0
 8005e5c:	000d      	movs	r5, r1
 8005e5e:	f7fa fb0f 	bl	8000480 <__aeabi_dcmpgt>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d11b      	bne.n	8005e9e <_dtoa_r+0x74e>
 8005e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6a:	0020      	movs	r0, r4
 8005e6c:	0029      	movs	r1, r5
 8005e6e:	f7fa faed 	bl	800044c <__aeabi_dcmpeq>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d002      	beq.n	8005e7c <_dtoa_r+0x72c>
 8005e76:	9b07      	ldr	r3, [sp, #28]
 8005e78:	07db      	lsls	r3, r3, #31
 8005e7a:	d410      	bmi.n	8005e9e <_dtoa_r+0x74e>
 8005e7c:	0038      	movs	r0, r7
 8005e7e:	9905      	ldr	r1, [sp, #20]
 8005e80:	f000 fae6 	bl	8006450 <_Bfree>
 8005e84:	2300      	movs	r3, #0
 8005e86:	9a08      	ldr	r2, [sp, #32]
 8005e88:	9802      	ldr	r0, [sp, #8]
 8005e8a:	7013      	strb	r3, [r2, #0]
 8005e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e8e:	3001      	adds	r0, #1
 8005e90:	6018      	str	r0, [r3, #0]
 8005e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d100      	bne.n	8005e9a <_dtoa_r+0x74a>
 8005e98:	e4a6      	b.n	80057e8 <_dtoa_r+0x98>
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e4a4      	b.n	80057e8 <_dtoa_r+0x98>
 8005e9e:	9e02      	ldr	r6, [sp, #8]
 8005ea0:	9b08      	ldr	r3, [sp, #32]
 8005ea2:	9308      	str	r3, [sp, #32]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	781a      	ldrb	r2, [r3, #0]
 8005ea8:	2a39      	cmp	r2, #57	; 0x39
 8005eaa:	d106      	bne.n	8005eba <_dtoa_r+0x76a>
 8005eac:	9a06      	ldr	r2, [sp, #24]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d1f7      	bne.n	8005ea2 <_dtoa_r+0x752>
 8005eb2:	2230      	movs	r2, #48	; 0x30
 8005eb4:	9906      	ldr	r1, [sp, #24]
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	700a      	strb	r2, [r1, #0]
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	3201      	adds	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e784      	b.n	8005dcc <_dtoa_r+0x67c>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4baa      	ldr	r3, [pc, #680]	; (8006170 <_dtoa_r+0xa20>)
 8005ec6:	f7fb fcb9 	bl	800183c <__aeabi_dmul>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2300      	movs	r3, #0
 8005ece:	0004      	movs	r4, r0
 8005ed0:	000d      	movs	r5, r1
 8005ed2:	f7fa fabb 	bl	800044c <__aeabi_dcmpeq>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d09b      	beq.n	8005e12 <_dtoa_r+0x6c2>
 8005eda:	e7cf      	b.n	8005e7c <_dtoa_r+0x72c>
 8005edc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ede:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005ee0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	d012      	beq.n	8005f0c <_dtoa_r+0x7bc>
 8005ee6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ee8:	2a01      	cmp	r2, #1
 8005eea:	dc66      	bgt.n	8005fba <_dtoa_r+0x86a>
 8005eec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	d05d      	beq.n	8005fae <_dtoa_r+0x85e>
 8005ef2:	4aa0      	ldr	r2, [pc, #640]	; (8006174 <_dtoa_r+0xa24>)
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ef8:	2101      	movs	r1, #1
 8005efa:	18d2      	adds	r2, r2, r3
 8005efc:	920a      	str	r2, [sp, #40]	; 0x28
 8005efe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f00:	0038      	movs	r0, r7
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	930d      	str	r3, [sp, #52]	; 0x34
 8005f06:	f000 fb53 	bl	80065b0 <__i2b>
 8005f0a:	0005      	movs	r5, r0
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	dd0e      	ble.n	8005f2e <_dtoa_r+0x7de>
 8005f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dd0b      	ble.n	8005f2e <_dtoa_r+0x7de>
 8005f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f18:	0023      	movs	r3, r4
 8005f1a:	4294      	cmp	r4, r2
 8005f1c:	dd00      	ble.n	8005f20 <_dtoa_r+0x7d0>
 8005f1e:	0013      	movs	r3, r2
 8005f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f22:	1ae4      	subs	r4, r4, r3
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	920a      	str	r2, [sp, #40]	; 0x28
 8005f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01f      	beq.n	8005f74 <_dtoa_r+0x824>
 8005f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d054      	beq.n	8005fe4 <_dtoa_r+0x894>
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	dd11      	ble.n	8005f62 <_dtoa_r+0x812>
 8005f3e:	0029      	movs	r1, r5
 8005f40:	0032      	movs	r2, r6
 8005f42:	0038      	movs	r0, r7
 8005f44:	f000 fbfa 	bl	800673c <__pow5mult>
 8005f48:	9a05      	ldr	r2, [sp, #20]
 8005f4a:	0001      	movs	r1, r0
 8005f4c:	0005      	movs	r5, r0
 8005f4e:	0038      	movs	r0, r7
 8005f50:	f000 fb44 	bl	80065dc <__multiply>
 8005f54:	9905      	ldr	r1, [sp, #20]
 8005f56:	9014      	str	r0, [sp, #80]	; 0x50
 8005f58:	0038      	movs	r0, r7
 8005f5a:	f000 fa79 	bl	8006450 <_Bfree>
 8005f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f60:	9305      	str	r3, [sp, #20]
 8005f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f64:	1b9a      	subs	r2, r3, r6
 8005f66:	42b3      	cmp	r3, r6
 8005f68:	d004      	beq.n	8005f74 <_dtoa_r+0x824>
 8005f6a:	0038      	movs	r0, r7
 8005f6c:	9905      	ldr	r1, [sp, #20]
 8005f6e:	f000 fbe5 	bl	800673c <__pow5mult>
 8005f72:	9005      	str	r0, [sp, #20]
 8005f74:	2101      	movs	r1, #1
 8005f76:	0038      	movs	r0, r7
 8005f78:	f000 fb1a 	bl	80065b0 <__i2b>
 8005f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f7e:	0006      	movs	r6, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd31      	ble.n	8005fe8 <_dtoa_r+0x898>
 8005f84:	001a      	movs	r2, r3
 8005f86:	0001      	movs	r1, r0
 8005f88:	0038      	movs	r0, r7
 8005f8a:	f000 fbd7 	bl	800673c <__pow5mult>
 8005f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f90:	0006      	movs	r6, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	dd2d      	ble.n	8005ff2 <_dtoa_r+0x8a2>
 8005f96:	2300      	movs	r3, #0
 8005f98:	930e      	str	r3, [sp, #56]	; 0x38
 8005f9a:	6933      	ldr	r3, [r6, #16]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	18f3      	adds	r3, r6, r3
 8005fa2:	6858      	ldr	r0, [r3, #4]
 8005fa4:	f000 fabc 	bl	8006520 <__hi0bits>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	1a18      	subs	r0, r3, r0
 8005fac:	e039      	b.n	8006022 <_dtoa_r+0x8d2>
 8005fae:	2336      	movs	r3, #54	; 0x36
 8005fb0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fb2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005fb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	e79d      	b.n	8005ef6 <_dtoa_r+0x7a6>
 8005fba:	9b07      	ldr	r3, [sp, #28]
 8005fbc:	1e5e      	subs	r6, r3, #1
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc0:	42b3      	cmp	r3, r6
 8005fc2:	db07      	blt.n	8005fd4 <_dtoa_r+0x884>
 8005fc4:	1b9e      	subs	r6, r3, r6
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da93      	bge.n	8005ef6 <_dtoa_r+0x7a6>
 8005fce:	1ae4      	subs	r4, r4, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e790      	b.n	8005ef6 <_dtoa_r+0x7a6>
 8005fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fd8:	1af3      	subs	r3, r6, r3
 8005fda:	18d3      	adds	r3, r2, r3
 8005fdc:	960e      	str	r6, [sp, #56]	; 0x38
 8005fde:	9315      	str	r3, [sp, #84]	; 0x54
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	e7f0      	b.n	8005fc6 <_dtoa_r+0x876>
 8005fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fe6:	e7c0      	b.n	8005f6a <_dtoa_r+0x81a>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	930e      	str	r3, [sp, #56]	; 0x38
 8005fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	dc13      	bgt.n	800601a <_dtoa_r+0x8ca>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff6:	9b08      	ldr	r3, [sp, #32]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10e      	bne.n	800601a <_dtoa_r+0x8ca>
 8005ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffe:	031b      	lsls	r3, r3, #12
 8006000:	d10b      	bne.n	800601a <_dtoa_r+0x8ca>
 8006002:	4b5d      	ldr	r3, [pc, #372]	; (8006178 <_dtoa_r+0xa28>)
 8006004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006006:	4213      	tst	r3, r2
 8006008:	d007      	beq.n	800601a <_dtoa_r+0x8ca>
 800600a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600c:	3301      	adds	r3, #1
 800600e:	930a      	str	r3, [sp, #40]	; 0x28
 8006010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006012:	3301      	adds	r3, #1
 8006014:	930d      	str	r3, [sp, #52]	; 0x34
 8006016:	2301      	movs	r3, #1
 8006018:	930e      	str	r3, [sp, #56]	; 0x38
 800601a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800601c:	2001      	movs	r0, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1bb      	bne.n	8005f9a <_dtoa_r+0x84a>
 8006022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006024:	221f      	movs	r2, #31
 8006026:	1818      	adds	r0, r3, r0
 8006028:	0003      	movs	r3, r0
 800602a:	4013      	ands	r3, r2
 800602c:	4210      	tst	r0, r2
 800602e:	d046      	beq.n	80060be <_dtoa_r+0x96e>
 8006030:	3201      	adds	r2, #1
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	2a04      	cmp	r2, #4
 8006036:	dd3f      	ble.n	80060b8 <_dtoa_r+0x968>
 8006038:	221c      	movs	r2, #28
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603e:	18e4      	adds	r4, r4, r3
 8006040:	18d2      	adds	r2, r2, r3
 8006042:	920a      	str	r2, [sp, #40]	; 0x28
 8006044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006046:	18d3      	adds	r3, r2, r3
 8006048:	930d      	str	r3, [sp, #52]	; 0x34
 800604a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	dd05      	ble.n	800605c <_dtoa_r+0x90c>
 8006050:	001a      	movs	r2, r3
 8006052:	0038      	movs	r0, r7
 8006054:	9905      	ldr	r1, [sp, #20]
 8006056:	f000 fbcd 	bl	80067f4 <__lshift>
 800605a:	9005      	str	r0, [sp, #20]
 800605c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd05      	ble.n	800606e <_dtoa_r+0x91e>
 8006062:	0031      	movs	r1, r6
 8006064:	001a      	movs	r2, r3
 8006066:	0038      	movs	r0, r7
 8006068:	f000 fbc4 	bl	80067f4 <__lshift>
 800606c:	0006      	movs	r6, r0
 800606e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006070:	2b00      	cmp	r3, #0
 8006072:	d026      	beq.n	80060c2 <_dtoa_r+0x972>
 8006074:	0031      	movs	r1, r6
 8006076:	9805      	ldr	r0, [sp, #20]
 8006078:	f000 fc2a 	bl	80068d0 <__mcmp>
 800607c:	2800      	cmp	r0, #0
 800607e:	da20      	bge.n	80060c2 <_dtoa_r+0x972>
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	220a      	movs	r2, #10
 8006084:	3b01      	subs	r3, #1
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	0038      	movs	r0, r7
 800608a:	2300      	movs	r3, #0
 800608c:	9905      	ldr	r1, [sp, #20]
 800608e:	f000 fa03 	bl	8006498 <__multadd>
 8006092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006094:	9005      	str	r0, [sp, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d100      	bne.n	800609c <_dtoa_r+0x94c>
 800609a:	e166      	b.n	800636a <_dtoa_r+0xc1a>
 800609c:	2300      	movs	r3, #0
 800609e:	0029      	movs	r1, r5
 80060a0:	220a      	movs	r2, #10
 80060a2:	0038      	movs	r0, r7
 80060a4:	f000 f9f8 	bl	8006498 <__multadd>
 80060a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060aa:	0005      	movs	r5, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dc47      	bgt.n	8006140 <_dtoa_r+0x9f0>
 80060b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	dc0d      	bgt.n	80060d2 <_dtoa_r+0x982>
 80060b6:	e043      	b.n	8006140 <_dtoa_r+0x9f0>
 80060b8:	2a04      	cmp	r2, #4
 80060ba:	d0c6      	beq.n	800604a <_dtoa_r+0x8fa>
 80060bc:	0013      	movs	r3, r2
 80060be:	331c      	adds	r3, #28
 80060c0:	e7bc      	b.n	800603c <_dtoa_r+0x8ec>
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	dc35      	bgt.n	8006134 <_dtoa_r+0x9e4>
 80060c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	dd32      	ble.n	8006134 <_dtoa_r+0x9e4>
 80060ce:	9b07      	ldr	r3, [sp, #28]
 80060d0:	930c      	str	r3, [sp, #48]	; 0x30
 80060d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10c      	bne.n	80060f2 <_dtoa_r+0x9a2>
 80060d8:	0031      	movs	r1, r6
 80060da:	2205      	movs	r2, #5
 80060dc:	0038      	movs	r0, r7
 80060de:	f000 f9db 	bl	8006498 <__multadd>
 80060e2:	0006      	movs	r6, r0
 80060e4:	0001      	movs	r1, r0
 80060e6:	9805      	ldr	r0, [sp, #20]
 80060e8:	f000 fbf2 	bl	80068d0 <__mcmp>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	dd00      	ble.n	80060f2 <_dtoa_r+0x9a2>
 80060f0:	e5a5      	b.n	8005c3e <_dtoa_r+0x4ee>
 80060f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060f4:	43db      	mvns	r3, r3
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	9b06      	ldr	r3, [sp, #24]
 80060fa:	9308      	str	r3, [sp, #32]
 80060fc:	2400      	movs	r4, #0
 80060fe:	0031      	movs	r1, r6
 8006100:	0038      	movs	r0, r7
 8006102:	f000 f9a5 	bl	8006450 <_Bfree>
 8006106:	2d00      	cmp	r5, #0
 8006108:	d100      	bne.n	800610c <_dtoa_r+0x9bc>
 800610a:	e6b7      	b.n	8005e7c <_dtoa_r+0x72c>
 800610c:	2c00      	cmp	r4, #0
 800610e:	d005      	beq.n	800611c <_dtoa_r+0x9cc>
 8006110:	42ac      	cmp	r4, r5
 8006112:	d003      	beq.n	800611c <_dtoa_r+0x9cc>
 8006114:	0021      	movs	r1, r4
 8006116:	0038      	movs	r0, r7
 8006118:	f000 f99a 	bl	8006450 <_Bfree>
 800611c:	0029      	movs	r1, r5
 800611e:	0038      	movs	r0, r7
 8006120:	f000 f996 	bl	8006450 <_Bfree>
 8006124:	e6aa      	b.n	8005e7c <_dtoa_r+0x72c>
 8006126:	2600      	movs	r6, #0
 8006128:	0035      	movs	r5, r6
 800612a:	e7e2      	b.n	80060f2 <_dtoa_r+0x9a2>
 800612c:	9602      	str	r6, [sp, #8]
 800612e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006130:	0035      	movs	r5, r6
 8006132:	e584      	b.n	8005c3e <_dtoa_r+0x4ee>
 8006134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d100      	bne.n	800613c <_dtoa_r+0x9ec>
 800613a:	e0ce      	b.n	80062da <_dtoa_r+0xb8a>
 800613c:	9b07      	ldr	r3, [sp, #28]
 800613e:	930c      	str	r3, [sp, #48]	; 0x30
 8006140:	2c00      	cmp	r4, #0
 8006142:	dd05      	ble.n	8006150 <_dtoa_r+0xa00>
 8006144:	0029      	movs	r1, r5
 8006146:	0022      	movs	r2, r4
 8006148:	0038      	movs	r0, r7
 800614a:	f000 fb53 	bl	80067f4 <__lshift>
 800614e:	0005      	movs	r5, r0
 8006150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006152:	0028      	movs	r0, r5
 8006154:	2b00      	cmp	r3, #0
 8006156:	d022      	beq.n	800619e <_dtoa_r+0xa4e>
 8006158:	0038      	movs	r0, r7
 800615a:	6869      	ldr	r1, [r5, #4]
 800615c:	f000 f934 	bl	80063c8 <_Balloc>
 8006160:	1e04      	subs	r4, r0, #0
 8006162:	d10f      	bne.n	8006184 <_dtoa_r+0xa34>
 8006164:	0002      	movs	r2, r0
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <_dtoa_r+0xa2c>)
 8006168:	4905      	ldr	r1, [pc, #20]	; (8006180 <_dtoa_r+0xa30>)
 800616a:	f7ff fb06 	bl	800577a <_dtoa_r+0x2a>
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	40240000 	.word	0x40240000
 8006174:	00000433 	.word	0x00000433
 8006178:	7ff00000 	.word	0x7ff00000
 800617c:	08007ecb 	.word	0x08007ecb
 8006180:	000002ea 	.word	0x000002ea
 8006184:	0029      	movs	r1, r5
 8006186:	692b      	ldr	r3, [r5, #16]
 8006188:	310c      	adds	r1, #12
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	0092      	lsls	r2, r2, #2
 800618e:	300c      	adds	r0, #12
 8006190:	f000 f911 	bl	80063b6 <memcpy>
 8006194:	2201      	movs	r2, #1
 8006196:	0021      	movs	r1, r4
 8006198:	0038      	movs	r0, r7
 800619a:	f000 fb2b 	bl	80067f4 <__lshift>
 800619e:	9b06      	ldr	r3, [sp, #24]
 80061a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061a2:	930a      	str	r3, [sp, #40]	; 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	2201      	movs	r2, #1
 80061aa:	002c      	movs	r4, r5
 80061ac:	0005      	movs	r5, r0
 80061ae:	9314      	str	r3, [sp, #80]	; 0x50
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	4013      	ands	r3, r2
 80061b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b6:	0031      	movs	r1, r6
 80061b8:	9805      	ldr	r0, [sp, #20]
 80061ba:	f7ff fa3d 	bl	8005638 <quorem>
 80061be:	0003      	movs	r3, r0
 80061c0:	0021      	movs	r1, r4
 80061c2:	3330      	adds	r3, #48	; 0x30
 80061c4:	900d      	str	r0, [sp, #52]	; 0x34
 80061c6:	9805      	ldr	r0, [sp, #20]
 80061c8:	9307      	str	r3, [sp, #28]
 80061ca:	f000 fb81 	bl	80068d0 <__mcmp>
 80061ce:	002a      	movs	r2, r5
 80061d0:	900e      	str	r0, [sp, #56]	; 0x38
 80061d2:	0031      	movs	r1, r6
 80061d4:	0038      	movs	r0, r7
 80061d6:	f000 fb97 	bl	8006908 <__mdiff>
 80061da:	68c3      	ldr	r3, [r0, #12]
 80061dc:	9008      	str	r0, [sp, #32]
 80061de:	9310      	str	r3, [sp, #64]	; 0x40
 80061e0:	2301      	movs	r3, #1
 80061e2:	930c      	str	r3, [sp, #48]	; 0x30
 80061e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <_dtoa_r+0xaa4>
 80061ea:	0001      	movs	r1, r0
 80061ec:	9805      	ldr	r0, [sp, #20]
 80061ee:	f000 fb6f 	bl	80068d0 <__mcmp>
 80061f2:	900c      	str	r0, [sp, #48]	; 0x30
 80061f4:	0038      	movs	r0, r7
 80061f6:	9908      	ldr	r1, [sp, #32]
 80061f8:	f000 f92a 	bl	8006450 <_Bfree>
 80061fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006200:	3301      	adds	r3, #1
 8006202:	9308      	str	r3, [sp, #32]
 8006204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006206:	4313      	orrs	r3, r2
 8006208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800620a:	4313      	orrs	r3, r2
 800620c:	d10c      	bne.n	8006228 <_dtoa_r+0xad8>
 800620e:	9b07      	ldr	r3, [sp, #28]
 8006210:	2b39      	cmp	r3, #57	; 0x39
 8006212:	d026      	beq.n	8006262 <_dtoa_r+0xb12>
 8006214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006216:	2b00      	cmp	r3, #0
 8006218:	dd02      	ble.n	8006220 <_dtoa_r+0xad0>
 800621a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800621c:	3331      	adds	r3, #49	; 0x31
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006222:	9a07      	ldr	r2, [sp, #28]
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e76a      	b.n	80060fe <_dtoa_r+0x9ae>
 8006228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	db04      	blt.n	8006238 <_dtoa_r+0xae8>
 800622e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006230:	4313      	orrs	r3, r2
 8006232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006234:	4313      	orrs	r3, r2
 8006236:	d11f      	bne.n	8006278 <_dtoa_r+0xb28>
 8006238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800623a:	2b00      	cmp	r3, #0
 800623c:	ddf0      	ble.n	8006220 <_dtoa_r+0xad0>
 800623e:	9905      	ldr	r1, [sp, #20]
 8006240:	2201      	movs	r2, #1
 8006242:	0038      	movs	r0, r7
 8006244:	f000 fad6 	bl	80067f4 <__lshift>
 8006248:	0031      	movs	r1, r6
 800624a:	9005      	str	r0, [sp, #20]
 800624c:	f000 fb40 	bl	80068d0 <__mcmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	dc03      	bgt.n	800625c <_dtoa_r+0xb0c>
 8006254:	d1e4      	bne.n	8006220 <_dtoa_r+0xad0>
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	07db      	lsls	r3, r3, #31
 800625a:	d5e1      	bpl.n	8006220 <_dtoa_r+0xad0>
 800625c:	9b07      	ldr	r3, [sp, #28]
 800625e:	2b39      	cmp	r3, #57	; 0x39
 8006260:	d1db      	bne.n	800621a <_dtoa_r+0xaca>
 8006262:	2339      	movs	r3, #57	; 0x39
 8006264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006266:	7013      	strb	r3, [r2, #0]
 8006268:	9b08      	ldr	r3, [sp, #32]
 800626a:	9308      	str	r3, [sp, #32]
 800626c:	3b01      	subs	r3, #1
 800626e:	781a      	ldrb	r2, [r3, #0]
 8006270:	2a39      	cmp	r2, #57	; 0x39
 8006272:	d068      	beq.n	8006346 <_dtoa_r+0xbf6>
 8006274:	3201      	adds	r2, #1
 8006276:	e7d5      	b.n	8006224 <_dtoa_r+0xad4>
 8006278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd07      	ble.n	800628e <_dtoa_r+0xb3e>
 800627e:	9b07      	ldr	r3, [sp, #28]
 8006280:	2b39      	cmp	r3, #57	; 0x39
 8006282:	d0ee      	beq.n	8006262 <_dtoa_r+0xb12>
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006288:	3301      	adds	r3, #1
 800628a:	7013      	strb	r3, [r2, #0]
 800628c:	e737      	b.n	80060fe <_dtoa_r+0x9ae>
 800628e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006290:	9a07      	ldr	r2, [sp, #28]
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006298:	4293      	cmp	r3, r2
 800629a:	d03e      	beq.n	800631a <_dtoa_r+0xbca>
 800629c:	2300      	movs	r3, #0
 800629e:	220a      	movs	r2, #10
 80062a0:	9905      	ldr	r1, [sp, #20]
 80062a2:	0038      	movs	r0, r7
 80062a4:	f000 f8f8 	bl	8006498 <__multadd>
 80062a8:	2300      	movs	r3, #0
 80062aa:	9005      	str	r0, [sp, #20]
 80062ac:	220a      	movs	r2, #10
 80062ae:	0021      	movs	r1, r4
 80062b0:	0038      	movs	r0, r7
 80062b2:	42ac      	cmp	r4, r5
 80062b4:	d106      	bne.n	80062c4 <_dtoa_r+0xb74>
 80062b6:	f000 f8ef 	bl	8006498 <__multadd>
 80062ba:	0004      	movs	r4, r0
 80062bc:	0005      	movs	r5, r0
 80062be:	9b08      	ldr	r3, [sp, #32]
 80062c0:	930a      	str	r3, [sp, #40]	; 0x28
 80062c2:	e778      	b.n	80061b6 <_dtoa_r+0xa66>
 80062c4:	f000 f8e8 	bl	8006498 <__multadd>
 80062c8:	0029      	movs	r1, r5
 80062ca:	0004      	movs	r4, r0
 80062cc:	2300      	movs	r3, #0
 80062ce:	220a      	movs	r2, #10
 80062d0:	0038      	movs	r0, r7
 80062d2:	f000 f8e1 	bl	8006498 <__multadd>
 80062d6:	0005      	movs	r5, r0
 80062d8:	e7f1      	b.n	80062be <_dtoa_r+0xb6e>
 80062da:	9b07      	ldr	r3, [sp, #28]
 80062dc:	930c      	str	r3, [sp, #48]	; 0x30
 80062de:	2400      	movs	r4, #0
 80062e0:	0031      	movs	r1, r6
 80062e2:	9805      	ldr	r0, [sp, #20]
 80062e4:	f7ff f9a8 	bl	8005638 <quorem>
 80062e8:	9b06      	ldr	r3, [sp, #24]
 80062ea:	3030      	adds	r0, #48	; 0x30
 80062ec:	5518      	strb	r0, [r3, r4]
 80062ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062f0:	3401      	adds	r4, #1
 80062f2:	9007      	str	r0, [sp, #28]
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	dd07      	ble.n	8006308 <_dtoa_r+0xbb8>
 80062f8:	2300      	movs	r3, #0
 80062fa:	220a      	movs	r2, #10
 80062fc:	0038      	movs	r0, r7
 80062fe:	9905      	ldr	r1, [sp, #20]
 8006300:	f000 f8ca 	bl	8006498 <__multadd>
 8006304:	9005      	str	r0, [sp, #20]
 8006306:	e7eb      	b.n	80062e0 <_dtoa_r+0xb90>
 8006308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800630a:	2001      	movs	r0, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	dd00      	ble.n	8006312 <_dtoa_r+0xbc2>
 8006310:	0018      	movs	r0, r3
 8006312:	2400      	movs	r4, #0
 8006314:	9b06      	ldr	r3, [sp, #24]
 8006316:	181b      	adds	r3, r3, r0
 8006318:	9308      	str	r3, [sp, #32]
 800631a:	9905      	ldr	r1, [sp, #20]
 800631c:	2201      	movs	r2, #1
 800631e:	0038      	movs	r0, r7
 8006320:	f000 fa68 	bl	80067f4 <__lshift>
 8006324:	0031      	movs	r1, r6
 8006326:	9005      	str	r0, [sp, #20]
 8006328:	f000 fad2 	bl	80068d0 <__mcmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	dc9b      	bgt.n	8006268 <_dtoa_r+0xb18>
 8006330:	d102      	bne.n	8006338 <_dtoa_r+0xbe8>
 8006332:	9b07      	ldr	r3, [sp, #28]
 8006334:	07db      	lsls	r3, r3, #31
 8006336:	d497      	bmi.n	8006268 <_dtoa_r+0xb18>
 8006338:	9b08      	ldr	r3, [sp, #32]
 800633a:	9308      	str	r3, [sp, #32]
 800633c:	3b01      	subs	r3, #1
 800633e:	781a      	ldrb	r2, [r3, #0]
 8006340:	2a30      	cmp	r2, #48	; 0x30
 8006342:	d0fa      	beq.n	800633a <_dtoa_r+0xbea>
 8006344:	e6db      	b.n	80060fe <_dtoa_r+0x9ae>
 8006346:	9a06      	ldr	r2, [sp, #24]
 8006348:	429a      	cmp	r2, r3
 800634a:	d18e      	bne.n	800626a <_dtoa_r+0xb1a>
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	3301      	adds	r3, #1
 8006350:	9302      	str	r3, [sp, #8]
 8006352:	2331      	movs	r3, #49	; 0x31
 8006354:	e799      	b.n	800628a <_dtoa_r+0xb3a>
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <_dtoa_r+0xc2c>)
 8006358:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	4b08      	ldr	r3, [pc, #32]	; (8006380 <_dtoa_r+0xc30>)
 800635e:	2a00      	cmp	r2, #0
 8006360:	d001      	beq.n	8006366 <_dtoa_r+0xc16>
 8006362:	f7ff fa3f 	bl	80057e4 <_dtoa_r+0x94>
 8006366:	f7ff fa3f 	bl	80057e8 <_dtoa_r+0x98>
 800636a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800636c:	2b00      	cmp	r3, #0
 800636e:	dcb6      	bgt.n	80062de <_dtoa_r+0xb8e>
 8006370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006372:	2b02      	cmp	r3, #2
 8006374:	dd00      	ble.n	8006378 <_dtoa_r+0xc28>
 8006376:	e6ac      	b.n	80060d2 <_dtoa_r+0x982>
 8006378:	e7b1      	b.n	80062de <_dtoa_r+0xb8e>
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	08007e4c 	.word	0x08007e4c
 8006380:	08007e54 	.word	0x08007e54

08006384 <_localeconv_r>:
 8006384:	4800      	ldr	r0, [pc, #0]	; (8006388 <_localeconv_r+0x4>)
 8006386:	4770      	bx	lr
 8006388:	20000160 	.word	0x20000160

0800638c <malloc>:
 800638c:	b510      	push	{r4, lr}
 800638e:	4b03      	ldr	r3, [pc, #12]	; (800639c <malloc+0x10>)
 8006390:	0001      	movs	r1, r0
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	f000 fc4c 	bl	8006c30 <_malloc_r>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	2000000c 	.word	0x2000000c

080063a0 <memchr>:
 80063a0:	b2c9      	uxtb	r1, r1
 80063a2:	1882      	adds	r2, r0, r2
 80063a4:	4290      	cmp	r0, r2
 80063a6:	d101      	bne.n	80063ac <memchr+0xc>
 80063a8:	2000      	movs	r0, #0
 80063aa:	4770      	bx	lr
 80063ac:	7803      	ldrb	r3, [r0, #0]
 80063ae:	428b      	cmp	r3, r1
 80063b0:	d0fb      	beq.n	80063aa <memchr+0xa>
 80063b2:	3001      	adds	r0, #1
 80063b4:	e7f6      	b.n	80063a4 <memchr+0x4>

080063b6 <memcpy>:
 80063b6:	2300      	movs	r3, #0
 80063b8:	b510      	push	{r4, lr}
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xa>
 80063be:	bd10      	pop	{r4, pc}
 80063c0:	5ccc      	ldrb	r4, [r1, r3]
 80063c2:	54c4      	strb	r4, [r0, r3]
 80063c4:	3301      	adds	r3, #1
 80063c6:	e7f8      	b.n	80063ba <memcpy+0x4>

080063c8 <_Balloc>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063cc:	0006      	movs	r6, r0
 80063ce:	000c      	movs	r4, r1
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	d10e      	bne.n	80063f2 <_Balloc+0x2a>
 80063d4:	2010      	movs	r0, #16
 80063d6:	f7ff ffd9 	bl	800638c <malloc>
 80063da:	1e02      	subs	r2, r0, #0
 80063dc:	6270      	str	r0, [r6, #36]	; 0x24
 80063de:	d104      	bne.n	80063ea <_Balloc+0x22>
 80063e0:	2166      	movs	r1, #102	; 0x66
 80063e2:	4b19      	ldr	r3, [pc, #100]	; (8006448 <_Balloc+0x80>)
 80063e4:	4819      	ldr	r0, [pc, #100]	; (800644c <_Balloc+0x84>)
 80063e6:	f000 fe0d 	bl	8007004 <__assert_func>
 80063ea:	6045      	str	r5, [r0, #4]
 80063ec:	6085      	str	r5, [r0, #8]
 80063ee:	6005      	str	r5, [r0, #0]
 80063f0:	60c5      	str	r5, [r0, #12]
 80063f2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80063f4:	68eb      	ldr	r3, [r5, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <_Balloc+0x5a>
 80063fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80063fc:	00a2      	lsls	r2, r4, #2
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	189b      	adds	r3, r3, r2
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	2800      	cmp	r0, #0
 8006406:	d118      	bne.n	800643a <_Balloc+0x72>
 8006408:	2101      	movs	r1, #1
 800640a:	000d      	movs	r5, r1
 800640c:	40a5      	lsls	r5, r4
 800640e:	1d6a      	adds	r2, r5, #5
 8006410:	0030      	movs	r0, r6
 8006412:	0092      	lsls	r2, r2, #2
 8006414:	f000 fb74 	bl	8006b00 <_calloc_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	d00c      	beq.n	8006436 <_Balloc+0x6e>
 800641c:	6044      	str	r4, [r0, #4]
 800641e:	6085      	str	r5, [r0, #8]
 8006420:	e00d      	b.n	800643e <_Balloc+0x76>
 8006422:	2221      	movs	r2, #33	; 0x21
 8006424:	2104      	movs	r1, #4
 8006426:	0030      	movs	r0, r6
 8006428:	f000 fb6a 	bl	8006b00 <_calloc_r>
 800642c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800642e:	60e8      	str	r0, [r5, #12]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e1      	bne.n	80063fa <_Balloc+0x32>
 8006436:	2000      	movs	r0, #0
 8006438:	bd70      	pop	{r4, r5, r6, pc}
 800643a:	6802      	ldr	r2, [r0, #0]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	6103      	str	r3, [r0, #16]
 8006442:	60c3      	str	r3, [r0, #12]
 8006444:	e7f8      	b.n	8006438 <_Balloc+0x70>
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	08007e59 	.word	0x08007e59
 800644c:	08007edc 	.word	0x08007edc

08006450 <_Bfree>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006454:	0005      	movs	r5, r0
 8006456:	000c      	movs	r4, r1
 8006458:	2e00      	cmp	r6, #0
 800645a:	d10e      	bne.n	800647a <_Bfree+0x2a>
 800645c:	2010      	movs	r0, #16
 800645e:	f7ff ff95 	bl	800638c <malloc>
 8006462:	1e02      	subs	r2, r0, #0
 8006464:	6268      	str	r0, [r5, #36]	; 0x24
 8006466:	d104      	bne.n	8006472 <_Bfree+0x22>
 8006468:	218a      	movs	r1, #138	; 0x8a
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <_Bfree+0x40>)
 800646c:	4809      	ldr	r0, [pc, #36]	; (8006494 <_Bfree+0x44>)
 800646e:	f000 fdc9 	bl	8007004 <__assert_func>
 8006472:	6046      	str	r6, [r0, #4]
 8006474:	6086      	str	r6, [r0, #8]
 8006476:	6006      	str	r6, [r0, #0]
 8006478:	60c6      	str	r6, [r0, #12]
 800647a:	2c00      	cmp	r4, #0
 800647c:	d007      	beq.n	800648e <_Bfree+0x3e>
 800647e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006480:	6862      	ldr	r2, [r4, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	189b      	adds	r3, r3, r2
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	601c      	str	r4, [r3, #0]
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	08007e59 	.word	0x08007e59
 8006494:	08007edc 	.word	0x08007edc

08006498 <__multadd>:
 8006498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649a:	000e      	movs	r6, r1
 800649c:	9001      	str	r0, [sp, #4]
 800649e:	000c      	movs	r4, r1
 80064a0:	001d      	movs	r5, r3
 80064a2:	2000      	movs	r0, #0
 80064a4:	690f      	ldr	r7, [r1, #16]
 80064a6:	3614      	adds	r6, #20
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	3001      	adds	r0, #1
 80064ac:	b299      	uxth	r1, r3
 80064ae:	4351      	muls	r1, r2
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	4353      	muls	r3, r2
 80064b4:	1949      	adds	r1, r1, r5
 80064b6:	0c0d      	lsrs	r5, r1, #16
 80064b8:	195b      	adds	r3, r3, r5
 80064ba:	0c1d      	lsrs	r5, r3, #16
 80064bc:	b289      	uxth	r1, r1
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	185b      	adds	r3, r3, r1
 80064c2:	c608      	stmia	r6!, {r3}
 80064c4:	4287      	cmp	r7, r0
 80064c6:	dcef      	bgt.n	80064a8 <__multadd+0x10>
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	d022      	beq.n	8006512 <__multadd+0x7a>
 80064cc:	68a3      	ldr	r3, [r4, #8]
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	dc19      	bgt.n	8006506 <__multadd+0x6e>
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	9801      	ldr	r0, [sp, #4]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	f7ff ff76 	bl	80063c8 <_Balloc>
 80064dc:	1e06      	subs	r6, r0, #0
 80064de:	d105      	bne.n	80064ec <__multadd+0x54>
 80064e0:	0002      	movs	r2, r0
 80064e2:	21b5      	movs	r1, #181	; 0xb5
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <__multadd+0x80>)
 80064e6:	480d      	ldr	r0, [pc, #52]	; (800651c <__multadd+0x84>)
 80064e8:	f000 fd8c 	bl	8007004 <__assert_func>
 80064ec:	0021      	movs	r1, r4
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	310c      	adds	r1, #12
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	0092      	lsls	r2, r2, #2
 80064f6:	300c      	adds	r0, #12
 80064f8:	f7ff ff5d 	bl	80063b6 <memcpy>
 80064fc:	0021      	movs	r1, r4
 80064fe:	9801      	ldr	r0, [sp, #4]
 8006500:	f7ff ffa6 	bl	8006450 <_Bfree>
 8006504:	0034      	movs	r4, r6
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	18e3      	adds	r3, r4, r3
 800650c:	605d      	str	r5, [r3, #4]
 800650e:	1c7b      	adds	r3, r7, #1
 8006510:	6123      	str	r3, [r4, #16]
 8006512:	0020      	movs	r0, r4
 8006514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	08007ecb 	.word	0x08007ecb
 800651c:	08007edc 	.word	0x08007edc

08006520 <__hi0bits>:
 8006520:	0003      	movs	r3, r0
 8006522:	0c02      	lsrs	r2, r0, #16
 8006524:	2000      	movs	r0, #0
 8006526:	4282      	cmp	r2, r0
 8006528:	d101      	bne.n	800652e <__hi0bits+0xe>
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	3010      	adds	r0, #16
 800652e:	0e1a      	lsrs	r2, r3, #24
 8006530:	d101      	bne.n	8006536 <__hi0bits+0x16>
 8006532:	3008      	adds	r0, #8
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	0f1a      	lsrs	r2, r3, #28
 8006538:	d101      	bne.n	800653e <__hi0bits+0x1e>
 800653a:	3004      	adds	r0, #4
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	0f9a      	lsrs	r2, r3, #30
 8006540:	d101      	bne.n	8006546 <__hi0bits+0x26>
 8006542:	3002      	adds	r0, #2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	db03      	blt.n	8006552 <__hi0bits+0x32>
 800654a:	3001      	adds	r0, #1
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	d400      	bmi.n	8006552 <__hi0bits+0x32>
 8006550:	2020      	movs	r0, #32
 8006552:	4770      	bx	lr

08006554 <__lo0bits>:
 8006554:	6803      	ldr	r3, [r0, #0]
 8006556:	0002      	movs	r2, r0
 8006558:	2107      	movs	r1, #7
 800655a:	0018      	movs	r0, r3
 800655c:	4008      	ands	r0, r1
 800655e:	420b      	tst	r3, r1
 8006560:	d00d      	beq.n	800657e <__lo0bits+0x2a>
 8006562:	3906      	subs	r1, #6
 8006564:	2000      	movs	r0, #0
 8006566:	420b      	tst	r3, r1
 8006568:	d105      	bne.n	8006576 <__lo0bits+0x22>
 800656a:	3002      	adds	r0, #2
 800656c:	4203      	tst	r3, r0
 800656e:	d003      	beq.n	8006578 <__lo0bits+0x24>
 8006570:	40cb      	lsrs	r3, r1
 8006572:	0008      	movs	r0, r1
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4770      	bx	lr
 8006578:	089b      	lsrs	r3, r3, #2
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e7fb      	b.n	8006576 <__lo0bits+0x22>
 800657e:	b299      	uxth	r1, r3
 8006580:	2900      	cmp	r1, #0
 8006582:	d101      	bne.n	8006588 <__lo0bits+0x34>
 8006584:	2010      	movs	r0, #16
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	b2d9      	uxtb	r1, r3
 800658a:	2900      	cmp	r1, #0
 800658c:	d101      	bne.n	8006592 <__lo0bits+0x3e>
 800658e:	3008      	adds	r0, #8
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	0719      	lsls	r1, r3, #28
 8006594:	d101      	bne.n	800659a <__lo0bits+0x46>
 8006596:	3004      	adds	r0, #4
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	0799      	lsls	r1, r3, #30
 800659c:	d101      	bne.n	80065a2 <__lo0bits+0x4e>
 800659e:	3002      	adds	r0, #2
 80065a0:	089b      	lsrs	r3, r3, #2
 80065a2:	07d9      	lsls	r1, r3, #31
 80065a4:	d4e9      	bmi.n	800657a <__lo0bits+0x26>
 80065a6:	3001      	adds	r0, #1
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	d1e6      	bne.n	800657a <__lo0bits+0x26>
 80065ac:	2020      	movs	r0, #32
 80065ae:	e7e2      	b.n	8006576 <__lo0bits+0x22>

080065b0 <__i2b>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	000c      	movs	r4, r1
 80065b4:	2101      	movs	r1, #1
 80065b6:	f7ff ff07 	bl	80063c8 <_Balloc>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d106      	bne.n	80065cc <__i2b+0x1c>
 80065be:	21a0      	movs	r1, #160	; 0xa0
 80065c0:	0002      	movs	r2, r0
 80065c2:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <__i2b+0x24>)
 80065c4:	4804      	ldr	r0, [pc, #16]	; (80065d8 <__i2b+0x28>)
 80065c6:	0049      	lsls	r1, r1, #1
 80065c8:	f000 fd1c 	bl	8007004 <__assert_func>
 80065cc:	2301      	movs	r3, #1
 80065ce:	6144      	str	r4, [r0, #20]
 80065d0:	6103      	str	r3, [r0, #16]
 80065d2:	bd10      	pop	{r4, pc}
 80065d4:	08007ecb 	.word	0x08007ecb
 80065d8:	08007edc 	.word	0x08007edc

080065dc <__multiply>:
 80065dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	0014      	movs	r4, r2
 80065e2:	6912      	ldr	r2, [r2, #16]
 80065e4:	000d      	movs	r5, r1
 80065e6:	b089      	sub	sp, #36	; 0x24
 80065e8:	4293      	cmp	r3, r2
 80065ea:	da01      	bge.n	80065f0 <__multiply+0x14>
 80065ec:	0025      	movs	r5, r4
 80065ee:	000c      	movs	r4, r1
 80065f0:	692f      	ldr	r7, [r5, #16]
 80065f2:	6926      	ldr	r6, [r4, #16]
 80065f4:	6869      	ldr	r1, [r5, #4]
 80065f6:	19bb      	adds	r3, r7, r6
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	68ab      	ldr	r3, [r5, #8]
 80065fc:	19ba      	adds	r2, r7, r6
 80065fe:	4293      	cmp	r3, r2
 8006600:	da00      	bge.n	8006604 <__multiply+0x28>
 8006602:	3101      	adds	r1, #1
 8006604:	f7ff fee0 	bl	80063c8 <_Balloc>
 8006608:	9001      	str	r0, [sp, #4]
 800660a:	2800      	cmp	r0, #0
 800660c:	d106      	bne.n	800661c <__multiply+0x40>
 800660e:	215e      	movs	r1, #94	; 0x5e
 8006610:	0002      	movs	r2, r0
 8006612:	4b48      	ldr	r3, [pc, #288]	; (8006734 <__multiply+0x158>)
 8006614:	4848      	ldr	r0, [pc, #288]	; (8006738 <__multiply+0x15c>)
 8006616:	31ff      	adds	r1, #255	; 0xff
 8006618:	f000 fcf4 	bl	8007004 <__assert_func>
 800661c:	9b01      	ldr	r3, [sp, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	3314      	adds	r3, #20
 8006622:	469c      	mov	ip, r3
 8006624:	19bb      	adds	r3, r7, r6
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4463      	add	r3, ip
 800662a:	9303      	str	r3, [sp, #12]
 800662c:	4663      	mov	r3, ip
 800662e:	9903      	ldr	r1, [sp, #12]
 8006630:	428b      	cmp	r3, r1
 8006632:	d32c      	bcc.n	800668e <__multiply+0xb2>
 8006634:	002b      	movs	r3, r5
 8006636:	0022      	movs	r2, r4
 8006638:	3314      	adds	r3, #20
 800663a:	00bf      	lsls	r7, r7, #2
 800663c:	3214      	adds	r2, #20
 800663e:	9306      	str	r3, [sp, #24]
 8006640:	00b6      	lsls	r6, r6, #2
 8006642:	19db      	adds	r3, r3, r7
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	1993      	adds	r3, r2, r6
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	2304      	movs	r3, #4
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	002b      	movs	r3, r5
 8006650:	9904      	ldr	r1, [sp, #16]
 8006652:	3315      	adds	r3, #21
 8006654:	9200      	str	r2, [sp, #0]
 8006656:	4299      	cmp	r1, r3
 8006658:	d305      	bcc.n	8006666 <__multiply+0x8a>
 800665a:	1b4b      	subs	r3, r1, r5
 800665c:	3b15      	subs	r3, #21
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	3301      	adds	r3, #1
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	9b07      	ldr	r3, [sp, #28]
 8006668:	9a00      	ldr	r2, [sp, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d311      	bcc.n	8006692 <__multiply+0xb6>
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	dd06      	ble.n	8006682 <__multiply+0xa6>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	3b04      	subs	r3, #4
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d053      	beq.n	800672a <__multiply+0x14e>
 8006682:	9b01      	ldr	r3, [sp, #4]
 8006684:	9a02      	ldr	r2, [sp, #8]
 8006686:	0018      	movs	r0, r3
 8006688:	611a      	str	r2, [r3, #16]
 800668a:	b009      	add	sp, #36	; 0x24
 800668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668e:	c304      	stmia	r3!, {r2}
 8006690:	e7cd      	b.n	800662e <__multiply+0x52>
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	b298      	uxth	r0, r3
 8006698:	2800      	cmp	r0, #0
 800669a:	d01b      	beq.n	80066d4 <__multiply+0xf8>
 800669c:	4667      	mov	r7, ip
 800669e:	2400      	movs	r4, #0
 80066a0:	9e06      	ldr	r6, [sp, #24]
 80066a2:	ce02      	ldmia	r6!, {r1}
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	b28b      	uxth	r3, r1
 80066a8:	4343      	muls	r3, r0
 80066aa:	b292      	uxth	r2, r2
 80066ac:	189b      	adds	r3, r3, r2
 80066ae:	191b      	adds	r3, r3, r4
 80066b0:	0c0c      	lsrs	r4, r1, #16
 80066b2:	4344      	muls	r4, r0
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	0c11      	lsrs	r1, r2, #16
 80066b8:	1861      	adds	r1, r4, r1
 80066ba:	0c1c      	lsrs	r4, r3, #16
 80066bc:	1909      	adds	r1, r1, r4
 80066be:	0c0c      	lsrs	r4, r1, #16
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	0409      	lsls	r1, r1, #16
 80066c4:	430b      	orrs	r3, r1
 80066c6:	c708      	stmia	r7!, {r3}
 80066c8:	9b04      	ldr	r3, [sp, #16]
 80066ca:	42b3      	cmp	r3, r6
 80066cc:	d8e9      	bhi.n	80066a2 <__multiply+0xc6>
 80066ce:	4663      	mov	r3, ip
 80066d0:	9a05      	ldr	r2, [sp, #20]
 80066d2:	509c      	str	r4, [r3, r2]
 80066d4:	9b00      	ldr	r3, [sp, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	0c1e      	lsrs	r6, r3, #16
 80066da:	d020      	beq.n	800671e <__multiply+0x142>
 80066dc:	4663      	mov	r3, ip
 80066de:	002c      	movs	r4, r5
 80066e0:	4660      	mov	r0, ip
 80066e2:	2700      	movs	r7, #0
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3414      	adds	r4, #20
 80066e8:	6822      	ldr	r2, [r4, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	b291      	uxth	r1, r2
 80066ee:	4371      	muls	r1, r6
 80066f0:	6802      	ldr	r2, [r0, #0]
 80066f2:	0c12      	lsrs	r2, r2, #16
 80066f4:	1889      	adds	r1, r1, r2
 80066f6:	19cf      	adds	r7, r1, r7
 80066f8:	0439      	lsls	r1, r7, #16
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	cc02      	ldmia	r4!, {r1}
 8006700:	6843      	ldr	r3, [r0, #4]
 8006702:	0c09      	lsrs	r1, r1, #16
 8006704:	4371      	muls	r1, r6
 8006706:	b29b      	uxth	r3, r3
 8006708:	0c3f      	lsrs	r7, r7, #16
 800670a:	18cb      	adds	r3, r1, r3
 800670c:	9a04      	ldr	r2, [sp, #16]
 800670e:	19db      	adds	r3, r3, r7
 8006710:	0c1f      	lsrs	r7, r3, #16
 8006712:	3004      	adds	r0, #4
 8006714:	42a2      	cmp	r2, r4
 8006716:	d8e7      	bhi.n	80066e8 <__multiply+0x10c>
 8006718:	4662      	mov	r2, ip
 800671a:	9905      	ldr	r1, [sp, #20]
 800671c:	5053      	str	r3, [r2, r1]
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	3304      	adds	r3, #4
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	2304      	movs	r3, #4
 8006726:	449c      	add	ip, r3
 8006728:	e79d      	b.n	8006666 <__multiply+0x8a>
 800672a:	9b02      	ldr	r3, [sp, #8]
 800672c:	3b01      	subs	r3, #1
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	e79d      	b.n	800666e <__multiply+0x92>
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	08007ecb 	.word	0x08007ecb
 8006738:	08007edc 	.word	0x08007edc

0800673c <__pow5mult>:
 800673c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800673e:	2303      	movs	r3, #3
 8006740:	0015      	movs	r5, r2
 8006742:	0007      	movs	r7, r0
 8006744:	000e      	movs	r6, r1
 8006746:	401a      	ands	r2, r3
 8006748:	421d      	tst	r5, r3
 800674a:	d008      	beq.n	800675e <__pow5mult+0x22>
 800674c:	4925      	ldr	r1, [pc, #148]	; (80067e4 <__pow5mult+0xa8>)
 800674e:	3a01      	subs	r2, #1
 8006750:	0092      	lsls	r2, r2, #2
 8006752:	5852      	ldr	r2, [r2, r1]
 8006754:	2300      	movs	r3, #0
 8006756:	0031      	movs	r1, r6
 8006758:	f7ff fe9e 	bl	8006498 <__multadd>
 800675c:	0006      	movs	r6, r0
 800675e:	10ad      	asrs	r5, r5, #2
 8006760:	d03d      	beq.n	80067de <__pow5mult+0xa2>
 8006762:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006764:	2c00      	cmp	r4, #0
 8006766:	d10f      	bne.n	8006788 <__pow5mult+0x4c>
 8006768:	2010      	movs	r0, #16
 800676a:	f7ff fe0f 	bl	800638c <malloc>
 800676e:	1e02      	subs	r2, r0, #0
 8006770:	6278      	str	r0, [r7, #36]	; 0x24
 8006772:	d105      	bne.n	8006780 <__pow5mult+0x44>
 8006774:	21d7      	movs	r1, #215	; 0xd7
 8006776:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <__pow5mult+0xac>)
 8006778:	481c      	ldr	r0, [pc, #112]	; (80067ec <__pow5mult+0xb0>)
 800677a:	0049      	lsls	r1, r1, #1
 800677c:	f000 fc42 	bl	8007004 <__assert_func>
 8006780:	6044      	str	r4, [r0, #4]
 8006782:	6084      	str	r4, [r0, #8]
 8006784:	6004      	str	r4, [r0, #0]
 8006786:	60c4      	str	r4, [r0, #12]
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	689c      	ldr	r4, [r3, #8]
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	2c00      	cmp	r4, #0
 8006790:	d108      	bne.n	80067a4 <__pow5mult+0x68>
 8006792:	0038      	movs	r0, r7
 8006794:	4916      	ldr	r1, [pc, #88]	; (80067f0 <__pow5mult+0xb4>)
 8006796:	f7ff ff0b 	bl	80065b0 <__i2b>
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	0004      	movs	r4, r0
 800679e:	6098      	str	r0, [r3, #8]
 80067a0:	2300      	movs	r3, #0
 80067a2:	6003      	str	r3, [r0, #0]
 80067a4:	2301      	movs	r3, #1
 80067a6:	421d      	tst	r5, r3
 80067a8:	d00a      	beq.n	80067c0 <__pow5mult+0x84>
 80067aa:	0031      	movs	r1, r6
 80067ac:	0022      	movs	r2, r4
 80067ae:	0038      	movs	r0, r7
 80067b0:	f7ff ff14 	bl	80065dc <__multiply>
 80067b4:	0031      	movs	r1, r6
 80067b6:	9001      	str	r0, [sp, #4]
 80067b8:	0038      	movs	r0, r7
 80067ba:	f7ff fe49 	bl	8006450 <_Bfree>
 80067be:	9e01      	ldr	r6, [sp, #4]
 80067c0:	106d      	asrs	r5, r5, #1
 80067c2:	d00c      	beq.n	80067de <__pow5mult+0xa2>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d107      	bne.n	80067da <__pow5mult+0x9e>
 80067ca:	0022      	movs	r2, r4
 80067cc:	0021      	movs	r1, r4
 80067ce:	0038      	movs	r0, r7
 80067d0:	f7ff ff04 	bl	80065dc <__multiply>
 80067d4:	2300      	movs	r3, #0
 80067d6:	6020      	str	r0, [r4, #0]
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	0004      	movs	r4, r0
 80067dc:	e7e2      	b.n	80067a4 <__pow5mult+0x68>
 80067de:	0030      	movs	r0, r6
 80067e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	08008028 	.word	0x08008028
 80067e8:	08007e59 	.word	0x08007e59
 80067ec:	08007edc 	.word	0x08007edc
 80067f0:	00000271 	.word	0x00000271

080067f4 <__lshift>:
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f6:	000c      	movs	r4, r1
 80067f8:	0017      	movs	r7, r2
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	1155      	asrs	r5, r2, #5
 80067fe:	b087      	sub	sp, #28
 8006800:	18eb      	adds	r3, r5, r3
 8006802:	9302      	str	r3, [sp, #8]
 8006804:	3301      	adds	r3, #1
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	6849      	ldr	r1, [r1, #4]
 800680a:	68a3      	ldr	r3, [r4, #8]
 800680c:	9004      	str	r0, [sp, #16]
 800680e:	9a01      	ldr	r2, [sp, #4]
 8006810:	4293      	cmp	r3, r2
 8006812:	db10      	blt.n	8006836 <__lshift+0x42>
 8006814:	9804      	ldr	r0, [sp, #16]
 8006816:	f7ff fdd7 	bl	80063c8 <_Balloc>
 800681a:	2300      	movs	r3, #0
 800681c:	0002      	movs	r2, r0
 800681e:	0006      	movs	r6, r0
 8006820:	0019      	movs	r1, r3
 8006822:	3214      	adds	r2, #20
 8006824:	4298      	cmp	r0, r3
 8006826:	d10c      	bne.n	8006842 <__lshift+0x4e>
 8006828:	21da      	movs	r1, #218	; 0xda
 800682a:	0002      	movs	r2, r0
 800682c:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <__lshift+0xd4>)
 800682e:	4827      	ldr	r0, [pc, #156]	; (80068cc <__lshift+0xd8>)
 8006830:	31ff      	adds	r1, #255	; 0xff
 8006832:	f000 fbe7 	bl	8007004 <__assert_func>
 8006836:	3101      	adds	r1, #1
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	e7e8      	b.n	800680e <__lshift+0x1a>
 800683c:	0098      	lsls	r0, r3, #2
 800683e:	5011      	str	r1, [r2, r0]
 8006840:	3301      	adds	r3, #1
 8006842:	42ab      	cmp	r3, r5
 8006844:	dbfa      	blt.n	800683c <__lshift+0x48>
 8006846:	43eb      	mvns	r3, r5
 8006848:	17db      	asrs	r3, r3, #31
 800684a:	401d      	ands	r5, r3
 800684c:	211f      	movs	r1, #31
 800684e:	0023      	movs	r3, r4
 8006850:	0038      	movs	r0, r7
 8006852:	00ad      	lsls	r5, r5, #2
 8006854:	1955      	adds	r5, r2, r5
 8006856:	6922      	ldr	r2, [r4, #16]
 8006858:	3314      	adds	r3, #20
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	4008      	ands	r0, r1
 800685e:	4684      	mov	ip, r0
 8006860:	189a      	adds	r2, r3, r2
 8006862:	420f      	tst	r7, r1
 8006864:	d02a      	beq.n	80068bc <__lshift+0xc8>
 8006866:	3101      	adds	r1, #1
 8006868:	1a09      	subs	r1, r1, r0
 800686a:	9105      	str	r1, [sp, #20]
 800686c:	2100      	movs	r1, #0
 800686e:	9503      	str	r5, [sp, #12]
 8006870:	4667      	mov	r7, ip
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	40b8      	lsls	r0, r7
 8006876:	4301      	orrs	r1, r0
 8006878:	9803      	ldr	r0, [sp, #12]
 800687a:	c002      	stmia	r0!, {r1}
 800687c:	cb02      	ldmia	r3!, {r1}
 800687e:	9003      	str	r0, [sp, #12]
 8006880:	9805      	ldr	r0, [sp, #20]
 8006882:	40c1      	lsrs	r1, r0
 8006884:	429a      	cmp	r2, r3
 8006886:	d8f3      	bhi.n	8006870 <__lshift+0x7c>
 8006888:	0020      	movs	r0, r4
 800688a:	3015      	adds	r0, #21
 800688c:	2304      	movs	r3, #4
 800688e:	4282      	cmp	r2, r0
 8006890:	d304      	bcc.n	800689c <__lshift+0xa8>
 8006892:	1b13      	subs	r3, r2, r4
 8006894:	3b15      	subs	r3, #21
 8006896:	089b      	lsrs	r3, r3, #2
 8006898:	3301      	adds	r3, #1
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	50e9      	str	r1, [r5, r3]
 800689e:	2900      	cmp	r1, #0
 80068a0:	d002      	beq.n	80068a8 <__lshift+0xb4>
 80068a2:	9b02      	ldr	r3, [sp, #8]
 80068a4:	3302      	adds	r3, #2
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	9b01      	ldr	r3, [sp, #4]
 80068aa:	9804      	ldr	r0, [sp, #16]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	0021      	movs	r1, r4
 80068b0:	6133      	str	r3, [r6, #16]
 80068b2:	f7ff fdcd 	bl	8006450 <_Bfree>
 80068b6:	0030      	movs	r0, r6
 80068b8:	b007      	add	sp, #28
 80068ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068bc:	cb02      	ldmia	r3!, {r1}
 80068be:	c502      	stmia	r5!, {r1}
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d8fb      	bhi.n	80068bc <__lshift+0xc8>
 80068c4:	e7f0      	b.n	80068a8 <__lshift+0xb4>
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	08007ecb 	.word	0x08007ecb
 80068cc:	08007edc 	.word	0x08007edc

080068d0 <__mcmp>:
 80068d0:	6902      	ldr	r2, [r0, #16]
 80068d2:	690b      	ldr	r3, [r1, #16]
 80068d4:	b530      	push	{r4, r5, lr}
 80068d6:	0004      	movs	r4, r0
 80068d8:	1ad0      	subs	r0, r2, r3
 80068da:	429a      	cmp	r2, r3
 80068dc:	d10d      	bne.n	80068fa <__mcmp+0x2a>
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	3414      	adds	r4, #20
 80068e2:	3114      	adds	r1, #20
 80068e4:	18e2      	adds	r2, r4, r3
 80068e6:	18c9      	adds	r1, r1, r3
 80068e8:	3a04      	subs	r2, #4
 80068ea:	3904      	subs	r1, #4
 80068ec:	6815      	ldr	r5, [r2, #0]
 80068ee:	680b      	ldr	r3, [r1, #0]
 80068f0:	429d      	cmp	r5, r3
 80068f2:	d003      	beq.n	80068fc <__mcmp+0x2c>
 80068f4:	2001      	movs	r0, #1
 80068f6:	429d      	cmp	r5, r3
 80068f8:	d303      	bcc.n	8006902 <__mcmp+0x32>
 80068fa:	bd30      	pop	{r4, r5, pc}
 80068fc:	4294      	cmp	r4, r2
 80068fe:	d3f3      	bcc.n	80068e8 <__mcmp+0x18>
 8006900:	e7fb      	b.n	80068fa <__mcmp+0x2a>
 8006902:	4240      	negs	r0, r0
 8006904:	e7f9      	b.n	80068fa <__mcmp+0x2a>
	...

08006908 <__mdiff>:
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	000e      	movs	r6, r1
 800690c:	0007      	movs	r7, r0
 800690e:	0011      	movs	r1, r2
 8006910:	0030      	movs	r0, r6
 8006912:	b087      	sub	sp, #28
 8006914:	0014      	movs	r4, r2
 8006916:	f7ff ffdb 	bl	80068d0 <__mcmp>
 800691a:	1e05      	subs	r5, r0, #0
 800691c:	d110      	bne.n	8006940 <__mdiff+0x38>
 800691e:	0001      	movs	r1, r0
 8006920:	0038      	movs	r0, r7
 8006922:	f7ff fd51 	bl	80063c8 <_Balloc>
 8006926:	1e02      	subs	r2, r0, #0
 8006928:	d104      	bne.n	8006934 <__mdiff+0x2c>
 800692a:	4b40      	ldr	r3, [pc, #256]	; (8006a2c <__mdiff+0x124>)
 800692c:	4940      	ldr	r1, [pc, #256]	; (8006a30 <__mdiff+0x128>)
 800692e:	4841      	ldr	r0, [pc, #260]	; (8006a34 <__mdiff+0x12c>)
 8006930:	f000 fb68 	bl	8007004 <__assert_func>
 8006934:	2301      	movs	r3, #1
 8006936:	6145      	str	r5, [r0, #20]
 8006938:	6103      	str	r3, [r0, #16]
 800693a:	0010      	movs	r0, r2
 800693c:	b007      	add	sp, #28
 800693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006940:	2301      	movs	r3, #1
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	2800      	cmp	r0, #0
 8006946:	db04      	blt.n	8006952 <__mdiff+0x4a>
 8006948:	0023      	movs	r3, r4
 800694a:	0034      	movs	r4, r6
 800694c:	001e      	movs	r6, r3
 800694e:	2300      	movs	r3, #0
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	0038      	movs	r0, r7
 8006954:	6861      	ldr	r1, [r4, #4]
 8006956:	f7ff fd37 	bl	80063c8 <_Balloc>
 800695a:	1e02      	subs	r2, r0, #0
 800695c:	d103      	bne.n	8006966 <__mdiff+0x5e>
 800695e:	2190      	movs	r1, #144	; 0x90
 8006960:	4b32      	ldr	r3, [pc, #200]	; (8006a2c <__mdiff+0x124>)
 8006962:	0089      	lsls	r1, r1, #2
 8006964:	e7e3      	b.n	800692e <__mdiff+0x26>
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	2700      	movs	r7, #0
 800696a:	60c3      	str	r3, [r0, #12]
 800696c:	6920      	ldr	r0, [r4, #16]
 800696e:	3414      	adds	r4, #20
 8006970:	9401      	str	r4, [sp, #4]
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	0084      	lsls	r4, r0, #2
 8006976:	191b      	adds	r3, r3, r4
 8006978:	0034      	movs	r4, r6
 800697a:	9302      	str	r3, [sp, #8]
 800697c:	6933      	ldr	r3, [r6, #16]
 800697e:	3414      	adds	r4, #20
 8006980:	0099      	lsls	r1, r3, #2
 8006982:	1863      	adds	r3, r4, r1
 8006984:	9303      	str	r3, [sp, #12]
 8006986:	0013      	movs	r3, r2
 8006988:	3314      	adds	r3, #20
 800698a:	469c      	mov	ip, r3
 800698c:	9305      	str	r3, [sp, #20]
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	cc02      	ldmia	r4!, {r1}
 8006996:	cb20      	ldmia	r3!, {r5}
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	b2ab      	uxth	r3, r5
 800699c:	19df      	adds	r7, r3, r7
 800699e:	b28b      	uxth	r3, r1
 80069a0:	1afb      	subs	r3, r7, r3
 80069a2:	0c09      	lsrs	r1, r1, #16
 80069a4:	0c2d      	lsrs	r5, r5, #16
 80069a6:	1a6d      	subs	r5, r5, r1
 80069a8:	1419      	asrs	r1, r3, #16
 80069aa:	186d      	adds	r5, r5, r1
 80069ac:	4661      	mov	r1, ip
 80069ae:	142f      	asrs	r7, r5, #16
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	042d      	lsls	r5, r5, #16
 80069b4:	432b      	orrs	r3, r5
 80069b6:	c108      	stmia	r1!, {r3}
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	468c      	mov	ip, r1
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d8e8      	bhi.n	8006992 <__mdiff+0x8a>
 80069c0:	0031      	movs	r1, r6
 80069c2:	9c03      	ldr	r4, [sp, #12]
 80069c4:	3115      	adds	r1, #21
 80069c6:	2304      	movs	r3, #4
 80069c8:	428c      	cmp	r4, r1
 80069ca:	d304      	bcc.n	80069d6 <__mdiff+0xce>
 80069cc:	1ba3      	subs	r3, r4, r6
 80069ce:	3b15      	subs	r3, #21
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	3301      	adds	r3, #1
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	9901      	ldr	r1, [sp, #4]
 80069d8:	18cc      	adds	r4, r1, r3
 80069da:	9905      	ldr	r1, [sp, #20]
 80069dc:	0026      	movs	r6, r4
 80069de:	18cb      	adds	r3, r1, r3
 80069e0:	469c      	mov	ip, r3
 80069e2:	9902      	ldr	r1, [sp, #8]
 80069e4:	428e      	cmp	r6, r1
 80069e6:	d310      	bcc.n	8006a0a <__mdiff+0x102>
 80069e8:	9e02      	ldr	r6, [sp, #8]
 80069ea:	1ee1      	subs	r1, r4, #3
 80069ec:	2500      	movs	r5, #0
 80069ee:	428e      	cmp	r6, r1
 80069f0:	d304      	bcc.n	80069fc <__mdiff+0xf4>
 80069f2:	0031      	movs	r1, r6
 80069f4:	3103      	adds	r1, #3
 80069f6:	1b0c      	subs	r4, r1, r4
 80069f8:	08a4      	lsrs	r4, r4, #2
 80069fa:	00a5      	lsls	r5, r4, #2
 80069fc:	195b      	adds	r3, r3, r5
 80069fe:	3b04      	subs	r3, #4
 8006a00:	6819      	ldr	r1, [r3, #0]
 8006a02:	2900      	cmp	r1, #0
 8006a04:	d00f      	beq.n	8006a26 <__mdiff+0x11e>
 8006a06:	6110      	str	r0, [r2, #16]
 8006a08:	e797      	b.n	800693a <__mdiff+0x32>
 8006a0a:	ce02      	ldmia	r6!, {r1}
 8006a0c:	b28d      	uxth	r5, r1
 8006a0e:	19ed      	adds	r5, r5, r7
 8006a10:	0c0f      	lsrs	r7, r1, #16
 8006a12:	1429      	asrs	r1, r5, #16
 8006a14:	1879      	adds	r1, r7, r1
 8006a16:	140f      	asrs	r7, r1, #16
 8006a18:	b2ad      	uxth	r5, r5
 8006a1a:	0409      	lsls	r1, r1, #16
 8006a1c:	430d      	orrs	r5, r1
 8006a1e:	4661      	mov	r1, ip
 8006a20:	c120      	stmia	r1!, {r5}
 8006a22:	468c      	mov	ip, r1
 8006a24:	e7dd      	b.n	80069e2 <__mdiff+0xda>
 8006a26:	3801      	subs	r0, #1
 8006a28:	e7e9      	b.n	80069fe <__mdiff+0xf6>
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	08007ecb 	.word	0x08007ecb
 8006a30:	00000232 	.word	0x00000232
 8006a34:	08007edc 	.word	0x08007edc

08006a38 <__d2b>:
 8006a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	0014      	movs	r4, r2
 8006a3e:	001e      	movs	r6, r3
 8006a40:	9f08      	ldr	r7, [sp, #32]
 8006a42:	f7ff fcc1 	bl	80063c8 <_Balloc>
 8006a46:	1e05      	subs	r5, r0, #0
 8006a48:	d105      	bne.n	8006a56 <__d2b+0x1e>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	4b26      	ldr	r3, [pc, #152]	; (8006ae8 <__d2b+0xb0>)
 8006a4e:	4927      	ldr	r1, [pc, #156]	; (8006aec <__d2b+0xb4>)
 8006a50:	4827      	ldr	r0, [pc, #156]	; (8006af0 <__d2b+0xb8>)
 8006a52:	f000 fad7 	bl	8007004 <__assert_func>
 8006a56:	0333      	lsls	r3, r6, #12
 8006a58:	0076      	lsls	r6, r6, #1
 8006a5a:	0b1b      	lsrs	r3, r3, #12
 8006a5c:	0d76      	lsrs	r6, r6, #21
 8006a5e:	d124      	bne.n	8006aaa <__d2b+0x72>
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	d027      	beq.n	8006ab6 <__d2b+0x7e>
 8006a66:	4668      	mov	r0, sp
 8006a68:	9400      	str	r4, [sp, #0]
 8006a6a:	f7ff fd73 	bl	8006554 <__lo0bits>
 8006a6e:	9c00      	ldr	r4, [sp, #0]
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d01e      	beq.n	8006ab2 <__d2b+0x7a>
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	2120      	movs	r1, #32
 8006a78:	001a      	movs	r2, r3
 8006a7a:	1a09      	subs	r1, r1, r0
 8006a7c:	408a      	lsls	r2, r1
 8006a7e:	40c3      	lsrs	r3, r0
 8006a80:	4322      	orrs	r2, r4
 8006a82:	616a      	str	r2, [r5, #20]
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	9c01      	ldr	r4, [sp, #4]
 8006a88:	61ac      	str	r4, [r5, #24]
 8006a8a:	1e63      	subs	r3, r4, #1
 8006a8c:	419c      	sbcs	r4, r3
 8006a8e:	3401      	adds	r4, #1
 8006a90:	612c      	str	r4, [r5, #16]
 8006a92:	2e00      	cmp	r6, #0
 8006a94:	d018      	beq.n	8006ac8 <__d2b+0x90>
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <__d2b+0xbc>)
 8006a98:	18f6      	adds	r6, r6, r3
 8006a9a:	2335      	movs	r3, #53	; 0x35
 8006a9c:	1836      	adds	r6, r6, r0
 8006a9e:	1a18      	subs	r0, r3, r0
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	603e      	str	r6, [r7, #0]
 8006aa4:	6018      	str	r0, [r3, #0]
 8006aa6:	0028      	movs	r0, r5
 8006aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aaa:	2280      	movs	r2, #128	; 0x80
 8006aac:	0352      	lsls	r2, r2, #13
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	e7d6      	b.n	8006a60 <__d2b+0x28>
 8006ab2:	616c      	str	r4, [r5, #20]
 8006ab4:	e7e7      	b.n	8006a86 <__d2b+0x4e>
 8006ab6:	a801      	add	r0, sp, #4
 8006ab8:	f7ff fd4c 	bl	8006554 <__lo0bits>
 8006abc:	2401      	movs	r4, #1
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	612c      	str	r4, [r5, #16]
 8006ac2:	616b      	str	r3, [r5, #20]
 8006ac4:	3020      	adds	r0, #32
 8006ac6:	e7e4      	b.n	8006a92 <__d2b+0x5a>
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <__d2b+0xc0>)
 8006aca:	18c0      	adds	r0, r0, r3
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <__d2b+0xc4>)
 8006ace:	6038      	str	r0, [r7, #0]
 8006ad0:	18e3      	adds	r3, r4, r3
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	18eb      	adds	r3, r5, r3
 8006ad6:	6958      	ldr	r0, [r3, #20]
 8006ad8:	f7ff fd22 	bl	8006520 <__hi0bits>
 8006adc:	0164      	lsls	r4, r4, #5
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	1a24      	subs	r4, r4, r0
 8006ae2:	601c      	str	r4, [r3, #0]
 8006ae4:	e7df      	b.n	8006aa6 <__d2b+0x6e>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	08007ecb 	.word	0x08007ecb
 8006aec:	0000030a 	.word	0x0000030a
 8006af0:	08007edc 	.word	0x08007edc
 8006af4:	fffffbcd 	.word	0xfffffbcd
 8006af8:	fffffbce 	.word	0xfffffbce
 8006afc:	3fffffff 	.word	0x3fffffff

08006b00 <_calloc_r>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	0c13      	lsrs	r3, r2, #16
 8006b04:	0c0d      	lsrs	r5, r1, #16
 8006b06:	d11e      	bne.n	8006b46 <_calloc_r+0x46>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10c      	bne.n	8006b26 <_calloc_r+0x26>
 8006b0c:	b289      	uxth	r1, r1
 8006b0e:	b294      	uxth	r4, r2
 8006b10:	434c      	muls	r4, r1
 8006b12:	0021      	movs	r1, r4
 8006b14:	f000 f88c 	bl	8006c30 <_malloc_r>
 8006b18:	1e05      	subs	r5, r0, #0
 8006b1a:	d01b      	beq.n	8006b54 <_calloc_r+0x54>
 8006b1c:	0022      	movs	r2, r4
 8006b1e:	2100      	movs	r1, #0
 8006b20:	f7fe f8f4 	bl	8004d0c <memset>
 8006b24:	e016      	b.n	8006b54 <_calloc_r+0x54>
 8006b26:	1c1d      	adds	r5, r3, #0
 8006b28:	1c0b      	adds	r3, r1, #0
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	b289      	uxth	r1, r1
 8006b2e:	b29c      	uxth	r4, r3
 8006b30:	4351      	muls	r1, r2
 8006b32:	b2ab      	uxth	r3, r5
 8006b34:	4363      	muls	r3, r4
 8006b36:	0c0c      	lsrs	r4, r1, #16
 8006b38:	191c      	adds	r4, r3, r4
 8006b3a:	0c22      	lsrs	r2, r4, #16
 8006b3c:	d107      	bne.n	8006b4e <_calloc_r+0x4e>
 8006b3e:	0424      	lsls	r4, r4, #16
 8006b40:	b289      	uxth	r1, r1
 8006b42:	430c      	orrs	r4, r1
 8006b44:	e7e5      	b.n	8006b12 <_calloc_r+0x12>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <_calloc_r+0x4e>
 8006b4a:	1c13      	adds	r3, r2, #0
 8006b4c:	e7ed      	b.n	8006b2a <_calloc_r+0x2a>
 8006b4e:	230c      	movs	r3, #12
 8006b50:	2500      	movs	r5, #0
 8006b52:	6003      	str	r3, [r0, #0]
 8006b54:	0028      	movs	r0, r5
 8006b56:	bd70      	pop	{r4, r5, r6, pc}

08006b58 <_free_r>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	0005      	movs	r5, r0
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	d010      	beq.n	8006b82 <_free_r+0x2a>
 8006b60:	1f0c      	subs	r4, r1, #4
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	da00      	bge.n	8006b6a <_free_r+0x12>
 8006b68:	18e4      	adds	r4, r4, r3
 8006b6a:	0028      	movs	r0, r5
 8006b6c:	f000 fa9e 	bl	80070ac <__malloc_lock>
 8006b70:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <_free_r+0x90>)
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <_free_r+0x2c>
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	6014      	str	r4, [r2, #0]
 8006b7c:	0028      	movs	r0, r5
 8006b7e:	f000 fa9d 	bl	80070bc <__malloc_unlock>
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d908      	bls.n	8006b9a <_free_r+0x42>
 8006b88:	6821      	ldr	r1, [r4, #0]
 8006b8a:	1860      	adds	r0, r4, r1
 8006b8c:	4283      	cmp	r3, r0
 8006b8e:	d1f3      	bne.n	8006b78 <_free_r+0x20>
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	1841      	adds	r1, r0, r1
 8006b96:	6021      	str	r1, [r4, #0]
 8006b98:	e7ee      	b.n	8006b78 <_free_r+0x20>
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <_free_r+0x4e>
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	d9f9      	bls.n	8006b9a <_free_r+0x42>
 8006ba6:	6811      	ldr	r1, [r2, #0]
 8006ba8:	1850      	adds	r0, r2, r1
 8006baa:	42a0      	cmp	r0, r4
 8006bac:	d10b      	bne.n	8006bc6 <_free_r+0x6e>
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1809      	adds	r1, r1, r0
 8006bb2:	1850      	adds	r0, r2, r1
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	4283      	cmp	r3, r0
 8006bb8:	d1e0      	bne.n	8006b7c <_free_r+0x24>
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	1841      	adds	r1, r0, r1
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	6053      	str	r3, [r2, #4]
 8006bc4:	e7da      	b.n	8006b7c <_free_r+0x24>
 8006bc6:	42a0      	cmp	r0, r4
 8006bc8:	d902      	bls.n	8006bd0 <_free_r+0x78>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	e7d5      	b.n	8006b7c <_free_r+0x24>
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	1860      	adds	r0, r4, r1
 8006bd4:	4283      	cmp	r3, r0
 8006bd6:	d103      	bne.n	8006be0 <_free_r+0x88>
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	1841      	adds	r1, r0, r1
 8006bde:	6021      	str	r1, [r4, #0]
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	6054      	str	r4, [r2, #4]
 8006be4:	e7ca      	b.n	8006b7c <_free_r+0x24>
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	200002ec 	.word	0x200002ec

08006bec <sbrk_aligned>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	4e0f      	ldr	r6, [pc, #60]	; (8006c2c <sbrk_aligned+0x40>)
 8006bf0:	000d      	movs	r5, r1
 8006bf2:	6831      	ldr	r1, [r6, #0]
 8006bf4:	0004      	movs	r4, r0
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	d102      	bne.n	8006c00 <sbrk_aligned+0x14>
 8006bfa:	f000 f9f1 	bl	8006fe0 <_sbrk_r>
 8006bfe:	6030      	str	r0, [r6, #0]
 8006c00:	0029      	movs	r1, r5
 8006c02:	0020      	movs	r0, r4
 8006c04:	f000 f9ec 	bl	8006fe0 <_sbrk_r>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d00a      	beq.n	8006c22 <sbrk_aligned+0x36>
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	1cc5      	adds	r5, r0, #3
 8006c10:	439d      	bics	r5, r3
 8006c12:	42a8      	cmp	r0, r5
 8006c14:	d007      	beq.n	8006c26 <sbrk_aligned+0x3a>
 8006c16:	1a29      	subs	r1, r5, r0
 8006c18:	0020      	movs	r0, r4
 8006c1a:	f000 f9e1 	bl	8006fe0 <_sbrk_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d101      	bne.n	8006c26 <sbrk_aligned+0x3a>
 8006c22:	2501      	movs	r5, #1
 8006c24:	426d      	negs	r5, r5
 8006c26:	0028      	movs	r0, r5
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	200002f0 	.word	0x200002f0

08006c30 <_malloc_r>:
 8006c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c32:	2203      	movs	r2, #3
 8006c34:	1ccb      	adds	r3, r1, #3
 8006c36:	4393      	bics	r3, r2
 8006c38:	3308      	adds	r3, #8
 8006c3a:	0006      	movs	r6, r0
 8006c3c:	001f      	movs	r7, r3
 8006c3e:	2b0c      	cmp	r3, #12
 8006c40:	d232      	bcs.n	8006ca8 <_malloc_r+0x78>
 8006c42:	270c      	movs	r7, #12
 8006c44:	42b9      	cmp	r1, r7
 8006c46:	d831      	bhi.n	8006cac <_malloc_r+0x7c>
 8006c48:	0030      	movs	r0, r6
 8006c4a:	f000 fa2f 	bl	80070ac <__malloc_lock>
 8006c4e:	4d32      	ldr	r5, [pc, #200]	; (8006d18 <_malloc_r+0xe8>)
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	001c      	movs	r4, r3
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	d12e      	bne.n	8006cb6 <_malloc_r+0x86>
 8006c58:	0039      	movs	r1, r7
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	f7ff ffc6 	bl	8006bec <sbrk_aligned>
 8006c60:	0004      	movs	r4, r0
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d11e      	bne.n	8006ca4 <_malloc_r+0x74>
 8006c66:	682c      	ldr	r4, [r5, #0]
 8006c68:	0025      	movs	r5, r4
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	d14a      	bne.n	8006d04 <_malloc_r+0xd4>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	0029      	movs	r1, r5
 8006c72:	18e3      	adds	r3, r4, r3
 8006c74:	0030      	movs	r0, r6
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	f000 f9b2 	bl	8006fe0 <_sbrk_r>
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	4283      	cmp	r3, r0
 8006c80:	d143      	bne.n	8006d0a <_malloc_r+0xda>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	3703      	adds	r7, #3
 8006c86:	1aff      	subs	r7, r7, r3
 8006c88:	2303      	movs	r3, #3
 8006c8a:	439f      	bics	r7, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	2f0c      	cmp	r7, #12
 8006c90:	d200      	bcs.n	8006c94 <_malloc_r+0x64>
 8006c92:	270c      	movs	r7, #12
 8006c94:	0039      	movs	r1, r7
 8006c96:	0030      	movs	r0, r6
 8006c98:	f7ff ffa8 	bl	8006bec <sbrk_aligned>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d034      	beq.n	8006d0a <_malloc_r+0xda>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	19df      	adds	r7, r3, r7
 8006ca4:	6027      	str	r7, [r4, #0]
 8006ca6:	e013      	b.n	8006cd0 <_malloc_r+0xa0>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dacb      	bge.n	8006c44 <_malloc_r+0x14>
 8006cac:	230c      	movs	r3, #12
 8006cae:	2500      	movs	r5, #0
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	0028      	movs	r0, r5
 8006cb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	1bd1      	subs	r1, r2, r7
 8006cba:	d420      	bmi.n	8006cfe <_malloc_r+0xce>
 8006cbc:	290b      	cmp	r1, #11
 8006cbe:	d917      	bls.n	8006cf0 <_malloc_r+0xc0>
 8006cc0:	19e2      	adds	r2, r4, r7
 8006cc2:	6027      	str	r7, [r4, #0]
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d111      	bne.n	8006cec <_malloc_r+0xbc>
 8006cc8:	602a      	str	r2, [r5, #0]
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	6053      	str	r3, [r2, #4]
 8006cd0:	0030      	movs	r0, r6
 8006cd2:	0025      	movs	r5, r4
 8006cd4:	f000 f9f2 	bl	80070bc <__malloc_unlock>
 8006cd8:	2207      	movs	r2, #7
 8006cda:	350b      	adds	r5, #11
 8006cdc:	1d23      	adds	r3, r4, #4
 8006cde:	4395      	bics	r5, r2
 8006ce0:	1aea      	subs	r2, r5, r3
 8006ce2:	429d      	cmp	r5, r3
 8006ce4:	d0e5      	beq.n	8006cb2 <_malloc_r+0x82>
 8006ce6:	1b5b      	subs	r3, r3, r5
 8006ce8:	50a3      	str	r3, [r4, r2]
 8006cea:	e7e2      	b.n	8006cb2 <_malloc_r+0x82>
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	e7ec      	b.n	8006cca <_malloc_r+0x9a>
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	d101      	bne.n	8006cfa <_malloc_r+0xca>
 8006cf6:	602a      	str	r2, [r5, #0]
 8006cf8:	e7ea      	b.n	8006cd0 <_malloc_r+0xa0>
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	e7e8      	b.n	8006cd0 <_malloc_r+0xa0>
 8006cfe:	0023      	movs	r3, r4
 8006d00:	6864      	ldr	r4, [r4, #4]
 8006d02:	e7a7      	b.n	8006c54 <_malloc_r+0x24>
 8006d04:	002c      	movs	r4, r5
 8006d06:	686d      	ldr	r5, [r5, #4]
 8006d08:	e7af      	b.n	8006c6a <_malloc_r+0x3a>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	0030      	movs	r0, r6
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f000 f9d4 	bl	80070bc <__malloc_unlock>
 8006d14:	e7cd      	b.n	8006cb2 <_malloc_r+0x82>
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	200002ec 	.word	0x200002ec

08006d1c <__ssputs_r>:
 8006d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1e:	688e      	ldr	r6, [r1, #8]
 8006d20:	b085      	sub	sp, #20
 8006d22:	0007      	movs	r7, r0
 8006d24:	000c      	movs	r4, r1
 8006d26:	9203      	str	r2, [sp, #12]
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	429e      	cmp	r6, r3
 8006d2c:	d83c      	bhi.n	8006da8 <__ssputs_r+0x8c>
 8006d2e:	2390      	movs	r3, #144	; 0x90
 8006d30:	898a      	ldrh	r2, [r1, #12]
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	421a      	tst	r2, r3
 8006d36:	d034      	beq.n	8006da2 <__ssputs_r+0x86>
 8006d38:	6909      	ldr	r1, [r1, #16]
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	6960      	ldr	r0, [r4, #20]
 8006d3e:	1a5b      	subs	r3, r3, r1
 8006d40:	9302      	str	r3, [sp, #8]
 8006d42:	2303      	movs	r3, #3
 8006d44:	4343      	muls	r3, r0
 8006d46:	0fdd      	lsrs	r5, r3, #31
 8006d48:	18ed      	adds	r5, r5, r3
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	9802      	ldr	r0, [sp, #8]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	181b      	adds	r3, r3, r0
 8006d52:	106d      	asrs	r5, r5, #1
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	d900      	bls.n	8006d5a <__ssputs_r+0x3e>
 8006d58:	001d      	movs	r5, r3
 8006d5a:	0553      	lsls	r3, r2, #21
 8006d5c:	d532      	bpl.n	8006dc4 <__ssputs_r+0xa8>
 8006d5e:	0029      	movs	r1, r5
 8006d60:	0038      	movs	r0, r7
 8006d62:	f7ff ff65 	bl	8006c30 <_malloc_r>
 8006d66:	1e06      	subs	r6, r0, #0
 8006d68:	d109      	bne.n	8006d7e <__ssputs_r+0x62>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	2340      	movs	r3, #64	; 0x40
 8006d70:	2001      	movs	r0, #1
 8006d72:	89a2      	ldrh	r2, [r4, #12]
 8006d74:	4240      	negs	r0, r0
 8006d76:	4313      	orrs	r3, r2
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	b005      	add	sp, #20
 8006d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7e:	9a02      	ldr	r2, [sp, #8]
 8006d80:	6921      	ldr	r1, [r4, #16]
 8006d82:	f7ff fb18 	bl	80063b6 <memcpy>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <__ssputs_r+0xc0>)
 8006d8a:	401a      	ands	r2, r3
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	9b02      	ldr	r3, [sp, #8]
 8006d94:	6126      	str	r6, [r4, #16]
 8006d96:	18f6      	adds	r6, r6, r3
 8006d98:	6026      	str	r6, [r4, #0]
 8006d9a:	6165      	str	r5, [r4, #20]
 8006d9c:	9e01      	ldr	r6, [sp, #4]
 8006d9e:	1aed      	subs	r5, r5, r3
 8006da0:	60a5      	str	r5, [r4, #8]
 8006da2:	9b01      	ldr	r3, [sp, #4]
 8006da4:	429e      	cmp	r6, r3
 8006da6:	d900      	bls.n	8006daa <__ssputs_r+0x8e>
 8006da8:	9e01      	ldr	r6, [sp, #4]
 8006daa:	0032      	movs	r2, r6
 8006dac:	9903      	ldr	r1, [sp, #12]
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	f000 f968 	bl	8007084 <memmove>
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	2000      	movs	r0, #0
 8006db8:	1b9b      	subs	r3, r3, r6
 8006dba:	60a3      	str	r3, [r4, #8]
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	199e      	adds	r6, r3, r6
 8006dc0:	6026      	str	r6, [r4, #0]
 8006dc2:	e7da      	b.n	8006d7a <__ssputs_r+0x5e>
 8006dc4:	002a      	movs	r2, r5
 8006dc6:	0038      	movs	r0, r7
 8006dc8:	f000 f980 	bl	80070cc <_realloc_r>
 8006dcc:	1e06      	subs	r6, r0, #0
 8006dce:	d1e0      	bne.n	8006d92 <__ssputs_r+0x76>
 8006dd0:	0038      	movs	r0, r7
 8006dd2:	6921      	ldr	r1, [r4, #16]
 8006dd4:	f7ff fec0 	bl	8006b58 <_free_r>
 8006dd8:	e7c7      	b.n	8006d6a <__ssputs_r+0x4e>
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	fffffb7f 	.word	0xfffffb7f

08006de0 <_svfiprintf_r>:
 8006de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de2:	b0a1      	sub	sp, #132	; 0x84
 8006de4:	9003      	str	r0, [sp, #12]
 8006de6:	001d      	movs	r5, r3
 8006de8:	898b      	ldrh	r3, [r1, #12]
 8006dea:	000f      	movs	r7, r1
 8006dec:	0016      	movs	r6, r2
 8006dee:	061b      	lsls	r3, r3, #24
 8006df0:	d511      	bpl.n	8006e16 <_svfiprintf_r+0x36>
 8006df2:	690b      	ldr	r3, [r1, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10e      	bne.n	8006e16 <_svfiprintf_r+0x36>
 8006df8:	2140      	movs	r1, #64	; 0x40
 8006dfa:	f7ff ff19 	bl	8006c30 <_malloc_r>
 8006dfe:	6038      	str	r0, [r7, #0]
 8006e00:	6138      	str	r0, [r7, #16]
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d105      	bne.n	8006e12 <_svfiprintf_r+0x32>
 8006e06:	230c      	movs	r3, #12
 8006e08:	9a03      	ldr	r2, [sp, #12]
 8006e0a:	3801      	subs	r0, #1
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	b021      	add	sp, #132	; 0x84
 8006e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	2300      	movs	r3, #0
 8006e18:	ac08      	add	r4, sp, #32
 8006e1a:	6163      	str	r3, [r4, #20]
 8006e1c:	3320      	adds	r3, #32
 8006e1e:	7663      	strb	r3, [r4, #25]
 8006e20:	3310      	adds	r3, #16
 8006e22:	76a3      	strb	r3, [r4, #26]
 8006e24:	9507      	str	r5, [sp, #28]
 8006e26:	0035      	movs	r5, r6
 8006e28:	782b      	ldrb	r3, [r5, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <_svfiprintf_r+0x52>
 8006e2e:	2b25      	cmp	r3, #37	; 0x25
 8006e30:	d147      	bne.n	8006ec2 <_svfiprintf_r+0xe2>
 8006e32:	1bab      	subs	r3, r5, r6
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	42b5      	cmp	r5, r6
 8006e38:	d00c      	beq.n	8006e54 <_svfiprintf_r+0x74>
 8006e3a:	0032      	movs	r2, r6
 8006e3c:	0039      	movs	r1, r7
 8006e3e:	9803      	ldr	r0, [sp, #12]
 8006e40:	f7ff ff6c 	bl	8006d1c <__ssputs_r>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d100      	bne.n	8006e4a <_svfiprintf_r+0x6a>
 8006e48:	e0ae      	b.n	8006fa8 <_svfiprintf_r+0x1c8>
 8006e4a:	6962      	ldr	r2, [r4, #20]
 8006e4c:	9b05      	ldr	r3, [sp, #20]
 8006e4e:	4694      	mov	ip, r2
 8006e50:	4463      	add	r3, ip
 8006e52:	6163      	str	r3, [r4, #20]
 8006e54:	782b      	ldrb	r3, [r5, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d100      	bne.n	8006e5c <_svfiprintf_r+0x7c>
 8006e5a:	e0a5      	b.n	8006fa8 <_svfiprintf_r+0x1c8>
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4252      	negs	r2, r2
 8006e62:	6062      	str	r2, [r4, #4]
 8006e64:	a904      	add	r1, sp, #16
 8006e66:	3254      	adds	r2, #84	; 0x54
 8006e68:	1852      	adds	r2, r2, r1
 8006e6a:	1c6e      	adds	r6, r5, #1
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	60e3      	str	r3, [r4, #12]
 8006e70:	60a3      	str	r3, [r4, #8]
 8006e72:	7013      	strb	r3, [r2, #0]
 8006e74:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e76:	2205      	movs	r2, #5
 8006e78:	7831      	ldrb	r1, [r6, #0]
 8006e7a:	4854      	ldr	r0, [pc, #336]	; (8006fcc <_svfiprintf_r+0x1ec>)
 8006e7c:	f7ff fa90 	bl	80063a0 <memchr>
 8006e80:	1c75      	adds	r5, r6, #1
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d11f      	bne.n	8006ec6 <_svfiprintf_r+0xe6>
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	06d3      	lsls	r3, r2, #27
 8006e8a:	d504      	bpl.n	8006e96 <_svfiprintf_r+0xb6>
 8006e8c:	2353      	movs	r3, #83	; 0x53
 8006e8e:	a904      	add	r1, sp, #16
 8006e90:	185b      	adds	r3, r3, r1
 8006e92:	2120      	movs	r1, #32
 8006e94:	7019      	strb	r1, [r3, #0]
 8006e96:	0713      	lsls	r3, r2, #28
 8006e98:	d504      	bpl.n	8006ea4 <_svfiprintf_r+0xc4>
 8006e9a:	2353      	movs	r3, #83	; 0x53
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	185b      	adds	r3, r3, r1
 8006ea0:	212b      	movs	r1, #43	; 0x2b
 8006ea2:	7019      	strb	r1, [r3, #0]
 8006ea4:	7833      	ldrb	r3, [r6, #0]
 8006ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea8:	d016      	beq.n	8006ed8 <_svfiprintf_r+0xf8>
 8006eaa:	0035      	movs	r5, r6
 8006eac:	2100      	movs	r1, #0
 8006eae:	200a      	movs	r0, #10
 8006eb0:	68e3      	ldr	r3, [r4, #12]
 8006eb2:	782a      	ldrb	r2, [r5, #0]
 8006eb4:	1c6e      	adds	r6, r5, #1
 8006eb6:	3a30      	subs	r2, #48	; 0x30
 8006eb8:	2a09      	cmp	r2, #9
 8006eba:	d94e      	bls.n	8006f5a <_svfiprintf_r+0x17a>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d111      	bne.n	8006ee4 <_svfiprintf_r+0x104>
 8006ec0:	e017      	b.n	8006ef2 <_svfiprintf_r+0x112>
 8006ec2:	3501      	adds	r5, #1
 8006ec4:	e7b0      	b.n	8006e28 <_svfiprintf_r+0x48>
 8006ec6:	4b41      	ldr	r3, [pc, #260]	; (8006fcc <_svfiprintf_r+0x1ec>)
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	1ac0      	subs	r0, r0, r3
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4083      	lsls	r3, r0
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	002e      	movs	r6, r5
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	e7ce      	b.n	8006e76 <_svfiprintf_r+0x96>
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	1d19      	adds	r1, r3, #4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	9107      	str	r1, [sp, #28]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	db01      	blt.n	8006ee8 <_svfiprintf_r+0x108>
 8006ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ee6:	e004      	b.n	8006ef2 <_svfiprintf_r+0x112>
 8006ee8:	425b      	negs	r3, r3
 8006eea:	60e3      	str	r3, [r4, #12]
 8006eec:	2302      	movs	r3, #2
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	782b      	ldrb	r3, [r5, #0]
 8006ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef6:	d10a      	bne.n	8006f0e <_svfiprintf_r+0x12e>
 8006ef8:	786b      	ldrb	r3, [r5, #1]
 8006efa:	2b2a      	cmp	r3, #42	; 0x2a
 8006efc:	d135      	bne.n	8006f6a <_svfiprintf_r+0x18a>
 8006efe:	9b07      	ldr	r3, [sp, #28]
 8006f00:	3502      	adds	r5, #2
 8006f02:	1d1a      	adds	r2, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9207      	str	r2, [sp, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	db2b      	blt.n	8006f64 <_svfiprintf_r+0x184>
 8006f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f0e:	4e30      	ldr	r6, [pc, #192]	; (8006fd0 <_svfiprintf_r+0x1f0>)
 8006f10:	2203      	movs	r2, #3
 8006f12:	0030      	movs	r0, r6
 8006f14:	7829      	ldrb	r1, [r5, #0]
 8006f16:	f7ff fa43 	bl	80063a0 <memchr>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d006      	beq.n	8006f2c <_svfiprintf_r+0x14c>
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	1b80      	subs	r0, r0, r6
 8006f22:	4083      	lsls	r3, r0
 8006f24:	6822      	ldr	r2, [r4, #0]
 8006f26:	3501      	adds	r5, #1
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	7829      	ldrb	r1, [r5, #0]
 8006f2e:	2206      	movs	r2, #6
 8006f30:	4828      	ldr	r0, [pc, #160]	; (8006fd4 <_svfiprintf_r+0x1f4>)
 8006f32:	1c6e      	adds	r6, r5, #1
 8006f34:	7621      	strb	r1, [r4, #24]
 8006f36:	f7ff fa33 	bl	80063a0 <memchr>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d03c      	beq.n	8006fb8 <_svfiprintf_r+0x1d8>
 8006f3e:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <_svfiprintf_r+0x1f8>)
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d125      	bne.n	8006f90 <_svfiprintf_r+0x1b0>
 8006f44:	2207      	movs	r2, #7
 8006f46:	9b07      	ldr	r3, [sp, #28]
 8006f48:	3307      	adds	r3, #7
 8006f4a:	4393      	bics	r3, r2
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	9307      	str	r3, [sp, #28]
 8006f50:	6963      	ldr	r3, [r4, #20]
 8006f52:	9a04      	ldr	r2, [sp, #16]
 8006f54:	189b      	adds	r3, r3, r2
 8006f56:	6163      	str	r3, [r4, #20]
 8006f58:	e765      	b.n	8006e26 <_svfiprintf_r+0x46>
 8006f5a:	4343      	muls	r3, r0
 8006f5c:	0035      	movs	r5, r6
 8006f5e:	2101      	movs	r1, #1
 8006f60:	189b      	adds	r3, r3, r2
 8006f62:	e7a6      	b.n	8006eb2 <_svfiprintf_r+0xd2>
 8006f64:	2301      	movs	r3, #1
 8006f66:	425b      	negs	r3, r3
 8006f68:	e7d0      	b.n	8006f0c <_svfiprintf_r+0x12c>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	200a      	movs	r0, #10
 8006f6e:	001a      	movs	r2, r3
 8006f70:	3501      	adds	r5, #1
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	7829      	ldrb	r1, [r5, #0]
 8006f76:	1c6e      	adds	r6, r5, #1
 8006f78:	3930      	subs	r1, #48	; 0x30
 8006f7a:	2909      	cmp	r1, #9
 8006f7c:	d903      	bls.n	8006f86 <_svfiprintf_r+0x1a6>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0c5      	beq.n	8006f0e <_svfiprintf_r+0x12e>
 8006f82:	9209      	str	r2, [sp, #36]	; 0x24
 8006f84:	e7c3      	b.n	8006f0e <_svfiprintf_r+0x12e>
 8006f86:	4342      	muls	r2, r0
 8006f88:	0035      	movs	r5, r6
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	1852      	adds	r2, r2, r1
 8006f8e:	e7f1      	b.n	8006f74 <_svfiprintf_r+0x194>
 8006f90:	ab07      	add	r3, sp, #28
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	003a      	movs	r2, r7
 8006f96:	0021      	movs	r1, r4
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <_svfiprintf_r+0x1fc>)
 8006f9a:	9803      	ldr	r0, [sp, #12]
 8006f9c:	f7fd ff68 	bl	8004e70 <_printf_float>
 8006fa0:	9004      	str	r0, [sp, #16]
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	d1d3      	bne.n	8006f50 <_svfiprintf_r+0x170>
 8006fa8:	89bb      	ldrh	r3, [r7, #12]
 8006faa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006fac:	065b      	lsls	r3, r3, #25
 8006fae:	d400      	bmi.n	8006fb2 <_svfiprintf_r+0x1d2>
 8006fb0:	e72d      	b.n	8006e0e <_svfiprintf_r+0x2e>
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	4240      	negs	r0, r0
 8006fb6:	e72a      	b.n	8006e0e <_svfiprintf_r+0x2e>
 8006fb8:	ab07      	add	r3, sp, #28
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	003a      	movs	r2, r7
 8006fbe:	0021      	movs	r1, r4
 8006fc0:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <_svfiprintf_r+0x1fc>)
 8006fc2:	9803      	ldr	r0, [sp, #12]
 8006fc4:	f7fe fa06 	bl	80053d4 <_printf_i>
 8006fc8:	e7ea      	b.n	8006fa0 <_svfiprintf_r+0x1c0>
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	08008034 	.word	0x08008034
 8006fd0:	0800803a 	.word	0x0800803a
 8006fd4:	0800803e 	.word	0x0800803e
 8006fd8:	08004e71 	.word	0x08004e71
 8006fdc:	08006d1d 	.word	0x08006d1d

08006fe0 <_sbrk_r>:
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	b570      	push	{r4, r5, r6, lr}
 8006fe4:	4d06      	ldr	r5, [pc, #24]	; (8007000 <_sbrk_r+0x20>)
 8006fe6:	0004      	movs	r4, r0
 8006fe8:	0008      	movs	r0, r1
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	f7fb fe1c 	bl	8002c28 <_sbrk>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_sbrk_r+0x1c>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d000      	beq.n	8006ffc <_sbrk_r+0x1c>
 8006ffa:	6023      	str	r3, [r4, #0]
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	200002f4 	.word	0x200002f4

08007004 <__assert_func>:
 8007004:	b530      	push	{r4, r5, lr}
 8007006:	0014      	movs	r4, r2
 8007008:	001a      	movs	r2, r3
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <__assert_func+0x2c>)
 800700c:	0005      	movs	r5, r0
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	b085      	sub	sp, #20
 8007012:	68d8      	ldr	r0, [r3, #12]
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <__assert_func+0x30>)
 8007016:	2c00      	cmp	r4, #0
 8007018:	d101      	bne.n	800701e <__assert_func+0x1a>
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <__assert_func+0x34>)
 800701c:	001c      	movs	r4, r3
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	9100      	str	r1, [sp, #0]
 8007022:	002b      	movs	r3, r5
 8007024:	4905      	ldr	r1, [pc, #20]	; (800703c <__assert_func+0x38>)
 8007026:	9402      	str	r4, [sp, #8]
 8007028:	f000 f80a 	bl	8007040 <fiprintf>
 800702c:	f000 faba 	bl	80075a4 <abort>
 8007030:	2000000c 	.word	0x2000000c
 8007034:	08008045 	.word	0x08008045
 8007038:	08008080 	.word	0x08008080
 800703c:	08008052 	.word	0x08008052

08007040 <fiprintf>:
 8007040:	b40e      	push	{r1, r2, r3}
 8007042:	b503      	push	{r0, r1, lr}
 8007044:	0001      	movs	r1, r0
 8007046:	ab03      	add	r3, sp, #12
 8007048:	4804      	ldr	r0, [pc, #16]	; (800705c <fiprintf+0x1c>)
 800704a:	cb04      	ldmia	r3!, {r2}
 800704c:	6800      	ldr	r0, [r0, #0]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	f000 f892 	bl	8007178 <_vfiprintf_r>
 8007054:	b002      	add	sp, #8
 8007056:	bc08      	pop	{r3}
 8007058:	b003      	add	sp, #12
 800705a:	4718      	bx	r3
 800705c:	2000000c 	.word	0x2000000c

08007060 <__ascii_mbtowc>:
 8007060:	b082      	sub	sp, #8
 8007062:	2900      	cmp	r1, #0
 8007064:	d100      	bne.n	8007068 <__ascii_mbtowc+0x8>
 8007066:	a901      	add	r1, sp, #4
 8007068:	1e10      	subs	r0, r2, #0
 800706a:	d006      	beq.n	800707a <__ascii_mbtowc+0x1a>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <__ascii_mbtowc+0x1e>
 8007070:	7813      	ldrb	r3, [r2, #0]
 8007072:	600b      	str	r3, [r1, #0]
 8007074:	7810      	ldrb	r0, [r2, #0]
 8007076:	1e43      	subs	r3, r0, #1
 8007078:	4198      	sbcs	r0, r3
 800707a:	b002      	add	sp, #8
 800707c:	4770      	bx	lr
 800707e:	2002      	movs	r0, #2
 8007080:	4240      	negs	r0, r0
 8007082:	e7fa      	b.n	800707a <__ascii_mbtowc+0x1a>

08007084 <memmove>:
 8007084:	b510      	push	{r4, lr}
 8007086:	4288      	cmp	r0, r1
 8007088:	d902      	bls.n	8007090 <memmove+0xc>
 800708a:	188b      	adds	r3, r1, r2
 800708c:	4298      	cmp	r0, r3
 800708e:	d303      	bcc.n	8007098 <memmove+0x14>
 8007090:	2300      	movs	r3, #0
 8007092:	e007      	b.n	80070a4 <memmove+0x20>
 8007094:	5c8b      	ldrb	r3, [r1, r2]
 8007096:	5483      	strb	r3, [r0, r2]
 8007098:	3a01      	subs	r2, #1
 800709a:	d2fb      	bcs.n	8007094 <memmove+0x10>
 800709c:	bd10      	pop	{r4, pc}
 800709e:	5ccc      	ldrb	r4, [r1, r3]
 80070a0:	54c4      	strb	r4, [r0, r3]
 80070a2:	3301      	adds	r3, #1
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d1fa      	bne.n	800709e <memmove+0x1a>
 80070a8:	e7f8      	b.n	800709c <memmove+0x18>
	...

080070ac <__malloc_lock>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	4802      	ldr	r0, [pc, #8]	; (80070b8 <__malloc_lock+0xc>)
 80070b0:	f000 fc4f 	bl	8007952 <__retarget_lock_acquire_recursive>
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	200002f8 	.word	0x200002f8

080070bc <__malloc_unlock>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	4802      	ldr	r0, [pc, #8]	; (80070c8 <__malloc_unlock+0xc>)
 80070c0:	f000 fc48 	bl	8007954 <__retarget_lock_release_recursive>
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	200002f8 	.word	0x200002f8

080070cc <_realloc_r>:
 80070cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ce:	0007      	movs	r7, r0
 80070d0:	000e      	movs	r6, r1
 80070d2:	0014      	movs	r4, r2
 80070d4:	2900      	cmp	r1, #0
 80070d6:	d105      	bne.n	80070e4 <_realloc_r+0x18>
 80070d8:	0011      	movs	r1, r2
 80070da:	f7ff fda9 	bl	8006c30 <_malloc_r>
 80070de:	0005      	movs	r5, r0
 80070e0:	0028      	movs	r0, r5
 80070e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	d103      	bne.n	80070f0 <_realloc_r+0x24>
 80070e8:	f7ff fd36 	bl	8006b58 <_free_r>
 80070ec:	0025      	movs	r5, r4
 80070ee:	e7f7      	b.n	80070e0 <_realloc_r+0x14>
 80070f0:	f000 fc9e 	bl	8007a30 <_malloc_usable_size_r>
 80070f4:	9001      	str	r0, [sp, #4]
 80070f6:	4284      	cmp	r4, r0
 80070f8:	d803      	bhi.n	8007102 <_realloc_r+0x36>
 80070fa:	0035      	movs	r5, r6
 80070fc:	0843      	lsrs	r3, r0, #1
 80070fe:	42a3      	cmp	r3, r4
 8007100:	d3ee      	bcc.n	80070e0 <_realloc_r+0x14>
 8007102:	0021      	movs	r1, r4
 8007104:	0038      	movs	r0, r7
 8007106:	f7ff fd93 	bl	8006c30 <_malloc_r>
 800710a:	1e05      	subs	r5, r0, #0
 800710c:	d0e8      	beq.n	80070e0 <_realloc_r+0x14>
 800710e:	9b01      	ldr	r3, [sp, #4]
 8007110:	0022      	movs	r2, r4
 8007112:	429c      	cmp	r4, r3
 8007114:	d900      	bls.n	8007118 <_realloc_r+0x4c>
 8007116:	001a      	movs	r2, r3
 8007118:	0031      	movs	r1, r6
 800711a:	0028      	movs	r0, r5
 800711c:	f7ff f94b 	bl	80063b6 <memcpy>
 8007120:	0031      	movs	r1, r6
 8007122:	0038      	movs	r0, r7
 8007124:	f7ff fd18 	bl	8006b58 <_free_r>
 8007128:	e7da      	b.n	80070e0 <_realloc_r+0x14>

0800712a <__sfputc_r>:
 800712a:	6893      	ldr	r3, [r2, #8]
 800712c:	b510      	push	{r4, lr}
 800712e:	3b01      	subs	r3, #1
 8007130:	6093      	str	r3, [r2, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	da04      	bge.n	8007140 <__sfputc_r+0x16>
 8007136:	6994      	ldr	r4, [r2, #24]
 8007138:	42a3      	cmp	r3, r4
 800713a:	db07      	blt.n	800714c <__sfputc_r+0x22>
 800713c:	290a      	cmp	r1, #10
 800713e:	d005      	beq.n	800714c <__sfputc_r+0x22>
 8007140:	6813      	ldr	r3, [r2, #0]
 8007142:	1c58      	adds	r0, r3, #1
 8007144:	6010      	str	r0, [r2, #0]
 8007146:	7019      	strb	r1, [r3, #0]
 8007148:	0008      	movs	r0, r1
 800714a:	bd10      	pop	{r4, pc}
 800714c:	f000 f94e 	bl	80073ec <__swbuf_r>
 8007150:	0001      	movs	r1, r0
 8007152:	e7f9      	b.n	8007148 <__sfputc_r+0x1e>

08007154 <__sfputs_r>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	0006      	movs	r6, r0
 8007158:	000f      	movs	r7, r1
 800715a:	0014      	movs	r4, r2
 800715c:	18d5      	adds	r5, r2, r3
 800715e:	42ac      	cmp	r4, r5
 8007160:	d101      	bne.n	8007166 <__sfputs_r+0x12>
 8007162:	2000      	movs	r0, #0
 8007164:	e007      	b.n	8007176 <__sfputs_r+0x22>
 8007166:	7821      	ldrb	r1, [r4, #0]
 8007168:	003a      	movs	r2, r7
 800716a:	0030      	movs	r0, r6
 800716c:	f7ff ffdd 	bl	800712a <__sfputc_r>
 8007170:	3401      	adds	r4, #1
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d1f3      	bne.n	800715e <__sfputs_r+0xa>
 8007176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007178 <_vfiprintf_r>:
 8007178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717a:	b0a1      	sub	sp, #132	; 0x84
 800717c:	0006      	movs	r6, r0
 800717e:	000c      	movs	r4, r1
 8007180:	001f      	movs	r7, r3
 8007182:	9203      	str	r2, [sp, #12]
 8007184:	2800      	cmp	r0, #0
 8007186:	d004      	beq.n	8007192 <_vfiprintf_r+0x1a>
 8007188:	6983      	ldr	r3, [r0, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <_vfiprintf_r+0x1a>
 800718e:	f000 fb3f 	bl	8007810 <__sinit>
 8007192:	4b8e      	ldr	r3, [pc, #568]	; (80073cc <_vfiprintf_r+0x254>)
 8007194:	429c      	cmp	r4, r3
 8007196:	d11c      	bne.n	80071d2 <_vfiprintf_r+0x5a>
 8007198:	6874      	ldr	r4, [r6, #4]
 800719a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800719c:	07db      	lsls	r3, r3, #31
 800719e:	d405      	bmi.n	80071ac <_vfiprintf_r+0x34>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	059b      	lsls	r3, r3, #22
 80071a4:	d402      	bmi.n	80071ac <_vfiprintf_r+0x34>
 80071a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a8:	f000 fbd3 	bl	8007952 <__retarget_lock_acquire_recursive>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	071b      	lsls	r3, r3, #28
 80071b0:	d502      	bpl.n	80071b8 <_vfiprintf_r+0x40>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11d      	bne.n	80071f4 <_vfiprintf_r+0x7c>
 80071b8:	0021      	movs	r1, r4
 80071ba:	0030      	movs	r0, r6
 80071bc:	f000 f97a 	bl	80074b4 <__swsetup_r>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d017      	beq.n	80071f4 <_vfiprintf_r+0x7c>
 80071c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	d50d      	bpl.n	80071e6 <_vfiprintf_r+0x6e>
 80071ca:	2001      	movs	r0, #1
 80071cc:	4240      	negs	r0, r0
 80071ce:	b021      	add	sp, #132	; 0x84
 80071d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <_vfiprintf_r+0x258>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	d101      	bne.n	80071dc <_vfiprintf_r+0x64>
 80071d8:	68b4      	ldr	r4, [r6, #8]
 80071da:	e7de      	b.n	800719a <_vfiprintf_r+0x22>
 80071dc:	4b7d      	ldr	r3, [pc, #500]	; (80073d4 <_vfiprintf_r+0x25c>)
 80071de:	429c      	cmp	r4, r3
 80071e0:	d1db      	bne.n	800719a <_vfiprintf_r+0x22>
 80071e2:	68f4      	ldr	r4, [r6, #12]
 80071e4:	e7d9      	b.n	800719a <_vfiprintf_r+0x22>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	059b      	lsls	r3, r3, #22
 80071ea:	d4ee      	bmi.n	80071ca <_vfiprintf_r+0x52>
 80071ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ee:	f000 fbb1 	bl	8007954 <__retarget_lock_release_recursive>
 80071f2:	e7ea      	b.n	80071ca <_vfiprintf_r+0x52>
 80071f4:	2300      	movs	r3, #0
 80071f6:	ad08      	add	r5, sp, #32
 80071f8:	616b      	str	r3, [r5, #20]
 80071fa:	3320      	adds	r3, #32
 80071fc:	766b      	strb	r3, [r5, #25]
 80071fe:	3310      	adds	r3, #16
 8007200:	76ab      	strb	r3, [r5, #26]
 8007202:	9707      	str	r7, [sp, #28]
 8007204:	9f03      	ldr	r7, [sp, #12]
 8007206:	783b      	ldrb	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <_vfiprintf_r+0x98>
 800720c:	2b25      	cmp	r3, #37	; 0x25
 800720e:	d14e      	bne.n	80072ae <_vfiprintf_r+0x136>
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	1afb      	subs	r3, r7, r3
 8007214:	9305      	str	r3, [sp, #20]
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	429f      	cmp	r7, r3
 800721a:	d00d      	beq.n	8007238 <_vfiprintf_r+0xc0>
 800721c:	9b05      	ldr	r3, [sp, #20]
 800721e:	0021      	movs	r1, r4
 8007220:	0030      	movs	r0, r6
 8007222:	9a03      	ldr	r2, [sp, #12]
 8007224:	f7ff ff96 	bl	8007154 <__sfputs_r>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d100      	bne.n	800722e <_vfiprintf_r+0xb6>
 800722c:	e0b5      	b.n	800739a <_vfiprintf_r+0x222>
 800722e:	696a      	ldr	r2, [r5, #20]
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	4694      	mov	ip, r2
 8007234:	4463      	add	r3, ip
 8007236:	616b      	str	r3, [r5, #20]
 8007238:	783b      	ldrb	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d100      	bne.n	8007240 <_vfiprintf_r+0xc8>
 800723e:	e0ac      	b.n	800739a <_vfiprintf_r+0x222>
 8007240:	2201      	movs	r2, #1
 8007242:	1c7b      	adds	r3, r7, #1
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	2300      	movs	r3, #0
 8007248:	4252      	negs	r2, r2
 800724a:	606a      	str	r2, [r5, #4]
 800724c:	a904      	add	r1, sp, #16
 800724e:	3254      	adds	r2, #84	; 0x54
 8007250:	1852      	adds	r2, r2, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	60eb      	str	r3, [r5, #12]
 8007256:	60ab      	str	r3, [r5, #8]
 8007258:	7013      	strb	r3, [r2, #0]
 800725a:	65ab      	str	r3, [r5, #88]	; 0x58
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	2205      	movs	r2, #5
 8007260:	7819      	ldrb	r1, [r3, #0]
 8007262:	485d      	ldr	r0, [pc, #372]	; (80073d8 <_vfiprintf_r+0x260>)
 8007264:	f7ff f89c 	bl	80063a0 <memchr>
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	1c5f      	adds	r7, r3, #1
 800726c:	2800      	cmp	r0, #0
 800726e:	d120      	bne.n	80072b2 <_vfiprintf_r+0x13a>
 8007270:	682a      	ldr	r2, [r5, #0]
 8007272:	06d3      	lsls	r3, r2, #27
 8007274:	d504      	bpl.n	8007280 <_vfiprintf_r+0x108>
 8007276:	2353      	movs	r3, #83	; 0x53
 8007278:	a904      	add	r1, sp, #16
 800727a:	185b      	adds	r3, r3, r1
 800727c:	2120      	movs	r1, #32
 800727e:	7019      	strb	r1, [r3, #0]
 8007280:	0713      	lsls	r3, r2, #28
 8007282:	d504      	bpl.n	800728e <_vfiprintf_r+0x116>
 8007284:	2353      	movs	r3, #83	; 0x53
 8007286:	a904      	add	r1, sp, #16
 8007288:	185b      	adds	r3, r3, r1
 800728a:	212b      	movs	r1, #43	; 0x2b
 800728c:	7019      	strb	r1, [r3, #0]
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b2a      	cmp	r3, #42	; 0x2a
 8007294:	d016      	beq.n	80072c4 <_vfiprintf_r+0x14c>
 8007296:	2100      	movs	r1, #0
 8007298:	68eb      	ldr	r3, [r5, #12]
 800729a:	9f03      	ldr	r7, [sp, #12]
 800729c:	783a      	ldrb	r2, [r7, #0]
 800729e:	1c78      	adds	r0, r7, #1
 80072a0:	3a30      	subs	r2, #48	; 0x30
 80072a2:	4684      	mov	ip, r0
 80072a4:	2a09      	cmp	r2, #9
 80072a6:	d94f      	bls.n	8007348 <_vfiprintf_r+0x1d0>
 80072a8:	2900      	cmp	r1, #0
 80072aa:	d111      	bne.n	80072d0 <_vfiprintf_r+0x158>
 80072ac:	e017      	b.n	80072de <_vfiprintf_r+0x166>
 80072ae:	3701      	adds	r7, #1
 80072b0:	e7a9      	b.n	8007206 <_vfiprintf_r+0x8e>
 80072b2:	4b49      	ldr	r3, [pc, #292]	; (80073d8 <_vfiprintf_r+0x260>)
 80072b4:	682a      	ldr	r2, [r5, #0]
 80072b6:	1ac0      	subs	r0, r0, r3
 80072b8:	2301      	movs	r3, #1
 80072ba:	4083      	lsls	r3, r0
 80072bc:	4313      	orrs	r3, r2
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	9703      	str	r7, [sp, #12]
 80072c2:	e7cb      	b.n	800725c <_vfiprintf_r+0xe4>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	1d19      	adds	r1, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	9107      	str	r1, [sp, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	db01      	blt.n	80072d4 <_vfiprintf_r+0x15c>
 80072d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d2:	e004      	b.n	80072de <_vfiprintf_r+0x166>
 80072d4:	425b      	negs	r3, r3
 80072d6:	60eb      	str	r3, [r5, #12]
 80072d8:	2302      	movs	r3, #2
 80072da:	4313      	orrs	r3, r2
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	783b      	ldrb	r3, [r7, #0]
 80072e0:	2b2e      	cmp	r3, #46	; 0x2e
 80072e2:	d10a      	bne.n	80072fa <_vfiprintf_r+0x182>
 80072e4:	787b      	ldrb	r3, [r7, #1]
 80072e6:	2b2a      	cmp	r3, #42	; 0x2a
 80072e8:	d137      	bne.n	800735a <_vfiprintf_r+0x1e2>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	3702      	adds	r7, #2
 80072ee:	1d1a      	adds	r2, r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	9207      	str	r2, [sp, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db2d      	blt.n	8007354 <_vfiprintf_r+0x1dc>
 80072f8:	9309      	str	r3, [sp, #36]	; 0x24
 80072fa:	2203      	movs	r2, #3
 80072fc:	7839      	ldrb	r1, [r7, #0]
 80072fe:	4837      	ldr	r0, [pc, #220]	; (80073dc <_vfiprintf_r+0x264>)
 8007300:	f7ff f84e 	bl	80063a0 <memchr>
 8007304:	2800      	cmp	r0, #0
 8007306:	d007      	beq.n	8007318 <_vfiprintf_r+0x1a0>
 8007308:	4b34      	ldr	r3, [pc, #208]	; (80073dc <_vfiprintf_r+0x264>)
 800730a:	682a      	ldr	r2, [r5, #0]
 800730c:	1ac0      	subs	r0, r0, r3
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	4083      	lsls	r3, r0
 8007312:	4313      	orrs	r3, r2
 8007314:	3701      	adds	r7, #1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	7839      	ldrb	r1, [r7, #0]
 800731a:	1c7b      	adds	r3, r7, #1
 800731c:	2206      	movs	r2, #6
 800731e:	4830      	ldr	r0, [pc, #192]	; (80073e0 <_vfiprintf_r+0x268>)
 8007320:	9303      	str	r3, [sp, #12]
 8007322:	7629      	strb	r1, [r5, #24]
 8007324:	f7ff f83c 	bl	80063a0 <memchr>
 8007328:	2800      	cmp	r0, #0
 800732a:	d045      	beq.n	80073b8 <_vfiprintf_r+0x240>
 800732c:	4b2d      	ldr	r3, [pc, #180]	; (80073e4 <_vfiprintf_r+0x26c>)
 800732e:	2b00      	cmp	r3, #0
 8007330:	d127      	bne.n	8007382 <_vfiprintf_r+0x20a>
 8007332:	2207      	movs	r2, #7
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	3307      	adds	r3, #7
 8007338:	4393      	bics	r3, r2
 800733a:	3308      	adds	r3, #8
 800733c:	9307      	str	r3, [sp, #28]
 800733e:	696b      	ldr	r3, [r5, #20]
 8007340:	9a04      	ldr	r2, [sp, #16]
 8007342:	189b      	adds	r3, r3, r2
 8007344:	616b      	str	r3, [r5, #20]
 8007346:	e75d      	b.n	8007204 <_vfiprintf_r+0x8c>
 8007348:	210a      	movs	r1, #10
 800734a:	434b      	muls	r3, r1
 800734c:	4667      	mov	r7, ip
 800734e:	189b      	adds	r3, r3, r2
 8007350:	3909      	subs	r1, #9
 8007352:	e7a3      	b.n	800729c <_vfiprintf_r+0x124>
 8007354:	2301      	movs	r3, #1
 8007356:	425b      	negs	r3, r3
 8007358:	e7ce      	b.n	80072f8 <_vfiprintf_r+0x180>
 800735a:	2300      	movs	r3, #0
 800735c:	001a      	movs	r2, r3
 800735e:	3701      	adds	r7, #1
 8007360:	606b      	str	r3, [r5, #4]
 8007362:	7839      	ldrb	r1, [r7, #0]
 8007364:	1c78      	adds	r0, r7, #1
 8007366:	3930      	subs	r1, #48	; 0x30
 8007368:	4684      	mov	ip, r0
 800736a:	2909      	cmp	r1, #9
 800736c:	d903      	bls.n	8007376 <_vfiprintf_r+0x1fe>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0c3      	beq.n	80072fa <_vfiprintf_r+0x182>
 8007372:	9209      	str	r2, [sp, #36]	; 0x24
 8007374:	e7c1      	b.n	80072fa <_vfiprintf_r+0x182>
 8007376:	230a      	movs	r3, #10
 8007378:	435a      	muls	r2, r3
 800737a:	4667      	mov	r7, ip
 800737c:	1852      	adds	r2, r2, r1
 800737e:	3b09      	subs	r3, #9
 8007380:	e7ef      	b.n	8007362 <_vfiprintf_r+0x1ea>
 8007382:	ab07      	add	r3, sp, #28
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	0022      	movs	r2, r4
 8007388:	0029      	movs	r1, r5
 800738a:	0030      	movs	r0, r6
 800738c:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <_vfiprintf_r+0x270>)
 800738e:	f7fd fd6f 	bl	8004e70 <_printf_float>
 8007392:	9004      	str	r0, [sp, #16]
 8007394:	9b04      	ldr	r3, [sp, #16]
 8007396:	3301      	adds	r3, #1
 8007398:	d1d1      	bne.n	800733e <_vfiprintf_r+0x1c6>
 800739a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800739c:	07db      	lsls	r3, r3, #31
 800739e:	d405      	bmi.n	80073ac <_vfiprintf_r+0x234>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	059b      	lsls	r3, r3, #22
 80073a4:	d402      	bmi.n	80073ac <_vfiprintf_r+0x234>
 80073a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a8:	f000 fad4 	bl	8007954 <__retarget_lock_release_recursive>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	065b      	lsls	r3, r3, #25
 80073b0:	d500      	bpl.n	80073b4 <_vfiprintf_r+0x23c>
 80073b2:	e70a      	b.n	80071ca <_vfiprintf_r+0x52>
 80073b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073b6:	e70a      	b.n	80071ce <_vfiprintf_r+0x56>
 80073b8:	ab07      	add	r3, sp, #28
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	0022      	movs	r2, r4
 80073be:	0029      	movs	r1, r5
 80073c0:	0030      	movs	r0, r6
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <_vfiprintf_r+0x270>)
 80073c4:	f7fe f806 	bl	80053d4 <_printf_i>
 80073c8:	e7e3      	b.n	8007392 <_vfiprintf_r+0x21a>
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	080081ac 	.word	0x080081ac
 80073d0:	080081cc 	.word	0x080081cc
 80073d4:	0800818c 	.word	0x0800818c
 80073d8:	08008034 	.word	0x08008034
 80073dc:	0800803a 	.word	0x0800803a
 80073e0:	0800803e 	.word	0x0800803e
 80073e4:	08004e71 	.word	0x08004e71
 80073e8:	08007155 	.word	0x08007155

080073ec <__swbuf_r>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	0005      	movs	r5, r0
 80073f0:	000e      	movs	r6, r1
 80073f2:	0014      	movs	r4, r2
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d004      	beq.n	8007402 <__swbuf_r+0x16>
 80073f8:	6983      	ldr	r3, [r0, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <__swbuf_r+0x16>
 80073fe:	f000 fa07 	bl	8007810 <__sinit>
 8007402:	4b22      	ldr	r3, [pc, #136]	; (800748c <__swbuf_r+0xa0>)
 8007404:	429c      	cmp	r4, r3
 8007406:	d12e      	bne.n	8007466 <__swbuf_r+0x7a>
 8007408:	686c      	ldr	r4, [r5, #4]
 800740a:	69a3      	ldr	r3, [r4, #24]
 800740c:	60a3      	str	r3, [r4, #8]
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	071b      	lsls	r3, r3, #28
 8007412:	d532      	bpl.n	800747a <__swbuf_r+0x8e>
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d02f      	beq.n	800747a <__swbuf_r+0x8e>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	b2f7      	uxtb	r7, r6
 8007420:	1a98      	subs	r0, r3, r2
 8007422:	6963      	ldr	r3, [r4, #20]
 8007424:	b2f6      	uxtb	r6, r6
 8007426:	4283      	cmp	r3, r0
 8007428:	dc05      	bgt.n	8007436 <__swbuf_r+0x4a>
 800742a:	0021      	movs	r1, r4
 800742c:	0028      	movs	r0, r5
 800742e:	f000 f94d 	bl	80076cc <_fflush_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	d127      	bne.n	8007486 <__swbuf_r+0x9a>
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	3001      	adds	r0, #1
 800743a:	3b01      	subs	r3, #1
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	6022      	str	r2, [r4, #0]
 8007444:	701f      	strb	r7, [r3, #0]
 8007446:	6963      	ldr	r3, [r4, #20]
 8007448:	4283      	cmp	r3, r0
 800744a:	d004      	beq.n	8007456 <__swbuf_r+0x6a>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	07db      	lsls	r3, r3, #31
 8007450:	d507      	bpl.n	8007462 <__swbuf_r+0x76>
 8007452:	2e0a      	cmp	r6, #10
 8007454:	d105      	bne.n	8007462 <__swbuf_r+0x76>
 8007456:	0021      	movs	r1, r4
 8007458:	0028      	movs	r0, r5
 800745a:	f000 f937 	bl	80076cc <_fflush_r>
 800745e:	2800      	cmp	r0, #0
 8007460:	d111      	bne.n	8007486 <__swbuf_r+0x9a>
 8007462:	0030      	movs	r0, r6
 8007464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <__swbuf_r+0xa4>)
 8007468:	429c      	cmp	r4, r3
 800746a:	d101      	bne.n	8007470 <__swbuf_r+0x84>
 800746c:	68ac      	ldr	r4, [r5, #8]
 800746e:	e7cc      	b.n	800740a <__swbuf_r+0x1e>
 8007470:	4b08      	ldr	r3, [pc, #32]	; (8007494 <__swbuf_r+0xa8>)
 8007472:	429c      	cmp	r4, r3
 8007474:	d1c9      	bne.n	800740a <__swbuf_r+0x1e>
 8007476:	68ec      	ldr	r4, [r5, #12]
 8007478:	e7c7      	b.n	800740a <__swbuf_r+0x1e>
 800747a:	0021      	movs	r1, r4
 800747c:	0028      	movs	r0, r5
 800747e:	f000 f819 	bl	80074b4 <__swsetup_r>
 8007482:	2800      	cmp	r0, #0
 8007484:	d0c9      	beq.n	800741a <__swbuf_r+0x2e>
 8007486:	2601      	movs	r6, #1
 8007488:	4276      	negs	r6, r6
 800748a:	e7ea      	b.n	8007462 <__swbuf_r+0x76>
 800748c:	080081ac 	.word	0x080081ac
 8007490:	080081cc 	.word	0x080081cc
 8007494:	0800818c 	.word	0x0800818c

08007498 <__ascii_wctomb>:
 8007498:	0003      	movs	r3, r0
 800749a:	1e08      	subs	r0, r1, #0
 800749c:	d005      	beq.n	80074aa <__ascii_wctomb+0x12>
 800749e:	2aff      	cmp	r2, #255	; 0xff
 80074a0:	d904      	bls.n	80074ac <__ascii_wctomb+0x14>
 80074a2:	228a      	movs	r2, #138	; 0x8a
 80074a4:	2001      	movs	r0, #1
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	4240      	negs	r0, r0
 80074aa:	4770      	bx	lr
 80074ac:	2001      	movs	r0, #1
 80074ae:	700a      	strb	r2, [r1, #0]
 80074b0:	e7fb      	b.n	80074aa <__ascii_wctomb+0x12>
	...

080074b4 <__swsetup_r>:
 80074b4:	4b37      	ldr	r3, [pc, #220]	; (8007594 <__swsetup_r+0xe0>)
 80074b6:	b570      	push	{r4, r5, r6, lr}
 80074b8:	681d      	ldr	r5, [r3, #0]
 80074ba:	0006      	movs	r6, r0
 80074bc:	000c      	movs	r4, r1
 80074be:	2d00      	cmp	r5, #0
 80074c0:	d005      	beq.n	80074ce <__swsetup_r+0x1a>
 80074c2:	69ab      	ldr	r3, [r5, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <__swsetup_r+0x1a>
 80074c8:	0028      	movs	r0, r5
 80074ca:	f000 f9a1 	bl	8007810 <__sinit>
 80074ce:	4b32      	ldr	r3, [pc, #200]	; (8007598 <__swsetup_r+0xe4>)
 80074d0:	429c      	cmp	r4, r3
 80074d2:	d10f      	bne.n	80074f4 <__swsetup_r+0x40>
 80074d4:	686c      	ldr	r4, [r5, #4]
 80074d6:	230c      	movs	r3, #12
 80074d8:	5ee2      	ldrsh	r2, [r4, r3]
 80074da:	b293      	uxth	r3, r2
 80074dc:	0711      	lsls	r1, r2, #28
 80074de:	d42d      	bmi.n	800753c <__swsetup_r+0x88>
 80074e0:	06d9      	lsls	r1, r3, #27
 80074e2:	d411      	bmi.n	8007508 <__swsetup_r+0x54>
 80074e4:	2309      	movs	r3, #9
 80074e6:	2001      	movs	r0, #1
 80074e8:	6033      	str	r3, [r6, #0]
 80074ea:	3337      	adds	r3, #55	; 0x37
 80074ec:	4313      	orrs	r3, r2
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	4240      	negs	r0, r0
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	4b29      	ldr	r3, [pc, #164]	; (800759c <__swsetup_r+0xe8>)
 80074f6:	429c      	cmp	r4, r3
 80074f8:	d101      	bne.n	80074fe <__swsetup_r+0x4a>
 80074fa:	68ac      	ldr	r4, [r5, #8]
 80074fc:	e7eb      	b.n	80074d6 <__swsetup_r+0x22>
 80074fe:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <__swsetup_r+0xec>)
 8007500:	429c      	cmp	r4, r3
 8007502:	d1e8      	bne.n	80074d6 <__swsetup_r+0x22>
 8007504:	68ec      	ldr	r4, [r5, #12]
 8007506:	e7e6      	b.n	80074d6 <__swsetup_r+0x22>
 8007508:	075b      	lsls	r3, r3, #29
 800750a:	d513      	bpl.n	8007534 <__swsetup_r+0x80>
 800750c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800750e:	2900      	cmp	r1, #0
 8007510:	d008      	beq.n	8007524 <__swsetup_r+0x70>
 8007512:	0023      	movs	r3, r4
 8007514:	3344      	adds	r3, #68	; 0x44
 8007516:	4299      	cmp	r1, r3
 8007518:	d002      	beq.n	8007520 <__swsetup_r+0x6c>
 800751a:	0030      	movs	r0, r6
 800751c:	f7ff fb1c 	bl	8006b58 <_free_r>
 8007520:	2300      	movs	r3, #0
 8007522:	6363      	str	r3, [r4, #52]	; 0x34
 8007524:	2224      	movs	r2, #36	; 0x24
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	4393      	bics	r3, r2
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	2300      	movs	r3, #0
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	6023      	str	r3, [r4, #0]
 8007534:	2308      	movs	r3, #8
 8007536:	89a2      	ldrh	r2, [r4, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10b      	bne.n	800755a <__swsetup_r+0xa6>
 8007542:	21a0      	movs	r1, #160	; 0xa0
 8007544:	2280      	movs	r2, #128	; 0x80
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	0089      	lsls	r1, r1, #2
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	400b      	ands	r3, r1
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <__swsetup_r+0xa6>
 8007552:	0021      	movs	r1, r4
 8007554:	0030      	movs	r0, r6
 8007556:	f000 fa27 	bl	80079a8 <__smakebuf_r>
 800755a:	220c      	movs	r2, #12
 800755c:	5ea3      	ldrsh	r3, [r4, r2]
 800755e:	2001      	movs	r0, #1
 8007560:	001a      	movs	r2, r3
 8007562:	b299      	uxth	r1, r3
 8007564:	4002      	ands	r2, r0
 8007566:	4203      	tst	r3, r0
 8007568:	d00f      	beq.n	800758a <__swsetup_r+0xd6>
 800756a:	2200      	movs	r2, #0
 800756c:	60a2      	str	r2, [r4, #8]
 800756e:	6962      	ldr	r2, [r4, #20]
 8007570:	4252      	negs	r2, r2
 8007572:	61a2      	str	r2, [r4, #24]
 8007574:	2000      	movs	r0, #0
 8007576:	6922      	ldr	r2, [r4, #16]
 8007578:	4282      	cmp	r2, r0
 800757a:	d1ba      	bne.n	80074f2 <__swsetup_r+0x3e>
 800757c:	060a      	lsls	r2, r1, #24
 800757e:	d5b8      	bpl.n	80074f2 <__swsetup_r+0x3e>
 8007580:	2240      	movs	r2, #64	; 0x40
 8007582:	4313      	orrs	r3, r2
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	3801      	subs	r0, #1
 8007588:	e7b3      	b.n	80074f2 <__swsetup_r+0x3e>
 800758a:	0788      	lsls	r0, r1, #30
 800758c:	d400      	bmi.n	8007590 <__swsetup_r+0xdc>
 800758e:	6962      	ldr	r2, [r4, #20]
 8007590:	60a2      	str	r2, [r4, #8]
 8007592:	e7ef      	b.n	8007574 <__swsetup_r+0xc0>
 8007594:	2000000c 	.word	0x2000000c
 8007598:	080081ac 	.word	0x080081ac
 800759c:	080081cc 	.word	0x080081cc
 80075a0:	0800818c 	.word	0x0800818c

080075a4 <abort>:
 80075a4:	2006      	movs	r0, #6
 80075a6:	b510      	push	{r4, lr}
 80075a8:	f000 fa74 	bl	8007a94 <raise>
 80075ac:	2001      	movs	r0, #1
 80075ae:	f7fb faca 	bl	8002b46 <_exit>
	...

080075b4 <__sflush_r>:
 80075b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b6:	898b      	ldrh	r3, [r1, #12]
 80075b8:	0005      	movs	r5, r0
 80075ba:	000c      	movs	r4, r1
 80075bc:	071a      	lsls	r2, r3, #28
 80075be:	d45f      	bmi.n	8007680 <__sflush_r+0xcc>
 80075c0:	684a      	ldr	r2, [r1, #4]
 80075c2:	2a00      	cmp	r2, #0
 80075c4:	dc04      	bgt.n	80075d0 <__sflush_r+0x1c>
 80075c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	dc01      	bgt.n	80075d0 <__sflush_r+0x1c>
 80075cc:	2000      	movs	r0, #0
 80075ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80075d2:	2f00      	cmp	r7, #0
 80075d4:	d0fa      	beq.n	80075cc <__sflush_r+0x18>
 80075d6:	2200      	movs	r2, #0
 80075d8:	2180      	movs	r1, #128	; 0x80
 80075da:	682e      	ldr	r6, [r5, #0]
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	001a      	movs	r2, r3
 80075e0:	0149      	lsls	r1, r1, #5
 80075e2:	400a      	ands	r2, r1
 80075e4:	420b      	tst	r3, r1
 80075e6:	d034      	beq.n	8007652 <__sflush_r+0x9e>
 80075e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	075b      	lsls	r3, r3, #29
 80075ee:	d506      	bpl.n	80075fe <__sflush_r+0x4a>
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	1ac0      	subs	r0, r0, r3
 80075f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <__sflush_r+0x4a>
 80075fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075fc:	1ac0      	subs	r0, r0, r3
 80075fe:	0002      	movs	r2, r0
 8007600:	6a21      	ldr	r1, [r4, #32]
 8007602:	2300      	movs	r3, #0
 8007604:	0028      	movs	r0, r5
 8007606:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007608:	47b8      	blx	r7
 800760a:	89a1      	ldrh	r1, [r4, #12]
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d106      	bne.n	800761e <__sflush_r+0x6a>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	2b1d      	cmp	r3, #29
 8007614:	d831      	bhi.n	800767a <__sflush_r+0xc6>
 8007616:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <__sflush_r+0x114>)
 8007618:	40da      	lsrs	r2, r3
 800761a:	07d3      	lsls	r3, r2, #31
 800761c:	d52d      	bpl.n	800767a <__sflush_r+0xc6>
 800761e:	2300      	movs	r3, #0
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	04cb      	lsls	r3, r1, #19
 8007628:	d505      	bpl.n	8007636 <__sflush_r+0x82>
 800762a:	1c43      	adds	r3, r0, #1
 800762c:	d102      	bne.n	8007634 <__sflush_r+0x80>
 800762e:	682b      	ldr	r3, [r5, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d100      	bne.n	8007636 <__sflush_r+0x82>
 8007634:	6560      	str	r0, [r4, #84]	; 0x54
 8007636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007638:	602e      	str	r6, [r5, #0]
 800763a:	2900      	cmp	r1, #0
 800763c:	d0c6      	beq.n	80075cc <__sflush_r+0x18>
 800763e:	0023      	movs	r3, r4
 8007640:	3344      	adds	r3, #68	; 0x44
 8007642:	4299      	cmp	r1, r3
 8007644:	d002      	beq.n	800764c <__sflush_r+0x98>
 8007646:	0028      	movs	r0, r5
 8007648:	f7ff fa86 	bl	8006b58 <_free_r>
 800764c:	2000      	movs	r0, #0
 800764e:	6360      	str	r0, [r4, #52]	; 0x34
 8007650:	e7bd      	b.n	80075ce <__sflush_r+0x1a>
 8007652:	2301      	movs	r3, #1
 8007654:	0028      	movs	r0, r5
 8007656:	6a21      	ldr	r1, [r4, #32]
 8007658:	47b8      	blx	r7
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	d1c5      	bne.n	80075ea <__sflush_r+0x36>
 800765e:	682b      	ldr	r3, [r5, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0c2      	beq.n	80075ea <__sflush_r+0x36>
 8007664:	2b1d      	cmp	r3, #29
 8007666:	d001      	beq.n	800766c <__sflush_r+0xb8>
 8007668:	2b16      	cmp	r3, #22
 800766a:	d101      	bne.n	8007670 <__sflush_r+0xbc>
 800766c:	602e      	str	r6, [r5, #0]
 800766e:	e7ad      	b.n	80075cc <__sflush_r+0x18>
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	89a2      	ldrh	r2, [r4, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	e7a9      	b.n	80075ce <__sflush_r+0x1a>
 800767a:	2340      	movs	r3, #64	; 0x40
 800767c:	430b      	orrs	r3, r1
 800767e:	e7fa      	b.n	8007676 <__sflush_r+0xc2>
 8007680:	690f      	ldr	r7, [r1, #16]
 8007682:	2f00      	cmp	r7, #0
 8007684:	d0a2      	beq.n	80075cc <__sflush_r+0x18>
 8007686:	680a      	ldr	r2, [r1, #0]
 8007688:	600f      	str	r7, [r1, #0]
 800768a:	1bd2      	subs	r2, r2, r7
 800768c:	9201      	str	r2, [sp, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	079b      	lsls	r3, r3, #30
 8007692:	d100      	bne.n	8007696 <__sflush_r+0xe2>
 8007694:	694a      	ldr	r2, [r1, #20]
 8007696:	60a2      	str	r2, [r4, #8]
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc00      	bgt.n	80076a0 <__sflush_r+0xec>
 800769e:	e795      	b.n	80075cc <__sflush_r+0x18>
 80076a0:	003a      	movs	r2, r7
 80076a2:	0028      	movs	r0, r5
 80076a4:	9b01      	ldr	r3, [sp, #4]
 80076a6:	6a21      	ldr	r1, [r4, #32]
 80076a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076aa:	47b0      	blx	r6
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dc06      	bgt.n	80076be <__sflush_r+0x10a>
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	2001      	movs	r0, #1
 80076b4:	89a2      	ldrh	r2, [r4, #12]
 80076b6:	4240      	negs	r0, r0
 80076b8:	4313      	orrs	r3, r2
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	e787      	b.n	80075ce <__sflush_r+0x1a>
 80076be:	9b01      	ldr	r3, [sp, #4]
 80076c0:	183f      	adds	r7, r7, r0
 80076c2:	1a1b      	subs	r3, r3, r0
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	e7e7      	b.n	8007698 <__sflush_r+0xe4>
 80076c8:	20400001 	.word	0x20400001

080076cc <_fflush_r>:
 80076cc:	690b      	ldr	r3, [r1, #16]
 80076ce:	b570      	push	{r4, r5, r6, lr}
 80076d0:	0005      	movs	r5, r0
 80076d2:	000c      	movs	r4, r1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <_fflush_r+0x12>
 80076d8:	2500      	movs	r5, #0
 80076da:	0028      	movs	r0, r5
 80076dc:	bd70      	pop	{r4, r5, r6, pc}
 80076de:	2800      	cmp	r0, #0
 80076e0:	d004      	beq.n	80076ec <_fflush_r+0x20>
 80076e2:	6983      	ldr	r3, [r0, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <_fflush_r+0x20>
 80076e8:	f000 f892 	bl	8007810 <__sinit>
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <_fflush_r+0x74>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d11b      	bne.n	800772a <_fflush_r+0x5e>
 80076f2:	686c      	ldr	r4, [r5, #4]
 80076f4:	220c      	movs	r2, #12
 80076f6:	5ea3      	ldrsh	r3, [r4, r2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0ed      	beq.n	80076d8 <_fflush_r+0xc>
 80076fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076fe:	07d2      	lsls	r2, r2, #31
 8007700:	d404      	bmi.n	800770c <_fflush_r+0x40>
 8007702:	059b      	lsls	r3, r3, #22
 8007704:	d402      	bmi.n	800770c <_fflush_r+0x40>
 8007706:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007708:	f000 f923 	bl	8007952 <__retarget_lock_acquire_recursive>
 800770c:	0028      	movs	r0, r5
 800770e:	0021      	movs	r1, r4
 8007710:	f7ff ff50 	bl	80075b4 <__sflush_r>
 8007714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007716:	0005      	movs	r5, r0
 8007718:	07db      	lsls	r3, r3, #31
 800771a:	d4de      	bmi.n	80076da <_fflush_r+0xe>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	059b      	lsls	r3, r3, #22
 8007720:	d4db      	bmi.n	80076da <_fflush_r+0xe>
 8007722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007724:	f000 f916 	bl	8007954 <__retarget_lock_release_recursive>
 8007728:	e7d7      	b.n	80076da <_fflush_r+0xe>
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <_fflush_r+0x78>)
 800772c:	429c      	cmp	r4, r3
 800772e:	d101      	bne.n	8007734 <_fflush_r+0x68>
 8007730:	68ac      	ldr	r4, [r5, #8]
 8007732:	e7df      	b.n	80076f4 <_fflush_r+0x28>
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <_fflush_r+0x7c>)
 8007736:	429c      	cmp	r4, r3
 8007738:	d1dc      	bne.n	80076f4 <_fflush_r+0x28>
 800773a:	68ec      	ldr	r4, [r5, #12]
 800773c:	e7da      	b.n	80076f4 <_fflush_r+0x28>
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	080081ac 	.word	0x080081ac
 8007744:	080081cc 	.word	0x080081cc
 8007748:	0800818c 	.word	0x0800818c

0800774c <std>:
 800774c:	2300      	movs	r3, #0
 800774e:	b510      	push	{r4, lr}
 8007750:	0004      	movs	r4, r0
 8007752:	6003      	str	r3, [r0, #0]
 8007754:	6043      	str	r3, [r0, #4]
 8007756:	6083      	str	r3, [r0, #8]
 8007758:	8181      	strh	r1, [r0, #12]
 800775a:	6643      	str	r3, [r0, #100]	; 0x64
 800775c:	0019      	movs	r1, r3
 800775e:	81c2      	strh	r2, [r0, #14]
 8007760:	6103      	str	r3, [r0, #16]
 8007762:	6143      	str	r3, [r0, #20]
 8007764:	6183      	str	r3, [r0, #24]
 8007766:	2208      	movs	r2, #8
 8007768:	305c      	adds	r0, #92	; 0x5c
 800776a:	f7fd facf 	bl	8004d0c <memset>
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <std+0x38>)
 8007770:	6224      	str	r4, [r4, #32]
 8007772:	6263      	str	r3, [r4, #36]	; 0x24
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <std+0x3c>)
 8007776:	62a3      	str	r3, [r4, #40]	; 0x28
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <std+0x40>)
 800777a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <std+0x44>)
 800777e:	6323      	str	r3, [r4, #48]	; 0x30
 8007780:	bd10      	pop	{r4, pc}
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	08007ad5 	.word	0x08007ad5
 8007788:	08007afd 	.word	0x08007afd
 800778c:	08007b35 	.word	0x08007b35
 8007790:	08007b61 	.word	0x08007b61

08007794 <_cleanup_r>:
 8007794:	b510      	push	{r4, lr}
 8007796:	4902      	ldr	r1, [pc, #8]	; (80077a0 <_cleanup_r+0xc>)
 8007798:	f000 f8ba 	bl	8007910 <_fwalk_reent>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	080076cd 	.word	0x080076cd

080077a4 <__sfmoreglue>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2568      	movs	r5, #104	; 0x68
 80077a8:	1e4a      	subs	r2, r1, #1
 80077aa:	4355      	muls	r5, r2
 80077ac:	000e      	movs	r6, r1
 80077ae:	0029      	movs	r1, r5
 80077b0:	3174      	adds	r1, #116	; 0x74
 80077b2:	f7ff fa3d 	bl	8006c30 <_malloc_r>
 80077b6:	1e04      	subs	r4, r0, #0
 80077b8:	d008      	beq.n	80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	002a      	movs	r2, r5
 80077be:	6001      	str	r1, [r0, #0]
 80077c0:	6046      	str	r6, [r0, #4]
 80077c2:	300c      	adds	r0, #12
 80077c4:	60a0      	str	r0, [r4, #8]
 80077c6:	3268      	adds	r2, #104	; 0x68
 80077c8:	f7fd faa0 	bl	8004d0c <memset>
 80077cc:	0020      	movs	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sfp_lock_acquire>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4802      	ldr	r0, [pc, #8]	; (80077dc <__sfp_lock_acquire+0xc>)
 80077d4:	f000 f8bd 	bl	8007952 <__retarget_lock_acquire_recursive>
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	200002f9 	.word	0x200002f9

080077e0 <__sfp_lock_release>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4802      	ldr	r0, [pc, #8]	; (80077ec <__sfp_lock_release+0xc>)
 80077e4:	f000 f8b6 	bl	8007954 <__retarget_lock_release_recursive>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	200002f9 	.word	0x200002f9

080077f0 <__sinit_lock_acquire>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4802      	ldr	r0, [pc, #8]	; (80077fc <__sinit_lock_acquire+0xc>)
 80077f4:	f000 f8ad 	bl	8007952 <__retarget_lock_acquire_recursive>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	200002fa 	.word	0x200002fa

08007800 <__sinit_lock_release>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4802      	ldr	r0, [pc, #8]	; (800780c <__sinit_lock_release+0xc>)
 8007804:	f000 f8a6 	bl	8007954 <__retarget_lock_release_recursive>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	200002fa 	.word	0x200002fa

08007810 <__sinit>:
 8007810:	b513      	push	{r0, r1, r4, lr}
 8007812:	0004      	movs	r4, r0
 8007814:	f7ff ffec 	bl	80077f0 <__sinit_lock_acquire>
 8007818:	69a3      	ldr	r3, [r4, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <__sinit+0x14>
 800781e:	f7ff ffef 	bl	8007800 <__sinit_lock_release>
 8007822:	bd13      	pop	{r0, r1, r4, pc}
 8007824:	64a3      	str	r3, [r4, #72]	; 0x48
 8007826:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007828:	6523      	str	r3, [r4, #80]	; 0x50
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <__sinit+0x68>)
 800782c:	4a13      	ldr	r2, [pc, #76]	; (800787c <__sinit+0x6c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	62a2      	str	r2, [r4, #40]	; 0x28
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	42a3      	cmp	r3, r4
 8007836:	d101      	bne.n	800783c <__sinit+0x2c>
 8007838:	2301      	movs	r3, #1
 800783a:	61a3      	str	r3, [r4, #24]
 800783c:	0020      	movs	r0, r4
 800783e:	f000 f81f 	bl	8007880 <__sfp>
 8007842:	6060      	str	r0, [r4, #4]
 8007844:	0020      	movs	r0, r4
 8007846:	f000 f81b 	bl	8007880 <__sfp>
 800784a:	60a0      	str	r0, [r4, #8]
 800784c:	0020      	movs	r0, r4
 800784e:	f000 f817 	bl	8007880 <__sfp>
 8007852:	2200      	movs	r2, #0
 8007854:	2104      	movs	r1, #4
 8007856:	60e0      	str	r0, [r4, #12]
 8007858:	6860      	ldr	r0, [r4, #4]
 800785a:	f7ff ff77 	bl	800774c <std>
 800785e:	2201      	movs	r2, #1
 8007860:	2109      	movs	r1, #9
 8007862:	68a0      	ldr	r0, [r4, #8]
 8007864:	f7ff ff72 	bl	800774c <std>
 8007868:	2202      	movs	r2, #2
 800786a:	2112      	movs	r1, #18
 800786c:	68e0      	ldr	r0, [r4, #12]
 800786e:	f7ff ff6d 	bl	800774c <std>
 8007872:	2301      	movs	r3, #1
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	e7d2      	b.n	800781e <__sinit+0xe>
 8007878:	08007e14 	.word	0x08007e14
 800787c:	08007795 	.word	0x08007795

08007880 <__sfp>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	0007      	movs	r7, r0
 8007884:	f7ff ffa4 	bl	80077d0 <__sfp_lock_acquire>
 8007888:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <__sfp+0x88>)
 800788a:	681e      	ldr	r6, [r3, #0]
 800788c:	69b3      	ldr	r3, [r6, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <__sfp+0x18>
 8007892:	0030      	movs	r0, r6
 8007894:	f7ff ffbc 	bl	8007810 <__sinit>
 8007898:	3648      	adds	r6, #72	; 0x48
 800789a:	68b4      	ldr	r4, [r6, #8]
 800789c:	6873      	ldr	r3, [r6, #4]
 800789e:	3b01      	subs	r3, #1
 80078a0:	d504      	bpl.n	80078ac <__sfp+0x2c>
 80078a2:	6833      	ldr	r3, [r6, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d022      	beq.n	80078ee <__sfp+0x6e>
 80078a8:	6836      	ldr	r6, [r6, #0]
 80078aa:	e7f6      	b.n	800789a <__sfp+0x1a>
 80078ac:	220c      	movs	r2, #12
 80078ae:	5ea5      	ldrsh	r5, [r4, r2]
 80078b0:	2d00      	cmp	r5, #0
 80078b2:	d11a      	bne.n	80078ea <__sfp+0x6a>
 80078b4:	0020      	movs	r0, r4
 80078b6:	4b15      	ldr	r3, [pc, #84]	; (800790c <__sfp+0x8c>)
 80078b8:	3058      	adds	r0, #88	; 0x58
 80078ba:	60e3      	str	r3, [r4, #12]
 80078bc:	6665      	str	r5, [r4, #100]	; 0x64
 80078be:	f000 f847 	bl	8007950 <__retarget_lock_init_recursive>
 80078c2:	f7ff ff8d 	bl	80077e0 <__sfp_lock_release>
 80078c6:	0020      	movs	r0, r4
 80078c8:	2208      	movs	r2, #8
 80078ca:	0029      	movs	r1, r5
 80078cc:	6025      	str	r5, [r4, #0]
 80078ce:	60a5      	str	r5, [r4, #8]
 80078d0:	6065      	str	r5, [r4, #4]
 80078d2:	6125      	str	r5, [r4, #16]
 80078d4:	6165      	str	r5, [r4, #20]
 80078d6:	61a5      	str	r5, [r4, #24]
 80078d8:	305c      	adds	r0, #92	; 0x5c
 80078da:	f7fd fa17 	bl	8004d0c <memset>
 80078de:	6365      	str	r5, [r4, #52]	; 0x34
 80078e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80078e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80078e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80078e6:	0020      	movs	r0, r4
 80078e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ea:	3468      	adds	r4, #104	; 0x68
 80078ec:	e7d7      	b.n	800789e <__sfp+0x1e>
 80078ee:	2104      	movs	r1, #4
 80078f0:	0038      	movs	r0, r7
 80078f2:	f7ff ff57 	bl	80077a4 <__sfmoreglue>
 80078f6:	1e04      	subs	r4, r0, #0
 80078f8:	6030      	str	r0, [r6, #0]
 80078fa:	d1d5      	bne.n	80078a8 <__sfp+0x28>
 80078fc:	f7ff ff70 	bl	80077e0 <__sfp_lock_release>
 8007900:	230c      	movs	r3, #12
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	e7ef      	b.n	80078e6 <__sfp+0x66>
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	08007e14 	.word	0x08007e14
 800790c:	ffff0001 	.word	0xffff0001

08007910 <_fwalk_reent>:
 8007910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007912:	0004      	movs	r4, r0
 8007914:	0006      	movs	r6, r0
 8007916:	2700      	movs	r7, #0
 8007918:	9101      	str	r1, [sp, #4]
 800791a:	3448      	adds	r4, #72	; 0x48
 800791c:	6863      	ldr	r3, [r4, #4]
 800791e:	68a5      	ldr	r5, [r4, #8]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	d504      	bpl.n	8007934 <_fwalk_reent+0x24>
 800792a:	6824      	ldr	r4, [r4, #0]
 800792c:	2c00      	cmp	r4, #0
 800792e:	d1f5      	bne.n	800791c <_fwalk_reent+0xc>
 8007930:	0038      	movs	r0, r7
 8007932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007934:	89ab      	ldrh	r3, [r5, #12]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d908      	bls.n	800794c <_fwalk_reent+0x3c>
 800793a:	220e      	movs	r2, #14
 800793c:	5eab      	ldrsh	r3, [r5, r2]
 800793e:	3301      	adds	r3, #1
 8007940:	d004      	beq.n	800794c <_fwalk_reent+0x3c>
 8007942:	0029      	movs	r1, r5
 8007944:	0030      	movs	r0, r6
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	4798      	blx	r3
 800794a:	4307      	orrs	r7, r0
 800794c:	3568      	adds	r5, #104	; 0x68
 800794e:	e7e8      	b.n	8007922 <_fwalk_reent+0x12>

08007950 <__retarget_lock_init_recursive>:
 8007950:	4770      	bx	lr

08007952 <__retarget_lock_acquire_recursive>:
 8007952:	4770      	bx	lr

08007954 <__retarget_lock_release_recursive>:
 8007954:	4770      	bx	lr
	...

08007958 <__swhatbuf_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	000e      	movs	r6, r1
 800795c:	001d      	movs	r5, r3
 800795e:	230e      	movs	r3, #14
 8007960:	5ec9      	ldrsh	r1, [r1, r3]
 8007962:	0014      	movs	r4, r2
 8007964:	b096      	sub	sp, #88	; 0x58
 8007966:	2900      	cmp	r1, #0
 8007968:	da08      	bge.n	800797c <__swhatbuf_r+0x24>
 800796a:	220c      	movs	r2, #12
 800796c:	5eb3      	ldrsh	r3, [r6, r2]
 800796e:	2200      	movs	r2, #0
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	061b      	lsls	r3, r3, #24
 8007974:	d411      	bmi.n	800799a <__swhatbuf_r+0x42>
 8007976:	2380      	movs	r3, #128	; 0x80
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	e00f      	b.n	800799c <__swhatbuf_r+0x44>
 800797c:	466a      	mov	r2, sp
 800797e:	f000 f91b 	bl	8007bb8 <_fstat_r>
 8007982:	2800      	cmp	r0, #0
 8007984:	dbf1      	blt.n	800796a <__swhatbuf_r+0x12>
 8007986:	23f0      	movs	r3, #240	; 0xf0
 8007988:	9901      	ldr	r1, [sp, #4]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	4019      	ands	r1, r3
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <__swhatbuf_r+0x4c>)
 8007990:	18c9      	adds	r1, r1, r3
 8007992:	424b      	negs	r3, r1
 8007994:	4159      	adcs	r1, r3
 8007996:	6029      	str	r1, [r5, #0]
 8007998:	e7ed      	b.n	8007976 <__swhatbuf_r+0x1e>
 800799a:	2340      	movs	r3, #64	; 0x40
 800799c:	2000      	movs	r0, #0
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	b016      	add	sp, #88	; 0x58
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	ffffe000 	.word	0xffffe000

080079a8 <__smakebuf_r>:
 80079a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079aa:	2602      	movs	r6, #2
 80079ac:	898b      	ldrh	r3, [r1, #12]
 80079ae:	0005      	movs	r5, r0
 80079b0:	000c      	movs	r4, r1
 80079b2:	4233      	tst	r3, r6
 80079b4:	d006      	beq.n	80079c4 <__smakebuf_r+0x1c>
 80079b6:	0023      	movs	r3, r4
 80079b8:	3347      	adds	r3, #71	; 0x47
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	2301      	movs	r3, #1
 80079c0:	6163      	str	r3, [r4, #20]
 80079c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80079c4:	466a      	mov	r2, sp
 80079c6:	ab01      	add	r3, sp, #4
 80079c8:	f7ff ffc6 	bl	8007958 <__swhatbuf_r>
 80079cc:	9900      	ldr	r1, [sp, #0]
 80079ce:	0007      	movs	r7, r0
 80079d0:	0028      	movs	r0, r5
 80079d2:	f7ff f92d 	bl	8006c30 <_malloc_r>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d108      	bne.n	80079ec <__smakebuf_r+0x44>
 80079da:	220c      	movs	r2, #12
 80079dc:	5ea3      	ldrsh	r3, [r4, r2]
 80079de:	059a      	lsls	r2, r3, #22
 80079e0:	d4ef      	bmi.n	80079c2 <__smakebuf_r+0x1a>
 80079e2:	2203      	movs	r2, #3
 80079e4:	4393      	bics	r3, r2
 80079e6:	431e      	orrs	r6, r3
 80079e8:	81a6      	strh	r6, [r4, #12]
 80079ea:	e7e4      	b.n	80079b6 <__smakebuf_r+0xe>
 80079ec:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <__smakebuf_r+0x84>)
 80079ee:	62ab      	str	r3, [r5, #40]	; 0x28
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	89a2      	ldrh	r2, [r4, #12]
 80079f4:	6020      	str	r0, [r4, #0]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	6120      	str	r0, [r4, #16]
 80079fe:	6163      	str	r3, [r4, #20]
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <__smakebuf_r+0x7a>
 8007a06:	0028      	movs	r0, r5
 8007a08:	230e      	movs	r3, #14
 8007a0a:	5ee1      	ldrsh	r1, [r4, r3]
 8007a0c:	f000 f8e6 	bl	8007bdc <_isatty_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d006      	beq.n	8007a22 <__smakebuf_r+0x7a>
 8007a14:	2203      	movs	r2, #3
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	4393      	bics	r3, r2
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	81a3      	strh	r3, [r4, #12]
 8007a22:	89a0      	ldrh	r0, [r4, #12]
 8007a24:	4307      	orrs	r7, r0
 8007a26:	81a7      	strh	r7, [r4, #12]
 8007a28:	e7cb      	b.n	80079c2 <__smakebuf_r+0x1a>
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	08007795 	.word	0x08007795

08007a30 <_malloc_usable_size_r>:
 8007a30:	1f0b      	subs	r3, r1, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	1f18      	subs	r0, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da01      	bge.n	8007a3e <_malloc_usable_size_r+0xe>
 8007a3a:	580b      	ldr	r3, [r1, r0]
 8007a3c:	18c0      	adds	r0, r0, r3
 8007a3e:	4770      	bx	lr

08007a40 <_raise_r>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	0004      	movs	r4, r0
 8007a44:	000d      	movs	r5, r1
 8007a46:	291f      	cmp	r1, #31
 8007a48:	d904      	bls.n	8007a54 <_raise_r+0x14>
 8007a4a:	2316      	movs	r3, #22
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	2001      	movs	r0, #1
 8007a50:	4240      	negs	r0, r0
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <_raise_r+0x24>
 8007a5a:	008a      	lsls	r2, r1, #2
 8007a5c:	189b      	adds	r3, r3, r2
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d108      	bne.n	8007a76 <_raise_r+0x36>
 8007a64:	0020      	movs	r0, r4
 8007a66:	f000 f831 	bl	8007acc <_getpid_r>
 8007a6a:	002a      	movs	r2, r5
 8007a6c:	0001      	movs	r1, r0
 8007a6e:	0020      	movs	r0, r4
 8007a70:	f000 f81a 	bl	8007aa8 <_kill_r>
 8007a74:	e7ed      	b.n	8007a52 <_raise_r+0x12>
 8007a76:	2000      	movs	r0, #0
 8007a78:	2a01      	cmp	r2, #1
 8007a7a:	d0ea      	beq.n	8007a52 <_raise_r+0x12>
 8007a7c:	1c51      	adds	r1, r2, #1
 8007a7e:	d103      	bne.n	8007a88 <_raise_r+0x48>
 8007a80:	2316      	movs	r3, #22
 8007a82:	3001      	adds	r0, #1
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	e7e4      	b.n	8007a52 <_raise_r+0x12>
 8007a88:	2400      	movs	r4, #0
 8007a8a:	0028      	movs	r0, r5
 8007a8c:	601c      	str	r4, [r3, #0]
 8007a8e:	4790      	blx	r2
 8007a90:	0020      	movs	r0, r4
 8007a92:	e7de      	b.n	8007a52 <_raise_r+0x12>

08007a94 <raise>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <raise+0x10>)
 8007a98:	0001      	movs	r1, r0
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	f7ff ffd0 	bl	8007a40 <_raise_r>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	2000000c 	.word	0x2000000c

08007aa8 <_kill_r>:
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	4d06      	ldr	r5, [pc, #24]	; (8007ac8 <_kill_r+0x20>)
 8007aae:	0004      	movs	r4, r0
 8007ab0:	0008      	movs	r0, r1
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	f7fb f836 	bl	8002b26 <_kill>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d103      	bne.n	8007ac6 <_kill_r+0x1e>
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d000      	beq.n	8007ac6 <_kill_r+0x1e>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	200002f4 	.word	0x200002f4

08007acc <_getpid_r>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f7fb f824 	bl	8002b1a <_getpid>
 8007ad2:	bd10      	pop	{r4, pc}

08007ad4 <__sread>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	000c      	movs	r4, r1
 8007ad8:	250e      	movs	r5, #14
 8007ada:	5f49      	ldrsh	r1, [r1, r5]
 8007adc:	f000 f8a4 	bl	8007c28 <_read_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	db03      	blt.n	8007aec <__sread+0x18>
 8007ae4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ae6:	181b      	adds	r3, r3, r0
 8007ae8:	6563      	str	r3, [r4, #84]	; 0x54
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	4a02      	ldr	r2, [pc, #8]	; (8007af8 <__sread+0x24>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	e7f9      	b.n	8007aea <__sread+0x16>
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	ffffefff 	.word	0xffffefff

08007afc <__swrite>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	001f      	movs	r7, r3
 8007b00:	898b      	ldrh	r3, [r1, #12]
 8007b02:	0005      	movs	r5, r0
 8007b04:	000c      	movs	r4, r1
 8007b06:	0016      	movs	r6, r2
 8007b08:	05db      	lsls	r3, r3, #23
 8007b0a:	d505      	bpl.n	8007b18 <__swrite+0x1c>
 8007b0c:	230e      	movs	r3, #14
 8007b0e:	5ec9      	ldrsh	r1, [r1, r3]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2302      	movs	r3, #2
 8007b14:	f000 f874 	bl	8007c00 <_lseek_r>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <__swrite+0x34>)
 8007b1c:	0028      	movs	r0, r5
 8007b1e:	4013      	ands	r3, r2
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	0032      	movs	r2, r6
 8007b24:	230e      	movs	r3, #14
 8007b26:	5ee1      	ldrsh	r1, [r4, r3]
 8007b28:	003b      	movs	r3, r7
 8007b2a:	f000 f81f 	bl	8007b6c <_write_r>
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	ffffefff 	.word	0xffffefff

08007b34 <__sseek>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	000c      	movs	r4, r1
 8007b38:	250e      	movs	r5, #14
 8007b3a:	5f49      	ldrsh	r1, [r1, r5]
 8007b3c:	f000 f860 	bl	8007c00 <_lseek_r>
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	1c42      	adds	r2, r0, #1
 8007b44:	d103      	bne.n	8007b4e <__sseek+0x1a>
 8007b46:	4a05      	ldr	r2, [pc, #20]	; (8007b5c <__sseek+0x28>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
 8007b4e:	2280      	movs	r2, #128	; 0x80
 8007b50:	0152      	lsls	r2, r2, #5
 8007b52:	4313      	orrs	r3, r2
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	6560      	str	r0, [r4, #84]	; 0x54
 8007b58:	e7f8      	b.n	8007b4c <__sseek+0x18>
 8007b5a:	46c0      	nop			; (mov r8, r8)
 8007b5c:	ffffefff 	.word	0xffffefff

08007b60 <__sclose>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	230e      	movs	r3, #14
 8007b64:	5ec9      	ldrsh	r1, [r1, r3]
 8007b66:	f000 f815 	bl	8007b94 <_close_r>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <_write_r>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	0004      	movs	r4, r0
 8007b70:	0008      	movs	r0, r1
 8007b72:	0011      	movs	r1, r2
 8007b74:	001a      	movs	r2, r3
 8007b76:	2300      	movs	r3, #0
 8007b78:	4d05      	ldr	r5, [pc, #20]	; (8007b90 <_write_r+0x24>)
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	f7fb f80c 	bl	8002b98 <_write>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d103      	bne.n	8007b8c <_write_r+0x20>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d000      	beq.n	8007b8c <_write_r+0x20>
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	200002f4 	.word	0x200002f4

08007b94 <_close_r>:
 8007b94:	2300      	movs	r3, #0
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	4d06      	ldr	r5, [pc, #24]	; (8007bb4 <_close_r+0x20>)
 8007b9a:	0004      	movs	r4, r0
 8007b9c:	0008      	movs	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7fb f816 	bl	8002bd0 <_close>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d103      	bne.n	8007bb0 <_close_r+0x1c>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d000      	beq.n	8007bb0 <_close_r+0x1c>
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	200002f4 	.word	0x200002f4

08007bb8 <_fstat_r>:
 8007bb8:	2300      	movs	r3, #0
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	4d06      	ldr	r5, [pc, #24]	; (8007bd8 <_fstat_r+0x20>)
 8007bbe:	0004      	movs	r4, r0
 8007bc0:	0008      	movs	r0, r1
 8007bc2:	0011      	movs	r1, r2
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	f7fb f80d 	bl	8002be4 <_fstat>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d103      	bne.n	8007bd6 <_fstat_r+0x1e>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d000      	beq.n	8007bd6 <_fstat_r+0x1e>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	200002f4 	.word	0x200002f4

08007bdc <_isatty_r>:
 8007bdc:	2300      	movs	r3, #0
 8007bde:	b570      	push	{r4, r5, r6, lr}
 8007be0:	4d06      	ldr	r5, [pc, #24]	; (8007bfc <_isatty_r+0x20>)
 8007be2:	0004      	movs	r4, r0
 8007be4:	0008      	movs	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7fb f80a 	bl	8002c00 <_isatty>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d103      	bne.n	8007bf8 <_isatty_r+0x1c>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d000      	beq.n	8007bf8 <_isatty_r+0x1c>
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	200002f4 	.word	0x200002f4

08007c00 <_lseek_r>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	0004      	movs	r4, r0
 8007c04:	0008      	movs	r0, r1
 8007c06:	0011      	movs	r1, r2
 8007c08:	001a      	movs	r2, r3
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4d05      	ldr	r5, [pc, #20]	; (8007c24 <_lseek_r+0x24>)
 8007c0e:	602b      	str	r3, [r5, #0]
 8007c10:	f7fa ffff 	bl	8002c12 <_lseek>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d103      	bne.n	8007c20 <_lseek_r+0x20>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d000      	beq.n	8007c20 <_lseek_r+0x20>
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	bd70      	pop	{r4, r5, r6, pc}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	200002f4 	.word	0x200002f4

08007c28 <_read_r>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	0004      	movs	r4, r0
 8007c2c:	0008      	movs	r0, r1
 8007c2e:	0011      	movs	r1, r2
 8007c30:	001a      	movs	r2, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	4d05      	ldr	r5, [pc, #20]	; (8007c4c <_read_r+0x24>)
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fa ff91 	bl	8002b5e <_read>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d103      	bne.n	8007c48 <_read_r+0x20>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d000      	beq.n	8007c48 <_read_r+0x20>
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	bd70      	pop	{r4, r5, r6, pc}
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	200002f4 	.word	0x200002f4

08007c50 <_init>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr

08007c5c <_fini>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr
