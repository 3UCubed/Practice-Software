
ramECC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006e70  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006ed0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  240000d0  08006f30  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000818  08006f30  00020818  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a0a  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1a  00000000  00000000  00039b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0003c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037cf7  00000000  00000000  0003e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cfc  00000000  00000000  00076187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001614db  00000000  00000000  0008ae83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ec35e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  001ec3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006e00 	.word	0x08006e00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006e00 	.word	0x08006e00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <read_RAM>:
#define BACKUP_START_ADDRESS 0x38800000
#define BACKUP_END_ADDRESS 0x38800FFF


void read_RAM(volatile uint32_t *start, volatile uint32_t *end)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	volatile uint32_t value;

	while (start <= end)
 80005e6:	e005      	b.n	80005f4 <read_RAM+0x18>
	{
		value = *start;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
		start++;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3304      	adds	r3, #4
 80005f2:	607b      	str	r3, [r7, #4]
	while (start <= end)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d9f5      	bls.n	80005e8 <read_RAM+0xc>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <write_RAM>:

void write_RAM(volatile uint32_t *start, volatile uint32_t *end)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
	while (start <= end)
 8000614:	e005      	b.n	8000622 <write_RAM+0x18>
	{
		*start = 0;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		start++;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	607b      	str	r3, [r7, #4]
	while (start <= end)
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	d9f5      	bls.n	8000616 <write_RAM+0xc>
	}
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <PerformMemoryCheck>:

void PerformMemoryCheck(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	read_RAM((volatile uint32_t *)ITCM_START_ADDRESS, (volatile uint32_t *)ITCM_END_ADDRESS);
 800063c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffcb 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)DTCM_START_ADDRESS, (volatile uint32_t *)DTCM_END_ADDRESS);
 8000646:	4911      	ldr	r1, [pc, #68]	; (800068c <PerformMemoryCheck+0x54>)
 8000648:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800064c:	f7ff ffc6 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)AXI_START_ADDRESS, (volatile uint32_t *)AXI_END_ADDRESS);
 8000650:	490f      	ldr	r1, [pc, #60]	; (8000690 <PerformMemoryCheck+0x58>)
 8000652:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8000656:	f7ff ffc1 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)SRAM1_START_ADDRESS, (volatile uint32_t *)SRAM1_END_ADDRESS);
 800065a:	490e      	ldr	r1, [pc, #56]	; (8000694 <PerformMemoryCheck+0x5c>)
 800065c:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000660:	f7ff ffbc 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)SRAM2_START_ADDRESS, (volatile uint32_t *)SRAM2_END_ADDRESS);
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <PerformMemoryCheck+0x60>)
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <PerformMemoryCheck+0x64>)
 8000668:	f7ff ffb8 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)SRAM3_START_ADDRESS, (volatile uint32_t *)SRAM3_END_ADDRESS);
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <PerformMemoryCheck+0x68>)
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <PerformMemoryCheck+0x6c>)
 8000670:	f7ff ffb4 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)SRAM4_START_ADDRESS, (volatile uint32_t *)SRAM4_END_ADDRESS);
 8000674:	490c      	ldr	r1, [pc, #48]	; (80006a8 <PerformMemoryCheck+0x70>)
 8000676:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
 800067a:	f7ff ffaf 	bl	80005dc <read_RAM>
	read_RAM((volatile uint32_t *)BACKUP_START_ADDRESS, (volatile uint32_t *)BACKUP_END_ADDRESS);
 800067e:	490b      	ldr	r1, [pc, #44]	; (80006ac <PerformMemoryCheck+0x74>)
 8000680:	f04f 5062 	mov.w	r0, #947912704	; 0x38800000
 8000684:	f7ff ffaa 	bl	80005dc <read_RAM>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2001ffff 	.word	0x2001ffff
 8000690:	2407ffff 	.word	0x2407ffff
 8000694:	3001ffff 	.word	0x3001ffff
 8000698:	3003ffff 	.word	0x3003ffff
 800069c:	30020000 	.word	0x30020000
 80006a0:	30047fff 	.word	0x30047fff
 80006a4:	30040000 	.word	0x30040000
 80006a8:	3800ffff 	.word	0x3800ffff
 80006ac:	38800fff 	.word	0x38800fff

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 ff0a 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f80e 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 fa72 	bl	8000ba4 <MX_GPIO_Init>
  MX_ETH_Init();
 80006c0:	f000 f88a 	bl	80007d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f9f0 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 fa3a 	bl	8000b40 <MX_USB_OTG_FS_PCD_Init>
  MX_RAMECC_Init();
 80006cc:	f000 f8d0 	bl	8000870 <MX_RAMECC_Init>
  /* USER CODE BEGIN 2 */
  PerformMemoryCheck();
 80006d0:	f7ff ffb2 	bl	8000638 <PerformMemoryCheck>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x24>
	...

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09c      	sub	sp, #112	; 0x70
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	224c      	movs	r2, #76	; 0x4c
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fb82 	bl	8006df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2220      	movs	r2, #32
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 fb7c 	bl	8006df0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f001 fffb 	bl	80026f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <SystemClock_Config+0xf8>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	4a32      	ldr	r2, [pc, #200]	; (80007d0 <SystemClock_Config+0xf8>)
 8000708:	f023 0301 	bic.w	r3, r3, #1
 800070c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <SystemClock_Config+0xf8>)
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <SystemClock_Config+0xfc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemClock_Config+0xfc>)
 8000722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xfc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xfc>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000762:	2318      	movs	r3, #24
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000772:	230c      	movs	r3, #12
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f91a 	bl	80029bc <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800078e:	f000 fb35 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fd5a 	bl	8003270 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007c2:	f000 fb1b 	bl	8000dfc <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_ETH_Init+0x80>)
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ETH_Init+0x88>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ETH_Init+0x88>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ETH_Init+0x88>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ETH_Init+0x88>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ETH_Init+0x88>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ETH_Init+0x88>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_ETH_Init+0x80>)
 8000808:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_ETH_Init+0x88>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_ETH_Init+0x80>)
 800080e:	2201      	movs	r2, #1
 8000810:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_ETH_Init+0x80>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_ETH_Init+0x8c>)
 8000816:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_ETH_Init+0x80>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_ETH_Init+0x90>)
 800081c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_ETH_Init+0x80>)
 8000820:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000824:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_ETH_Init+0x80>)
 8000828:	f001 f836 	bl	8001898 <HAL_ETH_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 fae3 	bl	8000dfc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000836:	2238      	movs	r2, #56	; 0x38
 8000838:	2100      	movs	r1, #0
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_ETH_Init+0x94>)
 800083c:	f006 fad8 	bl	8006df0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_ETH_Init+0x94>)
 8000842:	2221      	movs	r2, #33	; 0x21
 8000844:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_ETH_Init+0x94>)
 8000848:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800084c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_ETH_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	24000124 	.word	0x24000124
 800085c:	40028000 	.word	0x40028000
 8000860:	2400080c 	.word	0x2400080c
 8000864:	24000070 	.word	0x24000070
 8000868:	24000010 	.word	0x24000010
 800086c:	240000ec 	.word	0x240000ec

08000870 <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RAMECC_Init 0 */
  write_RAM((volatile uint32_t *)ITCM_START_ADDRESS, (volatile uint32_t *)ITCM_END_ADDRESS);
 8000874:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fec6 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)DTCM_START_ADDRESS, (volatile uint32_t *)DTCM_END_ADDRESS);
 800087e:	4969      	ldr	r1, [pc, #420]	; (8000a24 <MX_RAMECC_Init+0x1b4>)
 8000880:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000884:	f7ff fec1 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)AXI_START_ADDRESS, (volatile uint32_t *)AXI_END_ADDRESS);
 8000888:	4967      	ldr	r1, [pc, #412]	; (8000a28 <MX_RAMECC_Init+0x1b8>)
 800088a:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800088e:	f7ff febc 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)SRAM1_START_ADDRESS, (volatile uint32_t *)SRAM1_END_ADDRESS);
 8000892:	4966      	ldr	r1, [pc, #408]	; (8000a2c <MX_RAMECC_Init+0x1bc>)
 8000894:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000898:	f7ff feb7 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)SRAM2_START_ADDRESS, (volatile uint32_t *)SRAM2_END_ADDRESS);
 800089c:	4964      	ldr	r1, [pc, #400]	; (8000a30 <MX_RAMECC_Init+0x1c0>)
 800089e:	4865      	ldr	r0, [pc, #404]	; (8000a34 <MX_RAMECC_Init+0x1c4>)
 80008a0:	f7ff feb3 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)SRAM3_START_ADDRESS, (volatile uint32_t *)SRAM3_END_ADDRESS);
 80008a4:	4964      	ldr	r1, [pc, #400]	; (8000a38 <MX_RAMECC_Init+0x1c8>)
 80008a6:	4865      	ldr	r0, [pc, #404]	; (8000a3c <MX_RAMECC_Init+0x1cc>)
 80008a8:	f7ff feaf 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)SRAM4_START_ADDRESS, (volatile uint32_t *)SRAM4_END_ADDRESS);
 80008ac:	4964      	ldr	r1, [pc, #400]	; (8000a40 <MX_RAMECC_Init+0x1d0>)
 80008ae:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
 80008b2:	f7ff feaa 	bl	800060a <write_RAM>
  write_RAM((volatile uint32_t *)BACKUP_START_ADDRESS, (volatile uint32_t *)BACKUP_END_ADDRESS);
 80008b6:	4963      	ldr	r1, [pc, #396]	; (8000a44 <MX_RAMECC_Init+0x1d4>)
 80008b8:	f04f 5062 	mov.w	r0, #947912704	; 0x38800000
 80008bc:	f7ff fea5 	bl	800060a <write_RAM>

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC1 M1 : AXI SRAM
  */
  hramecc1_m1.Instance = RAMECC1_Monitor1;
 80008c0:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <MX_RAMECC_Init+0x1d8>)
 80008c2:	4a62      	ldr	r2, [pc, #392]	; (8000a4c <MX_RAMECC_Init+0x1dc>)
 80008c4:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 80008c6:	4860      	ldr	r0, [pc, #384]	; (8000a48 <MX_RAMECC_Init+0x1d8>)
 80008c8:	f001 ff5e 	bl	8002788 <HAL_RAMECC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_RAMECC_Init+0x66>
  {
    Error_Handler();
 80008d2:	f000 fa93 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC1 M2 : ITCM-RAM
  */
  hramecc1_m2.Instance = RAMECC1_Monitor2;
 80008d6:	4b5e      	ldr	r3, [pc, #376]	; (8000a50 <MX_RAMECC_Init+0x1e0>)
 80008d8:	4a5e      	ldr	r2, [pc, #376]	; (8000a54 <MX_RAMECC_Init+0x1e4>)
 80008da:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 80008dc:	485c      	ldr	r0, [pc, #368]	; (8000a50 <MX_RAMECC_Init+0x1e0>)
 80008de:	f001 ff53 	bl	8002788 <HAL_RAMECC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_RAMECC_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 fa88 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC1 M3 : D0TCM-RAM
  */
  hramecc1_m3.Instance = RAMECC1_Monitor3;
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <MX_RAMECC_Init+0x1e8>)
 80008ee:	4a5b      	ldr	r2, [pc, #364]	; (8000a5c <MX_RAMECC_Init+0x1ec>)
 80008f0:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 80008f2:	4859      	ldr	r0, [pc, #356]	; (8000a58 <MX_RAMECC_Init+0x1e8>)
 80008f4:	f001 ff48 	bl	8002788 <HAL_RAMECC_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_RAMECC_Init+0x92>
  {
    Error_Handler();
 80008fe:	f000 fa7d 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC1 M4 : D1TCM-RAM
  */
  hramecc1_m4.Instance = RAMECC1_Monitor4;
 8000902:	4b57      	ldr	r3, [pc, #348]	; (8000a60 <MX_RAMECC_Init+0x1f0>)
 8000904:	4a57      	ldr	r2, [pc, #348]	; (8000a64 <MX_RAMECC_Init+0x1f4>)
 8000906:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 8000908:	4855      	ldr	r0, [pc, #340]	; (8000a60 <MX_RAMECC_Init+0x1f0>)
 800090a:	f001 ff3d 	bl	8002788 <HAL_RAMECC_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_RAMECC_Init+0xa8>
  {
    Error_Handler();
 8000914:	f000 fa72 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC1 M5 : ETM RAM
  */
  hramecc1_m5.Instance = RAMECC1_Monitor5;
 8000918:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <MX_RAMECC_Init+0x1f8>)
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <MX_RAMECC_Init+0x1fc>)
 800091c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 800091e:	4852      	ldr	r0, [pc, #328]	; (8000a68 <MX_RAMECC_Init+0x1f8>)
 8000920:	f001 ff32 	bl	8002788 <HAL_RAMECC_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_RAMECC_Init+0xbe>
  {
    Error_Handler();
 800092a:	f000 fa67 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800092e:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <MX_RAMECC_Init+0x200>)
 8000930:	4a50      	ldr	r2, [pc, #320]	; (8000a74 <MX_RAMECC_Init+0x204>)
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8000934:	484e      	ldr	r0, [pc, #312]	; (8000a70 <MX_RAMECC_Init+0x200>)
 8000936:	f001 ff27 	bl	8002788 <HAL_RAMECC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_RAMECC_Init+0xd4>
  {
    Error_Handler();
 8000940:	f000 fa5c 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC2 M2 SRAM1_1
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 8000944:	4b4c      	ldr	r3, [pc, #304]	; (8000a78 <MX_RAMECC_Init+0x208>)
 8000946:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <MX_RAMECC_Init+0x20c>)
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800094a:	484b      	ldr	r0, [pc, #300]	; (8000a78 <MX_RAMECC_Init+0x208>)
 800094c:	f001 ff1c 	bl	8002788 <HAL_RAMECC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_RAMECC_Init+0xea>
  {
    Error_Handler();
 8000956:	f000 fa51 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC2 M3 : SRAM2_0
  */
  hramecc2_m3.Instance = RAMECC2_Monitor3;
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <MX_RAMECC_Init+0x210>)
 800095c:	4a49      	ldr	r2, [pc, #292]	; (8000a84 <MX_RAMECC_Init+0x214>)
 800095e:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 8000960:	4847      	ldr	r0, [pc, #284]	; (8000a80 <MX_RAMECC_Init+0x210>)
 8000962:	f001 ff11 	bl	8002788 <HAL_RAMECC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_RAMECC_Init+0x100>
  {
    Error_Handler();
 800096c:	f000 fa46 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC2 M4 : SRAM2_1
  */
  hramecc2_m4.Instance = RAMECC2_Monitor4;
 8000970:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <MX_RAMECC_Init+0x218>)
 8000972:	4a46      	ldr	r2, [pc, #280]	; (8000a8c <MX_RAMECC_Init+0x21c>)
 8000974:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 8000976:	4844      	ldr	r0, [pc, #272]	; (8000a88 <MX_RAMECC_Init+0x218>)
 8000978:	f001 ff06 	bl	8002788 <HAL_RAMECC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_RAMECC_Init+0x116>
  {
    Error_Handler();
 8000982:	f000 fa3b 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC2 M5 : SRAM3
  */
  hramecc2_m5.Instance = RAMECC2_Monitor5;
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <MX_RAMECC_Init+0x220>)
 8000988:	4a42      	ldr	r2, [pc, #264]	; (8000a94 <MX_RAMECC_Init+0x224>)
 800098a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 800098c:	4840      	ldr	r0, [pc, #256]	; (8000a90 <MX_RAMECC_Init+0x220>)
 800098e:	f001 fefb 	bl	8002788 <HAL_RAMECC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_RAMECC_Init+0x12c>
  {
    Error_Handler();
 8000998:	f000 fa30 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800099c:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <MX_RAMECC_Init+0x228>)
 800099e:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <MX_RAMECC_Init+0x22c>)
 80009a0:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 80009a2:	483d      	ldr	r0, [pc, #244]	; (8000a98 <MX_RAMECC_Init+0x228>)
 80009a4:	f001 fef0 	bl	8002788 <HAL_RAMECC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_RAMECC_Init+0x142>
  {
    Error_Handler();
 80009ae:	f000 fa25 	bl	8000dfc <Error_Handler>
  }

  /** Initialize RAMECC3 M2 : Backup RAM
  */
  hramecc3_m2.Instance = RAMECC3_Monitor2;
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_RAMECC_Init+0x230>)
 80009b4:	4a3b      	ldr	r2, [pc, #236]	; (8000aa4 <MX_RAMECC_Init+0x234>)
 80009b6:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 80009b8:	4839      	ldr	r0, [pc, #228]	; (8000aa0 <MX_RAMECC_Init+0x230>)
 80009ba:	f001 fee5 	bl	8002788 <HAL_RAMECC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_RAMECC_Init+0x158>
  {
    Error_Handler();
 80009c4:	f000 fa1a 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */
  HAL_NVIC_SetPriority(ECC_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2091      	movs	r0, #145	; 0x91
 80009ce:	f000 ff2e 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ECC_IRQn);
 80009d2:	2091      	movs	r0, #145	; 0x91
 80009d4:	f000 ff45 	bl	8001862 <HAL_NVIC_EnableIRQ>

  enable_ramecc_monitor_notifications(&hramecc1_m1);
 80009d8:	481b      	ldr	r0, [pc, #108]	; (8000a48 <MX_RAMECC_Init+0x1d8>)
 80009da:	f000 f9f3 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc1_m2);
 80009de:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_RAMECC_Init+0x1e0>)
 80009e0:	f000 f9f0 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc1_m3);
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <MX_RAMECC_Init+0x1e8>)
 80009e6:	f000 f9ed 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc1_m4);
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_RAMECC_Init+0x1f0>)
 80009ec:	f000 f9ea 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc1_m5);
 80009f0:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_RAMECC_Init+0x1f8>)
 80009f2:	f000 f9e7 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc2_m1);
 80009f6:	481e      	ldr	r0, [pc, #120]	; (8000a70 <MX_RAMECC_Init+0x200>)
 80009f8:	f000 f9e4 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc2_m2);
 80009fc:	481e      	ldr	r0, [pc, #120]	; (8000a78 <MX_RAMECC_Init+0x208>)
 80009fe:	f000 f9e1 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc2_m3);
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <MX_RAMECC_Init+0x210>)
 8000a04:	f000 f9de 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc2_m4);
 8000a08:	481f      	ldr	r0, [pc, #124]	; (8000a88 <MX_RAMECC_Init+0x218>)
 8000a0a:	f000 f9db 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc2_m5);
 8000a0e:	4820      	ldr	r0, [pc, #128]	; (8000a90 <MX_RAMECC_Init+0x220>)
 8000a10:	f000 f9d8 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc3_m1);
 8000a14:	4820      	ldr	r0, [pc, #128]	; (8000a98 <MX_RAMECC_Init+0x228>)
 8000a16:	f000 f9d5 	bl	8000dc4 <enable_ramecc_monitor_notifications>
  enable_ramecc_monitor_notifications(&hramecc3_m2);
 8000a1a:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <MX_RAMECC_Init+0x230>)
 8000a1c:	f000 f9d2 	bl	8000dc4 <enable_ramecc_monitor_notifications>
//  HAL_RAMECC_IRQHandler(&hramecc3_m2);


  /* USER CODE END RAMECC_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2001ffff 	.word	0x2001ffff
 8000a28:	2407ffff 	.word	0x2407ffff
 8000a2c:	3001ffff 	.word	0x3001ffff
 8000a30:	3003ffff 	.word	0x3003ffff
 8000a34:	30020000 	.word	0x30020000
 8000a38:	30047fff 	.word	0x30047fff
 8000a3c:	30040000 	.word	0x30040000
 8000a40:	3800ffff 	.word	0x3800ffff
 8000a44:	38800fff 	.word	0x38800fff
 8000a48:	240001d4 	.word	0x240001d4
 8000a4c:	52009020 	.word	0x52009020
 8000a50:	240001e4 	.word	0x240001e4
 8000a54:	52009040 	.word	0x52009040
 8000a58:	240001f4 	.word	0x240001f4
 8000a5c:	52009060 	.word	0x52009060
 8000a60:	24000204 	.word	0x24000204
 8000a64:	52009080 	.word	0x52009080
 8000a68:	24000214 	.word	0x24000214
 8000a6c:	520090a0 	.word	0x520090a0
 8000a70:	24000224 	.word	0x24000224
 8000a74:	48023020 	.word	0x48023020
 8000a78:	24000234 	.word	0x24000234
 8000a7c:	48023040 	.word	0x48023040
 8000a80:	24000244 	.word	0x24000244
 8000a84:	48023060 	.word	0x48023060
 8000a88:	24000254 	.word	0x24000254
 8000a8c:	48023080 	.word	0x48023080
 8000a90:	24000264 	.word	0x24000264
 8000a94:	480230a0 	.word	0x480230a0
 8000a98:	24000274 	.word	0x24000274
 8000a9c:	58027020 	.word	0x58027020
 8000aa0:	24000284 	.word	0x24000284
 8000aa4:	58027040 	.word	0x58027040

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_USART3_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000af2:	f004 fd75 	bl	80055e0 <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f97e 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b04:	f005 fd7d 	bl	8006602 <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f975 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b16:	f005 fdb2 	bl	800667e <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f96c 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b26:	f005 fd33 	bl	8006590 <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f964 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24000294 	.word	0x24000294
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2209      	movs	r2, #9
 8000b4e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b88:	f001 fc83 	bl	8002492 <HAL_PCD_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b92:	f000 f933 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000328 	.word	0x24000328
 8000ba0:	40080000 	.word	0x40080000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a60      	ldr	r2, [pc, #384]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a59      	ldr	r2, [pc, #356]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a51      	ldr	r2, [pc, #324]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c50:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a3b      	ldr	r2, [pc, #236]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <MX_GPIO_Init+0x1a0>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c92:	482d      	ldr	r0, [pc, #180]	; (8000d48 <MX_GPIO_Init+0x1a4>)
 8000c94:	f001 fbe4 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	482b      	ldr	r0, [pc, #172]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000ca0:	f001 fbde 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4829      	ldr	r0, [pc, #164]	; (8000d50 <MX_GPIO_Init+0x1ac>)
 8000caa:	f001 fbd9 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4824      	ldr	r0, [pc, #144]	; (8000d54 <MX_GPIO_Init+0x1b0>)
 8000cc4:	f001 fa1c 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cc8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <MX_GPIO_Init+0x1a4>)
 8000ce2:	f001 fa0d 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4813      	ldr	r0, [pc, #76]	; (8000d4c <MX_GPIO_Init+0x1a8>)
 8000d00:	f001 f9fe 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <MX_GPIO_Init+0x1b4>)
 8000d1a:	f001 f9f1 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_GPIO_Init+0x1ac>)
 8000d36:	f001 f9e3 	bl	8002100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58020c00 	.word	0x58020c00
 8000d50:	58021000 	.word	0x58021000
 8000d54:	58020800 	.word	0x58020800
 8000d58:	58021800 	.word	0x58021800

08000d5c <HAL_RAMECC_DetectErrorCallback>:

/* USER CODE BEGIN 4 */
void HAL_RAMECC_DetectErrorCallback(RAMECC_HandleTypeDef *hramecc) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint32_t FAR;

	FAR = HAL_RAMECC_GetFailingAddress(hramecc);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f001 fe0f 	bl	8002988 <HAL_RAMECC_GetFailingAddress>
 8000d6a:	60f8      	str	r0, [r7, #12]

	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_SINGLEERROR_DETECTED) != 0U) {
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f001 fe18 	bl	80029a2 <HAL_RAMECC_GetRAMECCError>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <HAL_RAMECC_DetectErrorCallback+0x2a>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2101      	movs	r1, #1
 8000d80:	480e      	ldr	r0, [pc, #56]	; (8000dbc <HAL_RAMECC_DetectErrorCallback+0x60>)
 8000d82:	f001 fb6d 	bl	8002460 <HAL_GPIO_WritePin>
	}

	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_DOUBLEERROR_DETECTED) != 0U) {
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f001 fe0b 	bl	80029a2 <HAL_RAMECC_GetRAMECCError>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <HAL_RAMECC_DetectErrorCallback+0x44>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <HAL_RAMECC_DetectErrorCallback+0x64>)
 8000d9c:	f001 fb60 	bl	8002460 <HAL_GPIO_WritePin>
	}

	hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <HAL_RAMECC_DetectErrorCallback+0x60>)
 8000dae:	f001 fb57 	bl	8002460 <HAL_GPIO_WritePin>

}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	58021000 	.word	0x58021000

08000dc4 <enable_ramecc_monitor_notifications>:

void enable_ramecc_monitor_notifications(RAMECC_HandleTypeDef *hramecc) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if (HAL_RAMECC_EnableNotification(hramecc, (RAMECC_IT_MONITOR_SINGLEERR_R | RAMECC_IT_MONITOR_DOUBLEERR_R)) != HAL_OK) {
 8000dcc:	490a      	ldr	r1, [pc, #40]	; (8000df8 <enable_ramecc_monitor_notifications+0x34>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f001 fd3e 	bl	8002850 <HAL_RAMECC_EnableNotification>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <enable_ramecc_monitor_notifications+0x1a>
		Error_Handler();
 8000dda:	f000 f80f 	bl	8000dfc <Error_Handler>
	}
	if (HAL_RAMECC_StartMonitor(hramecc) != HAL_OK) {
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f001 fd12 	bl	8002808 <HAL_RAMECC_StartMonitor>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <enable_ramecc_monitor_notifications+0x2a>
		Error_Handler();
 8000dea:	f000 f807 	bl	8000dfc <Error_Handler>
	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000000c 	.word	0x2000000c

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x30>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x30>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58024400 	.word	0x58024400

08000e3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <HAL_ETH_MspInit+0x184>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	f040 80ab 	bne.w	8000fb6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e60:	4b58      	ldr	r3, [pc, #352]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e66:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e7e:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e84:	4a4f      	ldr	r2, [pc, #316]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e8e:	4b4d      	ldr	r3, [pc, #308]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea2:	4a48      	ldr	r2, [pc, #288]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eac:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b3e      	ldr	r3, [pc, #248]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a39      	ldr	r2, [pc, #228]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f32:	2332      	movs	r3, #50	; 0x32
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f42:	230b      	movs	r3, #11
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <HAL_ETH_MspInit+0x18c>)
 8000f4e:	f001 f8d7 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f52:	2386      	movs	r3, #134	; 0x86
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f62:	230b      	movs	r3, #11
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <HAL_ETH_MspInit+0x190>)
 8000f6e:	f001 f8c7 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f84:	230b      	movs	r3, #11
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <HAL_ETH_MspInit+0x194>)
 8000f90:	f001 f8b6 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <HAL_ETH_MspInit+0x198>)
 8000fb2:	f001 f8a5 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3738      	adds	r7, #56	; 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40028000 	.word	0x40028000
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58020000 	.word	0x58020000
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ba      	sub	sp, #232	; 0xe8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	22c0      	movs	r2, #192	; 0xc0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fef9 	bl	8006df0 <memset>
  if(huart->Instance==USART3)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_UART_MspInit+0xc8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d146      	bne.n	8001096 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001008:	f04f 0202 	mov.w	r2, #2
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fcb2 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800102a:	f7ff fee7 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_UART_MspInit+0xcc>)
 8001030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0xcc>)
 8001036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0xcc>)
 8001040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0xcc>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_UART_MspInit+0xcc>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0xcc>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800106a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001084:	2307      	movs	r3, #7
 8001086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_UART_MspInit+0xd0>)
 8001092:	f001 f835 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	37e8      	adds	r7, #232	; 0xe8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40004800 	.word	0x40004800
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58020c00 	.word	0x58020c00

080010ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ba      	sub	sp, #232	; 0xe8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	22c0      	movs	r2, #192	; 0xc0
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 fe8f 	bl	8006df0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a30      	ldr	r2, [pc, #192]	; (8001198 <HAL_PCD_MspInit+0xec>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d159      	bne.n	8001190 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fc47 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001100:	f7ff fe7c 	bl	8000dfc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001104:	f001 fb30 	bl	8002768 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_PCD_MspInit+0xf0>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a23      	ldr	r2, [pc, #140]	; (800119c <HAL_PCD_MspInit+0xf0>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_PCD_MspInit+0xf0>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001126:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800112a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001140:	230a      	movs	r3, #10
 8001142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800114a:	4619      	mov	r1, r3
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <HAL_PCD_MspInit+0xf4>)
 800114e:	f000 ffd7 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <HAL_PCD_MspInit+0xf4>)
 800116e:	f000 ffc7 	bl	8002100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_PCD_MspInit+0xf0>)
 8001174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_PCD_MspInit+0xf0>)
 800117a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800117e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_PCD_MspInit+0xf0>)
 8001184:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	37e8      	adds	r7, #232	; 0xe8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40080000 	.word	0x40080000
 800119c:	58024400 	.word	0x58024400
 80011a0:	58020000 	.word	0x58020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f9de 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <ECC_IRQHandler>:
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void ECC_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    if (__HAL_RAMECC_GET_FLAG(&hramecc1_m1, RAMECC_FLAGS_ALL)) {
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <ECC_IRQHandler+0x140>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a4d      	ldr	r2, [pc, #308]	; (8001338 <ECC_IRQHandler+0x140>)
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	6053      	str	r3, [r2, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <ECC_IRQHandler+0x1e>
        HAL_RAMECC_IRQHandler(&hramecc1_m1);
 8001210:	4849      	ldr	r0, [pc, #292]	; (8001338 <ECC_IRQHandler+0x140>)
 8001212:	f001 fb71 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc1_m2, RAMECC_FLAGS_ALL)) {
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <ECC_IRQHandler+0x144>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a47      	ldr	r2, [pc, #284]	; (800133c <ECC_IRQHandler+0x144>)
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	6053      	str	r3, [r2, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <ECC_IRQHandler+0x38>
        HAL_RAMECC_IRQHandler(&hramecc1_m2);
 800122a:	4844      	ldr	r0, [pc, #272]	; (800133c <ECC_IRQHandler+0x144>)
 800122c:	f001 fb64 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc1_m3, RAMECC_FLAGS_ALL)) {
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <ECC_IRQHandler+0x148>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a42      	ldr	r2, [pc, #264]	; (8001340 <ECC_IRQHandler+0x148>)
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	6053      	str	r3, [r2, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <ECC_IRQHandler+0x52>
        HAL_RAMECC_IRQHandler(&hramecc1_m3);
 8001244:	483e      	ldr	r0, [pc, #248]	; (8001340 <ECC_IRQHandler+0x148>)
 8001246:	f001 fb57 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc1_m4, RAMECC_FLAGS_ALL)) {
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <ECC_IRQHandler+0x14c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a3c      	ldr	r2, [pc, #240]	; (8001344 <ECC_IRQHandler+0x14c>)
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	6053      	str	r3, [r2, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <ECC_IRQHandler+0x6c>
        HAL_RAMECC_IRQHandler(&hramecc1_m4);
 800125e:	4839      	ldr	r0, [pc, #228]	; (8001344 <ECC_IRQHandler+0x14c>)
 8001260:	f001 fb4a 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc1_m5, RAMECC_FLAGS_ALL)) {
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <ECC_IRQHandler+0x150>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a37      	ldr	r2, [pc, #220]	; (8001348 <ECC_IRQHandler+0x150>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	6053      	str	r3, [r2, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <ECC_IRQHandler+0x86>
        HAL_RAMECC_IRQHandler(&hramecc1_m5);
 8001278:	4833      	ldr	r0, [pc, #204]	; (8001348 <ECC_IRQHandler+0x150>)
 800127a:	f001 fb3d 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }

    if (__HAL_RAMECC_GET_FLAG(&hramecc2_m1, RAMECC_FLAGS_ALL)) {
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <ECC_IRQHandler+0x154>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <ECC_IRQHandler+0x154>)
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	6053      	str	r3, [r2, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <ECC_IRQHandler+0xa0>
        HAL_RAMECC_IRQHandler(&hramecc2_m1);
 8001292:	482e      	ldr	r0, [pc, #184]	; (800134c <ECC_IRQHandler+0x154>)
 8001294:	f001 fb30 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc2_m2, RAMECC_FLAGS_ALL)) {
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <ECC_IRQHandler+0x158>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <ECC_IRQHandler+0x158>)
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	6053      	str	r3, [r2, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <ECC_IRQHandler+0xba>
        HAL_RAMECC_IRQHandler(&hramecc2_m2);
 80012ac:	4828      	ldr	r0, [pc, #160]	; (8001350 <ECC_IRQHandler+0x158>)
 80012ae:	f001 fb23 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc2_m3, RAMECC_FLAGS_ALL)) {
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <ECC_IRQHandler+0x15c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <ECC_IRQHandler+0x15c>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	6053      	str	r3, [r2, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <ECC_IRQHandler+0xd4>
        HAL_RAMECC_IRQHandler(&hramecc2_m3);
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <ECC_IRQHandler+0x15c>)
 80012c8:	f001 fb16 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc2_m4, RAMECC_FLAGS_ALL)) {
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <ECC_IRQHandler+0x160>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <ECC_IRQHandler+0x160>)
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	6053      	str	r3, [r2, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <ECC_IRQHandler+0xee>
        HAL_RAMECC_IRQHandler(&hramecc2_m4);
 80012e0:	481d      	ldr	r0, [pc, #116]	; (8001358 <ECC_IRQHandler+0x160>)
 80012e2:	f001 fb09 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc2_m5, RAMECC_FLAGS_ALL)) {
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <ECC_IRQHandler+0x164>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <ECC_IRQHandler+0x164>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	6053      	str	r3, [r2, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <ECC_IRQHandler+0x108>
        HAL_RAMECC_IRQHandler(&hramecc2_m5);
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <ECC_IRQHandler+0x164>)
 80012fc:	f001 fafc 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }

    if (__HAL_RAMECC_GET_FLAG(&hramecc3_m1, RAMECC_FLAGS_ALL)) {
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <ECC_IRQHandler+0x168>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <ECC_IRQHandler+0x168>)
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	6053      	str	r3, [r2, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <ECC_IRQHandler+0x122>
        HAL_RAMECC_IRQHandler(&hramecc3_m1);
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <ECC_IRQHandler+0x168>)
 8001316:	f001 faef 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
    if (__HAL_RAMECC_GET_FLAG(&hramecc3_m2, RAMECC_FLAGS_ALL)) {
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <ECC_IRQHandler+0x16c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a10      	ldr	r2, [pc, #64]	; (8001364 <ECC_IRQHandler+0x16c>)
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	6053      	str	r3, [r2, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <ECC_IRQHandler+0x13c>
        HAL_RAMECC_IRQHandler(&hramecc3_m2);
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <ECC_IRQHandler+0x16c>)
 8001330:	f001 fae2 	bl	80028f8 <HAL_RAMECC_IRQHandler>
    }
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	240001d4 	.word	0x240001d4
 800133c:	240001e4 	.word	0x240001e4
 8001340:	240001f4 	.word	0x240001f4
 8001344:	24000204 	.word	0x24000204
 8001348:	24000214 	.word	0x24000214
 800134c:	24000224 	.word	0x24000224
 8001350:	24000234 	.word	0x24000234
 8001354:	24000244 	.word	0x24000244
 8001358:	24000254 	.word	0x24000254
 800135c:	24000264 	.word	0x24000264
 8001360:	24000274 	.word	0x24000274
 8001364:	24000284 	.word	0x24000284

08001368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <SystemInit+0xe4>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <SystemInit+0xe4>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <SystemInit+0xe8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	2b06      	cmp	r3, #6
 8001386:	d807      	bhi.n	8001398 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <SystemInit+0xe8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 030f 	bic.w	r3, r3, #15
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <SystemInit+0xe8>)
 8001392:	f043 0307 	orr.w	r3, r3, #7
 8001396:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <SystemInit+0xec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <SystemInit+0xec>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <SystemInit+0xec>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <SystemInit+0xec>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4929      	ldr	r1, [pc, #164]	; (8001454 <SystemInit+0xec>)
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <SystemInit+0xf0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <SystemInit+0xe8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <SystemInit+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 030f 	bic.w	r3, r3, #15
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <SystemInit+0xe8>)
 80013cc:	f043 0307 	orr.w	r3, r3, #7
 80013d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <SystemInit+0xec>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <SystemInit+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <SystemInit+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <SystemInit+0xec>)
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <SystemInit+0xf4>)
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <SystemInit+0xec>)
 80013ec:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <SystemInit+0xf8>)
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <SystemInit+0xec>)
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <SystemInit+0xfc>)
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <SystemInit+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <SystemInit+0xec>)
 80013fe:	4a19      	ldr	r2, [pc, #100]	; (8001464 <SystemInit+0xfc>)
 8001400:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <SystemInit+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <SystemInit+0xec>)
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <SystemInit+0xfc>)
 800140c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <SystemInit+0xec>)
 8001410:	2200      	movs	r2, #0
 8001412:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <SystemInit+0xec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <SystemInit+0xec>)
 800141a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <SystemInit+0xec>)
 8001422:	2200      	movs	r2, #0
 8001424:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <SystemInit+0x100>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <SystemInit+0x104>)
 800142c:	4013      	ands	r3, r2
 800142e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001432:	d202      	bcs.n	800143a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <SystemInit+0x108>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <SystemInit+0x10c>)
 800143c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001440:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	52002000 	.word	0x52002000
 8001454:	58024400 	.word	0x58024400
 8001458:	eaf6ed7f 	.word	0xeaf6ed7f
 800145c:	02020200 	.word	0x02020200
 8001460:	01ff0000 	.word	0x01ff0000
 8001464:	01010280 	.word	0x01010280
 8001468:	5c001000 	.word	0x5c001000
 800146c:	ffff0000 	.word	0xffff0000
 8001470:	51008108 	.word	0x51008108
 8001474:	52004000 	.word	0x52004000

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800147c:	f7ff ff74 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	; (80014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f005 fc7f 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff f901 	bl	80006b0 <main>
  bx  lr
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014bc:	08006e60 	.word	0x08006e60
  ldr r2, =_sbss
 80014c0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80014c4:	24000818 	.word	0x24000818

080014c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC3_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f9a0 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d8:	f002 f880 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_Init+0x68>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	4913      	ldr	r1, [pc, #76]	; (8001538 <HAL_Init+0x6c>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_Init+0x68>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_Init+0x6c>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_Init+0x70>)
 800150e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_Init+0x74>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001516:	2000      	movs	r0, #0
 8001518:	f000 f814 	bl	8001544 <HAL_InitTick>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e002      	b.n	800152c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001526:	f7ff fc6f 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	58024400 	.word	0x58024400
 8001538:	08006e18 	.word	0x08006e18
 800153c:	24000004 	.word	0x24000004
 8001540:	24000000 	.word	0x24000000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_InitTick+0x60>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e021      	b.n	800159c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_InitTick+0x64>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_InitTick+0x60>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f985 	bl	800187e <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800158c:	f000 f94f 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <HAL_InitTick+0x68>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2400000c 	.word	0x2400000c
 80015a8:	24000000 	.word	0x24000000
 80015ac:	24000008 	.word	0x24000008

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	2400000c 	.word	0x2400000c
 80015d4:	24000814 	.word	0x24000814

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	24000814 	.word	0x24000814

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff ffee 	bl	80015d8 <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffde 	bl	80015d8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2400000c 	.word	0x2400000c

08001638 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetREVID+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0c1b      	lsrs	r3, r3, #16
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	5c001000 	.word	0x5c001000

08001650 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001660:	4904      	ldr	r1, [pc, #16]	; (8001674 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	58000400 	.word	0x58000400

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	05fa0000 	.word	0x05fa0000

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff40 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff33 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa4 	bl	80017d4 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0e3      	b.n	8001a72 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d106      	bne.n	80018c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2223      	movs	r2, #35	; 0x23
 80018b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fabd 	bl	8000e3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <HAL_ETH_Init+0x1e4>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c8:	4a6c      	ldr	r2, [pc, #432]	; (8001a7c <HAL_ETH_Init+0x1e4>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d2:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_ETH_Init+0x1e4>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7a1b      	ldrb	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d103      	bne.n	80018f0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff feb1 	bl	8001650 <HAL_SYSCFG_ETHInterfaceSelect>
 80018ee:	e003      	b.n	80018f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018f4:	f7ff feac 	bl	8001650 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_ETH_Init+0x1e8>)
 80018fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001912:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001914:	f7ff fe60 	bl	80015d8 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800191a:	e011      	b.n	8001940 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800191c:	f7ff fe5c 	bl	80015d8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192a:	d909      	bls.n	8001940 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	22e0      	movs	r2, #224	; 0xe0
 8001938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e098      	b.n	8001a72 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e4      	bne.n	800191c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f89e 	bl	8001a94 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001958:	f001 ffba 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 800195c:	4603      	mov	r3, r0
 800195e:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_ETH_Init+0x1ec>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	0c9a      	lsrs	r2, r3, #18
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3a01      	subs	r2, #1
 800196c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fa81 	bl	8001e78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001982:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800198e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001992:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	22e0      	movs	r2, #224	; 0xe0
 80019ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e05d      	b.n	8001a72 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <HAL_ETH_Init+0x1f0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6952      	ldr	r2, [r2, #20]
 80019ca:	0051      	lsls	r1, r2, #1
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fae9 	bl	8001fb2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb2f 	bl	8002044 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	3305      	adds	r3, #5
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021a      	lsls	r2, r3, #8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	3304      	adds	r3, #4
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a24:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a32:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_ETH_Init+0x1f4>)
 8001a46:	430b      	orrs	r3, r1
 8001a48:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_ETH_Init+0x1f8>)
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	58000400 	.word	0x58000400
 8001a84:	431bde83 	.word	0x431bde83
 8001a88:	ffff8001 	.word	0xffff8001
 8001a8c:	0c020060 	.word	0x0c020060
 8001a90:	0c20c000 	.word	0x0c20c000

08001a94 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001aae:	f001 ff0f 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8001ab2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d804      	bhi.n	8001ac6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e022      	b.n	8001b0c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d204      	bcs.n	8001ad8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e019      	b.n	8001b0c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d915      	bls.n	8001b0c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d804      	bhi.n	8001af2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e00c      	b.n	8001b0c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d804      	bhi.n	8001b04 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e003      	b.n	8001b0c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	02160ebf 	.word	0x02160ebf
 8001b24:	03938700 	.word	0x03938700
 8001b28:	05f5e0ff 	.word	0x05f5e0ff
 8001b2c:	08f0d17f 	.word	0x08f0d17f
 8001b30:	0ee6b27f 	.word	0x0ee6b27f

08001b34 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	791b      	ldrb	r3, [r3, #4]
 8001b4c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001b4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7b1b      	ldrb	r3, [r3, #12]
 8001b54:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	7b5b      	ldrb	r3, [r3, #13]
 8001b5c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	7b9b      	ldrb	r3, [r3, #14]
 8001b64:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7bdb      	ldrb	r3, [r3, #15]
 8001b6c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	7c12      	ldrb	r2, [r2, #16]
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	d102      	bne.n	8001b7e <ETH_SetMACConfig+0x4a>
 8001b78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b7c:	e000      	b.n	8001b80 <ETH_SetMACConfig+0x4c>
 8001b7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b80:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	7c52      	ldrb	r2, [r2, #17]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d102      	bne.n	8001b90 <ETH_SetMACConfig+0x5c>
 8001b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8e:	e000      	b.n	8001b92 <ETH_SetMACConfig+0x5e>
 8001b90:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7c9b      	ldrb	r3, [r3, #18]
 8001b98:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b9a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ba0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001ba6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7f1b      	ldrb	r3, [r3, #28]
 8001bac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001bae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7f5b      	ldrb	r3, [r3, #29]
 8001bb4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001bb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	7f92      	ldrb	r2, [r2, #30]
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d102      	bne.n	8001bc6 <ETH_SetMACConfig+0x92>
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	e000      	b.n	8001bc8 <ETH_SetMACConfig+0x94>
 8001bc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001bc8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	7fdb      	ldrb	r3, [r3, #31]
 8001bce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bd0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0xae>
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0xb0>
 8001be2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001be4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bf2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001bf4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <ETH_SetMACConfig+0x22c>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c32:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d102      	bne.n	8001c46 <ETH_SetMACConfig+0x112>
 8001c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0x114>
 8001c46:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c48:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <ETH_SetMACConfig+0x230>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <ETH_SetMACConfig+0x234>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	430b      	orrs	r3, r1
 8001c88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d101      	bne.n	8001ca6 <ETH_SetMACConfig+0x172>
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	e000      	b.n	8001ca8 <ETH_SetMACConfig+0x174>
 8001ca6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ca8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001cd0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001cd8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f023 0103 	bic.w	r1, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001cfe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d101      	bne.n	8001d22 <ETH_SetMACConfig+0x1ee>
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	e000      	b.n	8001d24 <ETH_SetMACConfig+0x1f0>
 8001d22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	00048083 	.word	0x00048083
 8001d64:	c0f88000 	.word	0xc0f88000
 8001d68:	fffffef0 	.word	0xfffffef0

08001d6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <ETH_SetDMAConfig+0xf8>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6811      	ldr	r1, [r2, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d92:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	7b1b      	ldrb	r3, [r3, #12]
 8001da4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <ETH_SetDMAConfig+0xfc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7b5b      	ldrb	r3, [r3, #13]
 8001dca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ddc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <ETH_SetDMAConfig+0x100>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001df0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	7d1b      	ldrb	r3, [r3, #20]
 8001dfc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dfe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7f5b      	ldrb	r3, [r3, #29]
 8001e04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <ETH_SetDMAConfig+0x104>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e26:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7f1b      	ldrb	r3, [r3, #28]
 8001e2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <ETH_SetDMAConfig+0x108>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	ffff87fd 	.word	0xffff87fd
 8001e68:	ffff2ffe 	.word	0xffff2ffe
 8001e6c:	fffec000 	.word	0xfffec000
 8001e70:	ffc0efef 	.word	0xffc0efef
 8001e74:	7fc0ffff 	.word	0x7fc0ffff

08001e78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0a4      	sub	sp, #144	; 0x90
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e86:	2300      	movs	r3, #0
 8001e88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ed0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f10:	2320      	movs	r3, #32
 8001f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f52:	2300      	movs	r3, #0
 8001f54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fde6 	bl	8001b34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fee1 	bl	8001d6c <ETH_SetDMAConfig>
}
 8001faa:	bf00      	nop
 8001fac:	3790      	adds	r7, #144	; 0x90
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e01d      	b.n	8001ffc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68d9      	ldr	r1, [r3, #12]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	3206      	adds	r2, #6
 8001ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d9de      	bls.n	8001fc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002010:	461a      	mov	r2, r3
 8002012:	2303      	movs	r3, #3
 8002014:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002024:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002034:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e023      	b.n	800209a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	3212      	adds	r2, #18
 8002090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d9d8      	bls.n	8002052 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c6:	461a      	mov	r2, r3
 80020c8:	2303      	movs	r3, #3
 80020ca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020da:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_GPIO_Init+0x234>)
 8002110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002112:	e194      	b.n	800243e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8186 	beq.w	8002438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d005      	beq.n	8002144 <HAL_GPIO_Init+0x44>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d130      	bne.n	80021a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800217a:	2201      	movs	r2, #1
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 0201 	and.w	r2, r3, #1
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d017      	beq.n	80021e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d123      	bne.n	8002236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0203 	and.w	r2, r3, #3
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80e0 	beq.w	8002438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_GPIO_Init+0x238>)
 800227a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800227e:	4a2e      	ldr	r2, [pc, #184]	; (8002338 <HAL_GPIO_Init+0x238>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_GPIO_Init+0x238>)
 800228a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <HAL_GPIO_Init+0x23c>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a20      	ldr	r2, [pc, #128]	; (8002340 <HAL_GPIO_Init+0x240>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d052      	beq.n	8002368 <HAL_GPIO_Init+0x268>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_GPIO_Init+0x244>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d031      	beq.n	800232e <HAL_GPIO_Init+0x22e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_GPIO_Init+0x248>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d02b      	beq.n	800232a <HAL_GPIO_Init+0x22a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_GPIO_Init+0x24c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d025      	beq.n	8002326 <HAL_GPIO_Init+0x226>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_GPIO_Init+0x250>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01f      	beq.n	8002322 <HAL_GPIO_Init+0x222>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_GPIO_Init+0x254>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d019      	beq.n	800231e <HAL_GPIO_Init+0x21e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_GPIO_Init+0x258>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_GPIO_Init+0x21a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_GPIO_Init+0x25c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00d      	beq.n	8002316 <HAL_GPIO_Init+0x216>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_GPIO_Init+0x260>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x212>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_GPIO_Init+0x264>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_GPIO_Init+0x20e>
 800230a:	2309      	movs	r3, #9
 800230c:	e02d      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800230e:	230a      	movs	r3, #10
 8002310:	e02b      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002312:	2308      	movs	r3, #8
 8002314:	e029      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002316:	2307      	movs	r3, #7
 8002318:	e027      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800231a:	2306      	movs	r3, #6
 800231c:	e025      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800231e:	2305      	movs	r3, #5
 8002320:	e023      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002322:	2304      	movs	r3, #4
 8002324:	e021      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002326:	2303      	movs	r3, #3
 8002328:	e01f      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800232a:	2302      	movs	r3, #2
 800232c:	e01d      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800232e:	2301      	movs	r3, #1
 8002330:	e01b      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002332:	bf00      	nop
 8002334:	58000080 	.word	0x58000080
 8002338:	58024400 	.word	0x58024400
 800233c:	58000400 	.word	0x58000400
 8002340:	58020000 	.word	0x58020000
 8002344:	58020400 	.word	0x58020400
 8002348:	58020800 	.word	0x58020800
 800234c:	58020c00 	.word	0x58020c00
 8002350:	58021000 	.word	0x58021000
 8002354:	58021400 	.word	0x58021400
 8002358:	58021800 	.word	0x58021800
 800235c:	58021c00 	.word	0x58021c00
 8002360:	58022000 	.word	0x58022000
 8002364:	58022400 	.word	0x58022400
 8002368:	2300      	movs	r3, #0
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237a:	4938      	ldr	r1, [pc, #224]	; (800245c <HAL_GPIO_Init+0x35c>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f ae63 	bne.w	8002114 <HAL_GPIO_Init+0x14>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	58000400 	.word	0x58000400

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af02      	add	r7, sp, #8
 8002498:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0fe      	b.n	80026a2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fdf7 	bl	80010ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f9d6 	bl	800687c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7c1a      	ldrb	r2, [r3, #16]
 80024d8:	f88d 2000 	strb.w	r2, [sp]
 80024dc:	3304      	adds	r3, #4
 80024de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e0:	f004 f95a 	bl	8006798 <USB_CoreInit>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0d5      	b.n	80026a2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 f9ce 	bl	800689e <USB_SetCurrentMode>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0c6      	b.n	80026a2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e04a      	b.n	80025b0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3315      	adds	r3, #21
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3314      	adds	r3, #20
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	b298      	uxth	r0, r3
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	332e      	adds	r3, #46	; 0x2e
 8002556:	4602      	mov	r2, r0
 8002558:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3318      	adds	r3, #24
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	331c      	adds	r3, #28
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3320      	adds	r3, #32
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3324      	adds	r3, #36	; 0x24
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3301      	adds	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3af      	bcc.n	800251a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e044      	b.n	800264a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f203 2355 	addw	r3, r3, #597	; 0x255
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	3301      	adds	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	791b      	ldrb	r3, [r3, #4]
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	429a      	cmp	r2, r3
 8002652:	d3b5      	bcc.n	80025c0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7c1a      	ldrb	r2, [r3, #16]
 800265c:	f88d 2000 	strb.w	r2, [sp]
 8002660:	3304      	adds	r3, #4
 8002662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002664:	f004 f968 	bl	8006938 <USB_DevInit>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e013      	b.n	80026a2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7b1b      	ldrb	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f80b 	bl	80026ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f004 fb23 	bl	8006ce6 <USB_DevDisconnect>

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	10000003 	.word	0x10000003

080026f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d00a      	beq.n	800271e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e01f      	b.n	800275a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e01d      	b.n	800275a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	490f      	ldr	r1, [pc, #60]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800272e:	f7fe ff53 	bl	80015d8 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002734:	e009      	b.n	800274a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002736:	f7fe ff4f 	bl	80015d8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002744:	d901      	bls.n	800274a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e007      	b.n	800275a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002756:	d1ee      	bne.n	8002736 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	58024800 	.word	0x58024800

08002768 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	58024800 	.word	0x58024800

08002788 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e030      	b.n	80027fc <HAL_RAMECC_Init+0x74>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0220 	bic.w	r2, r2, #32
 80027ae:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 021c 	bic.w	r2, r2, #28
 80027d6:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0207 	bic.w	r2, r2, #7
 80027e6:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_RAMECC_StartMonitor>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_StartMonitor(RAMECC_HandleTypeDef *hramecc)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10f      	bne.n	800283a <HAL_RAMECC_StartMonitor+0x32>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC monitor */
    hramecc->Instance->CR |= RAMECC_CR_ECCELEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e003      	b.n	8002842 <HAL_RAMECC_StartMonitor+0x3a>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_RAMECC_EnableNotification>:
  *                        specified RAMECC Monitor.
  * @param  Notifications  Select the notification.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_EnableNotification(RAMECC_HandleTypeDef *hramecc, uint32_t Notifications)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));
  assert_param (IS_RAMECC_INTERRUPT (Notifications));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d134      	bne.n	80028ce <HAL_RAMECC_EnableNotification+0x7e>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC interrupts */
    __HAL_RAMECC_ENABLE_IT (hramecc, Notifications);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_RAMECC_EnableNotification+0x94>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00f      	beq.n	8002892 <HAL_RAMECC_EnableNotification+0x42>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_RAMECC_EnableNotification+0x98>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <HAL_RAMECC_EnableNotification+0x42>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_RAMECC_EnableNotification+0x9c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <HAL_RAMECC_EnableNotification+0x42>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <HAL_RAMECC_EnableNotification+0xa0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <HAL_RAMECC_EnableNotification+0x42>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_RAMECC_EnableNotification+0xa4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10e      	bne.n	80028b0 <HAL_RAMECC_EnableNotification+0x60>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	6809      	ldr	r1, [r1, #0]
 80028a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
 80028ae:	e009      	b.n	80028c4 <HAL_RAMECC_EnableNotification+0x74>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e003      	b.n	80028d6 <HAL_RAMECC_EnableNotification+0x86>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	10000001 	.word	0x10000001
 80028e8:	10000002 	.word	0x10000002
 80028ec:	10000004 	.word	0x10000004
 80028f0:	10000008 	.word	0x10000008
 80028f4:	1000000f 	.word	0x1000000f

080028f8 <HAL_RAMECC_IRQHandler>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval None.
  */
void HAL_RAMECC_IRQHandler(RAMECC_HandleTypeDef *hramecc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t ier_reg = ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
  uint32_t cr_reg = hramecc->Instance->CR >> 1U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t sr_reg = hramecc->Instance->SR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Update global interrupt variables */
  if ((ier_reg & RAMECC_IER_GIE) == RAMECC_IER_GIE)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RAMECC_IRQHandler+0x34>
  {
    ier_reg = RAMECC_IT_GLOBAL_ALL;
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <HAL_RAMECC_IRQHandler+0x8c>)
 800292a:	617b      	str	r3, [r7, #20]
  }

  /* Store the ECC Single error detected */
  if ((sr_reg & RAMECC_SR_SEDCF) == RAMECC_SR_SEDCF)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RAMECC_IRQHandler+0x4a>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_SINGLEERROR_DETECTED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60da      	str	r2, [r3, #12]
  }

  /* Store the ECC double error detected */
  if ((sr_reg & (RAMECC_SR_DEDF | RAMECC_SR_DEBWDF)) != 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0306 	and.w	r3, r3, #6
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RAMECC_IRQHandler+0x60>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_DOUBLEERROR_DETECTED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f043 0202 	orr.w	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]
  }

  /* Clear active flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, (((ier_reg | cr_reg) & (sr_reg << 1U)) >> 1U));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	431a      	orrs	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4013      	ands	r3, r2
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	43da      	mvns	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	400a      	ands	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
  {
    /* Error detection callback */
    hramecc->DetectErrorCallback(hramecc);
  }
#else
  HAL_RAMECC_DetectErrorCallback(hramecc);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f9f0 	bl	8000d5c <HAL_RAMECC_DetectErrorCallback>
#endif /* USE_HAL_RAMECC_REGISTER_CALLBACKS */
}
 800297c:	bf00      	nop
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	1000000f 	.word	0x1000000f

08002988 <HAL_RAMECC_GetFailingAddress>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval Failing address offset.
  */
uint32_t HAL_RAMECC_GetFailingAddress(RAMECC_HandleTypeDef *hramecc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Return failing address */
  return hramecc->Instance->FAR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_RAMECC_GetRAMECCError>:
  *                         contains the configuration information for the
  *                         specified RAMECC instance.
  * @retval RAMECC error code detected.
  */
uint32_t HAL_RAMECC_GetRAMECCError(RAMECC_HandleTypeDef *hramecc)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Return the RAMECC error code detected*/
  return hramecc->RAMECCErrorCode;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08c      	sub	sp, #48	; 0x30
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f000 bc48 	b.w	8003260 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8088 	beq.w	8002aee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4b99      	ldr	r3, [pc, #612]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029e8:	4b96      	ldr	r3, [pc, #600]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d007      	beq.n	8002a04 <HAL_RCC_OscConfig+0x48>
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b18      	cmp	r3, #24
 80029f8:	d111      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62>
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d06d      	beq.n	8002aec <HAL_RCC_OscConfig+0x130>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d169      	bne.n	8002aec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f000 bc21 	b.w	8003260 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x7a>
 8002a28:	4b86      	ldr	r3, [pc, #536]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a85      	ldr	r2, [pc, #532]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0xd8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x9c>
 8002a3e:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a80      	ldr	r2, [pc, #512]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7d      	ldr	r2, [pc, #500]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xd8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0xc0>
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a74      	ldr	r2, [pc, #464]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xd8>
 8002a7c:	4b71      	ldr	r3, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a70      	ldr	r2, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6d      	ldr	r2, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fd9c 	bl	80015d8 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fd98 	bl	80015d8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e3d4      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe8>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fd88 	bl	80015d8 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fd84 	bl	80015d8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e3c0      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ade:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x110>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80ca 	beq.w	8002c90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afc:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b06:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_RCC_OscConfig+0x166>
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b18      	cmp	r3, #24
 8002b16:	d156      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x20a>
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d151      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e392      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0219 	bic.w	r2, r3, #25
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	493f      	ldr	r1, [pc, #252]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd44 	bl	80015d8 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fd40 	bl	80015d8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e37c      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	f7fe fd61 	bl	8001638 <HAL_GetREVID>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d817      	bhi.n	8002bb0 <HAL_RCC_OscConfig+0x1f4>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d108      	bne.n	8002b9a <HAL_RCC_OscConfig+0x1de>
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b90:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	e07a      	b.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	031b      	lsls	r3, r3, #12
 8002ba8:	4926      	ldr	r1, [pc, #152]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bae:	e06f      	b.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	4921      	ldr	r1, [pc, #132]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc4:	e064      	b.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d047      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0219 	bic.w	r2, r3, #25
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	491a      	ldr	r1, [pc, #104]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fcfa 	bl	80015d8 <HAL_GetTick>
 8002be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fcf6 	bl	80015d8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e332      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	f7fe fd17 	bl	8001638 <HAL_GetREVID>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d819      	bhi.n	8002c48 <HAL_RCC_OscConfig+0x28c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d108      	bne.n	8002c2e <HAL_RCC_OscConfig+0x272>
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2a:	6053      	str	r3, [r2, #4]
 8002c2c:	e030      	b.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	031b      	lsls	r3, r3, #12
 8002c3c:	4901      	ldr	r1, [pc, #4]	; (8002c44 <HAL_RCC_OscConfig+0x288>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
 8002c42:	e025      	b.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
 8002c44:	58024400 	.word	0x58024400
 8002c48:	4b9a      	ldr	r3, [pc, #616]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	4997      	ldr	r1, [pc, #604]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b95      	ldr	r3, [pc, #596]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a94      	ldr	r2, [pc, #592]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fcb5 	bl	80015d8 <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe fcb1 	bl	80015d8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e2ed      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c84:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a9 	beq.w	8002df0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ca8:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x308>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b18      	cmp	r3, #24
 8002cb8:	d13a      	bne.n	8002d30 <HAL_RCC_OscConfig+0x374>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d135      	bne.n	8002d30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x320>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e2c1      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cdc:	f7fe fcac 	bl	8001638 <HAL_GetREVID>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d817      	bhi.n	8002d1a <HAL_RCC_OscConfig+0x35e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0x348>
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cfa:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d00:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d02:	e075      	b.n	8002df0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	4968      	ldr	r1, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d18:	e06a      	b.n	8002df0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	4962      	ldr	r1, [pc, #392]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d2e:	e05f      	b.n	8002df0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d042      	beq.n	8002dbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d38:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fc48 	bl	80015d8 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fc44 	bl	80015d8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e280      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d5e:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d6a:	f7fe fc65 	bl	8001638 <HAL_GetREVID>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d817      	bhi.n	8002da8 <HAL_RCC_OscConfig+0x3ec>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d108      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3d6>
 8002d80:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	e02e      	b.n	8002df0 <HAL_RCC_OscConfig+0x434>
 8002d92:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	4944      	ldr	r1, [pc, #272]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
 8002da6:	e023      	b.n	8002df0 <HAL_RCC_OscConfig+0x434>
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	493f      	ldr	r1, [pc, #252]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60cb      	str	r3, [r1, #12]
 8002dbc:	e018      	b.n	8002df0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fc05 	bl	80015d8 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fc01 	bl	80015d8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e23d      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d036      	beq.n	8002e6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fbe2 	bl	80015d8 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe fbde 	bl	80015d8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e21a      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x45c>
 8002e36:	e018      	b.n	8002e6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fbc8 	bl	80015d8 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fbc4 	bl	80015d8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e200      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d039      	beq.n	8002eea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01c      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fba5 	bl	80015d8 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e92:	f7fe fba1 	bl	80015d8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1dd      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x4d6>
 8002eb0:	e01b      	b.n	8002eea <HAL_RCC_OscConfig+0x52e>
 8002eb2:	bf00      	nop
 8002eb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb8:	4b9b      	ldr	r3, [pc, #620]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a9a      	ldr	r2, [pc, #616]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fb88 	bl	80015d8 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ecc:	f7fe fb84 	bl	80015d8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1c0      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ede:	4b92      	ldr	r3, [pc, #584]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8081 	beq.w	8002ffa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	; (800312c <HAL_RCC_OscConfig+0x770>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a8b      	ldr	r2, [pc, #556]	; (800312c <HAL_RCC_OscConfig+0x770>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f04:	f7fe fb68 	bl	80015d8 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fe fb64 	bl	80015d8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1a0      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f1e:	4b83      	ldr	r3, [pc, #524]	; (800312c <HAL_RCC_OscConfig+0x770>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x584>
 8002f32:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a7c      	ldr	r2, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e02d      	b.n	8002f9c <HAL_RCC_OscConfig+0x5e0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5a6>
 8002f48:	4b77      	ldr	r3, [pc, #476]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a76      	ldr	r2, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	4b74      	ldr	r3, [pc, #464]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a73      	ldr	r2, [pc, #460]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f5a:	f023 0304 	bic.w	r3, r3, #4
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	e01c      	b.n	8002f9c <HAL_RCC_OscConfig+0x5e0>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c8>
 8002f6a:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a6e      	ldr	r2, [pc, #440]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f70:	f043 0304 	orr.w	r3, r3, #4
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a6b      	ldr	r2, [pc, #428]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0x5e0>
 8002f84:	4b68      	ldr	r3, [pc, #416]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a67      	ldr	r2, [pc, #412]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a64      	ldr	r2, [pc, #400]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fb18 	bl	80015d8 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fe fb14 	bl	80015d8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e14e      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc2:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0ee      	beq.n	8002fac <HAL_RCC_OscConfig+0x5f0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fb02 	bl	80015d8 <HAL_GetTick>
 8002fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fafe 	bl	80015d8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e138      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ee      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 812d 	beq.w	800325e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003004:	4b48      	ldr	r3, [pc, #288]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300c:	2b18      	cmp	r3, #24
 800300e:	f000 80bd 	beq.w	800318c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b02      	cmp	r3, #2
 8003018:	f040 809e 	bne.w	8003158 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a41      	ldr	r2, [pc, #260]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fad6 	bl	80015d8 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fad2 	bl	80015d8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e10e      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCC_OscConfig+0x774>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	430a      	orrs	r2, r1
 8003062:	4931      	ldr	r1, [pc, #196]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	628b      	str	r3, [r1, #40]	; 0x28
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	3b01      	subs	r3, #1
 800306e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	3b01      	subs	r3, #1
 8003078:	025b      	lsls	r3, r3, #9
 800307a:	b29b      	uxth	r3, r3
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	3b01      	subs	r3, #1
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003098:	4923      	ldr	r1, [pc, #140]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	4a21      	ldr	r2, [pc, #132]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <HAL_RCC_OscConfig+0x778>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030b6:	00d2      	lsls	r2, r2, #3
 80030b8:	491b      	ldr	r1, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f023 020c 	bic.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4917      	ldr	r1, [pc, #92]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f023 0202 	bic.w	r2, r3, #2
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	4912      	ldr	r1, [pc, #72]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_RCC_OscConfig+0x76c>)
 8003118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fe fa5b 	bl	80015d8 <HAL_GetTick>
 8003122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003124:	e011      	b.n	800314a <HAL_RCC_OscConfig+0x78e>
 8003126:	bf00      	nop
 8003128:	58024400 	.word	0x58024400
 800312c:	58024800 	.word	0x58024800
 8003130:	fffffc0c 	.word	0xfffffc0c
 8003134:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fa4e 	bl	80015d8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e08a      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x77c>
 8003156:	e082      	b.n	800325e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a42      	ldr	r2, [pc, #264]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fa38 	bl	80015d8 <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fa34 	bl	80015d8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e070      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800317e:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x7b0>
 800318a:	e068      	b.n	800325e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003192:	4b35      	ldr	r3, [pc, #212]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b01      	cmp	r3, #1
 800319e:	d031      	beq.n	8003204 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0203 	and.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d12a      	bne.n	8003204 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d122      	bne.n	8003204 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d11a      	bne.n	8003204 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0a5b      	lsrs	r3, r3, #9
 80031d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d111      	bne.n	8003204 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d108      	bne.n	8003204 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e02b      	b.n	8003260 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003212:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	429a      	cmp	r2, r3
 800321c:	d01f      	beq.n	800325e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800322a:	f7fe f9d5 	bl	80015d8 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003230:	bf00      	nop
 8003232:	f7fe f9d1 	bl	80015d8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	4293      	cmp	r3, r2
 800323c:	d0f9      	beq.n	8003232 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCC_OscConfig+0x8b0>)
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800324a:	00d2      	lsls	r2, r2, #3
 800324c:	4906      	ldr	r1, [pc, #24]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 800324e:	4313      	orrs	r3, r2
 8003250:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_RCC_OscConfig+0x8ac>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3730      	adds	r7, #48	; 0x30
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	58024400 	.word	0x58024400
 800326c:	ffff0007 	.word	0xffff0007

08003270 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e19c      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d910      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b87      	ldr	r3, [pc, #540]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	4985      	ldr	r1, [pc, #532]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b83      	ldr	r3, [pc, #524]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e184      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d908      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032d0:	4b78      	ldr	r3, [pc, #480]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	4975      	ldr	r1, [pc, #468]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d908      	bls.n	8003310 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	496a      	ldr	r1, [pc, #424]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800330c:	4313      	orrs	r3, r2
 800330e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	4b64      	ldr	r3, [pc, #400]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003328:	429a      	cmp	r2, r3
 800332a:	d908      	bls.n	800333e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	495e      	ldr	r1, [pc, #376]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800333a:	4313      	orrs	r3, r2
 800333c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	4b59      	ldr	r3, [pc, #356]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003356:	429a      	cmp	r2, r3
 8003358:	d908      	bls.n	800336c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800335a:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4953      	ldr	r1, [pc, #332]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003368:	4313      	orrs	r3, r2
 800336a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	4b4d      	ldr	r3, [pc, #308]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	429a      	cmp	r2, r3
 8003386:	d908      	bls.n	800339a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f023 020f 	bic.w	r2, r3, #15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4947      	ldr	r1, [pc, #284]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003396:	4313      	orrs	r3, r2
 8003398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d055      	beq.n	8003452 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4940      	ldr	r1, [pc, #256]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c0:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d121      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0f6      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d115      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0ea      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f0:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0de      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0d6      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f023 0207 	bic.w	r2, r3, #7
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4925      	ldr	r1, [pc, #148]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003422:	f7fe f8d9 	bl	80015d8 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003428:	e00a      	b.n	8003440 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7fe f8d5 	bl	80015d8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0be      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	429a      	cmp	r2, r3
 8003450:	d1eb      	bne.n	800342a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d010      	beq.n	8003480 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	429a      	cmp	r2, r3
 800346c:	d208      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f023 020f 	bic.w	r2, r3, #15
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	490e      	ldr	r1, [pc, #56]	; (80034b4 <HAL_RCC_ClockConfig+0x244>)
 800347c:	4313      	orrs	r3, r2
 800347e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d214      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 020f 	bic.w	r2, r3, #15
 8003496:	4906      	ldr	r1, [pc, #24]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <HAL_RCC_ClockConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e086      	b.n	80035be <HAL_RCC_ClockConfig+0x34e>
 80034b0:	52002000 	.word	0x52002000
 80034b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d208      	bcs.n	80034e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034d4:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4939      	ldr	r1, [pc, #228]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d208      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	492e      	ldr	r1, [pc, #184]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800352c:	429a      	cmp	r2, r3
 800352e:	d208      	bcs.n	8003542 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 800353e:	4313      	orrs	r3, r2
 8003540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355a:	429a      	cmp	r2, r3
 800355c:	d208      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4917      	ldr	r1, [pc, #92]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 800356c:	4313      	orrs	r3, r2
 800356e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003570:	f000 f834 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	4912      	ldr	r1, [pc, #72]	; (80035cc <HAL_RCC_ClockConfig+0x35c>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_RCC_ClockConfig+0x358>)
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	4a0d      	ldr	r2, [pc, #52]	; (80035cc <HAL_RCC_ClockConfig+0x35c>)
 8003598:	5cd3      	ldrb	r3, [r2, r3]
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x360>)
 80035a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x364>)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x368>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd ffc6 	bl	8001544 <HAL_InitTick>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	58024400 	.word	0x58024400
 80035cc:	08006e18 	.word	0x08006e18
 80035d0:	24000004 	.word	0x24000004
 80035d4:	24000000 	.word	0x24000000
 80035d8:	24000008 	.word	0x24000008

080035dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e2:	4bb3      	ldr	r3, [pc, #716]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ea:	2b18      	cmp	r3, #24
 80035ec:	f200 8155 	bhi.w	800389a <HAL_RCC_GetSysClockFreq+0x2be>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800389b 	.word	0x0800389b
 8003600:	0800389b 	.word	0x0800389b
 8003604:	0800389b 	.word	0x0800389b
 8003608:	0800389b 	.word	0x0800389b
 800360c:	0800389b 	.word	0x0800389b
 8003610:	0800389b 	.word	0x0800389b
 8003614:	0800389b 	.word	0x0800389b
 8003618:	08003683 	.word	0x08003683
 800361c:	0800389b 	.word	0x0800389b
 8003620:	0800389b 	.word	0x0800389b
 8003624:	0800389b 	.word	0x0800389b
 8003628:	0800389b 	.word	0x0800389b
 800362c:	0800389b 	.word	0x0800389b
 8003630:	0800389b 	.word	0x0800389b
 8003634:	0800389b 	.word	0x0800389b
 8003638:	08003689 	.word	0x08003689
 800363c:	0800389b 	.word	0x0800389b
 8003640:	0800389b 	.word	0x0800389b
 8003644:	0800389b 	.word	0x0800389b
 8003648:	0800389b 	.word	0x0800389b
 800364c:	0800389b 	.word	0x0800389b
 8003650:	0800389b 	.word	0x0800389b
 8003654:	0800389b 	.word	0x0800389b
 8003658:	0800368f 	.word	0x0800368f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800365c:	4b94      	ldr	r3, [pc, #592]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003668:	4b91      	ldr	r3, [pc, #580]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	08db      	lsrs	r3, r3, #3
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	4a90      	ldr	r2, [pc, #576]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800367a:	e111      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800367c:	4b8d      	ldr	r3, [pc, #564]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800367e:	61bb      	str	r3, [r7, #24]
      break;
 8003680:	e10e      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003682:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003684:	61bb      	str	r3, [r7, #24]
      break;
 8003686:	e10b      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003688:	4b8c      	ldr	r3, [pc, #560]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800368a:	61bb      	str	r3, [r7, #24]
      break;
 800368c:	e108      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800368e:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003698:	4b85      	ldr	r3, [pc, #532]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036a4:	4b82      	ldr	r3, [pc, #520]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036ae:	4b80      	ldr	r3, [pc, #512]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80e1 	beq.w	8003894 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	f000 8083 	beq.w	80037e0 <HAL_RCC_GetSysClockFreq+0x204>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f200 80a1 	bhi.w	8003824 <HAL_RCC_GetSysClockFreq+0x248>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x114>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d056      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x1c0>
 80036ee:	e099      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f0:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02d      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036fc:	4b6c      	ldr	r3, [pc, #432]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	4a6b      	ldr	r2, [pc, #428]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b62      	ldr	r3, [pc, #392]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003736:	ed97 6a02 	vldr	s12, [r7, #8]
 800373a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003756:	e087      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b51      	ldr	r3, [pc, #324]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a02 	vldr	s12, [r7, #8]
 800377e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800379a:	e065      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037de:	e043      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b2f      	ldr	r3, [pc, #188]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a02 	vldr	s12, [r7, #8]
 8003806:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003822:	e021      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a02 	vldr	s12, [r7, #8]
 800384a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003866:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	0a5b      	lsrs	r3, r3, #9
 800386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003872:	3301      	adds	r3, #1
 8003874:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003880:	edd7 6a07 	vldr	s13, [r7, #28]
 8003884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800388c:	ee17 3a90 	vmov	r3, s15
 8003890:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003892:	e005      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
      break;
 8003898:	e002      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800389c:	61bb      	str	r3, [r7, #24]
      break;
 800389e:	bf00      	nop
  }

  return sysclockfreq;
 80038a0:	69bb      	ldr	r3, [r7, #24]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	58024400 	.word	0x58024400
 80038b4:	03d09000 	.word	0x03d09000
 80038b8:	003d0900 	.word	0x003d0900
 80038bc:	007a1200 	.word	0x007a1200
 80038c0:	46000000 	.word	0x46000000
 80038c4:	4c742400 	.word	0x4c742400
 80038c8:	4a742400 	.word	0x4a742400
 80038cc:	4af42400 	.word	0x4af42400

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038d6:	f7ff fe81 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 80038da:	4602      	mov	r2, r0
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_RCC_GetHCLKFreq+0x50>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	490f      	ldr	r1, [pc, #60]	; (8003924 <HAL_RCC_GetHCLKFreq+0x54>)
 80038e8:	5ccb      	ldrb	r3, [r1, r3]
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_RCC_GetHCLKFreq+0x50>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	4a09      	ldr	r2, [pc, #36]	; (8003924 <HAL_RCC_GetHCLKFreq+0x54>)
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_RCC_GetHCLKFreq+0x58>)
 800390c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCC_GetHCLKFreq+0x58>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	58024400 	.word	0x58024400
 8003924:	08006e18 	.word	0x08006e18
 8003928:	24000004 	.word	0x24000004
 800392c:	24000000 	.word	0x24000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003934:	f7ff ffcc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	58024400 	.word	0x58024400
 8003958:	08006e18 	.word	0x08006e18

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003960:	f7ff ffb6 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4904      	ldr	r1, [pc, #16]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400
 8003984:	08006e18 	.word	0x08006e18

08003988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800398c:	b0ca      	sub	sp, #296	; 0x128
 800398e:	af00      	add	r7, sp, #0
 8003990:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800399a:	2300      	movs	r3, #0
 800399c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80039ac:	2500      	movs	r5, #0
 80039ae:	ea54 0305 	orrs.w	r3, r4, r5
 80039b2:	d049      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039be:	d02f      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039c4:	d828      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ca:	d01a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d822      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d007      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039dc:	e01c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039de:	4bb8      	ldr	r3, [pc, #736]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	4ab7      	ldr	r2, [pc, #732]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ea:	e01a      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	3308      	adds	r3, #8
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fc8f 	bl	8005318 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a00:	e00f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	3328      	adds	r3, #40	; 0x28
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fd36 	bl	800547c <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a2a:	4ba5      	ldr	r3, [pc, #660]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a38:	4aa1      	ldr	r2, [pc, #644]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a3e:	e003      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a54:	f04f 0900 	mov.w	r9, #0
 8003a58:	ea58 0309 	orrs.w	r3, r8, r9
 8003a5c:	d047      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d82a      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a85 	.word	0x08003a85
 8003a74:	08003a93 	.word	0x08003a93
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003ac7 	.word	0x08003ac7
 8003a80:	08003ac7 	.word	0x08003ac7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4b8e      	ldr	r3, [pc, #568]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a90:	e01a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a96:	3308      	adds	r3, #8
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 fc3c 	bl	8005318 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa6:	e00f      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aac:	3328      	adds	r3, #40	; 0x28
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fce3 	bl	800547c <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad0:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	f023 0107 	bic.w	r1, r3, #7
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	4a78      	ldr	r2, [pc, #480]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003afa:	f04f 0b00 	mov.w	fp, #0
 8003afe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b02:	d04c      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d030      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d829      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b16:	2bc0      	cmp	r3, #192	; 0xc0
 8003b18:	d02d      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b1c:	d825      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d018      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d821      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b2e:	e01c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b30:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	4a62      	ldr	r2, [pc, #392]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	3308      	adds	r3, #8
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fbe6 	bl	8005318 <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b52:	e011      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	3328      	adds	r3, #40	; 0x28
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 fc8d 	bl	800547c <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b68:	e006      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b80:	4b4f      	ldr	r3, [pc, #316]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6513      	str	r3, [r2, #80]	; 0x50
 8003b94:	e003      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003baa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003bb4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d053      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bca:	d035      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd0:	d82e      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bd6:	d031      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bdc:	d828      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d01a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be8:	d822      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf6:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c02:	e01c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	3308      	adds	r3, #8
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fb83 	bl	8005318 <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c18:	e011      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	3328      	adds	r3, #40	; 0x28
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 fc2a 	bl	800547c <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c2e:	e006      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c36:	e002      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c56:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c80:	460b      	mov	r3, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	d056      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c92:	d038      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c98:	d831      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c9e:	d034      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ca0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ca4:	d82b      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003caa:	d01d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb0:	d825      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cbc:	e01f      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cbe:	bf00      	nop
 8003cc0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4ba2      	ldr	r3, [pc, #648]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4aa1      	ldr	r2, [pc, #644]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fb1c 	bl	8005318 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e011      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cec:	3328      	adds	r3, #40	; 0x28
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fbc3 	bl	800547c <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d14:	4b8e      	ldr	r3, [pc, #568]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d24:	4a8a      	ldr	r2, [pc, #552]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d03a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d01f      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	d819      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d00c      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d815      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d019      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d111      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	4b77      	ldr	r3, [pc, #476]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a76      	ldr	r2, [pc, #472]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d7e:	e011      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d84:	3308      	adds	r3, #8
 8003d86:	2102      	movs	r1, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fac5 	bl	8005318 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003dd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003de0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4313      	orrs	r3, r2
 8003de8:	d051      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df4:	d035      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d82e      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e00:	d031      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e06:	d828      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d01a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d822      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e32:	3308      	adds	r3, #8
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fa6e 	bl	8005318 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e42:	e011      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e48:	3328      	adds	r3, #40	; 0x28
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 fb15 	bl	800547c <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e70:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6513      	str	r3, [r2, #80]	; 0x50
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ea4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d056      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb8:	d033      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ebe:	d82c      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ec0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ec4:	d02f      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eca:	d826      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ecc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed0:	d02b      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ed2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed6:	d820      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003edc:	d012      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee2:	d81a      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d022      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d115      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fa0e 	bl	8005318 <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f02:	e015      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f08:	3328      	adds	r3, #40	; 0x28
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 fab5 	bl	800547c <RCCEx_PLL3_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f18:	e00a      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f22:	bf00      	nop
 8003f24:	e004      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	4a02      	ldr	r2, [pc, #8]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d055      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f88:	d033      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8e:	d82c      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d02f      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d826      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa0:	d02b      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa6:	d820      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fac:	d012      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb2:	d81a      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbc:	d115      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f9a6 	bl	8005318 <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e015      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	3328      	adds	r3, #40	; 0x28
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 fa4d 	bl	800547c <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004008:	4ba3      	ldr	r3, [pc, #652]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004018:	4a9f      	ldr	r2, [pc, #636]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6593      	str	r3, [r2, #88]	; 0x58
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800403e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d037      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004052:	d00e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004058:	d816      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d018      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800405e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004062:	d111      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4b8c      	ldr	r3, [pc, #560]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4a8b      	ldr	r2, [pc, #556]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004070:	e00f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004076:	3308      	adds	r3, #8
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f94c 	bl	8005318 <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800409a:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6513      	str	r3, [r2, #80]	; 0x50
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80040c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d039      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d81c      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	08004125 	.word	0x08004125
 80040ec:	080040f9 	.word	0x080040f9
 80040f0:	08004107 	.word	0x08004107
 80040f4:	08004125 	.word	0x08004125
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4b67      	ldr	r3, [pc, #412]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a66      	ldr	r2, [pc, #408]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004104:	e00f      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410a:	3308      	adds	r3, #8
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f001 f902 	bl	8005318 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800412e:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	f023 0103 	bic.w	r1, r3, #3
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	4a56      	ldr	r2, [pc, #344]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413e:	430b      	orrs	r3, r1
 8004140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004162:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	f000 809f 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416e:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800417a:	f7fd fa2d 	bl	80015d8 <HAL_GetTick>
 800417e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004182:	e00b      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004184:	f7fd fa28 	bl	80015d8 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d903      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800419a:	e005      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800419c:	4b3f      	ldr	r3, [pc, #252]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ed      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d179      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041bc:	4053      	eors	r3, r2
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d015      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a30      	ldr	r2, [pc, #192]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a2d      	ldr	r2, [pc, #180]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041ea:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d118      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd f9ea 	bl	80015d8 <HAL_GetTick>
 8004204:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004208:	e00d      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fd f9e5 	bl	80015d8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004214:	1ad2      	subs	r2, r2, r3
 8004216:	f241 3388 	movw	r3, #5000	; 0x1388
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004224:	e005      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0eb      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004236:	2b00      	cmp	r3, #0
 8004238:	d129      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424a:	d10e      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800425c:	091a      	lsrs	r2, r3, #4
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004260:	4013      	ands	r3, r2
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6113      	str	r3, [r2, #16]
 8004268:	e005      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004270:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004274:	6113      	str	r3, [r2, #16]
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004278:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004286:	4a04      	ldr	r2, [pc, #16]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004288:	430b      	orrs	r3, r1
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	e00e      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004296:	e009      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004298:	58024400 	.word	0x58024400
 800429c:	58024800 	.word	0x58024800
 80042a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f002 0301 	and.w	r3, r2, #1
 80042b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f000 8089 	beq.w	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d4:	2b28      	cmp	r3, #40	; 0x28
 80042d6:	d86b      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080043b9 	.word	0x080043b9
 80042e4:	080043b1 	.word	0x080043b1
 80042e8:	080043b1 	.word	0x080043b1
 80042ec:	080043b1 	.word	0x080043b1
 80042f0:	080043b1 	.word	0x080043b1
 80042f4:	080043b1 	.word	0x080043b1
 80042f8:	080043b1 	.word	0x080043b1
 80042fc:	080043b1 	.word	0x080043b1
 8004300:	08004385 	.word	0x08004385
 8004304:	080043b1 	.word	0x080043b1
 8004308:	080043b1 	.word	0x080043b1
 800430c:	080043b1 	.word	0x080043b1
 8004310:	080043b1 	.word	0x080043b1
 8004314:	080043b1 	.word	0x080043b1
 8004318:	080043b1 	.word	0x080043b1
 800431c:	080043b1 	.word	0x080043b1
 8004320:	0800439b 	.word	0x0800439b
 8004324:	080043b1 	.word	0x080043b1
 8004328:	080043b1 	.word	0x080043b1
 800432c:	080043b1 	.word	0x080043b1
 8004330:	080043b1 	.word	0x080043b1
 8004334:	080043b1 	.word	0x080043b1
 8004338:	080043b1 	.word	0x080043b1
 800433c:	080043b1 	.word	0x080043b1
 8004340:	080043b9 	.word	0x080043b9
 8004344:	080043b1 	.word	0x080043b1
 8004348:	080043b1 	.word	0x080043b1
 800434c:	080043b1 	.word	0x080043b1
 8004350:	080043b1 	.word	0x080043b1
 8004354:	080043b1 	.word	0x080043b1
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043b1 	.word	0x080043b1
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043b1 	.word	0x080043b1
 800436c:	080043b1 	.word	0x080043b1
 8004370:	080043b1 	.word	0x080043b1
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043b9 	.word	0x080043b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	3308      	adds	r3, #8
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ffc3 	bl	8005318 <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	3328      	adds	r3, #40	; 0x28
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f86a 	bl	800547c <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043c2:	4bbf      	ldr	r3, [pc, #764]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d0:	4abb      	ldr	r2, [pc, #748]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6553      	str	r3, [r2, #84]	; 0x54
 80043d6:	e003      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f002 0302 	and.w	r3, r2, #2
 80043ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d041      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	2b05      	cmp	r3, #5
 8004408:	d824      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	0800445d 	.word	0x0800445d
 8004414:	08004429 	.word	0x08004429
 8004418:	0800443f 	.word	0x0800443f
 800441c:	0800445d 	.word	0x0800445d
 8004420:	0800445d 	.word	0x0800445d
 8004424:	0800445d 	.word	0x0800445d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	3308      	adds	r3, #8
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f000 ff71 	bl	8005318 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800443c:	e00f      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	3328      	adds	r3, #40	; 0x28
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f818 	bl	800547c <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004452:	e004      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800445c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004466:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f023 0107 	bic.w	r1, r3, #7
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	4a92      	ldr	r2, [pc, #584]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004476:	430b      	orrs	r3, r1
 8004478:	6553      	str	r3, [r2, #84]	; 0x54
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004480:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f002 0304 	and.w	r3, r2, #4
 8004490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800449a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d044      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d825      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	08004505 	.word	0x08004505
 80044bc:	080044d1 	.word	0x080044d1
 80044c0:	080044e7 	.word	0x080044e7
 80044c4:	08004505 	.word	0x08004505
 80044c8:	08004505 	.word	0x08004505
 80044cc:	08004505 	.word	0x08004505
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	3308      	adds	r3, #8
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 ff1d 	bl	8005318 <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044e4:	e00f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	3328      	adds	r3, #40	; 0x28
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 ffc4 	bl	800547c <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f023 0107 	bic.w	r1, r3, #7
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	4a68      	ldr	r2, [pc, #416]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004520:	430b      	orrs	r3, r1
 8004522:	6593      	str	r3, [r2, #88]	; 0x58
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f002 0320 	and.w	r3, r2, #32
 800453a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d055      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455a:	d033      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800455c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004560:	d82c      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d02f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d826      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800456e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004572:	d02b      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004578:	d820      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800457a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457e:	d012      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d81a      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d022      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800458a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458e:	d115      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004594:	3308      	adds	r3, #8
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f000 febd 	bl	8005318 <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045a4:	e015      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	3328      	adds	r3, #40	; 0x28
 80045ac:	2102      	movs	r1, #2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 ff64 	bl	800547c <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045ba:	e00a      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045c2:	e006      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c4:	bf00      	nop
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c8:	bf00      	nop
 80045ca:	e002      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045cc:	bf00      	nop
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6553      	str	r3, [r2, #84]	; 0x54
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004610:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d058      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004622:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004626:	d033      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004628:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800462c:	d82c      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	d02f      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d826      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800463a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800463e:	d02b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004644:	d820      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d012      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004650:	d81a      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d022      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d115      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004660:	3308      	adds	r3, #8
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fe57 	bl	8005318 <RCCEx_PLL2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004670:	e015      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	3328      	adds	r3, #40	; 0x28
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fefe 	bl	800547c <RCCEx_PLL3_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004686:	e00a      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004690:	bf00      	nop
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800469c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10e      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b6:	4a02      	ldr	r2, [pc, #8]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6593      	str	r3, [r2, #88]	; 0x58
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046dc:	2300      	movs	r3, #0
 80046de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d055      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046f8:	d033      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046fe:	d82c      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004704:	d02f      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d826      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800470c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004710:	d02b      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004712:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004716:	d820      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800471c:	d012      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800471e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004722:	d81a      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d022      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472c:	d115      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	3308      	adds	r3, #8
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fdee 	bl	8005318 <RCCEx_PLL2_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004742:	e015      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	3328      	adds	r3, #40	; 0x28
 800474a:	2102      	movs	r1, #2
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fe95 	bl	800547c <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004758:	e00a      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800476e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004778:	4ba1      	ldr	r3, [pc, #644]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004784:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004788:	4a9d      	ldr	r2, [pc, #628]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800478a:	430b      	orrs	r3, r1
 800478c:	6593      	str	r3, [r2, #88]	; 0x58
 800478e:	e003      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004794:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 0308 	and.w	r3, r2, #8
 80047a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	d01e      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fe54 	bl	800547c <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047e0:	4b87      	ldr	r3, [pc, #540]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f0:	4a83      	ldr	r2, [pc, #524]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f002 0310 	and.w	r3, r2, #16
 8004802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800480c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d01e      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d10c      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	3328      	adds	r3, #40	; 0x28
 800482a:	2102      	movs	r1, #2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fe25 	bl	800547c <RCCEx_PLL3_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800483e:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484e:	4a6c      	ldr	r2, [pc, #432]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800486a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d03e      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800487c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004880:	d022      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004886:	d81b      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d00b      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004892:	e015      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004898:	3308      	adds	r3, #8
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fd3b 	bl	8005318 <RCCEx_PLL2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048a8:	e00f      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ae:	3328      	adds	r3, #40	; 0x28
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fde2 	bl	800547c <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d2:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048e2:	4a47      	ldr	r2, [pc, #284]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6593      	str	r3, [r2, #88]	; 0x58
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004900:	2300      	movs	r3, #0
 8004902:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004908:	460b      	mov	r3, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	d03b      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800491a:	d01f      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800491c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004920:	d818      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d003      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492c:	d007      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800492e:	e011      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800493c:	e00f      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004942:	3328      	adds	r3, #40	; 0x28
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fd98 	bl	800547c <RCCEx_PLL3_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004952:	e004      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6553      	str	r3, [r2, #84]	; 0x54
 800497c:	e003      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004992:	673b      	str	r3, [r7, #112]	; 0x70
 8004994:	2300      	movs	r3, #0
 8004996:	677b      	str	r3, [r7, #116]	; 0x74
 8004998:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800499c:	460b      	mov	r3, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	d034      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049b2:	e011      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049c0:	e00e      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	3308      	adds	r3, #8
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fca4 	bl	8005318 <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049d6:	e003      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	4a02      	ldr	r2, [pc, #8]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fc:	e006      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049fe:	bf00      	nop
 8004a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d00c      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2c:	3328      	adds	r3, #40	; 0x28
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fd23 	bl	800547c <RCCEx_PLL3_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	2300      	movs	r3, #0
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
 8004a54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d038      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6a:	d018      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a70:	d811      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a76:	d014      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7c:	d80b      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d011      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a86:	d106      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4bc3      	ldr	r3, [pc, #780]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4ac2      	ldr	r2, [pc, #776]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab0:	4bb9      	ldr	r3, [pc, #740]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac0:	4ab5      	ldr	r2, [pc, #724]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004adc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ade:	2300      	movs	r3, #0
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aec:	4baa      	ldr	r3, [pc, #680]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	4aa7      	ldr	r2, [pc, #668]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0e:	2300      	movs	r3, #0
 8004b10:	657b      	str	r3, [r7, #84]	; 0x54
 8004b12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b1c:	4b9e      	ldr	r3, [pc, #632]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b2c:	4a9a      	ldr	r2, [pc, #616]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b40:	2300      	movs	r3, #0
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b4e:	4b92      	ldr	r3, [pc, #584]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5c:	4a8e      	ldr	r2, [pc, #568]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b70:	2300      	movs	r3, #0
 8004b72:	647b      	str	r3, [r7, #68]	; 0x44
 8004b74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b7e:	4b86      	ldr	r3, [pc, #536]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b88:	6113      	str	r3, [r2, #16]
 8004b8a:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8c:	6919      	ldr	r1, [r3, #16]
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b96:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bb8:	4b77      	ldr	r3, [pc, #476]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	4a74      	ldr	r2, [pc, #464]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bde:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be8:	4b6b      	ldr	r3, [pc, #428]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	4a67      	ldr	r2, [pc, #412]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	2100      	movs	r1, #0
 8004c08:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004c14:	460b      	mov	r3, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	d011      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb78 	bl	8005318 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	2100      	movs	r1, #0
 8004c48:	6239      	str	r1, [r7, #32]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d011      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb58 	bl	8005318 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	2100      	movs	r1, #0
 8004c88:	61b9      	str	r1, [r7, #24]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d011      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fb38 	bl	8005318 <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d011      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	3328      	adds	r3, #40	; 0x28
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fbca 	bl	800547c <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	2100      	movs	r1, #0
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d011      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	3328      	adds	r3, #40	; 0x28
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fbaa 	bl	800547c <RCCEx_PLL3_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	2100      	movs	r1, #0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d54:	460b      	mov	r3, r1
 8004d56:	4313      	orrs	r3, r2
 8004d58:	d011      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5e:	3328      	adds	r3, #40	; 0x28
 8004d60:	2102      	movs	r1, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fb8a 	bl	800547c <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004d7e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d98:	58024400 	.word	0x58024400

08004d9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004da0:	f7fe fd96 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	08006e18 	.word	0x08006e18

08004dc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dd0:	4ba1      	ldr	r3, [pc, #644]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004dda:	4b9f      	ldr	r3, [pc, #636]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	0b1b      	lsrs	r3, r3, #12
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004de6:	4b9c      	ldr	r3, [pc, #624]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004df2:	4b99      	ldr	r3, [pc, #612]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df6:	08db      	lsrs	r3, r3, #3
 8004df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8111 	beq.w	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	f000 8083 	beq.w	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f200 80a1 	bhi.w	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d056      	beq.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e32:	e099      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e34:	4b88      	ldr	r3, [pc, #544]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02d      	beq.n	8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e40:	4b85      	ldr	r3, [pc, #532]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	4a84      	ldr	r2, [pc, #528]	; (800505c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	ee07 3a90 	vmov	s15, r3
 8004e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b7b      	ldr	r3, [pc, #492]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e9a:	e087      	b.n	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ede:	e065      	b.n	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f22:	e043      	b.n	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b48      	ldr	r3, [pc, #288]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f66:	e021      	b.n	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b37      	ldr	r3, [pc, #220]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004faa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	0a5b      	lsrs	r3, r3, #9
 8004fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd2:	ee17 2a90 	vmov	r2, s15
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fda:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005000:	ee17 2a90 	vmov	r2, s15
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005022:	edd7 6a07 	vldr	s13, [r7, #28]
 8005026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502e:	ee17 2a90 	vmov	r2, s15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005036:	e008      	b.n	800504a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
}
 800504a:	bf00      	nop
 800504c:	3724      	adds	r7, #36	; 0x24
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	58024400 	.word	0x58024400
 800505c:	03d09000 	.word	0x03d09000
 8005060:	46000000 	.word	0x46000000
 8005064:	4c742400 	.word	0x4c742400
 8005068:	4a742400 	.word	0x4a742400
 800506c:	4af42400 	.word	0x4af42400

08005070 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005078:	4ba1      	ldr	r3, [pc, #644]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005082:	4b9f      	ldr	r3, [pc, #636]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	0d1b      	lsrs	r3, r3, #20
 8005088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800508c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800508e:	4b9c      	ldr	r3, [pc, #624]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800509a:	4b99      	ldr	r3, [pc, #612]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	08db      	lsrs	r3, r3, #3
 80050a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8111 	beq.w	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f000 8083 	beq.w	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f200 80a1 	bhi.w	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d056      	beq.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050da:	e099      	b.n	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050dc:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02d      	beq.n	8005144 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e8:	4b85      	ldr	r3, [pc, #532]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	4a84      	ldr	r2, [pc, #528]	; (8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b7b      	ldr	r3, [pc, #492]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005142:	e087      	b.n	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800530c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005186:	e065      	b.n	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b59      	ldr	r3, [pc, #356]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ca:	e043      	b.n	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b48      	ldr	r3, [pc, #288]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520e:	e021      	b.n	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a03 	vldr	s12, [r7, #12]
 8005236:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005252:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005254:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	0a5b      	lsrs	r3, r3, #9
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800526a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800526e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527a:	ee17 2a90 	vmov	r2, s15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005282:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800529c:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a8:	ee17 2a90 	vmov	r2, s15
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052b0:	4b13      	ldr	r3, [pc, #76]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d6:	ee17 2a90 	vmov	r2, s15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052de:	e008      	b.n	80052f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
}
 80052f2:	bf00      	nop
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
 8005304:	03d09000 	.word	0x03d09000
 8005308:	46000000 	.word	0x46000000
 800530c:	4c742400 	.word	0x4c742400
 8005310:	4a742400 	.word	0x4a742400
 8005314:	4af42400 	.word	0x4af42400

08005318 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005326:	4b53      	ldr	r3, [pc, #332]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b03      	cmp	r3, #3
 8005330:	d101      	bne.n	8005336 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e099      	b.n	800546a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005336:	4b4f      	ldr	r3, [pc, #316]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a4e      	ldr	r2, [pc, #312]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800533c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005342:	f7fc f949 	bl	80015d8 <HAL_GetTick>
 8005346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005348:	e008      	b.n	800535c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800534a:	f7fc f945 	bl	80015d8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e086      	b.n	800546a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800535c:	4b45      	ldr	r3, [pc, #276]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005368:	4b42      	ldr	r3, [pc, #264]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	493f      	ldr	r1, [pc, #252]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	628b      	str	r3, [r1, #40]	; 0x28
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	3b01      	subs	r3, #1
 8005382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	3b01      	subs	r3, #1
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	b29b      	uxth	r3, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	3b01      	subs	r3, #1
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	061b      	lsls	r3, r3, #24
 80053a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053ac:	4931      	ldr	r1, [pc, #196]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053b2:	4b30      	ldr	r3, [pc, #192]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	492d      	ldr	r1, [pc, #180]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053c4:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	f023 0220 	bic.w	r2, r3, #32
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	4928      	ldr	r1, [pc, #160]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	4a26      	ldr	r2, [pc, #152]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053e2:	4b24      	ldr	r3, [pc, #144]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <RCCEx_PLL2_Config+0x160>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	69d2      	ldr	r2, [r2, #28]
 80053ee:	00d2      	lsls	r2, r2, #3
 80053f0:	4920      	ldr	r1, [pc, #128]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 80053fc:	f043 0310 	orr.w	r3, r3, #16
 8005400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005408:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800540e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005412:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005414:	e00f      	b.n	8005436 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d106      	bne.n	800542a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800541c:	4b15      	ldr	r3, [pc, #84]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005428:	e005      	b.n	8005436 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800542a:	4b12      	ldr	r3, [pc, #72]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	4a11      	ldr	r2, [pc, #68]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 8005430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005434:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800543c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005442:	f7fc f8c9 	bl	80015d8 <HAL_GetTick>
 8005446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005448:	e008      	b.n	800545c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800544a:	f7fc f8c5 	bl	80015d8 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e006      	b.n	800546a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <RCCEx_PLL2_Config+0x15c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	ffff0007 	.word	0xffff0007

0800547c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800548a:	4b53      	ldr	r3, [pc, #332]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b03      	cmp	r3, #3
 8005494:	d101      	bne.n	800549a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e099      	b.n	80055ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4e      	ldr	r2, [pc, #312]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 80054a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a6:	f7fc f897 	bl	80015d8 <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054ac:	e008      	b.n	80054c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054ae:	f7fc f893 	bl	80015d8 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e086      	b.n	80055ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054c0:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054cc:	4b42      	ldr	r3, [pc, #264]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	051b      	lsls	r3, r3, #20
 80054da:	493f      	ldr	r1, [pc, #252]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	628b      	str	r3, [r1, #40]	; 0x28
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	025b      	lsls	r3, r3, #9
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	041b      	lsls	r3, r3, #16
 80054fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	3b01      	subs	r3, #1
 800550a:	061b      	lsls	r3, r3, #24
 800550c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005510:	4931      	ldr	r1, [pc, #196]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005516:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	492d      	ldr	r1, [pc, #180]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005528:	4b2b      	ldr	r3, [pc, #172]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4928      	ldr	r1, [pc, #160]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800553a:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	4a26      	ldr	r2, [pc, #152]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <RCCEx_PLL3_Config+0x160>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	69d2      	ldr	r2, [r2, #28]
 8005552:	00d2      	lsls	r2, r2, #3
 8005554:	4920      	ldr	r1, [pc, #128]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005556:	4313      	orrs	r3, r2
 8005558:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800555a:	4b1f      	ldr	r3, [pc, #124]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800556c:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005572:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005578:	e00f      	b.n	800559a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d106      	bne.n	800558e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005580:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800558a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800558c:	e005      	b.n	800559a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 8005594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a6:	f7fc f817 	bl	80015d8 <HAL_GetTick>
 80055aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055ac:	e008      	b.n	80055c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055ae:	f7fc f813 	bl	80015d8 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e006      	b.n	80055ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <RCCEx_PLL3_Config+0x15c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	58024400 	.word	0x58024400
 80055dc:	ffff0007 	.word	0xffff0007

080055e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e042      	b.n	8005678 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fb fce7 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2224      	movs	r2, #36	; 0x24
 800560e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fd90 	bl	8006150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f825 	bl	8005680 <UART_SetConfig>
 8005636:	4603      	mov	r3, r0
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e01b      	b.n	8005678 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800564e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800565e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fe0f 	bl	8006294 <UART_CheckIdleState>
 8005676:	4603      	mov	r3, r0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005684:	b092      	sub	sp, #72	; 0x48
 8005686:	af00      	add	r7, sp, #0
 8005688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	431a      	orrs	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4bbe      	ldr	r3, [pc, #760]	; (80059a8 <UART_SetConfig+0x328>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4ab3      	ldr	r2, [pc, #716]	; (80059ac <UART_SetConfig+0x32c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e8:	4313      	orrs	r3, r2
 80056ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	4baf      	ldr	r3, [pc, #700]	; (80059b0 <UART_SetConfig+0x330>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	f023 010f 	bic.w	r1, r3, #15
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4aa6      	ldr	r2, [pc, #664]	; (80059b4 <UART_SetConfig+0x334>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d177      	bne.n	8005810 <UART_SetConfig+0x190>
 8005720:	4ba5      	ldr	r3, [pc, #660]	; (80059b8 <UART_SetConfig+0x338>)
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005728:	2b28      	cmp	r3, #40	; 0x28
 800572a:	d86d      	bhi.n	8005808 <UART_SetConfig+0x188>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0xb4>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	080057d9 	.word	0x080057d9
 8005738:	08005809 	.word	0x08005809
 800573c:	08005809 	.word	0x08005809
 8005740:	08005809 	.word	0x08005809
 8005744:	08005809 	.word	0x08005809
 8005748:	08005809 	.word	0x08005809
 800574c:	08005809 	.word	0x08005809
 8005750:	08005809 	.word	0x08005809
 8005754:	080057e1 	.word	0x080057e1
 8005758:	08005809 	.word	0x08005809
 800575c:	08005809 	.word	0x08005809
 8005760:	08005809 	.word	0x08005809
 8005764:	08005809 	.word	0x08005809
 8005768:	08005809 	.word	0x08005809
 800576c:	08005809 	.word	0x08005809
 8005770:	08005809 	.word	0x08005809
 8005774:	080057e9 	.word	0x080057e9
 8005778:	08005809 	.word	0x08005809
 800577c:	08005809 	.word	0x08005809
 8005780:	08005809 	.word	0x08005809
 8005784:	08005809 	.word	0x08005809
 8005788:	08005809 	.word	0x08005809
 800578c:	08005809 	.word	0x08005809
 8005790:	08005809 	.word	0x08005809
 8005794:	080057f1 	.word	0x080057f1
 8005798:	08005809 	.word	0x08005809
 800579c:	08005809 	.word	0x08005809
 80057a0:	08005809 	.word	0x08005809
 80057a4:	08005809 	.word	0x08005809
 80057a8:	08005809 	.word	0x08005809
 80057ac:	08005809 	.word	0x08005809
 80057b0:	08005809 	.word	0x08005809
 80057b4:	080057f9 	.word	0x080057f9
 80057b8:	08005809 	.word	0x08005809
 80057bc:	08005809 	.word	0x08005809
 80057c0:	08005809 	.word	0x08005809
 80057c4:	08005809 	.word	0x08005809
 80057c8:	08005809 	.word	0x08005809
 80057cc:	08005809 	.word	0x08005809
 80057d0:	08005809 	.word	0x08005809
 80057d4:	08005801 	.word	0x08005801
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e222      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80057e0:	2304      	movs	r3, #4
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e21e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80057e8:	2308      	movs	r3, #8
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e21a      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80057f0:	2310      	movs	r3, #16
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e216      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80057f8:	2320      	movs	r3, #32
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e212      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005800:	2340      	movs	r3, #64	; 0x40
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e20e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e20a      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a69      	ldr	r2, [pc, #420]	; (80059bc <UART_SetConfig+0x33c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d130      	bne.n	800587c <UART_SetConfig+0x1fc>
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <UART_SetConfig+0x338>)
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	2b05      	cmp	r3, #5
 8005824:	d826      	bhi.n	8005874 <UART_SetConfig+0x1f4>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x1ac>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	08005845 	.word	0x08005845
 8005830:	0800584d 	.word	0x0800584d
 8005834:	08005855 	.word	0x08005855
 8005838:	0800585d 	.word	0x0800585d
 800583c:	08005865 	.word	0x08005865
 8005840:	0800586d 	.word	0x0800586d
 8005844:	2300      	movs	r3, #0
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e1ec      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e1e8      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e1e4      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e1e0      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005864:	2320      	movs	r3, #32
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e1dc      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800586c:	2340      	movs	r3, #64	; 0x40
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e1d8      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e1d4      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4f      	ldr	r2, [pc, #316]	; (80059c0 <UART_SetConfig+0x340>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d130      	bne.n	80058e8 <UART_SetConfig+0x268>
 8005886:	4b4c      	ldr	r3, [pc, #304]	; (80059b8 <UART_SetConfig+0x338>)
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	2b05      	cmp	r3, #5
 8005890:	d826      	bhi.n	80058e0 <UART_SetConfig+0x260>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x218>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058b1 	.word	0x080058b1
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058c1 	.word	0x080058c1
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e1b6      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e1b2      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058c0:	2308      	movs	r3, #8
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e1ae      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e1aa      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058d0:	2320      	movs	r3, #32
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e1a6      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e1a2      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e19e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a35      	ldr	r2, [pc, #212]	; (80059c4 <UART_SetConfig+0x344>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d130      	bne.n	8005954 <UART_SetConfig+0x2d4>
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <UART_SetConfig+0x338>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d826      	bhi.n	800594c <UART_SetConfig+0x2cc>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x284>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	0800591d 	.word	0x0800591d
 8005908:	08005925 	.word	0x08005925
 800590c:	0800592d 	.word	0x0800592d
 8005910:	08005935 	.word	0x08005935
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005945 	.word	0x08005945
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e180      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005924:	2304      	movs	r3, #4
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e17c      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800592c:	2308      	movs	r3, #8
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e178      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005934:	2310      	movs	r3, #16
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e174      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800593c:	2320      	movs	r3, #32
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e170      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e16c      	b.n	8005c26 <UART_SetConfig+0x5a6>
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e168      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <UART_SetConfig+0x348>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d142      	bne.n	80059e4 <UART_SetConfig+0x364>
 800595e:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <UART_SetConfig+0x338>)
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	2b05      	cmp	r3, #5
 8005968:	d838      	bhi.n	80059dc <UART_SetConfig+0x35c>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x2f0>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005989 	.word	0x08005989
 8005974:	08005991 	.word	0x08005991
 8005978:	08005999 	.word	0x08005999
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059cd 	.word	0x080059cd
 8005984:	080059d5 	.word	0x080059d5
 8005988:	2300      	movs	r3, #0
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e14a      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e146      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e142      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e13e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80059a8:	cfff69f3 	.word	0xcfff69f3
 80059ac:	58000c00 	.word	0x58000c00
 80059b0:	11fff4ff 	.word	0x11fff4ff
 80059b4:	40011000 	.word	0x40011000
 80059b8:	58024400 	.word	0x58024400
 80059bc:	40004400 	.word	0x40004400
 80059c0:	40004800 	.word	0x40004800
 80059c4:	40004c00 	.word	0x40004c00
 80059c8:	40005000 	.word	0x40005000
 80059cc:	2320      	movs	r3, #32
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d2:	e128      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059da:	e124      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e2:	e120      	b.n	8005c26 <UART_SetConfig+0x5a6>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4acb      	ldr	r2, [pc, #812]	; (8005d18 <UART_SetConfig+0x698>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d176      	bne.n	8005adc <UART_SetConfig+0x45c>
 80059ee:	4bcb      	ldr	r3, [pc, #812]	; (8005d1c <UART_SetConfig+0x69c>)
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f6:	2b28      	cmp	r3, #40	; 0x28
 80059f8:	d86c      	bhi.n	8005ad4 <UART_SetConfig+0x454>
 80059fa:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <UART_SetConfig+0x380>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005aa5 	.word	0x08005aa5
 8005a04:	08005ad5 	.word	0x08005ad5
 8005a08:	08005ad5 	.word	0x08005ad5
 8005a0c:	08005ad5 	.word	0x08005ad5
 8005a10:	08005ad5 	.word	0x08005ad5
 8005a14:	08005ad5 	.word	0x08005ad5
 8005a18:	08005ad5 	.word	0x08005ad5
 8005a1c:	08005ad5 	.word	0x08005ad5
 8005a20:	08005aad 	.word	0x08005aad
 8005a24:	08005ad5 	.word	0x08005ad5
 8005a28:	08005ad5 	.word	0x08005ad5
 8005a2c:	08005ad5 	.word	0x08005ad5
 8005a30:	08005ad5 	.word	0x08005ad5
 8005a34:	08005ad5 	.word	0x08005ad5
 8005a38:	08005ad5 	.word	0x08005ad5
 8005a3c:	08005ad5 	.word	0x08005ad5
 8005a40:	08005ab5 	.word	0x08005ab5
 8005a44:	08005ad5 	.word	0x08005ad5
 8005a48:	08005ad5 	.word	0x08005ad5
 8005a4c:	08005ad5 	.word	0x08005ad5
 8005a50:	08005ad5 	.word	0x08005ad5
 8005a54:	08005ad5 	.word	0x08005ad5
 8005a58:	08005ad5 	.word	0x08005ad5
 8005a5c:	08005ad5 	.word	0x08005ad5
 8005a60:	08005abd 	.word	0x08005abd
 8005a64:	08005ad5 	.word	0x08005ad5
 8005a68:	08005ad5 	.word	0x08005ad5
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005ad5 	.word	0x08005ad5
 8005a74:	08005ad5 	.word	0x08005ad5
 8005a78:	08005ad5 	.word	0x08005ad5
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ad5 	.word	0x08005ad5
 8005a88:	08005ad5 	.word	0x08005ad5
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005ad5 	.word	0x08005ad5
 8005a94:	08005ad5 	.word	0x08005ad5
 8005a98:	08005ad5 	.word	0x08005ad5
 8005a9c:	08005ad5 	.word	0x08005ad5
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aaa:	e0bc      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005aac:	2304      	movs	r3, #4
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab2:	e0b8      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aba:	e0b4      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac2:	e0b0      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005ac4:	2320      	movs	r3, #32
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aca:	e0ac      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005acc:	2340      	movs	r3, #64	; 0x40
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad2:	e0a8      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ada:	e0a4      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a8f      	ldr	r2, [pc, #572]	; (8005d20 <UART_SetConfig+0x6a0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d130      	bne.n	8005b48 <UART_SetConfig+0x4c8>
 8005ae6:	4b8d      	ldr	r3, [pc, #564]	; (8005d1c <UART_SetConfig+0x69c>)
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d826      	bhi.n	8005b40 <UART_SetConfig+0x4c0>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <UART_SetConfig+0x478>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b11 	.word	0x08005b11
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b21 	.word	0x08005b21
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e086      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e082      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b20:	2308      	movs	r3, #8
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e07e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e07a      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b30:	2320      	movs	r3, #32
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e076      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b38:	2340      	movs	r3, #64	; 0x40
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e072      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e06e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a75      	ldr	r2, [pc, #468]	; (8005d24 <UART_SetConfig+0x6a4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d130      	bne.n	8005bb4 <UART_SetConfig+0x534>
 8005b52:	4b72      	ldr	r3, [pc, #456]	; (8005d1c <UART_SetConfig+0x69c>)
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d826      	bhi.n	8005bac <UART_SetConfig+0x52c>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <UART_SetConfig+0x4e4>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b7d 	.word	0x08005b7d
 8005b68:	08005b85 	.word	0x08005b85
 8005b6c:	08005b8d 	.word	0x08005b8d
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e050      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e04c      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e048      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e044      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e040      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e03c      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e038      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a5b      	ldr	r2, [pc, #364]	; (8005d28 <UART_SetConfig+0x6a8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d130      	bne.n	8005c20 <UART_SetConfig+0x5a0>
 8005bbe:	4b57      	ldr	r3, [pc, #348]	; (8005d1c <UART_SetConfig+0x69c>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d826      	bhi.n	8005c18 <UART_SetConfig+0x598>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x550>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	08005bf9 	.word	0x08005bf9
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	2302      	movs	r3, #2
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e01a      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e016      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e012      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e00e      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e00a      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005c10:	2340      	movs	r3, #64	; 0x40
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e006      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e002      	b.n	8005c26 <UART_SetConfig+0x5a6>
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <UART_SetConfig+0x6a8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	f040 80f8 	bne.w	8005e22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	dc46      	bgt.n	8005cc8 <UART_SetConfig+0x648>
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	f2c0 8082 	blt.w	8005d44 <UART_SetConfig+0x6c4>
 8005c40:	3b02      	subs	r3, #2
 8005c42:	2b1e      	cmp	r3, #30
 8005c44:	d87e      	bhi.n	8005d44 <UART_SetConfig+0x6c4>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x5cc>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005ccf 	.word	0x08005ccf
 8005c50:	08005d45 	.word	0x08005d45
 8005c54:	08005cd7 	.word	0x08005cd7
 8005c58:	08005d45 	.word	0x08005d45
 8005c5c:	08005d45 	.word	0x08005d45
 8005c60:	08005d45 	.word	0x08005d45
 8005c64:	08005ce7 	.word	0x08005ce7
 8005c68:	08005d45 	.word	0x08005d45
 8005c6c:	08005d45 	.word	0x08005d45
 8005c70:	08005d45 	.word	0x08005d45
 8005c74:	08005d45 	.word	0x08005d45
 8005c78:	08005d45 	.word	0x08005d45
 8005c7c:	08005d45 	.word	0x08005d45
 8005c80:	08005d45 	.word	0x08005d45
 8005c84:	08005cf7 	.word	0x08005cf7
 8005c88:	08005d45 	.word	0x08005d45
 8005c8c:	08005d45 	.word	0x08005d45
 8005c90:	08005d45 	.word	0x08005d45
 8005c94:	08005d45 	.word	0x08005d45
 8005c98:	08005d45 	.word	0x08005d45
 8005c9c:	08005d45 	.word	0x08005d45
 8005ca0:	08005d45 	.word	0x08005d45
 8005ca4:	08005d45 	.word	0x08005d45
 8005ca8:	08005d45 	.word	0x08005d45
 8005cac:	08005d45 	.word	0x08005d45
 8005cb0:	08005d45 	.word	0x08005d45
 8005cb4:	08005d45 	.word	0x08005d45
 8005cb8:	08005d45 	.word	0x08005d45
 8005cbc:	08005d45 	.word	0x08005d45
 8005cc0:	08005d45 	.word	0x08005d45
 8005cc4:	08005d37 	.word	0x08005d37
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d037      	beq.n	8005d3c <UART_SetConfig+0x6bc>
 8005ccc:	e03a      	b.n	8005d44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005cce:	f7ff f865 	bl	8004d9c <HAL_RCCEx_GetD3PCLK1Freq>
 8005cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd4:	e03c      	b.n	8005d50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff f874 	bl	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce4:	e034      	b.n	8005d50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ce6:	f107 0318 	add.w	r3, r7, #24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff f9c0 	bl	8005070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf4:	e02c      	b.n	8005d50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <UART_SetConfig+0x69c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <UART_SetConfig+0x69c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	4a07      	ldr	r2, [pc, #28]	; (8005d2c <UART_SetConfig+0x6ac>)
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d14:	e01c      	b.n	8005d50 <UART_SetConfig+0x6d0>
 8005d16:	bf00      	nop
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	40007800 	.word	0x40007800
 8005d24:	40007c00 	.word	0x40007c00
 8005d28:	58000c00 	.word	0x58000c00
 8005d2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d30:	4b9d      	ldr	r3, [pc, #628]	; (8005fa8 <UART_SetConfig+0x928>)
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d34:	e00c      	b.n	8005d50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d36:	4b9d      	ldr	r3, [pc, #628]	; (8005fac <UART_SetConfig+0x92c>)
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3a:	e009      	b.n	8005d50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d42:	e005      	b.n	8005d50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 81de 	beq.w	8006114 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	4a94      	ldr	r2, [pc, #592]	; (8005fb0 <UART_SetConfig+0x930>)
 8005d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d305      	bcc.n	8005d88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d903      	bls.n	8005d90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d8e:	e1c1      	b.n	8006114 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d92:	2200      	movs	r2, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	60fa      	str	r2, [r7, #12]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	4a84      	ldr	r2, [pc, #528]	; (8005fb0 <UART_SetConfig+0x930>)
 8005d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2200      	movs	r2, #0
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005db2:	f7fa fa91 	bl	80002d8 <__aeabi_uldivmod>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	020b      	lsls	r3, r1, #8
 8005dc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dcc:	0202      	lsls	r2, r0, #8
 8005dce:	6979      	ldr	r1, [r7, #20]
 8005dd0:	6849      	ldr	r1, [r1, #4]
 8005dd2:	0849      	lsrs	r1, r1, #1
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	4605      	mov	r5, r0
 8005dda:	eb12 0804 	adds.w	r8, r2, r4
 8005dde:	eb43 0905 	adc.w	r9, r3, r5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	469a      	mov	sl, r3
 8005dea:	4693      	mov	fp, r2
 8005dec:	4652      	mov	r2, sl
 8005dee:	465b      	mov	r3, fp
 8005df0:	4640      	mov	r0, r8
 8005df2:	4649      	mov	r1, r9
 8005df4:	f7fa fa70 	bl	80002d8 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e06:	d308      	bcc.n	8005e1a <UART_SetConfig+0x79a>
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e0e:	d204      	bcs.n	8005e1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e17c      	b.n	8006114 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e20:	e178      	b.n	8006114 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2a:	f040 80c5 	bne.w	8005fb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	dc48      	bgt.n	8005ec8 <UART_SetConfig+0x848>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	db7b      	blt.n	8005f32 <UART_SetConfig+0x8b2>
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d879      	bhi.n	8005f32 <UART_SetConfig+0x8b2>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x7c4>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005ecf 	.word	0x08005ecf
 8005e48:	08005ed7 	.word	0x08005ed7
 8005e4c:	08005f33 	.word	0x08005f33
 8005e50:	08005f33 	.word	0x08005f33
 8005e54:	08005edf 	.word	0x08005edf
 8005e58:	08005f33 	.word	0x08005f33
 8005e5c:	08005f33 	.word	0x08005f33
 8005e60:	08005f33 	.word	0x08005f33
 8005e64:	08005eef 	.word	0x08005eef
 8005e68:	08005f33 	.word	0x08005f33
 8005e6c:	08005f33 	.word	0x08005f33
 8005e70:	08005f33 	.word	0x08005f33
 8005e74:	08005f33 	.word	0x08005f33
 8005e78:	08005f33 	.word	0x08005f33
 8005e7c:	08005f33 	.word	0x08005f33
 8005e80:	08005f33 	.word	0x08005f33
 8005e84:	08005eff 	.word	0x08005eff
 8005e88:	08005f33 	.word	0x08005f33
 8005e8c:	08005f33 	.word	0x08005f33
 8005e90:	08005f33 	.word	0x08005f33
 8005e94:	08005f33 	.word	0x08005f33
 8005e98:	08005f33 	.word	0x08005f33
 8005e9c:	08005f33 	.word	0x08005f33
 8005ea0:	08005f33 	.word	0x08005f33
 8005ea4:	08005f33 	.word	0x08005f33
 8005ea8:	08005f33 	.word	0x08005f33
 8005eac:	08005f33 	.word	0x08005f33
 8005eb0:	08005f33 	.word	0x08005f33
 8005eb4:	08005f33 	.word	0x08005f33
 8005eb8:	08005f33 	.word	0x08005f33
 8005ebc:	08005f33 	.word	0x08005f33
 8005ec0:	08005f33 	.word	0x08005f33
 8005ec4:	08005f25 	.word	0x08005f25
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d02e      	beq.n	8005f2a <UART_SetConfig+0x8aa>
 8005ecc:	e031      	b.n	8005f32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ece:	f7fd fd2f 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8005ed2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ed4:	e033      	b.n	8005f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed6:	f7fd fd41 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8005eda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005edc:	e02f      	b.n	8005f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe ff70 	bl	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eec:	e027      	b.n	8005f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eee:	f107 0318 	add.w	r3, r7, #24
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff f8bc 	bl	8005070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005efc:	e01f      	b.n	8005f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005efe:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <UART_SetConfig+0x934>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <UART_SetConfig+0x934>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <UART_SetConfig+0x928>)
 8005f16:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f1c:	e00f      	b.n	8005f3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f1e:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <UART_SetConfig+0x928>)
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f22:	e00c      	b.n	8005f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f24:	4b21      	ldr	r3, [pc, #132]	; (8005fac <UART_SetConfig+0x92c>)
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f28:	e009      	b.n	8005f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f30:	e005      	b.n	8005f3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80e7 	beq.w	8006114 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <UART_SetConfig+0x930>)
 8005f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f58:	005a      	lsls	r2, r3, #1
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	441a      	add	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d916      	bls.n	8005fa0 <UART_SetConfig+0x920>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d212      	bcs.n	8005fa0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f023 030f 	bic.w	r3, r3, #15
 8005f82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f92:	4313      	orrs	r3, r2
 8005f94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	e0b9      	b.n	8006114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005fa6:	e0b5      	b.n	8006114 <UART_SetConfig+0xa94>
 8005fa8:	03d09000 	.word	0x03d09000
 8005fac:	003d0900 	.word	0x003d0900
 8005fb0:	08006e28 	.word	0x08006e28
 8005fb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	dc49      	bgt.n	8006054 <UART_SetConfig+0x9d4>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db7c      	blt.n	80060be <UART_SetConfig+0xa3e>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d87a      	bhi.n	80060be <UART_SetConfig+0xa3e>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x950>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	0800605b 	.word	0x0800605b
 8005fd4:	08006063 	.word	0x08006063
 8005fd8:	080060bf 	.word	0x080060bf
 8005fdc:	080060bf 	.word	0x080060bf
 8005fe0:	0800606b 	.word	0x0800606b
 8005fe4:	080060bf 	.word	0x080060bf
 8005fe8:	080060bf 	.word	0x080060bf
 8005fec:	080060bf 	.word	0x080060bf
 8005ff0:	0800607b 	.word	0x0800607b
 8005ff4:	080060bf 	.word	0x080060bf
 8005ff8:	080060bf 	.word	0x080060bf
 8005ffc:	080060bf 	.word	0x080060bf
 8006000:	080060bf 	.word	0x080060bf
 8006004:	080060bf 	.word	0x080060bf
 8006008:	080060bf 	.word	0x080060bf
 800600c:	080060bf 	.word	0x080060bf
 8006010:	0800608b 	.word	0x0800608b
 8006014:	080060bf 	.word	0x080060bf
 8006018:	080060bf 	.word	0x080060bf
 800601c:	080060bf 	.word	0x080060bf
 8006020:	080060bf 	.word	0x080060bf
 8006024:	080060bf 	.word	0x080060bf
 8006028:	080060bf 	.word	0x080060bf
 800602c:	080060bf 	.word	0x080060bf
 8006030:	080060bf 	.word	0x080060bf
 8006034:	080060bf 	.word	0x080060bf
 8006038:	080060bf 	.word	0x080060bf
 800603c:	080060bf 	.word	0x080060bf
 8006040:	080060bf 	.word	0x080060bf
 8006044:	080060bf 	.word	0x080060bf
 8006048:	080060bf 	.word	0x080060bf
 800604c:	080060bf 	.word	0x080060bf
 8006050:	080060b1 	.word	0x080060b1
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d02e      	beq.n	80060b6 <UART_SetConfig+0xa36>
 8006058:	e031      	b.n	80060be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800605a:	f7fd fc69 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800605e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006060:	e033      	b.n	80060ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006062:	f7fd fc7b 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8006066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006068:	e02f      	b.n	80060ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe feaa 	bl	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006078:	e027      	b.n	80060ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fff6 	bl	8005070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006088:	e01f      	b.n	80060ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800608a:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <UART_SetConfig+0xac0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006096:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <UART_SetConfig+0xac0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	08db      	lsrs	r3, r3, #3
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	4a28      	ldr	r2, [pc, #160]	; (8006144 <UART_SetConfig+0xac4>)
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060a8:	e00f      	b.n	80060ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80060aa:	4b26      	ldr	r3, [pc, #152]	; (8006144 <UART_SetConfig+0xac4>)
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ae:	e00c      	b.n	80060ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <UART_SetConfig+0xac8>)
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b4:	e009      	b.n	80060ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060bc:	e005      	b.n	80060ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060c8:	bf00      	nop
    }

    if (pclk != 0U)
 80060ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d021      	beq.n	8006114 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <UART_SetConfig+0xacc>)
 80060d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060da:	461a      	mov	r2, r3
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	fbb3 f2f2 	udiv	r2, r3, r2
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	441a      	add	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d909      	bls.n	800610e <UART_SetConfig+0xa8e>
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d205      	bcs.n	800610e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	b29a      	uxth	r2, r3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60da      	str	r2, [r3, #12]
 800610c:	e002      	b.n	8006114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2201      	movs	r2, #1
 8006118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2201      	movs	r2, #1
 8006120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006130:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006134:	4618      	mov	r0, r3
 8006136:	3748      	adds	r7, #72	; 0x48
 8006138:	46bd      	mov	sp, r7
 800613a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
 8006144:	03d09000 	.word	0x03d09000
 8006148:	003d0900 	.word	0x003d0900
 800614c:	08006e28 	.word	0x08006e28

08006150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624e:	d10a      	bne.n	8006266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b098      	sub	sp, #96	; 0x60
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a4:	f7fb f998 	bl	80015d8 <HAL_GetTick>
 80062a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d12f      	bne.n	8006318 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f88e 	bl	80063e8 <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d022      	beq.n	8006318 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e6:	653b      	str	r3, [r7, #80]	; 0x50
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
 80062f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e6      	bne.n	80062d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e063      	b.n	80063e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b04      	cmp	r3, #4
 8006324:	d149      	bne.n	80063ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006326:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632e:	2200      	movs	r2, #0
 8006330:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f857 	bl	80063e8 <UART_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d03c      	beq.n	80063ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	623b      	str	r3, [r7, #32]
   return(result);
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e6      	bne.n	8006340 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60fb      	str	r3, [r7, #12]
   return(result);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006392:	61fa      	str	r2, [r7, #28]
 8006394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	617b      	str	r3, [r7, #20]
   return(result);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e012      	b.n	80063e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3758      	adds	r7, #88	; 0x58
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f8:	e04f      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006400:	d04b      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006402:	f7fb f8e9 	bl	80015d8 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <UART_WaitOnFlagUntilTimeout+0x30>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e04e      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d037      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d034      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d031      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b08      	cmp	r3, #8
 8006442:	d110      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2208      	movs	r2, #8
 800644a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f839 	bl	80064c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2208      	movs	r2, #8
 8006456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e029      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006474:	d111      	bne.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800647e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f81f 	bl	80064c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e00f      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d0a0      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b095      	sub	sp, #84	; 0x54
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ea:	643b      	str	r3, [r7, #64]	; 0x40
 80064ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	61fb      	str	r3, [r7, #28]
   return(result);
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	4b1e      	ldr	r3, [pc, #120]	; (800658c <UART_EndRxTransfer+0xc8>)
 8006512:	4013      	ands	r3, r2
 8006514:	64bb      	str	r3, [r7, #72]	; 0x48
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006536:	2b01      	cmp	r3, #1
 8006538:	d118      	bne.n	800656c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	60bb      	str	r3, [r7, #8]
   return(result);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	647b      	str	r3, [r7, #68]	; 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	613b      	str	r3, [r7, #16]
   return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006580:	bf00      	nop
 8006582:	3754      	adds	r7, #84	; 0x54
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	effffffe 	.word	0xeffffffe

08006590 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e027      	b.n	80065f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2224      	movs	r2, #36	; 0x24
 80065b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006616:	2302      	movs	r3, #2
 8006618:	e02d      	b.n	8006676 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	; 0x24
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f850 	bl	80066fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006692:	2302      	movs	r3, #2
 8006694:	e02d      	b.n	80066f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2224      	movs	r2, #36	; 0x24
 80066a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f812 	bl	80066fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006708:	2b00      	cmp	r3, #0
 800670a:	d108      	bne.n	800671e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800671c:	e031      	b.n	8006782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800671e:	2310      	movs	r3, #16
 8006720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006722:	2310      	movs	r3, #16
 8006724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	0e5b      	lsrs	r3, r3, #25
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0f5b      	lsrs	r3, r3, #29
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	7b3a      	ldrb	r2, [r7, #12]
 800674a:	4911      	ldr	r1, [pc, #68]	; (8006790 <UARTEx_SetNbDataToProcess+0x94>)
 800674c:	5c8a      	ldrb	r2, [r1, r2]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006752:	7b3a      	ldrb	r2, [r7, #12]
 8006754:	490f      	ldr	r1, [pc, #60]	; (8006794 <UARTEx_SetNbDataToProcess+0x98>)
 8006756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006758:	fb93 f3f2 	sdiv	r3, r3, r2
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	7b7a      	ldrb	r2, [r7, #13]
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <UARTEx_SetNbDataToProcess+0x94>)
 800676a:	5c8a      	ldrb	r2, [r1, r2]
 800676c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006770:	7b7a      	ldrb	r2, [r7, #13]
 8006772:	4908      	ldr	r1, [pc, #32]	; (8006794 <UARTEx_SetNbDataToProcess+0x98>)
 8006774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006776:	fb93 f3f2 	sdiv	r3, r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	08006e40 	.word	0x08006e40
 8006794:	08006e48 	.word	0x08006e48

08006798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006798:	b084      	sub	sp, #16
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	f107 001c 	add.w	r0, r7, #28
 80067a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d121      	bne.n	80067f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	4b2c      	ldr	r3, [pc, #176]	; (8006874 <USB_CoreInit+0xdc>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d105      	bne.n	80067ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 faaa 	bl	8006d44 <USB_CoreReset>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e01b      	b.n	800682e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa9e 	bl	8006d44 <USB_CoreReset>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800680c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
 8006820:	e005      	b.n	800682e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800682e:	7fbb      	ldrb	r3, [r7, #30]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d116      	bne.n	8006862 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <USB_CoreInit+0xe0>)
 8006844:	4313      	orrs	r3, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f043 0206 	orr.w	r2, r3, #6
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686e:	b004      	add	sp, #16
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	ffbdffbf 	.word	0xffbdffbf
 8006878:	03ee0000 	.word	0x03ee0000

0800687c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f023 0201 	bic.w	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d115      	bne.n	80068ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068cc:	200a      	movs	r0, #10
 80068ce:	f7fa fe8f 	bl	80015f0 <HAL_Delay>
      ms += 10U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	330a      	adds	r3, #10
 80068d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa25 	bl	8006d28 <USB_GetMode>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d01e      	beq.n	8006922 <USB_SetCurrentMode+0x84>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2bc7      	cmp	r3, #199	; 0xc7
 80068e8:	d9f0      	bls.n	80068cc <USB_SetCurrentMode+0x2e>
 80068ea:	e01a      	b.n	8006922 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d115      	bne.n	800691e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068fe:	200a      	movs	r0, #10
 8006900:	f7fa fe76 	bl	80015f0 <HAL_Delay>
      ms += 10U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	330a      	adds	r3, #10
 8006908:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa0c 	bl	8006d28 <USB_GetMode>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <USB_SetCurrentMode+0x84>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2bc7      	cmp	r3, #199	; 0xc7
 800691a:	d9f0      	bls.n	80068fe <USB_SetCurrentMode+0x60>
 800691c:	e001      	b.n	8006922 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e005      	b.n	800692e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2bc8      	cmp	r3, #200	; 0xc8
 8006926:	d101      	bne.n	800692c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006938:	b084      	sub	sp, #16
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	e009      	b.n	800696c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3340      	adds	r3, #64	; 0x40
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	2200      	movs	r2, #0
 8006964:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3301      	adds	r3, #1
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b0e      	cmp	r3, #14
 8006970:	d9f2      	bls.n	8006958 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006972:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11c      	bne.n	80069b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e005      	b.n	80069c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069c6:	461a      	mov	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10d      	bne.n	80069f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f968 	bl	8006cb4 <USB_SetDevSpeed>
 80069e4:	e008      	b.n	80069f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069e6:	2101      	movs	r1, #1
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f963 	bl	8006cb4 <USB_SetDevSpeed>
 80069ee:	e003      	b.n	80069f8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069f0:	2103      	movs	r1, #3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f95e 	bl	8006cb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069f8:	2110      	movs	r1, #16
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8fa 	bl	8006bf4 <USB_FlushTxFifo>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f924 	bl	8006c58 <USB_FlushRxFifo>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	461a      	mov	r2, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	e043      	b.n	8006acc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5a:	d118      	bne.n	8006a8e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e013      	b.n	8006aa0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	461a      	mov	r2, r3
 8006a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e008      	b.n	8006aa0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d3b5      	bcc.n	8006a44 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	e043      	b.n	8006b66 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af4:	d118      	bne.n	8006b28 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	e013      	b.n	8006b3a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e008      	b.n	8006b3a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	461a      	mov	r2, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d3b5      	bcc.n	8006ade <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f043 0210 	orr.w	r2, r3, #16
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <USB_DevInit+0x2b4>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f043 0208 	orr.w	r2, r3, #8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d105      	bne.n	8006bdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <USB_DevInit+0x2b8>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	803c3800 	.word	0x803c3800
 8006bf0:	40000004 	.word	0x40000004

08006bf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c0e:	d901      	bls.n	8006c14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e01b      	b.n	8006c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	daf2      	bge.n	8006c02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	019b      	lsls	r3, r3, #6
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c38:	d901      	bls.n	8006c3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e006      	b.n	8006c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d0f0      	beq.n	8006c2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c70:	d901      	bls.n	8006c76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e018      	b.n	8006ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	daf2      	bge.n	8006c64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2210      	movs	r2, #16
 8006c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c94:	d901      	bls.n	8006c9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e006      	b.n	8006ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d0f0      	beq.n	8006c88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d00:	f023 0303 	bic.w	r3, r3, #3
 8006d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d14:	f043 0302 	orr.w	r3, r3, #2
 8006d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f003 0301 	and.w	r3, r3, #1
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d5c:	d901      	bls.n	8006d62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e01b      	b.n	8006d9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	daf2      	bge.n	8006d50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d86:	d901      	bls.n	8006d8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e006      	b.n	8006d9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d0f0      	beq.n	8006d7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4d0d      	ldr	r5, [pc, #52]	; (8006de0 <__libc_init_array+0x38>)
 8006dac:	4c0d      	ldr	r4, [pc, #52]	; (8006de4 <__libc_init_array+0x3c>)
 8006dae:	1b64      	subs	r4, r4, r5
 8006db0:	10a4      	asrs	r4, r4, #2
 8006db2:	2600      	movs	r6, #0
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	4d0b      	ldr	r5, [pc, #44]	; (8006de8 <__libc_init_array+0x40>)
 8006dba:	4c0c      	ldr	r4, [pc, #48]	; (8006dec <__libc_init_array+0x44>)
 8006dbc:	f000 f820 	bl	8006e00 <_init>
 8006dc0:	1b64      	subs	r4, r4, r5
 8006dc2:	10a4      	asrs	r4, r4, #2
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	08006e58 	.word	0x08006e58
 8006de4:	08006e58 	.word	0x08006e58
 8006de8:	08006e58 	.word	0x08006e58
 8006dec:	08006e5c 	.word	0x08006e5c

08006df0 <memset>:
 8006df0:	4402      	add	r2, r0
 8006df2:	4603      	mov	r3, r0
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d100      	bne.n	8006dfa <memset+0xa>
 8006df8:	4770      	bx	lr
 8006dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfe:	e7f9      	b.n	8006df4 <memset+0x4>

08006e00 <_init>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr

08006e0c <_fini>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr
