
twoBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d5c  08002d5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d5c  08002d5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002d70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002d70  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093c4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001888  00000000  00000000  000293f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010da6  00000000  00000000  0002b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009461  00000000  00000000  0003c73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064fd9  00000000  00000000  00045b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aab78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d4  00000000  00000000  000aabc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d0c 	.word	0x08002d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d0c 	.word	0x08002d0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart1,'h' , 1, 1000);
 800022c:	23fa      	movs	r3, #250	; 0xfa
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4807      	ldr	r0, [pc, #28]	; (8000250 <HAL_GPIO_EXTI_Callback+0x30>)
 8000232:	2201      	movs	r2, #1
 8000234:	2168      	movs	r1, #104	; 0x68
 8000236:	f001 fb27 	bl	8001888 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	4a05      	ldr	r2, [pc, #20]	; (8000254 <HAL_GPIO_EXTI_Callback+0x34>)
 8000240:	0019      	movs	r1, r3
 8000242:	0010      	movs	r0, r2
 8000244:	f000 fd59 	bl	8000cfa <HAL_GPIO_TogglePin>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000028 	.word	0x20000028
 8000254:	48000800 	.word	0x48000800

08000258 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000260:	4908      	ldr	r1, [pc, #32]	; (8000284 <HAL_UART_RxCpltCallback+0x2c>)
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <HAL_UART_RxCpltCallback+0x30>)
 8000264:	2201      	movs	r2, #1
 8000266:	0018      	movs	r0, r3
 8000268:	f001 fbae 	bl	80019c8 <HAL_UART_Receive_IT>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <HAL_UART_RxCpltCallback+0x34>)
 8000272:	0019      	movs	r1, r3
 8000274:	0010      	movs	r0, r2
 8000276:	f000 fd40 	bl	8000cfa <HAL_GPIO_TogglePin>

}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	200000b0 	.word	0x200000b0
 8000288:	20000028 	.word	0x20000028
 800028c:	48000800 	.word	0x48000800

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 f9e4 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f810 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f8a0 	bl	80003e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a0:	f000 f86e 	bl	8000380 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80002a4:	4903      	ldr	r1, [pc, #12]	; (80002b4 <main+0x24>)
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <main+0x28>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fb8c 	bl	80019c8 <HAL_UART_Receive_IT>
 80002b0:	e7f8      	b.n	80002a4 <main+0x14>
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	200000b0 	.word	0x200000b0
 80002b8:	20000028 	.word	0x20000028

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b097      	sub	sp, #92	; 0x5c
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2428      	movs	r4, #40	; 0x28
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2330      	movs	r3, #48	; 0x30
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f002 fd15 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	2318      	movs	r3, #24
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 fd0d 	bl	8002cfc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	2314      	movs	r3, #20
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 fd06 	bl	8002cfc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	0392      	lsls	r2, r2, #14
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fd21 	bl	8000d68 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800032a:	f000 f8bd 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	2118      	movs	r1, #24
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2202      	movs	r2, #2
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2101      	movs	r1, #1
 800034c:	0018      	movs	r0, r3
 800034e:	f001 f825 	bl	800139c <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000356:	f000 f8a7 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2201      	movs	r2, #1
 800035e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f95b 	bl	8001624 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000372:	f000 f899 	bl	80004a8 <Error_Handler>
  }
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b017      	add	sp, #92	; 0x5c
 800037c:	bd90      	pop	{r4, r7, pc}
	...

08000380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 8000386:	4a15      	ldr	r2, [pc, #84]	; (80003dc <MX_USART1_UART_Init+0x5c>)
 8000388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800038a:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 800038c:	2296      	movs	r2, #150	; 0x96
 800038e:	0212      	lsls	r2, r2, #8
 8000390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <MX_USART1_UART_Init+0x58>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fa0b 	bl	80017e0 <HAL_UART_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ce:	f000 f86b 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40013800 	.word	0x40013800

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b089      	sub	sp, #36	; 0x24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	240c      	movs	r4, #12
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	0018      	movs	r0, r3
 80003ec:	2314      	movs	r3, #20
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f002 fc83 	bl	8002cfc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <MX_GPIO_Init+0xc0>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <MX_GPIO_Init+0xc0>)
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <MX_GPIO_Init+0xc0>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	4013      	ands	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <MX_GPIO_Init+0xc0>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_GPIO_Init+0xc0>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0309      	lsls	r1, r1, #12
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_GPIO_Init+0xc0>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	031b      	lsls	r3, r3, #12
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800042e:	23c0      	movs	r3, #192	; 0xc0
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	481c      	ldr	r0, [pc, #112]	; (80004a4 <MX_GPIO_Init+0xc4>)
 8000434:	2200      	movs	r2, #0
 8000436:	0019      	movs	r1, r3
 8000438:	f000 fc42 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2288      	movs	r2, #136	; 0x88
 8000446:	0352      	lsls	r2, r2, #13
 8000448:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	193a      	adds	r2, r7, r4
 8000452:	2390      	movs	r3, #144	; 0x90
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fac1 	bl	80009e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800045e:	0021      	movs	r1, r4
 8000460:	187b      	adds	r3, r7, r1
 8000462:	22c0      	movs	r2, #192	; 0xc0
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2201      	movs	r2, #1
 800046c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047a:	187b      	adds	r3, r7, r1
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <MX_GPIO_Init+0xc4>)
 800047e:	0019      	movs	r1, r3
 8000480:	0010      	movs	r0, r2
 8000482:	f000 faad 	bl	80009e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	2005      	movs	r0, #5
 800048c:	f000 f9f8 	bl	8000880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000490:	2005      	movs	r0, #5
 8000492:	f000 fa0a 	bl	80008aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b009      	add	sp, #36	; 0x24
 800049c:	bd90      	pop	{r4, r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000800 	.word	0x48000800

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	69da      	ldr	r2, [r3, #28]
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0549      	lsls	r1, r1, #21
 80004dc:	430a      	orrs	r2, r1
 80004de:	61da      	str	r2, [r3, #28]
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_MspInit+0x44>)
 80004e2:	69da      	ldr	r2, [r3, #28]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	055b      	lsls	r3, r3, #21
 80004e8:	4013      	ands	r3, r2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b08b      	sub	sp, #44	; 0x2c
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	2414      	movs	r4, #20
 8000506:	193b      	adds	r3, r7, r4
 8000508:	0018      	movs	r0, r3
 800050a:	2314      	movs	r3, #20
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f002 fbf4 	bl	8002cfc <memset>
  if(huart->Instance==USART1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <HAL_UART_MspInit+0xa4>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d13b      	bne.n	8000596 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <HAL_UART_MspInit+0xa8>)
 8000520:	699a      	ldr	r2, [r3, #24]
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <HAL_UART_MspInit+0xa8>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	01c9      	lsls	r1, r1, #7
 8000528:	430a      	orrs	r2, r1
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <HAL_UART_MspInit+0xa8>)
 800052e:	699a      	ldr	r2, [r3, #24]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	01db      	lsls	r3, r3, #7
 8000534:	4013      	ands	r3, r2
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <HAL_UART_MspInit+0xa8>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <HAL_UART_MspInit+0xa8>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0289      	lsls	r1, r1, #10
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <HAL_UART_MspInit+0xa8>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	029b      	lsls	r3, r3, #10
 8000550:	4013      	ands	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	22c0      	movs	r2, #192	; 0xc0
 800055a:	00d2      	lsls	r2, r2, #3
 800055c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	0021      	movs	r1, r4
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2202      	movs	r2, #2
 8000564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2203      	movs	r2, #3
 8000570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	187a      	adds	r2, r7, r1
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fa2d 	bl	80009e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	201b      	movs	r0, #27
 800058c:	f000 f978 	bl	8000880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000590:	201b      	movs	r0, #27
 8000592:	f000 f98a 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00b      	add	sp, #44	; 0x2c
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40013800 	.word	0x40013800
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f890 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fba8 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <USART1_IRQHandler+0x14>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fa42 	bl	8001a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000028 	.word	0x20000028

08000600 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000610:	f7ff fff6 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f002 fb3b 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fe27 	bl	8000290 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000650:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000658:	20000118 	.word	0x20000118

0800065c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_COMP_IRQHandler>
	...

08000660 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_Init+0x24>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_Init+0x24>)
 800066a:	2110      	movs	r1, #16
 800066c:	430a      	orrs	r2, r1
 800066e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f809 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000676:	f7ff ff1d 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_InitTick+0x5c>)
 8000692:	681c      	ldr	r4, [r3, #0]
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_InitTick+0x60>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	0019      	movs	r1, r3
 800069a:	23fa      	movs	r3, #250	; 0xfa
 800069c:	0098      	lsls	r0, r3, #2
 800069e:	f7ff fd33 	bl	8000108 <__udivsi3>
 80006a2:	0003      	movs	r3, r0
 80006a4:	0019      	movs	r1, r3
 80006a6:	0020      	movs	r0, r4
 80006a8:	f7ff fd2e 	bl	8000108 <__udivsi3>
 80006ac:	0003      	movs	r3, r0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f90b 	bl	80008ca <HAL_SYSTICK_Config>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e00f      	b.n	80006dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d80b      	bhi.n	80006da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f8d8 	bl	8000880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_InitTick+0x64>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b003      	add	sp, #12
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	18d2      	adds	r2, r2, r3
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000008 	.word	0x20000008
 8000710:	20000114 	.word	0x20000114

08000714 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000114 	.word	0x20000114

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b7f      	cmp	r3, #127	; 0x7f
 800073a:	d809      	bhi.n	8000750 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	001a      	movs	r2, r3
 8000742:	231f      	movs	r3, #31
 8000744:	401a      	ands	r2, r3
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_EnableIRQ+0x30>)
 8000748:	2101      	movs	r1, #1
 800074a:	4091      	lsls	r1, r2
 800074c:	000a      	movs	r2, r1
 800074e:	601a      	str	r2, [r3, #0]
  }
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b7f      	cmp	r3, #127	; 0x7f
 8000770:	d828      	bhi.n	80007c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <__NVIC_SetPriority+0xd4>)
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	33c0      	adds	r3, #192	; 0xc0
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	589b      	ldr	r3, [r3, r2]
 8000782:	1dfa      	adds	r2, r7, #7
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	0011      	movs	r1, r2
 8000788:	2203      	movs	r2, #3
 800078a:	400a      	ands	r2, r1
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	21ff      	movs	r1, #255	; 0xff
 8000790:	4091      	lsls	r1, r2
 8000792:	000a      	movs	r2, r1
 8000794:	43d2      	mvns	r2, r2
 8000796:	401a      	ands	r2, r3
 8000798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	401a      	ands	r2, r3
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	0018      	movs	r0, r3
 80007a8:	2303      	movs	r3, #3
 80007aa:	4003      	ands	r3, r0
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b0:	481f      	ldr	r0, [pc, #124]	; (8000830 <__NVIC_SetPriority+0xd4>)
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	089b      	lsrs	r3, r3, #2
 80007ba:	430a      	orrs	r2, r1
 80007bc:	33c0      	adds	r3, #192	; 0xc0
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007c2:	e031      	b.n	8000828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <__NVIC_SetPriority+0xd8>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0019      	movs	r1, r3
 80007cc:	230f      	movs	r3, #15
 80007ce:	400b      	ands	r3, r1
 80007d0:	3b08      	subs	r3, #8
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	3306      	adds	r3, #6
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	3304      	adds	r3, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	; 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <__NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	001c      	movs	r4, r3
 8000814:	230f      	movs	r3, #15
 8000816:	4023      	ands	r3, r4
 8000818:	3b08      	subs	r3, #8
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	430a      	orrs	r2, r1
 800081e:	3306      	adds	r3, #6
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	18c3      	adds	r3, r0, r3
 8000824:	3304      	adds	r3, #4
 8000826:	601a      	str	r2, [r3, #0]
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b003      	add	sp, #12
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	045b      	lsls	r3, r3, #17
 8000848:	429a      	cmp	r2, r3
 800084a:	d301      	bcc.n	8000850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084c:	2301      	movs	r3, #1
 800084e:	e010      	b.n	8000872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <SysTick_Config+0x44>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	3a01      	subs	r2, #1
 8000856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2103      	movs	r1, #3
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff7c 	bl	800075c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x44>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	210f      	movs	r1, #15
 800088c:	187b      	adds	r3, r7, r1
 800088e:	1c02      	adds	r2, r0, #0
 8000890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	187b      	adds	r3, r7, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff5d 	bl	800075c <__NVIC_SetPriority>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	0002      	movs	r2, r0
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff33 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffaf 	bl	8000838 <SysTick_Config>
 80008da:	0003      	movs	r3, r0
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2221      	movs	r2, #33	; 0x21
 80008f0:	5c9b      	ldrb	r3, [r3, r2]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d008      	beq.n	800090a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2204      	movs	r2, #4
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2220      	movs	r2, #32
 8000902:	2100      	movs	r1, #0
 8000904:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e020      	b.n	800094c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	210e      	movs	r1, #14
 8000916:	438a      	bics	r2, r1
 8000918:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2101      	movs	r1, #1
 8000926:	438a      	bics	r2, r1
 8000928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000932:	2101      	movs	r1, #1
 8000934:	4091      	lsls	r1, r2
 8000936:	000a      	movs	r2, r1
 8000938:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2221      	movs	r2, #33	; 0x21
 800093e:	2101      	movs	r1, #1
 8000940:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800095c:	210f      	movs	r1, #15
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2221      	movs	r2, #33	; 0x21
 8000968:	5c9b      	ldrb	r3, [r3, r2]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b02      	cmp	r3, #2
 800096e:	d006      	beq.n	800097e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2204      	movs	r2, #4
 8000974:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e028      	b.n	80009d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	210e      	movs	r1, #14
 800098a:	438a      	bics	r2, r1
 800098c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	438a      	bics	r2, r1
 800099c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a6:	2101      	movs	r1, #1
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2221      	movs	r2, #33	; 0x21
 80009b2:	2101      	movs	r1, #1
 80009b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d004      	beq.n	80009d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	0010      	movs	r0, r2
 80009ce:	4798      	blx	r3
    }
  }
  return status;
 80009d0:	230f      	movs	r3, #15
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	781b      	ldrb	r3, [r3, #0]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e14f      	b.n	8000c90 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <HAL_GPIO_Init+0x28>
 8000a06:	e140      	b.n	8000c8a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d005      	beq.n	8000a20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2203      	movs	r2, #3
 8000a1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d130      	bne.n	8000a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	0013      	movs	r3, r2
 8000a30:	43da      	mvns	r2, r3
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	409a      	lsls	r2, r3
 8000a42:	0013      	movs	r3, r2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a56:	2201      	movs	r2, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d017      	beq.n	8000abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d123      	bne.n	8000b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	58d3      	ldr	r3, [r2, r3]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2207      	movs	r2, #7
 8000adc:	4013      	ands	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	2107      	movs	r1, #7
 8000af6:	400b      	ands	r3, r1
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	08da      	lsrs	r2, r3, #3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	6939      	ldr	r1, [r7, #16]
 8000b10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2203      	movs	r2, #3
 8000b30:	401a      	ands	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	029b      	lsls	r3, r3, #10
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d100      	bne.n	8000b54 <HAL_GPIO_Init+0x174>
 8000b52:	e09a      	b.n	8000c8a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	4b54      	ldr	r3, [pc, #336]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	619a      	str	r2, [r3, #24]
 8000b60:	4b51      	ldr	r3, [pc, #324]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4013      	ands	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b6c:	4a4f      	ldr	r2, [pc, #316]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	589b      	ldr	r3, [r3, r2]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	409a      	lsls	r2, r3
 8000b86:	0013      	movs	r3, r2
 8000b88:	43da      	mvns	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	2390      	movs	r3, #144	; 0x90
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x1de>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <HAL_GPIO_Init+0x2d4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x1da>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a42      	ldr	r2, [pc, #264]	; (8000cb8 <HAL_GPIO_Init+0x2d8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x1d6>
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	400a      	ands	r2, r1
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd4:	4935      	ldr	r1, [pc, #212]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	035b      	lsls	r3, r3, #13
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43da      	mvns	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	039b      	lsls	r3, r3, #14
 8000c24:	4013      	ands	r3, r2
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	029b      	lsls	r3, r3, #10
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	40da      	lsrs	r2, r3
 8000c98:	1e13      	subs	r3, r2, #0
 8000c9a:	d000      	beq.n	8000c9e <HAL_GPIO_Init+0x2be>
 8000c9c:	e6a8      	b.n	80009f0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b006      	add	sp, #24
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	0008      	movs	r0, r1
 8000cca:	0011      	movs	r1, r2
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	1c0a      	adds	r2, r1, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd8:	1c7b      	adds	r3, r7, #1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	1cbb      	adds	r3, r7, #2
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	000a      	movs	r2, r1
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0e:	1cbb      	adds	r3, r7, #2
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4013      	ands	r3, r2
 8000d16:	041a      	lsls	r2, r3, #16
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	1cb9      	adds	r1, r7, #2
 8000d1e:	8809      	ldrh	r1, [r1, #0]
 8000d20:	400b      	ands	r3, r1
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	1dbb      	adds	r3, r7, #6
 8000d3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	1dba      	adds	r2, r7, #6
 8000d42:	8812      	ldrh	r2, [r2, #0]
 8000d44:	4013      	ands	r3, r2
 8000d46:	d008      	beq.n	8000d5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d4a:	1dba      	adds	r2, r7, #6
 8000d4c:	8812      	ldrh	r2, [r2, #0]
 8000d4e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d50:	1dbb      	adds	r3, r7, #6
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fa63 	bl	8000220 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e301      	b.n	800137e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	d100      	bne.n	8000d86 <HAL_RCC_OscConfig+0x1e>
 8000d84:	e08d      	b.n	8000ea2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d86:	4bc3      	ldr	r3, [pc, #780]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d00e      	beq.n	8000db0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d92:	4bc0      	ldr	r3, [pc, #768]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	220c      	movs	r2, #12
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x64>
 8000d9e:	4bbd      	ldr	r3, [pc, #756]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	401a      	ands	r2, r3
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	025b      	lsls	r3, r3, #9
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10d      	bne.n	8000dcc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	4bb8      	ldr	r3, [pc, #736]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	d100      	bne.n	8000dbe <HAL_RCC_OscConfig+0x56>
 8000dbc:	e070      	b.n	8000ea0 <HAL_RCC_OscConfig+0x138>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d000      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x60>
 8000dc6:	e06b      	b.n	8000ea0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e2d8      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d107      	bne.n	8000de4 <HAL_RCC_OscConfig+0x7c>
 8000dd4:	4baf      	ldr	r3, [pc, #700]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4bae      	ldr	r3, [pc, #696]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0249      	lsls	r1, r1, #9
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e02f      	b.n	8000e44 <HAL_RCC_OscConfig+0xdc>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10c      	bne.n	8000e06 <HAL_RCC_OscConfig+0x9e>
 8000dec:	4ba9      	ldr	r3, [pc, #676]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4ba8      	ldr	r3, [pc, #672]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000df2:	49a9      	ldr	r1, [pc, #676]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	4ba6      	ldr	r3, [pc, #664]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4ba5      	ldr	r3, [pc, #660]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	49a7      	ldr	r1, [pc, #668]	; (800109c <HAL_RCC_OscConfig+0x334>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e01e      	b.n	8000e44 <HAL_RCC_OscConfig+0xdc>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d10e      	bne.n	8000e2c <HAL_RCC_OscConfig+0xc4>
 8000e0e:	4ba1      	ldr	r3, [pc, #644]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4ba0      	ldr	r3, [pc, #640]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	02c9      	lsls	r1, r1, #11
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4b9d      	ldr	r3, [pc, #628]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b9c      	ldr	r3, [pc, #624]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0xdc>
 8000e2c:	4b99      	ldr	r3, [pc, #612]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b98      	ldr	r3, [pc, #608]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	4999      	ldr	r1, [pc, #612]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	4b96      	ldr	r3, [pc, #600]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b95      	ldr	r3, [pc, #596]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e3e:	4997      	ldr	r1, [pc, #604]	; (800109c <HAL_RCC_OscConfig+0x334>)
 8000e40:	400a      	ands	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d014      	beq.n	8000e76 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc62 	bl	8000714 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e56:	f7ff fc5d 	bl	8000714 <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	; 0x64
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e28a      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e68:	4b8a      	ldr	r3, [pc, #552]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	4013      	ands	r3, r2
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0xee>
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fc4d 	bl	8000714 <HAL_GetTick>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc48 	bl	8000714 <HAL_GetTick>
 8000e84:	0002      	movs	r2, r0
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e275      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	4b80      	ldr	r3, [pc, #512]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x118>
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x146>
 8000eac:	e069      	b.n	8000f82 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eae:	4b79      	ldr	r3, [pc, #484]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d00b      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb8:	4b76      	ldr	r3, [pc, #472]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d11c      	bne.n	8000efe <HAL_RCC_OscConfig+0x196>
 8000ec4:	4b73      	ldr	r3, [pc, #460]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d116      	bne.n	8000efe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed0:	4b70      	ldr	r3, [pc, #448]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d005      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x17e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e24b      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	22f8      	movs	r2, #248	; 0xf8
 8000eec:	4393      	bics	r3, r2
 8000eee:	0019      	movs	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	00da      	lsls	r2, r3, #3
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efc:	e041      	b.n	8000f82 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d024      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f06:	4b63      	ldr	r3, [pc, #396]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fbff 	bl	8000714 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fbfa 	bl	8000714 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e227      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2e:	4b59      	ldr	r3, [pc, #356]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2202      	movs	r2, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	d0f1      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	4b56      	ldr	r3, [pc, #344]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	22f8      	movs	r2, #248	; 0xf8
 8000f3e:	4393      	bics	r3, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	00da      	lsls	r2, r3, #3
 8000f48:	4b52      	ldr	r3, [pc, #328]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e018      	b.n	8000f82 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f50:	4b50      	ldr	r3, [pc, #320]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fbda 	bl	8000714 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f66:	f7ff fbd5 	bl	8000714 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e202      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d1f1      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2208      	movs	r2, #8
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d036      	beq.n	8000ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d019      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fbb8 	bl	8000714 <HAL_GetTick>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000faa:	f7ff fbb3 	bl	8000714 <HAL_GetTick>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e1e0      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d0f1      	beq.n	8000faa <HAL_RCC_OscConfig+0x242>
 8000fc6:	e018      	b.n	8000ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fb9e 	bl	8000714 <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fb99 	bl	8000714 <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1c6      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d1f1      	bne.n	8000fde <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2204      	movs	r2, #4
 8001000:	4013      	ands	r3, r2
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x29e>
 8001004:	e0b4      	b.n	8001170 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001006:	201f      	movs	r0, #31
 8001008:	183b      	adds	r3, r7, r0
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	055b      	lsls	r3, r3, #21
 8001016:	4013      	ands	r3, r2
 8001018:	d110      	bne.n	800103c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 800101c:	69da      	ldr	r2, [r3, #28]
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	0549      	lsls	r1, r1, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	61da      	str	r2, [r3, #28]
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001036:	183b      	adds	r3, r7, r0
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4013      	ands	r3, r2
 8001046:	d11a      	bne.n	800107e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0049      	lsls	r1, r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb5d 	bl	8000714 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001060:	f7ff fb58 	bl	8000714 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e185      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4013      	ands	r3, r2
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0x33c>
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	e035      	b.n	8001100 <HAL_RCC_OscConfig+0x398>
 8001094:	40021000 	.word	0x40021000
 8001098:	fffeffff 	.word	0xfffeffff
 800109c:	fffbffff 	.word	0xfffbffff
 80010a0:	40007000 	.word	0x40007000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x35e>
 80010ac:	4bb6      	ldr	r3, [pc, #728]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	4bb5      	ldr	r3, [pc, #724]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	438a      	bics	r2, r1
 80010b6:	621a      	str	r2, [r3, #32]
 80010b8:	4bb3      	ldr	r3, [pc, #716]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	4bb2      	ldr	r3, [pc, #712]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010be:	2104      	movs	r1, #4
 80010c0:	438a      	bics	r2, r1
 80010c2:	621a      	str	r2, [r3, #32]
 80010c4:	e01c      	b.n	8001100 <HAL_RCC_OscConfig+0x398>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x380>
 80010ce:	4bae      	ldr	r3, [pc, #696]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	4bad      	ldr	r3, [pc, #692]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010d4:	2104      	movs	r1, #4
 80010d6:	430a      	orrs	r2, r1
 80010d8:	621a      	str	r2, [r3, #32]
 80010da:	4bab      	ldr	r3, [pc, #684]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010dc:	6a1a      	ldr	r2, [r3, #32]
 80010de:	4baa      	ldr	r3, [pc, #680]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	621a      	str	r2, [r3, #32]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0x398>
 80010e8:	4ba7      	ldr	r3, [pc, #668]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4ba6      	ldr	r3, [pc, #664]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	438a      	bics	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	4ba4      	ldr	r3, [pc, #656]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4ba3      	ldr	r3, [pc, #652]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	438a      	bics	r2, r1
 80010fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d014      	beq.n	8001132 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fb04 	bl	8000714 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e009      	b.n	8001126 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff faff 	bl	8000714 <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	4a9b      	ldr	r2, [pc, #620]	; (800138c <HAL_RCC_OscConfig+0x624>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e12b      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001126:	4b98      	ldr	r3, [pc, #608]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x3aa>
 8001130:	e013      	b.n	800115a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff faef 	bl	8000714 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113a:	e009      	b.n	8001150 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113c:	f7ff faea 	bl	8000714 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a91      	ldr	r2, [pc, #580]	; (800138c <HAL_RCC_OscConfig+0x624>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e116      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	4b8d      	ldr	r3, [pc, #564]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	2202      	movs	r2, #2
 8001156:	4013      	ands	r3, r2
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800115a:	231f      	movs	r3, #31
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4b88      	ldr	r3, [pc, #544]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	4b87      	ldr	r3, [pc, #540]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800116a:	4989      	ldr	r1, [pc, #548]	; (8001390 <HAL_RCC_OscConfig+0x628>)
 800116c:	400a      	ands	r2, r1
 800116e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2210      	movs	r2, #16
 8001176:	4013      	ands	r3, r2
 8001178:	d063      	beq.n	8001242 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d12a      	bne.n	80011d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001182:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b80      	ldr	r3, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001188:	2104      	movs	r1, #4
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800118e:	4b7e      	ldr	r3, [pc, #504]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001192:	4b7d      	ldr	r3, [pc, #500]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fabb 	bl	8000714 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011a4:	f7ff fab6 	bl	8000714 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0e3      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011b6:	4b74      	ldr	r3, [pc, #464]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d0f1      	beq.n	80011a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011c0:	4b71      	ldr	r3, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c4:	22f8      	movs	r2, #248	; 0xf8
 80011c6:	4393      	bics	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	00da      	lsls	r2, r3, #3
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	e034      	b.n	8001242 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	3305      	adds	r3, #5
 80011de:	d111      	bne.n	8001204 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011e0:	4b69      	ldr	r3, [pc, #420]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	438a      	bics	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011ec:	4b66      	ldr	r3, [pc, #408]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	22f8      	movs	r2, #248	; 0xf8
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	00da      	lsls	r2, r3, #3
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
 8001202:	e01e      	b.n	8001242 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001204:	4b60      	ldr	r3, [pc, #384]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800120a:	2104      	movs	r1, #4
 800120c:	430a      	orrs	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001210:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	4b5c      	ldr	r3, [pc, #368]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001216:	2101      	movs	r1, #1
 8001218:	438a      	bics	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121c:	f7ff fa7a 	bl	8000714 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001226:	f7ff fa75 	bl	8000714 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0a2      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	2202      	movs	r2, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d1f1      	bne.n	8001226 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <HAL_RCC_OscConfig+0x4e4>
 800124a:	e097      	b.n	800137c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	220c      	movs	r2, #12
 8001252:	4013      	ands	r3, r2
 8001254:	2b08      	cmp	r3, #8
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x4f2>
 8001258:	e06b      	b.n	8001332 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d14c      	bne.n	80012fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b48      	ldr	r3, [pc, #288]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001268:	494a      	ldr	r1, [pc, #296]	; (8001394 <HAL_RCC_OscConfig+0x62c>)
 800126a:	400a      	ands	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fa51 	bl	8000714 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001278:	f7ff fa4c 	bl	8000714 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e079      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	049b      	lsls	r3, r3, #18
 8001292:	4013      	ands	r3, r2
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	220f      	movs	r2, #15
 800129c:	4393      	bics	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <HAL_RCC_OscConfig+0x630>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	431a      	orrs	r2, r3
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0449      	lsls	r1, r1, #17
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa1f 	bl	8000714 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fa1a 	bl	8000714 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e047      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	049b      	lsls	r3, r3, #18
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x574>
 80012fa:	e03f      	b.n	800137c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001302:	4924      	ldr	r1, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x62c>)
 8001304:	400a      	ands	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fa04 	bl	8000714 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff f9ff 	bl	8000714 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e02c      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	049b      	lsls	r3, r3, #18
 800132c:	4013      	ands	r3, r2
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x5aa>
 8001330:	e024      	b.n	800137c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e01f      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	429a      	cmp	r2, r3
 8001358:	d10e      	bne.n	8001378 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	220f      	movs	r2, #15
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001364:	429a      	cmp	r2, r3
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	23f0      	movs	r3, #240	; 0xf0
 800136c:	039b      	lsls	r3, r3, #14
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b008      	add	sp, #32
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	00001388 	.word	0x00001388
 8001390:	efffffff 	.word	0xefffffff
 8001394:	feffffff 	.word	0xfeffffff
 8001398:	ffc2ffff 	.word	0xffc2ffff

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0b3      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d911      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b58      	ldr	r3, [pc, #352]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b55      	ldr	r3, [pc, #340]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e09a      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2204      	movs	r2, #4
 80013f2:	4013      	ands	r3, r2
 80013f4:	d006      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013f6:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80013fc:	21e0      	movs	r1, #224	; 0xe0
 80013fe:	00c9      	lsls	r1, r1, #3
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	22f0      	movs	r2, #240	; 0xf0
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	d040      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	029b      	lsls	r3, r3, #10
 8001432:	4013      	ands	r3, r2
 8001434:	d114      	bne.n	8001460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e06e      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	049b      	lsls	r3, r3, #18
 800144a:	4013      	ands	r3, r2
 800144c:	d108      	bne.n	8001460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e062      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e05b      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4393      	bics	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff f94e 	bl	8000714 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147c:	e009      	b.n	8001492 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff f949 	bl	8000714 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_RCC_ClockConfig+0x18c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e042      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	220c      	movs	r2, #12
 8001498:	401a      	ands	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1ec      	bne.n	800147e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	4013      	ands	r3, r2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d211      	bcs.n	80014d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4393      	bics	r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e020      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2204      	movs	r2, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	d009      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_RCC_ClockConfig+0x190>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014f4:	f000 f820 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014f8:	0001      	movs	r1, r0
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	220f      	movs	r2, #15
 8001502:	4013      	ands	r3, r2
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x194>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	000a      	movs	r2, r1
 800150a:	40da      	lsrs	r2, r3
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x198>)
 800150e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff f8b9 	bl	8000688 <HAL_InitTick>
  
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40022000 	.word	0x40022000
 8001524:	40021000 	.word	0x40021000
 8001528:	00001388 	.word	0x00001388
 800152c:	fffff8ff 	.word	0xfffff8ff
 8001530:	08002d24 	.word	0x08002d24
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	220c      	movs	r2, #12
 800155c:	4013      	ands	r3, r2
 800155e:	2b04      	cmp	r3, #4
 8001560:	d002      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x30>
 8001562:	2b08      	cmp	r3, #8
 8001564:	d003      	beq.n	800156e <HAL_RCC_GetSysClockFreq+0x36>
 8001566:	e02c      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800156a:	613b      	str	r3, [r7, #16]
      break;
 800156c:	e02c      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	220f      	movs	r2, #15
 8001574:	4013      	ands	r3, r2
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	220f      	movs	r2, #15
 8001582:	4013      	ands	r3, r2
 8001584:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	4013      	ands	r3, r2
 8001592:	d009      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	4810      	ldr	r0, [pc, #64]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001598:	f7fe fdb6 	bl	8000108 <__udivsi3>
 800159c:	0003      	movs	r3, r0
 800159e:	001a      	movs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4353      	muls	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e009      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	000a      	movs	r2, r1
 80015ac:	0152      	lsls	r2, r2, #5
 80015ae:	1a52      	subs	r2, r2, r1
 80015b0:	0193      	lsls	r3, r2, #6
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	185b      	adds	r3, r3, r1
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
      break;
 80015c0:	e002      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015c4:	613b      	str	r3, [r7, #16]
      break;
 80015c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015c8:	693b      	ldr	r3, [r7, #16]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b006      	add	sp, #24
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	40021000 	.word	0x40021000
 80015d8:	007a1200 	.word	0x007a1200
 80015dc:	08002d3c 	.word	0x08002d3c
 80015e0:	08002d4c 	.word	0x08002d4c

080015e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015fc:	f7ff fff2 	bl	80015e4 <HAL_RCC_GetHCLKFreq>
 8001600:	0001      	movs	r1, r0
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	2207      	movs	r2, #7
 800160a:	4013      	ands	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x28>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	40d9      	lsrs	r1, r3
 8001612:	000b      	movs	r3, r1
}    
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000
 8001620:	08002d34 	.word	0x08002d34

08001624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001640:	e08e      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2017      	movs	r0, #23
 8001644:	183b      	adds	r3, r7, r0
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	055b      	lsls	r3, r3, #21
 8001652:	4013      	ands	r3, r2
 8001654:	d110      	bne.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0549      	lsls	r1, r1, #21
 8001660:	430a      	orrs	r2, r1
 8001662:	61da      	str	r2, [r3, #28]
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001666:	69da      	ldr	r2, [r3, #28]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001672:	183b      	adds	r3, r7, r0
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b54      	ldr	r3, [pc, #336]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d11a      	bne.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001684:	4b51      	ldr	r3, [pc, #324]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff f83f 	bl	8000714 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff f83a 	bl	8000714 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e087      	b.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ba:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016bc:	6a1a      	ldr	r2, [r3, #32]
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d034      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	23c0      	movs	r3, #192	; 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d02c      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016dc:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0249      	lsls	r1, r1, #9
 80016f0:	430a      	orrs	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016fa:	4936      	ldr	r1, [pc, #216]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff f801 	bl	8000714 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	e009      	b.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7fe fffc 	bl	8000714 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e048      	b.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001746:	430a      	orrs	r2, r1
 8001748:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800174a:	2317      	movs	r3, #23
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800175a:	4920      	ldr	r1, [pc, #128]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800175c:	400a      	ands	r2, r1
 800175e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	d009      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	2203      	movs	r2, #3
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177a:	430a      	orrs	r2, r1
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	2210      	movs	r2, #16
 800178e:	4393      	bics	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001798:	430a      	orrs	r2, r1
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4013      	ands	r3, r2
 80017a6:	d009      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	2240      	movs	r2, #64	; 0x40
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b006      	add	sp, #24
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40007000 	.word	0x40007000
 80017d0:	fffffcff 	.word	0xfffffcff
 80017d4:	fffeffff 	.word	0xfffeffff
 80017d8:	00001388 	.word	0x00001388
 80017dc:	efffffff 	.word	0xefffffff

080017e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e044      	b.n	800187c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d107      	bne.n	800180a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2278      	movs	r2, #120	; 0x78
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f7fe fe79 	bl	80004fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2224      	movs	r2, #36	; 0x24
 800180e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2101      	movs	r1, #1
 800181c:	438a      	bics	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fc24 	bl	8002070 <UART_SetConfig>
 8001828:	0003      	movs	r3, r0
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e024      	b.n	800187c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	0018      	movs	r0, r3
 800183e:	f000 fd57 	bl	80022f0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	490d      	ldr	r1, [pc, #52]	; (8001884 <HAL_UART_Init+0xa4>)
 800184e:	400a      	ands	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	212a      	movs	r1, #42	; 0x2a
 800185e:	438a      	bics	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f000 fdef 	bl	8002458 <UART_CheckIdleState>
 800187a:	0003      	movs	r3, r0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	ffffb7ff 	.word	0xffffb7ff

08001888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	1dbb      	adds	r3, r7, #6
 8001896:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800189c:	2b20      	cmp	r3, #32
 800189e:	d000      	beq.n	80018a2 <HAL_UART_Transmit+0x1a>
 80018a0:	e08d      	b.n	80019be <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_UART_Transmit+0x28>
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e085      	b.n	80019c0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	429a      	cmp	r2, r3
 80018be:	d109      	bne.n	80018d4 <HAL_UART_Transmit+0x4c>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e075      	b.n	80019c0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2284      	movs	r2, #132	; 0x84
 80018d8:	2100      	movs	r1, #0
 80018da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2221      	movs	r2, #33	; 0x21
 80018e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018e2:	f7fe ff17 	bl	8000714 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1dba      	adds	r2, r7, #6
 80018ee:	2150      	movs	r1, #80	; 0x50
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1dba      	adds	r2, r7, #6
 80018f8:	2152      	movs	r1, #82	; 0x52
 80018fa:	8812      	ldrh	r2, [r2, #0]
 80018fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	429a      	cmp	r2, r3
 8001908:	d108      	bne.n	800191c <HAL_UART_Transmit+0x94>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d104      	bne.n	800191c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e003      	b.n	8001924 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001924:	e030      	b.n	8001988 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	0013      	movs	r3, r2
 8001930:	2200      	movs	r2, #0
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	f000 fe38 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d004      	beq.n	8001946 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2220      	movs	r2, #32
 8001940:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e03c      	b.n	80019c0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10b      	bne.n	8001964 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	05d2      	lsls	r2, r2, #23
 8001956:	0dd2      	lsrs	r2, r2, #23
 8001958:	b292      	uxth	r2, r2
 800195a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	3302      	adds	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e008      	b.n	8001976 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b292      	uxth	r2, r2
 800196e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2252      	movs	r2, #82	; 0x52
 800197a:	5a9b      	ldrh	r3, [r3, r2]
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b299      	uxth	r1, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2252      	movs	r2, #82	; 0x52
 8001986:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2252      	movs	r2, #82	; 0x52
 800198c:	5a9b      	ldrh	r3, [r3, r2]
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1c8      	bne.n	8001926 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	0013      	movs	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	f000 fe01 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d004      	beq.n	80019b4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e005      	b.n	80019c0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
  }
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b008      	add	sp, #32
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	589b      	ldr	r3, [r3, r2]
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d145      	bne.n	8001a6c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_UART_Receive_IT+0x26>
 80019e6:	1dbb      	adds	r3, r7, #6
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e03d      	b.n	8001a6e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d109      	bne.n	8001a12 <HAL_UART_Receive_IT+0x4a>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d001      	beq.n	8001a12 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e02d      	b.n	8001a6e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	4013      	ands	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a26:	f3ef 8310 	mrs	r3, PRIMASK
 8001a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8001a2c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	2301      	movs	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f383 8810 	msr	PRIMASK, r3
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	04c9      	lsls	r1, r1, #19
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f383 8810 	msr	PRIMASK, r3
}
 8001a58:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001a5a:	1dbb      	adds	r3, r7, #6
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fe0a 	bl	800267c <UART_Start_Receive_IT>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	e000      	b.n	8001a6e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b008      	add	sp, #32
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b0ab      	sub	sp, #172	; 0xac
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	22a4      	movs	r2, #164	; 0xa4
 8001a88:	18b9      	adds	r1, r7, r2
 8001a8a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	20a0      	movs	r0, #160	; 0xa0
 8001a94:	1839      	adds	r1, r7, r0
 8001a96:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	219c      	movs	r1, #156	; 0x9c
 8001aa0:	1879      	adds	r1, r7, r1
 8001aa2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001aa4:	0011      	movs	r1, r2
 8001aa6:	18bb      	adds	r3, r7, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a99      	ldr	r2, [pc, #612]	; (8001d10 <HAL_UART_IRQHandler+0x298>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	2298      	movs	r2, #152	; 0x98
 8001ab0:	18bc      	adds	r4, r7, r2
 8001ab2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001ab4:	18bb      	adds	r3, r7, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d114      	bne.n	8001ae6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d00f      	beq.n	8001ae6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ac6:	183b      	adds	r3, r7, r0
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2220      	movs	r2, #32
 8001acc:	4013      	ands	r3, r2
 8001ace:	d00a      	beq.n	8001ae6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d100      	bne.n	8001ada <HAL_UART_IRQHandler+0x62>
 8001ad8:	e29e      	b.n	8002018 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	4798      	blx	r3
      }
      return;
 8001ae4:	e298      	b.n	8002018 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ae6:	2398      	movs	r3, #152	; 0x98
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d100      	bne.n	8001af2 <HAL_UART_IRQHandler+0x7a>
 8001af0:	e114      	b.n	8001d1c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001af2:	239c      	movs	r3, #156	; 0x9c
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d106      	bne.n	8001b0c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001afe:	23a0      	movs	r3, #160	; 0xa0
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a83      	ldr	r2, [pc, #524]	; (8001d14 <HAL_UART_IRQHandler+0x29c>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	d100      	bne.n	8001b0c <HAL_UART_IRQHandler+0x94>
 8001b0a:	e107      	b.n	8001d1c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001b0c:	23a4      	movs	r3, #164	; 0xa4
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d012      	beq.n	8001b3e <HAL_UART_IRQHandler+0xc6>
 8001b18:	23a0      	movs	r3, #160	; 0xa0
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2284      	movs	r2, #132	; 0x84
 8001b32:	589b      	ldr	r3, [r3, r2]
 8001b34:	2201      	movs	r2, #1
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2184      	movs	r1, #132	; 0x84
 8001b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b3e:	23a4      	movs	r3, #164	; 0xa4
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d011      	beq.n	8001b6e <HAL_UART_IRQHandler+0xf6>
 8001b4a:	239c      	movs	r3, #156	; 0x9c
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d00b      	beq.n	8001b6e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2284      	movs	r2, #132	; 0x84
 8001b62:	589b      	ldr	r3, [r3, r2]
 8001b64:	2204      	movs	r2, #4
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2184      	movs	r1, #132	; 0x84
 8001b6c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b6e:	23a4      	movs	r3, #164	; 0xa4
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2204      	movs	r2, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	d011      	beq.n	8001b9e <HAL_UART_IRQHandler+0x126>
 8001b7a:	239c      	movs	r3, #156	; 0x9c
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	d00b      	beq.n	8001b9e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2284      	movs	r2, #132	; 0x84
 8001b92:	589b      	ldr	r3, [r3, r2]
 8001b94:	2202      	movs	r2, #2
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2184      	movs	r1, #132	; 0x84
 8001b9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b9e:	23a4      	movs	r3, #164	; 0xa4
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d017      	beq.n	8001bda <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001baa:	23a0      	movs	r3, #160	; 0xa0
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d105      	bne.n	8001bc2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001bb6:	239c      	movs	r3, #156	; 0x9c
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001bc0:	d00b      	beq.n	8001bda <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2284      	movs	r2, #132	; 0x84
 8001bce:	589b      	ldr	r3, [r3, r2]
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2184      	movs	r1, #132	; 0x84
 8001bd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001bda:	23a4      	movs	r3, #164	; 0xa4
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4013      	ands	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_UART_IRQHandler+0x198>
 8001be8:	23a0      	movs	r3, #160	; 0xa0
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	04db      	lsls	r3, r3, #19
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00c      	beq.n	8001c10 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2284      	movs	r2, #132	; 0x84
 8001c04:	589b      	ldr	r3, [r3, r2]
 8001c06:	2220      	movs	r2, #32
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2184      	movs	r1, #132	; 0x84
 8001c0e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2284      	movs	r2, #132	; 0x84
 8001c14:	589b      	ldr	r3, [r3, r2]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d100      	bne.n	8001c1c <HAL_UART_IRQHandler+0x1a4>
 8001c1a:	e1ff      	b.n	800201c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c1c:	23a4      	movs	r3, #164	; 0xa4
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2220      	movs	r2, #32
 8001c24:	4013      	ands	r3, r2
 8001c26:	d00e      	beq.n	8001c46 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c28:	23a0      	movs	r3, #160	; 0xa0
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	4013      	ands	r3, r2
 8001c32:	d008      	beq.n	8001c46 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	0010      	movs	r0, r2
 8001c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2284      	movs	r2, #132	; 0x84
 8001c4a:	589b      	ldr	r3, [r3, r2]
 8001c4c:	2194      	movs	r1, #148	; 0x94
 8001c4e:	187a      	adds	r2, r7, r1
 8001c50:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d004      	beq.n	8001c6a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2228      	movs	r2, #40	; 0x28
 8001c66:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c68:	d047      	beq.n	8001cfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 fdbb 	bl	80027e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b40      	cmp	r3, #64	; 0x40
 8001c7e:	d137      	bne.n	8001cf0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c80:	f3ef 8310 	mrs	r3, PRIMASK
 8001c84:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c88:	2090      	movs	r0, #144	; 0x90
 8001c8a:	183a      	adds	r2, r7, r0
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c94:	f383 8810 	msr	PRIMASK, r3
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2140      	movs	r1, #64	; 0x40
 8001ca6:	438a      	bics	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	183b      	adds	r3, r7, r0
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb2:	f383 8810 	msr	PRIMASK, r3
}
 8001cb6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d012      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_UART_IRQHandler+0x2a0>)
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7fe fe41 	bl	8000954 <HAL_DMA_Abort_IT>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d01a      	beq.n	8001d0c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ce4:	e012      	b.n	8001d0c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 f9ad 	bl	8002048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cee:	e00d      	b.n	8001d0c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f9a8 	bl	8002048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf8:	e008      	b.n	8001d0c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 f9a3 	bl	8002048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2284      	movs	r2, #132	; 0x84
 8001d06:	2100      	movs	r1, #0
 8001d08:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001d0a:	e187      	b.n	800201c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0c:	46c0      	nop			; (mov r8, r8)
    return;
 8001d0e:	e185      	b.n	800201c <HAL_UART_IRQHandler+0x5a4>
 8001d10:	0000080f 	.word	0x0000080f
 8001d14:	04000120 	.word	0x04000120
 8001d18:	080028b1 	.word	0x080028b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d000      	beq.n	8001d26 <HAL_UART_IRQHandler+0x2ae>
 8001d24:	e139      	b.n	8001f9a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001d26:	23a4      	movs	r3, #164	; 0xa4
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d100      	bne.n	8001d34 <HAL_UART_IRQHandler+0x2bc>
 8001d32:	e132      	b.n	8001f9a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001d34:	23a0      	movs	r3, #160	; 0xa0
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <HAL_UART_IRQHandler+0x2ca>
 8001d40:	e12b      	b.n	8001f9a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2210      	movs	r2, #16
 8001d48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2240      	movs	r2, #64	; 0x40
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d000      	beq.n	8001d5a <HAL_UART_IRQHandler+0x2e2>
 8001d58:	e09f      	b.n	8001e9a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	217e      	movs	r1, #126	; 0x7e
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d100      	bne.n	8001d72 <HAL_UART_IRQHandler+0x2fa>
 8001d70:	e156      	b.n	8002020 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2258      	movs	r2, #88	; 0x58
 8001d76:	5a9b      	ldrh	r3, [r3, r2]
 8001d78:	187a      	adds	r2, r7, r1
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d300      	bcc.n	8001d82 <HAL_UART_IRQHandler+0x30a>
 8001d80:	e14e      	b.n	8002020 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	187a      	adds	r2, r7, r1
 8001d86:	215a      	movs	r1, #90	; 0x5a
 8001d88:	8812      	ldrh	r2, [r2, #0]
 8001d8a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d06f      	beq.n	8001e76 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d96:	f3ef 8310 	mrs	r3, PRIMASK
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001da0:	2301      	movs	r3, #1
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	f383 8810 	msr	PRIMASK, r3
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	499e      	ldr	r1, [pc, #632]	; (8002030 <HAL_UART_IRQHandler+0x5b8>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc2:	f383 8810 	msr	PRIMASK, r3
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dd0:	677b      	str	r3, [r7, #116]	; 0x74
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd8:	f383 8810 	msr	PRIMASK, r3
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	438a      	bics	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df4:	f383 8810 	msr	PRIMASK, r3
}
 8001df8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e02:	673b      	str	r3, [r7, #112]	; 0x70
 8001e04:	2301      	movs	r3, #1
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0a:	f383 8810 	msr	PRIMASK, r3
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2140      	movs	r1, #64	; 0x40
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e22:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e26:	f383 8810 	msr	PRIMASK, r3
}
 8001e2a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	2120      	movs	r1, #32
 8001e32:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e3e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e44:	2301      	movs	r3, #1
 8001e46:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4a:	f383 8810 	msr	PRIMASK, r3
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e62:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fd37 	bl	80008e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2258      	movs	r2, #88	; 0x58
 8001e80:	5a9a      	ldrh	r2, [r3, r2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	215a      	movs	r1, #90	; 0x5a
 8001e86:	5a5b      	ldrh	r3, [r3, r1]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0011      	movs	r1, r2
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 f8e0 	bl	8002058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001e98:	e0c2      	b.n	8002020 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2258      	movs	r2, #88	; 0x58
 8001e9e:	5a99      	ldrh	r1, [r3, r2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	225a      	movs	r2, #90	; 0x5a
 8001ea4:	5a9b      	ldrh	r3, [r3, r2]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	208e      	movs	r0, #142	; 0x8e
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	1a8a      	subs	r2, r1, r2
 8001eae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	225a      	movs	r2, #90	; 0x5a
 8001eb4:	5a9b      	ldrh	r3, [r3, r2]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <HAL_UART_IRQHandler+0x446>
 8001ebc:	e0b2      	b.n	8002024 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8001ebe:	183b      	adds	r3, r7, r0
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <HAL_UART_IRQHandler+0x450>
 8001ec6:	e0ad      	b.n	8002024 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8001ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ece:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ed0:	2488      	movs	r4, #136	; 0x88
 8001ed2:	193a      	adds	r2, r7, r4
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f383 8810 	msr	PRIMASK, r3
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4951      	ldr	r1, [pc, #324]	; (8002034 <HAL_UART_IRQHandler+0x5bc>)
 8001eee:	400a      	ands	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f383 8810 	msr	PRIMASK, r3
}
 8001efe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f00:	f3ef 8310 	mrs	r3, PRIMASK
 8001f04:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f06:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f08:	2484      	movs	r4, #132	; 0x84
 8001f0a:	193a      	adds	r2, r7, r4
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f383 8810 	msr	PRIMASK, r3
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	438a      	bics	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	193b      	adds	r3, r7, r4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f383 8810 	msr	PRIMASK, r3
}
 8001f36:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	2120      	movs	r1, #32
 8001f3e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f54:	2480      	movs	r4, #128	; 0x80
 8001f56:	193a      	adds	r2, r7, r4
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	f383 8810 	msr	PRIMASK, r3
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2110      	movs	r1, #16
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	f383 8810 	msr	PRIMASK, r3
}
 8001f82:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f8a:	183b      	adds	r3, r7, r0
 8001f8c:	881a      	ldrh	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0011      	movs	r1, r2
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f860 	bl	8002058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f98:	e044      	b.n	8002024 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001f9a:	23a4      	movs	r3, #164	; 0xa4
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	035b      	lsls	r3, r3, #13
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d010      	beq.n	8001fca <HAL_UART_IRQHandler+0x552>
 8001fa8:	239c      	movs	r3, #156	; 0x9c
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	03db      	lsls	r3, r3, #15
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	0352      	lsls	r2, r2, #13
 8001fbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 fe6e 	bl	8002ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001fc8:	e02f      	b.n	800202a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001fca:	23a4      	movs	r3, #164	; 0xa4
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00f      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001fd6:	23a0      	movs	r3, #160	; 0xa0
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01e      	beq.n	8002028 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	4798      	blx	r3
    }
    return;
 8001ff4:	e018      	b.n	8002028 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001ff6:	23a4      	movs	r3, #164	; 0xa4
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	4013      	ands	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_UART_IRQHandler+0x5b2>
 8002002:	23a0      	movs	r3, #160	; 0xa0
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	4013      	ands	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 fc64 	bl	80028de <UART_EndTransmit_IT>
    return;
 8002016:	e008      	b.n	800202a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	e006      	b.n	800202a <HAL_UART_IRQHandler+0x5b2>
    return;
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	e004      	b.n	800202a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	e002      	b.n	800202a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	e000      	b.n	800202a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002028:	46c0      	nop			; (mov r8, r8)
  }

}
 800202a:	46bd      	mov	sp, r7
 800202c:	b02b      	add	sp, #172	; 0xac
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	fffffeff 	.word	0xfffffeff
 8002034:	fffffedf 	.word	0xfffffedf

08002038 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	000a      	movs	r2, r1
 8002062:	1cbb      	adds	r3, r7, #2
 8002064:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002078:	231e      	movs	r3, #30
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8d      	ldr	r2, [pc, #564]	; (80022d4 <UART_SetConfig+0x264>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a88      	ldr	r2, [pc, #544]	; (80022d8 <UART_SetConfig+0x268>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <UART_SetConfig+0x26c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a7b      	ldr	r2, [pc, #492]	; (80022e0 <UART_SetConfig+0x270>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d127      	bne.n	8002146 <UART_SetConfig+0xd6>
 80020f6:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <UART_SetConfig+0x274>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	2203      	movs	r2, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d00d      	beq.n	800211e <UART_SetConfig+0xae>
 8002102:	d81b      	bhi.n	800213c <UART_SetConfig+0xcc>
 8002104:	2b02      	cmp	r3, #2
 8002106:	d014      	beq.n	8002132 <UART_SetConfig+0xc2>
 8002108:	d818      	bhi.n	800213c <UART_SetConfig+0xcc>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <UART_SetConfig+0xa4>
 800210e:	2b01      	cmp	r3, #1
 8002110:	d00a      	beq.n	8002128 <UART_SetConfig+0xb8>
 8002112:	e013      	b.n	800213c <UART_SetConfig+0xcc>
 8002114:	231f      	movs	r3, #31
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e021      	b.n	8002162 <UART_SetConfig+0xf2>
 800211e:	231f      	movs	r3, #31
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2202      	movs	r2, #2
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e01c      	b.n	8002162 <UART_SetConfig+0xf2>
 8002128:	231f      	movs	r3, #31
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2204      	movs	r2, #4
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e017      	b.n	8002162 <UART_SetConfig+0xf2>
 8002132:	231f      	movs	r3, #31
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2208      	movs	r2, #8
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e012      	b.n	8002162 <UART_SetConfig+0xf2>
 800213c:	231f      	movs	r3, #31
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2210      	movs	r2, #16
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e00d      	b.n	8002162 <UART_SetConfig+0xf2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <UART_SetConfig+0x278>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d104      	bne.n	800215a <UART_SetConfig+0xea>
 8002150:	231f      	movs	r3, #31
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e003      	b.n	8002162 <UART_SetConfig+0xf2>
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2210      	movs	r2, #16
 8002160:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	429a      	cmp	r2, r3
 800216c:	d15c      	bne.n	8002228 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800216e:	231f      	movs	r3, #31
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d015      	beq.n	80021a4 <UART_SetConfig+0x134>
 8002178:	dc18      	bgt.n	80021ac <UART_SetConfig+0x13c>
 800217a:	2b04      	cmp	r3, #4
 800217c:	d00d      	beq.n	800219a <UART_SetConfig+0x12a>
 800217e:	dc15      	bgt.n	80021ac <UART_SetConfig+0x13c>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <UART_SetConfig+0x11a>
 8002184:	2b02      	cmp	r3, #2
 8002186:	d005      	beq.n	8002194 <UART_SetConfig+0x124>
 8002188:	e010      	b.n	80021ac <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800218a:	f7ff fa35 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 800218e:	0003      	movs	r3, r0
 8002190:	61bb      	str	r3, [r7, #24]
        break;
 8002192:	e012      	b.n	80021ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002194:	4b55      	ldr	r3, [pc, #340]	; (80022ec <UART_SetConfig+0x27c>)
 8002196:	61bb      	str	r3, [r7, #24]
        break;
 8002198:	e00f      	b.n	80021ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800219a:	f7ff f9cd 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
        break;
 80021a2:	e00a      	b.n	80021ba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	61bb      	str	r3, [r7, #24]
        break;
 80021aa:	e006      	b.n	80021ba <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021b0:	231e      	movs	r3, #30
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
        break;
 80021b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d100      	bne.n	80021c2 <UART_SetConfig+0x152>
 80021c0:	e07a      	b.n	80022b8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	005a      	lsls	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	18d2      	adds	r2, r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0019      	movs	r1, r3
 80021d4:	0010      	movs	r0, r2
 80021d6:	f7fd ff97 	bl	8000108 <__udivsi3>
 80021da:	0003      	movs	r3, r0
 80021dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d91c      	bls.n	800221e <UART_SetConfig+0x1ae>
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	025b      	lsls	r3, r3, #9
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d217      	bcs.n	800221e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	200e      	movs	r0, #14
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	210f      	movs	r1, #15
 80021f8:	438a      	bics	r2, r1
 80021fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	b29b      	uxth	r3, r3
 8002202:	2207      	movs	r2, #7
 8002204:	4013      	ands	r3, r2
 8002206:	b299      	uxth	r1, r3
 8002208:	183b      	adds	r3, r7, r0
 800220a:	183a      	adds	r2, r7, r0
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	183a      	adds	r2, r7, r0
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	e04c      	b.n	80022b8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800221e:	231e      	movs	r3, #30
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e047      	b.n	80022b8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002228:	231f      	movs	r3, #31
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b08      	cmp	r3, #8
 8002230:	d015      	beq.n	800225e <UART_SetConfig+0x1ee>
 8002232:	dc18      	bgt.n	8002266 <UART_SetConfig+0x1f6>
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00d      	beq.n	8002254 <UART_SetConfig+0x1e4>
 8002238:	dc15      	bgt.n	8002266 <UART_SetConfig+0x1f6>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <UART_SetConfig+0x1d4>
 800223e:	2b02      	cmp	r3, #2
 8002240:	d005      	beq.n	800224e <UART_SetConfig+0x1de>
 8002242:	e010      	b.n	8002266 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002244:	f7ff f9d8 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
        break;
 800224c:	e012      	b.n	8002274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <UART_SetConfig+0x27c>)
 8002250:	61bb      	str	r3, [r7, #24]
        break;
 8002252:	e00f      	b.n	8002274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002254:	f7ff f970 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 8002258:	0003      	movs	r3, r0
 800225a:	61bb      	str	r3, [r7, #24]
        break;
 800225c:	e00a      	b.n	8002274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	61bb      	str	r3, [r7, #24]
        break;
 8002264:	e006      	b.n	8002274 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800226a:	231e      	movs	r3, #30
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
        break;
 8002272:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01e      	beq.n	80022b8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	085a      	lsrs	r2, r3, #1
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	18d2      	adds	r2, r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0019      	movs	r1, r3
 800228a:	0010      	movs	r0, r2
 800228c:	f7fd ff3c 	bl	8000108 <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	d90a      	bls.n	80022b0 <UART_SetConfig+0x240>
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d205      	bcs.n	80022b0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	e003      	b.n	80022b8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80022b0:	231e      	movs	r3, #30
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80022c4:	231e      	movs	r3, #30
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b008      	add	sp, #32
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	ffff69f3 	.word	0xffff69f3
 80022d8:	ffffcfff 	.word	0xffffcfff
 80022dc:	fffff4ff 	.word	0xfffff4ff
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40004400 	.word	0x40004400
 80022ec:	007a1200 	.word	0x007a1200

080022f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d00b      	beq.n	800231a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <UART_AdvFeatureConfig+0x144>)
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d00b      	beq.n	800233c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4a43      	ldr	r2, [pc, #268]	; (8002438 <UART_AdvFeatureConfig+0x148>)
 800232c:	4013      	ands	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2204      	movs	r2, #4
 8002342:	4013      	ands	r3, r2
 8002344:	d00b      	beq.n	800235e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a3b      	ldr	r2, [pc, #236]	; (800243c <UART_AdvFeatureConfig+0x14c>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2208      	movs	r2, #8
 8002364:	4013      	ands	r3, r2
 8002366:	d00b      	beq.n	8002380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a34      	ldr	r2, [pc, #208]	; (8002440 <UART_AdvFeatureConfig+0x150>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2210      	movs	r2, #16
 8002386:	4013      	ands	r3, r2
 8002388:	d00b      	beq.n	80023a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <UART_AdvFeatureConfig+0x154>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2220      	movs	r2, #32
 80023a8:	4013      	ands	r3, r2
 80023aa:	d00b      	beq.n	80023c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4a25      	ldr	r2, [pc, #148]	; (8002448 <UART_AdvFeatureConfig+0x158>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	4013      	ands	r3, r2
 80023cc:	d01d      	beq.n	800240a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <UART_AdvFeatureConfig+0x15c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	035b      	lsls	r3, r3, #13
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10b      	bne.n	800240a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <UART_AdvFeatureConfig+0x160>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	4013      	ands	r3, r2
 8002412:	d00b      	beq.n	800242c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <UART_AdvFeatureConfig+0x164>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
  }
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	fffdffff 	.word	0xfffdffff
 8002438:	fffeffff 	.word	0xfffeffff
 800243c:	fffbffff 	.word	0xfffbffff
 8002440:	ffff7fff 	.word	0xffff7fff
 8002444:	ffffefff 	.word	0xffffefff
 8002448:	ffffdfff 	.word	0xffffdfff
 800244c:	ffefffff 	.word	0xffefffff
 8002450:	ff9fffff 	.word	0xff9fffff
 8002454:	fff7ffff 	.word	0xfff7ffff

08002458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b092      	sub	sp, #72	; 0x48
 800245c:	af02      	add	r7, sp, #8
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2284      	movs	r2, #132	; 0x84
 8002464:	2100      	movs	r1, #0
 8002466:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002468:	f7fe f954 	bl	8000714 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2208      	movs	r2, #8
 8002478:	4013      	ands	r3, r2
 800247a:	2b08      	cmp	r3, #8
 800247c:	d12c      	bne.n	80024d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	0391      	lsls	r1, r2, #14
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <UART_CheckIdleState+0x148>)
 8002488:	9200      	str	r2, [sp, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	f000 f88c 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d021      	beq.n	80024d8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002494:	f3ef 8310 	mrs	r3, PRIMASK
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
 800249e:	2301      	movs	r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	f383 8810 	msr	PRIMASK, r3
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	438a      	bics	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	f383 8810 	msr	PRIMASK, r3
}
 80024c4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2278      	movs	r2, #120	; 0x78
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e05f      	b.n	8002598 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2204      	movs	r2, #4
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d146      	bne.n	8002574 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	03d1      	lsls	r1, r2, #15
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <UART_CheckIdleState+0x148>)
 80024f0:	9200      	str	r2, [sp, #0]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f000 f858 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d03b      	beq.n	8002574 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002500:	60fb      	str	r3, [r7, #12]
  return(result);
 8002502:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
 8002506:	2301      	movs	r3, #1
 8002508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f383 8810 	msr	PRIMASK, r3
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4921      	ldr	r1, [pc, #132]	; (80025a4 <UART_CheckIdleState+0x14c>)
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252e:	f3ef 8310 	mrs	r3, PRIMASK
 8002532:	61bb      	str	r3, [r7, #24]
  return(result);
 8002534:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
 8002538:	2301      	movs	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	438a      	bics	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f383 8810 	msr	PRIMASK, r3
}
 800255e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	2120      	movs	r1, #32
 8002566:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2278      	movs	r2, #120	; 0x78
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e011      	b.n	8002598 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	2120      	movs	r1, #32
 8002580:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2278      	movs	r2, #120	; 0x78
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b010      	add	sp, #64	; 0x40
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	01ffffff 	.word	0x01ffffff
 80025a4:	fffffedf 	.word	0xfffffedf

080025a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b8:	e04b      	b.n	8002652 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3301      	adds	r3, #1
 80025be:	d048      	beq.n	8002652 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c0:	f7fe f8a8 	bl	8000714 <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e04b      	b.n	8002672 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2204      	movs	r2, #4
 80025e2:	4013      	ands	r3, r2
 80025e4:	d035      	beq.n	8002652 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2208      	movs	r2, #8
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d111      	bne.n	8002618 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2208      	movs	r2, #8
 80025fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f8f2 	bl	80027e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2284      	movs	r2, #132	; 0x84
 8002608:	2108      	movs	r1, #8
 800260a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2278      	movs	r2, #120	; 0x78
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e02c      	b.n	8002672 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	401a      	ands	r2, r3
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	429a      	cmp	r2, r3
 800262a:	d112      	bne.n	8002652 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 f8d5 	bl	80027e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2284      	movs	r2, #132	; 0x84
 8002642:	2120      	movs	r1, #32
 8002644:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2278      	movs	r2, #120	; 0x78
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e00f      	b.n	8002672 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4013      	ands	r3, r2
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	425a      	negs	r2, r3
 8002662:	4153      	adcs	r3, r2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	001a      	movs	r2, r3
 8002668:	1dfb      	adds	r3, r7, #7
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d0a4      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b090      	sub	sp, #64	; 0x40
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	1dbb      	adds	r3, r7, #6
 8002688:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1dba      	adds	r2, r7, #6
 8002694:	2158      	movs	r1, #88	; 0x58
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1dba      	adds	r2, r7, #6
 800269e:	215a      	movs	r1, #90	; 0x5a
 80026a0:	8812      	ldrh	r2, [r2, #0]
 80026a2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	015b      	lsls	r3, r3, #5
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10d      	bne.n	80026d2 <UART_Start_Receive_IT+0x56>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <UART_Start_Receive_IT+0x4c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	225c      	movs	r2, #92	; 0x5c
 80026c2:	4946      	ldr	r1, [pc, #280]	; (80027dc <UART_Start_Receive_IT+0x160>)
 80026c4:	5299      	strh	r1, [r3, r2]
 80026c6:	e01a      	b.n	80026fe <UART_Start_Receive_IT+0x82>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	225c      	movs	r2, #92	; 0x5c
 80026cc:	21ff      	movs	r1, #255	; 0xff
 80026ce:	5299      	strh	r1, [r3, r2]
 80026d0:	e015      	b.n	80026fe <UART_Start_Receive_IT+0x82>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <UART_Start_Receive_IT+0x7a>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <UART_Start_Receive_IT+0x70>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	225c      	movs	r2, #92	; 0x5c
 80026e6:	21ff      	movs	r1, #255	; 0xff
 80026e8:	5299      	strh	r1, [r3, r2]
 80026ea:	e008      	b.n	80026fe <UART_Start_Receive_IT+0x82>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	225c      	movs	r2, #92	; 0x5c
 80026f0:	217f      	movs	r1, #127	; 0x7f
 80026f2:	5299      	strh	r1, [r3, r2]
 80026f4:	e003      	b.n	80026fe <UART_Start_Receive_IT+0x82>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	225c      	movs	r2, #92	; 0x5c
 80026fa:	2100      	movs	r1, #0
 80026fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2284      	movs	r2, #132	; 0x84
 8002702:	2100      	movs	r1, #0
 8002704:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	2122      	movs	r1, #34	; 0x22
 800270c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270e:	f3ef 8310 	mrs	r3, PRIMASK
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002718:	2301      	movs	r3, #1
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	f383 8810 	msr	PRIMASK, r3
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2101      	movs	r1, #1
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <UART_Start_Receive_IT+0xe0>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <UART_Start_Receive_IT+0x164>)
 8002758:	669a      	str	r2, [r3, #104]	; 0x68
 800275a:	e002      	b.n	8002762 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <UART_Start_Receive_IT+0x168>)
 8002760:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d019      	beq.n	800279e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276a:	f3ef 8310 	mrs	r3, PRIMASK
 800276e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002770:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
 8002774:	2301      	movs	r3, #1
 8002776:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f383 8810 	msr	PRIMASK, r3
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2190      	movs	r1, #144	; 0x90
 800278c:	0049      	lsls	r1, r1, #1
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	e018      	b.n	80027d0 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279e:	f3ef 8310 	mrs	r3, PRIMASK
 80027a2:	613b      	str	r3, [r7, #16]
  return(result);
 80027a4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a8:	2301      	movs	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f383 8810 	msr	PRIMASK, r3
}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2120      	movs	r1, #32
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b010      	add	sp, #64	; 0x40
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	000001ff 	.word	0x000001ff
 80027e0:	08002aed 	.word	0x08002aed
 80027e4:	08002935 	.word	0x08002935

080027e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f0:	f3ef 8310 	mrs	r3, PRIMASK
 80027f4:	617b      	str	r3, [r7, #20]
  return(result);
 80027f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4926      	ldr	r1, [pc, #152]	; (80028ac <UART_EndRxTransfer+0xc4>)
 8002812:	400a      	ands	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002822:	f3ef 8310 	mrs	r3, PRIMASK
 8002826:	623b      	str	r3, [r7, #32]
  return(result);
 8002828:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f383 8810 	msr	PRIMASK, r3
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002858:	2b01      	cmp	r3, #1
 800285a:	d118      	bne.n	800288e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285c:	f3ef 8310 	mrs	r3, PRIMASK
 8002860:	60bb      	str	r3, [r7, #8]
  return(result);
 8002862:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	2301      	movs	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f383 8810 	msr	PRIMASK, r3
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2110      	movs	r1, #16
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	2120      	movs	r1, #32
 8002894:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b00e      	add	sp, #56	; 0x38
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	fffffedf 	.word	0xfffffedf

080028b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	225a      	movs	r2, #90	; 0x5a
 80028c2:	2100      	movs	r1, #0
 80028c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2252      	movs	r2, #82	; 0x52
 80028ca:	2100      	movs	r1, #0
 80028cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff fbb9 	bl	8002048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80028ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	2301      	movs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f383 8810 	msr	PRIMASK, r3
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	438a      	bics	r2, r1
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff fb86 	bl	8002038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b006      	add	sp, #24
 8002932:	bd80      	pop	{r7, pc}

08002934 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b094      	sub	sp, #80	; 0x50
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800293c:	204e      	movs	r0, #78	; 0x4e
 800293e:	183b      	adds	r3, r7, r0
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	215c      	movs	r1, #92	; 0x5c
 8002944:	5a52      	ldrh	r2, [r2, r1]
 8002946:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	589b      	ldr	r3, [r3, r2]
 800294e:	2b22      	cmp	r3, #34	; 0x22
 8002950:	d000      	beq.n	8002954 <UART_RxISR_8BIT+0x20>
 8002952:	e0ba      	b.n	8002aca <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	214c      	movs	r1, #76	; 0x4c
 800295a:	187b      	adds	r3, r7, r1
 800295c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800295e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002960:	187b      	adds	r3, r7, r1
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	183b      	adds	r3, r7, r0
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b2d9      	uxtb	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	400a      	ands	r2, r1
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	225a      	movs	r2, #90	; 0x5a
 8002984:	5a9b      	ldrh	r3, [r3, r2]
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b299      	uxth	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	225a      	movs	r2, #90	; 0x5a
 8002990:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	225a      	movs	r2, #90	; 0x5a
 8002996:	5a9b      	ldrh	r3, [r3, r2]
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d000      	beq.n	80029a0 <UART_RxISR_8BIT+0x6c>
 800299e:	e09c      	b.n	8002ada <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8310 	mrs	r3, PRIMASK
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80029aa:	2301      	movs	r3, #1
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4948      	ldr	r1, [pc, #288]	; (8002ae4 <UART_RxISR_8BIT+0x1b0>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d2:	f3ef 8310 	mrs	r3, PRIMASK
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
 80029dc:	2301      	movs	r3, #1
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	f383 8810 	msr	PRIMASK, r3
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	438a      	bics	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	2120      	movs	r1, #32
 8002a0a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	4013      	ands	r3, r2
 8002a24:	d018      	beq.n	8002a58 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a26:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a30:	2301      	movs	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f383 8810 	msr	PRIMASK, r3
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4928      	ldr	r1, [pc, #160]	; (8002ae8 <UART_RxISR_8BIT+0x1b4>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d12f      	bne.n	8002ac0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2110      	movs	r1, #16
 8002a88:	438a      	bics	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d103      	bne.n	8002aae <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2258      	movs	r2, #88	; 0x58
 8002ab2:	5a9a      	ldrh	r2, [r3, r2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff facd 	bl	8002058 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002abe:	e00c      	b.n	8002ada <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fd fbc8 	bl	8000258 <HAL_UART_RxCpltCallback>
}
 8002ac8:	e007      	b.n	8002ada <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2108      	movs	r1, #8
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b014      	add	sp, #80	; 0x50
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	fffffedf 	.word	0xfffffedf
 8002ae8:	fbffffff 	.word	0xfbffffff

08002aec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b094      	sub	sp, #80	; 0x50
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002af4:	204e      	movs	r0, #78	; 0x4e
 8002af6:	183b      	adds	r3, r7, r0
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	215c      	movs	r1, #92	; 0x5c
 8002afc:	5a52      	ldrh	r2, [r2, r1]
 8002afe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	589b      	ldr	r3, [r3, r2]
 8002b06:	2b22      	cmp	r3, #34	; 0x22
 8002b08:	d000      	beq.n	8002b0c <UART_RxISR_16BIT+0x20>
 8002b0a:	e0ba      	b.n	8002c82 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	214c      	movs	r1, #76	; 0x4c
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002b16:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	183a      	adds	r2, r7, r0
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	8812      	ldrh	r2, [r2, #0]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	1c9a      	adds	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	225a      	movs	r2, #90	; 0x5a
 8002b3c:	5a9b      	ldrh	r3, [r3, r2]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b299      	uxth	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	225a      	movs	r2, #90	; 0x5a
 8002b48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	225a      	movs	r2, #90	; 0x5a
 8002b4e:	5a9b      	ldrh	r3, [r3, r2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d000      	beq.n	8002b58 <UART_RxISR_16BIT+0x6c>
 8002b56:	e09c      	b.n	8002c92 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b58:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5c:	623b      	str	r3, [r7, #32]
  return(result);
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
 8002b62:	2301      	movs	r3, #1
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4948      	ldr	r1, [pc, #288]	; (8002c9c <UART_RxISR_16BIT+0x1b0>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
 8002b94:	2301      	movs	r3, #1
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	f383 8810 	msr	PRIMASK, r3
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	438a      	bics	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d018      	beq.n	8002c10 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	617b      	str	r3, [r7, #20]
  return(result);
 8002be4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be8:	2301      	movs	r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4928      	ldr	r1, [pc, #160]	; (8002ca0 <UART_RxISR_16BIT+0x1b4>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d12f      	bne.n	8002c78 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c24:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c28:	2301      	movs	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f383 8810 	msr	PRIMASK, r3
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2110      	movs	r1, #16
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f383 8810 	msr	PRIMASK, r3
}
 8002c4e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2210      	movs	r2, #16
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d103      	bne.n	8002c66 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2258      	movs	r2, #88	; 0x58
 8002c6a:	5a9a      	ldrh	r2, [r3, r2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff f9f1 	bl	8002058 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c76:	e00c      	b.n	8002c92 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f7fd faec 	bl	8000258 <HAL_UART_RxCpltCallback>
}
 8002c80:	e007      	b.n	8002c92 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b014      	add	sp, #80	; 0x50
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	fffffedf 	.word	0xfffffedf
 8002ca0:	fbffffff 	.word	0xfbffffff

08002ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	4d0c      	ldr	r5, [pc, #48]	; (8002cec <__libc_init_array+0x38>)
 8002cba:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	f000 f821 	bl	8002d0c <_init>
 8002cca:	4d0a      	ldr	r5, [pc, #40]	; (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1b64      	subs	r4, r4, r5
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	00b3      	lsls	r3, r6, #2
 8002cda:	58eb      	ldr	r3, [r5, r3]
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	00b3      	lsls	r3, r6, #2
 8002ce4:	58eb      	ldr	r3, [r5, r3]
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08002d5c 	.word	0x08002d5c
 8002cf0:	08002d5c 	.word	0x08002d5c
 8002cf4:	08002d5c 	.word	0x08002d5c
 8002cf8:	08002d60 	.word	0x08002d60

08002cfc <memset>:
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	1882      	adds	r2, r0, r2
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	7019      	strb	r1, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <_init>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr

08002d18 <_fini>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr
