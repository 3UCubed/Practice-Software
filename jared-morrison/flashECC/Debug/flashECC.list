
flashECC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007158  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  24000000  08007438  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000050  08007488  00020050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000b0  080074e8  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  24000110  08007548  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007d8  08007548  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b14d  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d54  00000000  00000000  0003b28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037e55  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160e4  00000000  00000000  0007805d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00160f8f  00000000  00000000  0008e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ef0d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  001ef120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000110 	.word	0x24000110
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080073d8 	.word	0x080073d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000114 	.word	0x24000114
 80002d4:	080073d8 	.word	0x080073d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <init_flash_ecc>:
void erase_user_flash();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_flash_ecc() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80005e0:	f001 fef2 	bl	80023c8 <HAL_FLASH_Unlock>

	Address = FLASH_USER_START_ADDR;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <init_flash_ecc+0x30>)
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <init_flash_ecc+0x34>)
 80005e8:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	2004      	movs	r0, #4
 80005f0:	f001 f829 	bl	8001646 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80005f4:	2004      	movs	r0, #4
 80005f6:	f001 f840 	bl	800167a <HAL_NVIC_EnableIRQ>
	HAL_FLASHEx_EnableEccCorrectionInterrupt();
 80005fa:	f002 f8af 	bl	800275c <HAL_FLASHEx_EnableEccCorrectionInterrupt>
	HAL_FLASHEx_EnableEccDetectionInterrupt();
 80005fe:	f002 f8c5 	bl	800278c <HAL_FLASHEx_EnableEccDetectionInterrupt>

	HAL_FLASH_Lock();
 8000602:	f001 ff1b 	bl	800243c <HAL_FLASH_Lock>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	24000794 	.word	0x24000794
 8000610:	08040000 	.word	0x08040000

08000614 <erase_user_flash>:

void erase_user_flash() {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000618:	f001 fed6 	bl	80023c8 <HAL_FLASH_Unlock>

	/* Get the 1st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <erase_user_flash+0x64>)
 800061e:	f000 f891 	bl	8000744 <GetSector>
 8000622:	4603      	mov	r3, r0
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <erase_user_flash+0x68>)
 8000626:	6013      	str	r3, [r2, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8000628:	4815      	ldr	r0, [pc, #84]	; (8000680 <erase_user_flash+0x6c>)
 800062a:	f000 f88b 	bl	8000744 <GetSector>
 800062e:	4602      	mov	r2, r0
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <erase_user_flash+0x68>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	3301      	adds	r3, #1
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <erase_user_flash+0x70>)
 800063a:	6013      	str	r3, [r2, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <erase_user_flash+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <erase_user_flash+0x74>)
 8000644:	2220      	movs	r2, #32
 8000646:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <erase_user_flash+0x74>)
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector = FirstSector;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <erase_user_flash+0x68>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <erase_user_flash+0x74>)
 8000654:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <erase_user_flash+0x70>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <erase_user_flash+0x74>)
 800065c:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800065e:	490b      	ldr	r1, [pc, #44]	; (800068c <erase_user_flash+0x78>)
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <erase_user_flash+0x74>)
 8000662:	f001 ffb1 	bl	80025c8 <HAL_FLASHEx_Erase>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <erase_user_flash+0x5c>
		Error_Handler();
 800066c:	f000 fb6c 	bl	8000d48 <Error_Handler>
	}

	HAL_FLASH_Lock();
 8000670:	f001 fee4 	bl	800243c <HAL_FLASH_Lock>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	08040000 	.word	0x08040000
 800067c:	2400078c 	.word	0x2400078c
 8000680:	080dffff 	.word	0x080dffff
 8000684:	24000790 	.word	0x24000790
 8000688:	2400079c 	.word	0x2400079c
 800068c:	24000798 	.word	0x24000798

08000690 <cause_flash_double_error>:
	}

	HAL_FLASH_Lock();
}

void cause_flash_double_error() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000696:	f001 fe97 	bl	80023c8 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t) DoubleErrorB)) != HAL_OK) {
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <cause_flash_double_error+0x78>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1b      	ldr	r2, [pc, #108]	; (800070c <cause_flash_double_error+0x7c>)
 80006a0:	4619      	mov	r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 fc38 	bl	8001f18 <HAL_FLASH_Program>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <cause_flash_double_error+0x22>
		Error_Handler();
 80006ae:	f000 fb4b 	bl	8000d48 <Error_Handler>
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t) DoubleErrorA)) != HAL_OK) {
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <cause_flash_double_error+0x78>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <cause_flash_double_error+0x80>)
 80006b8:	4619      	mov	r1, r3
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 fc2c 	bl	8001f18 <HAL_FLASH_Program>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <cause_flash_double_error+0x3a>
		Error_Handler();
 80006c6:	f000 fb3f 	bl	8000d48 <Error_Handler>
	}

	uint64_t readData[4];
	for (int i = 0; i < 4; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
 80006ce:	e011      	b.n	80006f4 <cause_flash_double_error+0x64>
		readData[i] = *((uint64_t*) (Address + i * 8)); // Read 64 bits at a time
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <cause_flash_double_error+0x78>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006e2:	00c9      	lsls	r1, r1, #3
 80006e4:	3128      	adds	r1, #40	; 0x28
 80006e6:	4439      	add	r1, r7
 80006e8:	3928      	subs	r1, #40	; 0x28
 80006ea:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	3301      	adds	r3, #1
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	ddea      	ble.n	80006d0 <cause_flash_double_error+0x40>
	}

	HAL_FLASH_Lock();
 80006fa:	f001 fe9f 	bl	800243c <HAL_FLASH_Lock>
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	24000794 	.word	0x24000794
 800070c:	24000020 	.word	0x24000020
 8000710:	24000000 	.word	0x24000000

08000714 <HAL_FLASHEx_EccCorrectionCallback>:

void HAL_FLASHEx_EccCorrectionCallback() {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	2102      	movs	r1, #2
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <HAL_FLASHEx_EccCorrectionCallback+0x14>)
 800071e:	f002 faa5 	bl	8002c6c <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	58021000 	.word	0x58021000

0800072c <HAL_FLASHEx_EccDetectionCallback>:

void HAL_FLASHEx_EccDetectionCallback() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <HAL_FLASHEx_EccDetectionCallback+0x14>)
 8000736:	f002 fa99 	bl	8002c6c <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	58020400 	.word	0x58020400

08000744 <GetSector>:

uint32_t GetSector(uint32_t Address) {
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]

	if (((Address < ADDR_FLASH_SECTOR_1_BANK1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a50      	ldr	r2, [pc, #320]	; (8000894 <GetSector+0x150>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d803      	bhi.n	8000760 <GetSector+0x1c>
			&& (Address >= ADDR_FLASH_SECTOR_0_BANK1))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800075e:	d207      	bcs.n	8000770 <GetSector+0x2c>
			|| ((Address < ADDR_FLASH_SECTOR_1_BANK2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a4d      	ldr	r2, [pc, #308]	; (8000898 <GetSector+0x154>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d806      	bhi.n	8000776 <GetSector+0x32>
					&& (Address >= ADDR_FLASH_SECTOR_0_BANK2))) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800076e:	d302      	bcc.n	8000776 <GetSector+0x32>
		sector = FLASH_SECTOR_0;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e086      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_2_BANK1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a48      	ldr	r2, [pc, #288]	; (800089c <GetSector+0x158>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d803      	bhi.n	8000786 <GetSector+0x42>
			&& (Address >= ADDR_FLASH_SECTOR_1_BANK1))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a44      	ldr	r2, [pc, #272]	; (8000894 <GetSector+0x150>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d807      	bhi.n	8000796 <GetSector+0x52>
			|| ((Address < ADDR_FLASH_SECTOR_2_BANK2)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a45      	ldr	r2, [pc, #276]	; (80008a0 <GetSector+0x15c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d806      	bhi.n	800079c <GetSector+0x58>
					&& (Address >= ADDR_FLASH_SECTOR_1_BANK2))) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a41      	ldr	r2, [pc, #260]	; (8000898 <GetSector+0x154>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d902      	bls.n	800079c <GetSector+0x58>
		sector = FLASH_SECTOR_1;
 8000796:	2301      	movs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	e073      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_3_BANK1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <GetSector+0x160>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d803      	bhi.n	80007ac <GetSector+0x68>
			&& (Address >= ADDR_FLASH_SECTOR_2_BANK1))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a3d      	ldr	r2, [pc, #244]	; (800089c <GetSector+0x158>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d807      	bhi.n	80007bc <GetSector+0x78>
			|| ((Address < ADDR_FLASH_SECTOR_3_BANK2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a3e      	ldr	r2, [pc, #248]	; (80008a8 <GetSector+0x164>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d806      	bhi.n	80007c2 <GetSector+0x7e>
					&& (Address >= ADDR_FLASH_SECTOR_2_BANK2))) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <GetSector+0x15c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <GetSector+0x7e>
		sector = FLASH_SECTOR_2;
 80007bc:	2302      	movs	r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e060      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_4_BANK1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a39      	ldr	r2, [pc, #228]	; (80008ac <GetSector+0x168>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d803      	bhi.n	80007d2 <GetSector+0x8e>
			&& (Address >= ADDR_FLASH_SECTOR_3_BANK1))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a35      	ldr	r2, [pc, #212]	; (80008a4 <GetSector+0x160>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d807      	bhi.n	80007e2 <GetSector+0x9e>
			|| ((Address < ADDR_FLASH_SECTOR_4_BANK2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <GetSector+0x16c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d806      	bhi.n	80007e8 <GetSector+0xa4>
					&& (Address >= ADDR_FLASH_SECTOR_3_BANK2))) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <GetSector+0x164>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d902      	bls.n	80007e8 <GetSector+0xa4>
		sector = FLASH_SECTOR_3;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e04d      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_5_BANK1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <GetSector+0x170>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d803      	bhi.n	80007f8 <GetSector+0xb4>
			&& (Address >= ADDR_FLASH_SECTOR_4_BANK1))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <GetSector+0x168>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d807      	bhi.n	8000808 <GetSector+0xc4>
			|| ((Address < ADDR_FLASH_SECTOR_5_BANK2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a2f      	ldr	r2, [pc, #188]	; (80008b8 <GetSector+0x174>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d806      	bhi.n	800080e <GetSector+0xca>
					&& (Address >= ADDR_FLASH_SECTOR_4_BANK2))) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <GetSector+0x16c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d902      	bls.n	800080e <GetSector+0xca>
		sector = FLASH_SECTOR_4;
 8000808:	2304      	movs	r3, #4
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e03a      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_6_BANK1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <GetSector+0x178>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d803      	bhi.n	800081e <GetSector+0xda>
			&& (Address >= ADDR_FLASH_SECTOR_5_BANK1))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <GetSector+0x170>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d807      	bhi.n	800082e <GetSector+0xea>
			|| ((Address < ADDR_FLASH_SECTOR_6_BANK2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <GetSector+0x17c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d806      	bhi.n	8000834 <GetSector+0xf0>
					&& (Address >= ADDR_FLASH_SECTOR_5_BANK2))) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <GetSector+0x174>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d902      	bls.n	8000834 <GetSector+0xf0>
		sector = FLASH_SECTOR_5;
 800082e:	2305      	movs	r3, #5
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e027      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_7_BANK1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <GetSector+0x180>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d803      	bhi.n	8000844 <GetSector+0x100>
			&& (Address >= ADDR_FLASH_SECTOR_6_BANK1))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <GetSector+0x178>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d807      	bhi.n	8000854 <GetSector+0x110>
			|| ((Address < ADDR_FLASH_SECTOR_7_BANK2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <GetSector+0x184>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d806      	bhi.n	800085a <GetSector+0x116>
					&& (Address >= ADDR_FLASH_SECTOR_6_BANK2))) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <GetSector+0x17c>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d902      	bls.n	800085a <GetSector+0x116>
		sector = FLASH_SECTOR_6;
 8000854:	2306      	movs	r3, #6
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e014      	b.n	8000884 <GetSector+0x140>
	} else if (((Address < ADDR_FLASH_SECTOR_0_BANK2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000860:	d203      	bcs.n	800086a <GetSector+0x126>
			&& (Address >= ADDR_FLASH_SECTOR_7_BANK1))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <GetSector+0x180>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d807      	bhi.n	800087a <GetSector+0x136>
			|| ((Address < FLASH_END_ADDR )
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <GetSector+0x188>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d806      	bhi.n	8000880 <GetSector+0x13c>
					&& (Address >= ADDR_FLASH_SECTOR_7_BANK2))) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <GetSector+0x184>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d902      	bls.n	8000880 <GetSector+0x13c>
		sector = FLASH_SECTOR_7;
 800087a:	2307      	movs	r3, #7
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e001      	b.n	8000884 <GetSector+0x140>
	} else {
		sector = FLASH_SECTOR_7;
 8000880:	2307      	movs	r3, #7
 8000882:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 8000884:	68fb      	ldr	r3, [r7, #12]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	0801ffff 	.word	0x0801ffff
 8000898:	0811ffff 	.word	0x0811ffff
 800089c:	0803ffff 	.word	0x0803ffff
 80008a0:	0813ffff 	.word	0x0813ffff
 80008a4:	0805ffff 	.word	0x0805ffff
 80008a8:	0815ffff 	.word	0x0815ffff
 80008ac:	0807ffff 	.word	0x0807ffff
 80008b0:	0817ffff 	.word	0x0817ffff
 80008b4:	0809ffff 	.word	0x0809ffff
 80008b8:	0819ffff 	.word	0x0819ffff
 80008bc:	080bffff 	.word	0x080bffff
 80008c0:	081bffff 	.word	0x081bffff
 80008c4:	080dffff 	.word	0x080dffff
 80008c8:	081dffff 	.word	0x081dffff
 80008cc:	081ffffe 	.word	0x081ffffe

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fd06 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f810 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f958 	bl	8000b90 <MX_GPIO_Init>
  MX_ETH_Init();
 80008e0:	f000 f88c 	bl	80009fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008e4:	f000 f8d6 	bl	8000a94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008e8:	f000 f920 	bl	8000b2c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  init_flash_ecc();
 80008ec:	f7ff fe76 	bl	80005dc <init_flash_ecc>
  erase_user_flash();
 80008f0:	f7ff fe90 	bl	8000614 <erase_user_flash>

  cause_flash_double_error();
 80008f4:	f7ff fecc 	bl	8000690 <cause_flash_double_error>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x28>
	...

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	; 0x70
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 fd5c 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 fd56 	bl	80073c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800091c:	2002      	movs	r0, #2
 800091e:	f002 faef 	bl	8002f00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <SystemClock_Config+0xf8>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <SystemClock_Config+0xf8>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <SystemClock_Config+0xf8>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <SystemClock_Config+0xfc>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <SystemClock_Config+0xfc>)
 8000946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <SystemClock_Config+0xfc>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000958:	bf00      	nop
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <SystemClock_Config+0xfc>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000966:	d1f8      	bne.n	800095a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000968:	2303      	movs	r3, #3
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000972:	2301      	movs	r3, #1
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000986:	2318      	movs	r3, #24
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000996:	230c      	movs	r3, #12
 8000998:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099a:	2300      	movs	r3, #0
 800099c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 faf4 	bl	8002f94 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009b2:	f000 f9c9 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	233f      	movs	r3, #63	; 0x3f
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 ff34 	bl	8003848 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009e6:	f000 f9af 	bl	8000d48 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3770      	adds	r7, #112	; 0x70
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	58000400 	.word	0x58000400
 80009f8:	58024800 	.word	0x58024800

080009fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a02:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a14:	22e1      	movs	r2, #225	; 0xe1
 8000a16:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a2e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MX_ETH_Init+0x90>)
 8000a40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_ETH_Init+0x80>)
 8000a4c:	f000 fe30 	bl	80016b0 <HAL_ETH_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a56:	f000 f977 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a5a:	2238      	movs	r2, #56	; 0x38
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ETH_Init+0x94>)
 8000a60:	f006 fcb2 	bl	80073c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_ETH_Init+0x94>)
 8000a66:	2221      	movs	r2, #33	; 0x21
 8000a68:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_ETH_Init+0x94>)
 8000a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a70:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_ETH_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	24000164 	.word	0x24000164
 8000a80:	40028000 	.word	0x40028000
 8000a84:	240007b0 	.word	0x240007b0
 8000a88:	240000b0 	.word	0x240000b0
 8000a8c:	24000050 	.word	0x24000050
 8000a90:	2400012c 	.word	0x2400012c

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_USART3_UART_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ade:	f005 f86b 	bl	8005bb8 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 f92e 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000af0:	f006 f873 	bl	8006bda <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 f925 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b02:	f006 f8a8 	bl	8006c56 <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 f91c 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b12:	f006 f829 	bl	8006b68 <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 f914 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	24000214 	.word	0x24000214
 8000b28:	40004800 	.word	0x40004800

08000b2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b38:	2209      	movs	r2, #9
 8000b3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	f002 f893 	bl	8002c9e <HAL_PCD_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b7e:	f000 f8e3 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240002a8 	.word	0x240002a8
 8000b8c:	40080000 	.word	0x40080000

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a60      	ldr	r2, [pc, #384]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc4:	4b5a      	ldr	r3, [pc, #360]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a59      	ldr	r2, [pc, #356]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	4a51      	ldr	r2, [pc, #324]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf2:	4b4f      	ldr	r3, [pc, #316]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b4b      	ldr	r3, [pc, #300]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c10:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	4a42      	ldr	r2, [pc, #264]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a3b      	ldr	r2, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <MX_GPIO_Init+0x1a0>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c7e:	482d      	ldr	r0, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x1a4>)
 8000c80:	f001 fff4 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	482b      	ldr	r0, [pc, #172]	; (8000d38 <MX_GPIO_Init+0x1a8>)
 8000c8c:	f001 ffee 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2102      	movs	r1, #2
 8000c94:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_GPIO_Init+0x1ac>)
 8000c96:	f001 ffe9 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <MX_GPIO_Init+0x1b0>)
 8000cb0:	f001 fe2c 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cb4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0x1a4>)
 8000cce:	f001 fe1d 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	; (8000d38 <MX_GPIO_Init+0x1a8>)
 8000cec:	f001 fe0e 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_GPIO_Init+0x1b4>)
 8000d06:	f001 fe01 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_GPIO_Init+0x1ac>)
 8000d22:	f001 fdf3 	bl	800290c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58020400 	.word	0x58020400
 8000d38:	58020c00 	.word	0x58020c00
 8000d3c:	58021000 	.word	0x58021000
 8000d40:	58020800 	.word	0x58020800
 8000d44:	58021800 	.word	0x58021800

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x3c>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_MspInit+0x3c>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x3c>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f000 fc62 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000d82:	2004      	movs	r0, #4
 8000d84:	f000 fc79 	bl	800167a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a59      	ldr	r2, [pc, #356]	; (8000f18 <HAL_ETH_MspInit+0x184>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	f040 80ab 	bne.w	8000f0e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000db8:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbe:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de6:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000df4:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfa:	4a48      	ldr	r2, [pc, #288]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e04:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a39      	ldr	r2, [pc, #228]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e8a:	2332      	movs	r3, #50	; 0x32
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481e      	ldr	r0, [pc, #120]	; (8000f20 <HAL_ETH_MspInit+0x18c>)
 8000ea6:	f001 fd31 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eaa:	2386      	movs	r3, #134	; 0x86
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4817      	ldr	r0, [pc, #92]	; (8000f24 <HAL_ETH_MspInit+0x190>)
 8000ec6:	f001 fd21 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000edc:	230b      	movs	r3, #11
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <HAL_ETH_MspInit+0x194>)
 8000ee8:	f001 fd10 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efe:	230b      	movs	r3, #11
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <HAL_ETH_MspInit+0x198>)
 8000f0a:	f001 fcff 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3738      	adds	r7, #56	; 0x38
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40028000 	.word	0x40028000
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020800 	.word	0x58020800
 8000f24:	58020000 	.word	0x58020000
 8000f28:	58020400 	.word	0x58020400
 8000f2c:	58021800 	.word	0x58021800

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ba      	sub	sp, #232	; 0xe8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	22c0      	movs	r2, #192	; 0xc0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 fa39 	bl	80073c8 <memset>
  if(huart->Instance==USART3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <HAL_UART_MspInit+0xc8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d146      	bne.n	8000fee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f60:	f04f 0202 	mov.w	r2, #2
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fff2 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f82:	f7ff fee1 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_UART_MspInit+0xcc>)
 8000f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <HAL_UART_MspInit+0xcc>)
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0xcc>)
 8000f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0xcc>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0xcc>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0xcc>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_UART_MspInit+0xd0>)
 8000fea:	f001 fc8f 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	37e8      	adds	r7, #232	; 0xe8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004800 	.word	0x40004800
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020c00 	.word	0x58020c00

08001004 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0ba      	sub	sp, #232	; 0xe8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	22c0      	movs	r2, #192	; 0xc0
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f006 f9cf 	bl	80073c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d159      	bne.n	80010e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001034:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001040:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f002 ff87 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001058:	f7ff fe76 	bl	8000d48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800105c:	f001 ff8a 	bl	8002f74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800107e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001098:	230a      	movs	r3, #10
 800109a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <HAL_PCD_MspInit+0xf4>)
 80010a6:	f001 fc31 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <HAL_PCD_MspInit+0xf4>)
 80010c6:	f001 fc21 	bl	800290c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	37e8      	adds	r7, #232	; 0xe8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40080000 	.word	0x40080000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58020000 	.word	0x58020000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>
	...

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  if ((FLASH->SR1 & FLASH_SR_DBECCERR) || (FLASH->SR2 & FLASH_SR_DBECCERR)) {
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HardFault_Handler+0x24>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <HardFault_Handler+0x1e>
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HardFault_Handler+0x24>)
 8001116:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800111a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HardFault_Handler+0x22>
	  FLASH_IRQHandler();
 8001122:	f000 f827 	bl	8001174 <FLASH_IRQHandler>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x22>
 8001128:	52002000 	.word	0x52002000

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f92c 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001178:	f000 ff60 	bl	800203c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <SystemInit+0xe4>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <SystemInit+0xe4>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <SystemInit+0xe8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	2b06      	cmp	r3, #6
 800119e:	d807      	bhi.n	80011b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <SystemInit+0xe8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <SystemInit+0xe8>)
 80011aa:	f043 0307 	orr.w	r3, r3, #7
 80011ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	; (800126c <SystemInit+0xec>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a2d      	ldr	r2, [pc, #180]	; (800126c <SystemInit+0xec>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <SystemInit+0xec>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <SystemInit+0xec>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4929      	ldr	r1, [pc, #164]	; (800126c <SystemInit+0xec>)
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <SystemInit+0xf0>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <SystemInit+0xe8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <SystemInit+0xe8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 030f 	bic.w	r3, r3, #15
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <SystemInit+0xe8>)
 80011e4:	f043 0307 	orr.w	r3, r3, #7
 80011e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <SystemInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <SystemInit+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <SystemInit+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <SystemInit+0xec>)
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <SystemInit+0xf4>)
 8001200:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <SystemInit+0xec>)
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <SystemInit+0xf8>)
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <SystemInit+0xec>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <SystemInit+0xfc>)
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <SystemInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <SystemInit+0xec>)
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <SystemInit+0xfc>)
 8001218:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <SystemInit+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <SystemInit+0xec>)
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <SystemInit+0xfc>)
 8001224:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <SystemInit+0xec>)
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <SystemInit+0xec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <SystemInit+0xec>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <SystemInit+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <SystemInit+0x100>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <SystemInit+0x104>)
 8001244:	4013      	ands	r3, r2
 8001246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800124a:	d202      	bcs.n	8001252 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <SystemInit+0x108>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <SystemInit+0x10c>)
 8001254:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001258:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	52002000 	.word	0x52002000
 800126c:	58024400 	.word	0x58024400
 8001270:	eaf6ed7f 	.word	0xeaf6ed7f
 8001274:	02020200 	.word	0x02020200
 8001278:	01ff0000 	.word	0x01ff0000
 800127c:	01010280 	.word	0x01010280
 8001280:	5c001000 	.word	0x5c001000
 8001284:	ffff0000 	.word	0xffff0000
 8001288:	51008108 	.word	0x51008108
 800128c:	52004000 	.word	0x52004000

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001294:	f7ff ff74 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f006 f85f 	bl	8007380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff fb05 	bl	80008d0 <main>
  bx  lr
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d0:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 80012d4:	08007438 	.word	0x08007438
  ldr r2, =_sbss
 80012d8:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 80012dc:	240007d8 	.word	0x240007d8

080012e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC3_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f9a0 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012f0:	f002 fc60 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_Init+0x68>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	4913      	ldr	r1, [pc, #76]	; (8001350 <HAL_Init+0x6c>)
 8001302:	5ccb      	ldrb	r3, [r1, r3]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_Init+0x68>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_Init+0x6c>)
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x70>)
 8001326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_Init+0x74>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f814 	bl	800135c <HAL_InitTick>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e002      	b.n	8001344 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800133e:	f7ff fd09 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58024400 	.word	0x58024400
 8001350:	080073f0 	.word	0x080073f0
 8001354:	24000044 	.word	0x24000044
 8001358:	24000040 	.word	0x24000040

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_InitTick+0x60>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e021      	b.n	80013b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_InitTick+0x64>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f985 	bl	8001696 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	f000 f94f 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x68>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2400004c 	.word	0x2400004c
 80013c0:	24000040 	.word	0x24000040
 80013c4:	24000048 	.word	0x24000048

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2400004c 	.word	0x2400004c
 80013ec:	240007b8 	.word	0x240007b8

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	240007b8 	.word	0x240007b8

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2400004c 	.word	0x2400004c

08001450 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetREVID+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0c1b      	lsrs	r3, r3, #16
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	5c001000 	.word	0x5c001000

08001468 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001478:	4904      	ldr	r1, [pc, #16]	; (800148c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	58000400 	.word	0x58000400

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0000 	.word	0x05fa0000

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff29 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff40 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff90 	bl	8001584 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5f 	bl	8001530 <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff33 	bl	80014f4 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa4 	bl	80015ec <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0e3      	b.n	800188a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2223      	movs	r2, #35	; 0x23
 80016d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fb5d 	bl	8000d94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <HAL_ETH_Init+0x1e4>)
 80016dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e0:	4a6c      	ldr	r2, [pc, #432]	; (8001894 <HAL_ETH_Init+0x1e4>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <HAL_ETH_Init+0x1e4>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7a1b      	ldrb	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff feb1 	bl	8001468 <HAL_SYSCFG_ETHInterfaceSelect>
 8001706:	e003      	b.n	8001710 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001708:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800170c:	f7ff feac 	bl	8001468 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_ETH_Init+0x1e8>)
 8001712:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172c:	f7ff fe60 	bl	80013f0 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001732:	e011      	b.n	8001758 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001734:	f7ff fe5c 	bl	80013f0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001742:	d909      	bls.n	8001758 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2204      	movs	r2, #4
 8001748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	22e0      	movs	r2, #224	; 0xe0
 8001750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e098      	b.n	800188a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e4      	bne.n	8001734 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f89e 	bl	80018ac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001770:	f002 fb9a 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8001774:	4603      	mov	r3, r0
 8001776:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_ETH_Init+0x1ec>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0c9a      	lsrs	r2, r3, #18
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3a01      	subs	r2, #1
 8001784:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fa81 	bl	8001c90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800179a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	22e0      	movs	r2, #224	; 0xe0
 80017c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e05d      	b.n	800188a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_ETH_Init+0x1f0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6952      	ldr	r2, [r2, #20]
 80017e2:	0051      	lsls	r1, r2, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fae9 	bl	8001dca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fb2f 	bl	8001e5c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	3305      	adds	r3, #5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021a      	lsls	r2, r3, #8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	3304      	adds	r3, #4
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	3303      	adds	r3, #3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	061a      	lsls	r2, r3, #24
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	3302      	adds	r3, #2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800183c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800184a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800184c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_ETH_Init+0x1f4>)
 800185e:	430b      	orrs	r3, r1
 8001860:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_ETH_Init+0x1f8>)
 8001872:	430b      	orrs	r3, r1
 8001874:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2210      	movs	r2, #16
 8001884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	58024400 	.word	0x58024400
 8001898:	58000400 	.word	0x58000400
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	ffff8001 	.word	0xffff8001
 80018a4:	0c020060 	.word	0x0c020060
 80018a8:	0c20c000 	.word	0x0c20c000

080018ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018c6:	f002 faef 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 80018ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d804      	bhi.n	80018de <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e022      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_ETH_SetMDIOClockRange+0x90>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d204      	bcs.n	80018f0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e019      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <HAL_ETH_SetMDIOClockRange+0x94>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d915      	bls.n	8001924 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_ETH_SetMDIOClockRange+0x98>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d804      	bhi.n	800190a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e00c      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d804      	bhi.n	800191c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e003      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001922:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	02160ebf 	.word	0x02160ebf
 800193c:	03938700 	.word	0x03938700
 8001940:	05f5e0ff 	.word	0x05f5e0ff
 8001944:	08f0d17f 	.word	0x08f0d17f
 8001948:	0ee6b27f 	.word	0x0ee6b27f

0800194c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800195e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7b5b      	ldrb	r3, [r3, #13]
 8001974:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7b9b      	ldrb	r3, [r3, #14]
 800197c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800197e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7bdb      	ldrb	r3, [r3, #15]
 8001984:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001986:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	7c12      	ldrb	r2, [r2, #16]
 800198c:	2a00      	cmp	r2, #0
 800198e:	d102      	bne.n	8001996 <ETH_SetMACConfig+0x4a>
 8001990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001994:	e000      	b.n	8001998 <ETH_SetMACConfig+0x4c>
 8001996:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001998:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	7c52      	ldrb	r2, [r2, #17]
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d102      	bne.n	80019a8 <ETH_SetMACConfig+0x5c>
 80019a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a6:	e000      	b.n	80019aa <ETH_SetMACConfig+0x5e>
 80019a8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7c9b      	ldrb	r3, [r3, #18]
 80019b0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019b2:	431a      	orrs	r2, r3
               macconf->Speed |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80019b8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80019be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80019c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	7f5b      	ldrb	r3, [r3, #29]
 80019cc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	7f92      	ldrb	r2, [r2, #30]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d102      	bne.n	80019de <ETH_SetMACConfig+0x92>
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x94>
 80019de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	7fdb      	ldrb	r3, [r3, #31]
 80019e6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d102      	bne.n	80019fa <ETH_SetMACConfig+0xae>
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	e000      	b.n	80019fc <ETH_SetMACConfig+0xb0>
 80019fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019fc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a0a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a0c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <ETH_SetMACConfig+0x22c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a4a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d102      	bne.n	8001a5e <ETH_SetMACConfig+0x112>
 8001a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x114>
 8001a5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a60:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <ETH_SetMACConfig+0x230>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <ETH_SetMACConfig+0x234>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001aa8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d101      	bne.n	8001abe <ETH_SetMACConfig+0x172>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	e000      	b.n	8001ac0 <ETH_SetMACConfig+0x174>
 8001abe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ac0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ad2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001ae8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001af0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f023 0103 	bic.w	r1, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d101      	bne.n	8001b3a <ETH_SetMACConfig+0x1ee>
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	e000      	b.n	8001b3c <ETH_SetMACConfig+0x1f0>
 8001b3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	00048083 	.word	0x00048083
 8001b7c:	c0f88000 	.word	0xc0f88000
 8001b80:	fffffef0 	.word	0xfffffef0

08001b84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <ETH_SetDMAConfig+0xf8>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6811      	ldr	r1, [r2, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001baa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7b1b      	ldrb	r3, [r3, #12]
 8001bbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <ETH_SetDMAConfig+0xfc>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bdc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	7b5b      	ldrb	r3, [r3, #13]
 8001be2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <ETH_SetDMAConfig+0x100>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c08:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7f5b      	ldrb	r3, [r3, #29]
 8001c1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <ETH_SetDMAConfig+0x104>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7f1b      	ldrb	r3, [r3, #28]
 8001c46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <ETH_SetDMAConfig+0x108>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	430b      	orrs	r3, r1
 8001c68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c6c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	ffff87fd 	.word	0xffff87fd
 8001c80:	ffff2ffe 	.word	0xffff2ffe
 8001c84:	fffec000 	.word	0xfffec000
 8001c88:	ffc0efef 	.word	0xffc0efef
 8001c8c:	7fc0ffff 	.word	0x7fc0ffff

08001c90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0a4      	sub	sp, #144	; 0x90
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ce8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d12:	2300      	movs	r3, #0
 8001d14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fde6 	bl	800194c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001db0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fee1 	bl	8001b84 <ETH_SetDMAConfig>
}
 8001dc2:	bf00      	nop
 8001dc4:	3790      	adds	r7, #144	; 0x90
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e01d      	b.n	8001e14 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	3206      	adds	r2, #6
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3301      	adds	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d9de      	bls.n	8001dd8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e023      	b.n	8001eb2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	3212      	adds	r2, #18
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d9d8      	bls.n	8001e6a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f30:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_FLASH_Program+0x11c>)
 8001f32:	7d1b      	ldrb	r3, [r3, #20]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_FLASH_Program+0x24>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e076      	b.n	800202a <HAL_FLASH_Program+0x112>
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_FLASH_Program+0x11c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f48:	d306      	bcc.n	8001f58 <HAL_FLASH_Program+0x40>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001f50:	d202      	bcs.n	8001f58 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8001f56:	e00c      	b.n	8001f72 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001f5e:	d306      	bcc.n	8001f6e <HAL_FLASH_Program+0x56>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8001f66:	d202      	bcs.n	8001f6e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	e001      	b.n	8001f72 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e05b      	b.n	800202a <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_FLASH_Program+0x11c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001f78:	69b9      	ldr	r1, [r7, #24]
 8001f7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f7e:	f000 fa87 	bl	8002490 <FLASH_WaitForLastOperation>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8001f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d147      	bne.n	8002020 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_FLASH_Program+0x120>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_FLASH_Program+0x120>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	60d3      	str	r3, [r2, #12]
 8001fa2:	e007      	b.n	8001fb4 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_FLASH_Program+0x120>)
 8001fa6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <HAL_FLASH_Program+0x120>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001fb4:	f3bf 8f6f 	isb	sy
}
 8001fb8:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fba:	f3bf 8f4f 	dsb	sy
}
 8001fbe:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ef      	bne.n	8001fc0 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8001fe0:	f3bf 8f6f 	isb	sy
}
 8001fe4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001fe6:	f3bf 8f4f 	dsb	sy
}
 8001fea:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001fec:	69b9      	ldr	r1, [r7, #24]
 8001fee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ff2:	f000 fa4d 	bl	8002490 <FLASH_WaitForLastOperation>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d106      	bne.n	8002010 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_FLASH_Program+0x120>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <HAL_FLASH_Program+0x120>)
 8002008:	f023 0302 	bic.w	r3, r3, #2
 800200c:	60d3      	str	r3, [r2, #12]
 800200e:	e007      	b.n	8002020 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_FLASH_Program+0x120>)
 8002012:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_FLASH_Program+0x120>)
 8002018:	f023 0302 	bic.w	r3, r3, #2
 800201c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_FLASH_Program+0x11c>)
 8002022:	2200      	movs	r2, #0
 8002024:	751a      	strb	r2, [r3, #20]

  return status;
 8002026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	240007bc 	.word	0x240007bc
 8002038:	52002000 	.word	0x52002000

0800203c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 8002042:	4b7a      	ldr	r3, [pc, #488]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204e:	d15c      	bne.n	800210a <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 8002050:	4b77      	ldr	r3, [pc, #476]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d132      	bne.n	80020c0 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	4a73      	ldr	r2, [pc, #460]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002062:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
 8002064:	4b72      	ldr	r3, [pc, #456]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d018      	beq.n	800209e <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800206c:	4b70      	ldr	r3, [pc, #448]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f995 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 8002078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800207c:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
 800207e:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	3301      	adds	r3, #1
 8002084:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002086:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 8002088:	4b69      	ldr	r3, [pc, #420]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 800208e:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	461a      	mov	r2, r3
 8002094:	2101      	movs	r1, #1
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fbfa 	bl	8002890 <FLASH_Erase_Sector>
 800209c:	e035      	b.n	800210a <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a4:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80020a6:	4b62      	ldr	r3, [pc, #392]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 80020ac:	4b60      	ldr	r3, [pc, #384]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f975 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80020b6:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 80020b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020bc:	615a      	str	r2, [r3, #20]
 80020be:	e024      	b.n	800210a <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 80020c0:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d002      	beq.n	80020d2 <HAL_FLASH_IRQHandler+0x96>
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	d103      	bne.n	80020da <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f000 f964 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>
 80020d8:	e007      	b.n	80020ea <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d104      	bne.n	80020ea <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f95b 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d00c      	beq.n	800210a <HAL_FLASH_IRQHandler+0xce>
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d009      	beq.n	800210a <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d006      	beq.n	800210a <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80020fc:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 8002104:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002108:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 800210a:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 800210c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d15f      	bne.n	80021da <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 800211a:	4b45      	ldr	r3, [pc, #276]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b04      	cmp	r3, #4
 8002122:	d134      	bne.n	800218e <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	3b01      	subs	r3, #1
 800212a:	4a41      	ldr	r2, [pc, #260]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800212c:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f930 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002140:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 8002142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002146:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	4a37      	ldr	r2, [pc, #220]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002152:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 8002154:	4b36      	ldr	r3, [pc, #216]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 800215a:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	461a      	mov	r2, r3
 8002160:	2102      	movs	r1, #2
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fb94 	bl	8002890 <FLASH_Erase_Sector>
 8002168:	e037      	b.n	80021da <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800216c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002170:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002172:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f90f 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 8002184:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002188:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800218c:	e025      	b.n	80021da <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d002      	beq.n	80021a0 <HAL_FLASH_IRQHandler+0x164>
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b07      	cmp	r3, #7
 800219e:	d103      	bne.n	80021a8 <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 80021a0:	2002      	movs	r0, #2
 80021a2:	f000 f8fd 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>
 80021a6:	e007      	b.n	80021b8 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d104      	bne.n	80021b8 <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f8f4 	bl	80023a0 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00d      	beq.n	80021da <HAL_FLASH_IRQHandler+0x19e>
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d00a      	beq.n	80021da <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d007      	beq.n	80021da <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 80021d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 80021e2:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d02d      	beq.n	8002246 <HAL_FLASH_IRQHandler+0x20a>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80021f4:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_FLASH_IRQHandler+0x1f0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_FLASH_IRQHandler+0x1f4>)
 8002210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	e010      	b.n	800223a <HAL_FLASH_IRQHandler+0x1fe>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d002      	beq.n	8002224 <HAL_FLASH_IRQHandler+0x1e8>
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	2b07      	cmp	r3, #7
 8002222:	d107      	bne.n	8002234 <HAL_FLASH_IRQHandler+0x1f8>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
 8002224:	2301      	movs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e007      	b.n	800223a <HAL_FLASH_IRQHandler+0x1fe>
 800222a:	bf00      	nop
 800222c:	52002000 	.word	0x52002000
 8002230:	240007bc 	.word	0x240007bc
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
 8002234:	4b58      	ldr	r3, [pc, #352]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f8b7 	bl	80023b4 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank1 ECC single correction error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_SNECCERR_BANK1;
 8002246:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_FLASH_IRQHandler+0x230>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4313      	orrs	r3, r2
 800225e:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002260:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 8002262:	f7fe fa57 	bl	8000714 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank1 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 8002266:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH Bank1 ECC double detection error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_DBECCERR_BANK1;
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002274:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_FLASH_IRQHandler+0x256>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4313      	orrs	r3, r2
 8002284:	4a44      	ldr	r2, [pc, #272]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002286:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 8002288:	f7fe fa50 	bl	800072c <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank1 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800228c:	4a43      	ldr	r2, [pc, #268]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6153      	str	r3, [r2, #20]
#endif /* USE_FLASH_ECC */

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
 8002292:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002294:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002298:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800229c:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02d      	beq.n	8002300 <HAL_FLASH_IRQHandler+0x2c4>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b0:	4a39      	ldr	r2, [pc, #228]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022b2:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 80022b4:	4a39      	ldr	r2, [pc, #228]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022bc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d107      	bne.n	80022dc <HAL_FLASH_IRQHandler+0x2a0>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e00b      	b.n	80022f4 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d002      	beq.n	80022e8 <HAL_FLASH_IRQHandler+0x2ac>
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d102      	bne.n	80022ee <HAL_FLASH_IRQHandler+0x2b2>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
 80022e8:	2302      	movs	r3, #2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e002      	b.n	80022f4 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f85a 	bl	80023b4 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank2 ECC single correction error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_SNECCERR_BANK2;
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002302:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002306:	f003 4302 	and.w	r3, r3, #2181038080	; 0x82000000
 800230a:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00f      	beq.n	8002332 <HAL_FLASH_IRQHandler+0x2f6>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800231e:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002320:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 8002322:	f7fe f9f7 	bl	8000714 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank2 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 8002326:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800232e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

  /* Check FLASH Bank2 ECC double detection error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_DBECCERR_BANK2;
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002334:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002338:	f003 4304 	and.w	r3, r3, #2214592512	; 0x84000000
 800233c:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00f      	beq.n	8002364 <HAL_FLASH_IRQHandler+0x328>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002352:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 8002354:	f7fe f9ea 	bl	800072c <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank2 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002360:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d110      	bne.n	8002390 <HAL_FLASH_IRQHandler+0x354>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002374:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 8002378:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 800237c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_FLASH_IRQHandler+0x360>)
 8002382:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 8002386:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800238a:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_FLASH_IRQHandler+0x35c>)
 800238c:	2200      	movs	r2, #0
 800238e:	751a      	strb	r2, [r3, #20]
  }
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	240007bc 	.word	0x240007bc
 800239c:	52002000 	.word	0x52002000

080023a0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <HAL_FLASH_Unlock+0x6c>)
 80023dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_FLASH_Unlock+0x70>)
 80023e2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e018      	b.n	8002426 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 80023f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 8002404:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_FLASH_Unlock+0x6c>)
 8002406:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_FLASH_Unlock+0x70>)
 800240e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_FLASH_Unlock+0x68>)
 8002414:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	52002000 	.word	0x52002000
 8002434:	45670123 	.word	0x45670123
 8002438:	cdef89ab 	.word	0xcdef89ab

0800243c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_FLASH_Lock+0x50>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_FLASH_Lock+0x50>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_FLASH_Lock+0x50>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e011      	b.n	8002480 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_FLASH_Lock+0x50>)
 800245e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_FLASH_Lock+0x50>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_FLASH_Lock+0x50>)
 800246e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	52002000 	.word	0x52002000

08002490 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800249a:	2304      	movs	r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80024a2:	f7fe ffa5 	bl	80013f0 <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d113      	bne.n	80024d6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <FLASH_WaitForLastOperation+0x124>)
 80024b0:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80024b2:	e010      	b.n	80024d6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ba:	d00c      	beq.n	80024d6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024bc:	f7fe ff98 	bl	80013f0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d302      	bcc.n	80024d2 <FLASH_WaitForLastOperation+0x42>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e06a      	b.n	80025ac <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <FLASH_WaitForLastOperation+0x128>)
 80024da:	4013      	ands	r3, r2
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d10a      	bne.n	80024f8 <FLASH_WaitForLastOperation+0x68>
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e00c      	b.n	8002512 <FLASH_WaitForLastOperation+0x82>
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 80024fa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80024fe:	43da      	mvns	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4013      	ands	r3, r2
 8002504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ce      	bne.n	80024b4 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <FLASH_WaitForLastOperation+0x130>)
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	e007      	b.n	8002538 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 800252a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <FLASH_WaitForLastOperation+0x130>)
 8002530:	4013      	ands	r3, r2
 8002532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002536:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d017      	beq.n	8002572 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <FLASH_WaitForLastOperation+0x134>)
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <FLASH_WaitForLastOperation+0x134>)
 800254c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <FLASH_WaitForLastOperation+0x128>)
 8002552:	4013      	ands	r3, r2
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	429a      	cmp	r2, r3
 8002558:	d103      	bne.n	8002562 <FLASH_WaitForLastOperation+0xd2>
 800255a:	4a18      	ldr	r2, [pc, #96]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	6153      	str	r3, [r2, #20]
 8002560:	e005      	b.n	800256e <FLASH_WaitForLastOperation+0xde>
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800256a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e01c      	b.n	80025ac <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d10b      	bne.n	8002590 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d111      	bne.n	80025aa <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 8002588:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	e00c      	b.n	80025aa <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 8002592:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259e:	d104      	bne.n	80025aa <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <FLASH_WaitForLastOperation+0x12c>)
 80025a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	80000004 	.word	0x80000004
 80025b8:	1fef000f 	.word	0x1fef000f
 80025bc:	52002000 	.word	0x52002000
 80025c0:	17ee0000 	.word	0x17ee0000
 80025c4:	240007bc 	.word	0x240007bc

080025c8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025d6:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_FLASHEx_Erase+0x188>)
 80025d8:	7d1b      	ldrb	r3, [r3, #20]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_FLASHEx_Erase+0x1a>
 80025de:	2302      	movs	r3, #2
 80025e0:	e0b2      	b.n	8002748 <HAL_FLASHEx_Erase+0x180>
 80025e2:	4b5b      	ldr	r3, [pc, #364]	; (8002750 <HAL_FLASHEx_Erase+0x188>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025e8:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_FLASHEx_Erase+0x188>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80025fa:	2101      	movs	r1, #1
 80025fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002600:	f7ff ff46 	bl	8002490 <FLASH_WaitForLastOperation>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800261a:	2102      	movs	r1, #2
 800261c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002620:	f7ff ff36 	bl	8002490 <FLASH_WaitForLastOperation>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 8085 	bne.w	8002740 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d136      	bne.n	80026ac <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f000 f8b7 	bl	80027bc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00f      	beq.n	800267a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800265a:	2101      	movs	r1, #1
 800265c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002660:	f7ff ff16 	bl	8002490 <FLASH_WaitForLastOperation>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a38      	ldr	r2, [pc, #224]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 8002674:	f023 0308 	bic.w	r3, r3, #8
 8002678:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d05c      	beq.n	8002740 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002686:	2102      	movs	r1, #2
 8002688:	f24c 3050 	movw	r0, #50000	; 0xc350
 800268c:	f7ff ff00 	bl	8002490 <FLASH_WaitForLastOperation>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 800269c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 80026a2:	f023 0308 	bic.w	r3, r3, #8
 80026a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80026aa:	e049      	b.n	8002740 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	e039      	b.n	8002730 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f000 f8e2 	bl	8002890 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80026d8:	2101      	movs	r1, #1
 80026da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026de:	f7ff fed7 	bl	8002490 <FLASH_WaitForLastOperation>
 80026e2:	4603      	mov	r3, r0
 80026e4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	491a      	ldr	r1, [pc, #104]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_FLASHEx_Erase+0x190>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00e      	beq.n	800271c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 80026fe:	2102      	movs	r1, #2
 8002700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002704:	f7ff fec4 	bl	8002490 <FLASH_WaitForLastOperation>
 8002708:	4603      	mov	r3, r0
 800270a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 800270e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002712:	4910      	ldr	r1, [pc, #64]	; (8002754 <HAL_FLASHEx_Erase+0x18c>)
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_FLASHEx_Erase+0x190>)
 8002716:	4013      	ands	r3, r2
 8002718:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	601a      	str	r2, [r3, #0]
          break;
 8002728:	e00a      	b.n	8002740 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3301      	adds	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4413      	add	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d3bd      	bcc.n	80026bc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_FLASHEx_Erase+0x188>)
 8002742:	2200      	movs	r2, #0
 8002744:	751a      	strb	r2, [r3, #20]

  return status;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	240007bc 	.word	0x240007bc
 8002754:	52002000 	.word	0x52002000
 8002758:	fffff8fb 	.word	0xfffff8fb

0800275c <HAL_FLASHEx_EnableEccCorrectionInterrupt>:
  * @brief  Enable ECC correction interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccCorrectionInterrupt(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK1);
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 8002766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800276a:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK2);
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800276e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 8002774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002778:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	52002000 	.word	0x52002000

0800278c <HAL_FLASHEx_EnableEccDetectionInterrupt>:
  * @brief  Enable ECC Detection interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccDetectionInterrupt(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK1);
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 8002796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279a:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK2);
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800279e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 80027a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	52002000 	.word	0x52002000

080027bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d122      	bne.n	8002816 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <FLASH_MassErase+0xd0>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a2d      	ldr	r2, [pc, #180]	; (800288c <FLASH_MassErase+0xd0>)
 80027d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027da:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <FLASH_MassErase+0xd0>)
 80027de:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <FLASH_MassErase+0xd0>)
 80027e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027e8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <FLASH_MassErase+0xd0>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4926      	ldr	r1, [pc, #152]	; (800288c <FLASH_MassErase+0xd0>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <FLASH_MassErase+0xd0>)
 80027fa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80027fe:	4923      	ldr	r1, [pc, #140]	; (800288c <FLASH_MassErase+0xd0>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <FLASH_MassErase+0xd0>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <FLASH_MassErase+0xd0>)
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002814:	e033      	b.n	800287e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d011      	beq.n	8002844 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <FLASH_MassErase+0xd0>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <FLASH_MassErase+0xd0>)
 8002826:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800282a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <FLASH_MassErase+0xd0>)
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <FLASH_MassErase+0xd0>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <FLASH_MassErase+0xd0>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <FLASH_MassErase+0xd0>)
 800283e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002842:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d017      	beq.n	800287e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <FLASH_MassErase+0xd0>)
 8002850:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <FLASH_MassErase+0xd0>)
 8002856:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800285a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <FLASH_MassErase+0xd0>)
 8002860:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002864:	4909      	ldr	r1, [pc, #36]	; (800288c <FLASH_MassErase+0xd0>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <FLASH_MassErase+0xd0>)
 8002870:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002874:	4a05      	ldr	r2, [pc, #20]	; (800288c <FLASH_MassErase+0xd0>)
 8002876:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800287a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	52002000 	.word	0x52002000

08002890 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028ac:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80028b0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	0219      	lsls	r1, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	430b      	orrs	r3, r1
 80028be:	4313      	orrs	r3, r2
 80028c0:	4a11      	ldr	r2, [pc, #68]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028c2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80028c6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028da:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80028de:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0219      	lsls	r1, r3, #8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4313      	orrs	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <FLASH_Erase_Sector+0x78>)
 80028f4:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80028f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	52002000 	.word	0x52002000

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_GPIO_Init+0x234>)
 800291c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800291e:	e194      	b.n	8002c4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8186 	beq.w	8002c44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d005      	beq.n	8002950 <HAL_GPIO_Init+0x44>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d130      	bne.n	80029b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002986:	2201      	movs	r2, #1
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0201 	and.w	r2, r3, #1
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d017      	beq.n	80029ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d123      	bne.n	8002a42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80e0 	beq.w	8002c44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_GPIO_Init+0x238>)
 8002a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a8a:	4a2e      	ldr	r2, [pc, #184]	; (8002b44 <HAL_GPIO_Init+0x238>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_GPIO_Init+0x238>)
 8002a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a29      	ldr	r2, [pc, #164]	; (8002b48 <HAL_GPIO_Init+0x23c>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <HAL_GPIO_Init+0x240>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d052      	beq.n	8002b74 <HAL_GPIO_Init+0x268>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_GPIO_Init+0x244>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d031      	beq.n	8002b3a <HAL_GPIO_Init+0x22e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_GPIO_Init+0x248>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02b      	beq.n	8002b36 <HAL_GPIO_Init+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_GPIO_Init+0x24c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d025      	beq.n	8002b32 <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_GPIO_Init+0x250>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01f      	beq.n	8002b2e <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_GPIO_Init+0x254>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d019      	beq.n	8002b2a <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x258>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_GPIO_Init+0x25c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00d      	beq.n	8002b22 <HAL_GPIO_Init+0x216>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_GPIO_Init+0x260>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <HAL_GPIO_Init+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_GPIO_Init+0x264>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_GPIO_Init+0x20e>
 8002b16:	2309      	movs	r3, #9
 8002b18:	e02d      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	e02b      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	e029      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e027      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e025      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e023      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e021      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e01f      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e01d      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01b      	b.n	8002b76 <HAL_GPIO_Init+0x26a>
 8002b3e:	bf00      	nop
 8002b40:	58000080 	.word	0x58000080
 8002b44:	58024400 	.word	0x58024400
 8002b48:	58000400 	.word	0x58000400
 8002b4c:	58020000 	.word	0x58020000
 8002b50:	58020400 	.word	0x58020400
 8002b54:	58020800 	.word	0x58020800
 8002b58:	58020c00 	.word	0x58020c00
 8002b5c:	58021000 	.word	0x58021000
 8002b60:	58021400 	.word	0x58021400
 8002b64:	58021800 	.word	0x58021800
 8002b68:	58021c00 	.word	0x58021c00
 8002b6c:	58022000 	.word	0x58022000
 8002b70:	58022400 	.word	0x58022400
 8002b74:	2300      	movs	r3, #0
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	f002 0203 	and.w	r2, r2, #3
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	4093      	lsls	r3, r2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b86:	4938      	ldr	r1, [pc, #224]	; (8002c68 <HAL_GPIO_Init+0x35c>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f ae63 	bne.w	8002920 <HAL_GPIO_Init+0x14>
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3724      	adds	r7, #36	; 0x24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	58000400 	.word	0x58000400

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0fe      	b.n	8002eae <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fe f99d 	bl	8001004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 f8bc 	bl	8006e54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7c1a      	ldrb	r2, [r3, #16]
 8002ce4:	f88d 2000 	strb.w	r2, [sp]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cec:	f004 f840 	bl	8006d70 <USB_CoreInit>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0d5      	b.n	8002eae <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 f8b4 	bl	8006e76 <USB_SetCurrentMode>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0c6      	b.n	8002eae <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e04a      	b.n	8002dbc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3315      	adds	r3, #21
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3314      	adds	r3, #20
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	b298      	uxth	r0, r3
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	332e      	adds	r3, #46	; 0x2e
 8002d62:	4602      	mov	r2, r0
 8002d64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3318      	adds	r3, #24
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	331c      	adds	r3, #28
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3320      	adds	r3, #32
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3324      	adds	r3, #36	; 0x24
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	3301      	adds	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3af      	bcc.n	8002d26 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e044      	b.n	8002e56 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	791b      	ldrb	r3, [r3, #4]
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d3b5      	bcc.n	8002dcc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7c1a      	ldrb	r2, [r3, #16]
 8002e68:	f88d 2000 	strb.w	r2, [sp]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e70:	f004 f84e 	bl	8006f10 <USB_DevInit>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e013      	b.n	8002eae <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7b1b      	ldrb	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f80b 	bl	8002eb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 fa09 	bl	80072be <USB_DevDisconnect>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	10000003 	.word	0x10000003

08002f00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_PWREx_ConfigSupply+0x70>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d00a      	beq.n	8002f2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_PWREx_ConfigSupply+0x70>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e01f      	b.n	8002f66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e01d      	b.n	8002f66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_PWREx_ConfigSupply+0x70>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	490f      	ldr	r1, [pc, #60]	; (8002f70 <HAL_PWREx_ConfigSupply+0x70>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f3a:	f7fe fa59 	bl	80013f0 <HAL_GetTick>
 8002f3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f40:	e009      	b.n	8002f56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f42:	f7fe fa55 	bl	80013f0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f50:	d901      	bls.n	8002f56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e007      	b.n	8002f66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_PWREx_ConfigSupply+0x70>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d1ee      	bne.n	8002f42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	58024800 	.word	0x58024800

08002f74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	58024800 	.word	0x58024800

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	; 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f000 bc48 	b.w	8003838 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8088 	beq.w	80030c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b99      	ldr	r3, [pc, #612]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc0:	4b96      	ldr	r3, [pc, #600]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d007      	beq.n	8002fdc <HAL_RCC_OscConfig+0x48>
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b18      	cmp	r3, #24
 8002fd0:	d111      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62>
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	4b8f      	ldr	r3, [pc, #572]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d06d      	beq.n	80030c4 <HAL_RCC_OscConfig+0x130>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d169      	bne.n	80030c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f000 bc21 	b.w	8003838 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x7a>
 8003000:	4b86      	ldr	r3, [pc, #536]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a85      	ldr	r2, [pc, #532]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e02e      	b.n	800306c <HAL_RCC_OscConfig+0xd8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x9c>
 8003016:	4b81      	ldr	r3, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a80      	ldr	r2, [pc, #512]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b7e      	ldr	r3, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7d      	ldr	r2, [pc, #500]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xd8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0xc0>
 800303a:	4b78      	ldr	r3, [pc, #480]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a77      	ldr	r2, [pc, #476]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b75      	ldr	r3, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a74      	ldr	r2, [pc, #464]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xd8>
 8003054:	4b71      	ldr	r3, [pc, #452]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b6e      	ldr	r3, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6d      	ldr	r2, [pc, #436]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe f9bc 	bl	80013f0 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe f9b8 	bl	80013f0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e3d4      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xe8>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f9a8 	bl	80013f0 <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe f9a4 	bl	80013f0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e3c0      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030b6:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x110>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80ca 	beq.w	8003268 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d4:	4b51      	ldr	r3, [pc, #324]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030de:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_RCC_OscConfig+0x166>
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	2b18      	cmp	r3, #24
 80030ee:	d156      	bne.n	800319e <HAL_RCC_OscConfig+0x20a>
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d151      	bne.n	800319e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030fa:	4b48      	ldr	r3, [pc, #288]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x17e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e392      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 0219 	bic.w	r2, r3, #25
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	493f      	ldr	r1, [pc, #252]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe f964 	bl	80013f0 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312c:	f7fe f960 	bl	80013f0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e37c      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	f7fe f981 	bl	8001450 <HAL_GetREVID>
 800314e:	4603      	mov	r3, r0
 8003150:	f241 0203 	movw	r2, #4099	; 0x1003
 8003154:	4293      	cmp	r3, r2
 8003156:	d817      	bhi.n	8003188 <HAL_RCC_OscConfig+0x1f4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d108      	bne.n	8003172 <HAL_RCC_OscConfig+0x1de>
 8003160:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003168:	4a2c      	ldr	r2, [pc, #176]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800316a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003170:	e07a      	b.n	8003268 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	031b      	lsls	r3, r3, #12
 8003180:	4926      	ldr	r1, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003186:	e06f      	b.n	8003268 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	4921      	ldr	r1, [pc, #132]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800319c:	e064      	b.n	8003268 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d047      	beq.n	8003236 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0219 	bic.w	r2, r3, #25
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	491a      	ldr	r1, [pc, #104]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe f91a 	bl	80013f0 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe f916 	bl	80013f0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e332      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	f7fe f937 	bl	8001450 <HAL_GetREVID>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d819      	bhi.n	8003220 <HAL_RCC_OscConfig+0x28c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d108      	bne.n	8003206 <HAL_RCC_OscConfig+0x272>
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003202:	6053      	str	r3, [r2, #4]
 8003204:	e030      	b.n	8003268 <HAL_RCC_OscConfig+0x2d4>
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	031b      	lsls	r3, r3, #12
 8003214:	4901      	ldr	r1, [pc, #4]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
 800321a:	e025      	b.n	8003268 <HAL_RCC_OscConfig+0x2d4>
 800321c:	58024400 	.word	0x58024400
 8003220:	4b9a      	ldr	r3, [pc, #616]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	4997      	ldr	r1, [pc, #604]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e018      	b.n	8003268 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b95      	ldr	r3, [pc, #596]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a94      	ldr	r2, [pc, #592]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe f8d5 	bl	80013f0 <HAL_GetTick>
 8003246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fe f8d1 	bl	80013f0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e2ed      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800325c:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a9 	beq.w	80033c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003276:	4b85      	ldr	r3, [pc, #532]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003280:	4b82      	ldr	r3, [pc, #520]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d007      	beq.n	800329c <HAL_RCC_OscConfig+0x308>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b18      	cmp	r3, #24
 8003290:	d13a      	bne.n	8003308 <HAL_RCC_OscConfig+0x374>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d135      	bne.n	8003308 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800329c:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x320>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e2c1      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b4:	f7fe f8cc 	bl	8001450 <HAL_GetREVID>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80032be:	4293      	cmp	r3, r2
 80032c0:	d817      	bhi.n	80032f2 <HAL_RCC_OscConfig+0x35e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x348>
 80032ca:	4b70      	ldr	r3, [pc, #448]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032d2:	4a6e      	ldr	r2, [pc, #440]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032da:	e075      	b.n	80033c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	069b      	lsls	r3, r3, #26
 80032ea:	4968      	ldr	r1, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032f0:	e06a      	b.n	80033c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032f2:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	4962      	ldr	r1, [pc, #392]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003306:	e05f      	b.n	80033c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d042      	beq.n	8003396 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5d      	ldr	r2, [pc, #372]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f868 	bl	80013f0 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003324:	f7fe f864 	bl	80013f0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e280      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003336:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003342:	f7fe f885 	bl	8001450 <HAL_GetREVID>
 8003346:	4603      	mov	r3, r0
 8003348:	f241 0203 	movw	r2, #4099	; 0x1003
 800334c:	4293      	cmp	r3, r2
 800334e:	d817      	bhi.n	8003380 <HAL_RCC_OscConfig+0x3ec>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	2b20      	cmp	r3, #32
 8003356:	d108      	bne.n	800336a <HAL_RCC_OscConfig+0x3d6>
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003360:	4a4a      	ldr	r2, [pc, #296]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003366:	6053      	str	r3, [r2, #4]
 8003368:	e02e      	b.n	80033c8 <HAL_RCC_OscConfig+0x434>
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	069b      	lsls	r3, r3, #26
 8003378:	4944      	ldr	r1, [pc, #272]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
 800337e:	e023      	b.n	80033c8 <HAL_RCC_OscConfig+0x434>
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	493f      	ldr	r1, [pc, #252]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003390:	4313      	orrs	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
 8003394:	e018      	b.n	80033c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3c      	ldr	r2, [pc, #240]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe f825 	bl	80013f0 <HAL_GetTick>
 80033a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033aa:	f7fe f821 	bl	80013f0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e23d      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033bc:	4b33      	ldr	r3, [pc, #204]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d036      	beq.n	8003442 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d019      	beq.n	8003410 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	4a2a      	ldr	r2, [pc, #168]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe f802 	bl	80013f0 <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fd fffe 	bl	80013f0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e21a      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x45c>
 800340e:	e018      	b.n	8003442 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003410:	4b1e      	ldr	r3, [pc, #120]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fd ffe8 	bl	80013f0 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7fd ffe4 	bl	80013f0 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e200      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d039      	beq.n	80034c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01c      	beq.n	8003490 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a0c      	ldr	r2, [pc, #48]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800345c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003460:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003462:	f7fd ffc5 	bl	80013f0 <HAL_GetTick>
 8003466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800346a:	f7fd ffc1 	bl	80013f0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1dd      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x4d6>
 8003488:	e01b      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
 800348a:	bf00      	nop
 800348c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003490:	4b9b      	ldr	r3, [pc, #620]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a9a      	ldr	r2, [pc, #616]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800349a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800349c:	f7fd ffa8 	bl	80013f0 <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a4:	f7fd ffa4 	bl	80013f0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1c0      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034b6:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8081 	beq.w	80035d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034d0:	4b8c      	ldr	r3, [pc, #560]	; (8003704 <HAL_RCC_OscConfig+0x770>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a8b      	ldr	r2, [pc, #556]	; (8003704 <HAL_RCC_OscConfig+0x770>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034dc:	f7fd ff88 	bl	80013f0 <HAL_GetTick>
 80034e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fd ff84 	bl	80013f0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e1a0      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f6:	4b83      	ldr	r3, [pc, #524]	; (8003704 <HAL_RCC_OscConfig+0x770>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x584>
 800350a:	4b7d      	ldr	r3, [pc, #500]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a7c      	ldr	r2, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	e02d      	b.n	8003574 <HAL_RCC_OscConfig+0x5e0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <HAL_RCC_OscConfig+0x5a6>
 8003520:	4b77      	ldr	r3, [pc, #476]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a76      	ldr	r2, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b74      	ldr	r3, [pc, #464]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a73      	ldr	r2, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	e01c      	b.n	8003574 <HAL_RCC_OscConfig+0x5e0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x5c8>
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
 800354e:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0x5e0>
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a67      	ldr	r2, [pc, #412]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a64      	ldr	r2, [pc, #400]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd ff38 	bl	80013f0 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fd ff34 	bl	80013f0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e14e      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800359a:	4b59      	ldr	r3, [pc, #356]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCC_OscConfig+0x5f0>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fd ff22 	bl	80013f0 <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fd ff1e 	bl	80013f0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e138      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035c6:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ee      	bne.n	80035b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 812d 	beq.w	8003836 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035dc:	4b48      	ldr	r3, [pc, #288]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e4:	2b18      	cmp	r3, #24
 80035e6:	f000 80bd 	beq.w	8003764 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	f040 809e 	bne.w	8003730 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b42      	ldr	r3, [pc, #264]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a41      	ldr	r2, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fef6 	bl	80013f0 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fef2 	bl	80013f0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e10e      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362a:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_RCC_OscConfig+0x774>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	430a      	orrs	r2, r1
 800363a:	4931      	ldr	r1, [pc, #196]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	628b      	str	r3, [r1, #40]	; 0x28
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	3b01      	subs	r3, #1
 8003646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	3b01      	subs	r3, #1
 8003650:	025b      	lsls	r3, r3, #9
 8003652:	b29b      	uxth	r3, r3
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	3b01      	subs	r3, #1
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	3b01      	subs	r3, #1
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003670:	4923      	ldr	r1, [pc, #140]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800368e:	00d2      	lsls	r2, r2, #3
 8003690:	491b      	ldr	r1, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003692:	4313      	orrs	r3, r2
 8003694:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f023 020c 	bic.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4917      	ldr	r1, [pc, #92]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f023 0202 	bic.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	4912      	ldr	r1, [pc, #72]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_RCC_OscConfig+0x76c>)
 80036f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fd fe7b 	bl	80013f0 <HAL_GetTick>
 80036fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036fc:	e011      	b.n	8003722 <HAL_RCC_OscConfig+0x78e>
 80036fe:	bf00      	nop
 8003700:	58024400 	.word	0x58024400
 8003704:	58024800 	.word	0x58024800
 8003708:	fffffc0c 	.word	0xfffffc0c
 800370c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd fe6e 	bl	80013f0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e08a      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x77c>
 800372e:	e082      	b.n	8003836 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a42      	ldr	r2, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fe58 	bl	80013f0 <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fd fe54 	bl	80013f0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e070      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003756:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x7b0>
 8003762:	e068      	b.n	8003836 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800376a:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	d031      	beq.n	80037dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0203 	and.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d12a      	bne.n	80037dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d122      	bne.n	80037dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d11a      	bne.n	80037dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	0a5b      	lsrs	r3, r3, #9
 80037aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d111      	bne.n	80037dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d108      	bne.n	80037dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0e1b      	lsrs	r3, r3, #24
 80037ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e02b      	b.n	8003838 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	08db      	lsrs	r3, r3, #3
 80037e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d01f      	beq.n	8003836 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003802:	f7fd fdf5 	bl	80013f0 <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003808:	bf00      	nop
 800380a:	f7fd fdf1 	bl	80013f0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	4293      	cmp	r3, r2
 8003814:	d0f9      	beq.n	800380a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_OscConfig+0x8b0>)
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003822:	00d2      	lsls	r2, r2, #3
 8003824:	4906      	ldr	r1, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003826:	4313      	orrs	r3, r2
 8003828:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a04      	ldr	r2, [pc, #16]	; (8003840 <HAL_RCC_OscConfig+0x8ac>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3730      	adds	r7, #48	; 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	58024400 	.word	0x58024400
 8003844:	ffff0007 	.word	0xffff0007

08003848 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e19c      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b87      	ldr	r3, [pc, #540]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 020f 	bic.w	r2, r3, #15
 8003872:	4985      	ldr	r1, [pc, #532]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b83      	ldr	r3, [pc, #524]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e184      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b7b      	ldr	r3, [pc, #492]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d908      	bls.n	80038ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038a8:	4b78      	ldr	r3, [pc, #480]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4975      	ldr	r1, [pc, #468]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	4b70      	ldr	r3, [pc, #448]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d908      	bls.n	80038e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038d6:	4b6d      	ldr	r3, [pc, #436]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	496a      	ldr	r1, [pc, #424]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b64      	ldr	r3, [pc, #400]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003904:	4b61      	ldr	r3, [pc, #388]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	495e      	ldr	r1, [pc, #376]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003912:	4313      	orrs	r3, r2
 8003914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392e:	429a      	cmp	r2, r3
 8003930:	d908      	bls.n	8003944 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003932:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	4953      	ldr	r1, [pc, #332]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003940:	4313      	orrs	r3, r2
 8003942:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	429a      	cmp	r2, r3
 800395e:	d908      	bls.n	8003972 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f023 020f 	bic.w	r2, r3, #15
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4947      	ldr	r1, [pc, #284]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800396e:	4313      	orrs	r3, r2
 8003970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d055      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4940      	ldr	r1, [pc, #256]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800398c:	4313      	orrs	r3, r2
 800398e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003998:	4b3c      	ldr	r3, [pc, #240]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0f6      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0ea      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039c8:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0de      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0d6      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e8:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f023 0207 	bic.w	r2, r3, #7
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4925      	ldr	r1, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fa:	f7fd fcf9 	bl	80013f0 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a02:	f7fd fcf5 	bl	80013f0 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0be      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d1eb      	bne.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d208      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f023 020f 	bic.w	r2, r3, #15
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	490e      	ldr	r1, [pc, #56]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d214      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 020f 	bic.w	r2, r3, #15
 8003a6e:	4906      	ldr	r1, [pc, #24]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e086      	b.n	8003b96 <HAL_RCC_ClockConfig+0x34e>
 8003a88:	52002000 	.word	0x52002000
 8003a8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d208      	bcs.n	8003abe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aac:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	4939      	ldr	r1, [pc, #228]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d208      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	492e      	ldr	r1, [pc, #184]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d208      	bcs.n	8003b1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d208      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4917      	ldr	r1, [pc, #92]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b48:	f000 f834 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	4912      	ldr	r1, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x35c>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_ClockConfig+0x358>)
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <HAL_RCC_ClockConfig+0x35c>)
 8003b70:	5cd3      	ldrb	r3, [r2, r3]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x360>)
 8003b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x364>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x368>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fbe6 	bl	800135c <HAL_InitTick>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	080073f0 	.word	0x080073f0
 8003ba8:	24000044 	.word	0x24000044
 8003bac:	24000040 	.word	0x24000040
 8003bb0:	24000048 	.word	0x24000048

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bba:	4bb3      	ldr	r3, [pc, #716]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc2:	2b18      	cmp	r3, #24
 8003bc4:	f200 8155 	bhi.w	8003e72 <HAL_RCC_GetSysClockFreq+0x2be>
 8003bc8:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003e73 	.word	0x08003e73
 8003bd8:	08003e73 	.word	0x08003e73
 8003bdc:	08003e73 	.word	0x08003e73
 8003be0:	08003e73 	.word	0x08003e73
 8003be4:	08003e73 	.word	0x08003e73
 8003be8:	08003e73 	.word	0x08003e73
 8003bec:	08003e73 	.word	0x08003e73
 8003bf0:	08003c5b 	.word	0x08003c5b
 8003bf4:	08003e73 	.word	0x08003e73
 8003bf8:	08003e73 	.word	0x08003e73
 8003bfc:	08003e73 	.word	0x08003e73
 8003c00:	08003e73 	.word	0x08003e73
 8003c04:	08003e73 	.word	0x08003e73
 8003c08:	08003e73 	.word	0x08003e73
 8003c0c:	08003e73 	.word	0x08003e73
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003e73 	.word	0x08003e73
 8003c18:	08003e73 	.word	0x08003e73
 8003c1c:	08003e73 	.word	0x08003e73
 8003c20:	08003e73 	.word	0x08003e73
 8003c24:	08003e73 	.word	0x08003e73
 8003c28:	08003e73 	.word	0x08003e73
 8003c2c:	08003e73 	.word	0x08003e73
 8003c30:	08003c67 	.word	0x08003c67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c40:	4b91      	ldr	r3, [pc, #580]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	4a90      	ldr	r2, [pc, #576]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c52:	e111      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c54:	4b8d      	ldr	r3, [pc, #564]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c56:	61bb      	str	r3, [r7, #24]
      break;
 8003c58:	e10e      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c5a:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c5c:	61bb      	str	r3, [r7, #24]
      break;
 8003c5e:	e10b      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c60:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c62:	61bb      	str	r3, [r7, #24]
      break;
 8003c64:	e108      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c70:	4b85      	ldr	r3, [pc, #532]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c7c:	4b82      	ldr	r3, [pc, #520]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c86:	4b80      	ldr	r3, [pc, #512]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80e1 	beq.w	8003e6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	f000 8083 	beq.w	8003db8 <HAL_RCC_GetSysClockFreq+0x204>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	f200 80a1 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x248>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x114>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d056      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cc6:	e099      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02d      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cd4:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	4a6b      	ldr	r2, [pc, #428]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d2e:	e087      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d72:	e065      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003db6:	e043      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ea4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dfa:	e021      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	0a5b      	lsrs	r3, r3, #9
 8003e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e64:	ee17 3a90 	vmov	r3, s15
 8003e68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e6a:	e005      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
      break;
 8003e70:	e002      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e74:	61bb      	str	r3, [r7, #24]
      break;
 8003e76:	bf00      	nop
  }

  return sysclockfreq;
 8003e78:	69bb      	ldr	r3, [r7, #24]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	; 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	03d09000 	.word	0x03d09000
 8003e90:	003d0900 	.word	0x003d0900
 8003e94:	007a1200 	.word	0x007a1200
 8003e98:	46000000 	.word	0x46000000
 8003e9c:	4c742400 	.word	0x4c742400
 8003ea0:	4a742400 	.word	0x4a742400
 8003ea4:	4af42400 	.word	0x4af42400

08003ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003eae:	f7ff fe81 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	490f      	ldr	r1, [pc, #60]	; (8003efc <HAL_RCC_GetHCLKFreq+0x54>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_GetHCLKFreq+0x54>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ee4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x58>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	080073f0 	.word	0x080073f0
 8003f00:	24000044 	.word	0x24000044
 8003f04:	24000040 	.word	0x24000040

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f0c:	f7ff ffcc 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	080073f0 	.word	0x080073f0

08003f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f38:	f7ff ffb6 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4904      	ldr	r1, [pc, #16]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	080073f0 	.word	0x080073f0

08003f60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b0ca      	sub	sp, #296	; 0x128
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003f84:	2500      	movs	r5, #0
 8003f86:	ea54 0305 	orrs.w	r3, r4, r5
 8003f8a:	d049      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f96:	d02f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f9c:	d828      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa2:	d01a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa8:	d822      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb2:	d007      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb6:	4bb8      	ldr	r3, [pc, #736]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	4ab7      	ldr	r2, [pc, #732]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fc2:	e01a      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc8:	3308      	adds	r3, #8
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fc8f 	bl	80058f0 <RCCEx_PLL2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fd8:	e00f      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	3328      	adds	r3, #40	; 0x28
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fd36 	bl	8005a54 <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fee:	e004      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ff6:	e000      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004002:	4ba5      	ldr	r3, [pc, #660]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004010:	4aa1      	ldr	r2, [pc, #644]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004012:	430b      	orrs	r3, r1
 8004014:	6513      	str	r3, [r2, #80]	; 0x50
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800401c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800402c:	f04f 0900 	mov.w	r9, #0
 8004030:	ea58 0309 	orrs.w	r3, r8, r9
 8004034:	d047      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	2b04      	cmp	r3, #4
 800403e:	d82a      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800405d 	.word	0x0800405d
 800404c:	0800406b 	.word	0x0800406b
 8004050:	08004081 	.word	0x08004081
 8004054:	0800409f 	.word	0x0800409f
 8004058:	0800409f 	.word	0x0800409f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4b8e      	ldr	r3, [pc, #568]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a8d      	ldr	r2, [pc, #564]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004068:	e01a      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	3308      	adds	r3, #8
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fc3c 	bl	80058f0 <RCCEx_PLL2_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800407e:	e00f      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004084:	3328      	adds	r3, #40	; 0x28
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fce3 	bl	8005a54 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	f023 0107 	bic.w	r1, r3, #7
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	4a78      	ldr	r2, [pc, #480]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6513      	str	r3, [r2, #80]	; 0x50
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80040d2:	f04f 0b00 	mov.w	fp, #0
 80040d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80040da:	d04c      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e6:	d030      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80040e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ec:	d829      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040ee:	2bc0      	cmp	r3, #192	; 0xc0
 80040f0:	d02d      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040f2:	2bc0      	cmp	r3, #192	; 0xc0
 80040f4:	d825      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040f6:	2b80      	cmp	r3, #128	; 0x80
 80040f8:	d018      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d821      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d007      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004106:	e01c      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004108:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a62      	ldr	r2, [pc, #392]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800410e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004114:	e01c      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411a:	3308      	adds	r3, #8
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f001 fbe6 	bl	80058f0 <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800412a:	e011      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004130:	3328      	adds	r3, #40	; 0x28
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fc8d 	bl	8005a54 <RCCEx_PLL3_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800414e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004158:	4b4f      	ldr	r3, [pc, #316]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	4a4c      	ldr	r2, [pc, #304]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6513      	str	r3, [r2, #80]	; 0x50
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004182:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800418c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004190:	460b      	mov	r3, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	d053      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800419e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a2:	d035      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80041a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a8:	d82e      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041ae:	d031      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80041b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041b4:	d828      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ba:	d01a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80041bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c0:	d822      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80041c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ca:	d007      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80041cc:	e01c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ce:	4b32      	ldr	r3, [pc, #200]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4a31      	ldr	r2, [pc, #196]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041da:	e01c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	3308      	adds	r3, #8
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fb83 	bl	80058f0 <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041f0:	e011      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	3328      	adds	r3, #40	; 0x28
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 fc2a 	bl	8005a54 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004206:	e006      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800420e:	e002      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6593      	str	r3, [r2, #88]	; 0x58
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800424a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004254:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d056      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426a:	d038      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800426c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004270:	d831      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004276:	d034      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004278:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800427c:	d82b      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800427e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004282:	d01d      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004288:	d825      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800428e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004294:	e01f      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429c:	4ba2      	ldr	r3, [pc, #648]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4aa1      	ldr	r2, [pc, #644]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042a8:	e01c      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	3308      	adds	r3, #8
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fb1c 	bl	80058f0 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c4:	3328      	adds	r3, #40	; 0x28
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fbc3 	bl	8005a54 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042dc:	e002      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80042e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042ec:	4b8e      	ldr	r3, [pc, #568]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042fc:	4a8a      	ldr	r2, [pc, #552]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
 8004302:	e003      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004308:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004322:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	d03a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	2b30      	cmp	r3, #48	; 0x30
 8004334:	d01f      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d819      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d00c      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800433e:	2b20      	cmp	r3, #32
 8004340:	d815      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d019      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004346:	2b10      	cmp	r3, #16
 8004348:	d111      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434a:	4b77      	ldr	r3, [pc, #476]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	4a76      	ldr	r2, [pc, #472]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004356:	e011      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435c:	3308      	adds	r3, #8
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fac5 	bl	80058f0 <RCCEx_PLL2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800436c:	e006      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800437a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004384:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	4a65      	ldr	r2, [pc, #404]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004394:	430b      	orrs	r3, r1
 8004396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004398:	e003      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800439e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80043ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80043b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d051      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043cc:	d035      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80043ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d2:	d82e      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80043d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043d8:	d031      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80043da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043de:	d828      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80043e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e4:	d01a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80043e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ea:	d822      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d007      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80043f6:	e01c      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4a4a      	ldr	r2, [pc, #296]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004404:	e01c      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440a:	3308      	adds	r3, #8
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fa6e 	bl	80058f0 <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004420:	3328      	adds	r3, #40	; 0x28
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f001 fb15 	bl	8005a54 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	4a34      	ldr	r2, [pc, #208]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6513      	str	r3, [r2, #80]	; 0x50
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800447c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	d056      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d033      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004496:	d82c      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800449c:	d02f      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800449e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044a2:	d826      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044a8:	d02b      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80044aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044ae:	d820      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b4:	d012      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80044b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ba:	d81a      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d022      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d115      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	3308      	adds	r3, #8
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 fa0e 	bl	80058f0 <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044da:	e015      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	3328      	adds	r3, #40	; 0x28
 80044e2:	2101      	movs	r1, #1
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 fab5 	bl	8005a54 <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044f0:	e00a      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80044fa:	bf00      	nop
 80044fc:	e004      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80044fe:	bf00      	nop
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004514:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	4a02      	ldr	r2, [pc, #8]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004520:	430b      	orrs	r3, r1
 8004522:	6513      	str	r3, [r2, #80]	; 0x50
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004526:	bf00      	nop
 8004528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800454a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d055      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800455c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004560:	d033      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004566:	d82c      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d02f      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d826      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004578:	d02b      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800457a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800457e:	d820      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d012      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458a:	d81a      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d022      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004594:	d115      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	3308      	adds	r3, #8
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f9a6 	bl	80058f0 <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045aa:	e015      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	3328      	adds	r3, #40	; 0x28
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 fa4d 	bl	8005a54 <RCCEx_PLL3_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045c0:	e00a      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045c8:	e006      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045ca:	bf00      	nop
 80045cc:	e004      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045e0:	4ba3      	ldr	r3, [pc, #652]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f0:	4a9f      	ldr	r2, [pc, #636]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6593      	str	r3, [r2, #88]	; 0x58
 80045f6:	e003      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800460c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004610:	2300      	movs	r3, #0
 8004612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800461a:	460b      	mov	r3, r1
 800461c:	4313      	orrs	r3, r2
 800461e:	d037      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800462a:	d00e      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800462c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004630:	d816      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800463a:	d111      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800463c:	4b8c      	ldr	r3, [pc, #560]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a8b      	ldr	r2, [pc, #556]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004648:	e00f      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	3308      	adds	r3, #8
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f001 f94c 	bl	80058f0 <RCCEx_PLL2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800465e:	e004      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004672:	4b7f      	ldr	r3, [pc, #508]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a7b      	ldr	r2, [pc, #492]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004682:	430b      	orrs	r3, r1
 8004684:	6513      	str	r3, [r2, #80]	; 0x50
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800469c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d039      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d81c      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046fd 	.word	0x080046fd
 80046c4:	080046d1 	.word	0x080046d1
 80046c8:	080046df 	.word	0x080046df
 80046cc:	080046fd 	.word	0x080046fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d0:	4b67      	ldr	r3, [pc, #412]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a66      	ldr	r2, [pc, #408]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046dc:	e00f      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e2:	3308      	adds	r3, #8
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 f902 	bl	80058f0 <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046f2:	e004      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046fa:	e000      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80046fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004706:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	f023 0103 	bic.w	r1, r3, #3
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	4a56      	ldr	r2, [pc, #344]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004716:	430b      	orrs	r3, r1
 8004718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800473a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	f000 809f 	beq.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004746:	4b4b      	ldr	r3, [pc, #300]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a4a      	ldr	r2, [pc, #296]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004750:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004752:	f7fc fe4d 	bl	80013f0 <HAL_GetTick>
 8004756:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800475a:	e00b      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fc fe48 	bl	80013f0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b64      	cmp	r3, #100	; 0x64
 800476a:	d903      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004772:	e005      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004774:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ed      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004784:	2b00      	cmp	r3, #0
 8004786:	d179      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004788:	4b39      	ldr	r3, [pc, #228]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004790:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004794:	4053      	eors	r3, r2
 8004796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479a:	2b00      	cmp	r3, #0
 800479c:	d015      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800479e:	4b34      	ldr	r3, [pc, #208]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a30      	ldr	r2, [pc, #192]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a2d      	ldr	r2, [pc, #180]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047c2:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	d118      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fc fe0a 	bl	80013f0 <HAL_GetTick>
 80047dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e0:	e00d      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fc fe05 	bl	80013f0 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047ec:	1ad2      	subs	r2, r2, r3
 80047ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d903      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80047fc:	e005      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fe:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0eb      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800480a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800480e:	2b00      	cmp	r3, #0
 8004810:	d129      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800481a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004822:	d10e      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004834:	091a      	lsrs	r2, r3, #4
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004838:	4013      	ands	r3, r2
 800483a:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6113      	str	r3, [r2, #16]
 8004840:	e005      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004848:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800484c:	6113      	str	r3, [r2, #16]
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004850:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004860:	430b      	orrs	r3, r1
 8004862:	6713      	str	r3, [r2, #112]	; 0x70
 8004864:	e00e      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800486e:	e009      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004870:	58024400 	.word	0x58024400
 8004874:	58024800 	.word	0x58024800
 8004878:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f002 0301 	and.w	r3, r2, #1
 8004890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800489a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800489e:	460b      	mov	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f000 8089 	beq.w	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	2b28      	cmp	r3, #40	; 0x28
 80048ae:	d86b      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	08004991 	.word	0x08004991
 80048bc:	08004989 	.word	0x08004989
 80048c0:	08004989 	.word	0x08004989
 80048c4:	08004989 	.word	0x08004989
 80048c8:	08004989 	.word	0x08004989
 80048cc:	08004989 	.word	0x08004989
 80048d0:	08004989 	.word	0x08004989
 80048d4:	08004989 	.word	0x08004989
 80048d8:	0800495d 	.word	0x0800495d
 80048dc:	08004989 	.word	0x08004989
 80048e0:	08004989 	.word	0x08004989
 80048e4:	08004989 	.word	0x08004989
 80048e8:	08004989 	.word	0x08004989
 80048ec:	08004989 	.word	0x08004989
 80048f0:	08004989 	.word	0x08004989
 80048f4:	08004989 	.word	0x08004989
 80048f8:	08004973 	.word	0x08004973
 80048fc:	08004989 	.word	0x08004989
 8004900:	08004989 	.word	0x08004989
 8004904:	08004989 	.word	0x08004989
 8004908:	08004989 	.word	0x08004989
 800490c:	08004989 	.word	0x08004989
 8004910:	08004989 	.word	0x08004989
 8004914:	08004989 	.word	0x08004989
 8004918:	08004991 	.word	0x08004991
 800491c:	08004989 	.word	0x08004989
 8004920:	08004989 	.word	0x08004989
 8004924:	08004989 	.word	0x08004989
 8004928:	08004989 	.word	0x08004989
 800492c:	08004989 	.word	0x08004989
 8004930:	08004989 	.word	0x08004989
 8004934:	08004989 	.word	0x08004989
 8004938:	08004991 	.word	0x08004991
 800493c:	08004989 	.word	0x08004989
 8004940:	08004989 	.word	0x08004989
 8004944:	08004989 	.word	0x08004989
 8004948:	08004989 	.word	0x08004989
 800494c:	08004989 	.word	0x08004989
 8004950:	08004989 	.word	0x08004989
 8004954:	08004989 	.word	0x08004989
 8004958:	08004991 	.word	0x08004991
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004960:	3308      	adds	r3, #8
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f000 ffc3 	bl	80058f0 <RCCEx_PLL2_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004970:	e00f      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	3328      	adds	r3, #40	; 0x28
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f001 f86a 	bl	8005a54 <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800499a:	4bbf      	ldr	r3, [pc, #764]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a8:	4abb      	ldr	r2, [pc, #748]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	6553      	str	r3, [r2, #84]	; 0x54
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f002 0302 	and.w	r3, r2, #2
 80049c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d041      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d824      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80049e2:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a35 	.word	0x08004a35
 80049ec:	08004a01 	.word	0x08004a01
 80049f0:	08004a17 	.word	0x08004a17
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a35 	.word	0x08004a35
 80049fc:	08004a35 	.word	0x08004a35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a04:	3308      	adds	r3, #8
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 ff71 	bl	80058f0 <RCCEx_PLL2_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a14:	e00f      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1a:	3328      	adds	r3, #40	; 0x28
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f818 	bl	8005a54 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a2a:	e004      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a3e:	4b96      	ldr	r3, [pc, #600]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f023 0107 	bic.w	r1, r3, #7
 8004a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a4c:	4a92      	ldr	r2, [pc, #584]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6553      	str	r3, [r2, #84]	; 0x54
 8004a52:	e003      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f002 0304 	and.w	r3, r2, #4
 8004a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d044      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d825      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004aa9 	.word	0x08004aa9
 8004a98:	08004abf 	.word	0x08004abf
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004add 	.word	0x08004add
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aac:	3308      	adds	r3, #8
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ff1d 	bl	80058f0 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004abc:	e00f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac2:	3328      	adds	r3, #40	; 0x28
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 ffc4 	bl	8005a54 <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	f023 0107 	bic.w	r1, r3, #7
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af6:	4a68      	ldr	r2, [pc, #416]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6593      	str	r3, [r2, #88]	; 0x58
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f002 0320 	and.w	r3, r2, #32
 8004b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d055      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b32:	d033      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b38:	d82c      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d02f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d826      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b4a:	d02b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b50:	d820      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b56:	d012      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5c:	d81a      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d022      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b66:	d115      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 febd 	bl	80058f0 <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e015      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b82:	3328      	adds	r3, #40	; 0x28
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff64 	bl	8005a54 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b92:	e00a      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b9a:	e006      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b9c:	bf00      	nop
 8004b9e:	e004      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ba0:	bf00      	nop
 8004ba2:	e002      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb2:	4b39      	ldr	r3, [pc, #228]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	4a35      	ldr	r2, [pc, #212]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6553      	str	r3, [r2, #84]	; 0x54
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004be8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d058      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004bfe:	d033      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c04:	d82c      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0a:	d02f      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c10:	d826      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c16:	d02b      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c1c:	d820      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d012      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	d81a      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d022      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c32:	d115      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c38:	3308      	adds	r3, #8
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fe57 	bl	80058f0 <RCCEx_PLL2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c48:	e015      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	3328      	adds	r3, #40	; 0x28
 8004c50:	2102      	movs	r1, #2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fefe 	bl	8005a54 <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c66:	e006      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c68:	bf00      	nop
 8004c6a:	e004      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10e      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c8e:	4a02      	ldr	r2, [pc, #8]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d055      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ccc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cd0:	d033      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004cd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cd6:	d82c      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	d02f      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce2:	d826      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ce4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ce8:	d02b      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004cea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cee:	d820      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf4:	d012      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfa:	d81a      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d022      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d115      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fdee 	bl	80058f0 <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d1a:	e015      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	3328      	adds	r3, #40	; 0x28
 8004d22:	2102      	movs	r1, #2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fe95 	bl	8005a54 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d30:	e00a      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d50:	4ba1      	ldr	r3, [pc, #644]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d60:	4a9d      	ldr	r2, [pc, #628]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6593      	str	r3, [r2, #88]	; 0x58
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f002 0308 	and.w	r3, r2, #8
 8004d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d01e      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	3328      	adds	r3, #40	; 0x28
 8004da4:	2102      	movs	r1, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fe54 	bl	8005a54 <RCCEx_PLL3_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004db8:	4b87      	ldr	r3, [pc, #540]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc8:	4a83      	ldr	r2, [pc, #524]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f002 0310 	and.w	r3, r2, #16
 8004dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dde:	2300      	movs	r3, #0
 8004de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004de4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004de8:	460b      	mov	r3, r1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	d01e      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	3328      	adds	r3, #40	; 0x28
 8004e02:	2102      	movs	r1, #2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fe25 	bl	8005a54 <RCCEx_PLL3_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e26:	4a6c      	ldr	r2, [pc, #432]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	d03e      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e58:	d022      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e5e:	d81b      	bhi.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d00b      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004e6a:	e015      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	3308      	adds	r3, #8
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fd3b 	bl	80058f0 <RCCEx_PLL2_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e80:	e00f      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e86:	3328      	adds	r3, #40	; 0x28
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fde2 	bl	8005a54 <RCCEx_PLL3_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e96:	e004      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eaa:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eba:	4a47      	ldr	r2, [pc, #284]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	e003      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004ed6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ed8:	2300      	movs	r3, #0
 8004eda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004edc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ef2:	d01f      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ef4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ef8:	d818      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f04:	d007      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f06:	e011      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f08:	4b33      	ldr	r3, [pc, #204]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f14:	e00f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	3328      	adds	r3, #40	; 0x28
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd98 	bl	8005a54 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f2a:	e004      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f3e:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6553      	str	r3, [r2, #84]	; 0x54
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	677b      	str	r3, [r7, #116]	; 0x74
 8004f70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f74:	460b      	mov	r3, r1
 8004f76:	4313      	orrs	r3, r2
 8004f78:	d034      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d007      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004f8a:	e011      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f98:	e00e      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fca4 	bl	80058f0 <RCCEx_PLL2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fae:	e003      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10d      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	4a02      	ldr	r2, [pc, #8]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d00c      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	3328      	adds	r3, #40	; 0x28
 8005006:	2102      	movs	r1, #2
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fd23 	bl	8005a54 <RCCEx_PLL3_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005026:	663b      	str	r3, [r7, #96]	; 0x60
 8005028:	2300      	movs	r3, #0
 800502a:	667b      	str	r3, [r7, #100]	; 0x64
 800502c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005030:	460b      	mov	r3, r1
 8005032:	4313      	orrs	r3, r2
 8005034:	d038      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005042:	d018      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005048:	d811      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800504a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504e:	d014      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005054:	d80b      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d106      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005060:	4bc3      	ldr	r3, [pc, #780]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	4ac2      	ldr	r2, [pc, #776]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005074:	e004      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800507e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005088:	4bb9      	ldr	r3, [pc, #740]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005098:	4ab5      	ldr	r2, [pc, #724]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800509a:	430b      	orrs	r3, r1
 800509c:	6553      	str	r3, [r2, #84]	; 0x54
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80050b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80050b6:	2300      	movs	r3, #0
 80050b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80050be:	460b      	mov	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050c4:	4baa      	ldr	r3, [pc, #680]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d2:	4aa7      	ldr	r2, [pc, #668]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80050e4:	653b      	str	r3, [r7, #80]	; 0x50
 80050e6:	2300      	movs	r3, #0
 80050e8:	657b      	str	r3, [r7, #84]	; 0x54
 80050ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80050f4:	4b9e      	ldr	r3, [pc, #632]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005100:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005104:	4a9a      	ldr	r2, [pc, #616]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005106:	430b      	orrs	r3, r1
 8005108:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005116:	64bb      	str	r3, [r7, #72]	; 0x48
 8005118:	2300      	movs	r3, #0
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005120:	460b      	mov	r3, r1
 8005122:	4313      	orrs	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005126:	4b92      	ldr	r3, [pc, #584]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005134:	4a8e      	ldr	r2, [pc, #568]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005136:	430b      	orrs	r3, r1
 8005138:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005146:	643b      	str	r3, [r7, #64]	; 0x40
 8005148:	2300      	movs	r3, #0
 800514a:	647b      	str	r3, [r7, #68]	; 0x44
 800514c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005150:	460b      	mov	r3, r1
 8005152:	4313      	orrs	r3, r2
 8005154:	d00e      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005156:	4b86      	ldr	r3, [pc, #536]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	4a85      	ldr	r2, [pc, #532]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800515c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005160:	6113      	str	r3, [r2, #16]
 8005162:	4b83      	ldr	r3, [pc, #524]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005164:	6919      	ldr	r1, [r3, #16]
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800516e:	4a80      	ldr	r2, [pc, #512]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005170:	430b      	orrs	r3, r1
 8005172:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005180:	63bb      	str	r3, [r7, #56]	; 0x38
 8005182:	2300      	movs	r3, #0
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005186:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d009      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005190:	4b77      	ldr	r3, [pc, #476]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	4a74      	ldr	r2, [pc, #464]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
 80051b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051c0:	4b6b      	ldr	r3, [pc, #428]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d0:	4a67      	ldr	r2, [pc, #412]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	2100      	movs	r1, #0
 80051e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80051ec:	460b      	mov	r3, r1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	d011      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f6:	3308      	adds	r3, #8
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fb78 	bl	80058f0 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	2100      	movs	r1, #0
 8005220:	6239      	str	r1, [r7, #32]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
 8005228:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d011      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005236:	3308      	adds	r3, #8
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fb58 	bl	80058f0 <RCCEx_PLL2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	2100      	movs	r1, #0
 8005260:	61b9      	str	r1, [r7, #24]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800526c:	460b      	mov	r3, r1
 800526e:	4313      	orrs	r3, r2
 8005270:	d011      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005276:	3308      	adds	r3, #8
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb38 	bl	80058f0 <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	2100      	movs	r1, #0
 80052a0:	6139      	str	r1, [r7, #16]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d011      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b6:	3328      	adds	r3, #40	; 0x28
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fbca 	bl	8005a54 <RCCEx_PLL3_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80052c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	2100      	movs	r1, #0
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052ec:	460b      	mov	r3, r1
 80052ee:	4313      	orrs	r3, r2
 80052f0:	d011      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f6:	3328      	adds	r3, #40	; 0x28
 80052f8:	2101      	movs	r1, #1
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fbaa 	bl	8005a54 <RCCEx_PLL3_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	2100      	movs	r1, #0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	e9d7 1200 	ldrd	r1, r2, [r7]
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d011      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005336:	3328      	adds	r3, #40	; 0x28
 8005338:	2102      	movs	r1, #2
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb8a 	bl	8005a54 <RCCEx_PLL3_Config>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005356:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005370:	58024400 	.word	0x58024400

08005374 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005378:	f7fe fd96 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	58024400 	.word	0x58024400
 800539c:	080073f0 	.word	0x080073f0

080053a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	; 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053a8:	4ba1      	ldr	r3, [pc, #644]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80053b2:	4b9f      	ldr	r3, [pc, #636]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	0b1b      	lsrs	r3, r3, #12
 80053b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053be:	4b9c      	ldr	r3, [pc, #624]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80053ca:	4b99      	ldr	r3, [pc, #612]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	08db      	lsrs	r3, r3, #3
 80053d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8111 	beq.w	8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	f000 8083 	beq.w	80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	f200 80a1 	bhi.w	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d056      	beq.n	80054b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800540a:	e099      	b.n	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800540c:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02d      	beq.n	8005474 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005418:	4b85      	ldr	r3, [pc, #532]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	4a84      	ldr	r2, [pc, #528]	; (8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b7b      	ldr	r3, [pc, #492]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a03 	vldr	s12, [r7, #12]
 8005456:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005472:	e087      	b.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800563c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a03 	vldr	s12, [r7, #12]
 800549a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b6:	e065      	b.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ca:	4b59      	ldr	r3, [pc, #356]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054da:	ed97 6a03 	vldr	s12, [r7, #12]
 80054de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054fa:	e043      	b.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550e:	4b48      	ldr	r3, [pc, #288]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005522:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553e:	e021      	b.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b37      	ldr	r3, [pc, #220]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a03 	vldr	s12, [r7, #12]
 8005566:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005582:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005584:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	0a5b      	lsrs	r3, r3, #9
 800558a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800559a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800559e:	edd7 6a07 	vldr	s13, [r7, #28]
 80055a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055aa:	ee17 2a90 	vmov	r2, s15
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80055b2:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	0c1b      	lsrs	r3, r3, #16
 80055b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d8:	ee17 2a90 	vmov	r2, s15
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	0e1b      	lsrs	r3, r3, #24
 80055e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80055fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005606:	ee17 2a90 	vmov	r2, s15
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800560e:	e008      	b.n	8005622 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	609a      	str	r2, [r3, #8]
}
 8005622:	bf00      	nop
 8005624:	3724      	adds	r7, #36	; 0x24
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	58024400 	.word	0x58024400
 8005634:	03d09000 	.word	0x03d09000
 8005638:	46000000 	.word	0x46000000
 800563c:	4c742400 	.word	0x4c742400
 8005640:	4a742400 	.word	0x4a742400
 8005644:	4af42400 	.word	0x4af42400

08005648 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005650:	4ba1      	ldr	r3, [pc, #644]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800565a:	4b9f      	ldr	r3, [pc, #636]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	0d1b      	lsrs	r3, r3, #20
 8005660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005664:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005666:	4b9c      	ldr	r3, [pc, #624]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005672:	4b99      	ldr	r3, [pc, #612]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	08db      	lsrs	r3, r3, #3
 8005678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8111 	beq.w	80058b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b02      	cmp	r3, #2
 800569a:	f000 8083 	beq.w	80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	f200 80a1 	bhi.w	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d056      	beq.n	8005760 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056b2:	e099      	b.n	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b4:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02d      	beq.n	800571c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056c0:	4b85      	ldr	r3, [pc, #532]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	08db      	lsrs	r3, r3, #3
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	4a84      	ldr	r2, [pc, #528]	; (80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
 80056d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ea:	4b7b      	ldr	r3, [pc, #492]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80056fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005716:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800571a:	e087      	b.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800572a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572e:	4b6a      	ldr	r3, [pc, #424]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005742:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800575e:	e065      	b.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005772:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005782:	ed97 6a03 	vldr	s12, [r7, #12]
 8005786:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800578a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057a2:	e043      	b.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b48      	ldr	r3, [pc, #288]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e6:	e021      	b.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a03 	vldr	s12, [r7, #12]
 800580e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800582c:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	0a5b      	lsrs	r3, r3, #9
 8005832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005846:	edd7 6a07 	vldr	s13, [r7, #28]
 800584a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800584e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005852:	ee17 2a90 	vmov	r2, s15
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800585a:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005874:	edd7 6a07 	vldr	s13, [r7, #28]
 8005878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005880:	ee17 2a90 	vmov	r2, s15
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005888:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	0e1b      	lsrs	r3, r3, #24
 800588e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800589e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ae:	ee17 2a90 	vmov	r2, s15
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058b6:	e008      	b.n	80058ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
}
 80058ca:	bf00      	nop
 80058cc:	3724      	adds	r7, #36	; 0x24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	58024400 	.word	0x58024400
 80058dc:	03d09000 	.word	0x03d09000
 80058e0:	46000000 	.word	0x46000000
 80058e4:	4c742400 	.word	0x4c742400
 80058e8:	4a742400 	.word	0x4a742400
 80058ec:	4af42400 	.word	0x4af42400

080058f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058fe:	4b53      	ldr	r3, [pc, #332]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d101      	bne.n	800590e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e099      	b.n	8005a42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800590e:	4b4f      	ldr	r3, [pc, #316]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a4e      	ldr	r2, [pc, #312]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005914:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591a:	f7fb fd69 	bl	80013f0 <HAL_GetTick>
 800591e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005920:	e008      	b.n	8005934 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005922:	f7fb fd65 	bl	80013f0 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e086      	b.n	8005a42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005934:	4b45      	ldr	r3, [pc, #276]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005940:	4b42      	ldr	r3, [pc, #264]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	493f      	ldr	r1, [pc, #252]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005950:	4313      	orrs	r3, r2
 8005952:	628b      	str	r3, [r1, #40]	; 0x28
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	3b01      	subs	r3, #1
 8005964:	025b      	lsls	r3, r3, #9
 8005966:	b29b      	uxth	r3, r3
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	3b01      	subs	r3, #1
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005984:	4931      	ldr	r1, [pc, #196]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005986:	4313      	orrs	r3, r2
 8005988:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800598a:	4b30      	ldr	r3, [pc, #192]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	492d      	ldr	r1, [pc, #180]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005998:	4313      	orrs	r3, r2
 800599a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	f023 0220 	bic.w	r2, r3, #32
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	4928      	ldr	r1, [pc, #160]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059ae:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4a26      	ldr	r2, [pc, #152]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059b4:	f023 0310 	bic.w	r3, r3, #16
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <RCCEx_PLL2_Config+0x160>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	69d2      	ldr	r2, [r2, #28]
 80059c6:	00d2      	lsls	r2, r2, #3
 80059c8:	4920      	ldr	r1, [pc, #128]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059ce:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059d4:	f043 0310 	orr.w	r3, r3, #16
 80059d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059ec:	e00f      	b.n	8005a0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d106      	bne.n	8005a02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a14      	ldr	r2, [pc, #80]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a00:	e005      	b.n	8005a0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a02:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005a14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fb fce9 	bl	80013f0 <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a20:	e008      	b.n	8005a34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a22:	f7fb fce5 	bl	80013f0 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e006      	b.n	8005a42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <RCCEx_PLL2_Config+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	ffff0007 	.word	0xffff0007

08005a54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a62:	4b53      	ldr	r3, [pc, #332]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d101      	bne.n	8005a72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e099      	b.n	8005ba6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a72:	4b4f      	ldr	r3, [pc, #316]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4e      	ldr	r2, [pc, #312]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7e:	f7fb fcb7 	bl	80013f0 <HAL_GetTick>
 8005a82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a84:	e008      	b.n	8005a98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a86:	f7fb fcb3 	bl	80013f0 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e086      	b.n	8005ba6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a98:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005aa4:	4b42      	ldr	r3, [pc, #264]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	051b      	lsls	r3, r3, #20
 8005ab2:	493f      	ldr	r1, [pc, #252]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	025b      	lsls	r3, r3, #9
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	061b      	lsls	r3, r3, #24
 8005ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ae8:	4931      	ldr	r1, [pc, #196]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	492d      	ldr	r1, [pc, #180]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b00:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	4928      	ldr	r1, [pc, #160]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b12:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <RCCEx_PLL3_Config+0x160>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	69d2      	ldr	r2, [r2, #28]
 8005b2a:	00d2      	lsls	r2, r2, #3
 8005b2c:	4920      	ldr	r1, [pc, #128]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b32:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b50:	e00f      	b.n	8005b72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d106      	bne.n	8005b66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b64:	e005      	b.n	8005b72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b66:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fb fc37 	bl	80013f0 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b84:	e008      	b.n	8005b98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b86:	f7fb fc33 	bl	80013f0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	ffff0007 	.word	0xffff0007

08005bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e042      	b.n	8005c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fb f9a7 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2224      	movs	r2, #36	; 0x24
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fd90 	bl	8006728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f825 	bl	8005c58 <UART_SetConfig>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e01b      	b.n	8005c50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fe0f 	bl	800686c <UART_CheckIdleState>
 8005c4e:	4603      	mov	r3, r0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b092      	sub	sp, #72	; 0x48
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4bbe      	ldr	r3, [pc, #760]	; (8005f80 <UART_SetConfig+0x328>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4ab3      	ldr	r2, [pc, #716]	; (8005f84 <UART_SetConfig+0x32c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	4baf      	ldr	r3, [pc, #700]	; (8005f88 <UART_SetConfig+0x330>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	f023 010f 	bic.w	r1, r3, #15
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4aa6      	ldr	r2, [pc, #664]	; (8005f8c <UART_SetConfig+0x334>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d177      	bne.n	8005de8 <UART_SetConfig+0x190>
 8005cf8:	4ba5      	ldr	r3, [pc, #660]	; (8005f90 <UART_SetConfig+0x338>)
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d00:	2b28      	cmp	r3, #40	; 0x28
 8005d02:	d86d      	bhi.n	8005de0 <UART_SetConfig+0x188>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <UART_SetConfig+0xb4>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005db1 	.word	0x08005db1
 8005d10:	08005de1 	.word	0x08005de1
 8005d14:	08005de1 	.word	0x08005de1
 8005d18:	08005de1 	.word	0x08005de1
 8005d1c:	08005de1 	.word	0x08005de1
 8005d20:	08005de1 	.word	0x08005de1
 8005d24:	08005de1 	.word	0x08005de1
 8005d28:	08005de1 	.word	0x08005de1
 8005d2c:	08005db9 	.word	0x08005db9
 8005d30:	08005de1 	.word	0x08005de1
 8005d34:	08005de1 	.word	0x08005de1
 8005d38:	08005de1 	.word	0x08005de1
 8005d3c:	08005de1 	.word	0x08005de1
 8005d40:	08005de1 	.word	0x08005de1
 8005d44:	08005de1 	.word	0x08005de1
 8005d48:	08005de1 	.word	0x08005de1
 8005d4c:	08005dc1 	.word	0x08005dc1
 8005d50:	08005de1 	.word	0x08005de1
 8005d54:	08005de1 	.word	0x08005de1
 8005d58:	08005de1 	.word	0x08005de1
 8005d5c:	08005de1 	.word	0x08005de1
 8005d60:	08005de1 	.word	0x08005de1
 8005d64:	08005de1 	.word	0x08005de1
 8005d68:	08005de1 	.word	0x08005de1
 8005d6c:	08005dc9 	.word	0x08005dc9
 8005d70:	08005de1 	.word	0x08005de1
 8005d74:	08005de1 	.word	0x08005de1
 8005d78:	08005de1 	.word	0x08005de1
 8005d7c:	08005de1 	.word	0x08005de1
 8005d80:	08005de1 	.word	0x08005de1
 8005d84:	08005de1 	.word	0x08005de1
 8005d88:	08005de1 	.word	0x08005de1
 8005d8c:	08005dd1 	.word	0x08005dd1
 8005d90:	08005de1 	.word	0x08005de1
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005de1 	.word	0x08005de1
 8005d9c:	08005de1 	.word	0x08005de1
 8005da0:	08005de1 	.word	0x08005de1
 8005da4:	08005de1 	.word	0x08005de1
 8005da8:	08005de1 	.word	0x08005de1
 8005dac:	08005dd9 	.word	0x08005dd9
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db6:	e222      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005db8:	2304      	movs	r3, #4
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e21e      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e21a      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e216      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e212      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e20e      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e20a      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a69      	ldr	r2, [pc, #420]	; (8005f94 <UART_SetConfig+0x33c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d130      	bne.n	8005e54 <UART_SetConfig+0x1fc>
 8005df2:	4b67      	ldr	r3, [pc, #412]	; (8005f90 <UART_SetConfig+0x338>)
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d826      	bhi.n	8005e4c <UART_SetConfig+0x1f4>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x1ac>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e1d 	.word	0x08005e1d
 8005e08:	08005e25 	.word	0x08005e25
 8005e0c:	08005e2d 	.word	0x08005e2d
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e22:	e1ec      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2a:	e1e8      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e32:	e1e4      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3a:	e1e0      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e42:	e1dc      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e1d8      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e1d4      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a4f      	ldr	r2, [pc, #316]	; (8005f98 <UART_SetConfig+0x340>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d130      	bne.n	8005ec0 <UART_SetConfig+0x268>
 8005e5e:	4b4c      	ldr	r3, [pc, #304]	; (8005f90 <UART_SetConfig+0x338>)
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d826      	bhi.n	8005eb8 <UART_SetConfig+0x260>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x218>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8e:	e1b6      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e96:	e1b2      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9e:	e1ae      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e1aa      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e1a6      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005eb0:	2340      	movs	r3, #64	; 0x40
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e1a2      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e19e      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a35      	ldr	r2, [pc, #212]	; (8005f9c <UART_SetConfig+0x344>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d130      	bne.n	8005f2c <UART_SetConfig+0x2d4>
 8005eca:	4b31      	ldr	r3, [pc, #196]	; (8005f90 <UART_SetConfig+0x338>)
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d826      	bhi.n	8005f24 <UART_SetConfig+0x2cc>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0x284>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005efd 	.word	0x08005efd
 8005ee4:	08005f05 	.word	0x08005f05
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e180      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e17c      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e178      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e174      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e170      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e16c      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e168      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <UART_SetConfig+0x348>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d142      	bne.n	8005fbc <UART_SetConfig+0x364>
 8005f36:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <UART_SetConfig+0x338>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d838      	bhi.n	8005fb4 <UART_SetConfig+0x35c>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x2f0>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f61 	.word	0x08005f61
 8005f4c:	08005f69 	.word	0x08005f69
 8005f50:	08005f71 	.word	0x08005f71
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005fa5 	.word	0x08005fa5
 8005f5c:	08005fad 	.word	0x08005fad
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f66:	e14a      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e146      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e142      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e13e      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005f80:	cfff69f3 	.word	0xcfff69f3
 8005f84:	58000c00 	.word	0x58000c00
 8005f88:	11fff4ff 	.word	0x11fff4ff
 8005f8c:	40011000 	.word	0x40011000
 8005f90:	58024400 	.word	0x58024400
 8005f94:	40004400 	.word	0x40004400
 8005f98:	40004800 	.word	0x40004800
 8005f9c:	40004c00 	.word	0x40004c00
 8005fa0:	40005000 	.word	0x40005000
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e128      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e124      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e120      	b.n	80061fe <UART_SetConfig+0x5a6>
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4acb      	ldr	r2, [pc, #812]	; (80062f0 <UART_SetConfig+0x698>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d176      	bne.n	80060b4 <UART_SetConfig+0x45c>
 8005fc6:	4bcb      	ldr	r3, [pc, #812]	; (80062f4 <UART_SetConfig+0x69c>)
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fce:	2b28      	cmp	r3, #40	; 0x28
 8005fd0:	d86c      	bhi.n	80060ac <UART_SetConfig+0x454>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <UART_SetConfig+0x380>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	0800607d 	.word	0x0800607d
 8005fdc:	080060ad 	.word	0x080060ad
 8005fe0:	080060ad 	.word	0x080060ad
 8005fe4:	080060ad 	.word	0x080060ad
 8005fe8:	080060ad 	.word	0x080060ad
 8005fec:	080060ad 	.word	0x080060ad
 8005ff0:	080060ad 	.word	0x080060ad
 8005ff4:	080060ad 	.word	0x080060ad
 8005ff8:	08006085 	.word	0x08006085
 8005ffc:	080060ad 	.word	0x080060ad
 8006000:	080060ad 	.word	0x080060ad
 8006004:	080060ad 	.word	0x080060ad
 8006008:	080060ad 	.word	0x080060ad
 800600c:	080060ad 	.word	0x080060ad
 8006010:	080060ad 	.word	0x080060ad
 8006014:	080060ad 	.word	0x080060ad
 8006018:	0800608d 	.word	0x0800608d
 800601c:	080060ad 	.word	0x080060ad
 8006020:	080060ad 	.word	0x080060ad
 8006024:	080060ad 	.word	0x080060ad
 8006028:	080060ad 	.word	0x080060ad
 800602c:	080060ad 	.word	0x080060ad
 8006030:	080060ad 	.word	0x080060ad
 8006034:	080060ad 	.word	0x080060ad
 8006038:	08006095 	.word	0x08006095
 800603c:	080060ad 	.word	0x080060ad
 8006040:	080060ad 	.word	0x080060ad
 8006044:	080060ad 	.word	0x080060ad
 8006048:	080060ad 	.word	0x080060ad
 800604c:	080060ad 	.word	0x080060ad
 8006050:	080060ad 	.word	0x080060ad
 8006054:	080060ad 	.word	0x080060ad
 8006058:	0800609d 	.word	0x0800609d
 800605c:	080060ad 	.word	0x080060ad
 8006060:	080060ad 	.word	0x080060ad
 8006064:	080060ad 	.word	0x080060ad
 8006068:	080060ad 	.word	0x080060ad
 800606c:	080060ad 	.word	0x080060ad
 8006070:	080060ad 	.word	0x080060ad
 8006074:	080060ad 	.word	0x080060ad
 8006078:	080060a5 	.word	0x080060a5
 800607c:	2301      	movs	r3, #1
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e0bc      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006084:	2304      	movs	r3, #4
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e0b8      	b.n	80061fe <UART_SetConfig+0x5a6>
 800608c:	2308      	movs	r3, #8
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e0b4      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006094:	2310      	movs	r3, #16
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e0b0      	b.n	80061fe <UART_SetConfig+0x5a6>
 800609c:	2320      	movs	r3, #32
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e0ac      	b.n	80061fe <UART_SetConfig+0x5a6>
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e0a8      	b.n	80061fe <UART_SetConfig+0x5a6>
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e0a4      	b.n	80061fe <UART_SetConfig+0x5a6>
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a8f      	ldr	r2, [pc, #572]	; (80062f8 <UART_SetConfig+0x6a0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d130      	bne.n	8006120 <UART_SetConfig+0x4c8>
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <UART_SetConfig+0x69c>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d826      	bhi.n	8006118 <UART_SetConfig+0x4c0>
 80060ca:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x478>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	080060e9 	.word	0x080060e9
 80060d4:	080060f1 	.word	0x080060f1
 80060d8:	080060f9 	.word	0x080060f9
 80060dc:	08006101 	.word	0x08006101
 80060e0:	08006109 	.word	0x08006109
 80060e4:	08006111 	.word	0x08006111
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ee:	e086      	b.n	80061fe <UART_SetConfig+0x5a6>
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e082      	b.n	80061fe <UART_SetConfig+0x5a6>
 80060f8:	2308      	movs	r3, #8
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e07e      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e07a      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006108:	2320      	movs	r3, #32
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e076      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006110:	2340      	movs	r3, #64	; 0x40
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e072      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e06e      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a75      	ldr	r2, [pc, #468]	; (80062fc <UART_SetConfig+0x6a4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d130      	bne.n	800618c <UART_SetConfig+0x534>
 800612a:	4b72      	ldr	r3, [pc, #456]	; (80062f4 <UART_SetConfig+0x69c>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	2b05      	cmp	r3, #5
 8006134:	d826      	bhi.n	8006184 <UART_SetConfig+0x52c>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0x4e4>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006155 	.word	0x08006155
 8006140:	0800615d 	.word	0x0800615d
 8006144:	08006165 	.word	0x08006165
 8006148:	0800616d 	.word	0x0800616d
 800614c:	08006175 	.word	0x08006175
 8006150:	0800617d 	.word	0x0800617d
 8006154:	2300      	movs	r3, #0
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615a:	e050      	b.n	80061fe <UART_SetConfig+0x5a6>
 800615c:	2304      	movs	r3, #4
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006162:	e04c      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006164:	2308      	movs	r3, #8
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616a:	e048      	b.n	80061fe <UART_SetConfig+0x5a6>
 800616c:	2310      	movs	r3, #16
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006172:	e044      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006174:	2320      	movs	r3, #32
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e040      	b.n	80061fe <UART_SetConfig+0x5a6>
 800617c:	2340      	movs	r3, #64	; 0x40
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006182:	e03c      	b.n	80061fe <UART_SetConfig+0x5a6>
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618a:	e038      	b.n	80061fe <UART_SetConfig+0x5a6>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5b      	ldr	r2, [pc, #364]	; (8006300 <UART_SetConfig+0x6a8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d130      	bne.n	80061f8 <UART_SetConfig+0x5a0>
 8006196:	4b57      	ldr	r3, [pc, #348]	; (80062f4 <UART_SetConfig+0x69c>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b05      	cmp	r3, #5
 80061a0:	d826      	bhi.n	80061f0 <UART_SetConfig+0x598>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0x550>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061c1 	.word	0x080061c1
 80061ac:	080061c9 	.word	0x080061c9
 80061b0:	080061d1 	.word	0x080061d1
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	2302      	movs	r3, #2
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c6:	e01a      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061c8:	2304      	movs	r3, #4
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ce:	e016      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061d0:	2308      	movs	r3, #8
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d6:	e012      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061d8:	2310      	movs	r3, #16
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e00e      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061e0:	2320      	movs	r3, #32
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e00a      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e006      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e002      	b.n	80061fe <UART_SetConfig+0x5a6>
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3f      	ldr	r2, [pc, #252]	; (8006300 <UART_SetConfig+0x6a8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	f040 80f8 	bne.w	80063fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800620a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800620e:	2b20      	cmp	r3, #32
 8006210:	dc46      	bgt.n	80062a0 <UART_SetConfig+0x648>
 8006212:	2b02      	cmp	r3, #2
 8006214:	f2c0 8082 	blt.w	800631c <UART_SetConfig+0x6c4>
 8006218:	3b02      	subs	r3, #2
 800621a:	2b1e      	cmp	r3, #30
 800621c:	d87e      	bhi.n	800631c <UART_SetConfig+0x6c4>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x5cc>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	080062a7 	.word	0x080062a7
 8006228:	0800631d 	.word	0x0800631d
 800622c:	080062af 	.word	0x080062af
 8006230:	0800631d 	.word	0x0800631d
 8006234:	0800631d 	.word	0x0800631d
 8006238:	0800631d 	.word	0x0800631d
 800623c:	080062bf 	.word	0x080062bf
 8006240:	0800631d 	.word	0x0800631d
 8006244:	0800631d 	.word	0x0800631d
 8006248:	0800631d 	.word	0x0800631d
 800624c:	0800631d 	.word	0x0800631d
 8006250:	0800631d 	.word	0x0800631d
 8006254:	0800631d 	.word	0x0800631d
 8006258:	0800631d 	.word	0x0800631d
 800625c:	080062cf 	.word	0x080062cf
 8006260:	0800631d 	.word	0x0800631d
 8006264:	0800631d 	.word	0x0800631d
 8006268:	0800631d 	.word	0x0800631d
 800626c:	0800631d 	.word	0x0800631d
 8006270:	0800631d 	.word	0x0800631d
 8006274:	0800631d 	.word	0x0800631d
 8006278:	0800631d 	.word	0x0800631d
 800627c:	0800631d 	.word	0x0800631d
 8006280:	0800631d 	.word	0x0800631d
 8006284:	0800631d 	.word	0x0800631d
 8006288:	0800631d 	.word	0x0800631d
 800628c:	0800631d 	.word	0x0800631d
 8006290:	0800631d 	.word	0x0800631d
 8006294:	0800631d 	.word	0x0800631d
 8006298:	0800631d 	.word	0x0800631d
 800629c:	0800630f 	.word	0x0800630f
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d037      	beq.n	8006314 <UART_SetConfig+0x6bc>
 80062a4:	e03a      	b.n	800631c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062a6:	f7ff f865 	bl	8005374 <HAL_RCCEx_GetD3PCLK1Freq>
 80062aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062ac:	e03c      	b.n	8006328 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff f874 	bl	80053a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062bc:	e034      	b.n	8006328 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062be:	f107 0318 	add.w	r3, r7, #24
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff f9c0 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062cc:	e02c      	b.n	8006328 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <UART_SetConfig+0x69c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <UART_SetConfig+0x69c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	08db      	lsrs	r3, r3, #3
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	4a07      	ldr	r2, [pc, #28]	; (8006304 <UART_SetConfig+0x6ac>)
 80062e6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ec:	e01c      	b.n	8006328 <UART_SetConfig+0x6d0>
 80062ee:	bf00      	nop
 80062f0:	40011400 	.word	0x40011400
 80062f4:	58024400 	.word	0x58024400
 80062f8:	40007800 	.word	0x40007800
 80062fc:	40007c00 	.word	0x40007c00
 8006300:	58000c00 	.word	0x58000c00
 8006304:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006308:	4b9d      	ldr	r3, [pc, #628]	; (8006580 <UART_SetConfig+0x928>)
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800630c:	e00c      	b.n	8006328 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800630e:	4b9d      	ldr	r3, [pc, #628]	; (8006584 <UART_SetConfig+0x92c>)
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006312:	e009      	b.n	8006328 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800631a:	e005      	b.n	8006328 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006326:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 81de 	beq.w	80066ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	4a94      	ldr	r2, [pc, #592]	; (8006588 <UART_SetConfig+0x930>)
 8006336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633a:	461a      	mov	r2, r3
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006342:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4413      	add	r3, r2
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	429a      	cmp	r2, r3
 8006352:	d305      	bcc.n	8006360 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635c:	429a      	cmp	r2, r3
 800635e:	d903      	bls.n	8006368 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006366:	e1c1      	b.n	80066ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636a:	2200      	movs	r2, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	60fa      	str	r2, [r7, #12]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	4a84      	ldr	r2, [pc, #528]	; (8006588 <UART_SetConfig+0x930>)
 8006376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800637a:	b29b      	uxth	r3, r3
 800637c:	2200      	movs	r2, #0
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800638a:	f7f9 ffa5 	bl	80002d8 <__aeabi_uldivmod>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4610      	mov	r0, r2
 8006394:	4619      	mov	r1, r3
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	020b      	lsls	r3, r1, #8
 80063a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063a4:	0202      	lsls	r2, r0, #8
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	6849      	ldr	r1, [r1, #4]
 80063aa:	0849      	lsrs	r1, r1, #1
 80063ac:	2000      	movs	r0, #0
 80063ae:	460c      	mov	r4, r1
 80063b0:	4605      	mov	r5, r0
 80063b2:	eb12 0804 	adds.w	r8, r2, r4
 80063b6:	eb43 0905 	adc.w	r9, r3, r5
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	469a      	mov	sl, r3
 80063c2:	4693      	mov	fp, r2
 80063c4:	4652      	mov	r2, sl
 80063c6:	465b      	mov	r3, fp
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7f9 ff84 	bl	80002d8 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4613      	mov	r3, r2
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063de:	d308      	bcc.n	80063f2 <UART_SetConfig+0x79a>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e6:	d204      	bcs.n	80063f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	e17c      	b.n	80066ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80063f8:	e178      	b.n	80066ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006402:	f040 80c5 	bne.w	8006590 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006406:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800640a:	2b20      	cmp	r3, #32
 800640c:	dc48      	bgt.n	80064a0 <UART_SetConfig+0x848>
 800640e:	2b00      	cmp	r3, #0
 8006410:	db7b      	blt.n	800650a <UART_SetConfig+0x8b2>
 8006412:	2b20      	cmp	r3, #32
 8006414:	d879      	bhi.n	800650a <UART_SetConfig+0x8b2>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x7c4>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	080064a7 	.word	0x080064a7
 8006420:	080064af 	.word	0x080064af
 8006424:	0800650b 	.word	0x0800650b
 8006428:	0800650b 	.word	0x0800650b
 800642c:	080064b7 	.word	0x080064b7
 8006430:	0800650b 	.word	0x0800650b
 8006434:	0800650b 	.word	0x0800650b
 8006438:	0800650b 	.word	0x0800650b
 800643c:	080064c7 	.word	0x080064c7
 8006440:	0800650b 	.word	0x0800650b
 8006444:	0800650b 	.word	0x0800650b
 8006448:	0800650b 	.word	0x0800650b
 800644c:	0800650b 	.word	0x0800650b
 8006450:	0800650b 	.word	0x0800650b
 8006454:	0800650b 	.word	0x0800650b
 8006458:	0800650b 	.word	0x0800650b
 800645c:	080064d7 	.word	0x080064d7
 8006460:	0800650b 	.word	0x0800650b
 8006464:	0800650b 	.word	0x0800650b
 8006468:	0800650b 	.word	0x0800650b
 800646c:	0800650b 	.word	0x0800650b
 8006470:	0800650b 	.word	0x0800650b
 8006474:	0800650b 	.word	0x0800650b
 8006478:	0800650b 	.word	0x0800650b
 800647c:	0800650b 	.word	0x0800650b
 8006480:	0800650b 	.word	0x0800650b
 8006484:	0800650b 	.word	0x0800650b
 8006488:	0800650b 	.word	0x0800650b
 800648c:	0800650b 	.word	0x0800650b
 8006490:	0800650b 	.word	0x0800650b
 8006494:	0800650b 	.word	0x0800650b
 8006498:	0800650b 	.word	0x0800650b
 800649c:	080064fd 	.word	0x080064fd
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d02e      	beq.n	8006502 <UART_SetConfig+0x8aa>
 80064a4:	e031      	b.n	800650a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a6:	f7fd fd2f 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 80064aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064ac:	e033      	b.n	8006516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ae:	f7fd fd41 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 80064b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064b4:	e02f      	b.n	8006516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe ff70 	bl	80053a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c4:	e027      	b.n	8006516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c6:	f107 0318 	add.w	r3, r7, #24
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff f8bc 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d4:	e01f      	b.n	8006516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d6:	4b2d      	ldr	r3, [pc, #180]	; (800658c <UART_SetConfig+0x934>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064e2:	4b2a      	ldr	r3, [pc, #168]	; (800658c <UART_SetConfig+0x934>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	08db      	lsrs	r3, r3, #3
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	4a24      	ldr	r2, [pc, #144]	; (8006580 <UART_SetConfig+0x928>)
 80064ee:	fa22 f303 	lsr.w	r3, r2, r3
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064f4:	e00f      	b.n	8006516 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80064f6:	4b22      	ldr	r3, [pc, #136]	; (8006580 <UART_SetConfig+0x928>)
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064fa:	e00c      	b.n	8006516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <UART_SetConfig+0x92c>)
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006500:	e009      	b.n	8006516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006508:	e005      	b.n	8006516 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80e7 	beq.w	80066ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	4a19      	ldr	r2, [pc, #100]	; (8006588 <UART_SetConfig+0x930>)
 8006524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006528:	461a      	mov	r2, r3
 800652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006530:	005a      	lsls	r2, r3, #1
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	441a      	add	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	2b0f      	cmp	r3, #15
 8006548:	d916      	bls.n	8006578 <UART_SetConfig+0x920>
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006550:	d212      	bcs.n	8006578 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	b29b      	uxth	r3, r3
 8006556:	f023 030f 	bic.w	r3, r3, #15
 800655a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	b29a      	uxth	r2, r3
 8006568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800656a:	4313      	orrs	r3, r2
 800656c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	e0b9      	b.n	80066ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800657e:	e0b5      	b.n	80066ec <UART_SetConfig+0xa94>
 8006580:	03d09000 	.word	0x03d09000
 8006584:	003d0900 	.word	0x003d0900
 8006588:	08007400 	.word	0x08007400
 800658c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006590:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006594:	2b20      	cmp	r3, #32
 8006596:	dc49      	bgt.n	800662c <UART_SetConfig+0x9d4>
 8006598:	2b00      	cmp	r3, #0
 800659a:	db7c      	blt.n	8006696 <UART_SetConfig+0xa3e>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d87a      	bhi.n	8006696 <UART_SetConfig+0xa3e>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0x950>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	08006633 	.word	0x08006633
 80065ac:	0800663b 	.word	0x0800663b
 80065b0:	08006697 	.word	0x08006697
 80065b4:	08006697 	.word	0x08006697
 80065b8:	08006643 	.word	0x08006643
 80065bc:	08006697 	.word	0x08006697
 80065c0:	08006697 	.word	0x08006697
 80065c4:	08006697 	.word	0x08006697
 80065c8:	08006653 	.word	0x08006653
 80065cc:	08006697 	.word	0x08006697
 80065d0:	08006697 	.word	0x08006697
 80065d4:	08006697 	.word	0x08006697
 80065d8:	08006697 	.word	0x08006697
 80065dc:	08006697 	.word	0x08006697
 80065e0:	08006697 	.word	0x08006697
 80065e4:	08006697 	.word	0x08006697
 80065e8:	08006663 	.word	0x08006663
 80065ec:	08006697 	.word	0x08006697
 80065f0:	08006697 	.word	0x08006697
 80065f4:	08006697 	.word	0x08006697
 80065f8:	08006697 	.word	0x08006697
 80065fc:	08006697 	.word	0x08006697
 8006600:	08006697 	.word	0x08006697
 8006604:	08006697 	.word	0x08006697
 8006608:	08006697 	.word	0x08006697
 800660c:	08006697 	.word	0x08006697
 8006610:	08006697 	.word	0x08006697
 8006614:	08006697 	.word	0x08006697
 8006618:	08006697 	.word	0x08006697
 800661c:	08006697 	.word	0x08006697
 8006620:	08006697 	.word	0x08006697
 8006624:	08006697 	.word	0x08006697
 8006628:	08006689 	.word	0x08006689
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d02e      	beq.n	800668e <UART_SetConfig+0xa36>
 8006630:	e031      	b.n	8006696 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006632:	f7fd fc69 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8006636:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006638:	e033      	b.n	80066a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663a:	f7fd fc7b 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 800663e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006640:	e02f      	b.n	80066a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe feaa 	bl	80053a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006650:	e027      	b.n	80066a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006652:	f107 0318 	add.w	r3, r7, #24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fff6 	bl	8005648 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006660:	e01f      	b.n	80066a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006662:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <UART_SetConfig+0xac0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800666e:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <UART_SetConfig+0xac0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	08db      	lsrs	r3, r3, #3
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	4a28      	ldr	r2, [pc, #160]	; (800671c <UART_SetConfig+0xac4>)
 800667a:	fa22 f303 	lsr.w	r3, r2, r3
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006680:	e00f      	b.n	80066a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006682:	4b26      	ldr	r3, [pc, #152]	; (800671c <UART_SetConfig+0xac4>)
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006686:	e00c      	b.n	80066a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <UART_SetConfig+0xac8>)
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006694:	e005      	b.n	80066a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80066a0:	bf00      	nop
    }

    if (pclk != 0U)
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d021      	beq.n	80066ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <UART_SetConfig+0xacc>)
 80066ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	441a      	add	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d909      	bls.n	80066e6 <UART_SetConfig+0xa8e>
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d8:	d205      	bcs.n	80066e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	b29a      	uxth	r2, r3
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	e002      	b.n	80066ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2200      	movs	r2, #0
 8006700:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006708:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800670c:	4618      	mov	r0, r3
 800670e:	3748      	adds	r7, #72	; 0x48
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006716:	bf00      	nop
 8006718:	58024400 	.word	0x58024400
 800671c:	03d09000 	.word	0x03d09000
 8006720:	003d0900 	.word	0x003d0900
 8006724:	08007400 	.word	0x08007400

08006728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006826:	d10a      	bne.n	800683e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b098      	sub	sp, #96	; 0x60
 8006870:	af02      	add	r7, sp, #8
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800687c:	f7fa fdb8 	bl	80013f0 <HAL_GetTick>
 8006880:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b08      	cmp	r3, #8
 800688e:	d12f      	bne.n	80068f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f88e 	bl	80069c0 <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d022      	beq.n	80068f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068be:	653b      	str	r3, [r7, #80]	; 0x50
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e6      	bne.n	80068aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e063      	b.n	80069b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d149      	bne.n	8006992 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006906:	2200      	movs	r2, #0
 8006908:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f857 	bl	80069c0 <UART_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d03c      	beq.n	8006992 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	623b      	str	r3, [r7, #32]
   return(result);
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006936:	633b      	str	r3, [r7, #48]	; 0x30
 8006938:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e6      	bne.n	8006918 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	60fb      	str	r3, [r7, #12]
   return(result);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	64bb      	str	r3, [r7, #72]	; 0x48
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696a:	61fa      	str	r2, [r7, #28]
 800696c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	617b      	str	r3, [r7, #20]
   return(result);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e5      	bne.n	800694a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e012      	b.n	80069b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3758      	adds	r7, #88	; 0x58
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d0:	e04f      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d8:	d04b      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069da:	f7fa fd09 	bl	80013f0 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e04e      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d037      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b80      	cmp	r3, #128	; 0x80
 8006a06:	d034      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d031      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d110      	bne.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2208      	movs	r2, #8
 8006a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f839 	bl	8006a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e029      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4c:	d111      	bne.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f81f 	bl	8006a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e00f      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	bf0c      	ite	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	2300      	movne	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d0a0      	beq.n	80069d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b095      	sub	sp, #84	; 0x54
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e6      	bne.n	8006aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	4b1e      	ldr	r3, [pc, #120]	; (8006b64 <UART_EndRxTransfer+0xc8>)
 8006aea:	4013      	ands	r3, r2
 8006aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d118      	bne.n	8006b44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	647b      	str	r3, [r7, #68]	; 0x44
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b58:	bf00      	nop
 8006b5a:	3754      	adds	r7, #84	; 0x54
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	effffffe 	.word	0xeffffffe

08006b68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_UARTEx_DisableFifoMode+0x16>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e027      	b.n	8006bce <HAL_UARTEx_DisableFifoMode+0x66>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2224      	movs	r2, #36	; 0x24
 8006b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e02d      	b.n	8006c4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2224      	movs	r2, #36	; 0x24
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f850 	bl	8006cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e02d      	b.n	8006cca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2224      	movs	r2, #36	; 0x24
 8006c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f812 	bl	8006cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d108      	bne.n	8006cf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cf4:	e031      	b.n	8006d5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cf6:	2310      	movs	r3, #16
 8006cf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cfa:	2310      	movs	r3, #16
 8006cfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	0e5b      	lsrs	r3, r3, #25
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	0f5b      	lsrs	r3, r3, #29
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	7b3a      	ldrb	r2, [r7, #12]
 8006d22:	4911      	ldr	r1, [pc, #68]	; (8006d68 <UARTEx_SetNbDataToProcess+0x94>)
 8006d24:	5c8a      	ldrb	r2, [r1, r2]
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d2a:	7b3a      	ldrb	r2, [r7, #12]
 8006d2c:	490f      	ldr	r1, [pc, #60]	; (8006d6c <UARTEx_SetNbDataToProcess+0x98>)
 8006d2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	7b7a      	ldrb	r2, [r7, #13]
 8006d40:	4909      	ldr	r1, [pc, #36]	; (8006d68 <UARTEx_SetNbDataToProcess+0x94>)
 8006d42:	5c8a      	ldrb	r2, [r1, r2]
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d48:	7b7a      	ldrb	r2, [r7, #13]
 8006d4a:	4908      	ldr	r1, [pc, #32]	; (8006d6c <UARTEx_SetNbDataToProcess+0x98>)
 8006d4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	08007418 	.word	0x08007418
 8006d6c:	08007420 	.word	0x08007420

08006d70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d70:	b084      	sub	sp, #16
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	f107 001c 	add.w	r0, r7, #28
 8006d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d121      	bne.n	8006dce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <USB_CoreInit+0xdc>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d105      	bne.n	8006dc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 faaa 	bl	800731c <USB_CoreReset>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]
 8006dcc:	e01b      	b.n	8006e06 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa9e 	bl	800731c <USB_CoreReset>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006de4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
 8006df8:	e005      	b.n	8006e06 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e06:	7fbb      	ldrb	r3, [r7, #30]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d116      	bne.n	8006e3a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <USB_CoreInit+0xe0>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f043 0206 	orr.w	r2, r3, #6
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f043 0220 	orr.w	r2, r3, #32
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e46:	b004      	add	sp, #16
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	ffbdffbf 	.word	0xffbdffbf
 8006e50:	03ee0000 	.word	0x03ee0000

08006e54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f023 0201 	bic.w	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d115      	bne.n	8006ec4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ea4:	200a      	movs	r0, #10
 8006ea6:	f7fa faaf 	bl	8001408 <HAL_Delay>
      ms += 10U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	330a      	adds	r3, #10
 8006eae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa25 	bl	8007300 <USB_GetMode>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d01e      	beq.n	8006efa <USB_SetCurrentMode+0x84>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2bc7      	cmp	r3, #199	; 0xc7
 8006ec0:	d9f0      	bls.n	8006ea4 <USB_SetCurrentMode+0x2e>
 8006ec2:	e01a      	b.n	8006efa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d115      	bne.n	8006ef6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ed6:	200a      	movs	r0, #10
 8006ed8:	f7fa fa96 	bl	8001408 <HAL_Delay>
      ms += 10U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	330a      	adds	r3, #10
 8006ee0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa0c 	bl	8007300 <USB_GetMode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <USB_SetCurrentMode+0x84>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2bc7      	cmp	r3, #199	; 0xc7
 8006ef2:	d9f0      	bls.n	8006ed6 <USB_SetCurrentMode+0x60>
 8006ef4:	e001      	b.n	8006efa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e005      	b.n	8006f06 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2bc8      	cmp	r3, #200	; 0xc8
 8006efe:	d101      	bne.n	8006f04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f10:	b084      	sub	sp, #16
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	e009      	b.n	8006f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3340      	adds	r3, #64	; 0x40
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b0e      	cmp	r3, #14
 8006f48:	d9f2      	bls.n	8006f30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d11c      	bne.n	8006f8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e005      	b.n	8006f98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fa4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10d      	bne.n	8006fc8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f968 	bl	800728c <USB_SetDevSpeed>
 8006fbc:	e008      	b.n	8006fd0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f963 	bl	800728c <USB_SetDevSpeed>
 8006fc6:	e003      	b.n	8006fd0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fc8:	2103      	movs	r1, #3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f95e 	bl	800728c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fd0:	2110      	movs	r1, #16
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f8fa 	bl	80071cc <USB_FlushTxFifo>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f924 	bl	8007230 <USB_FlushRxFifo>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	461a      	mov	r2, r3
 8007012:	2300      	movs	r3, #0
 8007014:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007016:	2300      	movs	r3, #0
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	e043      	b.n	80070a4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800702e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007032:	d118      	bne.n	8007066 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	461a      	mov	r2, r3
 8007048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e013      	b.n	8007078 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	461a      	mov	r2, r3
 800705e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	e008      	b.n	8007078 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	461a      	mov	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	2300      	movs	r3, #0
 8007088:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007096:	461a      	mov	r2, r3
 8007098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800709c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3301      	adds	r3, #1
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80070a8:	461a      	mov	r2, r3
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d3b5      	bcc.n	800701c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	e043      	b.n	800713e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070cc:	d118      	bne.n	8007100 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	461a      	mov	r2, r3
 80070e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e013      	b.n	8007112 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	461a      	mov	r2, r3
 80070f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e008      	b.n	8007112 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	461a      	mov	r2, r3
 800710e:	2300      	movs	r3, #0
 8007110:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	461a      	mov	r2, r3
 8007120:	2300      	movs	r3, #0
 8007122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3301      	adds	r3, #1
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007142:	461a      	mov	r2, r3
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4293      	cmp	r3, r2
 8007148:	d3b5      	bcc.n	80070b6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800715c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800716a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800716c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f043 0210 	orr.w	r2, r3, #16
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <USB_DevInit+0x2b4>)
 8007186:	4313      	orrs	r3, r2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800718c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f043 0208 	orr.w	r2, r3, #8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <USB_DevInit+0x2b8>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071c0:	b004      	add	sp, #16
 80071c2:	4770      	bx	lr
 80071c4:	803c3800 	.word	0x803c3800
 80071c8:	40000004 	.word	0x40000004

080071cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80071e6:	d901      	bls.n	80071ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e01b      	b.n	8007224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	daf2      	bge.n	80071da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	019b      	lsls	r3, r3, #6
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007210:	d901      	bls.n	8007216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e006      	b.n	8007224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b20      	cmp	r3, #32
 8007220:	d0f0      	beq.n	8007204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007248:	d901      	bls.n	800724e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e018      	b.n	8007280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	daf2      	bge.n	800723c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2210      	movs	r2, #16
 800725e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800726c:	d901      	bls.n	8007272 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e006      	b.n	8007280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b10      	cmp	r3, #16
 800727c:	d0f0      	beq.n	8007260 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072d8:	f023 0303 	bic.w	r3, r3, #3
 80072dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f003 0301 	and.w	r3, r3, #1
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3301      	adds	r3, #1
 800732c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007334:	d901      	bls.n	800733a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e01b      	b.n	8007372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	daf2      	bge.n	8007328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f043 0201 	orr.w	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3301      	adds	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800735e:	d901      	bls.n	8007364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e006      	b.n	8007372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d0f0      	beq.n	8007352 <USB_CoreReset+0x36>

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <__libc_init_array>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4d0d      	ldr	r5, [pc, #52]	; (80073b8 <__libc_init_array+0x38>)
 8007384:	4c0d      	ldr	r4, [pc, #52]	; (80073bc <__libc_init_array+0x3c>)
 8007386:	1b64      	subs	r4, r4, r5
 8007388:	10a4      	asrs	r4, r4, #2
 800738a:	2600      	movs	r6, #0
 800738c:	42a6      	cmp	r6, r4
 800738e:	d109      	bne.n	80073a4 <__libc_init_array+0x24>
 8007390:	4d0b      	ldr	r5, [pc, #44]	; (80073c0 <__libc_init_array+0x40>)
 8007392:	4c0c      	ldr	r4, [pc, #48]	; (80073c4 <__libc_init_array+0x44>)
 8007394:	f000 f820 	bl	80073d8 <_init>
 8007398:	1b64      	subs	r4, r4, r5
 800739a:	10a4      	asrs	r4, r4, #2
 800739c:	2600      	movs	r6, #0
 800739e:	42a6      	cmp	r6, r4
 80073a0:	d105      	bne.n	80073ae <__libc_init_array+0x2e>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a8:	4798      	blx	r3
 80073aa:	3601      	adds	r6, #1
 80073ac:	e7ee      	b.n	800738c <__libc_init_array+0xc>
 80073ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b2:	4798      	blx	r3
 80073b4:	3601      	adds	r6, #1
 80073b6:	e7f2      	b.n	800739e <__libc_init_array+0x1e>
 80073b8:	08007430 	.word	0x08007430
 80073bc:	08007430 	.word	0x08007430
 80073c0:	08007430 	.word	0x08007430
 80073c4:	08007434 	.word	0x08007434

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
