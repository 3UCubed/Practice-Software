package endurosat.macif

<** @description: EPS & STMBoard Communication Protocol to verify EPS Telemetry feedback
    @details: id = 330 
**>
interface OBC_EPS
{
    version { major 0 minor 1 }

    enumeration StandardResult
    {
        SUCCESS,
        ERROR,
        INVALID_PARAMS,
        INVALID_COMMAND,
        NOT_SUPPORTED
    }
    

    struct TELECOMMAND_WRITE
    {
        <** @description: I2C machine address attempting to reach **>
    	UInt8 address  
        <** @description: 7 bit command with R-W bit identifier **>
    	UInt8 command
    	<** @description: Optional data parameters that trail the command **>
    	UInt8 optParams
    }

    struct TELECOMMAND_READ
    {
        <** @description: 7 bit command with R-W bit identifier **>
    	UInt8 command
    	<** @description: data bucket one for receiving telemetry **>
    	UInt8 bucketOne
        <** @description: data bucket two for receiving telemetry **>
        UInt8 bucketTwo
    }

    struct TELEMETRY
    {
    	<** @description: data bucket one for receiving telemetry **>
    	UInt8 bucketOne
        <** @description: data bucket two for receiving telemetry **>
        UInt8 bucketTwo
    }

    <** @description: Take a user inputted telecommand for read and transmit to EPS 
        @details: id = 0x000000AA
    **>
    method generateTelecommandWrite
    {
        in
        {
            <** @description: I2C machine address attempting to reach **>
    	    UInt8 address
            <** @description: 7 bit command with R-W bit identifier for command **>
    	    UInt8 command
    	    <** @description: data parameters that trail the command OPTIONAL**>
    	    UInt8 optParams
        }
        out
        {
            <** @description: user command to be sent to EPS via I2C **>
            TELECOMMAND_WRITE userCommand
            <** @description: standard return on whether process succeeded or failed (how did it fail) **>
            StandardResult  opResult
        }
    }

    <** @description: Take a user inputted telecommand for write and transmit to EPS
        @details: id = 0x000000AB
    **>
    method generateTelecommandRead
    {
        in
        {
            <** @description: I2C machine address attempting to reach **>
    	    UInt8 address
            <** @description: 7 bit command with R-W bit identifier for command **>
    	    UInt8 readByte1
    	    <** @description: data parameters that trail the command OPTIONAL**>
    	    UInt8 readByte2
        }
        out
        {
            <** @description: user command to be sent to EPS via I2C **>
            TELECOMMAND_READ userCommand
            <** @description: standard return on whether process succeeded or failed (how did it fail) **>
            StandardResult  opResult
        }
    }

    <** @description: transmit telecommand write to EPS
        @details: id = 0x000000BB
    **>
    method transmitTelecommandWrite
    {
        in
        {
            <** @description: user command to be sent to EPS via I2C **>
            TELECOMMAND_WRITE userCommand
        }
        out
        {
            <** @description: telemetry transfered via I2C from EPS to board and via UART board to PC **>
            TELEMETRY res
            <** @description: standard return on whether process succeeded or failed (how did it fail) **>
            StandardResult  opResult
        }
    }

    <** @description: Takes the generated telecommand 
        @details: id = 0x000000BC
    **>
    method transmitTelecommandRead
    {
        in
        {
            <** @description: user command to be sent to EPS via I2C **>
            TELECOMMAND_READ userCommand
        }
        out
        {
            <** @description: telemetry transfered via I2C from EPS to board and via UART board to PC **>
            TELEMETRY res
            <** @description: standard return on whether process succeeded or failed (how did it fail) **>
            StandardResult  opResult
        }
    }
}
    