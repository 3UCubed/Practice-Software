
AD7980_noDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003950  08003950  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003950  08003950  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  080039b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080039b4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fee  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001657  00000000  00000000  000290b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  0002a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060b  00000000  00000000  0002aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011d7d  00000000  00000000  0002b4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa32  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006ac08  00000000  00000000  00047c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fa8  00000000  00000000  000b28a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800389c 	.word	0x0800389c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800389c 	.word	0x0800389c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b094      	sub	sp, #80	; 0x50
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb05 	bl	8000848 <HAL_Init>
  //CNV time at least 500nanoseconds
  //time between conversion 1.2nanoseconds
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f865 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f935 	bl	80004b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000246:	f000 f8c3 	bl	80003d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f901 	bl	8000450 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //need to transmit through SCK with Master to Slave?cannot find out how
	  //need to drive chip select pin high
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800024e:	2380      	movs	r3, #128	; 0x80
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	4828      	ldr	r0, [pc, #160]	; (80002f4 <main+0xc0>)
 8000254:	2201      	movs	r2, #1
 8000256:	0019      	movs	r1, r3
 8000258:	f000 fda2 	bl	8000da0 <HAL_GPIO_WritePin>
	  HAL_Delay(500); //delay for conversion time
 800025c:	23fa      	movs	r3, #250	; 0xfa
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fb55 	bl	8000910 <HAL_Delay>

	  //send out the read status register command
	  //potentially need to call to
	  rxStatus = HAL_SPI_Transmit(&hspi1, (uint8_t*)txBuffer, 1, HAL_MAX_DELAY);
 8000266:	254b      	movs	r5, #75	; 0x4b
 8000268:	197c      	adds	r4, r7, r5
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	1d39      	adds	r1, r7, #4
 8000270:	4821      	ldr	r0, [pc, #132]	; (80002f8 <main+0xc4>)
 8000272:	2201      	movs	r2, #1
 8000274:	f001 fba6 	bl	80019c4 <HAL_SPI_Transmit>
 8000278:	0003      	movs	r3, r0
 800027a:	7023      	strb	r3, [r4, #0]
	  if (rxStatus!=HAL_OK) {
 800027c:	197b      	adds	r3, r7, r5
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d007      	beq.n	8000294 <main+0x60>
	  	sprintf(uartBuffer, "SPI MOSI ERROR\r\n");
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <main+0xc8>)
 8000286:	2318      	movs	r3, #24
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	0011      	movs	r1, r2
 800028c:	0018      	movs	r0, r3
 800028e:	f002 fe5f 	bl	8002f50 <siprintf>
 8000292:	e021      	b.n	80002d8 <main+0xa4>
	  } else {
		rxStatus = HAL_SPI_Receive(&hspi1, (uint8_t*)rxBuffer, 2, HAL_MAX_DELAY);
 8000294:	254b      	movs	r5, #75	; 0x4b
 8000296:	197c      	adds	r4, r7, r5
 8000298:	2301      	movs	r3, #1
 800029a:	425b      	negs	r3, r3
 800029c:	2208      	movs	r2, #8
 800029e:	18b9      	adds	r1, r7, r2
 80002a0:	4815      	ldr	r0, [pc, #84]	; (80002f8 <main+0xc4>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	f001 fcee 	bl	8001c84 <HAL_SPI_Receive>
 80002a8:	0003      	movs	r3, r0
 80002aa:	7023      	strb	r3, [r4, #0]
		if (rxStatus!=HAL_OK) {
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d007      	beq.n	80002c4 <main+0x90>
			sprintf(uartBuffer, "SPI MISO ERROR\r\n");
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <main+0xcc>)
 80002b6:	2318      	movs	r3, #24
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f002 fe47 	bl	8002f50 <siprintf>
 80002c2:	e009      	b.n	80002d8 <main+0xa4>
		} else {
			//proceed with read data
			uartBufferLen = sprintf(uartBuffer, "%d V\r\n", (unsigned int)rxBuffer);
 80002c4:	2308      	movs	r3, #8
 80002c6:	18fa      	adds	r2, r7, r3
 80002c8:	490e      	ldr	r1, [pc, #56]	; (8000304 <main+0xd0>)
 80002ca:	2318      	movs	r3, #24
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 fe3e 	bl	8002f50 <siprintf>
 80002d4:	0003      	movs	r3, r0
 80002d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
	  }
	  //UART HAS BEEN TESTED AND IS FUNCTIONAL

	  HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80002d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002da:	b29a      	uxth	r2, r3
 80002dc:	2318      	movs	r3, #24
 80002de:	18f9      	adds	r1, r7, r3
 80002e0:	4809      	ldr	r0, [pc, #36]	; (8000308 <main+0xd4>)
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	f002 fa2a 	bl	800273c <HAL_UART_Transmit>
	  //reset pint
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	  HAL_Delay(1000); //delay by 1s
 80002e8:	23fa      	movs	r3, #250	; 0xfa
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 fb0f 	bl	8000910 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80002f2:	e7ac      	b.n	800024e <main+0x1a>
 80002f4:	48000400 	.word	0x48000400
 80002f8:	20000078 	.word	0x20000078
 80002fc:	080038b4 	.word	0x080038b4
 8000300:	080038c8 	.word	0x080038c8
 8000304:	080038dc 	.word	0x080038dc
 8000308:	200000dc 	.word	0x200000dc

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b097      	sub	sp, #92	; 0x5c
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	2428      	movs	r4, #40	; 0x28
 8000314:	193b      	adds	r3, r7, r4
 8000316:	0018      	movs	r0, r3
 8000318:	2330      	movs	r3, #48	; 0x30
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f002 fe37 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000322:	2318      	movs	r3, #24
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	0018      	movs	r0, r3
 8000328:	2310      	movs	r3, #16
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f002 fe2f 	bl	8002f90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	0018      	movs	r0, r3
 8000336:	2314      	movs	r3, #20
 8000338:	001a      	movs	r2, r3
 800033a:	2100      	movs	r1, #0
 800033c:	f002 fe28 	bl	8002f90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000340:	0021      	movs	r1, r4
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2202      	movs	r2, #2
 8000346:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2201      	movs	r2, #1
 800034c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2210      	movs	r2, #16
 8000352:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2202      	movs	r2, #2
 8000358:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	22a0      	movs	r2, #160	; 0xa0
 8000364:	0392      	lsls	r2, r2, #14
 8000366:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2200      	movs	r2, #0
 800036c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	187b      	adds	r3, r7, r1
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fd33 	bl	8000ddc <HAL_RCC_OscConfig>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800037a:	f000 f921 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	2118      	movs	r1, #24
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2207      	movs	r2, #7
 8000384:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2202      	movs	r2, #2
 800038a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2101      	movs	r1, #1
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f837 	bl	8001410 <HAL_RCC_ClockConfig>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003a6:	f000 f90b 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f96d 	bl	8001698 <HAL_RCCEx_PeriphCLKConfig>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003c2:	f000 f8fd 	bl	80005c0 <Error_Handler>
  }
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b017      	add	sp, #92	; 0x5c
 80003cc:	bd90      	pop	{r4, r7, pc}
	...

080003d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <MX_SPI1_Init+0x78>)
 80003d6:	4a1d      	ldr	r2, [pc, #116]	; (800044c <MX_SPI1_Init+0x7c>)
 80003d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_SPI1_Init+0x78>)
 80003dc:	2282      	movs	r2, #130	; 0x82
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <MX_SPI1_Init+0x78>)
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	00d2      	lsls	r2, r2, #3
 80003e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <MX_SPI1_Init+0x78>)
 80003ec:	22f0      	movs	r2, #240	; 0xf0
 80003ee:	0112      	lsls	r2, r2, #4
 80003f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_SPI1_Init+0x78>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_SPI1_Init+0x78>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_SPI1_Init+0x78>)
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	0092      	lsls	r2, r2, #2
 8000404:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <MX_SPI1_Init+0x78>)
 8000408:	2228      	movs	r2, #40	; 0x28
 800040a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_SPI1_Init+0x78>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <MX_SPI1_Init+0x78>)
 8000414:	2200      	movs	r2, #0
 8000416:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_SPI1_Init+0x78>)
 800041a:	2200      	movs	r2, #0
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <MX_SPI1_Init+0x78>)
 8000420:	2207      	movs	r2, #7
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_SPI1_Init+0x78>)
 8000426:	2200      	movs	r2, #0
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <MX_SPI1_Init+0x78>)
 800042c:	2208      	movs	r2, #8
 800042e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_SPI1_Init+0x78>)
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fa0e 	bl	8001854 <HAL_SPI_Init>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800043c:	f000 f8c0 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	20000078 	.word	0x20000078
 800044c:	40013000 	.word	0x40013000

08000450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <MX_USART1_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800045c:	2296      	movs	r2, #150	; 0x96
 800045e:	0212      	lsls	r2, r2, #8
 8000460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000494:	0018      	movs	r0, r3
 8000496:	f002 f8fd 	bl	8002694 <HAL_UART_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f88f 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200000dc 	.word	0x200000dc
 80004ac:	40013800 	.word	0x40013800

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	240c      	movs	r4, #12
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 fd65 	bl	8002f90 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b3c      	ldr	r3, [pc, #240]	; (80005b8 <MX_GPIO_Init+0x108>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <MX_GPIO_Init+0x108>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0289      	lsls	r1, r1, #10
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <MX_GPIO_Init+0x108>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	029b      	lsls	r3, r3, #10
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <MX_GPIO_Init+0x108>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <MX_GPIO_Init+0x108>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0309      	lsls	r1, r1, #12
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <MX_GPIO_Init+0x108>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	031b      	lsls	r3, r3, #12
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <MX_GPIO_Init+0x108>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_GPIO_Init+0x108>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	02c9      	lsls	r1, r1, #11
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_GPIO_Init+0x108>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	02db      	lsls	r3, r3, #11
 8000514:	4013      	ands	r3, r2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4827      	ldr	r0, [pc, #156]	; (80005bc <MX_GPIO_Init+0x10c>)
 8000520:	2200      	movs	r2, #0
 8000522:	0019      	movs	r1, r3
 8000524:	f000 fc3c 	bl	8000da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	0059      	lsls	r1, r3, #1
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2200      	movs	r2, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fc34 	bl	8000da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2290      	movs	r2, #144	; 0x90
 8000542:	0352      	lsls	r2, r2, #13
 8000544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054c:	193a      	adds	r2, r7, r4
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fab3 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	000c      	movs	r4, r1
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2201      	movs	r2, #1
 800056a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a10      	ldr	r2, [pc, #64]	; (80005bc <MX_GPIO_Init+0x10c>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f000 fa9e 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000584:	0021      	movs	r1, r4
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	187a      	adds	r2, r7, r1
 80005a2:	2390      	movs	r3, #144	; 0x90
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa89 	bl	8000ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b009      	add	sp, #36	; 0x24
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699a      	ldr	r2, [r3, #24]
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	619a      	str	r2, [r3, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0549      	lsls	r1, r1, #21
 80005f4:	430a      	orrs	r2, r1
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x44>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	055b      	lsls	r3, r3, #21
 8000600:	4013      	ands	r3, r2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b08b      	sub	sp, #44	; 0x2c
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	2414      	movs	r4, #20
 800061e:	193b      	adds	r3, r7, r4
 8000620:	0018      	movs	r0, r3
 8000622:	2314      	movs	r3, #20
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f002 fcb2 	bl	8002f90 <memset>
  if(hspi->Instance==SPI1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <HAL_SPI_MspInit+0x90>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d131      	bne.n	800069a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_SPI_MspInit+0x94>)
 8000638:	699a      	ldr	r2, [r3, #24]
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_SPI_MspInit+0x94>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0149      	lsls	r1, r1, #5
 8000640:	430a      	orrs	r2, r1
 8000642:	619a      	str	r2, [r3, #24]
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_SPI_MspInit+0x94>)
 8000646:	699a      	ldr	r2, [r3, #24]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	015b      	lsls	r3, r3, #5
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_SPI_MspInit+0x94>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_SPI_MspInit+0x94>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	02c9      	lsls	r1, r1, #11
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_SPI_MspInit+0x94>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	02db      	lsls	r3, r3, #11
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800066e:	0021      	movs	r1, r4
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2218      	movs	r2, #24
 8000674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2203      	movs	r2, #3
 8000686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	187b      	adds	r3, r7, r1
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SPI_MspInit+0x98>)
 8000692:	0019      	movs	r1, r3
 8000694:	0010      	movs	r0, r2
 8000696:	f000 fa13 	bl	8000ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b00b      	add	sp, #44	; 0x2c
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40013000 	.word	0x40013000
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000400 	.word	0x48000400

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	2414      	movs	r4, #20
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fc64 	bl	8002f90 <memset>
  if(huart->Instance==USART1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d133      	bne.n	800073a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	01c9      	lsls	r1, r1, #7
 80006dc:	430a      	orrs	r2, r1
 80006de:	619a      	str	r2, [r3, #24]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	01db      	lsls	r3, r3, #7
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	00d2      	lsls	r2, r2, #3
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2203      	movs	r2, #3
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	187a      	adds	r2, r7, r1
 800072e:	2390      	movs	r3, #144	; 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 f9c3 	bl	8000ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b00b      	add	sp, #44	; 0x2c
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40013800 	.word	0x40013800
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f8b2 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000784:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <_sbrk+0x5c>)
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <_sbrk+0x60>)
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_sbrk+0x64>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <_sbrk+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	18d3      	adds	r3, r2, r3
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d207      	bcs.n	80007bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ac:	f002 fbf8 	bl	8002fa0 <__errno>
 80007b0:	0003      	movs	r3, r0
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	e009      	b.n	80007d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	18d2      	adds	r2, r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <_sbrk+0x64>)
 80007cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b006      	add	sp, #24
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20002000 	.word	0x20002000
 80007dc:	00000400 	.word	0x00000400
 80007e0:	20000164 	.word	0x20000164
 80007e4:	200002b8 	.word	0x200002b8

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80007f8:	f7ff fff6 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f002 fbc3 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fd05 	bl	8000234 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000838:	08003958 	.word	0x08003958
  ldr r2, =_sbss
 800083c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000840:	200002b4 	.word	0x200002b4

08000844 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_COMP_IRQHandler>
	...

08000848 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_Init+0x24>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_Init+0x24>)
 8000852:	2110      	movs	r1, #16
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f809 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085e:	f7ff feb5 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_InitTick+0x5c>)
 800087a:	681c      	ldr	r4, [r3, #0]
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_InitTick+0x60>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	0019      	movs	r1, r3
 8000882:	23fa      	movs	r3, #250	; 0xfa
 8000884:	0098      	lsls	r0, r3, #2
 8000886:	f7ff fc49 	bl	800011c <__udivsi3>
 800088a:	0003      	movs	r3, r0
 800088c:	0019      	movs	r1, r3
 800088e:	0020      	movs	r0, r4
 8000890:	f7ff fc44 	bl	800011c <__udivsi3>
 8000894:	0003      	movs	r3, r0
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f905 	bl	8000aa6 <HAL_SYSTICK_Config>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e00f      	b.n	80008c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d80b      	bhi.n	80008c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f8e2 	bl	8000a7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_InitTick+0x64>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b003      	add	sp, #12
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	001a      	movs	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	18d2      	adds	r2, r2, r3
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_IncTick+0x20>)
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000168 	.word	0x20000168

080008fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000168 	.word	0x20000168

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff fff0 	bl	80008fc <HAL_GetTick>
 800091c:	0003      	movs	r3, r0
 800091e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001a      	movs	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	189b      	adds	r3, r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	f7ff ffe0 	bl	80008fc <HAL_GetTick>
 800093c:	0002      	movs	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	0002      	movs	r2, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b7f      	cmp	r3, #127	; 0x7f
 800096c:	d828      	bhi.n	80009c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <__NVIC_SetPriority+0xd4>)
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	33c0      	adds	r3, #192	; 0xc0
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	589b      	ldr	r3, [r3, r2]
 800097e:	1dfa      	adds	r2, r7, #7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	0011      	movs	r1, r2
 8000984:	2203      	movs	r2, #3
 8000986:	400a      	ands	r2, r1
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	401a      	ands	r2, r3
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0018      	movs	r0, r3
 80009a4:	2303      	movs	r3, #3
 80009a6:	4003      	ands	r3, r0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <__NVIC_SetPriority+0xd4>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	33c0      	adds	r3, #192	; 0xc0
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009be:	e031      	b.n	8000a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <__NVIC_SetPriority+0xd8>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0019      	movs	r1, r3
 80009c8:	230f      	movs	r3, #15
 80009ca:	400b      	ands	r3, r1
 80009cc:	3b08      	subs	r3, #8
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3306      	adds	r3, #6
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	3304      	adds	r3, #4
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1dfa      	adds	r2, r7, #7
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	0011      	movs	r1, r2
 80009e0:	2203      	movs	r2, #3
 80009e2:	400a      	ands	r2, r1
 80009e4:	00d2      	lsls	r2, r2, #3
 80009e6:	21ff      	movs	r1, #255	; 0xff
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	019b      	lsls	r3, r3, #6
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	401a      	ands	r2, r3
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0018      	movs	r0, r3
 8000a00:	2303      	movs	r3, #3
 8000a02:	4003      	ands	r3, r0
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <__NVIC_SetPriority+0xd8>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001c      	movs	r4, r3
 8000a10:	230f      	movs	r3, #15
 8000a12:	4023      	ands	r3, r4
 8000a14:	3b08      	subs	r3, #8
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	3306      	adds	r3, #6
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	18c3      	adds	r3, r0, r3
 8000a20:	3304      	adds	r3, #4
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b003      	add	sp, #12
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1e5a      	subs	r2, r3, #1
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	045b      	lsls	r3, r3, #17
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d301      	bcc.n	8000a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e010      	b.n	8000a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SysTick_Config+0x44>)
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	3a01      	subs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a54:	2301      	movs	r3, #1
 8000a56:	425b      	negs	r3, r3
 8000a58:	2103      	movs	r1, #3
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff7c 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x44>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x44>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	210f      	movs	r1, #15
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	1c02      	adds	r2, r0, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ffbf 	bl	8000a34 <SysTick_Config>
 8000ab6:	0003      	movs	r3, r0
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	e14f      	b.n	8000d70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	000a      	movs	r2, r1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d100      	bne.n	8000ae8 <HAL_GPIO_Init+0x28>
 8000ae6:	e140      	b.n	8000d6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2203      	movs	r2, #3
 8000aee:	4013      	ands	r3, r2
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d005      	beq.n	8000b00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2203      	movs	r2, #3
 8000afa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d130      	bne.n	8000b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	43da      	mvns	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	409a      	lsls	r2, r3
 8000b22:	0013      	movs	r3, r2
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2203      	movs	r2, #3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d017      	beq.n	8000b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d123      	bne.n	8000bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	58d3      	ldr	r3, [r2, r3]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2207      	movs	r2, #7
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	6939      	ldr	r1, [r7, #16]
 8000bf0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	401a      	ands	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	23c0      	movs	r3, #192	; 0xc0
 8000c2c:	029b      	lsls	r3, r3, #10
 8000c2e:	4013      	ands	r3, r2
 8000c30:	d100      	bne.n	8000c34 <HAL_GPIO_Init+0x174>
 8000c32:	e09a      	b.n	8000d6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <HAL_GPIO_Init+0x2c8>)
 8000c36:	699a      	ldr	r2, [r3, #24]
 8000c38:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <HAL_GPIO_Init+0x2c8>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	619a      	str	r2, [r3, #24]
 8000c40:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <HAL_GPIO_Init+0x2c8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	2201      	movs	r2, #1
 8000c46:	4013      	ands	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c4c:	4a4f      	ldr	r2, [pc, #316]	; (8000d8c <HAL_GPIO_Init+0x2cc>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	589b      	ldr	r3, [r3, r2]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d013      	beq.n	8000ca2 <HAL_GPIO_Init+0x1e2>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a44      	ldr	r2, [pc, #272]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00d      	beq.n	8000c9e <HAL_GPIO_Init+0x1de>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a43      	ldr	r2, [pc, #268]	; (8000d94 <HAL_GPIO_Init+0x2d4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x1da>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a42      	ldr	r2, [pc, #264]	; (8000d98 <HAL_GPIO_Init+0x2d8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_Init+0x1d6>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x1e4>
 8000c96:	2305      	movs	r3, #5
 8000c98:	e004      	b.n	8000ca4 <HAL_GPIO_Init+0x1e4>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e002      	b.n	8000ca4 <HAL_GPIO_Init+0x1e4>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x1e4>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	400a      	ands	r2, r1
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	4093      	lsls	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb4:	4935      	ldr	r1, [pc, #212]	; (8000d8c <HAL_GPIO_Init+0x2cc>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	035b      	lsls	r3, r3, #13
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43da      	mvns	r2, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	039b      	lsls	r3, r3, #14
 8000d04:	4013      	ands	r3, r2
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	025b      	lsls	r3, r3, #9
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	40da      	lsrs	r2, r3
 8000d78:	1e13      	subs	r3, r2, #0
 8000d7a:	d000      	beq.n	8000d7e <HAL_GPIO_Init+0x2be>
 8000d7c:	e6a8      	b.n	8000ad0 <HAL_GPIO_Init+0x10>
  } 
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b006      	add	sp, #24
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	48000400 	.word	0x48000400
 8000d94:	48000800 	.word	0x48000800
 8000d98:	48000c00 	.word	0x48000c00
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	0008      	movs	r0, r1
 8000daa:	0011      	movs	r1, r2
 8000dac:	1cbb      	adds	r3, r7, #2
 8000dae:	1c02      	adds	r2, r0, #0
 8000db0:	801a      	strh	r2, [r3, #0]
 8000db2:	1c7b      	adds	r3, r7, #1
 8000db4:	1c0a      	adds	r2, r1, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db8:	1c7b      	adds	r3, r7, #1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc0:	1cbb      	adds	r3, r7, #2
 8000dc2:	881a      	ldrh	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc8:	e003      	b.n	8000dd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dca:	1cbb      	adds	r3, r7, #2
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e301      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4013      	ands	r3, r2
 8000df6:	d100      	bne.n	8000dfa <HAL_RCC_OscConfig+0x1e>
 8000df8:	e08d      	b.n	8000f16 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dfa:	4bc3      	ldr	r3, [pc, #780]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	220c      	movs	r2, #12
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d00e      	beq.n	8000e24 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e06:	4bc0      	ldr	r3, [pc, #768]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x64>
 8000e12:	4bbd      	ldr	r3, [pc, #756]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	025b      	lsls	r3, r3, #9
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	025b      	lsls	r3, r3, #9
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d10d      	bne.n	8000e40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	4bb8      	ldr	r3, [pc, #736]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d100      	bne.n	8000e32 <HAL_RCC_OscConfig+0x56>
 8000e30:	e070      	b.n	8000f14 <HAL_RCC_OscConfig+0x138>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d000      	beq.n	8000e3c <HAL_RCC_OscConfig+0x60>
 8000e3a:	e06b      	b.n	8000f14 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e2d8      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d107      	bne.n	8000e58 <HAL_RCC_OscConfig+0x7c>
 8000e48:	4baf      	ldr	r3, [pc, #700]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4bae      	ldr	r3, [pc, #696]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e02f      	b.n	8000eb8 <HAL_RCC_OscConfig+0xdc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10c      	bne.n	8000e7a <HAL_RCC_OscConfig+0x9e>
 8000e60:	4ba9      	ldr	r3, [pc, #676]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4ba8      	ldr	r3, [pc, #672]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	49a9      	ldr	r1, [pc, #676]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	4ba6      	ldr	r3, [pc, #664]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4ba5      	ldr	r3, [pc, #660]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	49a7      	ldr	r1, [pc, #668]	; (8001110 <HAL_RCC_OscConfig+0x334>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e01e      	b.n	8000eb8 <HAL_RCC_OscConfig+0xdc>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b05      	cmp	r3, #5
 8000e80:	d10e      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xc4>
 8000e82:	4ba1      	ldr	r3, [pc, #644]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4ba0      	ldr	r3, [pc, #640]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	02c9      	lsls	r1, r1, #11
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4b9d      	ldr	r3, [pc, #628]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b9c      	ldr	r3, [pc, #624]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0249      	lsls	r1, r1, #9
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0xdc>
 8000ea0:	4b99      	ldr	r3, [pc, #612]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b98      	ldr	r3, [pc, #608]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	4999      	ldr	r1, [pc, #612]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	4b96      	ldr	r3, [pc, #600]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b95      	ldr	r3, [pc, #596]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	4997      	ldr	r1, [pc, #604]	; (8001110 <HAL_RCC_OscConfig+0x334>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d014      	beq.n	8000eea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fd1c 	bl	80008fc <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fd17 	bl	80008fc <HAL_GetTick>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b64      	cmp	r3, #100	; 0x64
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e28a      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000edc:	4b8a      	ldr	r3, [pc, #552]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	029b      	lsls	r3, r3, #10
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0xee>
 8000ee8:	e015      	b.n	8000f16 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fd07 	bl	80008fc <HAL_GetTick>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fd02 	bl	80008fc <HAL_GetTick>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	; 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e275      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	4b80      	ldr	r3, [pc, #512]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	029b      	lsls	r3, r3, #10
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x118>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d100      	bne.n	8000f22 <HAL_RCC_OscConfig+0x146>
 8000f20:	e069      	b.n	8000ff6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f22:	4b79      	ldr	r3, [pc, #484]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	220c      	movs	r2, #12
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d00b      	beq.n	8000f44 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f2c:	4b76      	ldr	r3, [pc, #472]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	220c      	movs	r2, #12
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d11c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x196>
 8000f38:	4b73      	ldr	r3, [pc, #460]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	4013      	ands	r3, r2
 8000f42:	d116      	bne.n	8000f72 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f44:	4b70      	ldr	r3, [pc, #448]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2202      	movs	r2, #2
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d005      	beq.n	8000f5a <HAL_RCC_OscConfig+0x17e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d001      	beq.n	8000f5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e24b      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	22f8      	movs	r2, #248	; 0xf8
 8000f60:	4393      	bics	r3, r2
 8000f62:	0019      	movs	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	00da      	lsls	r2, r3, #3
 8000f6a:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f70:	e041      	b.n	8000ff6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d024      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7a:	4b63      	ldr	r3, [pc, #396]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b62      	ldr	r3, [pc, #392]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fcb9 	bl	80008fc <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fcb4 	bl	80008fc <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e227      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa2:	4b59      	ldr	r3, [pc, #356]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d0f1      	beq.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b56      	ldr	r3, [pc, #344]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	22f8      	movs	r2, #248	; 0xf8
 8000fb2:	4393      	bics	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	00da      	lsls	r2, r3, #3
 8000fbc:	4b52      	ldr	r3, [pc, #328]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e018      	b.n	8000ff6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	4b50      	ldr	r3, [pc, #320]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	438a      	bics	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc94 	bl	80008fc <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fc8f 	bl	80008fc <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e202      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1f1      	bne.n	8000fda <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d036      	beq.n	800106e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d019      	beq.n	800103c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800100a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100c:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800100e:	2101      	movs	r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fc72 	bl	80008fc <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101e:	f7ff fc6d 	bl	80008fc <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1e0      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d0f1      	beq.n	800101e <HAL_RCC_OscConfig+0x242>
 800103a:	e018      	b.n	800106e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800103e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001042:	2101      	movs	r1, #1
 8001044:	438a      	bics	r2, r1
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001048:	f7ff fc58 	bl	80008fc <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff fc53 	bl	80008fc <HAL_GetTick>
 8001056:	0002      	movs	r2, r0
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e1c6      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	2202      	movs	r2, #2
 800106a:	4013      	ands	r3, r2
 800106c:	d1f1      	bne.n	8001052 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2204      	movs	r2, #4
 8001074:	4013      	ands	r3, r2
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0x29e>
 8001078:	e0b4      	b.n	80011e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107a:	201f      	movs	r0, #31
 800107c:	183b      	adds	r3, r7, r0
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001084:	69da      	ldr	r2, [r3, #28]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	055b      	lsls	r3, r3, #21
 800108a:	4013      	ands	r3, r2
 800108c:	d110      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001090:	69da      	ldr	r2, [r3, #28]
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0549      	lsls	r1, r1, #21
 8001098:	430a      	orrs	r2, r1
 800109a:	61da      	str	r2, [r3, #28]
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	055b      	lsls	r3, r3, #21
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010aa:	183b      	adds	r3, r7, r0
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	d11a      	bne.n	80010f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_RCC_OscConfig+0x338>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_RCC_OscConfig+0x338>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	0049      	lsls	r1, r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fc17 	bl	80008fc <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d4:	f7ff fc12 	bl	80008fc <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e185      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_RCC_OscConfig+0x338>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10e      	bne.n	8001118 <HAL_RCC_OscConfig+0x33c>
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	6a1a      	ldr	r2, [r3, #32]
 80010fe:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	621a      	str	r2, [r3, #32]
 8001106:	e035      	b.n	8001174 <HAL_RCC_OscConfig+0x398>
 8001108:	40021000 	.word	0x40021000
 800110c:	fffeffff 	.word	0xfffeffff
 8001110:	fffbffff 	.word	0xfffbffff
 8001114:	40007000 	.word	0x40007000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x35e>
 8001120:	4bb6      	ldr	r3, [pc, #728]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	4bb5      	ldr	r3, [pc, #724]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001126:	2101      	movs	r1, #1
 8001128:	438a      	bics	r2, r1
 800112a:	621a      	str	r2, [r3, #32]
 800112c:	4bb3      	ldr	r3, [pc, #716]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800112e:	6a1a      	ldr	r2, [r3, #32]
 8001130:	4bb2      	ldr	r3, [pc, #712]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001132:	2104      	movs	r1, #4
 8001134:	438a      	bics	r2, r1
 8001136:	621a      	str	r2, [r3, #32]
 8001138:	e01c      	b.n	8001174 <HAL_RCC_OscConfig+0x398>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x380>
 8001142:	4bae      	ldr	r3, [pc, #696]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001144:	6a1a      	ldr	r2, [r3, #32]
 8001146:	4bad      	ldr	r3, [pc, #692]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001148:	2104      	movs	r1, #4
 800114a:	430a      	orrs	r2, r1
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	4bab      	ldr	r3, [pc, #684]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001150:	6a1a      	ldr	r2, [r3, #32]
 8001152:	4baa      	ldr	r3, [pc, #680]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	621a      	str	r2, [r3, #32]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0x398>
 800115c:	4ba7      	ldr	r3, [pc, #668]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4ba6      	ldr	r3, [pc, #664]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	4ba4      	ldr	r3, [pc, #656]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	4ba3      	ldr	r3, [pc, #652]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800116e:	2104      	movs	r1, #4
 8001170:	438a      	bics	r2, r1
 8001172:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d014      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fbbe 	bl	80008fc <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001184:	e009      	b.n	800119a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fbb9 	bl	80008fc <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	4a9b      	ldr	r2, [pc, #620]	; (8001400 <HAL_RCC_OscConfig+0x624>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e12b      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119a:	4b98      	ldr	r3, [pc, #608]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x3aa>
 80011a4:	e013      	b.n	80011ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fba9 	bl	80008fc <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ae:	e009      	b.n	80011c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fba4 	bl	80008fc <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4a91      	ldr	r2, [pc, #580]	; (8001400 <HAL_RCC_OscConfig+0x624>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e116      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	4b8d      	ldr	r3, [pc, #564]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ce:	231f      	movs	r3, #31
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d8:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80011da:	69da      	ldr	r2, [r3, #28]
 80011dc:	4b87      	ldr	r3, [pc, #540]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80011de:	4989      	ldr	r1, [pc, #548]	; (8001404 <HAL_RCC_OscConfig+0x628>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	4013      	ands	r3, r2
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d12a      	bne.n	800124c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011f6:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80011f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fa:	4b80      	ldr	r3, [pc, #512]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80011fc:	2104      	movs	r1, #4
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001202:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001206:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb75 	bl	80008fc <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001218:	f7ff fb70 	bl	80008fc <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0e3      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800122a:	4b74      	ldr	r3, [pc, #464]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d0f1      	beq.n	8001218 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001234:	4b71      	ldr	r3, [pc, #452]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	22f8      	movs	r2, #248	; 0xf8
 800123a:	4393      	bics	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	00da      	lsls	r2, r3, #3
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
 800124a:	e034      	b.n	80012b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	3305      	adds	r3, #5
 8001252:	d111      	bne.n	8001278 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001254:	4b69      	ldr	r3, [pc, #420]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800125a:	2104      	movs	r1, #4
 800125c:	438a      	bics	r2, r1
 800125e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	22f8      	movs	r2, #248	; 0xf8
 8001266:	4393      	bics	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	00da      	lsls	r2, r3, #3
 8001270:	4b62      	ldr	r3, [pc, #392]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	e01e      	b.n	80012b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001278:	4b60      	ldr	r3, [pc, #384]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800127a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800127c:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800127e:	2104      	movs	r1, #4
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001284:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001288:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800128a:	2101      	movs	r1, #1
 800128c:	438a      	bics	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fb34 	bl	80008fc <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800129a:	f7ff fb2f 	bl	80008fc <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0a2      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d1f1      	bne.n	800129a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x4e4>
 80012be:	e097      	b.n	80013f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d100      	bne.n	80012ce <HAL_RCC_OscConfig+0x4f2>
 80012cc:	e06b      	b.n	80013a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d14c      	bne.n	8001370 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80012dc:	494a      	ldr	r1, [pc, #296]	; (8001408 <HAL_RCC_OscConfig+0x62c>)
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb0b 	bl	80008fc <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff fb06 	bl	80008fc <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e079      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049b      	lsls	r3, r3, #18
 8001306:	4013      	ands	r3, r2
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	220f      	movs	r2, #15
 8001310:	4393      	bics	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800131a:	430a      	orrs	r2, r1
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4a3a      	ldr	r2, [pc, #232]	; (800140c <HAL_RCC_OscConfig+0x630>)
 8001324:	4013      	ands	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	431a      	orrs	r2, r3
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001334:	430a      	orrs	r2, r1
 8001336:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	0449      	lsls	r1, r1, #17
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fad9 	bl	80008fc <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff fad4 	bl	80008fc <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e047      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	049b      	lsls	r3, r3, #18
 800136a:	4013      	ands	r3, r2
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x574>
 800136e:	e03f      	b.n	80013f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 8001376:	4924      	ldr	r1, [pc, #144]	; (8001408 <HAL_RCC_OscConfig+0x62c>)
 8001378:	400a      	ands	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fabe 	bl	80008fc <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fab9 	bl	80008fc <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e02c      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	049b      	lsls	r3, r3, #18
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x5aa>
 80013a4:	e024      	b.n	80013f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e01f      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x620>)
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	401a      	ands	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d10e      	bne.n	80013ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	220f      	movs	r2, #15
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d107      	bne.n	80013ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	23f0      	movs	r3, #240	; 0xf0
 80013e0:	039b      	lsls	r3, r3, #14
 80013e2:	401a      	ands	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b008      	add	sp, #32
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000
 8001400:	00001388 	.word	0x00001388
 8001404:	efffffff 	.word	0xefffffff
 8001408:	feffffff 	.word	0xfeffffff
 800140c:	ffc2ffff 	.word	0xffc2ffff

08001410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b3      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d911      	bls.n	8001456 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	4393      	bics	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e09a      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2202      	movs	r2, #2
 800145c:	4013      	ands	r3, r2
 800145e:	d015      	beq.n	800148c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2204      	movs	r2, #4
 8001466:	4013      	ands	r3, r2
 8001468:	d006      	beq.n	8001478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800146a:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 8001470:	21e0      	movs	r1, #224	; 0xe0
 8001472:	00c9      	lsls	r1, r1, #3
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	22f0      	movs	r2, #240	; 0xf0
 800147e:	4393      	bics	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	4013      	ands	r3, r2
 8001494:	d040      	beq.n	8001518 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d114      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06e      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	049b      	lsls	r3, r3, #18
 80014be:	4013      	ands	r3, r2
 80014c0:	d108      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e062      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e05b      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	4393      	bics	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fa08 	bl	80008fc <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f0:	e009      	b.n	8001506 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f2:	f7ff fa03 	bl	80008fc <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4a27      	ldr	r2, [pc, #156]	; (800159c <HAL_RCC_ClockConfig+0x18c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e042      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	220c      	movs	r2, #12
 800150c:	401a      	ands	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1ec      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d211      	bcs.n	800154a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4393      	bics	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_RCC_ClockConfig+0x184>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e020      	b.n	800158c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2204      	movs	r2, #4
 8001550:	4013      	ands	r3, r2
 8001552:	d009      	beq.n	8001568 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_RCC_ClockConfig+0x190>)
 800155a:	4013      	ands	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001568:	f000 f820 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 800156c:	0001      	movs	r1, r0
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x188>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	220f      	movs	r2, #15
 8001576:	4013      	ands	r3, r2
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x194>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	000a      	movs	r2, r1
 800157e:	40da      	lsrs	r2, r3
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x198>)
 8001582:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff f973 	bl	8000870 <HAL_InitTick>
  
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40022000 	.word	0x40022000
 8001598:	40021000 	.word	0x40021000
 800159c:	00001388 	.word	0x00001388
 80015a0:	fffff8ff 	.word	0xfffff8ff
 80015a4:	080038e4 	.word	0x080038e4
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	220c      	movs	r2, #12
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x30>
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x36>
 80015da:	e02c      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015de:	613b      	str	r3, [r7, #16]
      break;
 80015e0:	e02c      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	220f      	movs	r2, #15
 80015e8:	4013      	ands	r3, r2
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	220f      	movs	r2, #15
 80015f6:	4013      	ands	r3, r2
 80015f8:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_RCC_GetSysClockFreq+0xa8>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	4013      	ands	r3, r2
 8001606:	d009      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <HAL_RCC_GetSysClockFreq+0xa0>)
 800160c:	f7fe fd86 	bl	800011c <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4353      	muls	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e009      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	000a      	movs	r2, r1
 8001620:	0152      	lsls	r2, r2, #5
 8001622:	1a52      	subs	r2, r2, r1
 8001624:	0193      	lsls	r3, r2, #6
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	185b      	adds	r3, r3, r1
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	e002      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001638:	613b      	str	r3, [r7, #16]
      break;
 800163a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800163c:	693b      	ldr	r3, [r7, #16]
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b006      	add	sp, #24
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40021000 	.word	0x40021000
 800164c:	007a1200 	.word	0x007a1200
 8001650:	080038fc 	.word	0x080038fc
 8001654:	0800390c 	.word	0x0800390c

08001658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_RCC_GetHCLKFreq+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	20000000 	.word	0x20000000

0800166c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001670:	f7ff fff2 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 8001674:	0001      	movs	r1, r0
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	2207      	movs	r2, #7
 800167e:	4013      	ands	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	40d9      	lsrs	r1, r3
 8001686:	000b      	movs	r3, r1
}    
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40021000 	.word	0x40021000
 8001694:	080038f4 	.word	0x080038f4

08001698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	025b      	lsls	r3, r3, #9
 80016b0:	4013      	ands	r3, r2
 80016b2:	d100      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016b4:	e08e      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2017      	movs	r0, #23
 80016b8:	183b      	adds	r3, r7, r0
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b5f      	ldr	r3, [pc, #380]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	055b      	lsls	r3, r3, #21
 80016c6:	4013      	ands	r3, r2
 80016c8:	d110      	bne.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	0549      	lsls	r1, r1, #21
 80016d4:	430a      	orrs	r2, r1
 80016d6:	61da      	str	r2, [r3, #28]
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	055b      	lsls	r3, r3, #21
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	183b      	adds	r3, r7, r0
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b54      	ldr	r3, [pc, #336]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	d11a      	bne.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f8:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	0049      	lsls	r1, r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001706:	f7ff f8f9 	bl	80008fc <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	e008      	b.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001710:	f7ff f8f4 	bl	80008fc <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e087      	b.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4013      	ands	r3, r2
 800172c:	d0f0      	beq.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d034      	beq.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4013      	ands	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d02c      	beq.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a3b      	ldr	r2, [pc, #236]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	0249      	lsls	r1, r1, #9
 8001764:	430a      	orrs	r2, r1
 8001766:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176e:	4936      	ldr	r1, [pc, #216]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001770:	400a      	ands	r2, r1
 8001772:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff f8bb 	bl	80008fc <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	e009      	b.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff f8b6 	bl	80008fc <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e048      	b.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d0f0      	beq.n	800178c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017be:	2317      	movs	r3, #23
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ce:	4920      	ldr	r1, [pc, #128]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	2203      	movs	r2, #3
 80017e4:	4393      	bics	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	4013      	ands	r3, r2
 80017fa:	d009      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	2210      	movs	r2, #16
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800180c:	430a      	orrs	r2, r1
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	4393      	bics	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800182c:	430a      	orrs	r2, r1
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b006      	add	sp, #24
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40021000 	.word	0x40021000
 8001840:	40007000 	.word	0x40007000
 8001844:	fffffcff 	.word	0xfffffcff
 8001848:	fffeffff 	.word	0xfffeffff
 800184c:	00001388 	.word	0x00001388
 8001850:	efffffff 	.word	0xefffffff

08001854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0a8      	b.n	80019b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	2382      	movs	r3, #130	; 0x82
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	429a      	cmp	r2, r3
 8001878:	d009      	beq.n	800188e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
 8001880:	e005      	b.n	800188e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	225d      	movs	r2, #93	; 0x5d
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	225c      	movs	r2, #92	; 0x5c
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7fe feb2 	bl	8000614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	225d      	movs	r2, #93	; 0x5d
 80018b4:	2102      	movs	r1, #2
 80018b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	438a      	bics	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	23e0      	movs	r3, #224	; 0xe0
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d902      	bls.n	80018da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e002      	b.n	80018e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	015b      	lsls	r3, r3, #5
 80018de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	23f0      	movs	r3, #240	; 0xf0
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d008      	beq.n	80018fe <HAL_SPI_Init+0xaa>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	23e0      	movs	r3, #224	; 0xe0
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d002      	beq.n	80018fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	2382      	movs	r3, #130	; 0x82
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6899      	ldr	r1, [r3, #8]
 800190c:	2384      	movs	r3, #132	; 0x84
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	400b      	ands	r3, r1
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2102      	movs	r1, #2
 800191a:	400b      	ands	r3, r1
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2101      	movs	r1, #1
 8001924:	400b      	ands	r3, r1
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6999      	ldr	r1, [r3, #24]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	400b      	ands	r3, r1
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2138      	movs	r1, #56	; 0x38
 800193a:	400b      	ands	r3, r1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	400b      	ands	r3, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	0011      	movs	r1, r2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	2204      	movs	r2, #4
 8001964:	401a      	ands	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2110      	movs	r1, #16
 800196c:	400b      	ands	r3, r1
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001974:	2108      	movs	r1, #8
 8001976:	400b      	ands	r3, r1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	23f0      	movs	r3, #240	; 0xf0
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	400b      	ands	r3, r1
 8001984:	431a      	orrs	r2, r3
 8001986:	0011      	movs	r1, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	015b      	lsls	r3, r3, #5
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4907      	ldr	r1, [pc, #28]	; (80019c0 <HAL_SPI_Init+0x16c>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	225d      	movs	r2, #93	; 0x5d
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fffff7ff 	.word	0xfffff7ff

080019c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019d4:	231f      	movs	r3, #31
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	225c      	movs	r2, #92	; 0x5c
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_SPI_Transmit+0x26>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e147      	b.n	8001c7a <HAL_SPI_Transmit+0x2b6>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	225c      	movs	r2, #92	; 0x5c
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f2:	f7fe ff83 	bl	80008fc <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80019fa:	2316      	movs	r3, #22
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	1dba      	adds	r2, r7, #6
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	225d      	movs	r2, #93	; 0x5d
 8001a08:	5c9b      	ldrb	r3, [r3, r2]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d004      	beq.n	8001a1a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001a10:	231f      	movs	r3, #31
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2202      	movs	r2, #2
 8001a16:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a18:	e128      	b.n	8001c6c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_SPI_Transmit+0x64>
 8001a20:	1dbb      	adds	r3, r7, #6
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001a28:	231f      	movs	r3, #31
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a30:	e11c      	b.n	8001c6c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	225d      	movs	r2, #93	; 0x5d
 8001a36:	2103      	movs	r1, #3
 8001a38:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1dba      	adds	r2, r7, #6
 8001a4a:	8812      	ldrh	r2, [r2, #0]
 8001a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1dba      	adds	r2, r7, #6
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2244      	movs	r2, #68	; 0x44
 8001a60:	2100      	movs	r1, #0
 8001a62:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2246      	movs	r2, #70	; 0x46
 8001a68:	2100      	movs	r1, #0
 8001a6a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d110      	bne.n	8001aa6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	438a      	bics	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	01c9      	lsls	r1, r1, #7
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b40      	cmp	r3, #64	; 0x40
 8001ab2:	d007      	beq.n	8001ac4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	23e0      	movs	r3, #224	; 0xe0
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d952      	bls.n	8001b76 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_SPI_Transmit+0x11e>
 8001ad8:	2316      	movs	r3, #22
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d143      	bne.n	8001b6a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	1c9a      	adds	r2, r3, #2
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b06:	e030      	b.n	8001b6a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d112      	bne.n	8001b3c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	881a      	ldrh	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	1c9a      	adds	r2, r3, #2
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b3a:	e016      	b.n	8001b6a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b3c:	f7fe fede 	bl	80008fc <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d802      	bhi.n	8001b52 <HAL_SPI_Transmit+0x18e>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_SPI_Transmit+0x194>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d108      	bne.n	8001b6a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001b58:	231f      	movs	r3, #31
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	225d      	movs	r2, #93	; 0x5d
 8001b64:	2101      	movs	r1, #1
 8001b66:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b68:	e080      	b.n	8001c6c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1c9      	bne.n	8001b08 <HAL_SPI_Transmit+0x144>
 8001b74:	e053      	b.n	8001c1e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_SPI_Transmit+0x1c4>
 8001b7e:	2316      	movs	r3, #22
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d145      	bne.n	8001c14 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	330c      	adds	r3, #12
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001bae:	e031      	b.n	8001c14 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d113      	bne.n	8001be6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	330c      	adds	r3, #12
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001be4:	e016      	b.n	8001c14 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be6:	f7fe fe89 	bl	80008fc <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d802      	bhi.n	8001bfc <HAL_SPI_Transmit+0x238>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	d102      	bne.n	8001c02 <HAL_SPI_Transmit+0x23e>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d108      	bne.n	8001c14 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001c02:	231f      	movs	r3, #31
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2203      	movs	r2, #3
 8001c08:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	225d      	movs	r2, #93	; 0x5d
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c12:	e02b      	b.n	8001c6c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1c8      	bne.n	8001bb0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fcef 	bl	8002608 <SPI_EndRxTxTransaction>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e003      	b.n	8001c6c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	225d      	movs	r2, #93	; 0x5d
 8001c68:	2101      	movs	r1, #1
 8001c6a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	225c      	movs	r2, #92	; 0x5c
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c74:	231f      	movs	r3, #31
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b008      	add	sp, #32
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	1dbb      	adds	r3, r7, #6
 8001c92:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c94:	2117      	movs	r1, #23
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	225d      	movs	r2, #93	; 0x5d
 8001ca0:	5c9b      	ldrb	r3, [r3, r2]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d003      	beq.n	8001cb0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	2202      	movs	r2, #2
 8001cac:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cae:	e12b      	b.n	8001f08 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	2382      	movs	r3, #130	; 0x82
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d113      	bne.n	8001ce4 <HAL_SPI_Receive+0x60>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	225d      	movs	r2, #93	; 0x5d
 8001cc8:	2104      	movs	r1, #4
 8001cca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ccc:	1dbb      	adds	r3, r7, #6
 8001cce:	881c      	ldrh	r4, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	0023      	movs	r3, r4
 8001cdc:	f000 f924 	bl	8001f28 <HAL_SPI_TransmitReceive>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	e118      	b.n	8001f16 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	225c      	movs	r2, #92	; 0x5c
 8001ce8:	5c9b      	ldrb	r3, [r3, r2]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_SPI_Receive+0x6e>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e111      	b.n	8001f16 <HAL_SPI_Receive+0x292>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	225c      	movs	r2, #92	; 0x5c
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cfa:	f7fe fdff 	bl	80008fc <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_SPI_Receive+0x8c>
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d104      	bne.n	8001d1a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001d10:	2317      	movs	r3, #23
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d18:	e0f6      	b.n	8001f08 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	225d      	movs	r2, #93	; 0x5d
 8001d1e:	2104      	movs	r1, #4
 8001d20:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1dba      	adds	r2, r7, #6
 8001d32:	2144      	movs	r1, #68	; 0x44
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1dba      	adds	r2, r7, #6
 8001d3c:	2146      	movs	r1, #70	; 0x46
 8001d3e:	8812      	ldrh	r2, [r2, #0]
 8001d40:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	23e0      	movs	r3, #224	; 0xe0
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d908      	bls.n	8001d7e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	496a      	ldr	r1, [pc, #424]	; (8001f20 <HAL_SPI_Receive+0x29c>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	e008      	b.n	8001d90 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0149      	lsls	r1, r1, #5
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10f      	bne.n	8001dbc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2140      	movs	r1, #64	; 0x40
 8001da8:	438a      	bics	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	495b      	ldr	r1, [pc, #364]	; (8001f24 <HAL_SPI_Receive+0x2a0>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d007      	beq.n	8001dda <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	23e0      	movs	r3, #224	; 0xe0
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d900      	bls.n	8001de8 <HAL_SPI_Receive+0x164>
 8001de6:	e071      	b.n	8001ecc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001de8:	e035      	b.n	8001e56 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d117      	bne.n	8001e28 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	001a      	movs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2246      	movs	r2, #70	; 0x46
 8001e18:	5a9b      	ldrh	r3, [r3, r2]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2246      	movs	r2, #70	; 0x46
 8001e24:	5299      	strh	r1, [r3, r2]
 8001e26:	e016      	b.n	8001e56 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e28:	f7fe fd68 	bl	80008fc <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d802      	bhi.n	8001e3e <HAL_SPI_Receive+0x1ba>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_SPI_Receive+0x1c0>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d108      	bne.n	8001e56 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001e44:	2317      	movs	r3, #23
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2203      	movs	r2, #3
 8001e4a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	225d      	movs	r2, #93	; 0x5d
 8001e50:	2101      	movs	r1, #1
 8001e52:	5499      	strb	r1, [r3, r2]
          goto error;
 8001e54:	e058      	b.n	8001f08 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2246      	movs	r2, #70	; 0x46
 8001e5a:	5a9b      	ldrh	r3, [r3, r2]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1c3      	bne.n	8001dea <HAL_SPI_Receive+0x166>
 8001e62:	e039      	b.n	8001ed8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d115      	bne.n	8001e9e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	1c9a      	adds	r2, r3, #2
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2246      	movs	r2, #70	; 0x46
 8001e8e:	5a9b      	ldrh	r3, [r3, r2]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b299      	uxth	r1, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2246      	movs	r2, #70	; 0x46
 8001e9a:	5299      	strh	r1, [r3, r2]
 8001e9c:	e016      	b.n	8001ecc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e9e:	f7fe fd2d 	bl	80008fc <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d802      	bhi.n	8001eb4 <HAL_SPI_Receive+0x230>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_SPI_Receive+0x236>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001eba:	2317      	movs	r3, #23
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	225d      	movs	r2, #93	; 0x5d
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001eca:	e01d      	b.n	8001f08 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2246      	movs	r2, #70	; 0x46
 8001ed0:	5a9b      	ldrh	r3, [r3, r2]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1c5      	bne.n	8001e64 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 fb34 	bl	800254c <SPI_EndRxTransaction>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001ef6:	2317      	movs	r3, #23
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e003      	b.n	8001f08 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	225d      	movs	r2, #93	; 0x5d
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	225c      	movs	r2, #92	; 0x5c
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f10:	2317      	movs	r3, #23
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b007      	add	sp, #28
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	ffffefff 	.word	0xffffefff
 8001f24:	ffffbfff 	.word	0xffffbfff

08001f28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	001a      	movs	r2, r3
 8001f36:	1cbb      	adds	r3, r7, #2
 8001f38:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f3e:	2323      	movs	r3, #35	; 0x23
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	225c      	movs	r2, #92	; 0x5c
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x2c>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e1c4      	b.n	80022de <HAL_SPI_TransmitReceive+0x3b6>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	225c      	movs	r2, #92	; 0x5c
 8001f58:	2101      	movs	r1, #1
 8001f5a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f5c:	f7fe fcce 	bl	80008fc <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f64:	201b      	movs	r0, #27
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	215d      	movs	r1, #93	; 0x5d
 8001f6c:	5c52      	ldrb	r2, [r2, r1]
 8001f6e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f76:	2312      	movs	r3, #18
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	1cba      	adds	r2, r7, #2
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d011      	beq.n	8001fac <HAL_SPI_TransmitReceive+0x84>
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	2382      	movs	r3, #130	; 0x82
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d107      	bne.n	8001fa2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_SPI_TransmitReceive+0x7a>
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d004      	beq.n	8001fac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001fa2:	2323      	movs	r3, #35	; 0x23
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001faa:	e191      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_SPI_TransmitReceive+0x98>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_SPI_TransmitReceive+0x98>
 8001fb8:	1cbb      	adds	r3, r7, #2
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001fc0:	2323      	movs	r3, #35	; 0x23
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fc8:	e182      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	225d      	movs	r2, #93	; 0x5d
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d003      	beq.n	8001fde <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	225d      	movs	r2, #93	; 0x5d
 8001fda:	2105      	movs	r1, #5
 8001fdc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1cba      	adds	r2, r7, #2
 8001fee:	2146      	movs	r1, #70	; 0x46
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1cba      	adds	r2, r7, #2
 8001ff8:	2144      	movs	r1, #68	; 0x44
 8001ffa:	8812      	ldrh	r2, [r2, #0]
 8001ffc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1cba      	adds	r2, r7, #2
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1cba      	adds	r2, r7, #2
 8002010:	8812      	ldrh	r2, [r2, #0]
 8002012:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	23e0      	movs	r3, #224	; 0xe0
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	49ac      	ldr	r1, [pc, #688]	; (80022e8 <HAL_SPI_TransmitReceive+0x3c0>)
 8002038:	400a      	ands	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e008      	b.n	8002050 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	0149      	lsls	r1, r1, #5
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	4013      	ands	r3, r2
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d007      	beq.n	800206e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	23e0      	movs	r3, #224	; 0xe0
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	429a      	cmp	r2, r3
 8002078:	d800      	bhi.n	800207c <HAL_SPI_TransmitReceive+0x154>
 800207a:	e083      	b.n	8002184 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_SPI_TransmitReceive+0x168>
 8002084:	2312      	movs	r3, #18
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d000      	beq.n	8002090 <HAL_SPI_TransmitReceive+0x168>
 800208e:	e06d      	b.n	800216c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	1c9a      	adds	r2, r3, #2
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b4:	e05a      	b.n	800216c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d11b      	bne.n	80020fc <HAL_SPI_TransmitReceive+0x1d4>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_SPI_TransmitReceive+0x1d4>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d113      	bne.n	80020fc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	881a      	ldrh	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	1c9a      	adds	r2, r3, #2
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2201      	movs	r2, #1
 8002104:	4013      	ands	r3, r2
 8002106:	2b01      	cmp	r3, #1
 8002108:	d11c      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x21c>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2246      	movs	r2, #70	; 0x46
 800210e:	5a9b      	ldrh	r3, [r3, r2]
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	b292      	uxth	r2, r2
 8002122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2246      	movs	r2, #70	; 0x46
 8002132:	5a9b      	ldrh	r3, [r3, r2]
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b299      	uxth	r1, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2246      	movs	r2, #70	; 0x46
 800213e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002140:	2301      	movs	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002144:	f7fe fbda 	bl	80008fc <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002150:	429a      	cmp	r2, r3
 8002152:	d80b      	bhi.n	800216c <HAL_SPI_TransmitReceive+0x244>
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	3301      	adds	r3, #1
 8002158:	d008      	beq.n	800216c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800215a:	2323      	movs	r3, #35	; 0x23
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2203      	movs	r2, #3
 8002160:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	225d      	movs	r2, #93	; 0x5d
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
        goto error;
 800216a:	e0b1      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d19f      	bne.n	80020b6 <HAL_SPI_TransmitReceive+0x18e>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2246      	movs	r2, #70	; 0x46
 800217a:	5a9b      	ldrh	r3, [r3, r2]
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d199      	bne.n	80020b6 <HAL_SPI_TransmitReceive+0x18e>
 8002182:	e089      	b.n	8002298 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x270>
 800218c:	2312      	movs	r3, #18
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d000      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x270>
 8002196:	e074      	b.n	8002282 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	330c      	adds	r3, #12
 80021a2:	7812      	ldrb	r2, [r2, #0]
 80021a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021be:	e060      	b.n	8002282 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11c      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x2e0>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x2e0>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d114      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	330c      	adds	r3, #12
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11e      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x32c>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2246      	movs	r2, #70	; 0x46
 800221a:	5a9b      	ldrh	r3, [r3, r2]
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d018      	beq.n	8002254 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	330c      	adds	r3, #12
 8002228:	001a      	movs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2246      	movs	r2, #70	; 0x46
 8002242:	5a9b      	ldrh	r3, [r3, r2]
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b299      	uxth	r1, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2246      	movs	r2, #70	; 0x46
 800224e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002250:	2301      	movs	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002254:	f7fe fb52 	bl	80008fc <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002260:	429a      	cmp	r2, r3
 8002262:	d802      	bhi.n	800226a <HAL_SPI_TransmitReceive+0x342>
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	3301      	adds	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x348>
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	2b00      	cmp	r3, #0
 800226e:	d108      	bne.n	8002282 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002270:	2323      	movs	r3, #35	; 0x23
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2203      	movs	r2, #3
 8002276:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	225d      	movs	r2, #93	; 0x5d
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002280:	e026      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d199      	bne.n	80021c0 <HAL_SPI_TransmitReceive+0x298>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2246      	movs	r2, #70	; 0x46
 8002290:	5a9b      	ldrh	r3, [r3, r2]
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d193      	bne.n	80021c0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 f9b2 	bl	8002608 <SPI_EndRxTxTransaction>
 80022a4:	1e03      	subs	r3, r0, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80022a8:	2323      	movs	r3, #35	; 0x23
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80022be:	2323      	movs	r3, #35	; 0x23
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e003      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	225d      	movs	r2, #93	; 0x5d
 80022cc:	2101      	movs	r1, #1
 80022ce:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	225c      	movs	r2, #92	; 0x5c
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022d8:	2323      	movs	r3, #35	; 0x23
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b00a      	add	sp, #40	; 0x28
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	ffffefff 	.word	0xffffefff

080022ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022fc:	f7fe fafe 	bl	80008fc <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	18d3      	adds	r3, r2, r3
 800230a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800230c:	f7fe faf6 	bl	80008fc <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	0d1b      	lsrs	r3, r3, #20
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	4353      	muls	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002322:	e058      	b.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	d055      	beq.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800232a:	f7fe fae7 	bl	80008fc <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	429a      	cmp	r2, r3
 8002338:	d902      	bls.n	8002340 <SPI_WaitFlagStateUntilTimeout+0x54>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d142      	bne.n	80023c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	21e0      	movs	r1, #224	; 0xe0
 800234c:	438a      	bics	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	2382      	movs	r3, #130	; 0x82
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	429a      	cmp	r2, r3
 800235a:	d113      	bne.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x98>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	429a      	cmp	r2, r3
 8002366:	d005      	beq.n	8002374 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2140      	movs	r1, #64	; 0x40
 8002380:	438a      	bics	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	019b      	lsls	r3, r3, #6
 800238c:	429a      	cmp	r2, r3
 800238e:	d110      	bne.n	80023b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	491a      	ldr	r1, [pc, #104]	; (8002404 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0189      	lsls	r1, r1, #6
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	225d      	movs	r2, #93	; 0x5d
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	225c      	movs	r2, #92	; 0x5c
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e017      	b.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	4013      	ands	r3, r2
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	425a      	negs	r2, r3
 80023e6:	4153      	adcs	r3, r2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	001a      	movs	r2, r3
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d197      	bne.n	8002324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b008      	add	sp, #32
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	20000000 	.word	0x20000000
 8002404:	ffffdfff 	.word	0xffffdfff

08002408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002416:	2317      	movs	r3, #23
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800241e:	f7fe fa6d 	bl	80008fc <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	18d3      	adds	r3, r2, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800242e:	f7fe fa65 	bl	80008fc <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	330c      	adds	r3, #12
 800243c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	0013      	movs	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	189b      	adds	r3, r3, r2
 8002448:	00da      	lsls	r2, r3, #3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	0d1b      	lsrs	r3, r3, #20
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	4353      	muls	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002454:	e068      	b.n	8002528 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	23c0      	movs	r3, #192	; 0xc0
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	429a      	cmp	r2, r3
 800245e:	d10a      	bne.n	8002476 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	2117      	movs	r1, #23
 800246e:	187b      	adds	r3, r7, r1
 8002470:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002472:	187b      	adds	r3, r7, r1
 8002474:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	d055      	beq.n	8002528 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800247c:	f7fe fa3e 	bl	80008fc <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002488:	429a      	cmp	r2, r3
 800248a:	d902      	bls.n	8002492 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d142      	bne.n	8002518 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	21e0      	movs	r1, #224	; 0xe0
 800249e:	438a      	bics	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	2382      	movs	r3, #130	; 0x82
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d113      	bne.n	80024d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d005      	beq.n	80024c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d107      	bne.n	80024d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2140      	movs	r1, #64	; 0x40
 80024d2:	438a      	bics	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	429a      	cmp	r2, r3
 80024e0:	d110      	bne.n	8002504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0189      	lsls	r1, r1, #6
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	225d      	movs	r2, #93	; 0x5d
 8002508:	2101      	movs	r1, #1
 800250a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	225c      	movs	r2, #92	; 0x5c
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e010      	b.n	800253a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	3b01      	subs	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d18e      	bne.n	8002456 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b00a      	add	sp, #40	; 0x28
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	20000000 	.word	0x20000000
 8002548:	ffffdfff 	.word	0xffffdfff

0800254c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	2382      	movs	r3, #130	; 0x82
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	429a      	cmp	r2, r3
 8002562:	d113      	bne.n	800258c <SPI_EndRxTransaction+0x40>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	429a      	cmp	r2, r3
 800256e:	d005      	beq.n	800257c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	0013      	movs	r3, r2
 8002596:	2200      	movs	r2, #0
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	f7ff fea7 	bl	80022ec <SPI_WaitFlagStateUntilTimeout>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d007      	beq.n	80025b2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	2220      	movs	r2, #32
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e026      	b.n	8002600 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	2382      	movs	r3, #130	; 0x82
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d11f      	bne.n	80025fe <SPI_EndRxTransaction+0xb2>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d005      	beq.n	80025d6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d113      	bne.n	80025fe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	23c0      	movs	r3, #192	; 0xc0
 80025da:	00d9      	lsls	r1, r3, #3
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	0013      	movs	r3, r2
 80025e4:	2200      	movs	r2, #0
 80025e6:	f7ff ff0f 	bl	8002408 <SPI_WaitFifoStateUntilTimeout>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d007      	beq.n	80025fe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	2220      	movs	r2, #32
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e000      	b.n	8002600 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b004      	add	sp, #16
 8002606:	bd80      	pop	{r7, pc}

08002608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	0159      	lsls	r1, r3, #5
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	0013      	movs	r3, r2
 8002622:	2200      	movs	r2, #0
 8002624:	f7ff fef0 	bl	8002408 <SPI_WaitFifoStateUntilTimeout>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d007      	beq.n	800263c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002630:	2220      	movs	r2, #32
 8002632:	431a      	orrs	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e027      	b.n	800268c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	0013      	movs	r3, r2
 8002646:	2200      	movs	r2, #0
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	f7ff fe4f 	bl	80022ec <SPI_WaitFlagStateUntilTimeout>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d007      	beq.n	8002662 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	2220      	movs	r2, #32
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e014      	b.n	800268c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	23c0      	movs	r3, #192	; 0xc0
 8002666:	00d9      	lsls	r1, r3, #3
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	0013      	movs	r3, r2
 8002670:	2200      	movs	r2, #0
 8002672:	f7ff fec9 	bl	8002408 <SPI_WaitFifoStateUntilTimeout>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d007      	beq.n	800268a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	2220      	movs	r2, #32
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e000      	b.n	800268c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e044      	b.n	8002730 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2278      	movs	r2, #120	; 0x78
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7fd fff9 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2224      	movs	r2, #36	; 0x24
 80026c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	438a      	bics	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f8d0 	bl	800287c <UART_SetConfig>
 80026dc:	0003      	movs	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e024      	b.n	8002730 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fa03 	bl	8002afc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	490d      	ldr	r1, [pc, #52]	; (8002738 <HAL_UART_Init+0xa4>)
 8002702:	400a      	ands	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	212a      	movs	r1, #42	; 0x2a
 8002712:	438a      	bics	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fa9b 	bl	8002c64 <UART_CheckIdleState>
 800272e:	0003      	movs	r3, r0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffffb7ff 	.word	0xffffb7ff

0800273c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002750:	2b20      	cmp	r3, #32
 8002752:	d000      	beq.n	8002756 <HAL_UART_Transmit+0x1a>
 8002754:	e08d      	b.n	8002872 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_UART_Transmit+0x28>
 800275c:	1dbb      	adds	r3, r7, #6
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e085      	b.n	8002874 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	429a      	cmp	r2, r3
 8002772:	d109      	bne.n	8002788 <HAL_UART_Transmit+0x4c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	d001      	beq.n	8002788 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e075      	b.n	8002874 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2284      	movs	r2, #132	; 0x84
 800278c:	2100      	movs	r1, #0
 800278e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002796:	f7fe f8b1 	bl	80008fc <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1dba      	adds	r2, r7, #6
 80027a2:	2150      	movs	r1, #80	; 0x50
 80027a4:	8812      	ldrh	r2, [r2, #0]
 80027a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1dba      	adds	r2, r7, #6
 80027ac:	2152      	movs	r1, #82	; 0x52
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	015b      	lsls	r3, r3, #5
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0x94>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027d8:	e030      	b.n	800283c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	0013      	movs	r3, r2
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	f000 fae4 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d004      	beq.n	80027fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e03c      	b.n	8002874 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	05d2      	lsls	r2, r2, #23
 800280a:	0dd2      	lsrs	r2, r2, #23
 800280c:	b292      	uxth	r2, r2
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3302      	adds	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e008      	b.n	800282a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b292      	uxth	r2, r2
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2252      	movs	r2, #82	; 0x52
 800282e:	5a9b      	ldrh	r3, [r3, r2]
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b299      	uxth	r1, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2252      	movs	r2, #82	; 0x52
 800283a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2252      	movs	r2, #82	; 0x52
 8002840:	5a9b      	ldrh	r3, [r3, r2]
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1c8      	bne.n	80027da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	0013      	movs	r3, r2
 8002852:	2200      	movs	r2, #0
 8002854:	2140      	movs	r1, #64	; 0x40
 8002856:	f000 faad 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d004      	beq.n	8002868 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e005      	b.n	8002874 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b008      	add	sp, #32
 800287a:	bd80      	pop	{r7, pc}

0800287c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002884:	231e      	movs	r3, #30
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a8d      	ldr	r2, [pc, #564]	; (8002ae0 <UART_SetConfig+0x264>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a88      	ldr	r2, [pc, #544]	; (8002ae4 <UART_SetConfig+0x268>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a7f      	ldr	r2, [pc, #508]	; (8002ae8 <UART_SetConfig+0x26c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7b      	ldr	r2, [pc, #492]	; (8002aec <UART_SetConfig+0x270>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d127      	bne.n	8002952 <UART_SetConfig+0xd6>
 8002902:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <UART_SetConfig+0x274>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	2203      	movs	r2, #3
 8002908:	4013      	ands	r3, r2
 800290a:	2b03      	cmp	r3, #3
 800290c:	d00d      	beq.n	800292a <UART_SetConfig+0xae>
 800290e:	d81b      	bhi.n	8002948 <UART_SetConfig+0xcc>
 8002910:	2b02      	cmp	r3, #2
 8002912:	d014      	beq.n	800293e <UART_SetConfig+0xc2>
 8002914:	d818      	bhi.n	8002948 <UART_SetConfig+0xcc>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <UART_SetConfig+0xa4>
 800291a:	2b01      	cmp	r3, #1
 800291c:	d00a      	beq.n	8002934 <UART_SetConfig+0xb8>
 800291e:	e013      	b.n	8002948 <UART_SetConfig+0xcc>
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e021      	b.n	800296e <UART_SetConfig+0xf2>
 800292a:	231f      	movs	r3, #31
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e01c      	b.n	800296e <UART_SetConfig+0xf2>
 8002934:	231f      	movs	r3, #31
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2204      	movs	r2, #4
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e017      	b.n	800296e <UART_SetConfig+0xf2>
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2208      	movs	r2, #8
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e012      	b.n	800296e <UART_SetConfig+0xf2>
 8002948:	231f      	movs	r3, #31
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2210      	movs	r2, #16
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e00d      	b.n	800296e <UART_SetConfig+0xf2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <UART_SetConfig+0x278>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d104      	bne.n	8002966 <UART_SetConfig+0xea>
 800295c:	231f      	movs	r3, #31
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e003      	b.n	800296e <UART_SetConfig+0xf2>
 8002966:	231f      	movs	r3, #31
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2210      	movs	r2, #16
 800296c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	429a      	cmp	r2, r3
 8002978:	d15c      	bne.n	8002a34 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800297a:	231f      	movs	r3, #31
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d015      	beq.n	80029b0 <UART_SetConfig+0x134>
 8002984:	dc18      	bgt.n	80029b8 <UART_SetConfig+0x13c>
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00d      	beq.n	80029a6 <UART_SetConfig+0x12a>
 800298a:	dc15      	bgt.n	80029b8 <UART_SetConfig+0x13c>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <UART_SetConfig+0x11a>
 8002990:	2b02      	cmp	r3, #2
 8002992:	d005      	beq.n	80029a0 <UART_SetConfig+0x124>
 8002994:	e010      	b.n	80029b8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002996:	f7fe fe69 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        break;
 800299e:	e012      	b.n	80029c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029a0:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <UART_SetConfig+0x27c>)
 80029a2:	61bb      	str	r3, [r7, #24]
        break;
 80029a4:	e00f      	b.n	80029c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a6:	f7fe fe01 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 80029aa:	0003      	movs	r3, r0
 80029ac:	61bb      	str	r3, [r7, #24]
        break;
 80029ae:	e00a      	b.n	80029c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	61bb      	str	r3, [r7, #24]
        break;
 80029b6:	e006      	b.n	80029c6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029bc:	231e      	movs	r3, #30
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
        break;
 80029c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d100      	bne.n	80029ce <UART_SetConfig+0x152>
 80029cc:	e07a      	b.n	8002ac4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	005a      	lsls	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	18d2      	adds	r2, r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0019      	movs	r1, r3
 80029e0:	0010      	movs	r0, r2
 80029e2:	f7fd fb9b 	bl	800011c <__udivsi3>
 80029e6:	0003      	movs	r3, r0
 80029e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	d91c      	bls.n	8002a2a <UART_SetConfig+0x1ae>
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d217      	bcs.n	8002a2a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	200e      	movs	r0, #14
 8002a00:	183b      	adds	r3, r7, r0
 8002a02:	210f      	movs	r1, #15
 8002a04:	438a      	bics	r2, r1
 8002a06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2207      	movs	r2, #7
 8002a10:	4013      	ands	r3, r2
 8002a12:	b299      	uxth	r1, r3
 8002a14:	183b      	adds	r3, r7, r0
 8002a16:	183a      	adds	r2, r7, r0
 8002a18:	8812      	ldrh	r2, [r2, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	183a      	adds	r2, r7, r0
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e04c      	b.n	8002ac4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a2a:	231e      	movs	r3, #30
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e047      	b.n	8002ac4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a34:	231f      	movs	r3, #31
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d015      	beq.n	8002a6a <UART_SetConfig+0x1ee>
 8002a3e:	dc18      	bgt.n	8002a72 <UART_SetConfig+0x1f6>
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d00d      	beq.n	8002a60 <UART_SetConfig+0x1e4>
 8002a44:	dc15      	bgt.n	8002a72 <UART_SetConfig+0x1f6>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <UART_SetConfig+0x1d4>
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d005      	beq.n	8002a5a <UART_SetConfig+0x1de>
 8002a4e:	e010      	b.n	8002a72 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a50:	f7fe fe0c 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 8002a54:	0003      	movs	r3, r0
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e012      	b.n	8002a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <UART_SetConfig+0x27c>)
 8002a5c:	61bb      	str	r3, [r7, #24]
        break;
 8002a5e:	e00f      	b.n	8002a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a60:	f7fe fda4 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8002a64:	0003      	movs	r3, r0
 8002a66:	61bb      	str	r3, [r7, #24]
        break;
 8002a68:	e00a      	b.n	8002a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	61bb      	str	r3, [r7, #24]
        break;
 8002a70:	e006      	b.n	8002a80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a76:	231e      	movs	r3, #30
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
        break;
 8002a7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01e      	beq.n	8002ac4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	085a      	lsrs	r2, r3, #1
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	18d2      	adds	r2, r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0019      	movs	r1, r3
 8002a96:	0010      	movs	r0, r2
 8002a98:	f7fd fb40 	bl	800011c <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d90a      	bls.n	8002abc <UART_SetConfig+0x240>
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	025b      	lsls	r3, r3, #9
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d205      	bcs.n	8002abc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e003      	b.n	8002ac4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002abc:	231e      	movs	r3, #30
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ad0:	231e      	movs	r3, #30
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b008      	add	sp, #32
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	ffff69f3 	.word	0xffff69f3
 8002ae4:	ffffcfff 	.word	0xffffcfff
 8002ae8:	fffff4ff 	.word	0xfffff4ff
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40004400 	.word	0x40004400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a4a      	ldr	r2, [pc, #296]	; (8002c40 <UART_AdvFeatureConfig+0x144>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a43      	ldr	r2, [pc, #268]	; (8002c44 <UART_AdvFeatureConfig+0x148>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <UART_AdvFeatureConfig+0x14c>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2208      	movs	r2, #8
 8002b70:	4013      	ands	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <UART_AdvFeatureConfig+0x150>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2210      	movs	r2, #16
 8002b92:	4013      	ands	r3, r2
 8002b94:	d00b      	beq.n	8002bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <UART_AdvFeatureConfig+0x154>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <UART_AdvFeatureConfig+0x158>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d01d      	beq.n	8002c16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <UART_AdvFeatureConfig+0x15c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	035b      	lsls	r3, r3, #13
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d10b      	bne.n	8002c16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <UART_AdvFeatureConfig+0x160>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <UART_AdvFeatureConfig+0x164>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  }
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fffdffff 	.word	0xfffdffff
 8002c44:	fffeffff 	.word	0xfffeffff
 8002c48:	fffbffff 	.word	0xfffbffff
 8002c4c:	ffff7fff 	.word	0xffff7fff
 8002c50:	ffffefff 	.word	0xffffefff
 8002c54:	ffffdfff 	.word	0xffffdfff
 8002c58:	ffefffff 	.word	0xffefffff
 8002c5c:	ff9fffff 	.word	0xff9fffff
 8002c60:	fff7ffff 	.word	0xfff7ffff

08002c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b092      	sub	sp, #72	; 0x48
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2284      	movs	r2, #132	; 0x84
 8002c70:	2100      	movs	r1, #0
 8002c72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c74:	f7fd fe42 	bl	80008fc <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2208      	movs	r2, #8
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d12c      	bne.n	8002ce4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	0391      	lsls	r1, r2, #14
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4a46      	ldr	r2, [pc, #280]	; (8002dac <UART_CheckIdleState+0x148>)
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f000 f88c 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d021      	beq.n	8002ce4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002caa:	2301      	movs	r3, #1
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	f383 8810 	msr	PRIMASK, r3
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2278      	movs	r2, #120	; 0x78
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e05f      	b.n	8002da4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2204      	movs	r2, #4
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d146      	bne.n	8002d80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	03d1      	lsls	r1, r2, #15
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <UART_CheckIdleState+0x148>)
 8002cfc:	9200      	str	r2, [sp, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f000 f858 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d03b      	beq.n	8002d80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d08:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	2301      	movs	r3, #1
 8002d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f383 8810 	msr	PRIMASK, r3
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4921      	ldr	r1, [pc, #132]	; (8002db0 <UART_CheckIdleState+0x14c>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f383 8810 	msr	PRIMASK, r3
}
 8002d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
 8002d44:	2301      	movs	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f383 8810 	msr	PRIMASK, r3
}
 8002d6a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	2120      	movs	r1, #32
 8002d72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2278      	movs	r2, #120	; 0x78
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e011      	b.n	8002da4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	2120      	movs	r1, #32
 8002d8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2278      	movs	r2, #120	; 0x78
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b010      	add	sp, #64	; 0x40
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	01ffffff 	.word	0x01ffffff
 8002db0:	fffffedf 	.word	0xfffffedf

08002db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc4:	e04b      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	d048      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dcc:	f7fd fd96 	bl	80008fc <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d302      	bcc.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e04b      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2204      	movs	r2, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	d035      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d111      	bne.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2208      	movs	r2, #8
 8002e06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f83c 	bl	8002e88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2284      	movs	r2, #132	; 0x84
 8002e14:	2108      	movs	r1, #8
 8002e16:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2278      	movs	r2, #120	; 0x78
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02c      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	401a      	ands	r2, r3
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d112      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f81f 	bl	8002e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2284      	movs	r2, #132	; 0x84
 8002e4e:	2120      	movs	r1, #32
 8002e50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2278      	movs	r2, #120	; 0x78
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e00f      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	425a      	negs	r2, r3
 8002e6e:	4153      	adcs	r3, r2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	001a      	movs	r2, r3
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d0a4      	beq.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e90:	f3ef 8310 	mrs	r3, PRIMASK
 8002e94:	617b      	str	r3, [r7, #20]
  return(result);
 8002e96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4926      	ldr	r1, [pc, #152]	; (8002f4c <UART_EndRxTransfer+0xc4>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec6:	623b      	str	r3, [r7, #32]
  return(result);
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	f383 8810 	msr	PRIMASK, r3
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	f383 8810 	msr	PRIMASK, r3
}
 8002ef2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d118      	bne.n	8002f2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8310 	mrs	r3, PRIMASK
 8002f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f06:	2301      	movs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f383 8810 	msr	PRIMASK, r3
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	438a      	bics	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	2120      	movs	r1, #32
 8002f34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b00e      	add	sp, #56	; 0x38
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	fffffedf 	.word	0xfffffedf

08002f50 <siprintf>:
 8002f50:	b40e      	push	{r1, r2, r3}
 8002f52:	b500      	push	{lr}
 8002f54:	490b      	ldr	r1, [pc, #44]	; (8002f84 <siprintf+0x34>)
 8002f56:	b09c      	sub	sp, #112	; 0x70
 8002f58:	ab1d      	add	r3, sp, #116	; 0x74
 8002f5a:	9002      	str	r0, [sp, #8]
 8002f5c:	9006      	str	r0, [sp, #24]
 8002f5e:	9107      	str	r1, [sp, #28]
 8002f60:	9104      	str	r1, [sp, #16]
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <siprintf+0x38>)
 8002f64:	4909      	ldr	r1, [pc, #36]	; (8002f8c <siprintf+0x3c>)
 8002f66:	cb04      	ldmia	r3!, {r2}
 8002f68:	9105      	str	r1, [sp, #20]
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	a902      	add	r1, sp, #8
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	f000 f9a2 	bl	80032b8 <_svfiprintf_r>
 8002f74:	2200      	movs	r2, #0
 8002f76:	9b02      	ldr	r3, [sp, #8]
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	b01c      	add	sp, #112	; 0x70
 8002f7c:	bc08      	pop	{r3}
 8002f7e:	b003      	add	sp, #12
 8002f80:	4718      	bx	r3
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	7fffffff 	.word	0x7fffffff
 8002f88:	20000058 	.word	0x20000058
 8002f8c:	ffff0208 	.word	0xffff0208

08002f90 <memset>:
 8002f90:	0003      	movs	r3, r0
 8002f92:	1882      	adds	r2, r0, r2
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	7019      	strb	r1, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <__errno>:
 8002fa0:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <__errno+0x8>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	4770      	bx	lr
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	20000058 	.word	0x20000058

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4c0c      	ldr	r4, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	f000 fc6d 	bl	800389c <_init>
 8002fc2:	4c0a      	ldr	r4, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4d0a      	ldr	r5, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	00b3      	lsls	r3, r6, #2
 8002fd2:	58eb      	ldr	r3, [r5, r3]
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	00b3      	lsls	r3, r6, #2
 8002fdc:	58eb      	ldr	r3, [r5, r3]
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003950 	.word	0x08003950
 8002fe8:	08003950 	.word	0x08003950
 8002fec:	08003954 	.word	0x08003954
 8002ff0:	08003950 	.word	0x08003950

08002ff4 <__retarget_lock_acquire_recursive>:
 8002ff4:	4770      	bx	lr

08002ff6 <__retarget_lock_release_recursive>:
 8002ff6:	4770      	bx	lr

08002ff8 <_free_r>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d010      	beq.n	8003022 <_free_r+0x2a>
 8003000:	1f0c      	subs	r4, r1, #4
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da00      	bge.n	800300a <_free_r+0x12>
 8003008:	18e4      	adds	r4, r4, r3
 800300a:	0028      	movs	r0, r5
 800300c:	f000 f8e2 	bl	80031d4 <__malloc_lock>
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <_free_r+0x90>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <_free_r+0x2c>
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	6014      	str	r4, [r2, #0]
 800301c:	0028      	movs	r0, r5
 800301e:	f000 f8e1 	bl	80031e4 <__malloc_unlock>
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	42a3      	cmp	r3, r4
 8003026:	d908      	bls.n	800303a <_free_r+0x42>
 8003028:	6820      	ldr	r0, [r4, #0]
 800302a:	1821      	adds	r1, r4, r0
 800302c:	428b      	cmp	r3, r1
 800302e:	d1f3      	bne.n	8003018 <_free_r+0x20>
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	1809      	adds	r1, r1, r0
 8003036:	6021      	str	r1, [r4, #0]
 8003038:	e7ee      	b.n	8003018 <_free_r+0x20>
 800303a:	001a      	movs	r2, r3
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <_free_r+0x4e>
 8003042:	42a3      	cmp	r3, r4
 8003044:	d9f9      	bls.n	800303a <_free_r+0x42>
 8003046:	6811      	ldr	r1, [r2, #0]
 8003048:	1850      	adds	r0, r2, r1
 800304a:	42a0      	cmp	r0, r4
 800304c:	d10b      	bne.n	8003066 <_free_r+0x6e>
 800304e:	6820      	ldr	r0, [r4, #0]
 8003050:	1809      	adds	r1, r1, r0
 8003052:	1850      	adds	r0, r2, r1
 8003054:	6011      	str	r1, [r2, #0]
 8003056:	4283      	cmp	r3, r0
 8003058:	d1e0      	bne.n	800301c <_free_r+0x24>
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	1841      	adds	r1, r0, r1
 8003060:	6011      	str	r1, [r2, #0]
 8003062:	6053      	str	r3, [r2, #4]
 8003064:	e7da      	b.n	800301c <_free_r+0x24>
 8003066:	42a0      	cmp	r0, r4
 8003068:	d902      	bls.n	8003070 <_free_r+0x78>
 800306a:	230c      	movs	r3, #12
 800306c:	602b      	str	r3, [r5, #0]
 800306e:	e7d5      	b.n	800301c <_free_r+0x24>
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	1821      	adds	r1, r4, r0
 8003074:	428b      	cmp	r3, r1
 8003076:	d103      	bne.n	8003080 <_free_r+0x88>
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	1809      	adds	r1, r1, r0
 800307e:	6021      	str	r1, [r4, #0]
 8003080:	6063      	str	r3, [r4, #4]
 8003082:	6054      	str	r4, [r2, #4]
 8003084:	e7ca      	b.n	800301c <_free_r+0x24>
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	200002ac 	.word	0x200002ac

0800308c <sbrk_aligned>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	4e0f      	ldr	r6, [pc, #60]	; (80030cc <sbrk_aligned+0x40>)
 8003090:	000d      	movs	r5, r1
 8003092:	6831      	ldr	r1, [r6, #0]
 8003094:	0004      	movs	r4, r0
 8003096:	2900      	cmp	r1, #0
 8003098:	d102      	bne.n	80030a0 <sbrk_aligned+0x14>
 800309a:	f000 fba1 	bl	80037e0 <_sbrk_r>
 800309e:	6030      	str	r0, [r6, #0]
 80030a0:	0029      	movs	r1, r5
 80030a2:	0020      	movs	r0, r4
 80030a4:	f000 fb9c 	bl	80037e0 <_sbrk_r>
 80030a8:	1c43      	adds	r3, r0, #1
 80030aa:	d00a      	beq.n	80030c2 <sbrk_aligned+0x36>
 80030ac:	2303      	movs	r3, #3
 80030ae:	1cc5      	adds	r5, r0, #3
 80030b0:	439d      	bics	r5, r3
 80030b2:	42a8      	cmp	r0, r5
 80030b4:	d007      	beq.n	80030c6 <sbrk_aligned+0x3a>
 80030b6:	1a29      	subs	r1, r5, r0
 80030b8:	0020      	movs	r0, r4
 80030ba:	f000 fb91 	bl	80037e0 <_sbrk_r>
 80030be:	3001      	adds	r0, #1
 80030c0:	d101      	bne.n	80030c6 <sbrk_aligned+0x3a>
 80030c2:	2501      	movs	r5, #1
 80030c4:	426d      	negs	r5, r5
 80030c6:	0028      	movs	r0, r5
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	200002b0 	.word	0x200002b0

080030d0 <_malloc_r>:
 80030d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030d2:	2203      	movs	r2, #3
 80030d4:	1ccb      	adds	r3, r1, #3
 80030d6:	4393      	bics	r3, r2
 80030d8:	3308      	adds	r3, #8
 80030da:	0006      	movs	r6, r0
 80030dc:	001f      	movs	r7, r3
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d238      	bcs.n	8003154 <_malloc_r+0x84>
 80030e2:	270c      	movs	r7, #12
 80030e4:	42b9      	cmp	r1, r7
 80030e6:	d837      	bhi.n	8003158 <_malloc_r+0x88>
 80030e8:	0030      	movs	r0, r6
 80030ea:	f000 f873 	bl	80031d4 <__malloc_lock>
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <_malloc_r+0x100>)
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	001c      	movs	r4, r3
 80030f6:	2c00      	cmp	r4, #0
 80030f8:	d133      	bne.n	8003162 <_malloc_r+0x92>
 80030fa:	0039      	movs	r1, r7
 80030fc:	0030      	movs	r0, r6
 80030fe:	f7ff ffc5 	bl	800308c <sbrk_aligned>
 8003102:	0004      	movs	r4, r0
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d15e      	bne.n	80031c6 <_malloc_r+0xf6>
 8003108:	9b00      	ldr	r3, [sp, #0]
 800310a:	681c      	ldr	r4, [r3, #0]
 800310c:	0025      	movs	r5, r4
 800310e:	2d00      	cmp	r5, #0
 8003110:	d14e      	bne.n	80031b0 <_malloc_r+0xe0>
 8003112:	2c00      	cmp	r4, #0
 8003114:	d051      	beq.n	80031ba <_malloc_r+0xea>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0029      	movs	r1, r5
 800311a:	18e3      	adds	r3, r4, r3
 800311c:	0030      	movs	r0, r6
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	f000 fb5e 	bl	80037e0 <_sbrk_r>
 8003124:	9b01      	ldr	r3, [sp, #4]
 8003126:	4283      	cmp	r3, r0
 8003128:	d147      	bne.n	80031ba <_malloc_r+0xea>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	0030      	movs	r0, r6
 800312e:	1aff      	subs	r7, r7, r3
 8003130:	0039      	movs	r1, r7
 8003132:	f7ff ffab 	bl	800308c <sbrk_aligned>
 8003136:	3001      	adds	r0, #1
 8003138:	d03f      	beq.n	80031ba <_malloc_r+0xea>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	19db      	adds	r3, r3, r7
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	9b00      	ldr	r3, [sp, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d040      	beq.n	80031ca <_malloc_r+0xfa>
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	42a2      	cmp	r2, r4
 800314c:	d133      	bne.n	80031b6 <_malloc_r+0xe6>
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e014      	b.n	800317e <_malloc_r+0xae>
 8003154:	2b00      	cmp	r3, #0
 8003156:	dac5      	bge.n	80030e4 <_malloc_r+0x14>
 8003158:	230c      	movs	r3, #12
 800315a:	2500      	movs	r5, #0
 800315c:	6033      	str	r3, [r6, #0]
 800315e:	0028      	movs	r0, r5
 8003160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003162:	6821      	ldr	r1, [r4, #0]
 8003164:	1bc9      	subs	r1, r1, r7
 8003166:	d420      	bmi.n	80031aa <_malloc_r+0xda>
 8003168:	290b      	cmp	r1, #11
 800316a:	d918      	bls.n	800319e <_malloc_r+0xce>
 800316c:	19e2      	adds	r2, r4, r7
 800316e:	6027      	str	r7, [r4, #0]
 8003170:	42a3      	cmp	r3, r4
 8003172:	d112      	bne.n	800319a <_malloc_r+0xca>
 8003174:	9b00      	ldr	r3, [sp, #0]
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	6011      	str	r1, [r2, #0]
 800317c:	6053      	str	r3, [r2, #4]
 800317e:	0030      	movs	r0, r6
 8003180:	0025      	movs	r5, r4
 8003182:	f000 f82f 	bl	80031e4 <__malloc_unlock>
 8003186:	2207      	movs	r2, #7
 8003188:	350b      	adds	r5, #11
 800318a:	1d23      	adds	r3, r4, #4
 800318c:	4395      	bics	r5, r2
 800318e:	1aea      	subs	r2, r5, r3
 8003190:	429d      	cmp	r5, r3
 8003192:	d0e4      	beq.n	800315e <_malloc_r+0x8e>
 8003194:	1b5b      	subs	r3, r3, r5
 8003196:	50a3      	str	r3, [r4, r2]
 8003198:	e7e1      	b.n	800315e <_malloc_r+0x8e>
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e7ec      	b.n	8003178 <_malloc_r+0xa8>
 800319e:	6862      	ldr	r2, [r4, #4]
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	d1d5      	bne.n	8003150 <_malloc_r+0x80>
 80031a4:	9b00      	ldr	r3, [sp, #0]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e7e9      	b.n	800317e <_malloc_r+0xae>
 80031aa:	0023      	movs	r3, r4
 80031ac:	6864      	ldr	r4, [r4, #4]
 80031ae:	e7a2      	b.n	80030f6 <_malloc_r+0x26>
 80031b0:	002c      	movs	r4, r5
 80031b2:	686d      	ldr	r5, [r5, #4]
 80031b4:	e7ab      	b.n	800310e <_malloc_r+0x3e>
 80031b6:	0013      	movs	r3, r2
 80031b8:	e7c4      	b.n	8003144 <_malloc_r+0x74>
 80031ba:	230c      	movs	r3, #12
 80031bc:	0030      	movs	r0, r6
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	f000 f810 	bl	80031e4 <__malloc_unlock>
 80031c4:	e7cb      	b.n	800315e <_malloc_r+0x8e>
 80031c6:	6027      	str	r7, [r4, #0]
 80031c8:	e7d9      	b.n	800317e <_malloc_r+0xae>
 80031ca:	605b      	str	r3, [r3, #4]
 80031cc:	deff      	udf	#255	; 0xff
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	200002ac 	.word	0x200002ac

080031d4 <__malloc_lock>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <__malloc_lock+0xc>)
 80031d8:	f7ff ff0c 	bl	8002ff4 <__retarget_lock_acquire_recursive>
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	200002a8 	.word	0x200002a8

080031e4 <__malloc_unlock>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4802      	ldr	r0, [pc, #8]	; (80031f0 <__malloc_unlock+0xc>)
 80031e8:	f7ff ff05 	bl	8002ff6 <__retarget_lock_release_recursive>
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	200002a8 	.word	0x200002a8

080031f4 <__ssputs_r>:
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	9203      	str	r2, [sp, #12]
 80031fc:	688e      	ldr	r6, [r1, #8]
 80031fe:	9a01      	ldr	r2, [sp, #4]
 8003200:	0007      	movs	r7, r0
 8003202:	000c      	movs	r4, r1
 8003204:	680b      	ldr	r3, [r1, #0]
 8003206:	4296      	cmp	r6, r2
 8003208:	d831      	bhi.n	800326e <__ssputs_r+0x7a>
 800320a:	898a      	ldrh	r2, [r1, #12]
 800320c:	2190      	movs	r1, #144	; 0x90
 800320e:	00c9      	lsls	r1, r1, #3
 8003210:	420a      	tst	r2, r1
 8003212:	d029      	beq.n	8003268 <__ssputs_r+0x74>
 8003214:	2003      	movs	r0, #3
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	1a5b      	subs	r3, r3, r1
 800321a:	9302      	str	r3, [sp, #8]
 800321c:	6963      	ldr	r3, [r4, #20]
 800321e:	4343      	muls	r3, r0
 8003220:	0fdd      	lsrs	r5, r3, #31
 8003222:	18ed      	adds	r5, r5, r3
 8003224:	9b01      	ldr	r3, [sp, #4]
 8003226:	9802      	ldr	r0, [sp, #8]
 8003228:	3301      	adds	r3, #1
 800322a:	181b      	adds	r3, r3, r0
 800322c:	106d      	asrs	r5, r5, #1
 800322e:	42ab      	cmp	r3, r5
 8003230:	d900      	bls.n	8003234 <__ssputs_r+0x40>
 8003232:	001d      	movs	r5, r3
 8003234:	0552      	lsls	r2, r2, #21
 8003236:	d529      	bpl.n	800328c <__ssputs_r+0x98>
 8003238:	0029      	movs	r1, r5
 800323a:	0038      	movs	r0, r7
 800323c:	f7ff ff48 	bl	80030d0 <_malloc_r>
 8003240:	1e06      	subs	r6, r0, #0
 8003242:	d02d      	beq.n	80032a0 <__ssputs_r+0xac>
 8003244:	9a02      	ldr	r2, [sp, #8]
 8003246:	6921      	ldr	r1, [r4, #16]
 8003248:	f000 fae7 	bl	800381a <memcpy>
 800324c:	89a2      	ldrh	r2, [r4, #12]
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <__ssputs_r+0xc0>)
 8003250:	401a      	ands	r2, r3
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	4313      	orrs	r3, r2
 8003256:	81a3      	strh	r3, [r4, #12]
 8003258:	9b02      	ldr	r3, [sp, #8]
 800325a:	6126      	str	r6, [r4, #16]
 800325c:	18f6      	adds	r6, r6, r3
 800325e:	6026      	str	r6, [r4, #0]
 8003260:	6165      	str	r5, [r4, #20]
 8003262:	9e01      	ldr	r6, [sp, #4]
 8003264:	1aed      	subs	r5, r5, r3
 8003266:	60a5      	str	r5, [r4, #8]
 8003268:	9b01      	ldr	r3, [sp, #4]
 800326a:	429e      	cmp	r6, r3
 800326c:	d900      	bls.n	8003270 <__ssputs_r+0x7c>
 800326e:	9e01      	ldr	r6, [sp, #4]
 8003270:	0032      	movs	r2, r6
 8003272:	9903      	ldr	r1, [sp, #12]
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	f000 fa9f 	bl	80037b8 <memmove>
 800327a:	2000      	movs	r0, #0
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	1b9b      	subs	r3, r3, r6
 8003280:	60a3      	str	r3, [r4, #8]
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	199b      	adds	r3, r3, r6
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	b005      	add	sp, #20
 800328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800328c:	002a      	movs	r2, r5
 800328e:	0038      	movs	r0, r7
 8003290:	f000 facc 	bl	800382c <_realloc_r>
 8003294:	1e06      	subs	r6, r0, #0
 8003296:	d1df      	bne.n	8003258 <__ssputs_r+0x64>
 8003298:	0038      	movs	r0, r7
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	f7ff feac 	bl	8002ff8 <_free_r>
 80032a0:	230c      	movs	r3, #12
 80032a2:	2001      	movs	r0, #1
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	89a2      	ldrh	r2, [r4, #12]
 80032a8:	3334      	adds	r3, #52	; 0x34
 80032aa:	4313      	orrs	r3, r2
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	4240      	negs	r0, r0
 80032b0:	e7ea      	b.n	8003288 <__ssputs_r+0x94>
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	fffffb7f 	.word	0xfffffb7f

080032b8 <_svfiprintf_r>:
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	b0a1      	sub	sp, #132	; 0x84
 80032bc:	9003      	str	r0, [sp, #12]
 80032be:	001d      	movs	r5, r3
 80032c0:	898b      	ldrh	r3, [r1, #12]
 80032c2:	000f      	movs	r7, r1
 80032c4:	0016      	movs	r6, r2
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	d511      	bpl.n	80032ee <_svfiprintf_r+0x36>
 80032ca:	690b      	ldr	r3, [r1, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10e      	bne.n	80032ee <_svfiprintf_r+0x36>
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	f7ff fefd 	bl	80030d0 <_malloc_r>
 80032d6:	6038      	str	r0, [r7, #0]
 80032d8:	6138      	str	r0, [r7, #16]
 80032da:	2800      	cmp	r0, #0
 80032dc:	d105      	bne.n	80032ea <_svfiprintf_r+0x32>
 80032de:	230c      	movs	r3, #12
 80032e0:	9a03      	ldr	r2, [sp, #12]
 80032e2:	3801      	subs	r0, #1
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	b021      	add	sp, #132	; 0x84
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ea:	2340      	movs	r3, #64	; 0x40
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	2300      	movs	r3, #0
 80032f0:	ac08      	add	r4, sp, #32
 80032f2:	6163      	str	r3, [r4, #20]
 80032f4:	3320      	adds	r3, #32
 80032f6:	7663      	strb	r3, [r4, #25]
 80032f8:	3310      	adds	r3, #16
 80032fa:	76a3      	strb	r3, [r4, #26]
 80032fc:	9507      	str	r5, [sp, #28]
 80032fe:	0035      	movs	r5, r6
 8003300:	782b      	ldrb	r3, [r5, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <_svfiprintf_r+0x52>
 8003306:	2b25      	cmp	r3, #37	; 0x25
 8003308:	d148      	bne.n	800339c <_svfiprintf_r+0xe4>
 800330a:	1bab      	subs	r3, r5, r6
 800330c:	9305      	str	r3, [sp, #20]
 800330e:	42b5      	cmp	r5, r6
 8003310:	d00b      	beq.n	800332a <_svfiprintf_r+0x72>
 8003312:	0032      	movs	r2, r6
 8003314:	0039      	movs	r1, r7
 8003316:	9803      	ldr	r0, [sp, #12]
 8003318:	f7ff ff6c 	bl	80031f4 <__ssputs_r>
 800331c:	3001      	adds	r0, #1
 800331e:	d100      	bne.n	8003322 <_svfiprintf_r+0x6a>
 8003320:	e0af      	b.n	8003482 <_svfiprintf_r+0x1ca>
 8003322:	6963      	ldr	r3, [r4, #20]
 8003324:	9a05      	ldr	r2, [sp, #20]
 8003326:	189b      	adds	r3, r3, r2
 8003328:	6163      	str	r3, [r4, #20]
 800332a:	782b      	ldrb	r3, [r5, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d100      	bne.n	8003332 <_svfiprintf_r+0x7a>
 8003330:	e0a7      	b.n	8003482 <_svfiprintf_r+0x1ca>
 8003332:	2201      	movs	r2, #1
 8003334:	2300      	movs	r3, #0
 8003336:	4252      	negs	r2, r2
 8003338:	6062      	str	r2, [r4, #4]
 800333a:	a904      	add	r1, sp, #16
 800333c:	3254      	adds	r2, #84	; 0x54
 800333e:	1852      	adds	r2, r2, r1
 8003340:	1c6e      	adds	r6, r5, #1
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	60e3      	str	r3, [r4, #12]
 8003346:	60a3      	str	r3, [r4, #8]
 8003348:	7013      	strb	r3, [r2, #0]
 800334a:	65a3      	str	r3, [r4, #88]	; 0x58
 800334c:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <_svfiprintf_r+0x1ec>)
 800334e:	2205      	movs	r2, #5
 8003350:	0018      	movs	r0, r3
 8003352:	7831      	ldrb	r1, [r6, #0]
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	f000 fa55 	bl	8003804 <memchr>
 800335a:	1c75      	adds	r5, r6, #1
 800335c:	2800      	cmp	r0, #0
 800335e:	d11f      	bne.n	80033a0 <_svfiprintf_r+0xe8>
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	06d3      	lsls	r3, r2, #27
 8003364:	d504      	bpl.n	8003370 <_svfiprintf_r+0xb8>
 8003366:	2353      	movs	r3, #83	; 0x53
 8003368:	a904      	add	r1, sp, #16
 800336a:	185b      	adds	r3, r3, r1
 800336c:	2120      	movs	r1, #32
 800336e:	7019      	strb	r1, [r3, #0]
 8003370:	0713      	lsls	r3, r2, #28
 8003372:	d504      	bpl.n	800337e <_svfiprintf_r+0xc6>
 8003374:	2353      	movs	r3, #83	; 0x53
 8003376:	a904      	add	r1, sp, #16
 8003378:	185b      	adds	r3, r3, r1
 800337a:	212b      	movs	r1, #43	; 0x2b
 800337c:	7019      	strb	r1, [r3, #0]
 800337e:	7833      	ldrb	r3, [r6, #0]
 8003380:	2b2a      	cmp	r3, #42	; 0x2a
 8003382:	d016      	beq.n	80033b2 <_svfiprintf_r+0xfa>
 8003384:	0035      	movs	r5, r6
 8003386:	2100      	movs	r1, #0
 8003388:	200a      	movs	r0, #10
 800338a:	68e3      	ldr	r3, [r4, #12]
 800338c:	782a      	ldrb	r2, [r5, #0]
 800338e:	1c6e      	adds	r6, r5, #1
 8003390:	3a30      	subs	r2, #48	; 0x30
 8003392:	2a09      	cmp	r2, #9
 8003394:	d94e      	bls.n	8003434 <_svfiprintf_r+0x17c>
 8003396:	2900      	cmp	r1, #0
 8003398:	d111      	bne.n	80033be <_svfiprintf_r+0x106>
 800339a:	e017      	b.n	80033cc <_svfiprintf_r+0x114>
 800339c:	3501      	adds	r5, #1
 800339e:	e7af      	b.n	8003300 <_svfiprintf_r+0x48>
 80033a0:	9b05      	ldr	r3, [sp, #20]
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	1ac0      	subs	r0, r0, r3
 80033a6:	2301      	movs	r3, #1
 80033a8:	4083      	lsls	r3, r0
 80033aa:	4313      	orrs	r3, r2
 80033ac:	002e      	movs	r6, r5
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	e7cc      	b.n	800334c <_svfiprintf_r+0x94>
 80033b2:	9b07      	ldr	r3, [sp, #28]
 80033b4:	1d19      	adds	r1, r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	9107      	str	r1, [sp, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db01      	blt.n	80033c2 <_svfiprintf_r+0x10a>
 80033be:	930b      	str	r3, [sp, #44]	; 0x2c
 80033c0:	e004      	b.n	80033cc <_svfiprintf_r+0x114>
 80033c2:	425b      	negs	r3, r3
 80033c4:	60e3      	str	r3, [r4, #12]
 80033c6:	2302      	movs	r3, #2
 80033c8:	4313      	orrs	r3, r2
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	782b      	ldrb	r3, [r5, #0]
 80033ce:	2b2e      	cmp	r3, #46	; 0x2e
 80033d0:	d10a      	bne.n	80033e8 <_svfiprintf_r+0x130>
 80033d2:	786b      	ldrb	r3, [r5, #1]
 80033d4:	2b2a      	cmp	r3, #42	; 0x2a
 80033d6:	d135      	bne.n	8003444 <_svfiprintf_r+0x18c>
 80033d8:	9b07      	ldr	r3, [sp, #28]
 80033da:	3502      	adds	r5, #2
 80033dc:	1d1a      	adds	r2, r3, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	9207      	str	r2, [sp, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db2b      	blt.n	800343e <_svfiprintf_r+0x186>
 80033e6:	9309      	str	r3, [sp, #36]	; 0x24
 80033e8:	4e2f      	ldr	r6, [pc, #188]	; (80034a8 <_svfiprintf_r+0x1f0>)
 80033ea:	2203      	movs	r2, #3
 80033ec:	0030      	movs	r0, r6
 80033ee:	7829      	ldrb	r1, [r5, #0]
 80033f0:	f000 fa08 	bl	8003804 <memchr>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d006      	beq.n	8003406 <_svfiprintf_r+0x14e>
 80033f8:	2340      	movs	r3, #64	; 0x40
 80033fa:	1b80      	subs	r0, r0, r6
 80033fc:	4083      	lsls	r3, r0
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	3501      	adds	r5, #1
 8003402:	4313      	orrs	r3, r2
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	7829      	ldrb	r1, [r5, #0]
 8003408:	2206      	movs	r2, #6
 800340a:	4828      	ldr	r0, [pc, #160]	; (80034ac <_svfiprintf_r+0x1f4>)
 800340c:	1c6e      	adds	r6, r5, #1
 800340e:	7621      	strb	r1, [r4, #24]
 8003410:	f000 f9f8 	bl	8003804 <memchr>
 8003414:	2800      	cmp	r0, #0
 8003416:	d03c      	beq.n	8003492 <_svfiprintf_r+0x1da>
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <_svfiprintf_r+0x1f8>)
 800341a:	2b00      	cmp	r3, #0
 800341c:	d125      	bne.n	800346a <_svfiprintf_r+0x1b2>
 800341e:	2207      	movs	r2, #7
 8003420:	9b07      	ldr	r3, [sp, #28]
 8003422:	3307      	adds	r3, #7
 8003424:	4393      	bics	r3, r2
 8003426:	3308      	adds	r3, #8
 8003428:	9307      	str	r3, [sp, #28]
 800342a:	6963      	ldr	r3, [r4, #20]
 800342c:	9a04      	ldr	r2, [sp, #16]
 800342e:	189b      	adds	r3, r3, r2
 8003430:	6163      	str	r3, [r4, #20]
 8003432:	e764      	b.n	80032fe <_svfiprintf_r+0x46>
 8003434:	4343      	muls	r3, r0
 8003436:	0035      	movs	r5, r6
 8003438:	2101      	movs	r1, #1
 800343a:	189b      	adds	r3, r3, r2
 800343c:	e7a6      	b.n	800338c <_svfiprintf_r+0xd4>
 800343e:	2301      	movs	r3, #1
 8003440:	425b      	negs	r3, r3
 8003442:	e7d0      	b.n	80033e6 <_svfiprintf_r+0x12e>
 8003444:	2300      	movs	r3, #0
 8003446:	200a      	movs	r0, #10
 8003448:	001a      	movs	r2, r3
 800344a:	3501      	adds	r5, #1
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	7829      	ldrb	r1, [r5, #0]
 8003450:	1c6e      	adds	r6, r5, #1
 8003452:	3930      	subs	r1, #48	; 0x30
 8003454:	2909      	cmp	r1, #9
 8003456:	d903      	bls.n	8003460 <_svfiprintf_r+0x1a8>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0c5      	beq.n	80033e8 <_svfiprintf_r+0x130>
 800345c:	9209      	str	r2, [sp, #36]	; 0x24
 800345e:	e7c3      	b.n	80033e8 <_svfiprintf_r+0x130>
 8003460:	4342      	muls	r2, r0
 8003462:	0035      	movs	r5, r6
 8003464:	2301      	movs	r3, #1
 8003466:	1852      	adds	r2, r2, r1
 8003468:	e7f1      	b.n	800344e <_svfiprintf_r+0x196>
 800346a:	aa07      	add	r2, sp, #28
 800346c:	9200      	str	r2, [sp, #0]
 800346e:	0021      	movs	r1, r4
 8003470:	003a      	movs	r2, r7
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <_svfiprintf_r+0x1fc>)
 8003474:	9803      	ldr	r0, [sp, #12]
 8003476:	e000      	b.n	800347a <_svfiprintf_r+0x1c2>
 8003478:	bf00      	nop
 800347a:	9004      	str	r0, [sp, #16]
 800347c:	9b04      	ldr	r3, [sp, #16]
 800347e:	3301      	adds	r3, #1
 8003480:	d1d3      	bne.n	800342a <_svfiprintf_r+0x172>
 8003482:	89bb      	ldrh	r3, [r7, #12]
 8003484:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003486:	065b      	lsls	r3, r3, #25
 8003488:	d400      	bmi.n	800348c <_svfiprintf_r+0x1d4>
 800348a:	e72c      	b.n	80032e6 <_svfiprintf_r+0x2e>
 800348c:	2001      	movs	r0, #1
 800348e:	4240      	negs	r0, r0
 8003490:	e729      	b.n	80032e6 <_svfiprintf_r+0x2e>
 8003492:	aa07      	add	r2, sp, #28
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	0021      	movs	r1, r4
 8003498:	003a      	movs	r2, r7
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <_svfiprintf_r+0x1fc>)
 800349c:	9803      	ldr	r0, [sp, #12]
 800349e:	f000 f87b 	bl	8003598 <_printf_i>
 80034a2:	e7ea      	b.n	800347a <_svfiprintf_r+0x1c2>
 80034a4:	0800391c 	.word	0x0800391c
 80034a8:	08003922 	.word	0x08003922
 80034ac:	08003926 	.word	0x08003926
 80034b0:	00000000 	.word	0x00000000
 80034b4:	080031f5 	.word	0x080031f5

080034b8 <_printf_common>:
 80034b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ba:	0016      	movs	r6, r2
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	688a      	ldr	r2, [r1, #8]
 80034c0:	690b      	ldr	r3, [r1, #16]
 80034c2:	000c      	movs	r4, r1
 80034c4:	9000      	str	r0, [sp, #0]
 80034c6:	4293      	cmp	r3, r2
 80034c8:	da00      	bge.n	80034cc <_printf_common+0x14>
 80034ca:	0013      	movs	r3, r2
 80034cc:	0022      	movs	r2, r4
 80034ce:	6033      	str	r3, [r6, #0]
 80034d0:	3243      	adds	r2, #67	; 0x43
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d001      	beq.n	80034dc <_printf_common+0x24>
 80034d8:	3301      	adds	r3, #1
 80034da:	6033      	str	r3, [r6, #0]
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	069b      	lsls	r3, r3, #26
 80034e0:	d502      	bpl.n	80034e8 <_printf_common+0x30>
 80034e2:	6833      	ldr	r3, [r6, #0]
 80034e4:	3302      	adds	r3, #2
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	2306      	movs	r3, #6
 80034ec:	0015      	movs	r5, r2
 80034ee:	401d      	ands	r5, r3
 80034f0:	421a      	tst	r2, r3
 80034f2:	d027      	beq.n	8003544 <_printf_common+0x8c>
 80034f4:	0023      	movs	r3, r4
 80034f6:	3343      	adds	r3, #67	; 0x43
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	4193      	sbcs	r3, r2
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	0692      	lsls	r2, r2, #26
 8003502:	d430      	bmi.n	8003566 <_printf_common+0xae>
 8003504:	0022      	movs	r2, r4
 8003506:	9901      	ldr	r1, [sp, #4]
 8003508:	9800      	ldr	r0, [sp, #0]
 800350a:	9d08      	ldr	r5, [sp, #32]
 800350c:	3243      	adds	r2, #67	; 0x43
 800350e:	47a8      	blx	r5
 8003510:	3001      	adds	r0, #1
 8003512:	d025      	beq.n	8003560 <_printf_common+0xa8>
 8003514:	2206      	movs	r2, #6
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	2500      	movs	r5, #0
 800351a:	4013      	ands	r3, r2
 800351c:	2b04      	cmp	r3, #4
 800351e:	d105      	bne.n	800352c <_printf_common+0x74>
 8003520:	6833      	ldr	r3, [r6, #0]
 8003522:	68e5      	ldr	r5, [r4, #12]
 8003524:	1aed      	subs	r5, r5, r3
 8003526:	43eb      	mvns	r3, r5
 8003528:	17db      	asrs	r3, r3, #31
 800352a:	401d      	ands	r5, r3
 800352c:	68a3      	ldr	r3, [r4, #8]
 800352e:	6922      	ldr	r2, [r4, #16]
 8003530:	4293      	cmp	r3, r2
 8003532:	dd01      	ble.n	8003538 <_printf_common+0x80>
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	18ed      	adds	r5, r5, r3
 8003538:	2600      	movs	r6, #0
 800353a:	42b5      	cmp	r5, r6
 800353c:	d120      	bne.n	8003580 <_printf_common+0xc8>
 800353e:	2000      	movs	r0, #0
 8003540:	e010      	b.n	8003564 <_printf_common+0xac>
 8003542:	3501      	adds	r5, #1
 8003544:	68e3      	ldr	r3, [r4, #12]
 8003546:	6832      	ldr	r2, [r6, #0]
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	42ab      	cmp	r3, r5
 800354c:	ddd2      	ble.n	80034f4 <_printf_common+0x3c>
 800354e:	0022      	movs	r2, r4
 8003550:	2301      	movs	r3, #1
 8003552:	9901      	ldr	r1, [sp, #4]
 8003554:	9800      	ldr	r0, [sp, #0]
 8003556:	9f08      	ldr	r7, [sp, #32]
 8003558:	3219      	adds	r2, #25
 800355a:	47b8      	blx	r7
 800355c:	3001      	adds	r0, #1
 800355e:	d1f0      	bne.n	8003542 <_printf_common+0x8a>
 8003560:	2001      	movs	r0, #1
 8003562:	4240      	negs	r0, r0
 8003564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003566:	2030      	movs	r0, #48	; 0x30
 8003568:	18e1      	adds	r1, r4, r3
 800356a:	3143      	adds	r1, #67	; 0x43
 800356c:	7008      	strb	r0, [r1, #0]
 800356e:	0021      	movs	r1, r4
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	3145      	adds	r1, #69	; 0x45
 8003574:	7809      	ldrb	r1, [r1, #0]
 8003576:	18a2      	adds	r2, r4, r2
 8003578:	3243      	adds	r2, #67	; 0x43
 800357a:	3302      	adds	r3, #2
 800357c:	7011      	strb	r1, [r2, #0]
 800357e:	e7c1      	b.n	8003504 <_printf_common+0x4c>
 8003580:	0022      	movs	r2, r4
 8003582:	2301      	movs	r3, #1
 8003584:	9901      	ldr	r1, [sp, #4]
 8003586:	9800      	ldr	r0, [sp, #0]
 8003588:	9f08      	ldr	r7, [sp, #32]
 800358a:	321a      	adds	r2, #26
 800358c:	47b8      	blx	r7
 800358e:	3001      	adds	r0, #1
 8003590:	d0e6      	beq.n	8003560 <_printf_common+0xa8>
 8003592:	3601      	adds	r6, #1
 8003594:	e7d1      	b.n	800353a <_printf_common+0x82>
	...

08003598 <_printf_i>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	b08b      	sub	sp, #44	; 0x2c
 800359c:	9206      	str	r2, [sp, #24]
 800359e:	000a      	movs	r2, r1
 80035a0:	3243      	adds	r2, #67	; 0x43
 80035a2:	9307      	str	r3, [sp, #28]
 80035a4:	9005      	str	r0, [sp, #20]
 80035a6:	9204      	str	r2, [sp, #16]
 80035a8:	7e0a      	ldrb	r2, [r1, #24]
 80035aa:	000c      	movs	r4, r1
 80035ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035ae:	2a78      	cmp	r2, #120	; 0x78
 80035b0:	d809      	bhi.n	80035c6 <_printf_i+0x2e>
 80035b2:	2a62      	cmp	r2, #98	; 0x62
 80035b4:	d80b      	bhi.n	80035ce <_printf_i+0x36>
 80035b6:	2a00      	cmp	r2, #0
 80035b8:	d100      	bne.n	80035bc <_printf_i+0x24>
 80035ba:	e0be      	b.n	800373a <_printf_i+0x1a2>
 80035bc:	497c      	ldr	r1, [pc, #496]	; (80037b0 <_printf_i+0x218>)
 80035be:	9103      	str	r1, [sp, #12]
 80035c0:	2a58      	cmp	r2, #88	; 0x58
 80035c2:	d100      	bne.n	80035c6 <_printf_i+0x2e>
 80035c4:	e093      	b.n	80036ee <_printf_i+0x156>
 80035c6:	0026      	movs	r6, r4
 80035c8:	3642      	adds	r6, #66	; 0x42
 80035ca:	7032      	strb	r2, [r6, #0]
 80035cc:	e022      	b.n	8003614 <_printf_i+0x7c>
 80035ce:	0010      	movs	r0, r2
 80035d0:	3863      	subs	r0, #99	; 0x63
 80035d2:	2815      	cmp	r0, #21
 80035d4:	d8f7      	bhi.n	80035c6 <_printf_i+0x2e>
 80035d6:	f7fc fd97 	bl	8000108 <__gnu_thumb1_case_shi>
 80035da:	0016      	.short	0x0016
 80035dc:	fff6001f 	.word	0xfff6001f
 80035e0:	fff6fff6 	.word	0xfff6fff6
 80035e4:	001ffff6 	.word	0x001ffff6
 80035e8:	fff6fff6 	.word	0xfff6fff6
 80035ec:	fff6fff6 	.word	0xfff6fff6
 80035f0:	003600a3 	.word	0x003600a3
 80035f4:	fff60083 	.word	0xfff60083
 80035f8:	00b4fff6 	.word	0x00b4fff6
 80035fc:	0036fff6 	.word	0x0036fff6
 8003600:	fff6fff6 	.word	0xfff6fff6
 8003604:	0087      	.short	0x0087
 8003606:	0026      	movs	r6, r4
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	3642      	adds	r6, #66	; 0x42
 800360c:	1d11      	adds	r1, r2, #4
 800360e:	6019      	str	r1, [r3, #0]
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	7033      	strb	r3, [r6, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	e0a2      	b.n	800375e <_printf_i+0x1c6>
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	6809      	ldr	r1, [r1, #0]
 800361c:	1d02      	adds	r2, r0, #4
 800361e:	060d      	lsls	r5, r1, #24
 8003620:	d50b      	bpl.n	800363a <_printf_i+0xa2>
 8003622:	6805      	ldr	r5, [r0, #0]
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	2d00      	cmp	r5, #0
 8003628:	da03      	bge.n	8003632 <_printf_i+0x9a>
 800362a:	232d      	movs	r3, #45	; 0x2d
 800362c:	9a04      	ldr	r2, [sp, #16]
 800362e:	426d      	negs	r5, r5
 8003630:	7013      	strb	r3, [r2, #0]
 8003632:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <_printf_i+0x218>)
 8003634:	270a      	movs	r7, #10
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	e01b      	b.n	8003672 <_printf_i+0xda>
 800363a:	6805      	ldr	r5, [r0, #0]
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	0649      	lsls	r1, r1, #25
 8003640:	d5f1      	bpl.n	8003626 <_printf_i+0x8e>
 8003642:	b22d      	sxth	r5, r5
 8003644:	e7ef      	b.n	8003626 <_printf_i+0x8e>
 8003646:	680d      	ldr	r5, [r1, #0]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	1d08      	adds	r0, r1, #4
 800364c:	6018      	str	r0, [r3, #0]
 800364e:	062e      	lsls	r6, r5, #24
 8003650:	d501      	bpl.n	8003656 <_printf_i+0xbe>
 8003652:	680d      	ldr	r5, [r1, #0]
 8003654:	e003      	b.n	800365e <_printf_i+0xc6>
 8003656:	066d      	lsls	r5, r5, #25
 8003658:	d5fb      	bpl.n	8003652 <_printf_i+0xba>
 800365a:	680d      	ldr	r5, [r1, #0]
 800365c:	b2ad      	uxth	r5, r5
 800365e:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <_printf_i+0x218>)
 8003660:	2708      	movs	r7, #8
 8003662:	9303      	str	r3, [sp, #12]
 8003664:	2a6f      	cmp	r2, #111	; 0x6f
 8003666:	d000      	beq.n	800366a <_printf_i+0xd2>
 8003668:	3702      	adds	r7, #2
 800366a:	0023      	movs	r3, r4
 800366c:	2200      	movs	r2, #0
 800366e:	3343      	adds	r3, #67	; 0x43
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	6863      	ldr	r3, [r4, #4]
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db03      	blt.n	8003682 <_printf_i+0xea>
 800367a:	2104      	movs	r1, #4
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	438a      	bics	r2, r1
 8003680:	6022      	str	r2, [r4, #0]
 8003682:	2d00      	cmp	r5, #0
 8003684:	d102      	bne.n	800368c <_printf_i+0xf4>
 8003686:	9e04      	ldr	r6, [sp, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <_printf_i+0x10e>
 800368c:	9e04      	ldr	r6, [sp, #16]
 800368e:	0028      	movs	r0, r5
 8003690:	0039      	movs	r1, r7
 8003692:	f7fc fdc9 	bl	8000228 <__aeabi_uidivmod>
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	3e01      	subs	r6, #1
 800369a:	5c5b      	ldrb	r3, [r3, r1]
 800369c:	7033      	strb	r3, [r6, #0]
 800369e:	002b      	movs	r3, r5
 80036a0:	0005      	movs	r5, r0
 80036a2:	429f      	cmp	r7, r3
 80036a4:	d9f3      	bls.n	800368e <_printf_i+0xf6>
 80036a6:	2f08      	cmp	r7, #8
 80036a8:	d109      	bne.n	80036be <_printf_i+0x126>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	07db      	lsls	r3, r3, #31
 80036ae:	d506      	bpl.n	80036be <_printf_i+0x126>
 80036b0:	6862      	ldr	r2, [r4, #4]
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dc02      	bgt.n	80036be <_printf_i+0x126>
 80036b8:	2330      	movs	r3, #48	; 0x30
 80036ba:	3e01      	subs	r6, #1
 80036bc:	7033      	strb	r3, [r6, #0]
 80036be:	9b04      	ldr	r3, [sp, #16]
 80036c0:	1b9b      	subs	r3, r3, r6
 80036c2:	6123      	str	r3, [r4, #16]
 80036c4:	9b07      	ldr	r3, [sp, #28]
 80036c6:	0021      	movs	r1, r4
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	9805      	ldr	r0, [sp, #20]
 80036cc:	9b06      	ldr	r3, [sp, #24]
 80036ce:	aa09      	add	r2, sp, #36	; 0x24
 80036d0:	f7ff fef2 	bl	80034b8 <_printf_common>
 80036d4:	3001      	adds	r0, #1
 80036d6:	d147      	bne.n	8003768 <_printf_i+0x1d0>
 80036d8:	2001      	movs	r0, #1
 80036da:	4240      	negs	r0, r0
 80036dc:	b00b      	add	sp, #44	; 0x2c
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e0:	2220      	movs	r2, #32
 80036e2:	6809      	ldr	r1, [r1, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	2278      	movs	r2, #120	; 0x78
 80036ea:	4932      	ldr	r1, [pc, #200]	; (80037b4 <_printf_i+0x21c>)
 80036ec:	9103      	str	r1, [sp, #12]
 80036ee:	0021      	movs	r1, r4
 80036f0:	3145      	adds	r1, #69	; 0x45
 80036f2:	700a      	strb	r2, [r1, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	c920      	ldmia	r1!, {r5}
 80036fa:	0610      	lsls	r0, r2, #24
 80036fc:	d402      	bmi.n	8003704 <_printf_i+0x16c>
 80036fe:	0650      	lsls	r0, r2, #25
 8003700:	d500      	bpl.n	8003704 <_printf_i+0x16c>
 8003702:	b2ad      	uxth	r5, r5
 8003704:	6019      	str	r1, [r3, #0]
 8003706:	07d3      	lsls	r3, r2, #31
 8003708:	d502      	bpl.n	8003710 <_printf_i+0x178>
 800370a:	2320      	movs	r3, #32
 800370c:	4313      	orrs	r3, r2
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	2710      	movs	r7, #16
 8003712:	2d00      	cmp	r5, #0
 8003714:	d1a9      	bne.n	800366a <_printf_i+0xd2>
 8003716:	2220      	movs	r2, #32
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	4393      	bics	r3, r2
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	e7a4      	b.n	800366a <_printf_i+0xd2>
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	680d      	ldr	r5, [r1, #0]
 8003724:	1d10      	adds	r0, r2, #4
 8003726:	6949      	ldr	r1, [r1, #20]
 8003728:	6018      	str	r0, [r3, #0]
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	062e      	lsls	r6, r5, #24
 800372e:	d501      	bpl.n	8003734 <_printf_i+0x19c>
 8003730:	6019      	str	r1, [r3, #0]
 8003732:	e002      	b.n	800373a <_printf_i+0x1a2>
 8003734:	066d      	lsls	r5, r5, #25
 8003736:	d5fb      	bpl.n	8003730 <_printf_i+0x198>
 8003738:	8019      	strh	r1, [r3, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	9e04      	ldr	r6, [sp, #16]
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	e7c0      	b.n	80036c4 <_printf_i+0x12c>
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	1d11      	adds	r1, r2, #4
 8003746:	6019      	str	r1, [r3, #0]
 8003748:	6816      	ldr	r6, [r2, #0]
 800374a:	2100      	movs	r1, #0
 800374c:	0030      	movs	r0, r6
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	f000 f858 	bl	8003804 <memchr>
 8003754:	2800      	cmp	r0, #0
 8003756:	d001      	beq.n	800375c <_printf_i+0x1c4>
 8003758:	1b80      	subs	r0, r0, r6
 800375a:	6060      	str	r0, [r4, #4]
 800375c:	6863      	ldr	r3, [r4, #4]
 800375e:	6123      	str	r3, [r4, #16]
 8003760:	2300      	movs	r3, #0
 8003762:	9a04      	ldr	r2, [sp, #16]
 8003764:	7013      	strb	r3, [r2, #0]
 8003766:	e7ad      	b.n	80036c4 <_printf_i+0x12c>
 8003768:	0032      	movs	r2, r6
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	9906      	ldr	r1, [sp, #24]
 800376e:	9805      	ldr	r0, [sp, #20]
 8003770:	9d07      	ldr	r5, [sp, #28]
 8003772:	47a8      	blx	r5
 8003774:	3001      	adds	r0, #1
 8003776:	d0af      	beq.n	80036d8 <_printf_i+0x140>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	079b      	lsls	r3, r3, #30
 800377c:	d415      	bmi.n	80037aa <_printf_i+0x212>
 800377e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003780:	68e0      	ldr	r0, [r4, #12]
 8003782:	4298      	cmp	r0, r3
 8003784:	daaa      	bge.n	80036dc <_printf_i+0x144>
 8003786:	0018      	movs	r0, r3
 8003788:	e7a8      	b.n	80036dc <_printf_i+0x144>
 800378a:	0022      	movs	r2, r4
 800378c:	2301      	movs	r3, #1
 800378e:	9906      	ldr	r1, [sp, #24]
 8003790:	9805      	ldr	r0, [sp, #20]
 8003792:	9e07      	ldr	r6, [sp, #28]
 8003794:	3219      	adds	r2, #25
 8003796:	47b0      	blx	r6
 8003798:	3001      	adds	r0, #1
 800379a:	d09d      	beq.n	80036d8 <_printf_i+0x140>
 800379c:	3501      	adds	r5, #1
 800379e:	68e3      	ldr	r3, [r4, #12]
 80037a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	42ab      	cmp	r3, r5
 80037a6:	dcf0      	bgt.n	800378a <_printf_i+0x1f2>
 80037a8:	e7e9      	b.n	800377e <_printf_i+0x1e6>
 80037aa:	2500      	movs	r5, #0
 80037ac:	e7f7      	b.n	800379e <_printf_i+0x206>
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	0800392d 	.word	0x0800392d
 80037b4:	0800393e 	.word	0x0800393e

080037b8 <memmove>:
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4288      	cmp	r0, r1
 80037bc:	d902      	bls.n	80037c4 <memmove+0xc>
 80037be:	188b      	adds	r3, r1, r2
 80037c0:	4298      	cmp	r0, r3
 80037c2:	d303      	bcc.n	80037cc <memmove+0x14>
 80037c4:	2300      	movs	r3, #0
 80037c6:	e007      	b.n	80037d8 <memmove+0x20>
 80037c8:	5c8b      	ldrb	r3, [r1, r2]
 80037ca:	5483      	strb	r3, [r0, r2]
 80037cc:	3a01      	subs	r2, #1
 80037ce:	d2fb      	bcs.n	80037c8 <memmove+0x10>
 80037d0:	bd10      	pop	{r4, pc}
 80037d2:	5ccc      	ldrb	r4, [r1, r3]
 80037d4:	54c4      	strb	r4, [r0, r3]
 80037d6:	3301      	adds	r3, #1
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1fa      	bne.n	80037d2 <memmove+0x1a>
 80037dc:	e7f8      	b.n	80037d0 <memmove+0x18>
	...

080037e0 <_sbrk_r>:
 80037e0:	2300      	movs	r3, #0
 80037e2:	b570      	push	{r4, r5, r6, lr}
 80037e4:	4d06      	ldr	r5, [pc, #24]	; (8003800 <_sbrk_r+0x20>)
 80037e6:	0004      	movs	r4, r0
 80037e8:	0008      	movs	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fc ffc6 	bl	800077c <_sbrk>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d103      	bne.n	80037fc <_sbrk_r+0x1c>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d000      	beq.n	80037fc <_sbrk_r+0x1c>
 80037fa:	6023      	str	r3, [r4, #0]
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	200002a4 	.word	0x200002a4

08003804 <memchr>:
 8003804:	b2c9      	uxtb	r1, r1
 8003806:	1882      	adds	r2, r0, r2
 8003808:	4290      	cmp	r0, r2
 800380a:	d101      	bne.n	8003810 <memchr+0xc>
 800380c:	2000      	movs	r0, #0
 800380e:	4770      	bx	lr
 8003810:	7803      	ldrb	r3, [r0, #0]
 8003812:	428b      	cmp	r3, r1
 8003814:	d0fb      	beq.n	800380e <memchr+0xa>
 8003816:	3001      	adds	r0, #1
 8003818:	e7f6      	b.n	8003808 <memchr+0x4>

0800381a <memcpy>:
 800381a:	2300      	movs	r3, #0
 800381c:	b510      	push	{r4, lr}
 800381e:	429a      	cmp	r2, r3
 8003820:	d100      	bne.n	8003824 <memcpy+0xa>
 8003822:	bd10      	pop	{r4, pc}
 8003824:	5ccc      	ldrb	r4, [r1, r3]
 8003826:	54c4      	strb	r4, [r0, r3]
 8003828:	3301      	adds	r3, #1
 800382a:	e7f8      	b.n	800381e <memcpy+0x4>

0800382c <_realloc_r>:
 800382c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800382e:	0007      	movs	r7, r0
 8003830:	000e      	movs	r6, r1
 8003832:	0014      	movs	r4, r2
 8003834:	2900      	cmp	r1, #0
 8003836:	d105      	bne.n	8003844 <_realloc_r+0x18>
 8003838:	0011      	movs	r1, r2
 800383a:	f7ff fc49 	bl	80030d0 <_malloc_r>
 800383e:	0005      	movs	r5, r0
 8003840:	0028      	movs	r0, r5
 8003842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003844:	2a00      	cmp	r2, #0
 8003846:	d103      	bne.n	8003850 <_realloc_r+0x24>
 8003848:	f7ff fbd6 	bl	8002ff8 <_free_r>
 800384c:	0025      	movs	r5, r4
 800384e:	e7f7      	b.n	8003840 <_realloc_r+0x14>
 8003850:	f000 f81b 	bl	800388a <_malloc_usable_size_r>
 8003854:	9001      	str	r0, [sp, #4]
 8003856:	4284      	cmp	r4, r0
 8003858:	d803      	bhi.n	8003862 <_realloc_r+0x36>
 800385a:	0035      	movs	r5, r6
 800385c:	0843      	lsrs	r3, r0, #1
 800385e:	42a3      	cmp	r3, r4
 8003860:	d3ee      	bcc.n	8003840 <_realloc_r+0x14>
 8003862:	0021      	movs	r1, r4
 8003864:	0038      	movs	r0, r7
 8003866:	f7ff fc33 	bl	80030d0 <_malloc_r>
 800386a:	1e05      	subs	r5, r0, #0
 800386c:	d0e8      	beq.n	8003840 <_realloc_r+0x14>
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	0022      	movs	r2, r4
 8003872:	429c      	cmp	r4, r3
 8003874:	d900      	bls.n	8003878 <_realloc_r+0x4c>
 8003876:	001a      	movs	r2, r3
 8003878:	0031      	movs	r1, r6
 800387a:	0028      	movs	r0, r5
 800387c:	f7ff ffcd 	bl	800381a <memcpy>
 8003880:	0031      	movs	r1, r6
 8003882:	0038      	movs	r0, r7
 8003884:	f7ff fbb8 	bl	8002ff8 <_free_r>
 8003888:	e7da      	b.n	8003840 <_realloc_r+0x14>

0800388a <_malloc_usable_size_r>:
 800388a:	1f0b      	subs	r3, r1, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1f18      	subs	r0, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	da01      	bge.n	8003898 <_malloc_usable_size_r+0xe>
 8003894:	580b      	ldr	r3, [r1, r0]
 8003896:	18c0      	adds	r0, r0, r3
 8003898:	4770      	bx	lr
	...

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
