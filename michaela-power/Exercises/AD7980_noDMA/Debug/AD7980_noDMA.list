
AD7980_noDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800364c  0800364c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800364c  0800364c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800364c  0800364c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  080036b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080036b0  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f96  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001658  00000000  00000000  0002905d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  0002a6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060b  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011d7d  00000000  00000000  0002b493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa2c  00000000  00000000  0003d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006abf1  00000000  00000000  00047c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fa8  00000000  00000000  000b2830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b47d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800359c 	.word	0x0800359c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800359c 	.word	0x0800359c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b08e      	sub	sp, #56	; 0x38
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fae5 	bl	8000808 <HAL_Init>
  //CNV time at least 500nanoseconds
  //time between conversion 1.2nanoseconds
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f847 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f917 	bl	8000474 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000246:	f000 f8a5 	bl	8000394 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f8e3 	bl	8000414 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//SDI tied to VIO drives chip select pin high, therefore pull down to initiate acquisition phase
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800024e:	2380      	movs	r3, #128	; 0x80
 8000250:	0059      	lsls	r1, r3, #1
 8000252:	2390      	movs	r3, #144	; 0x90
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2201      	movs	r2, #1
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fd81 	bl	8000d60 <HAL_GPIO_WritePin>
	HAL_Delay(1); //delay by 1ms to allow for conversion phase
 800025e:	2001      	movs	r0, #1
 8000260:	f000 fb36 	bl	80008d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	0059      	lsls	r1, r3, #1
 8000268:	2390      	movs	r3, #144	; 0x90
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	2200      	movs	r2, #0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fd76 	bl	8000d60 <HAL_GPIO_WritePin>
	rxStatus = HAL_SPI_Receive(&hspi1, (uint8_t*)rxBuffer, 2, HAL_MAX_DELAY); //receive rxBuffer through poll
 8000274:	2537      	movs	r5, #55	; 0x37
 8000276:	197c      	adds	r4, r7, r5
 8000278:	2301      	movs	r3, #1
 800027a:	425b      	negs	r3, r3
 800027c:	0039      	movs	r1, r7
 800027e:	4810      	ldr	r0, [pc, #64]	; (80002c0 <main+0x8c>)
 8000280:	2202      	movs	r2, #2
 8000282:	f001 fb7f 	bl	8001984 <HAL_SPI_Receive>
 8000286:	0003      	movs	r3, r0
 8000288:	7023      	strb	r3, [r4, #0]
	if (rxStatus!=HAL_OK) {
 800028a:	197b      	adds	r3, r7, r5
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d006      	beq.n	80002a0 <main+0x6c>
		sprintf(uartBuffer, "SPI MISO ERROR\r\n");
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <main+0x90>)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	0011      	movs	r1, r2
 8000298:	0018      	movs	r0, r3
 800029a:	f002 fcd9 	bl	8002c50 <siprintf>
 800029e:	e007      	b.n	80002b0 <main+0x7c>
	} else {
		//proceed transfer data into uartBuffer to transmit
		sprintf(uartBuffer, "SPI buffer data: %d\r\n", rxBuffer[1]);
 80002a0:	003b      	movs	r3, r7
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	001a      	movs	r2, r3
 80002a6:	4908      	ldr	r1, [pc, #32]	; (80002c8 <main+0x94>)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 fcd0 	bl	8002c50 <siprintf>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, 2, HAL_MAX_DELAY);
 80002b0:	2301      	movs	r3, #1
 80002b2:	425b      	negs	r3, r3
 80002b4:	1d39      	adds	r1, r7, #4
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <main+0x98>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	f002 f8bf 	bl	800243c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80002be:	e7c6      	b.n	800024e <main+0x1a>
 80002c0:	20000078 	.word	0x20000078
 80002c4:	080035b4 	.word	0x080035b4
 80002c8:	080035c8 	.word	0x080035c8
 80002cc:	200000dc 	.word	0x200000dc

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b097      	sub	sp, #92	; 0x5c
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2428      	movs	r4, #40	; 0x28
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2330      	movs	r3, #48	; 0x30
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f002 fcd5 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	2318      	movs	r3, #24
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	0018      	movs	r0, r3
 80002ec:	2310      	movs	r3, #16
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fccd 	bl	8002c90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	0018      	movs	r0, r3
 80002fa:	2314      	movs	r3, #20
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fcc6 	bl	8002c90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	22a0      	movs	r2, #160	; 0xa0
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fd31 	bl	8000d9c <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800033e:	f000 f921 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	2118      	movs	r1, #24
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2207      	movs	r2, #7
 8000348:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2101      	movs	r1, #1
 8000360:	0018      	movs	r0, r3
 8000362:	f001 f835 	bl	80013d0 <HAL_RCC_ClockConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800036a:	f000 f90b 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f96b 	bl	8001658 <HAL_RCCEx_PeriphCLKConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000386:	f000 f8fd 	bl	8000584 <Error_Handler>
  }
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b017      	add	sp, #92	; 0x5c
 8000390:	bd90      	pop	{r4, r7, pc}
	...

08000394 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <MX_SPI1_Init+0x78>)
 800039a:	4a1d      	ldr	r2, [pc, #116]	; (8000410 <MX_SPI1_Init+0x7c>)
 800039c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039e:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_SPI1_Init+0x78>)
 80003a0:	2282      	movs	r2, #130	; 0x82
 80003a2:	0052      	lsls	r2, r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <MX_SPI1_Init+0x78>)
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_SPI1_Init+0x78>)
 80003b0:	22f0      	movs	r2, #240	; 0xf0
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_SPI1_Init+0x78>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_SPI1_Init+0x78>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_SPI1_Init+0x78>)
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0092      	lsls	r2, r2, #2
 80003c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_SPI1_Init+0x78>)
 80003cc:	2228      	movs	r2, #40	; 0x28
 80003ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_SPI1_Init+0x78>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d6:	4b0d      	ldr	r3, [pc, #52]	; (800040c <MX_SPI1_Init+0x78>)
 80003d8:	2200      	movs	r2, #0
 80003da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_SPI1_Init+0x78>)
 80003de:	2200      	movs	r2, #0
 80003e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <MX_SPI1_Init+0x78>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_SPI1_Init+0x78>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <MX_SPI1_Init+0x78>)
 80003f0:	2208      	movs	r2, #8
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <MX_SPI1_Init+0x78>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f001 fa0c 	bl	8001814 <HAL_SPI_Init>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000400:	f000 f8c0 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	20000078 	.word	0x20000078
 8000410:	40013000 	.word	0x40013000

08000414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_USART1_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <MX_USART1_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000420:	2296      	movs	r2, #150	; 0x96
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART1_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 ff9b 	bl	8002394 <HAL_UART_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f88f 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000dc 	.word	0x200000dc
 8000470:	40013800 	.word	0x40013800

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f002 fc03 	bl	8002c90 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <MX_GPIO_Init+0x108>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b3b      	ldr	r3, [pc, #236]	; (800057c <MX_GPIO_Init+0x108>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0289      	lsls	r1, r1, #10
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b38      	ldr	r3, [pc, #224]	; (800057c <MX_GPIO_Init+0x108>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	029b      	lsls	r3, r3, #10
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b35      	ldr	r3, [pc, #212]	; (800057c <MX_GPIO_Init+0x108>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_GPIO_Init+0x108>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0309      	lsls	r1, r1, #12
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_GPIO_Init+0x108>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	031b      	lsls	r3, r3, #12
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_GPIO_Init+0x108>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <MX_GPIO_Init+0x108>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	02c9      	lsls	r1, r1, #11
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_GPIO_Init+0x108>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	02db      	lsls	r3, r3, #11
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4827      	ldr	r0, [pc, #156]	; (8000580 <MX_GPIO_Init+0x10c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	0019      	movs	r1, r3
 80004e8:	f000 fc3a 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	0059      	lsls	r1, r3, #1
 80004f0:	2390      	movs	r3, #144	; 0x90
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2200      	movs	r2, #0
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fc32 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2290      	movs	r2, #144	; 0x90
 8000506:	0352      	lsls	r2, r2, #13
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000510:	193a      	adds	r2, r7, r4
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fab1 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	000c      	movs	r4, r1
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800053c:	193b      	adds	r3, r7, r4
 800053e:	4a10      	ldr	r2, [pc, #64]	; (8000580 <MX_GPIO_Init+0x10c>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f000 fa9c 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000548:	0021      	movs	r1, r4
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0052      	lsls	r2, r2, #1
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	187a      	adds	r2, r7, r1
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fa87 	bl	8000a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b009      	add	sp, #36	; 0x24
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x44>)
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_MspInit+0x44>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x44>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	2201      	movs	r2, #1
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_MspInit+0x44>)
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_MspInit+0x44>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0549      	lsls	r1, r1, #21
 80005b8:	430a      	orrs	r2, r1
 80005ba:	61da      	str	r2, [r3, #28]
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_MspInit+0x44>)
 80005be:	69da      	ldr	r2, [r3, #28]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	055b      	lsls	r3, r3, #21
 80005c4:	4013      	ands	r3, r2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b08b      	sub	sp, #44	; 0x2c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	2414      	movs	r4, #20
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f002 fb50 	bl	8002c90 <memset>
  if(hspi->Instance==SPI1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <HAL_SPI_MspInit+0x90>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d132      	bne.n	8000660 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <HAL_SPI_MspInit+0x94>)
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <HAL_SPI_MspInit+0x94>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0149      	lsls	r1, r1, #5
 8000604:	430a      	orrs	r2, r1
 8000606:	619a      	str	r2, [r3, #24]
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_SPI_MspInit+0x94>)
 800060a:	699a      	ldr	r2, [r3, #24]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	015b      	lsls	r3, r3, #5
 8000610:	4013      	ands	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_SPI_MspInit+0x94>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <HAL_SPI_MspInit+0x94>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0289      	lsls	r1, r1, #10
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_SPI_MspInit+0x94>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	029b      	lsls	r3, r3, #10
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2260      	movs	r2, #96	; 0x60
 8000638:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2202      	movs	r2, #2
 800063e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2203      	movs	r2, #3
 800064a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	187a      	adds	r2, r7, r1
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fa10 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b00b      	add	sp, #44	; 0x2c
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40013000 	.word	0x40013000
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08b      	sub	sp, #44	; 0x2c
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	2414      	movs	r4, #20
 800067a:	193b      	adds	r3, r7, r4
 800067c:	0018      	movs	r0, r3
 800067e:	2314      	movs	r3, #20
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f002 fb04 	bl	8002c90 <memset>
  if(huart->Instance==USART1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <HAL_UART_MspInit+0x94>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d133      	bne.n	80006fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <HAL_UART_MspInit+0x98>)
 8000694:	699a      	ldr	r2, [r3, #24]
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_UART_MspInit+0x98>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	01c9      	lsls	r1, r1, #7
 800069c:	430a      	orrs	r2, r1
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_UART_MspInit+0x98>)
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	01db      	lsls	r3, r3, #7
 80006a8:	4013      	ands	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_UART_MspInit+0x98>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_UART_MspInit+0x98>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_UART_MspInit+0x98>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	22c0      	movs	r2, #192	; 0xc0
 80006ce:	00d2      	lsls	r2, r2, #3
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2202      	movs	r2, #2
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2203      	movs	r2, #3
 80006e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	187a      	adds	r2, r7, r1
 80006ee:	2390      	movs	r3, #144	; 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 f9c3 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b00b      	add	sp, #44	; 0x2c
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8b2 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f002 fa98 	bl	8002ca0 <__errno>
 8000770:	0003      	movs	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	2301      	movs	r3, #1
 8000778:	425b      	negs	r3, r3
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	18d2      	adds	r2, r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <_sbrk+0x64>)
 800078c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b006      	add	sp, #24
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20002000 	.word	0x20002000
 800079c:	00000400 	.word	0x00000400
 80007a0:	20000164 	.word	0x20000164
 80007a4:	200002b8 	.word	0x200002b8

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b6:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80007b8:	f7ff fff6 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	; (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e2:	f002 fa63 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e6:	f7ff fd25 	bl	8000234 <main>

080007ea <LoopForever>:

LoopForever:
    b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
  ldr   r0, =_estack
 80007ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007f8:	08003654 	.word	0x08003654
  ldr r2, =_sbss
 80007fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000800:	200002b4 	.word	0x200002b4

08000804 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_COMP_IRQHandler>
	...

08000808 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <HAL_Init+0x24>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_Init+0x24>)
 8000812:	2110      	movs	r1, #16
 8000814:	430a      	orrs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 f809 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081e:	f7ff feb7 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_InitTick+0x5c>)
 800083a:	681c      	ldr	r4, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_InitTick+0x60>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0019      	movs	r1, r3
 8000842:	23fa      	movs	r3, #250	; 0xfa
 8000844:	0098      	lsls	r0, r3, #2
 8000846:	f7ff fc69 	bl	800011c <__udivsi3>
 800084a:	0003      	movs	r3, r0
 800084c:	0019      	movs	r1, r3
 800084e:	0020      	movs	r0, r4
 8000850:	f7ff fc64 	bl	800011c <__udivsi3>
 8000854:	0003      	movs	r3, r0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f905 	bl	8000a66 <HAL_SYSTICK_Config>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d80b      	bhi.n	8000882 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2301      	movs	r3, #1
 800086e:	425b      	negs	r3, r3
 8000870:	2200      	movs	r2, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f8e2 	bl	8000a3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_InitTick+0x64>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_IncTick+0x1c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	001a      	movs	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x20>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	18d2      	adds	r2, r2, r3
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_IncTick+0x20>)
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000168 	.word	0x20000168

080008bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <HAL_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000168 	.word	0x20000168

080008d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d8:	f7ff fff0 	bl	80008bc <HAL_GetTick>
 80008dc:	0003      	movs	r3, r0
 80008de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	d005      	beq.n	80008f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_Delay+0x44>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001a      	movs	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	189b      	adds	r3, r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	f7ff ffe0 	bl	80008bc <HAL_GetTick>
 80008fc:	0002      	movs	r2, r0
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8f7      	bhi.n	80008f8 <HAL_Delay+0x28>
  {
  }
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000008 	.word	0x20000008

08000918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b7f      	cmp	r3, #127	; 0x7f
 800092c:	d828      	bhi.n	8000980 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092e:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <__NVIC_SetPriority+0xd4>)
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	33c0      	adds	r3, #192	; 0xc0
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	589b      	ldr	r3, [r3, r2]
 800093e:	1dfa      	adds	r2, r7, #7
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	0011      	movs	r1, r2
 8000944:	2203      	movs	r2, #3
 8000946:	400a      	ands	r2, r1
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	21ff      	movs	r1, #255	; 0xff
 800094c:	4091      	lsls	r1, r2
 800094e:	000a      	movs	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	401a      	ands	r2, r3
 8000954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	22ff      	movs	r2, #255	; 0xff
 800095c:	401a      	ands	r2, r3
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	0018      	movs	r0, r3
 8000964:	2303      	movs	r3, #3
 8000966:	4003      	ands	r3, r0
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096c:	481f      	ldr	r0, [pc, #124]	; (80009ec <__NVIC_SetPriority+0xd4>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b25b      	sxtb	r3, r3
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	430a      	orrs	r2, r1
 8000978:	33c0      	adds	r3, #192	; 0xc0
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800097e:	e031      	b.n	80009e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <__NVIC_SetPriority+0xd8>)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0019      	movs	r1, r3
 8000988:	230f      	movs	r3, #15
 800098a:	400b      	ands	r3, r1
 800098c:	3b08      	subs	r3, #8
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	3306      	adds	r3, #6
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	3304      	adds	r3, #4
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1dfa      	adds	r2, r7, #7
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	0011      	movs	r1, r2
 80009a0:	2203      	movs	r2, #3
 80009a2:	400a      	ands	r2, r1
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	21ff      	movs	r1, #255	; 0xff
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	401a      	ands	r2, r3
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	2303      	movs	r3, #3
 80009c2:	4003      	ands	r3, r0
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <__NVIC_SetPriority+0xd8>)
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001c      	movs	r4, r3
 80009d0:	230f      	movs	r3, #15
 80009d2:	4023      	ands	r3, r4
 80009d4:	3b08      	subs	r3, #8
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	430a      	orrs	r2, r1
 80009da:	3306      	adds	r3, #6
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	18c3      	adds	r3, r0, r3
 80009e0:	3304      	adds	r3, #4
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b003      	add	sp, #12
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	045b      	lsls	r3, r3, #17
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d301      	bcc.n	8000a0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e010      	b.n	8000a2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <SysTick_Config+0x44>)
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	3a01      	subs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a14:	2301      	movs	r3, #1
 8000a16:	425b      	negs	r3, r3
 8000a18:	2103      	movs	r1, #3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff ff7c 	bl	8000918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x44>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	210f      	movs	r1, #15
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	1c02      	adds	r2, r0, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff5d 	bl	8000918 <__NVIC_SetPriority>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ffbf 	bl	80009f4 <SysTick_Config>
 8000a76:	0003      	movs	r3, r0
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	e14f      	b.n	8000d30 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2101      	movs	r1, #1
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d100      	bne.n	8000aa8 <HAL_GPIO_Init+0x28>
 8000aa6:	e140      	b.n	8000d2a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d005      	beq.n	8000ac0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d130      	bne.n	8000b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	2203      	movs	r2, #3
 8000acc:	409a      	lsls	r2, r3
 8000ace:	0013      	movs	r3, r2
 8000ad0:	43da      	mvns	r2, r3
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000af6:	2201      	movs	r2, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	43da      	mvns	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	091b      	lsrs	r3, r3, #4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2203      	movs	r2, #3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d017      	beq.n	8000b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2203      	movs	r2, #3
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d123      	bne.n	8000bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3208      	adds	r2, #8
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	58d3      	ldr	r3, [r2, r3]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	220f      	movs	r2, #15
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2107      	movs	r1, #7
 8000b96:	400b      	ands	r3, r1
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	6939      	ldr	r1, [r7, #16]
 8000bb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	029b      	lsls	r3, r3, #10
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0x174>
 8000bf2:	e09a      	b.n	8000d2a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <HAL_GPIO_Init+0x2c8>)
 8000bf6:	699a      	ldr	r2, [r3, #24]
 8000bf8:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <HAL_GPIO_Init+0x2c8>)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	619a      	str	r2, [r3, #24]
 8000c00:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <HAL_GPIO_Init+0x2c8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4013      	ands	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c0c:	4a4f      	ldr	r2, [pc, #316]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	589b      	ldr	r3, [r3, r2]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	409a      	lsls	r2, r3
 8000c26:	0013      	movs	r3, r2
 8000c28:	43da      	mvns	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	2390      	movs	r3, #144	; 0x90
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0x1e2>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a44      	ldr	r2, [pc, #272]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00d      	beq.n	8000c5e <HAL_GPIO_Init+0x1de>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a43      	ldr	r2, [pc, #268]	; (8000d54 <HAL_GPIO_Init+0x2d4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d007      	beq.n	8000c5a <HAL_GPIO_Init+0x1da>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a42      	ldr	r2, [pc, #264]	; (8000d58 <HAL_GPIO_Init+0x2d8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_GPIO_Init+0x1d6>
 8000c52:	2303      	movs	r3, #3
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c56:	2305      	movs	r3, #5
 8000c58:	e004      	b.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c62:	2300      	movs	r3, #0
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	2103      	movs	r1, #3
 8000c68:	400a      	ands	r2, r1
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c74:	4935      	ldr	r1, [pc, #212]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	035b      	lsls	r3, r3, #13
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	039b      	lsls	r3, r3, #14
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_GPIO_Init+0x2dc>)
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	40da      	lsrs	r2, r3
 8000d38:	1e13      	subs	r3, r2, #0
 8000d3a:	d000      	beq.n	8000d3e <HAL_GPIO_Init+0x2be>
 8000d3c:	e6a8      	b.n	8000a90 <HAL_GPIO_Init+0x10>
  } 
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b006      	add	sp, #24
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000c00 	.word	0x48000c00
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	0008      	movs	r0, r1
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	1c7b      	adds	r3, r7, #1
 8000d74:	1c0a      	adds	r2, r1, #0
 8000d76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d78:	1c7b      	adds	r3, r7, #1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d80:	1cbb      	adds	r3, r7, #2
 8000d82:	881a      	ldrh	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e003      	b.n	8000d92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	1cbb      	adds	r3, r7, #2
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e301      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	d100      	bne.n	8000dba <HAL_RCC_OscConfig+0x1e>
 8000db8:	e08d      	b.n	8000ed6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dba:	4bc3      	ldr	r3, [pc, #780]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d00e      	beq.n	8000de4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc6:	4bc0      	ldr	r3, [pc, #768]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	220c      	movs	r2, #12
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d116      	bne.n	8000e00 <HAL_RCC_OscConfig+0x64>
 8000dd2:	4bbd      	ldr	r3, [pc, #756]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	401a      	ands	r2, r3
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	025b      	lsls	r3, r3, #9
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d10d      	bne.n	8000e00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	4bb8      	ldr	r3, [pc, #736]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	029b      	lsls	r3, r3, #10
 8000dec:	4013      	ands	r3, r2
 8000dee:	d100      	bne.n	8000df2 <HAL_RCC_OscConfig+0x56>
 8000df0:	e070      	b.n	8000ed4 <HAL_RCC_OscConfig+0x138>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d000      	beq.n	8000dfc <HAL_RCC_OscConfig+0x60>
 8000dfa:	e06b      	b.n	8000ed4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e2d8      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d107      	bne.n	8000e18 <HAL_RCC_OscConfig+0x7c>
 8000e08:	4baf      	ldr	r3, [pc, #700]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4bae      	ldr	r3, [pc, #696]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	430a      	orrs	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e02f      	b.n	8000e78 <HAL_RCC_OscConfig+0xdc>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_OscConfig+0x9e>
 8000e20:	4ba9      	ldr	r3, [pc, #676]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4ba8      	ldr	r3, [pc, #672]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	49a9      	ldr	r1, [pc, #676]	; (80010cc <HAL_RCC_OscConfig+0x330>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	4ba6      	ldr	r3, [pc, #664]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4ba5      	ldr	r3, [pc, #660]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	49a7      	ldr	r1, [pc, #668]	; (80010d0 <HAL_RCC_OscConfig+0x334>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e01e      	b.n	8000e78 <HAL_RCC_OscConfig+0xdc>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d10e      	bne.n	8000e60 <HAL_RCC_OscConfig+0xc4>
 8000e42:	4ba1      	ldr	r3, [pc, #644]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4ba0      	ldr	r3, [pc, #640]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	02c9      	lsls	r1, r1, #11
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4b9d      	ldr	r3, [pc, #628]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b9c      	ldr	r3, [pc, #624]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e00b      	b.n	8000e78 <HAL_RCC_OscConfig+0xdc>
 8000e60:	4b99      	ldr	r3, [pc, #612]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b98      	ldr	r3, [pc, #608]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	4999      	ldr	r1, [pc, #612]	; (80010cc <HAL_RCC_OscConfig+0x330>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	4b96      	ldr	r3, [pc, #600]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b95      	ldr	r3, [pc, #596]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	4997      	ldr	r1, [pc, #604]	; (80010d0 <HAL_RCC_OscConfig+0x334>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d014      	beq.n	8000eaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fd1c 	bl	80008bc <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fd17 	bl	80008bc <HAL_GetTick>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b64      	cmp	r3, #100	; 0x64
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e28a      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9c:	4b8a      	ldr	r3, [pc, #552]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0xee>
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fd07 	bl	80008bc <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fd02 	bl	80008bc <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e275      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	4b80      	ldr	r3, [pc, #512]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x118>
 8000ed2:	e000      	b.n	8000ed6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	4013      	ands	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x146>
 8000ee0:	e069      	b.n	8000fb6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee2:	4b79      	ldr	r3, [pc, #484]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d00b      	beq.n	8000f04 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eec:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d11c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x196>
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	025b      	lsls	r3, r3, #9
 8000f00:	4013      	ands	r3, r2
 8000f02:	d116      	bne.n	8000f32 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f04:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d005      	beq.n	8000f1a <HAL_RCC_OscConfig+0x17e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d001      	beq.n	8000f1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e24b      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1a:	4b6b      	ldr	r3, [pc, #428]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	22f8      	movs	r2, #248	; 0xf8
 8000f20:	4393      	bics	r3, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	00da      	lsls	r2, r3, #3
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f30:	e041      	b.n	8000fb6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fcb9 	bl	80008bc <HAL_GetTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f50:	f7ff fcb4 	bl	80008bc <HAL_GetTick>
 8000f54:	0002      	movs	r2, r0
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e227      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d0f1      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	22f8      	movs	r2, #248	; 0xf8
 8000f72:	4393      	bics	r3, r2
 8000f74:	0019      	movs	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	00da      	lsls	r2, r3, #3
 8000f7c:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e018      	b.n	8000fb6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f84:	4b50      	ldr	r3, [pc, #320]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc94 	bl	80008bc <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fc8f 	bl	80008bc <HAL_GetTick>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e202      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fac:	4b46      	ldr	r3, [pc, #280]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d1f1      	bne.n	8000f9a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2208      	movs	r2, #8
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d036      	beq.n	800102e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d019      	beq.n	8000ffc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fc8:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fc72 	bl	80008bc <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fc6d 	bl	80008bc <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1e0      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d0f1      	beq.n	8000fde <HAL_RCC_OscConfig+0x242>
 8000ffa:	e018      	b.n	800102e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001000:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001008:	f7ff fc58 	bl	80008bc <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001012:	f7ff fc53 	bl	80008bc <HAL_GetTick>
 8001016:	0002      	movs	r2, r0
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1c6      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2202      	movs	r2, #2
 800102a:	4013      	ands	r3, r2
 800102c:	d1f1      	bne.n	8001012 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2204      	movs	r2, #4
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x29e>
 8001038:	e0b4      	b.n	80011a4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103a:	201f      	movs	r0, #31
 800103c:	183b      	adds	r3, r7, r0
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	055b      	lsls	r3, r3, #21
 800104a:	4013      	ands	r3, r2
 800104c:	d110      	bne.n	8001070 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8001050:	69da      	ldr	r2, [r3, #28]
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	0549      	lsls	r1, r1, #21
 8001058:	430a      	orrs	r2, r1
 800105a:	61da      	str	r2, [r3, #28]
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 800105e:	69da      	ldr	r2, [r3, #28]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	055b      	lsls	r3, r3, #21
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800106a:	183b      	adds	r3, r7, r0
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4013      	ands	r3, r2
 800107a:	d11a      	bne.n	80010b2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	0049      	lsls	r1, r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108a:	f7ff fc17 	bl	80008bc <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001094:	f7ff fc12 	bl	80008bc <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e185      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4013      	ands	r3, r2
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10e      	bne.n	80010d8 <HAL_RCC_OscConfig+0x33c>
 80010ba:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	6a1a      	ldr	r2, [r3, #32]
 80010be:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	430a      	orrs	r2, r1
 80010c4:	621a      	str	r2, [r3, #32]
 80010c6:	e035      	b.n	8001134 <HAL_RCC_OscConfig+0x398>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	fffeffff 	.word	0xfffeffff
 80010d0:	fffbffff 	.word	0xfffbffff
 80010d4:	40007000 	.word	0x40007000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10c      	bne.n	80010fa <HAL_RCC_OscConfig+0x35e>
 80010e0:	4bb6      	ldr	r3, [pc, #728]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4bb5      	ldr	r3, [pc, #724]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	621a      	str	r2, [r3, #32]
 80010ec:	4bb3      	ldr	r3, [pc, #716]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	4bb2      	ldr	r3, [pc, #712]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	438a      	bics	r2, r1
 80010f6:	621a      	str	r2, [r3, #32]
 80010f8:	e01c      	b.n	8001134 <HAL_RCC_OscConfig+0x398>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x380>
 8001102:	4bae      	ldr	r3, [pc, #696]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001104:	6a1a      	ldr	r2, [r3, #32]
 8001106:	4bad      	ldr	r3, [pc, #692]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001108:	2104      	movs	r1, #4
 800110a:	430a      	orrs	r2, r1
 800110c:	621a      	str	r2, [r3, #32]
 800110e:	4bab      	ldr	r3, [pc, #684]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001110:	6a1a      	ldr	r2, [r3, #32]
 8001112:	4baa      	ldr	r3, [pc, #680]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001114:	2101      	movs	r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	621a      	str	r2, [r3, #32]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0x398>
 800111c:	4ba7      	ldr	r3, [pc, #668]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800111e:	6a1a      	ldr	r2, [r3, #32]
 8001120:	4ba6      	ldr	r3, [pc, #664]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001122:	2101      	movs	r1, #1
 8001124:	438a      	bics	r2, r1
 8001126:	621a      	str	r2, [r3, #32]
 8001128:	4ba4      	ldr	r3, [pc, #656]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	4ba3      	ldr	r3, [pc, #652]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800112e:	2104      	movs	r1, #4
 8001130:	438a      	bics	r2, r1
 8001132:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d014      	beq.n	8001166 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fbbe 	bl	80008bc <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	e009      	b.n	800115a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fbb9 	bl	80008bc <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4a9b      	ldr	r2, [pc, #620]	; (80013c0 <HAL_RCC_OscConfig+0x624>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e12b      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115a:	4b98      	ldr	r3, [pc, #608]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	2202      	movs	r2, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x3aa>
 8001164:	e013      	b.n	800118e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fba9 	bl	80008bc <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116e:	e009      	b.n	8001184 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fba4 	bl	80008bc <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	4a91      	ldr	r2, [pc, #580]	; (80013c0 <HAL_RCC_OscConfig+0x624>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e116      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001184:	4b8d      	ldr	r3, [pc, #564]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800118e:	231f      	movs	r3, #31
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	4b87      	ldr	r3, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800119e:	4989      	ldr	r1, [pc, #548]	; (80013c4 <HAL_RCC_OscConfig+0x628>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2210      	movs	r2, #16
 80011aa:	4013      	ands	r3, r2
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d12a      	bne.n	800120c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011b6:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	4b80      	ldr	r3, [pc, #512]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80011bc:	2104      	movs	r1, #4
 80011be:	430a      	orrs	r2, r1
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011c2:	4b7e      	ldr	r3, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80011c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c6:	4b7d      	ldr	r3, [pc, #500]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb75 	bl	80008bc <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011d8:	f7ff fb70 	bl	80008bc <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e0e3      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ea:	4b74      	ldr	r3, [pc, #464]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d0f1      	beq.n	80011d8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011f4:	4b71      	ldr	r3, [pc, #452]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	22f8      	movs	r2, #248	; 0xf8
 80011fa:	4393      	bics	r3, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	00da      	lsls	r2, r3, #3
 8001204:	4b6d      	ldr	r3, [pc, #436]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001206:	430a      	orrs	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
 800120a:	e034      	b.n	8001276 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	3305      	adds	r3, #5
 8001212:	d111      	bne.n	8001238 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001214:	4b69      	ldr	r3, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001218:	4b68      	ldr	r3, [pc, #416]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800121a:	2104      	movs	r1, #4
 800121c:	438a      	bics	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001220:	4b66      	ldr	r3, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001224:	22f8      	movs	r2, #248	; 0xf8
 8001226:	4393      	bics	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	00da      	lsls	r2, r3, #3
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
 8001236:	e01e      	b.n	8001276 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001238:	4b60      	ldr	r3, [pc, #384]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800123a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123c:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800123e:	2104      	movs	r1, #4
 8001240:	430a      	orrs	r2, r1
 8001242:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001244:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001248:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800124a:	2101      	movs	r1, #1
 800124c:	438a      	bics	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001250:	f7ff fb34 	bl	80008bc <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800125a:	f7ff fb2f 	bl	80008bc <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0a2      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800126e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001270:	2202      	movs	r2, #2
 8001272:	4013      	ands	r3, r2
 8001274:	d1f1      	bne.n	800125a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <HAL_RCC_OscConfig+0x4e4>
 800127e:	e097      	b.n	80013b0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	220c      	movs	r2, #12
 8001286:	4013      	ands	r3, r2
 8001288:	2b08      	cmp	r3, #8
 800128a:	d100      	bne.n	800128e <HAL_RCC_OscConfig+0x4f2>
 800128c:	e06b      	b.n	8001366 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d14c      	bne.n	8001330 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800129c:	494a      	ldr	r1, [pc, #296]	; (80013c8 <HAL_RCC_OscConfig+0x62c>)
 800129e:	400a      	ands	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb0b 	bl	80008bc <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ac:	f7ff fb06 	bl	80008bc <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e079      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	049b      	lsls	r3, r3, #18
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	220f      	movs	r2, #15
 80012d0:	4393      	bics	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <HAL_RCC_OscConfig+0x630>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	0019      	movs	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	431a      	orrs	r2, r3
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0449      	lsls	r1, r1, #17
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fad9 	bl	80008bc <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fad4 	bl	80008bc <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e047      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049b      	lsls	r3, r3, #18
 800132a:	4013      	ands	r3, r2
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x574>
 800132e:	e03f      	b.n	80013b0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001336:	4924      	ldr	r1, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x62c>)
 8001338:	400a      	ands	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fabe 	bl	80008bc <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fab9 	bl	80008bc <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e02c      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	049b      	lsls	r3, r3, #18
 8001360:	4013      	ands	r3, r2
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x5aa>
 8001364:	e024      	b.n	80013b0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e01f      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_RCC_OscConfig+0x620>)
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	025b      	lsls	r3, r3, #9
 8001384:	401a      	ands	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	429a      	cmp	r2, r3
 800138c:	d10e      	bne.n	80013ac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	220f      	movs	r2, #15
 8001392:	401a      	ands	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001398:	429a      	cmp	r2, r3
 800139a:	d107      	bne.n	80013ac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	23f0      	movs	r3, #240	; 0xf0
 80013a0:	039b      	lsls	r3, r3, #14
 80013a2:	401a      	ands	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b008      	add	sp, #32
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	40021000 	.word	0x40021000
 80013c0:	00001388 	.word	0x00001388
 80013c4:	efffffff 	.word	0xefffffff
 80013c8:	feffffff 	.word	0xfeffffff
 80013cc:	ffc2ffff 	.word	0xffc2ffff

080013d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0b3      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d911      	bls.n	8001416 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4393      	bics	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	4013      	ands	r3, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e09a      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d015      	beq.n	800144c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2204      	movs	r2, #4
 8001426:	4013      	ands	r3, r2
 8001428:	d006      	beq.n	8001438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800142a:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001430:	21e0      	movs	r1, #224	; 0xe0
 8001432:	00c9      	lsls	r1, r1, #3
 8001434:	430a      	orrs	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	22f0      	movs	r2, #240	; 0xf0
 800143e:	4393      	bics	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	d040      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	029b      	lsls	r3, r3, #10
 8001466:	4013      	ands	r3, r2
 8001468:	d114      	bne.n	8001494 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06e      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	049b      	lsls	r3, r3, #18
 800147e:	4013      	ands	r3, r2
 8001480:	d108      	bne.n	8001494 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e062      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e05b      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a8:	f7ff fa08 	bl	80008bc <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff fa03 	bl	80008bc <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x18c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e042      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	220c      	movs	r2, #12
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1ec      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d211      	bcs.n	800150a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x184>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e020      	b.n	800154c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2204      	movs	r2, #4
 8001510:	4013      	ands	r3, r2
 8001512:	d009      	beq.n	8001528 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_RCC_ClockConfig+0x190>)
 800151a:	4013      	ands	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001528:	f000 f820 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800152c:	0001      	movs	r1, r0
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x188>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	220f      	movs	r2, #15
 8001536:	4013      	ands	r3, r2
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x194>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	000a      	movs	r2, r1
 800153e:	40da      	lsrs	r2, r3
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x198>)
 8001542:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff f973 	bl	8000830 <HAL_InitTick>
  
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40022000 	.word	0x40022000
 8001558:	40021000 	.word	0x40021000
 800155c:	00001388 	.word	0x00001388
 8001560:	fffff8ff 	.word	0xfffff8ff
 8001564:	080035e0 	.word	0x080035e0
 8001568:	20000000 	.word	0x20000000

0800156c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	220c      	movs	r2, #12
 8001590:	4013      	ands	r3, r2
 8001592:	2b04      	cmp	r3, #4
 8001594:	d002      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x30>
 8001596:	2b08      	cmp	r3, #8
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x36>
 800159a:	e02c      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_GetSysClockFreq+0xa0>)
 800159e:	613b      	str	r3, [r7, #16]
      break;
 80015a0:	e02c      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	220f      	movs	r2, #15
 80015a8:	4013      	ands	r3, r2
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	220f      	movs	r2, #15
 80015b6:	4013      	ands	r3, r2
 80015b8:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_RCC_GetSysClockFreq+0xa8>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	4013      	ands	r3, r2
 80015c6:	d009      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015cc:	f7fe fda6 	bl	800011c <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	001a      	movs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4353      	muls	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	000a      	movs	r2, r1
 80015e0:	0152      	lsls	r2, r2, #5
 80015e2:	1a52      	subs	r2, r2, r1
 80015e4:	0193      	lsls	r3, r2, #6
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	185b      	adds	r3, r3, r1
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
      break;
 80015f4:	e002      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015f8:	613b      	str	r3, [r7, #16]
      break;
 80015fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015fc:	693b      	ldr	r3, [r7, #16]
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b006      	add	sp, #24
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40021000 	.word	0x40021000
 800160c:	007a1200 	.word	0x007a1200
 8001610:	080035f8 	.word	0x080035f8
 8001614:	08003608 	.word	0x08003608

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_RCC_GetHCLKFreq+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	20000000 	.word	0x20000000

0800162c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001630:	f7ff fff2 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001634:	0001      	movs	r1, r0
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	2207      	movs	r2, #7
 800163e:	4013      	ands	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	40d9      	lsrs	r1, r3
 8001646:	000b      	movs	r3, r1
}    
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	080035f0 	.word	0x080035f0

08001658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	025b      	lsls	r3, r3, #9
 8001670:	4013      	ands	r3, r2
 8001672:	d100      	bne.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001674:	e08e      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2017      	movs	r0, #23
 8001678:	183b      	adds	r3, r7, r0
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	055b      	lsls	r3, r3, #21
 8001686:	4013      	ands	r3, r2
 8001688:	d110      	bne.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	0549      	lsls	r1, r1, #21
 8001694:	430a      	orrs	r2, r1
 8001696:	61da      	str	r2, [r3, #28]
 8001698:	4b58      	ldr	r3, [pc, #352]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800169a:	69da      	ldr	r2, [r3, #28]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	055b      	lsls	r3, r3, #21
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	183b      	adds	r3, r7, r0
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	d11a      	bne.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b8:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	0049      	lsls	r1, r1, #1
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff f8f9 	bl	80008bc <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	e008      	b.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff f8f4 	bl	80008bc <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e087      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016f0:	6a1a      	ldr	r2, [r3, #32]
 80016f2:	23c0      	movs	r3, #192	; 0xc0
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d034      	beq.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	23c0      	movs	r3, #192	; 0xc0
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4013      	ands	r3, r2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	429a      	cmp	r2, r3
 800170e:	d02c      	beq.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0249      	lsls	r1, r1, #9
 8001724:	430a      	orrs	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001730:	400a      	ands	r2, r1
 8001732:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f8bb 	bl	80008bc <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	e009      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff f8b6 	bl	80008bc <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e048      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d0f0      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a25      	ldr	r2, [pc, #148]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177a:	430a      	orrs	r2, r1
 800177c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800177e:	2317      	movs	r3, #23
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800178e:	4920      	ldr	r1, [pc, #128]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001790:	400a      	ands	r2, r1
 8001792:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2201      	movs	r2, #1
 800179a:	4013      	ands	r3, r2
 800179c:	d009      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	2203      	movs	r2, #3
 80017a4:	4393      	bics	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2220      	movs	r2, #32
 80017b8:	4013      	ands	r3, r2
 80017ba:	d009      	beq.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	2210      	movs	r2, #16
 80017c2:	4393      	bics	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017cc:	430a      	orrs	r2, r1
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	4393      	bics	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ec:	430a      	orrs	r2, r1
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b006      	add	sp, #24
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000
 8001800:	40007000 	.word	0x40007000
 8001804:	fffffcff 	.word	0xfffffcff
 8001808:	fffeffff 	.word	0xfffeffff
 800180c:	00001388 	.word	0x00001388
 8001810:	efffffff 	.word	0xefffffff

08001814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0a8      	b.n	8001978 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	2382      	movs	r3, #130	; 0x82
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	429a      	cmp	r2, r3
 8001838:	d009      	beq.n	800184e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
 8001840:	e005      	b.n	800184e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	225d      	movs	r2, #93	; 0x5d
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	225c      	movs	r2, #92	; 0x5c
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0018      	movs	r0, r3
 800186c:	f7fe feb4 	bl	80005d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	225d      	movs	r2, #93	; 0x5d
 8001874:	2102      	movs	r1, #2
 8001876:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	23e0      	movs	r3, #224	; 0xe0
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	429a      	cmp	r2, r3
 8001892:	d902      	bls.n	800189a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e002      	b.n	80018a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	23f0      	movs	r3, #240	; 0xf0
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d008      	beq.n	80018be <HAL_SPI_Init+0xaa>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	23e0      	movs	r3, #224	; 0xe0
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d002      	beq.n	80018be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2382      	movs	r3, #130	; 0x82
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	2384      	movs	r3, #132	; 0x84
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	400b      	ands	r3, r1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	2102      	movs	r1, #2
 80018da:	400b      	ands	r3, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2101      	movs	r1, #1
 80018e4:	400b      	ands	r3, r1
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6999      	ldr	r1, [r3, #24]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2138      	movs	r1, #56	; 0x38
 80018fa:	400b      	ands	r3, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	400b      	ands	r3, r1
 8001906:	431a      	orrs	r2, r3
 8001908:	0011      	movs	r1, r2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	2204      	movs	r2, #4
 8001924:	401a      	ands	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	2110      	movs	r1, #16
 800192c:	400b      	ands	r3, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001934:	2108      	movs	r1, #8
 8001936:	400b      	ands	r3, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	23f0      	movs	r3, #240	; 0xf0
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	400b      	ands	r3, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	0011      	movs	r1, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4907      	ldr	r1, [pc, #28]	; (8001980 <HAL_SPI_Init+0x16c>)
 8001964:	400a      	ands	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	225d      	movs	r2, #93	; 0x5d
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}
 8001980:	fffff7ff 	.word	0xfffff7ff

08001984 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	1dbb      	adds	r3, r7, #6
 8001992:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001994:	2117      	movs	r1, #23
 8001996:	187b      	adds	r3, r7, r1
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	225d      	movs	r2, #93	; 0x5d
 80019a0:	5c9b      	ldrb	r3, [r3, r2]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d003      	beq.n	80019b0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80019ae:	e12b      	b.n	8001c08 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2382      	movs	r3, #130	; 0x82
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d113      	bne.n	80019e4 <HAL_SPI_Receive+0x60>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10f      	bne.n	80019e4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	225d      	movs	r2, #93	; 0x5d
 80019c8:	2104      	movs	r1, #4
 80019ca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019cc:	1dbb      	adds	r3, r7, #6
 80019ce:	881c      	ldrh	r4, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	0023      	movs	r3, r4
 80019dc:	f000 f924 	bl	8001c28 <HAL_SPI_TransmitReceive>
 80019e0:	0003      	movs	r3, r0
 80019e2:	e118      	b.n	8001c16 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	225c      	movs	r2, #92	; 0x5c
 80019e8:	5c9b      	ldrb	r3, [r3, r2]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_SPI_Receive+0x6e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e111      	b.n	8001c16 <HAL_SPI_Receive+0x292>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	225c      	movs	r2, #92	; 0x5c
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019fa:	f7fe ff5f 	bl	80008bc <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_SPI_Receive+0x8c>
 8001a08:	1dbb      	adds	r3, r7, #6
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d104      	bne.n	8001a1a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001a10:	2317      	movs	r3, #23
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a18:	e0f6      	b.n	8001c08 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	225d      	movs	r2, #93	; 0x5d
 8001a1e:	2104      	movs	r1, #4
 8001a20:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1dba      	adds	r2, r7, #6
 8001a32:	2144      	movs	r1, #68	; 0x44
 8001a34:	8812      	ldrh	r2, [r2, #0]
 8001a36:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1dba      	adds	r2, r7, #6
 8001a3c:	2146      	movs	r1, #70	; 0x46
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	23e0      	movs	r3, #224	; 0xe0
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d908      	bls.n	8001a7e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	496a      	ldr	r1, [pc, #424]	; (8001c20 <HAL_SPI_Receive+0x29c>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	e008      	b.n	8001a90 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0149      	lsls	r1, r1, #5
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d10f      	bne.n	8001abc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	495b      	ldr	r1, [pc, #364]	; (8001c24 <HAL_SPI_Receive+0x2a0>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d007      	beq.n	8001ada <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	23e0      	movs	r3, #224	; 0xe0
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d900      	bls.n	8001ae8 <HAL_SPI_Receive+0x164>
 8001ae6:	e071      	b.n	8001bcc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ae8:	e035      	b.n	8001b56 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d117      	bne.n	8001b28 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	330c      	adds	r3, #12
 8001afe:	001a      	movs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2246      	movs	r2, #70	; 0x46
 8001b18:	5a9b      	ldrh	r3, [r3, r2]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2246      	movs	r2, #70	; 0x46
 8001b24:	5299      	strh	r1, [r3, r2]
 8001b26:	e016      	b.n	8001b56 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b28:	f7fe fec8 	bl	80008bc <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d802      	bhi.n	8001b3e <HAL_SPI_Receive+0x1ba>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_SPI_Receive+0x1c0>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d108      	bne.n	8001b56 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001b44:	2317      	movs	r3, #23
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2203      	movs	r2, #3
 8001b4a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	225d      	movs	r2, #93	; 0x5d
 8001b50:	2101      	movs	r1, #1
 8001b52:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b54:	e058      	b.n	8001c08 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2246      	movs	r2, #70	; 0x46
 8001b5a:	5a9b      	ldrh	r3, [r3, r2]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1c3      	bne.n	8001aea <HAL_SPI_Receive+0x166>
 8001b62:	e039      	b.n	8001bd8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d115      	bne.n	8001b9e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	b292      	uxth	r2, r2
 8001b7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	1c9a      	adds	r2, r3, #2
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2246      	movs	r2, #70	; 0x46
 8001b8e:	5a9b      	ldrh	r3, [r3, r2]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b299      	uxth	r1, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2246      	movs	r2, #70	; 0x46
 8001b9a:	5299      	strh	r1, [r3, r2]
 8001b9c:	e016      	b.n	8001bcc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b9e:	f7fe fe8d 	bl	80008bc <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d802      	bhi.n	8001bb4 <HAL_SPI_Receive+0x230>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_SPI_Receive+0x236>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001bba:	2317      	movs	r3, #23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	225d      	movs	r2, #93	; 0x5d
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001bca:	e01d      	b.n	8001c08 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2246      	movs	r2, #70	; 0x46
 8001bd0:	5a9b      	ldrh	r3, [r3, r2]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1c5      	bne.n	8001b64 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 fb34 	bl	800224c <SPI_EndRxTransaction>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d002      	beq.n	8001bee <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001bf6:	2317      	movs	r3, #23
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e003      	b.n	8001c08 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	225d      	movs	r2, #93	; 0x5d
 8001c04:	2101      	movs	r1, #1
 8001c06:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	225c      	movs	r2, #92	; 0x5c
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c10:	2317      	movs	r3, #23
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	781b      	ldrb	r3, [r3, #0]
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b007      	add	sp, #28
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	ffffefff 	.word	0xffffefff
 8001c24:	ffffbfff 	.word	0xffffbfff

08001c28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	001a      	movs	r2, r3
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c3e:	2323      	movs	r3, #35	; 0x23
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	225c      	movs	r2, #92	; 0x5c
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_SPI_TransmitReceive+0x2c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e1c4      	b.n	8001fde <HAL_SPI_TransmitReceive+0x3b6>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	225c      	movs	r2, #92	; 0x5c
 8001c58:	2101      	movs	r1, #1
 8001c5a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c5c:	f7fe fe2e 	bl	80008bc <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c64:	201b      	movs	r0, #27
 8001c66:	183b      	adds	r3, r7, r0
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	215d      	movs	r1, #93	; 0x5d
 8001c6c:	5c52      	ldrb	r2, [r2, r1]
 8001c6e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001c76:	2312      	movs	r3, #18
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	1cba      	adds	r2, r7, #2
 8001c7c:	8812      	ldrh	r2, [r2, #0]
 8001c7e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c80:	183b      	adds	r3, r7, r0
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d011      	beq.n	8001cac <HAL_SPI_TransmitReceive+0x84>
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	2382      	movs	r3, #130	; 0x82
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d107      	bne.n	8001ca2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_SPI_TransmitReceive+0x7a>
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d004      	beq.n	8001cac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001ca2:	2323      	movs	r3, #35	; 0x23
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001caa:	e191      	b.n	8001fd0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_SPI_TransmitReceive+0x98>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_SPI_TransmitReceive+0x98>
 8001cb8:	1cbb      	adds	r3, r7, #2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d104      	bne.n	8001cca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001cc0:	2323      	movs	r3, #35	; 0x23
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cc8:	e182      	b.n	8001fd0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	225d      	movs	r2, #93	; 0x5d
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d003      	beq.n	8001cde <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	225d      	movs	r2, #93	; 0x5d
 8001cda:	2105      	movs	r1, #5
 8001cdc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1cba      	adds	r2, r7, #2
 8001cee:	2146      	movs	r1, #70	; 0x46
 8001cf0:	8812      	ldrh	r2, [r2, #0]
 8001cf2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1cba      	adds	r2, r7, #2
 8001cf8:	2144      	movs	r1, #68	; 0x44
 8001cfa:	8812      	ldrh	r2, [r2, #0]
 8001cfc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1cba      	adds	r2, r7, #2
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1cba      	adds	r2, r7, #2
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	23e0      	movs	r3, #224	; 0xe0
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d908      	bls.n	8001d3e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	49ac      	ldr	r1, [pc, #688]	; (8001fe8 <HAL_SPI_TransmitReceive+0x3c0>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	e008      	b.n	8001d50 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	0149      	lsls	r1, r1, #5
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d007      	beq.n	8001d6e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	23e0      	movs	r3, #224	; 0xe0
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d800      	bhi.n	8001d7c <HAL_SPI_TransmitReceive+0x154>
 8001d7a:	e083      	b.n	8001e84 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x168>
 8001d84:	2312      	movs	r3, #18
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d000      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x168>
 8001d8e:	e06d      	b.n	8001e6c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	881a      	ldrh	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	1c9a      	adds	r2, r3, #2
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db4:	e05a      	b.n	8001e6c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d11b      	bne.n	8001dfc <HAL_SPI_TransmitReceive+0x1d4>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_SPI_TransmitReceive+0x1d4>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d113      	bne.n	8001dfc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	1c9a      	adds	r2, r3, #2
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11c      	bne.n	8001e44 <HAL_SPI_TransmitReceive+0x21c>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2246      	movs	r2, #70	; 0x46
 8001e0e:	5a9b      	ldrh	r3, [r3, r2]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	b292      	uxth	r2, r2
 8001e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	1c9a      	adds	r2, r3, #2
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2246      	movs	r2, #70	; 0x46
 8001e32:	5a9b      	ldrh	r3, [r3, r2]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2246      	movs	r2, #70	; 0x46
 8001e3e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e44:	f7fe fd3a 	bl	80008bc <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d80b      	bhi.n	8001e6c <HAL_SPI_TransmitReceive+0x244>
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	3301      	adds	r3, #1
 8001e58:	d008      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001e5a:	2323      	movs	r3, #35	; 0x23
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	2203      	movs	r2, #3
 8001e60:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	225d      	movs	r2, #93	; 0x5d
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
        goto error;
 8001e6a:	e0b1      	b.n	8001fd0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d19f      	bne.n	8001db6 <HAL_SPI_TransmitReceive+0x18e>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2246      	movs	r2, #70	; 0x46
 8001e7a:	5a9b      	ldrh	r3, [r3, r2]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d199      	bne.n	8001db6 <HAL_SPI_TransmitReceive+0x18e>
 8001e82:	e089      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_SPI_TransmitReceive+0x270>
 8001e8c:	2312      	movs	r3, #18
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d000      	beq.n	8001e98 <HAL_SPI_TransmitReceive+0x270>
 8001e96:	e074      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ebe:	e060      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d11c      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x2e0>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d017      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x2e0>
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d114      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d11e      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x32c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2246      	movs	r2, #70	; 0x46
 8001f1a:	5a9b      	ldrh	r3, [r3, r2]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d018      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	330c      	adds	r3, #12
 8001f28:	001a      	movs	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2246      	movs	r2, #70	; 0x46
 8001f42:	5a9b      	ldrh	r3, [r3, r2]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2246      	movs	r2, #70	; 0x46
 8001f4e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f50:	2301      	movs	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f54:	f7fe fcb2 	bl	80008bc <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d802      	bhi.n	8001f6a <HAL_SPI_TransmitReceive+0x342>
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	3301      	adds	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_SPI_TransmitReceive+0x348>
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d108      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001f70:	2323      	movs	r3, #35	; 0x23
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2203      	movs	r2, #3
 8001f76:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	225d      	movs	r2, #93	; 0x5d
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	5499      	strb	r1, [r3, r2]
        goto error;
 8001f80:	e026      	b.n	8001fd0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d199      	bne.n	8001ec0 <HAL_SPI_TransmitReceive+0x298>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2246      	movs	r2, #70	; 0x46
 8001f90:	5a9b      	ldrh	r3, [r3, r2]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d193      	bne.n	8001ec0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 f9b2 	bl	8002308 <SPI_EndRxTxTransaction>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001fa8:	2323      	movs	r3, #35	; 0x23
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8001fbe:	2323      	movs	r3, #35	; 0x23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e003      	b.n	8001fd0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	225d      	movs	r2, #93	; 0x5d
 8001fcc:	2101      	movs	r1, #1
 8001fce:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	225c      	movs	r2, #92	; 0x5c
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fd8:	2323      	movs	r3, #35	; 0x23
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	781b      	ldrb	r3, [r3, #0]
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b00a      	add	sp, #40	; 0x28
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	ffffefff 	.word	0xffffefff

08001fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ffc:	f7fe fc5e 	bl	80008bc <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800200c:	f7fe fc56 	bl	80008bc <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	015b      	lsls	r3, r3, #5
 800201a:	0d1b      	lsrs	r3, r3, #20
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	4353      	muls	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002022:	e058      	b.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	d055      	beq.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800202a:	f7fe fc47 	bl	80008bc <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	429a      	cmp	r2, r3
 8002038:	d902      	bls.n	8002040 <SPI_WaitFlagStateUntilTimeout+0x54>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d142      	bne.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	21e0      	movs	r1, #224	; 0xe0
 800204c:	438a      	bics	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	2382      	movs	r3, #130	; 0x82
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	429a      	cmp	r2, r3
 800205a:	d113      	bne.n	8002084 <SPI_WaitFlagStateUntilTimeout+0x98>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	019b      	lsls	r3, r3, #6
 800208c:	429a      	cmp	r2, r3
 800208e:	d110      	bne.n	80020b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	491a      	ldr	r1, [pc, #104]	; (8002104 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0189      	lsls	r1, r1, #6
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	225d      	movs	r2, #93	; 0x5d
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	225c      	movs	r2, #92	; 0x5c
 80020be:	2100      	movs	r1, #0
 80020c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e017      	b.n	80020f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	425a      	negs	r2, r3
 80020e6:	4153      	adcs	r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	001a      	movs	r2, r3
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d197      	bne.n	8002024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b008      	add	sp, #32
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000000 	.word	0x20000000
 8002104:	ffffdfff 	.word	0xffffdfff

08002108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002116:	2317      	movs	r3, #23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800211e:	f7fe fbcd 	bl	80008bc <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800212e:	f7fe fbc5 	bl	80008bc <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	0013      	movs	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	189b      	adds	r3, r3, r2
 8002148:	00da      	lsls	r2, r3, #3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	0d1b      	lsrs	r3, r3, #20
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	4353      	muls	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002154:	e068      	b.n	8002228 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	23c0      	movs	r3, #192	; 0xc0
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	429a      	cmp	r2, r3
 800215e:	d10a      	bne.n	8002176 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	2117      	movs	r1, #23
 800216e:	187b      	adds	r3, r7, r1
 8002170:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002172:	187b      	adds	r3, r7, r1
 8002174:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	d055      	beq.n	8002228 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800217c:	f7fe fb9e 	bl	80008bc <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	429a      	cmp	r2, r3
 800218a:	d902      	bls.n	8002192 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d142      	bne.n	8002218 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	21e0      	movs	r1, #224	; 0xe0
 800219e:	438a      	bics	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	2382      	movs	r3, #130	; 0x82
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d113      	bne.n	80021d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d005      	beq.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d107      	bne.n	80021d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	429a      	cmp	r2, r3
 80021e0:	d110      	bne.n	8002204 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0189      	lsls	r1, r1, #6
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	225d      	movs	r2, #93	; 0x5d
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	225c      	movs	r2, #92	; 0x5c
 8002210:	2100      	movs	r1, #0
 8002212:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e010      	b.n	800223a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3b01      	subs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	d18e      	bne.n	8002156 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b00a      	add	sp, #40	; 0x28
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	20000000 	.word	0x20000000
 8002248:	ffffdfff 	.word	0xffffdfff

0800224c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	2382      	movs	r3, #130	; 0x82
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	429a      	cmp	r2, r3
 8002262:	d113      	bne.n	800228c <SPI_EndRxTransaction+0x40>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	429a      	cmp	r2, r3
 800226e:	d005      	beq.n	800227c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2140      	movs	r1, #64	; 0x40
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	0013      	movs	r3, r2
 8002296:	2200      	movs	r2, #0
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	f7ff fea7 	bl	8001fec <SPI_WaitFlagStateUntilTimeout>
 800229e:	1e03      	subs	r3, r0, #0
 80022a0:	d007      	beq.n	80022b2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	2220      	movs	r2, #32
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e026      	b.n	8002300 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2382      	movs	r3, #130	; 0x82
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d11f      	bne.n	80022fe <SPI_EndRxTransaction+0xb2>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d005      	beq.n	80022d6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d113      	bne.n	80022fe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	00d9      	lsls	r1, r3, #3
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	0013      	movs	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	f7ff ff0f 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d007      	beq.n	80022fe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	2220      	movs	r2, #32
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e000      	b.n	8002300 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}

08002308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	23c0      	movs	r3, #192	; 0xc0
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	0013      	movs	r3, r2
 8002322:	2200      	movs	r2, #0
 8002324:	f7ff fef0 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d007      	beq.n	800233c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002330:	2220      	movs	r2, #32
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e027      	b.n	800238c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	0013      	movs	r3, r2
 8002346:	2200      	movs	r2, #0
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	f7ff fe4f 	bl	8001fec <SPI_WaitFlagStateUntilTimeout>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d007      	beq.n	8002362 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	2220      	movs	r2, #32
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e014      	b.n	800238c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	23c0      	movs	r3, #192	; 0xc0
 8002366:	00d9      	lsls	r1, r3, #3
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	0013      	movs	r3, r2
 8002370:	2200      	movs	r2, #0
 8002372:	f7ff fec9 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d007      	beq.n	800238a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237e:	2220      	movs	r2, #32
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e000      	b.n	800238c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e044      	b.n	8002430 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2278      	movs	r2, #120	; 0x78
 80023b2:	2100      	movs	r1, #0
 80023b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7fe f959 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2224      	movs	r2, #36	; 0x24
 80023c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f8d0 	bl	800257c <UART_SetConfig>
 80023dc:	0003      	movs	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e024      	b.n	8002430 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fa03 	bl	80027fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	490d      	ldr	r1, [pc, #52]	; (8002438 <HAL_UART_Init+0xa4>)
 8002402:	400a      	ands	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	212a      	movs	r1, #42	; 0x2a
 8002412:	438a      	bics	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fa9b 	bl	8002964 <UART_CheckIdleState>
 800242e:	0003      	movs	r3, r0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	ffffb7ff 	.word	0xffffb7ff

0800243c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	1dbb      	adds	r3, r7, #6
 800244a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002450:	2b20      	cmp	r3, #32
 8002452:	d000      	beq.n	8002456 <HAL_UART_Transmit+0x1a>
 8002454:	e08d      	b.n	8002572 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_UART_Transmit+0x28>
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e085      	b.n	8002574 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	429a      	cmp	r2, r3
 8002472:	d109      	bne.n	8002488 <HAL_UART_Transmit+0x4c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2201      	movs	r2, #1
 8002480:	4013      	ands	r3, r2
 8002482:	d001      	beq.n	8002488 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e075      	b.n	8002574 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2284      	movs	r2, #132	; 0x84
 800248c:	2100      	movs	r1, #0
 800248e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2221      	movs	r2, #33	; 0x21
 8002494:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002496:	f7fe fa11 	bl	80008bc <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1dba      	adds	r2, r7, #6
 80024a2:	2150      	movs	r1, #80	; 0x50
 80024a4:	8812      	ldrh	r2, [r2, #0]
 80024a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1dba      	adds	r2, r7, #6
 80024ac:	2152      	movs	r1, #82	; 0x52
 80024ae:	8812      	ldrh	r2, [r2, #0]
 80024b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d108      	bne.n	80024d0 <HAL_UART_Transmit+0x94>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e003      	b.n	80024d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024d8:	e030      	b.n	800253c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	0013      	movs	r3, r2
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	f000 fae4 	bl	8002ab4 <UART_WaitOnFlagUntilTimeout>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d004      	beq.n	80024fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e03c      	b.n	8002574 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	05d2      	lsls	r2, r2, #23
 800250a:	0dd2      	lsrs	r2, r2, #23
 800250c:	b292      	uxth	r2, r2
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	3302      	adds	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e008      	b.n	800252a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b292      	uxth	r2, r2
 8002522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2252      	movs	r2, #82	; 0x52
 800252e:	5a9b      	ldrh	r3, [r3, r2]
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b299      	uxth	r1, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2252      	movs	r2, #82	; 0x52
 800253a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2252      	movs	r2, #82	; 0x52
 8002540:	5a9b      	ldrh	r3, [r3, r2]
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1c8      	bne.n	80024da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	0013      	movs	r3, r2
 8002552:	2200      	movs	r2, #0
 8002554:	2140      	movs	r1, #64	; 0x40
 8002556:	f000 faad 	bl	8002ab4 <UART_WaitOnFlagUntilTimeout>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d004      	beq.n	8002568 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e005      	b.n	8002574 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
  }
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b008      	add	sp, #32
 800257a:	bd80      	pop	{r7, pc}

0800257c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002584:	231e      	movs	r3, #30
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a8d      	ldr	r2, [pc, #564]	; (80027e0 <UART_SetConfig+0x264>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a88      	ldr	r2, [pc, #544]	; (80027e4 <UART_SetConfig+0x268>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a7f      	ldr	r2, [pc, #508]	; (80027e8 <UART_SetConfig+0x26c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7b      	ldr	r2, [pc, #492]	; (80027ec <UART_SetConfig+0x270>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d127      	bne.n	8002652 <UART_SetConfig+0xd6>
 8002602:	4b7b      	ldr	r3, [pc, #492]	; (80027f0 <UART_SetConfig+0x274>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	2203      	movs	r2, #3
 8002608:	4013      	ands	r3, r2
 800260a:	2b03      	cmp	r3, #3
 800260c:	d00d      	beq.n	800262a <UART_SetConfig+0xae>
 800260e:	d81b      	bhi.n	8002648 <UART_SetConfig+0xcc>
 8002610:	2b02      	cmp	r3, #2
 8002612:	d014      	beq.n	800263e <UART_SetConfig+0xc2>
 8002614:	d818      	bhi.n	8002648 <UART_SetConfig+0xcc>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <UART_SetConfig+0xa4>
 800261a:	2b01      	cmp	r3, #1
 800261c:	d00a      	beq.n	8002634 <UART_SetConfig+0xb8>
 800261e:	e013      	b.n	8002648 <UART_SetConfig+0xcc>
 8002620:	231f      	movs	r3, #31
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e021      	b.n	800266e <UART_SetConfig+0xf2>
 800262a:	231f      	movs	r3, #31
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e01c      	b.n	800266e <UART_SetConfig+0xf2>
 8002634:	231f      	movs	r3, #31
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2204      	movs	r2, #4
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e017      	b.n	800266e <UART_SetConfig+0xf2>
 800263e:	231f      	movs	r3, #31
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2208      	movs	r2, #8
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e012      	b.n	800266e <UART_SetConfig+0xf2>
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2210      	movs	r2, #16
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e00d      	b.n	800266e <UART_SetConfig+0xf2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <UART_SetConfig+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d104      	bne.n	8002666 <UART_SetConfig+0xea>
 800265c:	231f      	movs	r3, #31
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e003      	b.n	800266e <UART_SetConfig+0xf2>
 8002666:	231f      	movs	r3, #31
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2210      	movs	r2, #16
 800266c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	429a      	cmp	r2, r3
 8002678:	d15c      	bne.n	8002734 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800267a:	231f      	movs	r3, #31
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d015      	beq.n	80026b0 <UART_SetConfig+0x134>
 8002684:	dc18      	bgt.n	80026b8 <UART_SetConfig+0x13c>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00d      	beq.n	80026a6 <UART_SetConfig+0x12a>
 800268a:	dc15      	bgt.n	80026b8 <UART_SetConfig+0x13c>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <UART_SetConfig+0x11a>
 8002690:	2b02      	cmp	r3, #2
 8002692:	d005      	beq.n	80026a0 <UART_SetConfig+0x124>
 8002694:	e010      	b.n	80026b8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002696:	f7fe ffc9 	bl	800162c <HAL_RCC_GetPCLK1Freq>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
        break;
 800269e:	e012      	b.n	80026c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026a0:	4b55      	ldr	r3, [pc, #340]	; (80027f8 <UART_SetConfig+0x27c>)
 80026a2:	61bb      	str	r3, [r7, #24]
        break;
 80026a4:	e00f      	b.n	80026c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a6:	f7fe ff61 	bl	800156c <HAL_RCC_GetSysClockFreq>
 80026aa:	0003      	movs	r3, r0
 80026ac:	61bb      	str	r3, [r7, #24]
        break;
 80026ae:	e00a      	b.n	80026c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	61bb      	str	r3, [r7, #24]
        break;
 80026b6:	e006      	b.n	80026c6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026bc:	231e      	movs	r3, #30
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
        break;
 80026c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d100      	bne.n	80026ce <UART_SetConfig+0x152>
 80026cc:	e07a      	b.n	80027c4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	005a      	lsls	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	18d2      	adds	r2, r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f7fd fd1b 	bl	800011c <__udivsi3>
 80026e6:	0003      	movs	r3, r0
 80026e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d91c      	bls.n	800272a <UART_SetConfig+0x1ae>
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	025b      	lsls	r3, r3, #9
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d217      	bcs.n	800272a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	200e      	movs	r0, #14
 8002700:	183b      	adds	r3, r7, r0
 8002702:	210f      	movs	r1, #15
 8002704:	438a      	bics	r2, r1
 8002706:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	b29b      	uxth	r3, r3
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	b299      	uxth	r1, r3
 8002714:	183b      	adds	r3, r7, r0
 8002716:	183a      	adds	r2, r7, r0
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	183a      	adds	r2, r7, r0
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	e04c      	b.n	80027c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800272a:	231e      	movs	r3, #30
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e047      	b.n	80027c4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002734:	231f      	movs	r3, #31
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d015      	beq.n	800276a <UART_SetConfig+0x1ee>
 800273e:	dc18      	bgt.n	8002772 <UART_SetConfig+0x1f6>
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00d      	beq.n	8002760 <UART_SetConfig+0x1e4>
 8002744:	dc15      	bgt.n	8002772 <UART_SetConfig+0x1f6>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <UART_SetConfig+0x1d4>
 800274a:	2b02      	cmp	r3, #2
 800274c:	d005      	beq.n	800275a <UART_SetConfig+0x1de>
 800274e:	e010      	b.n	8002772 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002750:	f7fe ff6c 	bl	800162c <HAL_RCC_GetPCLK1Freq>
 8002754:	0003      	movs	r3, r0
 8002756:	61bb      	str	r3, [r7, #24]
        break;
 8002758:	e012      	b.n	8002780 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800275a:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <UART_SetConfig+0x27c>)
 800275c:	61bb      	str	r3, [r7, #24]
        break;
 800275e:	e00f      	b.n	8002780 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002760:	f7fe ff04 	bl	800156c <HAL_RCC_GetSysClockFreq>
 8002764:	0003      	movs	r3, r0
 8002766:	61bb      	str	r3, [r7, #24]
        break;
 8002768:	e00a      	b.n	8002780 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	61bb      	str	r3, [r7, #24]
        break;
 8002770:	e006      	b.n	8002780 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002776:	231e      	movs	r3, #30
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
        break;
 800277e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01e      	beq.n	80027c4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	085a      	lsrs	r2, r3, #1
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	18d2      	adds	r2, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0019      	movs	r1, r3
 8002796:	0010      	movs	r0, r2
 8002798:	f7fd fcc0 	bl	800011c <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	d90a      	bls.n	80027bc <UART_SetConfig+0x240>
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d205      	bcs.n	80027bc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e003      	b.n	80027c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027bc:	231e      	movs	r3, #30
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80027d0:	231e      	movs	r3, #30
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	781b      	ldrb	r3, [r3, #0]
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b008      	add	sp, #32
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	ffff69f3 	.word	0xffff69f3
 80027e4:	ffffcfff 	.word	0xffffcfff
 80027e8:	fffff4ff 	.word	0xfffff4ff
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40004400 	.word	0x40004400
 80027f8:	007a1200 	.word	0x007a1200

080027fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d00b      	beq.n	8002826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a4a      	ldr	r2, [pc, #296]	; (8002940 <UART_AdvFeatureConfig+0x144>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d00b      	beq.n	8002848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a43      	ldr	r2, [pc, #268]	; (8002944 <UART_AdvFeatureConfig+0x148>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	d00b      	beq.n	800286a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <UART_AdvFeatureConfig+0x14c>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2208      	movs	r2, #8
 8002870:	4013      	ands	r3, r2
 8002872:	d00b      	beq.n	800288c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a34      	ldr	r2, [pc, #208]	; (800294c <UART_AdvFeatureConfig+0x150>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2210      	movs	r2, #16
 8002892:	4013      	ands	r3, r2
 8002894:	d00b      	beq.n	80028ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <UART_AdvFeatureConfig+0x154>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2220      	movs	r2, #32
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a25      	ldr	r2, [pc, #148]	; (8002954 <UART_AdvFeatureConfig+0x158>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	4013      	ands	r3, r2
 80028d8:	d01d      	beq.n	8002916 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <UART_AdvFeatureConfig+0x15c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	035b      	lsls	r3, r3, #13
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10b      	bne.n	8002916 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <UART_AdvFeatureConfig+0x160>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	4013      	ands	r3, r2
 800291e:	d00b      	beq.n	8002938 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <UART_AdvFeatureConfig+0x164>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}
 8002940:	fffdffff 	.word	0xfffdffff
 8002944:	fffeffff 	.word	0xfffeffff
 8002948:	fffbffff 	.word	0xfffbffff
 800294c:	ffff7fff 	.word	0xffff7fff
 8002950:	ffffefff 	.word	0xffffefff
 8002954:	ffffdfff 	.word	0xffffdfff
 8002958:	ffefffff 	.word	0xffefffff
 800295c:	ff9fffff 	.word	0xff9fffff
 8002960:	fff7ffff 	.word	0xfff7ffff

08002964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b092      	sub	sp, #72	; 0x48
 8002968:	af02      	add	r7, sp, #8
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2284      	movs	r2, #132	; 0x84
 8002970:	2100      	movs	r1, #0
 8002972:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002974:	f7fd ffa2 	bl	80008bc <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2208      	movs	r2, #8
 8002984:	4013      	ands	r3, r2
 8002986:	2b08      	cmp	r3, #8
 8002988:	d12c      	bne.n	80029e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0391      	lsls	r1, r2, #14
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4a46      	ldr	r2, [pc, #280]	; (8002aac <UART_CheckIdleState+0x148>)
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	f000 f88c 	bl	8002ab4 <UART_WaitOnFlagUntilTimeout>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d021      	beq.n	80029e4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8310 	mrs	r3, PRIMASK
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029aa:	2301      	movs	r3, #1
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	438a      	bics	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2278      	movs	r2, #120	; 0x78
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e05f      	b.n	8002aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d146      	bne.n	8002a80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	03d1      	lsls	r1, r2, #15
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <UART_CheckIdleState+0x148>)
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f000 f858 	bl	8002ab4 <UART_WaitOnFlagUntilTimeout>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d03b      	beq.n	8002a80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a08:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
 8002a12:	2301      	movs	r3, #1
 8002a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f383 8810 	msr	PRIMASK, r3
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4921      	ldr	r1, [pc, #132]	; (8002ab0 <UART_CheckIdleState+0x14c>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
 8002a44:	2301      	movs	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f383 8810 	msr	PRIMASK, r3
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	2120      	movs	r1, #32
 8002a72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2278      	movs	r2, #120	; 0x78
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e011      	b.n	8002aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2278      	movs	r2, #120	; 0x78
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b010      	add	sp, #64	; 0x40
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	01ffffff 	.word	0x01ffffff
 8002ab0:	fffffedf 	.word	0xfffffedf

08002ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	1dfb      	adds	r3, r7, #7
 8002ac2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac4:	e04b      	b.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	d048      	beq.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002acc:	f7fd fef6 	bl	80008bc <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d302      	bcc.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e04b      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	d035      	beq.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2208      	movs	r2, #8
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d111      	bne.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2208      	movs	r2, #8
 8002b06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f83c 	bl	8002b88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2284      	movs	r2, #132	; 0x84
 8002b14:	2108      	movs	r1, #8
 8002b16:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2278      	movs	r2, #120	; 0x78
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e02c      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	401a      	ands	r2, r3
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d112      	bne.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f81f 	bl	8002b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2284      	movs	r2, #132	; 0x84
 8002b4e:	2120      	movs	r1, #32
 8002b50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2278      	movs	r2, #120	; 0x78
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e00f      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	425a      	negs	r2, r3
 8002b6e:	4153      	adcs	r3, r2
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	001a      	movs	r2, r3
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d0a4      	beq.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	; 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b90:	f3ef 8310 	mrs	r3, PRIMASK
 8002b94:	617b      	str	r3, [r7, #20]
  return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4926      	ldr	r1, [pc, #152]	; (8002c4c <UART_EndRxTransfer+0xc4>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f383 8810 	msr	PRIMASK, r3
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc6:	623b      	str	r3, [r7, #32]
  return(result);
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
 8002bcc:	2301      	movs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f383 8810 	msr	PRIMASK, r3
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d118      	bne.n	8002c2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c06:	2301      	movs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2110      	movs	r1, #16
 8002c1e:	438a      	bics	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f383 8810 	msr	PRIMASK, r3
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	2120      	movs	r1, #32
 8002c34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b00e      	add	sp, #56	; 0x38
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	fffffedf 	.word	0xfffffedf

08002c50 <siprintf>:
 8002c50:	b40e      	push	{r1, r2, r3}
 8002c52:	b500      	push	{lr}
 8002c54:	490b      	ldr	r1, [pc, #44]	; (8002c84 <siprintf+0x34>)
 8002c56:	b09c      	sub	sp, #112	; 0x70
 8002c58:	ab1d      	add	r3, sp, #116	; 0x74
 8002c5a:	9002      	str	r0, [sp, #8]
 8002c5c:	9006      	str	r0, [sp, #24]
 8002c5e:	9107      	str	r1, [sp, #28]
 8002c60:	9104      	str	r1, [sp, #16]
 8002c62:	4809      	ldr	r0, [pc, #36]	; (8002c88 <siprintf+0x38>)
 8002c64:	4909      	ldr	r1, [pc, #36]	; (8002c8c <siprintf+0x3c>)
 8002c66:	cb04      	ldmia	r3!, {r2}
 8002c68:	9105      	str	r1, [sp, #20]
 8002c6a:	6800      	ldr	r0, [r0, #0]
 8002c6c:	a902      	add	r1, sp, #8
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	f000 f9a2 	bl	8002fb8 <_svfiprintf_r>
 8002c74:	2200      	movs	r2, #0
 8002c76:	9b02      	ldr	r3, [sp, #8]
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	b01c      	add	sp, #112	; 0x70
 8002c7c:	bc08      	pop	{r3}
 8002c7e:	b003      	add	sp, #12
 8002c80:	4718      	bx	r3
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	7fffffff 	.word	0x7fffffff
 8002c88:	20000058 	.word	0x20000058
 8002c8c:	ffff0208 	.word	0xffff0208

08002c90 <memset>:
 8002c90:	0003      	movs	r3, r0
 8002c92:	1882      	adds	r2, r0, r2
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <__errno>:
 8002ca0:	4b01      	ldr	r3, [pc, #4]	; (8002ca8 <__errno+0x8>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	4770      	bx	lr
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000058 	.word	0x20000058

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	2600      	movs	r6, #0
 8002cb0:	4c0c      	ldr	r4, [pc, #48]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb2:	4d0d      	ldr	r5, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb4:	1b64      	subs	r4, r4, r5
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	f000 fc6d 	bl	800359c <_init>
 8002cc2:	4c0a      	ldr	r4, [pc, #40]	; (8002cec <__libc_init_array+0x40>)
 8002cc4:	4d0a      	ldr	r5, [pc, #40]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	00b3      	lsls	r3, r6, #2
 8002cd2:	58eb      	ldr	r3, [r5, r3]
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	00b3      	lsls	r3, r6, #2
 8002cdc:	58eb      	ldr	r3, [r5, r3]
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	0800364c 	.word	0x0800364c
 8002ce8:	0800364c 	.word	0x0800364c
 8002cec:	08003650 	.word	0x08003650
 8002cf0:	0800364c 	.word	0x0800364c

08002cf4 <__retarget_lock_acquire_recursive>:
 8002cf4:	4770      	bx	lr

08002cf6 <__retarget_lock_release_recursive>:
 8002cf6:	4770      	bx	lr

08002cf8 <_free_r>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	0005      	movs	r5, r0
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	d010      	beq.n	8002d22 <_free_r+0x2a>
 8002d00:	1f0c      	subs	r4, r1, #4
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da00      	bge.n	8002d0a <_free_r+0x12>
 8002d08:	18e4      	adds	r4, r4, r3
 8002d0a:	0028      	movs	r0, r5
 8002d0c:	f000 f8e2 	bl	8002ed4 <__malloc_lock>
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <_free_r+0x90>)
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <_free_r+0x2c>
 8002d18:	6063      	str	r3, [r4, #4]
 8002d1a:	6014      	str	r4, [r2, #0]
 8002d1c:	0028      	movs	r0, r5
 8002d1e:	f000 f8e1 	bl	8002ee4 <__malloc_unlock>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	42a3      	cmp	r3, r4
 8002d26:	d908      	bls.n	8002d3a <_free_r+0x42>
 8002d28:	6820      	ldr	r0, [r4, #0]
 8002d2a:	1821      	adds	r1, r4, r0
 8002d2c:	428b      	cmp	r3, r1
 8002d2e:	d1f3      	bne.n	8002d18 <_free_r+0x20>
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	1809      	adds	r1, r1, r0
 8002d36:	6021      	str	r1, [r4, #0]
 8002d38:	e7ee      	b.n	8002d18 <_free_r+0x20>
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <_free_r+0x4e>
 8002d42:	42a3      	cmp	r3, r4
 8002d44:	d9f9      	bls.n	8002d3a <_free_r+0x42>
 8002d46:	6811      	ldr	r1, [r2, #0]
 8002d48:	1850      	adds	r0, r2, r1
 8002d4a:	42a0      	cmp	r0, r4
 8002d4c:	d10b      	bne.n	8002d66 <_free_r+0x6e>
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	1809      	adds	r1, r1, r0
 8002d52:	1850      	adds	r0, r2, r1
 8002d54:	6011      	str	r1, [r2, #0]
 8002d56:	4283      	cmp	r3, r0
 8002d58:	d1e0      	bne.n	8002d1c <_free_r+0x24>
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	1841      	adds	r1, r0, r1
 8002d60:	6011      	str	r1, [r2, #0]
 8002d62:	6053      	str	r3, [r2, #4]
 8002d64:	e7da      	b.n	8002d1c <_free_r+0x24>
 8002d66:	42a0      	cmp	r0, r4
 8002d68:	d902      	bls.n	8002d70 <_free_r+0x78>
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	602b      	str	r3, [r5, #0]
 8002d6e:	e7d5      	b.n	8002d1c <_free_r+0x24>
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	1821      	adds	r1, r4, r0
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d103      	bne.n	8002d80 <_free_r+0x88>
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	1809      	adds	r1, r1, r0
 8002d7e:	6021      	str	r1, [r4, #0]
 8002d80:	6063      	str	r3, [r4, #4]
 8002d82:	6054      	str	r4, [r2, #4]
 8002d84:	e7ca      	b.n	8002d1c <_free_r+0x24>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	200002ac 	.word	0x200002ac

08002d8c <sbrk_aligned>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4e0f      	ldr	r6, [pc, #60]	; (8002dcc <sbrk_aligned+0x40>)
 8002d90:	000d      	movs	r5, r1
 8002d92:	6831      	ldr	r1, [r6, #0]
 8002d94:	0004      	movs	r4, r0
 8002d96:	2900      	cmp	r1, #0
 8002d98:	d102      	bne.n	8002da0 <sbrk_aligned+0x14>
 8002d9a:	f000 fba1 	bl	80034e0 <_sbrk_r>
 8002d9e:	6030      	str	r0, [r6, #0]
 8002da0:	0029      	movs	r1, r5
 8002da2:	0020      	movs	r0, r4
 8002da4:	f000 fb9c 	bl	80034e0 <_sbrk_r>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d00a      	beq.n	8002dc2 <sbrk_aligned+0x36>
 8002dac:	2303      	movs	r3, #3
 8002dae:	1cc5      	adds	r5, r0, #3
 8002db0:	439d      	bics	r5, r3
 8002db2:	42a8      	cmp	r0, r5
 8002db4:	d007      	beq.n	8002dc6 <sbrk_aligned+0x3a>
 8002db6:	1a29      	subs	r1, r5, r0
 8002db8:	0020      	movs	r0, r4
 8002dba:	f000 fb91 	bl	80034e0 <_sbrk_r>
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d101      	bne.n	8002dc6 <sbrk_aligned+0x3a>
 8002dc2:	2501      	movs	r5, #1
 8002dc4:	426d      	negs	r5, r5
 8002dc6:	0028      	movs	r0, r5
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	200002b0 	.word	0x200002b0

08002dd0 <_malloc_r>:
 8002dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	1ccb      	adds	r3, r1, #3
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	3308      	adds	r3, #8
 8002dda:	0006      	movs	r6, r0
 8002ddc:	001f      	movs	r7, r3
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d238      	bcs.n	8002e54 <_malloc_r+0x84>
 8002de2:	270c      	movs	r7, #12
 8002de4:	42b9      	cmp	r1, r7
 8002de6:	d837      	bhi.n	8002e58 <_malloc_r+0x88>
 8002de8:	0030      	movs	r0, r6
 8002dea:	f000 f873 	bl	8002ed4 <__malloc_lock>
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <_malloc_r+0x100>)
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	001c      	movs	r4, r3
 8002df6:	2c00      	cmp	r4, #0
 8002df8:	d133      	bne.n	8002e62 <_malloc_r+0x92>
 8002dfa:	0039      	movs	r1, r7
 8002dfc:	0030      	movs	r0, r6
 8002dfe:	f7ff ffc5 	bl	8002d8c <sbrk_aligned>
 8002e02:	0004      	movs	r4, r0
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d15e      	bne.n	8002ec6 <_malloc_r+0xf6>
 8002e08:	9b00      	ldr	r3, [sp, #0]
 8002e0a:	681c      	ldr	r4, [r3, #0]
 8002e0c:	0025      	movs	r5, r4
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	d14e      	bne.n	8002eb0 <_malloc_r+0xe0>
 8002e12:	2c00      	cmp	r4, #0
 8002e14:	d051      	beq.n	8002eba <_malloc_r+0xea>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	0029      	movs	r1, r5
 8002e1a:	18e3      	adds	r3, r4, r3
 8002e1c:	0030      	movs	r0, r6
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	f000 fb5e 	bl	80034e0 <_sbrk_r>
 8002e24:	9b01      	ldr	r3, [sp, #4]
 8002e26:	4283      	cmp	r3, r0
 8002e28:	d147      	bne.n	8002eba <_malloc_r+0xea>
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	0030      	movs	r0, r6
 8002e2e:	1aff      	subs	r7, r7, r3
 8002e30:	0039      	movs	r1, r7
 8002e32:	f7ff ffab 	bl	8002d8c <sbrk_aligned>
 8002e36:	3001      	adds	r0, #1
 8002e38:	d03f      	beq.n	8002eba <_malloc_r+0xea>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	19db      	adds	r3, r3, r7
 8002e3e:	6023      	str	r3, [r4, #0]
 8002e40:	9b00      	ldr	r3, [sp, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d040      	beq.n	8002eca <_malloc_r+0xfa>
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	42a2      	cmp	r2, r4
 8002e4c:	d133      	bne.n	8002eb6 <_malloc_r+0xe6>
 8002e4e:	2200      	movs	r2, #0
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	e014      	b.n	8002e7e <_malloc_r+0xae>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dac5      	bge.n	8002de4 <_malloc_r+0x14>
 8002e58:	230c      	movs	r3, #12
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	6033      	str	r3, [r6, #0]
 8002e5e:	0028      	movs	r0, r5
 8002e60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e62:	6821      	ldr	r1, [r4, #0]
 8002e64:	1bc9      	subs	r1, r1, r7
 8002e66:	d420      	bmi.n	8002eaa <_malloc_r+0xda>
 8002e68:	290b      	cmp	r1, #11
 8002e6a:	d918      	bls.n	8002e9e <_malloc_r+0xce>
 8002e6c:	19e2      	adds	r2, r4, r7
 8002e6e:	6027      	str	r7, [r4, #0]
 8002e70:	42a3      	cmp	r3, r4
 8002e72:	d112      	bne.n	8002e9a <_malloc_r+0xca>
 8002e74:	9b00      	ldr	r3, [sp, #0]
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	6863      	ldr	r3, [r4, #4]
 8002e7a:	6011      	str	r1, [r2, #0]
 8002e7c:	6053      	str	r3, [r2, #4]
 8002e7e:	0030      	movs	r0, r6
 8002e80:	0025      	movs	r5, r4
 8002e82:	f000 f82f 	bl	8002ee4 <__malloc_unlock>
 8002e86:	2207      	movs	r2, #7
 8002e88:	350b      	adds	r5, #11
 8002e8a:	1d23      	adds	r3, r4, #4
 8002e8c:	4395      	bics	r5, r2
 8002e8e:	1aea      	subs	r2, r5, r3
 8002e90:	429d      	cmp	r5, r3
 8002e92:	d0e4      	beq.n	8002e5e <_malloc_r+0x8e>
 8002e94:	1b5b      	subs	r3, r3, r5
 8002e96:	50a3      	str	r3, [r4, r2]
 8002e98:	e7e1      	b.n	8002e5e <_malloc_r+0x8e>
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	e7ec      	b.n	8002e78 <_malloc_r+0xa8>
 8002e9e:	6862      	ldr	r2, [r4, #4]
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	d1d5      	bne.n	8002e50 <_malloc_r+0x80>
 8002ea4:	9b00      	ldr	r3, [sp, #0]
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e7e9      	b.n	8002e7e <_malloc_r+0xae>
 8002eaa:	0023      	movs	r3, r4
 8002eac:	6864      	ldr	r4, [r4, #4]
 8002eae:	e7a2      	b.n	8002df6 <_malloc_r+0x26>
 8002eb0:	002c      	movs	r4, r5
 8002eb2:	686d      	ldr	r5, [r5, #4]
 8002eb4:	e7ab      	b.n	8002e0e <_malloc_r+0x3e>
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	e7c4      	b.n	8002e44 <_malloc_r+0x74>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	0030      	movs	r0, r6
 8002ebe:	6033      	str	r3, [r6, #0]
 8002ec0:	f000 f810 	bl	8002ee4 <__malloc_unlock>
 8002ec4:	e7cb      	b.n	8002e5e <_malloc_r+0x8e>
 8002ec6:	6027      	str	r7, [r4, #0]
 8002ec8:	e7d9      	b.n	8002e7e <_malloc_r+0xae>
 8002eca:	605b      	str	r3, [r3, #4]
 8002ecc:	deff      	udf	#255	; 0xff
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	200002ac 	.word	0x200002ac

08002ed4 <__malloc_lock>:
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <__malloc_lock+0xc>)
 8002ed8:	f7ff ff0c 	bl	8002cf4 <__retarget_lock_acquire_recursive>
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	200002a8 	.word	0x200002a8

08002ee4 <__malloc_unlock>:
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <__malloc_unlock+0xc>)
 8002ee8:	f7ff ff05 	bl	8002cf6 <__retarget_lock_release_recursive>
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	200002a8 	.word	0x200002a8

08002ef4 <__ssputs_r>:
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	9203      	str	r2, [sp, #12]
 8002efc:	688e      	ldr	r6, [r1, #8]
 8002efe:	9a01      	ldr	r2, [sp, #4]
 8002f00:	0007      	movs	r7, r0
 8002f02:	000c      	movs	r4, r1
 8002f04:	680b      	ldr	r3, [r1, #0]
 8002f06:	4296      	cmp	r6, r2
 8002f08:	d831      	bhi.n	8002f6e <__ssputs_r+0x7a>
 8002f0a:	898a      	ldrh	r2, [r1, #12]
 8002f0c:	2190      	movs	r1, #144	; 0x90
 8002f0e:	00c9      	lsls	r1, r1, #3
 8002f10:	420a      	tst	r2, r1
 8002f12:	d029      	beq.n	8002f68 <__ssputs_r+0x74>
 8002f14:	2003      	movs	r0, #3
 8002f16:	6921      	ldr	r1, [r4, #16]
 8002f18:	1a5b      	subs	r3, r3, r1
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	6963      	ldr	r3, [r4, #20]
 8002f1e:	4343      	muls	r3, r0
 8002f20:	0fdd      	lsrs	r5, r3, #31
 8002f22:	18ed      	adds	r5, r5, r3
 8002f24:	9b01      	ldr	r3, [sp, #4]
 8002f26:	9802      	ldr	r0, [sp, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	181b      	adds	r3, r3, r0
 8002f2c:	106d      	asrs	r5, r5, #1
 8002f2e:	42ab      	cmp	r3, r5
 8002f30:	d900      	bls.n	8002f34 <__ssputs_r+0x40>
 8002f32:	001d      	movs	r5, r3
 8002f34:	0552      	lsls	r2, r2, #21
 8002f36:	d529      	bpl.n	8002f8c <__ssputs_r+0x98>
 8002f38:	0029      	movs	r1, r5
 8002f3a:	0038      	movs	r0, r7
 8002f3c:	f7ff ff48 	bl	8002dd0 <_malloc_r>
 8002f40:	1e06      	subs	r6, r0, #0
 8002f42:	d02d      	beq.n	8002fa0 <__ssputs_r+0xac>
 8002f44:	9a02      	ldr	r2, [sp, #8]
 8002f46:	6921      	ldr	r1, [r4, #16]
 8002f48:	f000 fae7 	bl	800351a <memcpy>
 8002f4c:	89a2      	ldrh	r2, [r4, #12]
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <__ssputs_r+0xc0>)
 8002f50:	401a      	ands	r2, r3
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	4313      	orrs	r3, r2
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	9b02      	ldr	r3, [sp, #8]
 8002f5a:	6126      	str	r6, [r4, #16]
 8002f5c:	18f6      	adds	r6, r6, r3
 8002f5e:	6026      	str	r6, [r4, #0]
 8002f60:	6165      	str	r5, [r4, #20]
 8002f62:	9e01      	ldr	r6, [sp, #4]
 8002f64:	1aed      	subs	r5, r5, r3
 8002f66:	60a5      	str	r5, [r4, #8]
 8002f68:	9b01      	ldr	r3, [sp, #4]
 8002f6a:	429e      	cmp	r6, r3
 8002f6c:	d900      	bls.n	8002f70 <__ssputs_r+0x7c>
 8002f6e:	9e01      	ldr	r6, [sp, #4]
 8002f70:	0032      	movs	r2, r6
 8002f72:	9903      	ldr	r1, [sp, #12]
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	f000 fa9f 	bl	80034b8 <memmove>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	68a3      	ldr	r3, [r4, #8]
 8002f7e:	1b9b      	subs	r3, r3, r6
 8002f80:	60a3      	str	r3, [r4, #8]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	199b      	adds	r3, r3, r6
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	b005      	add	sp, #20
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	002a      	movs	r2, r5
 8002f8e:	0038      	movs	r0, r7
 8002f90:	f000 facc 	bl	800352c <_realloc_r>
 8002f94:	1e06      	subs	r6, r0, #0
 8002f96:	d1df      	bne.n	8002f58 <__ssputs_r+0x64>
 8002f98:	0038      	movs	r0, r7
 8002f9a:	6921      	ldr	r1, [r4, #16]
 8002f9c:	f7ff feac 	bl	8002cf8 <_free_r>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	89a2      	ldrh	r2, [r4, #12]
 8002fa8:	3334      	adds	r3, #52	; 0x34
 8002faa:	4313      	orrs	r3, r2
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	4240      	negs	r0, r0
 8002fb0:	e7ea      	b.n	8002f88 <__ssputs_r+0x94>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	fffffb7f 	.word	0xfffffb7f

08002fb8 <_svfiprintf_r>:
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b0a1      	sub	sp, #132	; 0x84
 8002fbc:	9003      	str	r0, [sp, #12]
 8002fbe:	001d      	movs	r5, r3
 8002fc0:	898b      	ldrh	r3, [r1, #12]
 8002fc2:	000f      	movs	r7, r1
 8002fc4:	0016      	movs	r6, r2
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	d511      	bpl.n	8002fee <_svfiprintf_r+0x36>
 8002fca:	690b      	ldr	r3, [r1, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10e      	bne.n	8002fee <_svfiprintf_r+0x36>
 8002fd0:	2140      	movs	r1, #64	; 0x40
 8002fd2:	f7ff fefd 	bl	8002dd0 <_malloc_r>
 8002fd6:	6038      	str	r0, [r7, #0]
 8002fd8:	6138      	str	r0, [r7, #16]
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d105      	bne.n	8002fea <_svfiprintf_r+0x32>
 8002fde:	230c      	movs	r3, #12
 8002fe0:	9a03      	ldr	r2, [sp, #12]
 8002fe2:	3801      	subs	r0, #1
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	b021      	add	sp, #132	; 0x84
 8002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	ac08      	add	r4, sp, #32
 8002ff2:	6163      	str	r3, [r4, #20]
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	7663      	strb	r3, [r4, #25]
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	76a3      	strb	r3, [r4, #26]
 8002ffc:	9507      	str	r5, [sp, #28]
 8002ffe:	0035      	movs	r5, r6
 8003000:	782b      	ldrb	r3, [r5, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <_svfiprintf_r+0x52>
 8003006:	2b25      	cmp	r3, #37	; 0x25
 8003008:	d148      	bne.n	800309c <_svfiprintf_r+0xe4>
 800300a:	1bab      	subs	r3, r5, r6
 800300c:	9305      	str	r3, [sp, #20]
 800300e:	42b5      	cmp	r5, r6
 8003010:	d00b      	beq.n	800302a <_svfiprintf_r+0x72>
 8003012:	0032      	movs	r2, r6
 8003014:	0039      	movs	r1, r7
 8003016:	9803      	ldr	r0, [sp, #12]
 8003018:	f7ff ff6c 	bl	8002ef4 <__ssputs_r>
 800301c:	3001      	adds	r0, #1
 800301e:	d100      	bne.n	8003022 <_svfiprintf_r+0x6a>
 8003020:	e0af      	b.n	8003182 <_svfiprintf_r+0x1ca>
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	9a05      	ldr	r2, [sp, #20]
 8003026:	189b      	adds	r3, r3, r2
 8003028:	6163      	str	r3, [r4, #20]
 800302a:	782b      	ldrb	r3, [r5, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d100      	bne.n	8003032 <_svfiprintf_r+0x7a>
 8003030:	e0a7      	b.n	8003182 <_svfiprintf_r+0x1ca>
 8003032:	2201      	movs	r2, #1
 8003034:	2300      	movs	r3, #0
 8003036:	4252      	negs	r2, r2
 8003038:	6062      	str	r2, [r4, #4]
 800303a:	a904      	add	r1, sp, #16
 800303c:	3254      	adds	r2, #84	; 0x54
 800303e:	1852      	adds	r2, r2, r1
 8003040:	1c6e      	adds	r6, r5, #1
 8003042:	6023      	str	r3, [r4, #0]
 8003044:	60e3      	str	r3, [r4, #12]
 8003046:	60a3      	str	r3, [r4, #8]
 8003048:	7013      	strb	r3, [r2, #0]
 800304a:	65a3      	str	r3, [r4, #88]	; 0x58
 800304c:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <_svfiprintf_r+0x1ec>)
 800304e:	2205      	movs	r2, #5
 8003050:	0018      	movs	r0, r3
 8003052:	7831      	ldrb	r1, [r6, #0]
 8003054:	9305      	str	r3, [sp, #20]
 8003056:	f000 fa55 	bl	8003504 <memchr>
 800305a:	1c75      	adds	r5, r6, #1
 800305c:	2800      	cmp	r0, #0
 800305e:	d11f      	bne.n	80030a0 <_svfiprintf_r+0xe8>
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	06d3      	lsls	r3, r2, #27
 8003064:	d504      	bpl.n	8003070 <_svfiprintf_r+0xb8>
 8003066:	2353      	movs	r3, #83	; 0x53
 8003068:	a904      	add	r1, sp, #16
 800306a:	185b      	adds	r3, r3, r1
 800306c:	2120      	movs	r1, #32
 800306e:	7019      	strb	r1, [r3, #0]
 8003070:	0713      	lsls	r3, r2, #28
 8003072:	d504      	bpl.n	800307e <_svfiprintf_r+0xc6>
 8003074:	2353      	movs	r3, #83	; 0x53
 8003076:	a904      	add	r1, sp, #16
 8003078:	185b      	adds	r3, r3, r1
 800307a:	212b      	movs	r1, #43	; 0x2b
 800307c:	7019      	strb	r1, [r3, #0]
 800307e:	7833      	ldrb	r3, [r6, #0]
 8003080:	2b2a      	cmp	r3, #42	; 0x2a
 8003082:	d016      	beq.n	80030b2 <_svfiprintf_r+0xfa>
 8003084:	0035      	movs	r5, r6
 8003086:	2100      	movs	r1, #0
 8003088:	200a      	movs	r0, #10
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	782a      	ldrb	r2, [r5, #0]
 800308e:	1c6e      	adds	r6, r5, #1
 8003090:	3a30      	subs	r2, #48	; 0x30
 8003092:	2a09      	cmp	r2, #9
 8003094:	d94e      	bls.n	8003134 <_svfiprintf_r+0x17c>
 8003096:	2900      	cmp	r1, #0
 8003098:	d111      	bne.n	80030be <_svfiprintf_r+0x106>
 800309a:	e017      	b.n	80030cc <_svfiprintf_r+0x114>
 800309c:	3501      	adds	r5, #1
 800309e:	e7af      	b.n	8003000 <_svfiprintf_r+0x48>
 80030a0:	9b05      	ldr	r3, [sp, #20]
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	1ac0      	subs	r0, r0, r3
 80030a6:	2301      	movs	r3, #1
 80030a8:	4083      	lsls	r3, r0
 80030aa:	4313      	orrs	r3, r2
 80030ac:	002e      	movs	r6, r5
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	e7cc      	b.n	800304c <_svfiprintf_r+0x94>
 80030b2:	9b07      	ldr	r3, [sp, #28]
 80030b4:	1d19      	adds	r1, r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	9107      	str	r1, [sp, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db01      	blt.n	80030c2 <_svfiprintf_r+0x10a>
 80030be:	930b      	str	r3, [sp, #44]	; 0x2c
 80030c0:	e004      	b.n	80030cc <_svfiprintf_r+0x114>
 80030c2:	425b      	negs	r3, r3
 80030c4:	60e3      	str	r3, [r4, #12]
 80030c6:	2302      	movs	r3, #2
 80030c8:	4313      	orrs	r3, r2
 80030ca:	6023      	str	r3, [r4, #0]
 80030cc:	782b      	ldrb	r3, [r5, #0]
 80030ce:	2b2e      	cmp	r3, #46	; 0x2e
 80030d0:	d10a      	bne.n	80030e8 <_svfiprintf_r+0x130>
 80030d2:	786b      	ldrb	r3, [r5, #1]
 80030d4:	2b2a      	cmp	r3, #42	; 0x2a
 80030d6:	d135      	bne.n	8003144 <_svfiprintf_r+0x18c>
 80030d8:	9b07      	ldr	r3, [sp, #28]
 80030da:	3502      	adds	r5, #2
 80030dc:	1d1a      	adds	r2, r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	9207      	str	r2, [sp, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db2b      	blt.n	800313e <_svfiprintf_r+0x186>
 80030e6:	9309      	str	r3, [sp, #36]	; 0x24
 80030e8:	4e2f      	ldr	r6, [pc, #188]	; (80031a8 <_svfiprintf_r+0x1f0>)
 80030ea:	2203      	movs	r2, #3
 80030ec:	0030      	movs	r0, r6
 80030ee:	7829      	ldrb	r1, [r5, #0]
 80030f0:	f000 fa08 	bl	8003504 <memchr>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d006      	beq.n	8003106 <_svfiprintf_r+0x14e>
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	1b80      	subs	r0, r0, r6
 80030fc:	4083      	lsls	r3, r0
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	3501      	adds	r5, #1
 8003102:	4313      	orrs	r3, r2
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	7829      	ldrb	r1, [r5, #0]
 8003108:	2206      	movs	r2, #6
 800310a:	4828      	ldr	r0, [pc, #160]	; (80031ac <_svfiprintf_r+0x1f4>)
 800310c:	1c6e      	adds	r6, r5, #1
 800310e:	7621      	strb	r1, [r4, #24]
 8003110:	f000 f9f8 	bl	8003504 <memchr>
 8003114:	2800      	cmp	r0, #0
 8003116:	d03c      	beq.n	8003192 <_svfiprintf_r+0x1da>
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <_svfiprintf_r+0x1f8>)
 800311a:	2b00      	cmp	r3, #0
 800311c:	d125      	bne.n	800316a <_svfiprintf_r+0x1b2>
 800311e:	2207      	movs	r2, #7
 8003120:	9b07      	ldr	r3, [sp, #28]
 8003122:	3307      	adds	r3, #7
 8003124:	4393      	bics	r3, r2
 8003126:	3308      	adds	r3, #8
 8003128:	9307      	str	r3, [sp, #28]
 800312a:	6963      	ldr	r3, [r4, #20]
 800312c:	9a04      	ldr	r2, [sp, #16]
 800312e:	189b      	adds	r3, r3, r2
 8003130:	6163      	str	r3, [r4, #20]
 8003132:	e764      	b.n	8002ffe <_svfiprintf_r+0x46>
 8003134:	4343      	muls	r3, r0
 8003136:	0035      	movs	r5, r6
 8003138:	2101      	movs	r1, #1
 800313a:	189b      	adds	r3, r3, r2
 800313c:	e7a6      	b.n	800308c <_svfiprintf_r+0xd4>
 800313e:	2301      	movs	r3, #1
 8003140:	425b      	negs	r3, r3
 8003142:	e7d0      	b.n	80030e6 <_svfiprintf_r+0x12e>
 8003144:	2300      	movs	r3, #0
 8003146:	200a      	movs	r0, #10
 8003148:	001a      	movs	r2, r3
 800314a:	3501      	adds	r5, #1
 800314c:	6063      	str	r3, [r4, #4]
 800314e:	7829      	ldrb	r1, [r5, #0]
 8003150:	1c6e      	adds	r6, r5, #1
 8003152:	3930      	subs	r1, #48	; 0x30
 8003154:	2909      	cmp	r1, #9
 8003156:	d903      	bls.n	8003160 <_svfiprintf_r+0x1a8>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0c5      	beq.n	80030e8 <_svfiprintf_r+0x130>
 800315c:	9209      	str	r2, [sp, #36]	; 0x24
 800315e:	e7c3      	b.n	80030e8 <_svfiprintf_r+0x130>
 8003160:	4342      	muls	r2, r0
 8003162:	0035      	movs	r5, r6
 8003164:	2301      	movs	r3, #1
 8003166:	1852      	adds	r2, r2, r1
 8003168:	e7f1      	b.n	800314e <_svfiprintf_r+0x196>
 800316a:	aa07      	add	r2, sp, #28
 800316c:	9200      	str	r2, [sp, #0]
 800316e:	0021      	movs	r1, r4
 8003170:	003a      	movs	r2, r7
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <_svfiprintf_r+0x1fc>)
 8003174:	9803      	ldr	r0, [sp, #12]
 8003176:	e000      	b.n	800317a <_svfiprintf_r+0x1c2>
 8003178:	bf00      	nop
 800317a:	9004      	str	r0, [sp, #16]
 800317c:	9b04      	ldr	r3, [sp, #16]
 800317e:	3301      	adds	r3, #1
 8003180:	d1d3      	bne.n	800312a <_svfiprintf_r+0x172>
 8003182:	89bb      	ldrh	r3, [r7, #12]
 8003184:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003186:	065b      	lsls	r3, r3, #25
 8003188:	d400      	bmi.n	800318c <_svfiprintf_r+0x1d4>
 800318a:	e72c      	b.n	8002fe6 <_svfiprintf_r+0x2e>
 800318c:	2001      	movs	r0, #1
 800318e:	4240      	negs	r0, r0
 8003190:	e729      	b.n	8002fe6 <_svfiprintf_r+0x2e>
 8003192:	aa07      	add	r2, sp, #28
 8003194:	9200      	str	r2, [sp, #0]
 8003196:	0021      	movs	r1, r4
 8003198:	003a      	movs	r2, r7
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <_svfiprintf_r+0x1fc>)
 800319c:	9803      	ldr	r0, [sp, #12]
 800319e:	f000 f87b 	bl	8003298 <_printf_i>
 80031a2:	e7ea      	b.n	800317a <_svfiprintf_r+0x1c2>
 80031a4:	08003618 	.word	0x08003618
 80031a8:	0800361e 	.word	0x0800361e
 80031ac:	08003622 	.word	0x08003622
 80031b0:	00000000 	.word	0x00000000
 80031b4:	08002ef5 	.word	0x08002ef5

080031b8 <_printf_common>:
 80031b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ba:	0016      	movs	r6, r2
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	688a      	ldr	r2, [r1, #8]
 80031c0:	690b      	ldr	r3, [r1, #16]
 80031c2:	000c      	movs	r4, r1
 80031c4:	9000      	str	r0, [sp, #0]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	da00      	bge.n	80031cc <_printf_common+0x14>
 80031ca:	0013      	movs	r3, r2
 80031cc:	0022      	movs	r2, r4
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	3243      	adds	r2, #67	; 0x43
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d001      	beq.n	80031dc <_printf_common+0x24>
 80031d8:	3301      	adds	r3, #1
 80031da:	6033      	str	r3, [r6, #0]
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	d502      	bpl.n	80031e8 <_printf_common+0x30>
 80031e2:	6833      	ldr	r3, [r6, #0]
 80031e4:	3302      	adds	r3, #2
 80031e6:	6033      	str	r3, [r6, #0]
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	2306      	movs	r3, #6
 80031ec:	0015      	movs	r5, r2
 80031ee:	401d      	ands	r5, r3
 80031f0:	421a      	tst	r2, r3
 80031f2:	d027      	beq.n	8003244 <_printf_common+0x8c>
 80031f4:	0023      	movs	r3, r4
 80031f6:	3343      	adds	r3, #67	; 0x43
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	1e5a      	subs	r2, r3, #1
 80031fc:	4193      	sbcs	r3, r2
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	0692      	lsls	r2, r2, #26
 8003202:	d430      	bmi.n	8003266 <_printf_common+0xae>
 8003204:	0022      	movs	r2, r4
 8003206:	9901      	ldr	r1, [sp, #4]
 8003208:	9800      	ldr	r0, [sp, #0]
 800320a:	9d08      	ldr	r5, [sp, #32]
 800320c:	3243      	adds	r2, #67	; 0x43
 800320e:	47a8      	blx	r5
 8003210:	3001      	adds	r0, #1
 8003212:	d025      	beq.n	8003260 <_printf_common+0xa8>
 8003214:	2206      	movs	r2, #6
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	2500      	movs	r5, #0
 800321a:	4013      	ands	r3, r2
 800321c:	2b04      	cmp	r3, #4
 800321e:	d105      	bne.n	800322c <_printf_common+0x74>
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	68e5      	ldr	r5, [r4, #12]
 8003224:	1aed      	subs	r5, r5, r3
 8003226:	43eb      	mvns	r3, r5
 8003228:	17db      	asrs	r3, r3, #31
 800322a:	401d      	ands	r5, r3
 800322c:	68a3      	ldr	r3, [r4, #8]
 800322e:	6922      	ldr	r2, [r4, #16]
 8003230:	4293      	cmp	r3, r2
 8003232:	dd01      	ble.n	8003238 <_printf_common+0x80>
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	18ed      	adds	r5, r5, r3
 8003238:	2600      	movs	r6, #0
 800323a:	42b5      	cmp	r5, r6
 800323c:	d120      	bne.n	8003280 <_printf_common+0xc8>
 800323e:	2000      	movs	r0, #0
 8003240:	e010      	b.n	8003264 <_printf_common+0xac>
 8003242:	3501      	adds	r5, #1
 8003244:	68e3      	ldr	r3, [r4, #12]
 8003246:	6832      	ldr	r2, [r6, #0]
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	42ab      	cmp	r3, r5
 800324c:	ddd2      	ble.n	80031f4 <_printf_common+0x3c>
 800324e:	0022      	movs	r2, r4
 8003250:	2301      	movs	r3, #1
 8003252:	9901      	ldr	r1, [sp, #4]
 8003254:	9800      	ldr	r0, [sp, #0]
 8003256:	9f08      	ldr	r7, [sp, #32]
 8003258:	3219      	adds	r2, #25
 800325a:	47b8      	blx	r7
 800325c:	3001      	adds	r0, #1
 800325e:	d1f0      	bne.n	8003242 <_printf_common+0x8a>
 8003260:	2001      	movs	r0, #1
 8003262:	4240      	negs	r0, r0
 8003264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003266:	2030      	movs	r0, #48	; 0x30
 8003268:	18e1      	adds	r1, r4, r3
 800326a:	3143      	adds	r1, #67	; 0x43
 800326c:	7008      	strb	r0, [r1, #0]
 800326e:	0021      	movs	r1, r4
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	3145      	adds	r1, #69	; 0x45
 8003274:	7809      	ldrb	r1, [r1, #0]
 8003276:	18a2      	adds	r2, r4, r2
 8003278:	3243      	adds	r2, #67	; 0x43
 800327a:	3302      	adds	r3, #2
 800327c:	7011      	strb	r1, [r2, #0]
 800327e:	e7c1      	b.n	8003204 <_printf_common+0x4c>
 8003280:	0022      	movs	r2, r4
 8003282:	2301      	movs	r3, #1
 8003284:	9901      	ldr	r1, [sp, #4]
 8003286:	9800      	ldr	r0, [sp, #0]
 8003288:	9f08      	ldr	r7, [sp, #32]
 800328a:	321a      	adds	r2, #26
 800328c:	47b8      	blx	r7
 800328e:	3001      	adds	r0, #1
 8003290:	d0e6      	beq.n	8003260 <_printf_common+0xa8>
 8003292:	3601      	adds	r6, #1
 8003294:	e7d1      	b.n	800323a <_printf_common+0x82>
	...

08003298 <_printf_i>:
 8003298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329a:	b08b      	sub	sp, #44	; 0x2c
 800329c:	9206      	str	r2, [sp, #24]
 800329e:	000a      	movs	r2, r1
 80032a0:	3243      	adds	r2, #67	; 0x43
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	9005      	str	r0, [sp, #20]
 80032a6:	9204      	str	r2, [sp, #16]
 80032a8:	7e0a      	ldrb	r2, [r1, #24]
 80032aa:	000c      	movs	r4, r1
 80032ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032ae:	2a78      	cmp	r2, #120	; 0x78
 80032b0:	d809      	bhi.n	80032c6 <_printf_i+0x2e>
 80032b2:	2a62      	cmp	r2, #98	; 0x62
 80032b4:	d80b      	bhi.n	80032ce <_printf_i+0x36>
 80032b6:	2a00      	cmp	r2, #0
 80032b8:	d100      	bne.n	80032bc <_printf_i+0x24>
 80032ba:	e0be      	b.n	800343a <_printf_i+0x1a2>
 80032bc:	497c      	ldr	r1, [pc, #496]	; (80034b0 <_printf_i+0x218>)
 80032be:	9103      	str	r1, [sp, #12]
 80032c0:	2a58      	cmp	r2, #88	; 0x58
 80032c2:	d100      	bne.n	80032c6 <_printf_i+0x2e>
 80032c4:	e093      	b.n	80033ee <_printf_i+0x156>
 80032c6:	0026      	movs	r6, r4
 80032c8:	3642      	adds	r6, #66	; 0x42
 80032ca:	7032      	strb	r2, [r6, #0]
 80032cc:	e022      	b.n	8003314 <_printf_i+0x7c>
 80032ce:	0010      	movs	r0, r2
 80032d0:	3863      	subs	r0, #99	; 0x63
 80032d2:	2815      	cmp	r0, #21
 80032d4:	d8f7      	bhi.n	80032c6 <_printf_i+0x2e>
 80032d6:	f7fc ff17 	bl	8000108 <__gnu_thumb1_case_shi>
 80032da:	0016      	.short	0x0016
 80032dc:	fff6001f 	.word	0xfff6001f
 80032e0:	fff6fff6 	.word	0xfff6fff6
 80032e4:	001ffff6 	.word	0x001ffff6
 80032e8:	fff6fff6 	.word	0xfff6fff6
 80032ec:	fff6fff6 	.word	0xfff6fff6
 80032f0:	003600a3 	.word	0x003600a3
 80032f4:	fff60083 	.word	0xfff60083
 80032f8:	00b4fff6 	.word	0x00b4fff6
 80032fc:	0036fff6 	.word	0x0036fff6
 8003300:	fff6fff6 	.word	0xfff6fff6
 8003304:	0087      	.short	0x0087
 8003306:	0026      	movs	r6, r4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	3642      	adds	r6, #66	; 0x42
 800330c:	1d11      	adds	r1, r2, #4
 800330e:	6019      	str	r1, [r3, #0]
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	7033      	strb	r3, [r6, #0]
 8003314:	2301      	movs	r3, #1
 8003316:	e0a2      	b.n	800345e <_printf_i+0x1c6>
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	1d02      	adds	r2, r0, #4
 800331e:	060d      	lsls	r5, r1, #24
 8003320:	d50b      	bpl.n	800333a <_printf_i+0xa2>
 8003322:	6805      	ldr	r5, [r0, #0]
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	2d00      	cmp	r5, #0
 8003328:	da03      	bge.n	8003332 <_printf_i+0x9a>
 800332a:	232d      	movs	r3, #45	; 0x2d
 800332c:	9a04      	ldr	r2, [sp, #16]
 800332e:	426d      	negs	r5, r5
 8003330:	7013      	strb	r3, [r2, #0]
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <_printf_i+0x218>)
 8003334:	270a      	movs	r7, #10
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	e01b      	b.n	8003372 <_printf_i+0xda>
 800333a:	6805      	ldr	r5, [r0, #0]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	0649      	lsls	r1, r1, #25
 8003340:	d5f1      	bpl.n	8003326 <_printf_i+0x8e>
 8003342:	b22d      	sxth	r5, r5
 8003344:	e7ef      	b.n	8003326 <_printf_i+0x8e>
 8003346:	680d      	ldr	r5, [r1, #0]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	1d08      	adds	r0, r1, #4
 800334c:	6018      	str	r0, [r3, #0]
 800334e:	062e      	lsls	r6, r5, #24
 8003350:	d501      	bpl.n	8003356 <_printf_i+0xbe>
 8003352:	680d      	ldr	r5, [r1, #0]
 8003354:	e003      	b.n	800335e <_printf_i+0xc6>
 8003356:	066d      	lsls	r5, r5, #25
 8003358:	d5fb      	bpl.n	8003352 <_printf_i+0xba>
 800335a:	680d      	ldr	r5, [r1, #0]
 800335c:	b2ad      	uxth	r5, r5
 800335e:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <_printf_i+0x218>)
 8003360:	2708      	movs	r7, #8
 8003362:	9303      	str	r3, [sp, #12]
 8003364:	2a6f      	cmp	r2, #111	; 0x6f
 8003366:	d000      	beq.n	800336a <_printf_i+0xd2>
 8003368:	3702      	adds	r7, #2
 800336a:	0023      	movs	r3, r4
 800336c:	2200      	movs	r2, #0
 800336e:	3343      	adds	r3, #67	; 0x43
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	60a3      	str	r3, [r4, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db03      	blt.n	8003382 <_printf_i+0xea>
 800337a:	2104      	movs	r1, #4
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	438a      	bics	r2, r1
 8003380:	6022      	str	r2, [r4, #0]
 8003382:	2d00      	cmp	r5, #0
 8003384:	d102      	bne.n	800338c <_printf_i+0xf4>
 8003386:	9e04      	ldr	r6, [sp, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00c      	beq.n	80033a6 <_printf_i+0x10e>
 800338c:	9e04      	ldr	r6, [sp, #16]
 800338e:	0028      	movs	r0, r5
 8003390:	0039      	movs	r1, r7
 8003392:	f7fc ff49 	bl	8000228 <__aeabi_uidivmod>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	3e01      	subs	r6, #1
 800339a:	5c5b      	ldrb	r3, [r3, r1]
 800339c:	7033      	strb	r3, [r6, #0]
 800339e:	002b      	movs	r3, r5
 80033a0:	0005      	movs	r5, r0
 80033a2:	429f      	cmp	r7, r3
 80033a4:	d9f3      	bls.n	800338e <_printf_i+0xf6>
 80033a6:	2f08      	cmp	r7, #8
 80033a8:	d109      	bne.n	80033be <_printf_i+0x126>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	07db      	lsls	r3, r3, #31
 80033ae:	d506      	bpl.n	80033be <_printf_i+0x126>
 80033b0:	6862      	ldr	r2, [r4, #4]
 80033b2:	6923      	ldr	r3, [r4, #16]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dc02      	bgt.n	80033be <_printf_i+0x126>
 80033b8:	2330      	movs	r3, #48	; 0x30
 80033ba:	3e01      	subs	r6, #1
 80033bc:	7033      	strb	r3, [r6, #0]
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	1b9b      	subs	r3, r3, r6
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	9b07      	ldr	r3, [sp, #28]
 80033c6:	0021      	movs	r1, r4
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	9805      	ldr	r0, [sp, #20]
 80033cc:	9b06      	ldr	r3, [sp, #24]
 80033ce:	aa09      	add	r2, sp, #36	; 0x24
 80033d0:	f7ff fef2 	bl	80031b8 <_printf_common>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d147      	bne.n	8003468 <_printf_i+0x1d0>
 80033d8:	2001      	movs	r0, #1
 80033da:	4240      	negs	r0, r0
 80033dc:	b00b      	add	sp, #44	; 0x2c
 80033de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e0:	2220      	movs	r2, #32
 80033e2:	6809      	ldr	r1, [r1, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	6022      	str	r2, [r4, #0]
 80033e8:	2278      	movs	r2, #120	; 0x78
 80033ea:	4932      	ldr	r1, [pc, #200]	; (80034b4 <_printf_i+0x21c>)
 80033ec:	9103      	str	r1, [sp, #12]
 80033ee:	0021      	movs	r1, r4
 80033f0:	3145      	adds	r1, #69	; 0x45
 80033f2:	700a      	strb	r2, [r1, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	c920      	ldmia	r1!, {r5}
 80033fa:	0610      	lsls	r0, r2, #24
 80033fc:	d402      	bmi.n	8003404 <_printf_i+0x16c>
 80033fe:	0650      	lsls	r0, r2, #25
 8003400:	d500      	bpl.n	8003404 <_printf_i+0x16c>
 8003402:	b2ad      	uxth	r5, r5
 8003404:	6019      	str	r1, [r3, #0]
 8003406:	07d3      	lsls	r3, r2, #31
 8003408:	d502      	bpl.n	8003410 <_printf_i+0x178>
 800340a:	2320      	movs	r3, #32
 800340c:	4313      	orrs	r3, r2
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	2710      	movs	r7, #16
 8003412:	2d00      	cmp	r5, #0
 8003414:	d1a9      	bne.n	800336a <_printf_i+0xd2>
 8003416:	2220      	movs	r2, #32
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	4393      	bics	r3, r2
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	e7a4      	b.n	800336a <_printf_i+0xd2>
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	680d      	ldr	r5, [r1, #0]
 8003424:	1d10      	adds	r0, r2, #4
 8003426:	6949      	ldr	r1, [r1, #20]
 8003428:	6018      	str	r0, [r3, #0]
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	062e      	lsls	r6, r5, #24
 800342e:	d501      	bpl.n	8003434 <_printf_i+0x19c>
 8003430:	6019      	str	r1, [r3, #0]
 8003432:	e002      	b.n	800343a <_printf_i+0x1a2>
 8003434:	066d      	lsls	r5, r5, #25
 8003436:	d5fb      	bpl.n	8003430 <_printf_i+0x198>
 8003438:	8019      	strh	r1, [r3, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	9e04      	ldr	r6, [sp, #16]
 800343e:	6123      	str	r3, [r4, #16]
 8003440:	e7c0      	b.n	80033c4 <_printf_i+0x12c>
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	1d11      	adds	r1, r2, #4
 8003446:	6019      	str	r1, [r3, #0]
 8003448:	6816      	ldr	r6, [r2, #0]
 800344a:	2100      	movs	r1, #0
 800344c:	0030      	movs	r0, r6
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	f000 f858 	bl	8003504 <memchr>
 8003454:	2800      	cmp	r0, #0
 8003456:	d001      	beq.n	800345c <_printf_i+0x1c4>
 8003458:	1b80      	subs	r0, r0, r6
 800345a:	6060      	str	r0, [r4, #4]
 800345c:	6863      	ldr	r3, [r4, #4]
 800345e:	6123      	str	r3, [r4, #16]
 8003460:	2300      	movs	r3, #0
 8003462:	9a04      	ldr	r2, [sp, #16]
 8003464:	7013      	strb	r3, [r2, #0]
 8003466:	e7ad      	b.n	80033c4 <_printf_i+0x12c>
 8003468:	0032      	movs	r2, r6
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	9906      	ldr	r1, [sp, #24]
 800346e:	9805      	ldr	r0, [sp, #20]
 8003470:	9d07      	ldr	r5, [sp, #28]
 8003472:	47a8      	blx	r5
 8003474:	3001      	adds	r0, #1
 8003476:	d0af      	beq.n	80033d8 <_printf_i+0x140>
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	079b      	lsls	r3, r3, #30
 800347c:	d415      	bmi.n	80034aa <_printf_i+0x212>
 800347e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003480:	68e0      	ldr	r0, [r4, #12]
 8003482:	4298      	cmp	r0, r3
 8003484:	daaa      	bge.n	80033dc <_printf_i+0x144>
 8003486:	0018      	movs	r0, r3
 8003488:	e7a8      	b.n	80033dc <_printf_i+0x144>
 800348a:	0022      	movs	r2, r4
 800348c:	2301      	movs	r3, #1
 800348e:	9906      	ldr	r1, [sp, #24]
 8003490:	9805      	ldr	r0, [sp, #20]
 8003492:	9e07      	ldr	r6, [sp, #28]
 8003494:	3219      	adds	r2, #25
 8003496:	47b0      	blx	r6
 8003498:	3001      	adds	r0, #1
 800349a:	d09d      	beq.n	80033d8 <_printf_i+0x140>
 800349c:	3501      	adds	r5, #1
 800349e:	68e3      	ldr	r3, [r4, #12]
 80034a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	42ab      	cmp	r3, r5
 80034a6:	dcf0      	bgt.n	800348a <_printf_i+0x1f2>
 80034a8:	e7e9      	b.n	800347e <_printf_i+0x1e6>
 80034aa:	2500      	movs	r5, #0
 80034ac:	e7f7      	b.n	800349e <_printf_i+0x206>
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	08003629 	.word	0x08003629
 80034b4:	0800363a 	.word	0x0800363a

080034b8 <memmove>:
 80034b8:	b510      	push	{r4, lr}
 80034ba:	4288      	cmp	r0, r1
 80034bc:	d902      	bls.n	80034c4 <memmove+0xc>
 80034be:	188b      	adds	r3, r1, r2
 80034c0:	4298      	cmp	r0, r3
 80034c2:	d303      	bcc.n	80034cc <memmove+0x14>
 80034c4:	2300      	movs	r3, #0
 80034c6:	e007      	b.n	80034d8 <memmove+0x20>
 80034c8:	5c8b      	ldrb	r3, [r1, r2]
 80034ca:	5483      	strb	r3, [r0, r2]
 80034cc:	3a01      	subs	r2, #1
 80034ce:	d2fb      	bcs.n	80034c8 <memmove+0x10>
 80034d0:	bd10      	pop	{r4, pc}
 80034d2:	5ccc      	ldrb	r4, [r1, r3]
 80034d4:	54c4      	strb	r4, [r0, r3]
 80034d6:	3301      	adds	r3, #1
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1fa      	bne.n	80034d2 <memmove+0x1a>
 80034dc:	e7f8      	b.n	80034d0 <memmove+0x18>
	...

080034e0 <_sbrk_r>:
 80034e0:	2300      	movs	r3, #0
 80034e2:	b570      	push	{r4, r5, r6, lr}
 80034e4:	4d06      	ldr	r5, [pc, #24]	; (8003500 <_sbrk_r+0x20>)
 80034e6:	0004      	movs	r4, r0
 80034e8:	0008      	movs	r0, r1
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	f7fd f926 	bl	800073c <_sbrk>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d103      	bne.n	80034fc <_sbrk_r+0x1c>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d000      	beq.n	80034fc <_sbrk_r+0x1c>
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	200002a4 	.word	0x200002a4

08003504 <memchr>:
 8003504:	b2c9      	uxtb	r1, r1
 8003506:	1882      	adds	r2, r0, r2
 8003508:	4290      	cmp	r0, r2
 800350a:	d101      	bne.n	8003510 <memchr+0xc>
 800350c:	2000      	movs	r0, #0
 800350e:	4770      	bx	lr
 8003510:	7803      	ldrb	r3, [r0, #0]
 8003512:	428b      	cmp	r3, r1
 8003514:	d0fb      	beq.n	800350e <memchr+0xa>
 8003516:	3001      	adds	r0, #1
 8003518:	e7f6      	b.n	8003508 <memchr+0x4>

0800351a <memcpy>:
 800351a:	2300      	movs	r3, #0
 800351c:	b510      	push	{r4, lr}
 800351e:	429a      	cmp	r2, r3
 8003520:	d100      	bne.n	8003524 <memcpy+0xa>
 8003522:	bd10      	pop	{r4, pc}
 8003524:	5ccc      	ldrb	r4, [r1, r3]
 8003526:	54c4      	strb	r4, [r0, r3]
 8003528:	3301      	adds	r3, #1
 800352a:	e7f8      	b.n	800351e <memcpy+0x4>

0800352c <_realloc_r>:
 800352c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800352e:	0007      	movs	r7, r0
 8003530:	000e      	movs	r6, r1
 8003532:	0014      	movs	r4, r2
 8003534:	2900      	cmp	r1, #0
 8003536:	d105      	bne.n	8003544 <_realloc_r+0x18>
 8003538:	0011      	movs	r1, r2
 800353a:	f7ff fc49 	bl	8002dd0 <_malloc_r>
 800353e:	0005      	movs	r5, r0
 8003540:	0028      	movs	r0, r5
 8003542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003544:	2a00      	cmp	r2, #0
 8003546:	d103      	bne.n	8003550 <_realloc_r+0x24>
 8003548:	f7ff fbd6 	bl	8002cf8 <_free_r>
 800354c:	0025      	movs	r5, r4
 800354e:	e7f7      	b.n	8003540 <_realloc_r+0x14>
 8003550:	f000 f81b 	bl	800358a <_malloc_usable_size_r>
 8003554:	9001      	str	r0, [sp, #4]
 8003556:	4284      	cmp	r4, r0
 8003558:	d803      	bhi.n	8003562 <_realloc_r+0x36>
 800355a:	0035      	movs	r5, r6
 800355c:	0843      	lsrs	r3, r0, #1
 800355e:	42a3      	cmp	r3, r4
 8003560:	d3ee      	bcc.n	8003540 <_realloc_r+0x14>
 8003562:	0021      	movs	r1, r4
 8003564:	0038      	movs	r0, r7
 8003566:	f7ff fc33 	bl	8002dd0 <_malloc_r>
 800356a:	1e05      	subs	r5, r0, #0
 800356c:	d0e8      	beq.n	8003540 <_realloc_r+0x14>
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	0022      	movs	r2, r4
 8003572:	429c      	cmp	r4, r3
 8003574:	d900      	bls.n	8003578 <_realloc_r+0x4c>
 8003576:	001a      	movs	r2, r3
 8003578:	0031      	movs	r1, r6
 800357a:	0028      	movs	r0, r5
 800357c:	f7ff ffcd 	bl	800351a <memcpy>
 8003580:	0031      	movs	r1, r6
 8003582:	0038      	movs	r0, r7
 8003584:	f7ff fbb8 	bl	8002cf8 <_free_r>
 8003588:	e7da      	b.n	8003540 <_realloc_r+0x14>

0800358a <_malloc_usable_size_r>:
 800358a:	1f0b      	subs	r3, r1, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1f18      	subs	r0, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	da01      	bge.n	8003598 <_malloc_usable_size_r+0xe>
 8003594:	580b      	ldr	r3, [r1, r0]
 8003596:	18c0      	adds	r0, r0, r3
 8003598:	4770      	bx	lr
	...

0800359c <_init>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr

080035a8 <_fini>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr
