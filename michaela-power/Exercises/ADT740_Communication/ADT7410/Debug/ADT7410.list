
ADT7410.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004740  08004740  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004740  08004740  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  080047a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080047a4  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a44a  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000188a  00000000  00000000  0002a511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f5  00000000  00000000  0002c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c82  00000000  00000000  0002cd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cac0  00000000  00000000  0003e9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069bda  00000000  00000000  0004b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025dc  00000000  00000000  000b509c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b7678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800467c 	.word	0x0800467c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800467c 	.word	0x0800467c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2uiz>:
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	b510      	push	{r4, lr}
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	1c04      	adds	r4, r0, #0
 800024c:	f000 fec8 	bl	8000fe0 <__aeabi_fcmpge>
 8000250:	2800      	cmp	r0, #0
 8000252:	d103      	bne.n	800025c <__aeabi_f2uiz+0x18>
 8000254:	1c20      	adds	r0, r4, #0
 8000256:	f000 fafb 	bl	8000850 <__aeabi_f2iz>
 800025a:	bd10      	pop	{r4, pc}
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	1c20      	adds	r0, r4, #0
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	f000 f955 	bl	8000510 <__aeabi_fsub>
 8000266:	f000 faf3 	bl	8000850 <__aeabi_f2iz>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	469c      	mov	ip, r3
 8000270:	4460      	add	r0, ip
 8000272:	e7f2      	b.n	800025a <__aeabi_f2uiz+0x16>

08000274 <__aeabi_fmul>:
 8000274:	0243      	lsls	r3, r0, #9
 8000276:	0a5b      	lsrs	r3, r3, #9
 8000278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800027a:	464f      	mov	r7, r9
 800027c:	4646      	mov	r6, r8
 800027e:	4699      	mov	r9, r3
 8000280:	46d6      	mov	lr, sl
 8000282:	0fc3      	lsrs	r3, r0, #31
 8000284:	0045      	lsls	r5, r0, #1
 8000286:	4698      	mov	r8, r3
 8000288:	b5c0      	push	{r6, r7, lr}
 800028a:	464b      	mov	r3, r9
 800028c:	1c0f      	adds	r7, r1, #0
 800028e:	0e2d      	lsrs	r5, r5, #24
 8000290:	d100      	bne.n	8000294 <__aeabi_fmul+0x20>
 8000292:	e0cb      	b.n	800042c <__aeabi_fmul+0x1b8>
 8000294:	2dff      	cmp	r5, #255	; 0xff
 8000296:	d100      	bne.n	800029a <__aeabi_fmul+0x26>
 8000298:	e0cf      	b.n	800043a <__aeabi_fmul+0x1c6>
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	00db      	lsls	r3, r3, #3
 800029e:	04d2      	lsls	r2, r2, #19
 80002a0:	431a      	orrs	r2, r3
 80002a2:	2300      	movs	r3, #0
 80002a4:	4691      	mov	r9, r2
 80002a6:	2600      	movs	r6, #0
 80002a8:	469a      	mov	sl, r3
 80002aa:	3d7f      	subs	r5, #127	; 0x7f
 80002ac:	027c      	lsls	r4, r7, #9
 80002ae:	007b      	lsls	r3, r7, #1
 80002b0:	0a64      	lsrs	r4, r4, #9
 80002b2:	0e1b      	lsrs	r3, r3, #24
 80002b4:	0fff      	lsrs	r7, r7, #31
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d100      	bne.n	80002bc <__aeabi_fmul+0x48>
 80002ba:	e0a9      	b.n	8000410 <__aeabi_fmul+0x19c>
 80002bc:	2bff      	cmp	r3, #255	; 0xff
 80002be:	d011      	beq.n	80002e4 <__aeabi_fmul+0x70>
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	00e4      	lsls	r4, r4, #3
 80002c4:	04d2      	lsls	r2, r2, #19
 80002c6:	4314      	orrs	r4, r2
 80002c8:	4642      	mov	r2, r8
 80002ca:	3b7f      	subs	r3, #127	; 0x7f
 80002cc:	195b      	adds	r3, r3, r5
 80002ce:	407a      	eors	r2, r7
 80002d0:	2000      	movs	r0, #0
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	1c5d      	adds	r5, r3, #1
 80002d6:	2e0a      	cmp	r6, #10
 80002d8:	dd13      	ble.n	8000302 <__aeabi_fmul+0x8e>
 80002da:	003a      	movs	r2, r7
 80002dc:	2e0b      	cmp	r6, #11
 80002de:	d047      	beq.n	8000370 <__aeabi_fmul+0xfc>
 80002e0:	4647      	mov	r7, r8
 80002e2:	e03f      	b.n	8000364 <__aeabi_fmul+0xf0>
 80002e4:	002b      	movs	r3, r5
 80002e6:	33ff      	adds	r3, #255	; 0xff
 80002e8:	2c00      	cmp	r4, #0
 80002ea:	d11e      	bne.n	800032a <__aeabi_fmul+0xb6>
 80002ec:	2202      	movs	r2, #2
 80002ee:	4316      	orrs	r6, r2
 80002f0:	4642      	mov	r2, r8
 80002f2:	3501      	adds	r5, #1
 80002f4:	407a      	eors	r2, r7
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	35ff      	adds	r5, #255	; 0xff
 80002fa:	2e0a      	cmp	r6, #10
 80002fc:	dd00      	ble.n	8000300 <__aeabi_fmul+0x8c>
 80002fe:	e0e4      	b.n	80004ca <__aeabi_fmul+0x256>
 8000300:	2002      	movs	r0, #2
 8000302:	2e02      	cmp	r6, #2
 8000304:	dc1c      	bgt.n	8000340 <__aeabi_fmul+0xcc>
 8000306:	3e01      	subs	r6, #1
 8000308:	2e01      	cmp	r6, #1
 800030a:	d842      	bhi.n	8000392 <__aeabi_fmul+0x11e>
 800030c:	2802      	cmp	r0, #2
 800030e:	d03d      	beq.n	800038c <__aeabi_fmul+0x118>
 8000310:	2801      	cmp	r0, #1
 8000312:	d166      	bne.n	80003e2 <__aeabi_fmul+0x16e>
 8000314:	2000      	movs	r0, #0
 8000316:	2100      	movs	r1, #0
 8000318:	05c0      	lsls	r0, r0, #23
 800031a:	4308      	orrs	r0, r1
 800031c:	07d2      	lsls	r2, r2, #31
 800031e:	4310      	orrs	r0, r2
 8000320:	bce0      	pop	{r5, r6, r7}
 8000322:	46ba      	mov	sl, r7
 8000324:	46b1      	mov	r9, r6
 8000326:	46a8      	mov	r8, r5
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032a:	2203      	movs	r2, #3
 800032c:	4316      	orrs	r6, r2
 800032e:	4642      	mov	r2, r8
 8000330:	3501      	adds	r5, #1
 8000332:	407a      	eors	r2, r7
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	35ff      	adds	r5, #255	; 0xff
 8000338:	2e0a      	cmp	r6, #10
 800033a:	dd00      	ble.n	800033e <__aeabi_fmul+0xca>
 800033c:	e0e4      	b.n	8000508 <__aeabi_fmul+0x294>
 800033e:	2003      	movs	r0, #3
 8000340:	2101      	movs	r1, #1
 8000342:	40b1      	lsls	r1, r6
 8000344:	26a6      	movs	r6, #166	; 0xa6
 8000346:	00f6      	lsls	r6, r6, #3
 8000348:	4231      	tst	r1, r6
 800034a:	d10a      	bne.n	8000362 <__aeabi_fmul+0xee>
 800034c:	2690      	movs	r6, #144	; 0x90
 800034e:	00b6      	lsls	r6, r6, #2
 8000350:	4231      	tst	r1, r6
 8000352:	d116      	bne.n	8000382 <__aeabi_fmul+0x10e>
 8000354:	3eb9      	subs	r6, #185	; 0xb9
 8000356:	3eff      	subs	r6, #255	; 0xff
 8000358:	420e      	tst	r6, r1
 800035a:	d01a      	beq.n	8000392 <__aeabi_fmul+0x11e>
 800035c:	46a1      	mov	r9, r4
 800035e:	4682      	mov	sl, r0
 8000360:	e000      	b.n	8000364 <__aeabi_fmul+0xf0>
 8000362:	0017      	movs	r7, r2
 8000364:	4653      	mov	r3, sl
 8000366:	003a      	movs	r2, r7
 8000368:	2b02      	cmp	r3, #2
 800036a:	d00f      	beq.n	800038c <__aeabi_fmul+0x118>
 800036c:	464c      	mov	r4, r9
 800036e:	4650      	mov	r0, sl
 8000370:	2803      	cmp	r0, #3
 8000372:	d1cd      	bne.n	8000310 <__aeabi_fmul+0x9c>
 8000374:	2180      	movs	r1, #128	; 0x80
 8000376:	03c9      	lsls	r1, r1, #15
 8000378:	4321      	orrs	r1, r4
 800037a:	0249      	lsls	r1, r1, #9
 800037c:	20ff      	movs	r0, #255	; 0xff
 800037e:	0a49      	lsrs	r1, r1, #9
 8000380:	e7ca      	b.n	8000318 <__aeabi_fmul+0xa4>
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	2200      	movs	r2, #0
 8000386:	20ff      	movs	r0, #255	; 0xff
 8000388:	03c9      	lsls	r1, r1, #15
 800038a:	e7c5      	b.n	8000318 <__aeabi_fmul+0xa4>
 800038c:	20ff      	movs	r0, #255	; 0xff
 800038e:	2100      	movs	r1, #0
 8000390:	e7c2      	b.n	8000318 <__aeabi_fmul+0xa4>
 8000392:	0c20      	lsrs	r0, r4, #16
 8000394:	4649      	mov	r1, r9
 8000396:	0424      	lsls	r4, r4, #16
 8000398:	0c24      	lsrs	r4, r4, #16
 800039a:	0027      	movs	r7, r4
 800039c:	0c0e      	lsrs	r6, r1, #16
 800039e:	0409      	lsls	r1, r1, #16
 80003a0:	0c09      	lsrs	r1, r1, #16
 80003a2:	4374      	muls	r4, r6
 80003a4:	434f      	muls	r7, r1
 80003a6:	4346      	muls	r6, r0
 80003a8:	4348      	muls	r0, r1
 80003aa:	0c39      	lsrs	r1, r7, #16
 80003ac:	1900      	adds	r0, r0, r4
 80003ae:	1809      	adds	r1, r1, r0
 80003b0:	428c      	cmp	r4, r1
 80003b2:	d903      	bls.n	80003bc <__aeabi_fmul+0x148>
 80003b4:	2080      	movs	r0, #128	; 0x80
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	4684      	mov	ip, r0
 80003ba:	4466      	add	r6, ip
 80003bc:	043f      	lsls	r7, r7, #16
 80003be:	0408      	lsls	r0, r1, #16
 80003c0:	0c3f      	lsrs	r7, r7, #16
 80003c2:	19c0      	adds	r0, r0, r7
 80003c4:	0184      	lsls	r4, r0, #6
 80003c6:	1e67      	subs	r7, r4, #1
 80003c8:	41bc      	sbcs	r4, r7
 80003ca:	0c09      	lsrs	r1, r1, #16
 80003cc:	0e80      	lsrs	r0, r0, #26
 80003ce:	1989      	adds	r1, r1, r6
 80003d0:	4304      	orrs	r4, r0
 80003d2:	0189      	lsls	r1, r1, #6
 80003d4:	430c      	orrs	r4, r1
 80003d6:	0109      	lsls	r1, r1, #4
 80003d8:	d571      	bpl.n	80004be <__aeabi_fmul+0x24a>
 80003da:	2301      	movs	r3, #1
 80003dc:	0861      	lsrs	r1, r4, #1
 80003de:	401c      	ands	r4, r3
 80003e0:	430c      	orrs	r4, r1
 80003e2:	002b      	movs	r3, r5
 80003e4:	337f      	adds	r3, #127	; 0x7f
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	dd51      	ble.n	800048e <__aeabi_fmul+0x21a>
 80003ea:	0761      	lsls	r1, r4, #29
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fmul+0x184>
 80003ee:	210f      	movs	r1, #15
 80003f0:	4021      	ands	r1, r4
 80003f2:	2904      	cmp	r1, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fmul+0x184>
 80003f6:	3404      	adds	r4, #4
 80003f8:	0121      	lsls	r1, r4, #4
 80003fa:	d503      	bpl.n	8000404 <__aeabi_fmul+0x190>
 80003fc:	4b43      	ldr	r3, [pc, #268]	; (800050c <__aeabi_fmul+0x298>)
 80003fe:	401c      	ands	r4, r3
 8000400:	002b      	movs	r3, r5
 8000402:	3380      	adds	r3, #128	; 0x80
 8000404:	2bfe      	cmp	r3, #254	; 0xfe
 8000406:	dcc1      	bgt.n	800038c <__aeabi_fmul+0x118>
 8000408:	01a1      	lsls	r1, r4, #6
 800040a:	0a49      	lsrs	r1, r1, #9
 800040c:	b2d8      	uxtb	r0, r3
 800040e:	e783      	b.n	8000318 <__aeabi_fmul+0xa4>
 8000410:	2c00      	cmp	r4, #0
 8000412:	d12c      	bne.n	800046e <__aeabi_fmul+0x1fa>
 8000414:	2301      	movs	r3, #1
 8000416:	4642      	mov	r2, r8
 8000418:	431e      	orrs	r6, r3
 800041a:	002b      	movs	r3, r5
 800041c:	407a      	eors	r2, r7
 800041e:	2001      	movs	r0, #1
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	1c5d      	adds	r5, r3, #1
 8000424:	2e0a      	cmp	r6, #10
 8000426:	dd00      	ble.n	800042a <__aeabi_fmul+0x1b6>
 8000428:	e757      	b.n	80002da <__aeabi_fmul+0x66>
 800042a:	e76a      	b.n	8000302 <__aeabi_fmul+0x8e>
 800042c:	2b00      	cmp	r3, #0
 800042e:	d110      	bne.n	8000452 <__aeabi_fmul+0x1de>
 8000430:	2301      	movs	r3, #1
 8000432:	2604      	movs	r6, #4
 8000434:	2500      	movs	r5, #0
 8000436:	469a      	mov	sl, r3
 8000438:	e738      	b.n	80002ac <__aeabi_fmul+0x38>
 800043a:	2b00      	cmp	r3, #0
 800043c:	d104      	bne.n	8000448 <__aeabi_fmul+0x1d4>
 800043e:	2302      	movs	r3, #2
 8000440:	2608      	movs	r6, #8
 8000442:	25ff      	movs	r5, #255	; 0xff
 8000444:	469a      	mov	sl, r3
 8000446:	e731      	b.n	80002ac <__aeabi_fmul+0x38>
 8000448:	2303      	movs	r3, #3
 800044a:	260c      	movs	r6, #12
 800044c:	25ff      	movs	r5, #255	; 0xff
 800044e:	469a      	mov	sl, r3
 8000450:	e72c      	b.n	80002ac <__aeabi_fmul+0x38>
 8000452:	4648      	mov	r0, r9
 8000454:	f000 fdce 	bl	8000ff4 <__clzsi2>
 8000458:	464a      	mov	r2, r9
 800045a:	1f43      	subs	r3, r0, #5
 800045c:	2576      	movs	r5, #118	; 0x76
 800045e:	409a      	lsls	r2, r3
 8000460:	2300      	movs	r3, #0
 8000462:	426d      	negs	r5, r5
 8000464:	4691      	mov	r9, r2
 8000466:	2600      	movs	r6, #0
 8000468:	469a      	mov	sl, r3
 800046a:	1a2d      	subs	r5, r5, r0
 800046c:	e71e      	b.n	80002ac <__aeabi_fmul+0x38>
 800046e:	0020      	movs	r0, r4
 8000470:	f000 fdc0 	bl	8000ff4 <__clzsi2>
 8000474:	4642      	mov	r2, r8
 8000476:	1f43      	subs	r3, r0, #5
 8000478:	409c      	lsls	r4, r3
 800047a:	1a2b      	subs	r3, r5, r0
 800047c:	3b76      	subs	r3, #118	; 0x76
 800047e:	407a      	eors	r2, r7
 8000480:	2000      	movs	r0, #0
 8000482:	b2d2      	uxtb	r2, r2
 8000484:	1c5d      	adds	r5, r3, #1
 8000486:	2e0a      	cmp	r6, #10
 8000488:	dd00      	ble.n	800048c <__aeabi_fmul+0x218>
 800048a:	e726      	b.n	80002da <__aeabi_fmul+0x66>
 800048c:	e739      	b.n	8000302 <__aeabi_fmul+0x8e>
 800048e:	2101      	movs	r1, #1
 8000490:	1acb      	subs	r3, r1, r3
 8000492:	2b1b      	cmp	r3, #27
 8000494:	dd00      	ble.n	8000498 <__aeabi_fmul+0x224>
 8000496:	e73d      	b.n	8000314 <__aeabi_fmul+0xa0>
 8000498:	359e      	adds	r5, #158	; 0x9e
 800049a:	0021      	movs	r1, r4
 800049c:	40ac      	lsls	r4, r5
 800049e:	40d9      	lsrs	r1, r3
 80004a0:	1e63      	subs	r3, r4, #1
 80004a2:	419c      	sbcs	r4, r3
 80004a4:	4321      	orrs	r1, r4
 80004a6:	074b      	lsls	r3, r1, #29
 80004a8:	d004      	beq.n	80004b4 <__aeabi_fmul+0x240>
 80004aa:	230f      	movs	r3, #15
 80004ac:	400b      	ands	r3, r1
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d000      	beq.n	80004b4 <__aeabi_fmul+0x240>
 80004b2:	3104      	adds	r1, #4
 80004b4:	014b      	lsls	r3, r1, #5
 80004b6:	d504      	bpl.n	80004c2 <__aeabi_fmul+0x24e>
 80004b8:	2001      	movs	r0, #1
 80004ba:	2100      	movs	r1, #0
 80004bc:	e72c      	b.n	8000318 <__aeabi_fmul+0xa4>
 80004be:	001d      	movs	r5, r3
 80004c0:	e78f      	b.n	80003e2 <__aeabi_fmul+0x16e>
 80004c2:	0189      	lsls	r1, r1, #6
 80004c4:	2000      	movs	r0, #0
 80004c6:	0a49      	lsrs	r1, r1, #9
 80004c8:	e726      	b.n	8000318 <__aeabi_fmul+0xa4>
 80004ca:	2302      	movs	r3, #2
 80004cc:	2e0f      	cmp	r6, #15
 80004ce:	d10c      	bne.n	80004ea <__aeabi_fmul+0x276>
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	464b      	mov	r3, r9
 80004d4:	03c9      	lsls	r1, r1, #15
 80004d6:	420b      	tst	r3, r1
 80004d8:	d00d      	beq.n	80004f6 <__aeabi_fmul+0x282>
 80004da:	420c      	tst	r4, r1
 80004dc:	d10b      	bne.n	80004f6 <__aeabi_fmul+0x282>
 80004de:	4321      	orrs	r1, r4
 80004e0:	0249      	lsls	r1, r1, #9
 80004e2:	003a      	movs	r2, r7
 80004e4:	20ff      	movs	r0, #255	; 0xff
 80004e6:	0a49      	lsrs	r1, r1, #9
 80004e8:	e716      	b.n	8000318 <__aeabi_fmul+0xa4>
 80004ea:	2e0b      	cmp	r6, #11
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fmul+0x27c>
 80004ee:	e6f7      	b.n	80002e0 <__aeabi_fmul+0x6c>
 80004f0:	46a1      	mov	r9, r4
 80004f2:	469a      	mov	sl, r3
 80004f4:	e736      	b.n	8000364 <__aeabi_fmul+0xf0>
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	464b      	mov	r3, r9
 80004fa:	03c9      	lsls	r1, r1, #15
 80004fc:	4319      	orrs	r1, r3
 80004fe:	0249      	lsls	r1, r1, #9
 8000500:	4642      	mov	r2, r8
 8000502:	20ff      	movs	r0, #255	; 0xff
 8000504:	0a49      	lsrs	r1, r1, #9
 8000506:	e707      	b.n	8000318 <__aeabi_fmul+0xa4>
 8000508:	2303      	movs	r3, #3
 800050a:	e7df      	b.n	80004cc <__aeabi_fmul+0x258>
 800050c:	f7ffffff 	.word	0xf7ffffff

08000510 <__aeabi_fsub>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	46c6      	mov	lr, r8
 8000514:	0243      	lsls	r3, r0, #9
 8000516:	0a5b      	lsrs	r3, r3, #9
 8000518:	0045      	lsls	r5, r0, #1
 800051a:	00da      	lsls	r2, r3, #3
 800051c:	0fc4      	lsrs	r4, r0, #31
 800051e:	0248      	lsls	r0, r1, #9
 8000520:	004f      	lsls	r7, r1, #1
 8000522:	4694      	mov	ip, r2
 8000524:	0a42      	lsrs	r2, r0, #9
 8000526:	001e      	movs	r6, r3
 8000528:	4690      	mov	r8, r2
 800052a:	b500      	push	{lr}
 800052c:	0e2d      	lsrs	r5, r5, #24
 800052e:	0e3f      	lsrs	r7, r7, #24
 8000530:	0fc9      	lsrs	r1, r1, #31
 8000532:	0980      	lsrs	r0, r0, #6
 8000534:	2fff      	cmp	r7, #255	; 0xff
 8000536:	d059      	beq.n	80005ec <__aeabi_fsub+0xdc>
 8000538:	2201      	movs	r2, #1
 800053a:	4051      	eors	r1, r2
 800053c:	428c      	cmp	r4, r1
 800053e:	d039      	beq.n	80005b4 <__aeabi_fsub+0xa4>
 8000540:	1bea      	subs	r2, r5, r7
 8000542:	2a00      	cmp	r2, #0
 8000544:	dd58      	ble.n	80005f8 <__aeabi_fsub+0xe8>
 8000546:	2f00      	cmp	r7, #0
 8000548:	d068      	beq.n	800061c <__aeabi_fsub+0x10c>
 800054a:	2dff      	cmp	r5, #255	; 0xff
 800054c:	d100      	bne.n	8000550 <__aeabi_fsub+0x40>
 800054e:	e0d1      	b.n	80006f4 <__aeabi_fsub+0x1e4>
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	04db      	lsls	r3, r3, #19
 8000554:	4318      	orrs	r0, r3
 8000556:	2a1b      	cmp	r2, #27
 8000558:	dc00      	bgt.n	800055c <__aeabi_fsub+0x4c>
 800055a:	e0e3      	b.n	8000724 <__aeabi_fsub+0x214>
 800055c:	2301      	movs	r3, #1
 800055e:	4662      	mov	r2, ip
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	015a      	lsls	r2, r3, #5
 8000564:	d400      	bmi.n	8000568 <__aeabi_fsub+0x58>
 8000566:	e0ac      	b.n	80006c2 <__aeabi_fsub+0x1b2>
 8000568:	019b      	lsls	r3, r3, #6
 800056a:	099e      	lsrs	r6, r3, #6
 800056c:	0030      	movs	r0, r6
 800056e:	f000 fd41 	bl	8000ff4 <__clzsi2>
 8000572:	0033      	movs	r3, r6
 8000574:	3805      	subs	r0, #5
 8000576:	4083      	lsls	r3, r0
 8000578:	4285      	cmp	r5, r0
 800057a:	dc00      	bgt.n	800057e <__aeabi_fsub+0x6e>
 800057c:	e0c6      	b.n	800070c <__aeabi_fsub+0x1fc>
 800057e:	4ab2      	ldr	r2, [pc, #712]	; (8000848 <__aeabi_fsub+0x338>)
 8000580:	1a2d      	subs	r5, r5, r0
 8000582:	4013      	ands	r3, r2
 8000584:	075a      	lsls	r2, r3, #29
 8000586:	d004      	beq.n	8000592 <__aeabi_fsub+0x82>
 8000588:	220f      	movs	r2, #15
 800058a:	401a      	ands	r2, r3
 800058c:	2a04      	cmp	r2, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fsub+0x82>
 8000590:	3304      	adds	r3, #4
 8000592:	015a      	lsls	r2, r3, #5
 8000594:	d400      	bmi.n	8000598 <__aeabi_fsub+0x88>
 8000596:	e097      	b.n	80006c8 <__aeabi_fsub+0x1b8>
 8000598:	1c6a      	adds	r2, r5, #1
 800059a:	2dfe      	cmp	r5, #254	; 0xfe
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0x90>
 800059e:	e084      	b.n	80006aa <__aeabi_fsub+0x19a>
 80005a0:	019b      	lsls	r3, r3, #6
 80005a2:	0a5e      	lsrs	r6, r3, #9
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	05d0      	lsls	r0, r2, #23
 80005a8:	4330      	orrs	r0, r6
 80005aa:	07e4      	lsls	r4, r4, #31
 80005ac:	4320      	orrs	r0, r4
 80005ae:	bc80      	pop	{r7}
 80005b0:	46b8      	mov	r8, r7
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	1bea      	subs	r2, r5, r7
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	dd41      	ble.n	800063e <__aeabi_fsub+0x12e>
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	d06b      	beq.n	8000696 <__aeabi_fsub+0x186>
 80005be:	2dff      	cmp	r5, #255	; 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fsub+0xb4>
 80005c2:	e097      	b.n	80006f4 <__aeabi_fsub+0x1e4>
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	04db      	lsls	r3, r3, #19
 80005c8:	4318      	orrs	r0, r3
 80005ca:	2a1b      	cmp	r2, #27
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_fsub+0xc0>
 80005ce:	e0cc      	b.n	800076a <__aeabi_fsub+0x25a>
 80005d0:	2301      	movs	r3, #1
 80005d2:	4463      	add	r3, ip
 80005d4:	015a      	lsls	r2, r3, #5
 80005d6:	d574      	bpl.n	80006c2 <__aeabi_fsub+0x1b2>
 80005d8:	3501      	adds	r5, #1
 80005da:	2dff      	cmp	r5, #255	; 0xff
 80005dc:	d065      	beq.n	80006aa <__aeabi_fsub+0x19a>
 80005de:	2201      	movs	r2, #1
 80005e0:	499a      	ldr	r1, [pc, #616]	; (800084c <__aeabi_fsub+0x33c>)
 80005e2:	401a      	ands	r2, r3
 80005e4:	085b      	lsrs	r3, r3, #1
 80005e6:	400b      	ands	r3, r1
 80005e8:	4313      	orrs	r3, r2
 80005ea:	e7cb      	b.n	8000584 <__aeabi_fsub+0x74>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d01f      	beq.n	8000630 <__aeabi_fsub+0x120>
 80005f0:	428c      	cmp	r4, r1
 80005f2:	d022      	beq.n	800063a <__aeabi_fsub+0x12a>
 80005f4:	002a      	movs	r2, r5
 80005f6:	3aff      	subs	r2, #255	; 0xff
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d035      	beq.n	8000668 <__aeabi_fsub+0x158>
 80005fc:	1b7a      	subs	r2, r7, r5
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d000      	beq.n	8000604 <__aeabi_fsub+0xf4>
 8000602:	e099      	b.n	8000738 <__aeabi_fsub+0x228>
 8000604:	4663      	mov	r3, ip
 8000606:	2b00      	cmp	r3, #0
 8000608:	d100      	bne.n	800060c <__aeabi_fsub+0xfc>
 800060a:	e0dd      	b.n	80007c8 <__aeabi_fsub+0x2b8>
 800060c:	1e53      	subs	r3, r2, #1
 800060e:	2a01      	cmp	r2, #1
 8000610:	d100      	bne.n	8000614 <__aeabi_fsub+0x104>
 8000612:	e105      	b.n	8000820 <__aeabi_fsub+0x310>
 8000614:	2aff      	cmp	r2, #255	; 0xff
 8000616:	d06b      	beq.n	80006f0 <__aeabi_fsub+0x1e0>
 8000618:	001a      	movs	r2, r3
 800061a:	e094      	b.n	8000746 <__aeabi_fsub+0x236>
 800061c:	2800      	cmp	r0, #0
 800061e:	d073      	beq.n	8000708 <__aeabi_fsub+0x1f8>
 8000620:	1e51      	subs	r1, r2, #1
 8000622:	2a01      	cmp	r2, #1
 8000624:	d100      	bne.n	8000628 <__aeabi_fsub+0x118>
 8000626:	e0df      	b.n	80007e8 <__aeabi_fsub+0x2d8>
 8000628:	2aff      	cmp	r2, #255	; 0xff
 800062a:	d063      	beq.n	80006f4 <__aeabi_fsub+0x1e4>
 800062c:	000a      	movs	r2, r1
 800062e:	e792      	b.n	8000556 <__aeabi_fsub+0x46>
 8000630:	2201      	movs	r2, #1
 8000632:	4051      	eors	r1, r2
 8000634:	42a1      	cmp	r1, r4
 8000636:	d000      	beq.n	800063a <__aeabi_fsub+0x12a>
 8000638:	e782      	b.n	8000540 <__aeabi_fsub+0x30>
 800063a:	002a      	movs	r2, r5
 800063c:	3aff      	subs	r2, #255	; 0xff
 800063e:	2a00      	cmp	r2, #0
 8000640:	d036      	beq.n	80006b0 <__aeabi_fsub+0x1a0>
 8000642:	1b7a      	subs	r2, r7, r5
 8000644:	2d00      	cmp	r5, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fsub+0x13a>
 8000648:	e0aa      	b.n	80007a0 <__aeabi_fsub+0x290>
 800064a:	2fff      	cmp	r7, #255	; 0xff
 800064c:	d100      	bne.n	8000650 <__aeabi_fsub+0x140>
 800064e:	e0da      	b.n	8000806 <__aeabi_fsub+0x2f6>
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	4661      	mov	r1, ip
 8000654:	04db      	lsls	r3, r3, #19
 8000656:	4319      	orrs	r1, r3
 8000658:	468c      	mov	ip, r1
 800065a:	2a1b      	cmp	r2, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fsub+0x150>
 800065e:	e0d4      	b.n	800080a <__aeabi_fsub+0x2fa>
 8000660:	2301      	movs	r3, #1
 8000662:	003d      	movs	r5, r7
 8000664:	181b      	adds	r3, r3, r0
 8000666:	e7b5      	b.n	80005d4 <__aeabi_fsub+0xc4>
 8000668:	27fe      	movs	r7, #254	; 0xfe
 800066a:	1c6a      	adds	r2, r5, #1
 800066c:	4217      	tst	r7, r2
 800066e:	d171      	bne.n	8000754 <__aeabi_fsub+0x244>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_fsub+0x166>
 8000674:	e09e      	b.n	80007b4 <__aeabi_fsub+0x2a4>
 8000676:	4663      	mov	r3, ip
 8000678:	2b00      	cmp	r3, #0
 800067a:	d100      	bne.n	800067e <__aeabi_fsub+0x16e>
 800067c:	e0d5      	b.n	800082a <__aeabi_fsub+0x31a>
 800067e:	2200      	movs	r2, #0
 8000680:	2800      	cmp	r0, #0
 8000682:	d100      	bne.n	8000686 <__aeabi_fsub+0x176>
 8000684:	e78f      	b.n	80005a6 <__aeabi_fsub+0x96>
 8000686:	1a1b      	subs	r3, r3, r0
 8000688:	015e      	lsls	r6, r3, #5
 800068a:	d400      	bmi.n	800068e <__aeabi_fsub+0x17e>
 800068c:	e0d6      	b.n	800083c <__aeabi_fsub+0x32c>
 800068e:	4663      	mov	r3, ip
 8000690:	000c      	movs	r4, r1
 8000692:	1ac3      	subs	r3, r0, r3
 8000694:	e776      	b.n	8000584 <__aeabi_fsub+0x74>
 8000696:	2800      	cmp	r0, #0
 8000698:	d036      	beq.n	8000708 <__aeabi_fsub+0x1f8>
 800069a:	1e51      	subs	r1, r2, #1
 800069c:	2a01      	cmp	r2, #1
 800069e:	d100      	bne.n	80006a2 <__aeabi_fsub+0x192>
 80006a0:	e09a      	b.n	80007d8 <__aeabi_fsub+0x2c8>
 80006a2:	2aff      	cmp	r2, #255	; 0xff
 80006a4:	d026      	beq.n	80006f4 <__aeabi_fsub+0x1e4>
 80006a6:	000a      	movs	r2, r1
 80006a8:	e78f      	b.n	80005ca <__aeabi_fsub+0xba>
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	2600      	movs	r6, #0
 80006ae:	e77a      	b.n	80005a6 <__aeabi_fsub+0x96>
 80006b0:	27fe      	movs	r7, #254	; 0xfe
 80006b2:	1c6a      	adds	r2, r5, #1
 80006b4:	4217      	tst	r7, r2
 80006b6:	d062      	beq.n	800077e <__aeabi_fsub+0x26e>
 80006b8:	2aff      	cmp	r2, #255	; 0xff
 80006ba:	d0f6      	beq.n	80006aa <__aeabi_fsub+0x19a>
 80006bc:	0015      	movs	r5, r2
 80006be:	4460      	add	r0, ip
 80006c0:	0843      	lsrs	r3, r0, #1
 80006c2:	075a      	lsls	r2, r3, #29
 80006c4:	d000      	beq.n	80006c8 <__aeabi_fsub+0x1b8>
 80006c6:	e75f      	b.n	8000588 <__aeabi_fsub+0x78>
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	2dff      	cmp	r5, #255	; 0xff
 80006cc:	d012      	beq.n	80006f4 <__aeabi_fsub+0x1e4>
 80006ce:	025b      	lsls	r3, r3, #9
 80006d0:	0a5e      	lsrs	r6, r3, #9
 80006d2:	b2ea      	uxtb	r2, r5
 80006d4:	e767      	b.n	80005a6 <__aeabi_fsub+0x96>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d100      	bne.n	80006de <__aeabi_fsub+0x1ce>
 80006dc:	e093      	b.n	8000806 <__aeabi_fsub+0x2f6>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d008      	beq.n	80006f4 <__aeabi_fsub+0x1e4>
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	4213      	tst	r3, r2
 80006e8:	d004      	beq.n	80006f4 <__aeabi_fsub+0x1e4>
 80006ea:	4640      	mov	r0, r8
 80006ec:	4210      	tst	r0, r2
 80006ee:	d101      	bne.n	80006f4 <__aeabi_fsub+0x1e4>
 80006f0:	000c      	movs	r4, r1
 80006f2:	4643      	mov	r3, r8
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0d8      	beq.n	80006aa <__aeabi_fsub+0x19a>
 80006f8:	2680      	movs	r6, #128	; 0x80
 80006fa:	03f6      	lsls	r6, r6, #15
 80006fc:	431e      	orrs	r6, r3
 80006fe:	0276      	lsls	r6, r6, #9
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	0a76      	lsrs	r6, r6, #9
 8000704:	e74f      	b.n	80005a6 <__aeabi_fsub+0x96>
 8000706:	4643      	mov	r3, r8
 8000708:	0015      	movs	r5, r2
 800070a:	e7de      	b.n	80006ca <__aeabi_fsub+0x1ba>
 800070c:	2220      	movs	r2, #32
 800070e:	1b40      	subs	r0, r0, r5
 8000710:	3001      	adds	r0, #1
 8000712:	1a12      	subs	r2, r2, r0
 8000714:	0019      	movs	r1, r3
 8000716:	4093      	lsls	r3, r2
 8000718:	40c1      	lsrs	r1, r0
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	4193      	sbcs	r3, r2
 800071e:	2500      	movs	r5, #0
 8000720:	430b      	orrs	r3, r1
 8000722:	e72f      	b.n	8000584 <__aeabi_fsub+0x74>
 8000724:	2320      	movs	r3, #32
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	0001      	movs	r1, r0
 800072a:	4098      	lsls	r0, r3
 800072c:	0003      	movs	r3, r0
 800072e:	40d1      	lsrs	r1, r2
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	4193      	sbcs	r3, r2
 8000734:	430b      	orrs	r3, r1
 8000736:	e712      	b.n	800055e <__aeabi_fsub+0x4e>
 8000738:	2fff      	cmp	r7, #255	; 0xff
 800073a:	d0d9      	beq.n	80006f0 <__aeabi_fsub+0x1e0>
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	4664      	mov	r4, ip
 8000740:	04db      	lsls	r3, r3, #19
 8000742:	431c      	orrs	r4, r3
 8000744:	46a4      	mov	ip, r4
 8000746:	2a1b      	cmp	r2, #27
 8000748:	dd52      	ble.n	80007f0 <__aeabi_fsub+0x2e0>
 800074a:	2301      	movs	r3, #1
 800074c:	000c      	movs	r4, r1
 800074e:	003d      	movs	r5, r7
 8000750:	1ac3      	subs	r3, r0, r3
 8000752:	e706      	b.n	8000562 <__aeabi_fsub+0x52>
 8000754:	4663      	mov	r3, ip
 8000756:	1a1e      	subs	r6, r3, r0
 8000758:	0173      	lsls	r3, r6, #5
 800075a:	d439      	bmi.n	80007d0 <__aeabi_fsub+0x2c0>
 800075c:	2e00      	cmp	r6, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fsub+0x252>
 8000760:	e704      	b.n	800056c <__aeabi_fsub+0x5c>
 8000762:	2400      	movs	r4, #0
 8000764:	2200      	movs	r2, #0
 8000766:	2600      	movs	r6, #0
 8000768:	e71d      	b.n	80005a6 <__aeabi_fsub+0x96>
 800076a:	2320      	movs	r3, #32
 800076c:	1a9b      	subs	r3, r3, r2
 800076e:	0001      	movs	r1, r0
 8000770:	4098      	lsls	r0, r3
 8000772:	0003      	movs	r3, r0
 8000774:	40d1      	lsrs	r1, r2
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	4193      	sbcs	r3, r2
 800077a:	430b      	orrs	r3, r1
 800077c:	e729      	b.n	80005d2 <__aeabi_fsub+0xc2>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d1a9      	bne.n	80006d6 <__aeabi_fsub+0x1c6>
 8000782:	4663      	mov	r3, ip
 8000784:	2b00      	cmp	r3, #0
 8000786:	d056      	beq.n	8000836 <__aeabi_fsub+0x326>
 8000788:	2200      	movs	r2, #0
 800078a:	2800      	cmp	r0, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_fsub+0x280>
 800078e:	e70a      	b.n	80005a6 <__aeabi_fsub+0x96>
 8000790:	0003      	movs	r3, r0
 8000792:	4463      	add	r3, ip
 8000794:	015a      	lsls	r2, r3, #5
 8000796:	d594      	bpl.n	80006c2 <__aeabi_fsub+0x1b2>
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <__aeabi_fsub+0x338>)
 800079a:	3501      	adds	r5, #1
 800079c:	4013      	ands	r3, r2
 800079e:	e790      	b.n	80006c2 <__aeabi_fsub+0x1b2>
 80007a0:	4663      	mov	r3, ip
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0af      	beq.n	8000706 <__aeabi_fsub+0x1f6>
 80007a6:	1e53      	subs	r3, r2, #1
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d015      	beq.n	80007d8 <__aeabi_fsub+0x2c8>
 80007ac:	2aff      	cmp	r2, #255	; 0xff
 80007ae:	d02a      	beq.n	8000806 <__aeabi_fsub+0x2f6>
 80007b0:	001a      	movs	r2, r3
 80007b2:	e752      	b.n	800065a <__aeabi_fsub+0x14a>
 80007b4:	4662      	mov	r2, ip
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d191      	bne.n	80006de <__aeabi_fsub+0x1ce>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d198      	bne.n	80006f0 <__aeabi_fsub+0x1e0>
 80007be:	2680      	movs	r6, #128	; 0x80
 80007c0:	2400      	movs	r4, #0
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	03f6      	lsls	r6, r6, #15
 80007c6:	e6ee      	b.n	80005a6 <__aeabi_fsub+0x96>
 80007c8:	000c      	movs	r4, r1
 80007ca:	4643      	mov	r3, r8
 80007cc:	0015      	movs	r5, r2
 80007ce:	e77c      	b.n	80006ca <__aeabi_fsub+0x1ba>
 80007d0:	4663      	mov	r3, ip
 80007d2:	000c      	movs	r4, r1
 80007d4:	1ac6      	subs	r6, r0, r3
 80007d6:	e6c9      	b.n	800056c <__aeabi_fsub+0x5c>
 80007d8:	0003      	movs	r3, r0
 80007da:	4463      	add	r3, ip
 80007dc:	2501      	movs	r5, #1
 80007de:	015a      	lsls	r2, r3, #5
 80007e0:	d400      	bmi.n	80007e4 <__aeabi_fsub+0x2d4>
 80007e2:	e76e      	b.n	80006c2 <__aeabi_fsub+0x1b2>
 80007e4:	2502      	movs	r5, #2
 80007e6:	e6fa      	b.n	80005de <__aeabi_fsub+0xce>
 80007e8:	4663      	mov	r3, ip
 80007ea:	2501      	movs	r5, #1
 80007ec:	1a1b      	subs	r3, r3, r0
 80007ee:	e6b8      	b.n	8000562 <__aeabi_fsub+0x52>
 80007f0:	4664      	mov	r4, ip
 80007f2:	2320      	movs	r3, #32
 80007f4:	40d4      	lsrs	r4, r2
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	4662      	mov	r2, ip
 80007fa:	409a      	lsls	r2, r3
 80007fc:	0013      	movs	r3, r2
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	4193      	sbcs	r3, r2
 8000802:	4323      	orrs	r3, r4
 8000804:	e7a2      	b.n	800074c <__aeabi_fsub+0x23c>
 8000806:	4643      	mov	r3, r8
 8000808:	e774      	b.n	80006f4 <__aeabi_fsub+0x1e4>
 800080a:	4661      	mov	r1, ip
 800080c:	2320      	movs	r3, #32
 800080e:	40d1      	lsrs	r1, r2
 8000810:	1a9b      	subs	r3, r3, r2
 8000812:	4662      	mov	r2, ip
 8000814:	409a      	lsls	r2, r3
 8000816:	0013      	movs	r3, r2
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	4193      	sbcs	r3, r2
 800081c:	430b      	orrs	r3, r1
 800081e:	e720      	b.n	8000662 <__aeabi_fsub+0x152>
 8000820:	4663      	mov	r3, ip
 8000822:	000c      	movs	r4, r1
 8000824:	2501      	movs	r5, #1
 8000826:	1ac3      	subs	r3, r0, r3
 8000828:	e69b      	b.n	8000562 <__aeabi_fsub+0x52>
 800082a:	2800      	cmp	r0, #0
 800082c:	d099      	beq.n	8000762 <__aeabi_fsub+0x252>
 800082e:	000c      	movs	r4, r1
 8000830:	4646      	mov	r6, r8
 8000832:	2200      	movs	r2, #0
 8000834:	e6b7      	b.n	80005a6 <__aeabi_fsub+0x96>
 8000836:	4646      	mov	r6, r8
 8000838:	2200      	movs	r2, #0
 800083a:	e6b4      	b.n	80005a6 <__aeabi_fsub+0x96>
 800083c:	2b00      	cmp	r3, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fsub+0x332>
 8000840:	e73f      	b.n	80006c2 <__aeabi_fsub+0x1b2>
 8000842:	2400      	movs	r4, #0
 8000844:	2600      	movs	r6, #0
 8000846:	e6ae      	b.n	80005a6 <__aeabi_fsub+0x96>
 8000848:	fbffffff 	.word	0xfbffffff
 800084c:	7dffffff 	.word	0x7dffffff

08000850 <__aeabi_f2iz>:
 8000850:	0241      	lsls	r1, r0, #9
 8000852:	0042      	lsls	r2, r0, #1
 8000854:	0fc3      	lsrs	r3, r0, #31
 8000856:	0a49      	lsrs	r1, r1, #9
 8000858:	2000      	movs	r0, #0
 800085a:	0e12      	lsrs	r2, r2, #24
 800085c:	2a7e      	cmp	r2, #126	; 0x7e
 800085e:	dd03      	ble.n	8000868 <__aeabi_f2iz+0x18>
 8000860:	2a9d      	cmp	r2, #157	; 0x9d
 8000862:	dd02      	ble.n	800086a <__aeabi_f2iz+0x1a>
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <__aeabi_f2iz+0x3c>)
 8000866:	1898      	adds	r0, r3, r2
 8000868:	4770      	bx	lr
 800086a:	2080      	movs	r0, #128	; 0x80
 800086c:	0400      	lsls	r0, r0, #16
 800086e:	4301      	orrs	r1, r0
 8000870:	2a95      	cmp	r2, #149	; 0x95
 8000872:	dc07      	bgt.n	8000884 <__aeabi_f2iz+0x34>
 8000874:	2096      	movs	r0, #150	; 0x96
 8000876:	1a82      	subs	r2, r0, r2
 8000878:	40d1      	lsrs	r1, r2
 800087a:	4248      	negs	r0, r1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f3      	bne.n	8000868 <__aeabi_f2iz+0x18>
 8000880:	0008      	movs	r0, r1
 8000882:	e7f1      	b.n	8000868 <__aeabi_f2iz+0x18>
 8000884:	3a96      	subs	r2, #150	; 0x96
 8000886:	4091      	lsls	r1, r2
 8000888:	e7f7      	b.n	800087a <__aeabi_f2iz+0x2a>
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	7fffffff 	.word	0x7fffffff

08000890 <__aeabi_dmul>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4645      	mov	r5, r8
 8000894:	46de      	mov	lr, fp
 8000896:	4657      	mov	r7, sl
 8000898:	464e      	mov	r6, r9
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	001f      	movs	r7, r3
 800089e:	030b      	lsls	r3, r1, #12
 80008a0:	0b1b      	lsrs	r3, r3, #12
 80008a2:	469b      	mov	fp, r3
 80008a4:	004d      	lsls	r5, r1, #1
 80008a6:	0fcb      	lsrs	r3, r1, #31
 80008a8:	0004      	movs	r4, r0
 80008aa:	4691      	mov	r9, r2
 80008ac:	4698      	mov	r8, r3
 80008ae:	b087      	sub	sp, #28
 80008b0:	0d6d      	lsrs	r5, r5, #21
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dmul+0x26>
 80008b4:	e1cd      	b.n	8000c52 <__aeabi_dmul+0x3c2>
 80008b6:	4bce      	ldr	r3, [pc, #824]	; (8000bf0 <__aeabi_dmul+0x360>)
 80008b8:	429d      	cmp	r5, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dmul+0x2e>
 80008bc:	e1e9      	b.n	8000c92 <__aeabi_dmul+0x402>
 80008be:	465a      	mov	r2, fp
 80008c0:	0f43      	lsrs	r3, r0, #29
 80008c2:	00d2      	lsls	r2, r2, #3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	0412      	lsls	r2, r2, #16
 80008ca:	431a      	orrs	r2, r3
 80008cc:	00c3      	lsls	r3, r0, #3
 80008ce:	469a      	mov	sl, r3
 80008d0:	4bc8      	ldr	r3, [pc, #800]	; (8000bf4 <__aeabi_dmul+0x364>)
 80008d2:	4693      	mov	fp, r2
 80008d4:	469c      	mov	ip, r3
 80008d6:	2300      	movs	r3, #0
 80008d8:	2600      	movs	r6, #0
 80008da:	4465      	add	r5, ip
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	033c      	lsls	r4, r7, #12
 80008e0:	007b      	lsls	r3, r7, #1
 80008e2:	4648      	mov	r0, r9
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	0d5b      	lsrs	r3, r3, #21
 80008e8:	0fff      	lsrs	r7, r7, #31
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dmul+0x60>
 80008ee:	e189      	b.n	8000c04 <__aeabi_dmul+0x374>
 80008f0:	4abf      	ldr	r2, [pc, #764]	; (8000bf0 <__aeabi_dmul+0x360>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d019      	beq.n	800092a <__aeabi_dmul+0x9a>
 80008f6:	0f42      	lsrs	r2, r0, #29
 80008f8:	00e4      	lsls	r4, r4, #3
 80008fa:	4322      	orrs	r2, r4
 80008fc:	2480      	movs	r4, #128	; 0x80
 80008fe:	0424      	lsls	r4, r4, #16
 8000900:	4314      	orrs	r4, r2
 8000902:	4abc      	ldr	r2, [pc, #752]	; (8000bf4 <__aeabi_dmul+0x364>)
 8000904:	2100      	movs	r1, #0
 8000906:	4694      	mov	ip, r2
 8000908:	4642      	mov	r2, r8
 800090a:	4463      	add	r3, ip
 800090c:	195b      	adds	r3, r3, r5
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b01      	ldr	r3, [sp, #4]
 8000912:	407a      	eors	r2, r7
 8000914:	3301      	adds	r3, #1
 8000916:	00c0      	lsls	r0, r0, #3
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2e0a      	cmp	r6, #10
 800091e:	dd1c      	ble.n	800095a <__aeabi_dmul+0xca>
 8000920:	003a      	movs	r2, r7
 8000922:	2e0b      	cmp	r6, #11
 8000924:	d05e      	beq.n	80009e4 <__aeabi_dmul+0x154>
 8000926:	4647      	mov	r7, r8
 8000928:	e056      	b.n	80009d8 <__aeabi_dmul+0x148>
 800092a:	4649      	mov	r1, r9
 800092c:	4bb0      	ldr	r3, [pc, #704]	; (8000bf0 <__aeabi_dmul+0x360>)
 800092e:	4321      	orrs	r1, r4
 8000930:	18eb      	adds	r3, r5, r3
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	2900      	cmp	r1, #0
 8000936:	d12a      	bne.n	800098e <__aeabi_dmul+0xfe>
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	2202      	movs	r2, #2
 800093c:	0100      	lsls	r0, r0, #4
 800093e:	002b      	movs	r3, r5
 8000940:	4684      	mov	ip, r0
 8000942:	4316      	orrs	r6, r2
 8000944:	4642      	mov	r2, r8
 8000946:	4463      	add	r3, ip
 8000948:	407a      	eors	r2, r7
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2e0a      	cmp	r6, #10
 8000950:	dd00      	ble.n	8000954 <__aeabi_dmul+0xc4>
 8000952:	e231      	b.n	8000db8 <__aeabi_dmul+0x528>
 8000954:	2000      	movs	r0, #0
 8000956:	2400      	movs	r4, #0
 8000958:	2102      	movs	r1, #2
 800095a:	2e02      	cmp	r6, #2
 800095c:	dc26      	bgt.n	80009ac <__aeabi_dmul+0x11c>
 800095e:	3e01      	subs	r6, #1
 8000960:	2e01      	cmp	r6, #1
 8000962:	d852      	bhi.n	8000a0a <__aeabi_dmul+0x17a>
 8000964:	2902      	cmp	r1, #2
 8000966:	d04c      	beq.n	8000a02 <__aeabi_dmul+0x172>
 8000968:	2901      	cmp	r1, #1
 800096a:	d000      	beq.n	800096e <__aeabi_dmul+0xde>
 800096c:	e118      	b.n	8000ba0 <__aeabi_dmul+0x310>
 800096e:	2300      	movs	r3, #0
 8000970:	2400      	movs	r4, #0
 8000972:	2500      	movs	r5, #0
 8000974:	051b      	lsls	r3, r3, #20
 8000976:	4323      	orrs	r3, r4
 8000978:	07d2      	lsls	r2, r2, #31
 800097a:	4313      	orrs	r3, r2
 800097c:	0028      	movs	r0, r5
 800097e:	0019      	movs	r1, r3
 8000980:	b007      	add	sp, #28
 8000982:	bcf0      	pop	{r4, r5, r6, r7}
 8000984:	46bb      	mov	fp, r7
 8000986:	46b2      	mov	sl, r6
 8000988:	46a9      	mov	r9, r5
 800098a:	46a0      	mov	r8, r4
 800098c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	2203      	movs	r2, #3
 8000992:	0109      	lsls	r1, r1, #4
 8000994:	002b      	movs	r3, r5
 8000996:	468c      	mov	ip, r1
 8000998:	4316      	orrs	r6, r2
 800099a:	4642      	mov	r2, r8
 800099c:	4463      	add	r3, ip
 800099e:	407a      	eors	r2, r7
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	2e0a      	cmp	r6, #10
 80009a6:	dd00      	ble.n	80009aa <__aeabi_dmul+0x11a>
 80009a8:	e228      	b.n	8000dfc <__aeabi_dmul+0x56c>
 80009aa:	2103      	movs	r1, #3
 80009ac:	2501      	movs	r5, #1
 80009ae:	40b5      	lsls	r5, r6
 80009b0:	46ac      	mov	ip, r5
 80009b2:	26a6      	movs	r6, #166	; 0xa6
 80009b4:	4663      	mov	r3, ip
 80009b6:	00f6      	lsls	r6, r6, #3
 80009b8:	4035      	ands	r5, r6
 80009ba:	4233      	tst	r3, r6
 80009bc:	d10b      	bne.n	80009d6 <__aeabi_dmul+0x146>
 80009be:	2690      	movs	r6, #144	; 0x90
 80009c0:	00b6      	lsls	r6, r6, #2
 80009c2:	4233      	tst	r3, r6
 80009c4:	d118      	bne.n	80009f8 <__aeabi_dmul+0x168>
 80009c6:	3eb9      	subs	r6, #185	; 0xb9
 80009c8:	3eff      	subs	r6, #255	; 0xff
 80009ca:	421e      	tst	r6, r3
 80009cc:	d01d      	beq.n	8000a0a <__aeabi_dmul+0x17a>
 80009ce:	46a3      	mov	fp, r4
 80009d0:	4682      	mov	sl, r0
 80009d2:	9100      	str	r1, [sp, #0]
 80009d4:	e000      	b.n	80009d8 <__aeabi_dmul+0x148>
 80009d6:	0017      	movs	r7, r2
 80009d8:	9900      	ldr	r1, [sp, #0]
 80009da:	003a      	movs	r2, r7
 80009dc:	2902      	cmp	r1, #2
 80009de:	d010      	beq.n	8000a02 <__aeabi_dmul+0x172>
 80009e0:	465c      	mov	r4, fp
 80009e2:	4650      	mov	r0, sl
 80009e4:	2903      	cmp	r1, #3
 80009e6:	d1bf      	bne.n	8000968 <__aeabi_dmul+0xd8>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	031b      	lsls	r3, r3, #12
 80009ec:	431c      	orrs	r4, r3
 80009ee:	0324      	lsls	r4, r4, #12
 80009f0:	0005      	movs	r5, r0
 80009f2:	4b7f      	ldr	r3, [pc, #508]	; (8000bf0 <__aeabi_dmul+0x360>)
 80009f4:	0b24      	lsrs	r4, r4, #12
 80009f6:	e7bd      	b.n	8000974 <__aeabi_dmul+0xe4>
 80009f8:	2480      	movs	r4, #128	; 0x80
 80009fa:	2200      	movs	r2, #0
 80009fc:	4b7c      	ldr	r3, [pc, #496]	; (8000bf0 <__aeabi_dmul+0x360>)
 80009fe:	0324      	lsls	r4, r4, #12
 8000a00:	e7b8      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000a02:	2400      	movs	r4, #0
 8000a04:	2500      	movs	r5, #0
 8000a06:	4b7a      	ldr	r3, [pc, #488]	; (8000bf0 <__aeabi_dmul+0x360>)
 8000a08:	e7b4      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	041e      	lsls	r6, r3, #16
 8000a0e:	0c36      	lsrs	r6, r6, #16
 8000a10:	0c1f      	lsrs	r7, r3, #16
 8000a12:	0033      	movs	r3, r6
 8000a14:	0c01      	lsrs	r1, r0, #16
 8000a16:	0400      	lsls	r0, r0, #16
 8000a18:	0c00      	lsrs	r0, r0, #16
 8000a1a:	4343      	muls	r3, r0
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	0003      	movs	r3, r0
 8000a20:	437b      	muls	r3, r7
 8000a22:	4699      	mov	r9, r3
 8000a24:	0033      	movs	r3, r6
 8000a26:	434b      	muls	r3, r1
 8000a28:	469c      	mov	ip, r3
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	000d      	movs	r5, r1
 8000a2e:	0c1b      	lsrs	r3, r3, #16
 8000a30:	469a      	mov	sl, r3
 8000a32:	437d      	muls	r5, r7
 8000a34:	44cc      	add	ip, r9
 8000a36:	44d4      	add	ip, sl
 8000a38:	9500      	str	r5, [sp, #0]
 8000a3a:	45e1      	cmp	r9, ip
 8000a3c:	d904      	bls.n	8000a48 <__aeabi_dmul+0x1b8>
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	025b      	lsls	r3, r3, #9
 8000a42:	4699      	mov	r9, r3
 8000a44:	444d      	add	r5, r9
 8000a46:	9500      	str	r5, [sp, #0]
 8000a48:	4663      	mov	r3, ip
 8000a4a:	0c1b      	lsrs	r3, r3, #16
 8000a4c:	001d      	movs	r5, r3
 8000a4e:	4663      	mov	r3, ip
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	469c      	mov	ip, r3
 8000a54:	4643      	mov	r3, r8
 8000a56:	041b      	lsls	r3, r3, #16
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	4443      	add	r3, r8
 8000a60:	9303      	str	r3, [sp, #12]
 8000a62:	0c23      	lsrs	r3, r4, #16
 8000a64:	4698      	mov	r8, r3
 8000a66:	0033      	movs	r3, r6
 8000a68:	0424      	lsls	r4, r4, #16
 8000a6a:	0c24      	lsrs	r4, r4, #16
 8000a6c:	4363      	muls	r3, r4
 8000a6e:	469c      	mov	ip, r3
 8000a70:	0023      	movs	r3, r4
 8000a72:	437b      	muls	r3, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	4643      	mov	r3, r8
 8000a78:	435e      	muls	r6, r3
 8000a7a:	435f      	muls	r7, r3
 8000a7c:	444e      	add	r6, r9
 8000a7e:	4663      	mov	r3, ip
 8000a80:	46b2      	mov	sl, r6
 8000a82:	0c1e      	lsrs	r6, r3, #16
 8000a84:	4456      	add	r6, sl
 8000a86:	45b1      	cmp	r9, r6
 8000a88:	d903      	bls.n	8000a92 <__aeabi_dmul+0x202>
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	4699      	mov	r9, r3
 8000a90:	444f      	add	r7, r9
 8000a92:	0c33      	lsrs	r3, r6, #16
 8000a94:	4699      	mov	r9, r3
 8000a96:	003b      	movs	r3, r7
 8000a98:	444b      	add	r3, r9
 8000a9a:	9305      	str	r3, [sp, #20]
 8000a9c:	4663      	mov	r3, ip
 8000a9e:	46ac      	mov	ip, r5
 8000aa0:	041f      	lsls	r7, r3, #16
 8000aa2:	0c3f      	lsrs	r7, r7, #16
 8000aa4:	0436      	lsls	r6, r6, #16
 8000aa6:	19f6      	adds	r6, r6, r7
 8000aa8:	44b4      	add	ip, r6
 8000aaa:	4663      	mov	r3, ip
 8000aac:	9304      	str	r3, [sp, #16]
 8000aae:	465b      	mov	r3, fp
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	465b      	mov	r3, fp
 8000ab6:	041f      	lsls	r7, r3, #16
 8000ab8:	0c3f      	lsrs	r7, r7, #16
 8000aba:	003b      	movs	r3, r7
 8000abc:	4343      	muls	r3, r0
 8000abe:	4699      	mov	r9, r3
 8000ac0:	4663      	mov	r3, ip
 8000ac2:	4343      	muls	r3, r0
 8000ac4:	469a      	mov	sl, r3
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	4660      	mov	r0, ip
 8000aca:	0c1b      	lsrs	r3, r3, #16
 8000acc:	469b      	mov	fp, r3
 8000ace:	4348      	muls	r0, r1
 8000ad0:	4379      	muls	r1, r7
 8000ad2:	4451      	add	r1, sl
 8000ad4:	4459      	add	r1, fp
 8000ad6:	458a      	cmp	sl, r1
 8000ad8:	d903      	bls.n	8000ae2 <__aeabi_dmul+0x252>
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	025b      	lsls	r3, r3, #9
 8000ade:	469a      	mov	sl, r3
 8000ae0:	4450      	add	r0, sl
 8000ae2:	0c0b      	lsrs	r3, r1, #16
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	041b      	lsls	r3, r3, #16
 8000aea:	0c1b      	lsrs	r3, r3, #16
 8000aec:	4699      	mov	r9, r3
 8000aee:	003b      	movs	r3, r7
 8000af0:	4363      	muls	r3, r4
 8000af2:	0409      	lsls	r1, r1, #16
 8000af4:	4645      	mov	r5, r8
 8000af6:	4449      	add	r1, r9
 8000af8:	4699      	mov	r9, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	435c      	muls	r4, r3
 8000afe:	436b      	muls	r3, r5
 8000b00:	469c      	mov	ip, r3
 8000b02:	464b      	mov	r3, r9
 8000b04:	0c1b      	lsrs	r3, r3, #16
 8000b06:	4698      	mov	r8, r3
 8000b08:	436f      	muls	r7, r5
 8000b0a:	193f      	adds	r7, r7, r4
 8000b0c:	4447      	add	r7, r8
 8000b0e:	4450      	add	r0, sl
 8000b10:	42bc      	cmp	r4, r7
 8000b12:	d903      	bls.n	8000b1c <__aeabi_dmul+0x28c>
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	4698      	mov	r8, r3
 8000b1a:	44c4      	add	ip, r8
 8000b1c:	9b04      	ldr	r3, [sp, #16]
 8000b1e:	9d00      	ldr	r5, [sp, #0]
 8000b20:	4698      	mov	r8, r3
 8000b22:	4445      	add	r5, r8
 8000b24:	42b5      	cmp	r5, r6
 8000b26:	41b6      	sbcs	r6, r6
 8000b28:	4273      	negs	r3, r6
 8000b2a:	4698      	mov	r8, r3
 8000b2c:	464b      	mov	r3, r9
 8000b2e:	041e      	lsls	r6, r3, #16
 8000b30:	9b05      	ldr	r3, [sp, #20]
 8000b32:	043c      	lsls	r4, r7, #16
 8000b34:	4699      	mov	r9, r3
 8000b36:	0c36      	lsrs	r6, r6, #16
 8000b38:	19a4      	adds	r4, r4, r6
 8000b3a:	444c      	add	r4, r9
 8000b3c:	46a1      	mov	r9, r4
 8000b3e:	4683      	mov	fp, r0
 8000b40:	186e      	adds	r6, r5, r1
 8000b42:	44c1      	add	r9, r8
 8000b44:	428e      	cmp	r6, r1
 8000b46:	4189      	sbcs	r1, r1
 8000b48:	44cb      	add	fp, r9
 8000b4a:	465d      	mov	r5, fp
 8000b4c:	4249      	negs	r1, r1
 8000b4e:	186d      	adds	r5, r5, r1
 8000b50:	429c      	cmp	r4, r3
 8000b52:	41a4      	sbcs	r4, r4
 8000b54:	45c1      	cmp	r9, r8
 8000b56:	419b      	sbcs	r3, r3
 8000b58:	4583      	cmp	fp, r0
 8000b5a:	4180      	sbcs	r0, r0
 8000b5c:	428d      	cmp	r5, r1
 8000b5e:	4189      	sbcs	r1, r1
 8000b60:	425b      	negs	r3, r3
 8000b62:	4264      	negs	r4, r4
 8000b64:	431c      	orrs	r4, r3
 8000b66:	4240      	negs	r0, r0
 8000b68:	9b03      	ldr	r3, [sp, #12]
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	4301      	orrs	r1, r0
 8000b6e:	0270      	lsls	r0, r6, #9
 8000b70:	0c3f      	lsrs	r7, r7, #16
 8000b72:	4318      	orrs	r0, r3
 8000b74:	19e4      	adds	r4, r4, r7
 8000b76:	1e47      	subs	r7, r0, #1
 8000b78:	41b8      	sbcs	r0, r7
 8000b7a:	1864      	adds	r4, r4, r1
 8000b7c:	4464      	add	r4, ip
 8000b7e:	0df6      	lsrs	r6, r6, #23
 8000b80:	0261      	lsls	r1, r4, #9
 8000b82:	4330      	orrs	r0, r6
 8000b84:	0dec      	lsrs	r4, r5, #23
 8000b86:	026e      	lsls	r6, r5, #9
 8000b88:	430c      	orrs	r4, r1
 8000b8a:	4330      	orrs	r0, r6
 8000b8c:	01c9      	lsls	r1, r1, #7
 8000b8e:	d400      	bmi.n	8000b92 <__aeabi_dmul+0x302>
 8000b90:	e0f1      	b.n	8000d76 <__aeabi_dmul+0x4e6>
 8000b92:	2101      	movs	r1, #1
 8000b94:	0843      	lsrs	r3, r0, #1
 8000b96:	4001      	ands	r1, r0
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	07e0      	lsls	r0, r4, #31
 8000b9c:	4318      	orrs	r0, r3
 8000b9e:	0864      	lsrs	r4, r4, #1
 8000ba0:	4915      	ldr	r1, [pc, #84]	; (8000bf8 <__aeabi_dmul+0x368>)
 8000ba2:	9b02      	ldr	r3, [sp, #8]
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	4463      	add	r3, ip
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dc00      	bgt.n	8000bae <__aeabi_dmul+0x31e>
 8000bac:	e097      	b.n	8000cde <__aeabi_dmul+0x44e>
 8000bae:	0741      	lsls	r1, r0, #29
 8000bb0:	d009      	beq.n	8000bc6 <__aeabi_dmul+0x336>
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	4001      	ands	r1, r0
 8000bb6:	2904      	cmp	r1, #4
 8000bb8:	d005      	beq.n	8000bc6 <__aeabi_dmul+0x336>
 8000bba:	1d01      	adds	r1, r0, #4
 8000bbc:	4281      	cmp	r1, r0
 8000bbe:	4180      	sbcs	r0, r0
 8000bc0:	4240      	negs	r0, r0
 8000bc2:	1824      	adds	r4, r4, r0
 8000bc4:	0008      	movs	r0, r1
 8000bc6:	01e1      	lsls	r1, r4, #7
 8000bc8:	d506      	bpl.n	8000bd8 <__aeabi_dmul+0x348>
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	00c9      	lsls	r1, r1, #3
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <__aeabi_dmul+0x36c>)
 8000bd2:	401c      	ands	r4, r3
 8000bd4:	9b02      	ldr	r3, [sp, #8]
 8000bd6:	4463      	add	r3, ip
 8000bd8:	4909      	ldr	r1, [pc, #36]	; (8000c00 <__aeabi_dmul+0x370>)
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_dmul+0x350>
 8000bde:	e710      	b.n	8000a02 <__aeabi_dmul+0x172>
 8000be0:	0761      	lsls	r1, r4, #29
 8000be2:	08c5      	lsrs	r5, r0, #3
 8000be4:	0264      	lsls	r4, r4, #9
 8000be6:	055b      	lsls	r3, r3, #21
 8000be8:	430d      	orrs	r5, r1
 8000bea:	0b24      	lsrs	r4, r4, #12
 8000bec:	0d5b      	lsrs	r3, r3, #21
 8000bee:	e6c1      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000bf0:	000007ff 	.word	0x000007ff
 8000bf4:	fffffc01 	.word	0xfffffc01
 8000bf8:	000003ff 	.word	0x000003ff
 8000bfc:	feffffff 	.word	0xfeffffff
 8000c00:	000007fe 	.word	0x000007fe
 8000c04:	464b      	mov	r3, r9
 8000c06:	4323      	orrs	r3, r4
 8000c08:	d059      	beq.n	8000cbe <__aeabi_dmul+0x42e>
 8000c0a:	2c00      	cmp	r4, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dmul+0x380>
 8000c0e:	e0a3      	b.n	8000d58 <__aeabi_dmul+0x4c8>
 8000c10:	0020      	movs	r0, r4
 8000c12:	f000 f9ef 	bl	8000ff4 <__clzsi2>
 8000c16:	0001      	movs	r1, r0
 8000c18:	0003      	movs	r3, r0
 8000c1a:	390b      	subs	r1, #11
 8000c1c:	221d      	movs	r2, #29
 8000c1e:	1a52      	subs	r2, r2, r1
 8000c20:	4649      	mov	r1, r9
 8000c22:	0018      	movs	r0, r3
 8000c24:	40d1      	lsrs	r1, r2
 8000c26:	464a      	mov	r2, r9
 8000c28:	3808      	subs	r0, #8
 8000c2a:	4082      	lsls	r2, r0
 8000c2c:	4084      	lsls	r4, r0
 8000c2e:	0010      	movs	r0, r2
 8000c30:	430c      	orrs	r4, r1
 8000c32:	4a74      	ldr	r2, [pc, #464]	; (8000e04 <__aeabi_dmul+0x574>)
 8000c34:	1aeb      	subs	r3, r5, r3
 8000c36:	4694      	mov	ip, r2
 8000c38:	4642      	mov	r2, r8
 8000c3a:	4463      	add	r3, ip
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	9b01      	ldr	r3, [sp, #4]
 8000c40:	407a      	eors	r2, r7
 8000c42:	3301      	adds	r3, #1
 8000c44:	2100      	movs	r1, #0
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	9302      	str	r3, [sp, #8]
 8000c4a:	2e0a      	cmp	r6, #10
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dmul+0x3c0>
 8000c4e:	e667      	b.n	8000920 <__aeabi_dmul+0x90>
 8000c50:	e683      	b.n	800095a <__aeabi_dmul+0xca>
 8000c52:	465b      	mov	r3, fp
 8000c54:	4303      	orrs	r3, r0
 8000c56:	469a      	mov	sl, r3
 8000c58:	d02a      	beq.n	8000cb0 <__aeabi_dmul+0x420>
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d06d      	beq.n	8000d3c <__aeabi_dmul+0x4ac>
 8000c60:	4658      	mov	r0, fp
 8000c62:	f000 f9c7 	bl	8000ff4 <__clzsi2>
 8000c66:	0001      	movs	r1, r0
 8000c68:	0003      	movs	r3, r0
 8000c6a:	390b      	subs	r1, #11
 8000c6c:	221d      	movs	r2, #29
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	0021      	movs	r1, r4
 8000c72:	0018      	movs	r0, r3
 8000c74:	465d      	mov	r5, fp
 8000c76:	40d1      	lsrs	r1, r2
 8000c78:	3808      	subs	r0, #8
 8000c7a:	4085      	lsls	r5, r0
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	4084      	lsls	r4, r0
 8000c80:	432a      	orrs	r2, r5
 8000c82:	4693      	mov	fp, r2
 8000c84:	46a2      	mov	sl, r4
 8000c86:	4d5f      	ldr	r5, [pc, #380]	; (8000e04 <__aeabi_dmul+0x574>)
 8000c88:	2600      	movs	r6, #0
 8000c8a:	1aed      	subs	r5, r5, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	e625      	b.n	80008de <__aeabi_dmul+0x4e>
 8000c92:	465b      	mov	r3, fp
 8000c94:	4303      	orrs	r3, r0
 8000c96:	469a      	mov	sl, r3
 8000c98:	d105      	bne.n	8000ca6 <__aeabi_dmul+0x416>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	469b      	mov	fp, r3
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	2608      	movs	r6, #8
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	e61b      	b.n	80008de <__aeabi_dmul+0x4e>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	4682      	mov	sl, r0
 8000caa:	260c      	movs	r6, #12
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	e616      	b.n	80008de <__aeabi_dmul+0x4e>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	2604      	movs	r6, #4
 8000cb8:	2500      	movs	r5, #0
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	e60f      	b.n	80008de <__aeabi_dmul+0x4e>
 8000cbe:	4642      	mov	r2, r8
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	9501      	str	r5, [sp, #4]
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	407a      	eors	r2, r7
 8000cca:	3301      	adds	r3, #1
 8000ccc:	2400      	movs	r4, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	2e0a      	cmp	r6, #10
 8000cd8:	dd00      	ble.n	8000cdc <__aeabi_dmul+0x44c>
 8000cda:	e621      	b.n	8000920 <__aeabi_dmul+0x90>
 8000cdc:	e63d      	b.n	800095a <__aeabi_dmul+0xca>
 8000cde:	2101      	movs	r1, #1
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	2938      	cmp	r1, #56	; 0x38
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_dmul+0x458>
 8000ce6:	e642      	b.n	800096e <__aeabi_dmul+0xde>
 8000ce8:	291f      	cmp	r1, #31
 8000cea:	dd47      	ble.n	8000d7c <__aeabi_dmul+0x4ec>
 8000cec:	261f      	movs	r6, #31
 8000cee:	0025      	movs	r5, r4
 8000cf0:	4276      	negs	r6, r6
 8000cf2:	1af3      	subs	r3, r6, r3
 8000cf4:	40dd      	lsrs	r5, r3
 8000cf6:	002b      	movs	r3, r5
 8000cf8:	2920      	cmp	r1, #32
 8000cfa:	d005      	beq.n	8000d08 <__aeabi_dmul+0x478>
 8000cfc:	4942      	ldr	r1, [pc, #264]	; (8000e08 <__aeabi_dmul+0x578>)
 8000cfe:	9d02      	ldr	r5, [sp, #8]
 8000d00:	468c      	mov	ip, r1
 8000d02:	4465      	add	r5, ip
 8000d04:	40ac      	lsls	r4, r5
 8000d06:	4320      	orrs	r0, r4
 8000d08:	1e41      	subs	r1, r0, #1
 8000d0a:	4188      	sbcs	r0, r1
 8000d0c:	4318      	orrs	r0, r3
 8000d0e:	2307      	movs	r3, #7
 8000d10:	001d      	movs	r5, r3
 8000d12:	2400      	movs	r4, #0
 8000d14:	4005      	ands	r5, r0
 8000d16:	4203      	tst	r3, r0
 8000d18:	d04a      	beq.n	8000db0 <__aeabi_dmul+0x520>
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	4003      	ands	r3, r0
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d042      	beq.n	8000daa <__aeabi_dmul+0x51a>
 8000d24:	1d03      	adds	r3, r0, #4
 8000d26:	4283      	cmp	r3, r0
 8000d28:	4180      	sbcs	r0, r0
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	1824      	adds	r4, r4, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	0223      	lsls	r3, r4, #8
 8000d32:	d53a      	bpl.n	8000daa <__aeabi_dmul+0x51a>
 8000d34:	2301      	movs	r3, #1
 8000d36:	2400      	movs	r4, #0
 8000d38:	2500      	movs	r5, #0
 8000d3a:	e61b      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000d3c:	f000 f95a 	bl	8000ff4 <__clzsi2>
 8000d40:	0001      	movs	r1, r0
 8000d42:	0003      	movs	r3, r0
 8000d44:	3115      	adds	r1, #21
 8000d46:	3320      	adds	r3, #32
 8000d48:	291c      	cmp	r1, #28
 8000d4a:	dd8f      	ble.n	8000c6c <__aeabi_dmul+0x3dc>
 8000d4c:	3808      	subs	r0, #8
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4084      	lsls	r4, r0
 8000d52:	4692      	mov	sl, r2
 8000d54:	46a3      	mov	fp, r4
 8000d56:	e796      	b.n	8000c86 <__aeabi_dmul+0x3f6>
 8000d58:	f000 f94c 	bl	8000ff4 <__clzsi2>
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	0003      	movs	r3, r0
 8000d60:	3115      	adds	r1, #21
 8000d62:	3320      	adds	r3, #32
 8000d64:	291c      	cmp	r1, #28
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_dmul+0x4da>
 8000d68:	e758      	b.n	8000c1c <__aeabi_dmul+0x38c>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	464c      	mov	r4, r9
 8000d6e:	3a08      	subs	r2, #8
 8000d70:	2000      	movs	r0, #0
 8000d72:	4094      	lsls	r4, r2
 8000d74:	e75d      	b.n	8000c32 <__aeabi_dmul+0x3a2>
 8000d76:	9b01      	ldr	r3, [sp, #4]
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	e711      	b.n	8000ba0 <__aeabi_dmul+0x310>
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <__aeabi_dmul+0x57c>)
 8000d7e:	0026      	movs	r6, r4
 8000d80:	469c      	mov	ip, r3
 8000d82:	0003      	movs	r3, r0
 8000d84:	9d02      	ldr	r5, [sp, #8]
 8000d86:	40cb      	lsrs	r3, r1
 8000d88:	4465      	add	r5, ip
 8000d8a:	40ae      	lsls	r6, r5
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0003      	movs	r3, r0
 8000d90:	40ab      	lsls	r3, r5
 8000d92:	1e58      	subs	r0, r3, #1
 8000d94:	4183      	sbcs	r3, r0
 8000d96:	0030      	movs	r0, r6
 8000d98:	4318      	orrs	r0, r3
 8000d9a:	40cc      	lsrs	r4, r1
 8000d9c:	0743      	lsls	r3, r0, #29
 8000d9e:	d0c7      	beq.n	8000d30 <__aeabi_dmul+0x4a0>
 8000da0:	230f      	movs	r3, #15
 8000da2:	4003      	ands	r3, r0
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d1bd      	bne.n	8000d24 <__aeabi_dmul+0x494>
 8000da8:	e7c2      	b.n	8000d30 <__aeabi_dmul+0x4a0>
 8000daa:	0765      	lsls	r5, r4, #29
 8000dac:	0264      	lsls	r4, r4, #9
 8000dae:	0b24      	lsrs	r4, r4, #12
 8000db0:	08c0      	lsrs	r0, r0, #3
 8000db2:	2300      	movs	r3, #0
 8000db4:	4305      	orrs	r5, r0
 8000db6:	e5dd      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000db8:	2500      	movs	r5, #0
 8000dba:	2302      	movs	r3, #2
 8000dbc:	2e0f      	cmp	r6, #15
 8000dbe:	d10c      	bne.n	8000dda <__aeabi_dmul+0x54a>
 8000dc0:	2480      	movs	r4, #128	; 0x80
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	0324      	lsls	r4, r4, #12
 8000dc6:	4223      	tst	r3, r4
 8000dc8:	d00e      	beq.n	8000de8 <__aeabi_dmul+0x558>
 8000dca:	4221      	tst	r1, r4
 8000dcc:	d10c      	bne.n	8000de8 <__aeabi_dmul+0x558>
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	0324      	lsls	r4, r4, #12
 8000dd2:	003a      	movs	r2, r7
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <__aeabi_dmul+0x580>)
 8000dd6:	0b24      	lsrs	r4, r4, #12
 8000dd8:	e5cc      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000dda:	2e0b      	cmp	r6, #11
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dmul+0x550>
 8000dde:	e5a2      	b.n	8000926 <__aeabi_dmul+0x96>
 8000de0:	468b      	mov	fp, r1
 8000de2:	46aa      	mov	sl, r5
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	e5f7      	b.n	80009d8 <__aeabi_dmul+0x148>
 8000de8:	2480      	movs	r4, #128	; 0x80
 8000dea:	465b      	mov	r3, fp
 8000dec:	0324      	lsls	r4, r4, #12
 8000dee:	431c      	orrs	r4, r3
 8000df0:	0324      	lsls	r4, r4, #12
 8000df2:	4642      	mov	r2, r8
 8000df4:	4655      	mov	r5, sl
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <__aeabi_dmul+0x580>)
 8000df8:	0b24      	lsrs	r4, r4, #12
 8000dfa:	e5bb      	b.n	8000974 <__aeabi_dmul+0xe4>
 8000dfc:	464d      	mov	r5, r9
 8000dfe:	0021      	movs	r1, r4
 8000e00:	2303      	movs	r3, #3
 8000e02:	e7db      	b.n	8000dbc <__aeabi_dmul+0x52c>
 8000e04:	fffffc0d 	.word	0xfffffc0d
 8000e08:	0000043e 	.word	0x0000043e
 8000e0c:	0000041e 	.word	0x0000041e
 8000e10:	000007ff 	.word	0x000007ff

08000e14 <__aeabi_i2d>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d016      	beq.n	8000e48 <__aeabi_i2d+0x34>
 8000e1a:	17c3      	asrs	r3, r0, #31
 8000e1c:	18c5      	adds	r5, r0, r3
 8000e1e:	405d      	eors	r5, r3
 8000e20:	0fc4      	lsrs	r4, r0, #31
 8000e22:	0028      	movs	r0, r5
 8000e24:	f000 f8e6 	bl	8000ff4 <__clzsi2>
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <__aeabi_i2d+0x5c>)
 8000e2a:	1a1b      	subs	r3, r3, r0
 8000e2c:	280a      	cmp	r0, #10
 8000e2e:	dc16      	bgt.n	8000e5e <__aeabi_i2d+0x4a>
 8000e30:	0002      	movs	r2, r0
 8000e32:	002e      	movs	r6, r5
 8000e34:	3215      	adds	r2, #21
 8000e36:	4096      	lsls	r6, r2
 8000e38:	220b      	movs	r2, #11
 8000e3a:	1a12      	subs	r2, r2, r0
 8000e3c:	40d5      	lsrs	r5, r2
 8000e3e:	055b      	lsls	r3, r3, #21
 8000e40:	032d      	lsls	r5, r5, #12
 8000e42:	0b2d      	lsrs	r5, r5, #12
 8000e44:	0d5b      	lsrs	r3, r3, #21
 8000e46:	e003      	b.n	8000e50 <__aeabi_i2d+0x3c>
 8000e48:	2400      	movs	r4, #0
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2500      	movs	r5, #0
 8000e4e:	2600      	movs	r6, #0
 8000e50:	051b      	lsls	r3, r3, #20
 8000e52:	432b      	orrs	r3, r5
 8000e54:	07e4      	lsls	r4, r4, #31
 8000e56:	4323      	orrs	r3, r4
 8000e58:	0030      	movs	r0, r6
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
 8000e5e:	380b      	subs	r0, #11
 8000e60:	4085      	lsls	r5, r0
 8000e62:	055b      	lsls	r3, r3, #21
 8000e64:	032d      	lsls	r5, r5, #12
 8000e66:	2600      	movs	r6, #0
 8000e68:	0b2d      	lsrs	r5, r5, #12
 8000e6a:	0d5b      	lsrs	r3, r3, #21
 8000e6c:	e7f0      	b.n	8000e50 <__aeabi_i2d+0x3c>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	0000041e 	.word	0x0000041e

08000e74 <__aeabi_d2f>:
 8000e74:	0002      	movs	r2, r0
 8000e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e78:	004b      	lsls	r3, r1, #1
 8000e7a:	030d      	lsls	r5, r1, #12
 8000e7c:	0f40      	lsrs	r0, r0, #29
 8000e7e:	0d5b      	lsrs	r3, r3, #21
 8000e80:	0fcc      	lsrs	r4, r1, #31
 8000e82:	0a6d      	lsrs	r5, r5, #9
 8000e84:	493a      	ldr	r1, [pc, #232]	; (8000f70 <__aeabi_d2f+0xfc>)
 8000e86:	4305      	orrs	r5, r0
 8000e88:	1c58      	adds	r0, r3, #1
 8000e8a:	00d7      	lsls	r7, r2, #3
 8000e8c:	4208      	tst	r0, r1
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_d2f+0x32>
 8000e90:	4938      	ldr	r1, [pc, #224]	; (8000f74 <__aeabi_d2f+0x100>)
 8000e92:	1859      	adds	r1, r3, r1
 8000e94:	29fe      	cmp	r1, #254	; 0xfe
 8000e96:	dd16      	ble.n	8000ec6 <__aeabi_d2f+0x52>
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	05c0      	lsls	r0, r0, #23
 8000e9e:	4310      	orrs	r0, r2
 8000ea0:	07e4      	lsls	r4, r4, #31
 8000ea2:	4320      	orrs	r0, r4
 8000ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <__aeabi_d2f+0x44>
 8000eaa:	433d      	orrs	r5, r7
 8000eac:	d026      	beq.n	8000efc <__aeabi_d2f+0x88>
 8000eae:	2205      	movs	r2, #5
 8000eb0:	0192      	lsls	r2, r2, #6
 8000eb2:	0a52      	lsrs	r2, r2, #9
 8000eb4:	b2d8      	uxtb	r0, r3
 8000eb6:	e7f1      	b.n	8000e9c <__aeabi_d2f+0x28>
 8000eb8:	432f      	orrs	r7, r5
 8000eba:	d0ed      	beq.n	8000e98 <__aeabi_d2f+0x24>
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	03d2      	lsls	r2, r2, #15
 8000ec0:	20ff      	movs	r0, #255	; 0xff
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	e7ea      	b.n	8000e9c <__aeabi_d2f+0x28>
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	dd1b      	ble.n	8000f02 <__aeabi_d2f+0x8e>
 8000eca:	0192      	lsls	r2, r2, #6
 8000ecc:	1e50      	subs	r0, r2, #1
 8000ece:	4182      	sbcs	r2, r0
 8000ed0:	00ed      	lsls	r5, r5, #3
 8000ed2:	0f7f      	lsrs	r7, r7, #29
 8000ed4:	432a      	orrs	r2, r5
 8000ed6:	433a      	orrs	r2, r7
 8000ed8:	0753      	lsls	r3, r2, #29
 8000eda:	d047      	beq.n	8000f6c <__aeabi_d2f+0xf8>
 8000edc:	230f      	movs	r3, #15
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_d2f+0x72>
 8000ee4:	3204      	adds	r2, #4
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	04db      	lsls	r3, r3, #19
 8000eea:	4013      	ands	r3, r2
 8000eec:	d03e      	beq.n	8000f6c <__aeabi_d2f+0xf8>
 8000eee:	1c48      	adds	r0, r1, #1
 8000ef0:	29fe      	cmp	r1, #254	; 0xfe
 8000ef2:	d0d1      	beq.n	8000e98 <__aeabi_d2f+0x24>
 8000ef4:	0192      	lsls	r2, r2, #6
 8000ef6:	0a52      	lsrs	r2, r2, #9
 8000ef8:	b2c0      	uxtb	r0, r0
 8000efa:	e7cf      	b.n	8000e9c <__aeabi_d2f+0x28>
 8000efc:	2000      	movs	r0, #0
 8000efe:	2200      	movs	r2, #0
 8000f00:	e7cc      	b.n	8000e9c <__aeabi_d2f+0x28>
 8000f02:	000a      	movs	r2, r1
 8000f04:	3217      	adds	r2, #23
 8000f06:	db2f      	blt.n	8000f68 <__aeabi_d2f+0xf4>
 8000f08:	2680      	movs	r6, #128	; 0x80
 8000f0a:	0436      	lsls	r6, r6, #16
 8000f0c:	432e      	orrs	r6, r5
 8000f0e:	251e      	movs	r5, #30
 8000f10:	1a6d      	subs	r5, r5, r1
 8000f12:	2d1f      	cmp	r5, #31
 8000f14:	dd11      	ble.n	8000f3a <__aeabi_d2f+0xc6>
 8000f16:	2202      	movs	r2, #2
 8000f18:	4252      	negs	r2, r2
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	0031      	movs	r1, r6
 8000f1e:	40d1      	lsrs	r1, r2
 8000f20:	2d20      	cmp	r5, #32
 8000f22:	d004      	beq.n	8000f2e <__aeabi_d2f+0xba>
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <__aeabi_d2f+0x104>)
 8000f26:	4694      	mov	ip, r2
 8000f28:	4463      	add	r3, ip
 8000f2a:	409e      	lsls	r6, r3
 8000f2c:	4337      	orrs	r7, r6
 8000f2e:	003a      	movs	r2, r7
 8000f30:	1e53      	subs	r3, r2, #1
 8000f32:	419a      	sbcs	r2, r3
 8000f34:	430a      	orrs	r2, r1
 8000f36:	2100      	movs	r1, #0
 8000f38:	e7ce      	b.n	8000ed8 <__aeabi_d2f+0x64>
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <__aeabi_d2f+0x108>)
 8000f3c:	0038      	movs	r0, r7
 8000f3e:	4694      	mov	ip, r2
 8000f40:	4463      	add	r3, ip
 8000f42:	4098      	lsls	r0, r3
 8000f44:	003a      	movs	r2, r7
 8000f46:	1e41      	subs	r1, r0, #1
 8000f48:	4188      	sbcs	r0, r1
 8000f4a:	409e      	lsls	r6, r3
 8000f4c:	40ea      	lsrs	r2, r5
 8000f4e:	4330      	orrs	r0, r6
 8000f50:	4302      	orrs	r2, r0
 8000f52:	2100      	movs	r1, #0
 8000f54:	0753      	lsls	r3, r2, #29
 8000f56:	d1c1      	bne.n	8000edc <__aeabi_d2f+0x68>
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	04c9      	lsls	r1, r1, #19
 8000f5e:	2001      	movs	r0, #1
 8000f60:	400b      	ands	r3, r1
 8000f62:	420a      	tst	r2, r1
 8000f64:	d1c6      	bne.n	8000ef4 <__aeabi_d2f+0x80>
 8000f66:	e7a3      	b.n	8000eb0 <__aeabi_d2f+0x3c>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e7a0      	b.n	8000eae <__aeabi_d2f+0x3a>
 8000f6c:	000b      	movs	r3, r1
 8000f6e:	e79f      	b.n	8000eb0 <__aeabi_d2f+0x3c>
 8000f70:	000007fe 	.word	0x000007fe
 8000f74:	fffffc80 	.word	0xfffffc80
 8000f78:	fffffca2 	.word	0xfffffca2
 8000f7c:	fffffc82 	.word	0xfffffc82

08000f80 <__aeabi_cfrcmple>:
 8000f80:	4684      	mov	ip, r0
 8000f82:	0008      	movs	r0, r1
 8000f84:	4661      	mov	r1, ip
 8000f86:	e7ff      	b.n	8000f88 <__aeabi_cfcmpeq>

08000f88 <__aeabi_cfcmpeq>:
 8000f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f8a:	f000 f8bd 	bl	8001108 <__lesf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d401      	bmi.n	8000f96 <__aeabi_cfcmpeq+0xe>
 8000f92:	2100      	movs	r1, #0
 8000f94:	42c8      	cmn	r0, r1
 8000f96:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f98 <__aeabi_fcmpeq>:
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	f000 f849 	bl	8001030 <__eqsf2>
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	bd10      	pop	{r4, pc}

08000fa4 <__aeabi_fcmplt>:
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	f000 f8af 	bl	8001108 <__lesf2>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	db01      	blt.n	8000fb2 <__aeabi_fcmplt+0xe>
 8000fae:	2000      	movs	r0, #0
 8000fb0:	bd10      	pop	{r4, pc}
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	bd10      	pop	{r4, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)

08000fb8 <__aeabi_fcmple>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	f000 f8a5 	bl	8001108 <__lesf2>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	dd01      	ble.n	8000fc6 <__aeabi_fcmple+0xe>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	bd10      	pop	{r4, pc}
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)

08000fcc <__aeabi_fcmpgt>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	f000 f855 	bl	800107c <__gesf2>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	dc01      	bgt.n	8000fda <__aeabi_fcmpgt+0xe>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	2001      	movs	r0, #1
 8000fdc:	bd10      	pop	{r4, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)

08000fe0 <__aeabi_fcmpge>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	f000 f84b 	bl	800107c <__gesf2>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	da01      	bge.n	8000fee <__aeabi_fcmpge+0xe>
 8000fea:	2000      	movs	r0, #0
 8000fec:	bd10      	pop	{r4, pc}
 8000fee:	2001      	movs	r0, #1
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)

08000ff4 <__clzsi2>:
 8000ff4:	211c      	movs	r1, #28
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d301      	bcc.n	8001002 <__clzsi2+0xe>
 8000ffe:	0c00      	lsrs	r0, r0, #16
 8001000:	3910      	subs	r1, #16
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	4298      	cmp	r0, r3
 8001006:	d301      	bcc.n	800100c <__clzsi2+0x18>
 8001008:	0a00      	lsrs	r0, r0, #8
 800100a:	3908      	subs	r1, #8
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	4298      	cmp	r0, r3
 8001010:	d301      	bcc.n	8001016 <__clzsi2+0x22>
 8001012:	0900      	lsrs	r0, r0, #4
 8001014:	3904      	subs	r1, #4
 8001016:	a202      	add	r2, pc, #8	; (adr r2, 8001020 <__clzsi2+0x2c>)
 8001018:	5c10      	ldrb	r0, [r2, r0]
 800101a:	1840      	adds	r0, r0, r1
 800101c:	4770      	bx	lr
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	02020304 	.word	0x02020304
 8001024:	01010101 	.word	0x01010101
	...

08001030 <__eqsf2>:
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	0042      	lsls	r2, r0, #1
 8001034:	0245      	lsls	r5, r0, #9
 8001036:	024e      	lsls	r6, r1, #9
 8001038:	004c      	lsls	r4, r1, #1
 800103a:	0fc3      	lsrs	r3, r0, #31
 800103c:	0a6d      	lsrs	r5, r5, #9
 800103e:	2001      	movs	r0, #1
 8001040:	0e12      	lsrs	r2, r2, #24
 8001042:	0a76      	lsrs	r6, r6, #9
 8001044:	0e24      	lsrs	r4, r4, #24
 8001046:	0fc9      	lsrs	r1, r1, #31
 8001048:	2aff      	cmp	r2, #255	; 0xff
 800104a:	d006      	beq.n	800105a <__eqsf2+0x2a>
 800104c:	2cff      	cmp	r4, #255	; 0xff
 800104e:	d003      	beq.n	8001058 <__eqsf2+0x28>
 8001050:	42a2      	cmp	r2, r4
 8001052:	d101      	bne.n	8001058 <__eqsf2+0x28>
 8001054:	42b5      	cmp	r5, r6
 8001056:	d006      	beq.n	8001066 <__eqsf2+0x36>
 8001058:	bd70      	pop	{r4, r5, r6, pc}
 800105a:	2d00      	cmp	r5, #0
 800105c:	d1fc      	bne.n	8001058 <__eqsf2+0x28>
 800105e:	2cff      	cmp	r4, #255	; 0xff
 8001060:	d1fa      	bne.n	8001058 <__eqsf2+0x28>
 8001062:	2e00      	cmp	r6, #0
 8001064:	d1f8      	bne.n	8001058 <__eqsf2+0x28>
 8001066:	428b      	cmp	r3, r1
 8001068:	d006      	beq.n	8001078 <__eqsf2+0x48>
 800106a:	2001      	movs	r0, #1
 800106c:	2a00      	cmp	r2, #0
 800106e:	d1f3      	bne.n	8001058 <__eqsf2+0x28>
 8001070:	0028      	movs	r0, r5
 8001072:	1e43      	subs	r3, r0, #1
 8001074:	4198      	sbcs	r0, r3
 8001076:	e7ef      	b.n	8001058 <__eqsf2+0x28>
 8001078:	2000      	movs	r0, #0
 800107a:	e7ed      	b.n	8001058 <__eqsf2+0x28>

0800107c <__gesf2>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	0042      	lsls	r2, r0, #1
 8001080:	0245      	lsls	r5, r0, #9
 8001082:	024e      	lsls	r6, r1, #9
 8001084:	004c      	lsls	r4, r1, #1
 8001086:	0fc3      	lsrs	r3, r0, #31
 8001088:	0a6d      	lsrs	r5, r5, #9
 800108a:	0e12      	lsrs	r2, r2, #24
 800108c:	0a76      	lsrs	r6, r6, #9
 800108e:	0e24      	lsrs	r4, r4, #24
 8001090:	0fc8      	lsrs	r0, r1, #31
 8001092:	2aff      	cmp	r2, #255	; 0xff
 8001094:	d01b      	beq.n	80010ce <__gesf2+0x52>
 8001096:	2cff      	cmp	r4, #255	; 0xff
 8001098:	d00e      	beq.n	80010b8 <__gesf2+0x3c>
 800109a:	2a00      	cmp	r2, #0
 800109c:	d11b      	bne.n	80010d6 <__gesf2+0x5a>
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d101      	bne.n	80010a6 <__gesf2+0x2a>
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d01c      	beq.n	80010e0 <__gesf2+0x64>
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	d00c      	beq.n	80010c4 <__gesf2+0x48>
 80010aa:	4283      	cmp	r3, r0
 80010ac:	d01c      	beq.n	80010e8 <__gesf2+0x6c>
 80010ae:	2102      	movs	r1, #2
 80010b0:	1e58      	subs	r0, r3, #1
 80010b2:	4008      	ands	r0, r1
 80010b4:	3801      	subs	r0, #1
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	2e00      	cmp	r6, #0
 80010ba:	d122      	bne.n	8001102 <__gesf2+0x86>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d1f4      	bne.n	80010aa <__gesf2+0x2e>
 80010c0:	2d00      	cmp	r5, #0
 80010c2:	d1f2      	bne.n	80010aa <__gesf2+0x2e>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d1f6      	bne.n	80010b6 <__gesf2+0x3a>
 80010c8:	2001      	movs	r0, #1
 80010ca:	4240      	negs	r0, r0
 80010cc:	e7f3      	b.n	80010b6 <__gesf2+0x3a>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d117      	bne.n	8001102 <__gesf2+0x86>
 80010d2:	2cff      	cmp	r4, #255	; 0xff
 80010d4:	d0f0      	beq.n	80010b8 <__gesf2+0x3c>
 80010d6:	2c00      	cmp	r4, #0
 80010d8:	d1e7      	bne.n	80010aa <__gesf2+0x2e>
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d1e5      	bne.n	80010aa <__gesf2+0x2e>
 80010de:	e7e6      	b.n	80010ae <__gesf2+0x32>
 80010e0:	2000      	movs	r0, #0
 80010e2:	2d00      	cmp	r5, #0
 80010e4:	d0e7      	beq.n	80010b6 <__gesf2+0x3a>
 80010e6:	e7e2      	b.n	80010ae <__gesf2+0x32>
 80010e8:	42a2      	cmp	r2, r4
 80010ea:	dc05      	bgt.n	80010f8 <__gesf2+0x7c>
 80010ec:	dbea      	blt.n	80010c4 <__gesf2+0x48>
 80010ee:	42b5      	cmp	r5, r6
 80010f0:	d802      	bhi.n	80010f8 <__gesf2+0x7c>
 80010f2:	d3e7      	bcc.n	80010c4 <__gesf2+0x48>
 80010f4:	2000      	movs	r0, #0
 80010f6:	e7de      	b.n	80010b6 <__gesf2+0x3a>
 80010f8:	4243      	negs	r3, r0
 80010fa:	4158      	adcs	r0, r3
 80010fc:	0040      	lsls	r0, r0, #1
 80010fe:	3801      	subs	r0, #1
 8001100:	e7d9      	b.n	80010b6 <__gesf2+0x3a>
 8001102:	2002      	movs	r0, #2
 8001104:	4240      	negs	r0, r0
 8001106:	e7d6      	b.n	80010b6 <__gesf2+0x3a>

08001108 <__lesf2>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	0042      	lsls	r2, r0, #1
 800110c:	0245      	lsls	r5, r0, #9
 800110e:	024e      	lsls	r6, r1, #9
 8001110:	004c      	lsls	r4, r1, #1
 8001112:	0fc3      	lsrs	r3, r0, #31
 8001114:	0a6d      	lsrs	r5, r5, #9
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	0a76      	lsrs	r6, r6, #9
 800111a:	0e24      	lsrs	r4, r4, #24
 800111c:	0fc8      	lsrs	r0, r1, #31
 800111e:	2aff      	cmp	r2, #255	; 0xff
 8001120:	d00b      	beq.n	800113a <__lesf2+0x32>
 8001122:	2cff      	cmp	r4, #255	; 0xff
 8001124:	d00d      	beq.n	8001142 <__lesf2+0x3a>
 8001126:	2a00      	cmp	r2, #0
 8001128:	d11f      	bne.n	800116a <__lesf2+0x62>
 800112a:	2c00      	cmp	r4, #0
 800112c:	d116      	bne.n	800115c <__lesf2+0x54>
 800112e:	2e00      	cmp	r6, #0
 8001130:	d114      	bne.n	800115c <__lesf2+0x54>
 8001132:	2000      	movs	r0, #0
 8001134:	2d00      	cmp	r5, #0
 8001136:	d010      	beq.n	800115a <__lesf2+0x52>
 8001138:	e009      	b.n	800114e <__lesf2+0x46>
 800113a:	2d00      	cmp	r5, #0
 800113c:	d10c      	bne.n	8001158 <__lesf2+0x50>
 800113e:	2cff      	cmp	r4, #255	; 0xff
 8001140:	d113      	bne.n	800116a <__lesf2+0x62>
 8001142:	2e00      	cmp	r6, #0
 8001144:	d108      	bne.n	8001158 <__lesf2+0x50>
 8001146:	2a00      	cmp	r2, #0
 8001148:	d008      	beq.n	800115c <__lesf2+0x54>
 800114a:	4283      	cmp	r3, r0
 800114c:	d012      	beq.n	8001174 <__lesf2+0x6c>
 800114e:	2102      	movs	r1, #2
 8001150:	1e58      	subs	r0, r3, #1
 8001152:	4008      	ands	r0, r1
 8001154:	3801      	subs	r0, #1
 8001156:	e000      	b.n	800115a <__lesf2+0x52>
 8001158:	2002      	movs	r0, #2
 800115a:	bd70      	pop	{r4, r5, r6, pc}
 800115c:	2d00      	cmp	r5, #0
 800115e:	d1f4      	bne.n	800114a <__lesf2+0x42>
 8001160:	2800      	cmp	r0, #0
 8001162:	d1fa      	bne.n	800115a <__lesf2+0x52>
 8001164:	2001      	movs	r0, #1
 8001166:	4240      	negs	r0, r0
 8001168:	e7f7      	b.n	800115a <__lesf2+0x52>
 800116a:	2c00      	cmp	r4, #0
 800116c:	d1ed      	bne.n	800114a <__lesf2+0x42>
 800116e:	2e00      	cmp	r6, #0
 8001170:	d1eb      	bne.n	800114a <__lesf2+0x42>
 8001172:	e7ec      	b.n	800114e <__lesf2+0x46>
 8001174:	42a2      	cmp	r2, r4
 8001176:	dc05      	bgt.n	8001184 <__lesf2+0x7c>
 8001178:	dbf2      	blt.n	8001160 <__lesf2+0x58>
 800117a:	42b5      	cmp	r5, r6
 800117c:	d802      	bhi.n	8001184 <__lesf2+0x7c>
 800117e:	d3ef      	bcc.n	8001160 <__lesf2+0x58>
 8001180:	2000      	movs	r0, #0
 8001182:	e7ea      	b.n	800115a <__lesf2+0x52>
 8001184:	4243      	negs	r3, r0
 8001186:	4158      	adcs	r0, r3
 8001188:	0040      	lsls	r0, r0, #1
 800118a:	3801      	subs	r0, #1
 800118c:	e7e5      	b.n	800115a <__lesf2+0x52>
 800118e:	46c0      	nop			; (mov r8, r8)

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 fb6b 	bl	8001870 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f8e9 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 f9b9 	bl	8001514 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011a2:	f000 f987 	bl	80014b4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80011a6:	f000 f945 	bl	8001434 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    receiver(ADT7410_ADDR_ONE, buffer);
 80011aa:	2290      	movs	r2, #144	; 0x90
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	0019      	movs	r1, r3
 80011b0:	0010      	movs	r0, r2
 80011b2:	f000 f819 	bl	80011e8 <receiver>
	    receiver(ADT7410_ADDR_TWO, buffer);
 80011b6:	2292      	movs	r2, #146	; 0x92
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f000 f813 	bl	80011e8 <receiver>
	    receiver(ADT7410_ADDR_THREE, buffer);
 80011c2:	2294      	movs	r2, #148	; 0x94
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	0019      	movs	r1, r3
 80011c8:	0010      	movs	r0, r2
 80011ca:	f000 f80d 	bl	80011e8 <receiver>
	  	receiver(ADT7410_ADDR_FOUR, buffer);
 80011ce:	2296      	movs	r2, #150	; 0x96
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	0019      	movs	r1, r3
 80011d4:	0010      	movs	r0, r2
 80011d6:	f000 f807 	bl	80011e8 <receiver>
	  	//COMBINE DATA
	  	//sprintf(uartTransmission, "%s %s %s %s", firstRead, secRead, thirdRead, fourthRead);
	    //TRANSMIT STRING IN PROPER FORM TO PC via UART one at a time
	    //HAL_UART_Transmit(&huart1, (uint8_t*)uartTransmission, strlen(uartTransmission), HAL_MAX_DELAY);

	    HAL_Delay(1000);
 80011da:	23fa      	movs	r3, #250	; 0xfa
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fbaa 	bl	8001938 <HAL_Delay>
	    receiver(ADT7410_ADDR_ONE, buffer);
 80011e4:	e7e1      	b.n	80011aa <main+0x1a>
	...

080011e8 <receiver>:
    /* USER CODE END WHILE */


}
/* USER CODE BEGIN 3 */
void receiver(uint8_t address, uint8_t *buffer) {
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b099      	sub	sp, #100	; 0x64
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	0002      	movs	r2, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	701a      	strb	r2, [r3, #0]
    int16_t final_data; //store raw temp data, initially set to 0
    float val;
	unsigned int large;//left of decimal
	unsigned int small; //right of decimal
	char uart[20];
	buffer[0] = REG_TMP;
 80011f6:	2300      	movs	r3, #0
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
	//ERROR MESSAGES CATERED TO SPECIFIC SENSOR
	char tx[20];
	char rx[20];
	sprintf(tx, "ADDR %X: ERROR TX\r\n", address);
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4953      	ldr	r1, [pc, #332]	; (8001350 <receiver+0x168>)
 8001204:	2520      	movs	r5, #32
 8001206:	197b      	adds	r3, r7, r5
 8001208:	0018      	movs	r0, r3
 800120a:	f002 fd89 	bl	8003d20 <siprintf>
	sprintf(rx, "ADDR %X: ERROR RX\r\n", address);
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4950      	ldr	r1, [pc, #320]	; (8001354 <receiver+0x16c>)
 8001214:	230c      	movs	r3, #12
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	0018      	movs	r0, r3
 800121a:	f002 fd81 	bl	8003d20 <siprintf>

	//TRANSMIT SINGLE BYTE OF DATA 0x00 to communicate readiness to RECEIVE
	ret =  HAL_I2C_Master_Transmit(&hi2c2, address, buffer, 1, HAL_MAX_DELAY);
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b299      	uxth	r1, r3
 8001224:	2655      	movs	r6, #85	; 0x55
 8001226:	19bc      	adds	r4, r7, r6
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	484b      	ldr	r0, [pc, #300]	; (8001358 <receiver+0x170>)
 800122c:	2301      	movs	r3, #1
 800122e:	425b      	negs	r3, r3
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	f000 fe7c 	bl	8001f30 <HAL_I2C_Master_Transmit>
 8001238:	0003      	movs	r3, r0
 800123a:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 800123c:	19bb      	adds	r3, r7, r6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <receiver+0x6c>
		strcpy(uart, tx);
 8001244:	197a      	adds	r2, r7, r5
 8001246:	2334      	movs	r3, #52	; 0x34
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f002 fdbb 	bl	8003dc8 <strcpy>
 8001252:	e06b      	b.n	800132c <receiver+0x144>
	} else {
		  //RECEIVE TWO BYTES OF DATA
		ret = HAL_I2C_Master_Receive(&hi2c2, address, buffer, 2, HAL_MAX_DELAY);
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b299      	uxth	r1, r3
 800125a:	2555      	movs	r5, #85	; 0x55
 800125c:	197c      	adds	r4, r7, r5
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	483d      	ldr	r0, [pc, #244]	; (8001358 <receiver+0x170>)
 8001262:	2301      	movs	r3, #1
 8001264:	425b      	negs	r3, r3
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2302      	movs	r3, #2
 800126a:	f000 ff69 	bl	8002140 <HAL_I2C_Master_Receive>
 800126e:	0003      	movs	r3, r0
 8001270:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8001272:	197b      	adds	r3, r7, r5
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <receiver+0xa4>
		//IF ERROR PRODUCED DURING RECEIVAL
			strcpy(uart, rx);
 800127a:	230c      	movs	r3, #12
 800127c:	18fa      	adds	r2, r7, r3
 800127e:	2334      	movs	r3, #52	; 0x34
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f002 fd9f 	bl	8003dc8 <strcpy>
 800128a:	e04f      	b.n	800132c <receiver+0x144>
		} else{
		//CONVERT DATA TO CELSIUS (WORKS)
			final_data = (((uint16_t)buffer[0]<<8)|(buffer[1])) >> 3;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	3201      	adds	r2, #1
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4313      	orrs	r3, r2
 800129a:	10da      	asrs	r2, r3, #3
 800129c:	2156      	movs	r1, #86	; 0x56
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	801a      	strh	r2, [r3, #0]
			if (final_data > 0x7FF) {
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	5e9a      	ldrsh	r2, [r3, r2]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	429a      	cmp	r2, r3
 80012ae:	db05      	blt.n	80012bc <receiver+0xd4>
				final_data |= 0xF000;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	187a      	adds	r2, r7, r1
 80012b4:	8812      	ldrh	r2, [r2, #0]
 80012b6:	4929      	ldr	r1, [pc, #164]	; (800135c <receiver+0x174>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	801a      	strh	r2, [r3, #0]
			}
			val = final_data*0.0625;
 80012bc:	2356      	movs	r3, #86	; 0x56
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2200      	movs	r2, #0
 80012c2:	5e9b      	ldrsh	r3, [r3, r2]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff fda5 	bl	8000e14 <__aeabi_i2d>
 80012ca:	2200      	movs	r2, #0
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <receiver+0x178>)
 80012ce:	f7ff fadf 	bl	8000890 <__aeabi_dmul>
 80012d2:	0002      	movs	r2, r0
 80012d4:	000b      	movs	r3, r1
 80012d6:	0010      	movs	r0, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	f7ff fdcb 	bl	8000e74 <__aeabi_d2f>
 80012de:	1c03      	adds	r3, r0, #0
 80012e0:	653b      	str	r3, [r7, #80]	; 0x50
			val = val*100;
 80012e2:	4920      	ldr	r1, [pc, #128]	; (8001364 <receiver+0x17c>)
 80012e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80012e6:	f7fe ffc5 	bl	8000274 <__aeabi_fmul>
 80012ea:	1c03      	adds	r3, r0, #0
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
			//FORMAT INTO DIGESTABLE STRING
			large = (unsigned int)val/100;
 80012ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80012f0:	f7fe ffa8 	bl	8000244 <__aeabi_f2uiz>
 80012f4:	0003      	movs	r3, r0
 80012f6:	2164      	movs	r1, #100	; 0x64
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7fe ff17 	bl	800012c <__udivsi3>
 80012fe:	0003      	movs	r3, r0
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
			small = (unsigned int)val%100;
 8001302:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001304:	f7fe ff9e 	bl	8000244 <__aeabi_f2uiz>
 8001308:	0003      	movs	r3, r0
 800130a:	2164      	movs	r1, #100	; 0x64
 800130c:	0018      	movs	r0, r3
 800130e:	f7fe ff93 	bl	8000238 <__aeabi_uidivmod>
 8001312:	000b      	movs	r3, r1
 8001314:	64bb      	str	r3, [r7, #72]	; 0x48
			//DIFFERENTIATE BY HE OF ADDRESSING
			sprintf(uart, "ADDR %X: %u.%02u C\r\n", address, large, small);
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800131c:	4912      	ldr	r1, [pc, #72]	; (8001368 <receiver+0x180>)
 800131e:	2334      	movs	r3, #52	; 0x34
 8001320:	18f8      	adds	r0, r7, r3
 8001322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	0023      	movs	r3, r4
 8001328:	f002 fcfa 	bl	8003d20 <siprintf>
		}
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)uart, strlen(uart), HAL_MAX_DELAY);
 800132c:	2434      	movs	r4, #52	; 0x34
 800132e:	193b      	adds	r3, r7, r4
 8001330:	0018      	movs	r0, r3
 8001332:	f7fe fee9 	bl	8000108 <strlen>
 8001336:	0003      	movs	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	2301      	movs	r3, #1
 800133c:	425b      	negs	r3, r3
 800133e:	1939      	adds	r1, r7, r4
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <receiver+0x184>)
 8001342:	f002 f8e3 	bl	800350c <HAL_UART_Transmit>
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b017      	add	sp, #92	; 0x5c
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	08004694 	.word	0x08004694
 8001354:	080046a8 	.word	0x080046a8
 8001358:	20000078 	.word	0x20000078
 800135c:	fffff000 	.word	0xfffff000
 8001360:	3fb00000 	.word	0x3fb00000
 8001364:	42c80000 	.word	0x42c80000
 8001368:	080046bc 	.word	0x080046bc
 800136c:	200000cc 	.word	0x200000cc

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b097      	sub	sp, #92	; 0x5c
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	2428      	movs	r4, #40	; 0x28
 8001378:	193b      	adds	r3, r7, r4
 800137a:	0018      	movs	r0, r3
 800137c:	2330      	movs	r3, #48	; 0x30
 800137e:	001a      	movs	r2, r3
 8001380:	2100      	movs	r1, #0
 8001382:	f002 fced 	bl	8003d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001386:	2318      	movs	r3, #24
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	0018      	movs	r0, r3
 800138c:	2310      	movs	r3, #16
 800138e:	001a      	movs	r2, r3
 8001390:	2100      	movs	r1, #0
 8001392:	f002 fce5 	bl	8003d60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	0018      	movs	r0, r3
 800139a:	2314      	movs	r3, #20
 800139c:	001a      	movs	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	f002 fcde 	bl	8003d60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	0021      	movs	r1, r4
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2202      	movs	r2, #2
 80013aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2201      	movs	r2, #1
 80013b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2210      	movs	r2, #16
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2202      	movs	r2, #2
 80013bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	22a0      	movs	r2, #160	; 0xa0
 80013c8:	0392      	lsls	r2, r2, #14
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 fb09 	bl	80029ec <HAL_RCC_OscConfig>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013de:	f000 f903 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	2118      	movs	r1, #24
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2207      	movs	r2, #7
 80013e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2202      	movs	r2, #2
 80013ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2101      	movs	r1, #1
 8001400:	0018      	movs	r0, r3
 8001402:	f001 fe0d 	bl	8003020 <HAL_RCC_ClockConfig>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800140a:	f000 f8ed 	bl	80015e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	0018      	movs	r0, r3
 800141e:	f001 ff43 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001426:	f000 f8df 	bl	80015e8 <Error_Handler>
  }
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b017      	add	sp, #92	; 0x5c
 8001430:	bd90      	pop	{r4, r7, pc}
	...

08001434 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_I2C2_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <MX_I2C2_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <MX_I2C2_Init+0x7c>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_I2C2_Init+0x74>)
 800144c:	2201      	movs	r2, #1
 800144e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001470:	0018      	movs	r0, r3
 8001472:	f000 fcc7 	bl	8001e04 <HAL_I2C_Init>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800147a:	f000 f8b5 	bl	80015e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001480:	2100      	movs	r1, #0
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fa1a 	bl	80028bc <HAL_I2CEx_ConfigAnalogFilter>
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800148c:	f000 f8ac 	bl	80015e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001492:	2100      	movs	r1, #0
 8001494:	0018      	movs	r0, r3
 8001496:	f001 fa5d 	bl	8002954 <HAL_I2CEx_ConfigDigitalFilter>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 f8a3 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000078 	.word	0x20000078
 80014ac:	40005800 	.word	0x40005800
 80014b0:	2010091a 	.word	0x2010091a

080014b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <MX_USART1_UART_Init+0x5c>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014c0:	2296      	movs	r2, #150	; 0x96
 80014c2:	0212      	lsls	r2, r2, #8
 80014c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <MX_USART1_UART_Init+0x58>)
 80014f8:	0018      	movs	r0, r3
 80014fa:	f001 ffb3 	bl	8003464 <HAL_UART_Init>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d001      	beq.n	8001506 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001502:	f000 f871 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200000cc 	.word	0x200000cc
 8001510:	40013800 	.word	0x40013800

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	240c      	movs	r4, #12
 800151c:	193b      	adds	r3, r7, r4
 800151e:	0018      	movs	r0, r3
 8001520:	2314      	movs	r3, #20
 8001522:	001a      	movs	r2, r3
 8001524:	2100      	movs	r1, #0
 8001526:	f002 fc1b 	bl	8003d60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <MX_GPIO_Init+0xcc>)
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_GPIO_Init+0xcc>)
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	0289      	lsls	r1, r1, #10
 8001534:	430a      	orrs	r2, r1
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_GPIO_Init+0xcc>)
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_GPIO_Init+0xcc>)
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <MX_GPIO_Init+0xcc>)
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	02c9      	lsls	r1, r1, #11
 8001550:	430a      	orrs	r2, r1
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <MX_GPIO_Init+0xcc>)
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	02db      	lsls	r3, r3, #11
 800155c:	4013      	ands	r3, r2
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_GPIO_Init+0xcc>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_GPIO_Init+0xcc>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0309      	lsls	r1, r1, #12
 800156c:	430a      	orrs	r2, r1
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_GPIO_Init+0xcc>)
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	031b      	lsls	r3, r3, #12
 8001578:	4013      	ands	r3, r2
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800157e:	23c0      	movs	r3, #192	; 0xc0
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001584:	2200      	movs	r2, #0
 8001586:	0019      	movs	r1, r3
 8001588:	f000 fc1e 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800158c:	193b      	adds	r3, r7, r4
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001592:	193b      	adds	r3, r7, r4
 8001594:	2290      	movs	r2, #144	; 0x90
 8001596:	0352      	lsls	r2, r2, #13
 8001598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	193b      	adds	r3, r7, r4
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a0:	193a      	adds	r2, r7, r4
 80015a2:	2390      	movs	r3, #144	; 0x90
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fa9d 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80015ae:	0021      	movs	r1, r4
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	22c0      	movs	r2, #192	; 0xc0
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2201      	movs	r2, #1
 80015bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <MX_GPIO_Init+0xd0>)
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f000 fa89 	bl	8001ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b009      	add	sp, #36	; 0x24
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000800 	.word	0x48000800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_MspInit+0x44>)
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_MspInit+0x44>)
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	619a      	str	r2, [r3, #24]
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_MspInit+0x44>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x44>)
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_MspInit+0x44>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0549      	lsls	r1, r1, #21
 800161c:	430a      	orrs	r2, r1
 800161e:	61da      	str	r2, [r3, #28]
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_MspInit+0x44>)
 8001622:	69da      	ldr	r2, [r3, #28]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	4013      	ands	r3, r2
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	2414      	movs	r4, #20
 8001646:	193b      	adds	r3, r7, r4
 8001648:	0018      	movs	r0, r3
 800164a:	2314      	movs	r3, #20
 800164c:	001a      	movs	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	f002 fb86 	bl	8003d60 <memset>
  if(hi2c->Instance==I2C2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <HAL_I2C_MspInit+0x90>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d132      	bne.n	80016c4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_I2C_MspInit+0x94>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_I2C_MspInit+0x94>)
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	02c9      	lsls	r1, r1, #11
 8001668:	430a      	orrs	r2, r1
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_I2C_MspInit+0x94>)
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	02db      	lsls	r3, r3, #11
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800167a:	193b      	adds	r3, r7, r4
 800167c:	22c0      	movs	r2, #192	; 0xc0
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	0021      	movs	r1, r4
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2212      	movs	r2, #18
 8001688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2203      	movs	r2, #3
 8001694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2201      	movs	r2, #1
 800169a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	187b      	adds	r3, r7, r1
 800169e:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_I2C_MspInit+0x98>)
 80016a0:	0019      	movs	r1, r3
 80016a2:	0010      	movs	r0, r2
 80016a4:	f000 fa20 	bl	8001ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_I2C_MspInit+0x94>)
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_I2C_MspInit+0x94>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	03c9      	lsls	r1, r1, #15
 80016b2:	430a      	orrs	r2, r1
 80016b4:	61da      	str	r2, [r3, #28]
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_I2C_MspInit+0x94>)
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	03db      	lsls	r3, r3, #15
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b00b      	add	sp, #44	; 0x2c
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	40005800 	.word	0x40005800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000400 	.word	0x48000400

080016d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	2414      	movs	r4, #20
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	2314      	movs	r3, #20
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f002 fb38 	bl	8003d60 <memset>
  if(huart->Instance==USART1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_UART_MspInit+0x94>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d133      	bne.n	8001762 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_UART_MspInit+0x98>)
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	01c9      	lsls	r1, r1, #7
 8001704:	430a      	orrs	r2, r1
 8001706:	619a      	str	r2, [r3, #24]
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_UART_MspInit+0x98>)
 800170a:	699a      	ldr	r2, [r3, #24]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_UART_MspInit+0x98>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0289      	lsls	r1, r1, #10
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_UART_MspInit+0x98>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	22c0      	movs	r2, #192	; 0xc0
 8001736:	00d2      	lsls	r2, r2, #3
 8001738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	0021      	movs	r1, r4
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2202      	movs	r2, #2
 8001740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2203      	movs	r2, #3
 800174c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2201      	movs	r2, #1
 8001752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	187a      	adds	r2, r7, r1
 8001756:	2390      	movs	r3, #144	; 0x90
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f9c3 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b00b      	add	sp, #44	; 0x2c
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40013800 	.word	0x40013800
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 f8b2 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f002 facc 	bl	8003d70 <__errno>
 80017d8:	0003      	movs	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	2301      	movs	r3, #1
 80017e0:	425b      	negs	r3, r3
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	18d2      	adds	r2, r2, r3
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b006      	add	sp, #24
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20002000 	.word	0x20002000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000154 	.word	0x20000154
 800180c:	200002a8 	.word	0x200002a8

08001810 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
  mov   sp, r0          /* set stack pointer */
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopForever+0x2>)
  
 800181e:	4685      	mov	sp, r0
  /* Call the clock system initialization function.*/
  bl  SystemInit

 8001820:	f7ff fff6 	bl	8001810 <SystemInit>
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
  ldr r1, =_edata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopForever+0x6>)
  ldr r2, =_sidata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopForever+0xa>)
  movs r3, #0
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopForever+0xe>)
  b LoopCopyDataInit
 800182a:	2300      	movs	r3, #0

 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:
CopyDataInit:
  ldr r4, [r2, r3]
  str r4, [r0, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  adds r3, r3, #4
 8001830:	50c4      	str	r4, [r0, r3]

 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:
LoopCopyDataInit:
  adds r4, r0, r3
  cmp r4, r1
 8001834:	18c4      	adds	r4, r0, r3
  bcc CopyDataInit
 8001836:	428c      	cmp	r4, r1
  
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
  ldr r4, =_ebss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopForever+0x12>)
  movs r3, #0
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopForever+0x16>)
  b LoopFillZerobss
 800183e:	2300      	movs	r3, #0

 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:
FillZerobss:
  str  r3, [r2]
  adds r2, r2, #4
 8001842:	6013      	str	r3, [r2, #0]

 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
  bcc FillZerobss
 8001846:	42a2      	cmp	r2, r4

 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>
/* Call static constructors */
  bl __libc_init_array
/* Call the application's entry point.*/
 800184a:	f002 fa97 	bl	8003d7c <__libc_init_array>
  bl main

 800184e:	f7ff fc9f 	bl	8001190 <main>

08001852 <LoopForever>:
LoopForever:
    b LoopForever

 8001852:	e7fe      	b.n	8001852 <LoopForever>
  mov   sp, r0          /* set stack pointer */
 8001854:	20002000 	.word	0x20002000
  ldr r1, =_edata
 8001858:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800185c:	2000005c 	.word	0x2000005c
  movs r3, #0
 8001860:	08004748 	.word	0x08004748
  ldr r4, =_ebss
 8001864:	2000005c 	.word	0x2000005c
  movs r3, #0
 8001868:	200002a4 	.word	0x200002a4

0800186c <ADC1_COMP_IRQHandler>:
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
  .size Default_Handler, .-Default_Handler
 800186c:	e7fe      	b.n	800186c <ADC1_COMP_IRQHandler>
	...

08001870 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_Init+0x24>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_Init+0x24>)
 800187a:	2110      	movs	r1, #16
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 f809 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001886:	f7ff feb5 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_InitTick+0x5c>)
 80018a2:	681c      	ldr	r4, [r3, #0]
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_InitTick+0x60>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	0019      	movs	r1, r3
 80018aa:	23fa      	movs	r3, #250	; 0xfa
 80018ac:	0098      	lsls	r0, r3, #2
 80018ae:	f7fe fc3d 	bl	800012c <__udivsi3>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0019      	movs	r1, r3
 80018b6:	0020      	movs	r0, r4
 80018b8:	f7fe fc38 	bl	800012c <__udivsi3>
 80018bc:	0003      	movs	r3, r0
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f905 	bl	8001ace <HAL_SYSTICK_Config>
 80018c4:	1e03      	subs	r3, r0, #0
 80018c6:	d001      	beq.n	80018cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00f      	b.n	80018ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d80b      	bhi.n	80018ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	2301      	movs	r3, #1
 80018d6:	425b      	negs	r3, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f8e2 	bl	8001aa4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_InitTick+0x64>)
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b003      	add	sp, #12
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_IncTick+0x1c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_IncTick+0x20>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	18d2      	adds	r2, r2, r3
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_IncTick+0x20>)
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	20000008 	.word	0x20000008
 8001920:	20000158 	.word	0x20000158

08001924 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <HAL_GetTick+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	20000158 	.word	0x20000158

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fff0 	bl	8001924 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	001a      	movs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	189b      	adds	r3, r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	f7ff ffe0 	bl	8001924 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b004      	add	sp, #16
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	20000008 	.word	0x20000008

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	0002      	movs	r2, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b7f      	cmp	r3, #127	; 0x7f
 8001994:	d828      	bhi.n	80019e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001996:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <__NVIC_SetPriority+0xd4>)
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b25b      	sxtb	r3, r3
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	33c0      	adds	r3, #192	; 0xc0
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	589b      	ldr	r3, [r3, r2]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	; 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	; 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	481f      	ldr	r0, [pc, #124]	; (8001a54 <__NVIC_SetPriority+0xd4>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	430a      	orrs	r2, r1
 80019e0:	33c0      	adds	r3, #192	; 0xc0
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019e6:	e031      	b.n	8001a4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <__NVIC_SetPriority+0xd8>)
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	0019      	movs	r1, r3
 80019f0:	230f      	movs	r3, #15
 80019f2:	400b      	ands	r3, r1
 80019f4:	3b08      	subs	r3, #8
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3306      	adds	r3, #6
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	18d3      	adds	r3, r2, r3
 80019fe:	3304      	adds	r3, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1dfa      	adds	r2, r7, #7
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	0011      	movs	r1, r2
 8001a08:	2203      	movs	r2, #3
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	00d2      	lsls	r2, r2, #3
 8001a0e:	21ff      	movs	r1, #255	; 0xff
 8001a10:	4091      	lsls	r1, r2
 8001a12:	000a      	movs	r2, r1
 8001a14:	43d2      	mvns	r2, r2
 8001a16:	401a      	ands	r2, r3
 8001a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	22ff      	movs	r2, #255	; 0xff
 8001a20:	401a      	ands	r2, r3
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	0018      	movs	r0, r3
 8001a28:	2303      	movs	r3, #3
 8001a2a:	4003      	ands	r3, r0
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <__NVIC_SetPriority+0xd8>)
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	001c      	movs	r4, r3
 8001a38:	230f      	movs	r3, #15
 8001a3a:	4023      	ands	r3, r4
 8001a3c:	3b08      	subs	r3, #8
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	430a      	orrs	r2, r1
 8001a42:	3306      	adds	r3, #6
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	18c3      	adds	r3, r0, r3
 8001a48:	3304      	adds	r3, #4
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b003      	add	sp, #12
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	045b      	lsls	r3, r3, #17
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d301      	bcc.n	8001a74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e010      	b.n	8001a96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <SysTick_Config+0x44>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	425b      	negs	r3, r3
 8001a80:	2103      	movs	r1, #3
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff ff7c 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x44>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x44>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	210f      	movs	r1, #15
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	0011      	movs	r1, r2
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ffbf 	bl	8001a5c <SysTick_Config>
 8001ade:	0003      	movs	r3, r0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e14f      	b.n	8001d98 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4091      	lsls	r1, r2
 8001b02:	000a      	movs	r2, r1
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d100      	bne.n	8001b10 <HAL_GPIO_Init+0x28>
 8001b0e:	e140      	b.n	8001d92 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d005      	beq.n	8001b28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d130      	bne.n	8001b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5e:	2201      	movs	r2, #1
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	2201      	movs	r2, #1
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d017      	beq.n	8001bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d123      	bne.n	8001c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	58d3      	ldr	r3, [r2, r3]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2207      	movs	r2, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	409a      	lsls	r2, r3
 8001bec:	0013      	movs	r3, r2
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	400b      	ands	r3, r1
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	6939      	ldr	r1, [r7, #16]
 8001c18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	23c0      	movs	r3, #192	; 0xc0
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	4013      	ands	r3, r2
 8001c58:	d100      	bne.n	8001c5c <HAL_GPIO_Init+0x174>
 8001c5a:	e09a      	b.n	8001d92 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5c:	4b54      	ldr	r3, [pc, #336]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001c5e:	699a      	ldr	r2, [r3, #24]
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	619a      	str	r2, [r3, #24]
 8001c68:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	589b      	ldr	r3, [r3, r2]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2203      	movs	r2, #3
 8001c86:	4013      	ands	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	0013      	movs	r3, r2
 8001c90:	43da      	mvns	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	2390      	movs	r3, #144	; 0x90
 8001c9c:	05db      	lsls	r3, r3, #23
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x1e2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a44      	ldr	r2, [pc, #272]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x1de>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a43      	ldr	r2, [pc, #268]	; (8001dbc <HAL_GPIO_Init+0x2d4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x1da>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_GPIO_Init+0x2d8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x1d6>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	2103      	movs	r1, #3
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	035b      	lsls	r3, r3, #13
 8001d02:	4013      	ands	r3, r2
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	039b      	lsls	r3, r3, #14
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43da      	mvns	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43da      	mvns	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	4013      	ands	r3, r2
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	1e13      	subs	r3, r2, #0
 8001da2:	d000      	beq.n	8001da6 <HAL_GPIO_Init+0x2be>
 8001da4:	e6a8      	b.n	8001af8 <HAL_GPIO_Init+0x10>
  } 
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b006      	add	sp, #24
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	0008      	movs	r0, r1
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	1cbb      	adds	r3, r7, #2
 8001dd6:	1c02      	adds	r2, r0, #0
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	1c7b      	adds	r3, r7, #1
 8001ddc:	1c0a      	adds	r2, r1, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de0:	1c7b      	adds	r3, r7, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001de8:	1cbb      	adds	r3, r7, #2
 8001dea:	881a      	ldrh	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df2:	1cbb      	adds	r3, r7, #2
 8001df4:	881a      	ldrh	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e082      	b.n	8001f1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2241      	movs	r2, #65	; 0x41
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d107      	bne.n	8001e32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff fc05 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2241      	movs	r2, #65	; 0x41
 8001e36:	2124      	movs	r1, #36	; 0x24
 8001e38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	438a      	bics	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4934      	ldr	r1, [pc, #208]	; (8001f24 <HAL_I2C_Init+0x120>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4931      	ldr	r1, [pc, #196]	; (8001f28 <HAL_I2C_Init+0x124>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0209      	lsls	r1, r1, #8
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e007      	b.n	8001e92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2184      	movs	r1, #132	; 0x84
 8001e8c:	0209      	lsls	r1, r1, #8
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d104      	bne.n	8001ea4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	491f      	ldr	r1, [pc, #124]	; (8001f2c <HAL_I2C_Init+0x128>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <HAL_I2C_Init+0x124>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69d9      	ldr	r1, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2241      	movs	r2, #65	; 0x41
 8001f08:	2120      	movs	r1, #32
 8001f0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2242      	movs	r2, #66	; 0x42
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	f0ffffff 	.word	0xf0ffffff
 8001f28:	ffff7fff 	.word	0xffff7fff
 8001f2c:	02008000 	.word	0x02008000

08001f30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	0008      	movs	r0, r1
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	230a      	movs	r3, #10
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	1c02      	adds	r2, r0, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	2308      	movs	r3, #8
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	1c0a      	adds	r2, r1, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2241      	movs	r2, #65	; 0x41
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d000      	beq.n	8001f5c <HAL_I2C_Master_Transmit+0x2c>
 8001f5a:	e0e7      	b.n	800212c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Master_Transmit+0x3a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e0e1      	b.n	800212e <HAL_I2C_Master_Transmit+0x1fe>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2240      	movs	r2, #64	; 0x40
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f72:	f7ff fcd7 	bl	8001924 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	0219      	lsls	r1, r3, #8
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2319      	movs	r3, #25
 8001f86:	2201      	movs	r2, #1
 8001f88:	f000 fa04 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cc      	b.n	800212e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2241      	movs	r2, #65	; 0x41
 8001f98:	2121      	movs	r1, #33	; 0x21
 8001f9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2242      	movs	r2, #66	; 0x42
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	18ba      	adds	r2, r7, r2
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d911      	bls.n	8001fee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	22ff      	movs	r2, #255	; 0xff
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	045c      	lsls	r4, r3, #17
 8001fda:	230a      	movs	r3, #10
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	8819      	ldrh	r1, [r3, #0]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_I2C_Master_Transmit+0x208>)
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	f000 fc2e 	bl	8002848 <I2C_TransferConfig>
 8001fec:	e075      	b.n	80020da <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	049c      	lsls	r4, r3, #18
 8002002:	230a      	movs	r3, #10
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	8819      	ldrh	r1, [r3, #0]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_I2C_Master_Transmit+0x208>)
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	0023      	movs	r3, r4
 8002010:	f000 fc1a 	bl	8002848 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002014:	e061      	b.n	80020da <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 fa07 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e081      	b.n	800212e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03a      	beq.n	80020da <HAL_I2C_Master_Transmit+0x1aa>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d136      	bne.n	80020da <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800206c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	0013      	movs	r3, r2
 8002076:	2200      	movs	r2, #0
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	f000 f98b 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e053      	b.n	800212e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	2bff      	cmp	r3, #255	; 0xff
 800208e:	d911      	bls.n	80020b4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	22ff      	movs	r2, #255	; 0xff
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	b2da      	uxtb	r2, r3
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	045c      	lsls	r4, r3, #17
 80020a0:	230a      	movs	r3, #10
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	8819      	ldrh	r1, [r3, #0]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	0023      	movs	r3, r4
 80020ae:	f000 fbcb 	bl	8002848 <I2C_TransferConfig>
 80020b2:	e012      	b.n	80020da <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	049c      	lsls	r4, r3, #18
 80020c8:	230a      	movs	r3, #10
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	8819      	ldrh	r1, [r3, #0]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	2300      	movs	r3, #0
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	0023      	movs	r3, r4
 80020d6:	f000 fbb7 	bl	8002848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d198      	bne.n	8002016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f9e6 	bl	80024bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e01a      	b.n	800212e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2220      	movs	r2, #32
 80020fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	490c      	ldr	r1, [pc, #48]	; (800213c <HAL_I2C_Master_Transmit+0x20c>)
 800210c:	400a      	ands	r2, r1
 800210e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2241      	movs	r2, #65	; 0x41
 8002114:	2120      	movs	r1, #32
 8002116:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2242      	movs	r2, #66	; 0x42
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2240      	movs	r2, #64	; 0x40
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b007      	add	sp, #28
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	80002000 	.word	0x80002000
 800213c:	fe00e800 	.word	0xfe00e800

08002140 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	0008      	movs	r0, r1
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	0019      	movs	r1, r3
 800214e:	230a      	movs	r3, #10
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	1c02      	adds	r2, r0, #0
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	2308      	movs	r3, #8
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	1c0a      	adds	r2, r1, #0
 800215c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d000      	beq.n	800216c <HAL_I2C_Master_Receive+0x2c>
 800216a:	e0e8      	b.n	800233e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2C_Master_Receive+0x3a>
 8002176:	2302      	movs	r3, #2
 8002178:	e0e2      	b.n	8002340 <HAL_I2C_Master_Receive+0x200>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002182:	f7ff fbcf 	bl	8001924 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	0219      	lsls	r1, r3, #8
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2319      	movs	r3, #25
 8002196:	2201      	movs	r2, #1
 8002198:	f000 f8fc 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0cd      	b.n	8002340 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2241      	movs	r2, #65	; 0x41
 80021a8:	2122      	movs	r1, #34	; 0x22
 80021aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2242      	movs	r2, #66	; 0x42
 80021b0:	2110      	movs	r1, #16
 80021b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2208      	movs	r2, #8
 80021c4:	18ba      	adds	r2, r7, r2
 80021c6:	8812      	ldrh	r2, [r2, #0]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2bff      	cmp	r3, #255	; 0xff
 80021d8:	d911      	bls.n	80021fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	22ff      	movs	r2, #255	; 0xff
 80021de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	045c      	lsls	r4, r3, #17
 80021ea:	230a      	movs	r3, #10
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	8819      	ldrh	r1, [r3, #0]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	4b55      	ldr	r3, [pc, #340]	; (8002348 <HAL_I2C_Master_Receive+0x208>)
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	0023      	movs	r3, r4
 80021f8:	f000 fb26 	bl	8002848 <I2C_TransferConfig>
 80021fc:	e076      	b.n	80022ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	b2da      	uxtb	r2, r3
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	049c      	lsls	r4, r3, #18
 8002212:	230a      	movs	r3, #10
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	8819      	ldrh	r1, [r3, #0]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_I2C_Master_Receive+0x208>)
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	0023      	movs	r3, r4
 8002220:	f000 fb12 	bl	8002848 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002224:	e062      	b.n	80022ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f989 	bl	8002544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e082      	b.n	8002340 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <HAL_I2C_Master_Receive+0x1ac>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d136      	bne.n	80022ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800227e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	0013      	movs	r3, r2
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	f000 f882 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e053      	b.n	8002340 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d911      	bls.n	80022c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	045c      	lsls	r4, r3, #17
 80022b2:	230a      	movs	r3, #10
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	8819      	ldrh	r1, [r3, #0]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0023      	movs	r3, r4
 80022c0:	f000 fac2 	bl	8002848 <I2C_TransferConfig>
 80022c4:	e012      	b.n	80022ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	049c      	lsls	r4, r3, #18
 80022da:	230a      	movs	r3, #10
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	8819      	ldrh	r1, [r3, #0]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	2300      	movs	r3, #0
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0023      	movs	r3, r4
 80022e8:	f000 faae 	bl	8002848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d197      	bne.n	8002226 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f8dd 	bl	80024bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e01a      	b.n	8002340 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	490b      	ldr	r1, [pc, #44]	; (800234c <HAL_I2C_Master_Receive+0x20c>)
 800231e:	400a      	ands	r2, r1
 8002320:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2241      	movs	r2, #65	; 0x41
 8002326:	2120      	movs	r1, #32
 8002328:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2242      	movs	r2, #66	; 0x42
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b007      	add	sp, #28
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	80002400 	.word	0x80002400
 800234c:	fe00e800 	.word	0xfe00e800

08002350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	2b01      	cmp	r3, #1
 800237a:	d007      	beq.n	800238c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	430a      	orrs	r2, r1
 800238a:	619a      	str	r2, [r3, #24]
  }
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a4:	e030      	b.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	d02d      	beq.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ac:	f7ff faba 	bl	8001924 <HAL_GetTick>
 80023b0:	0002      	movs	r2, r0
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d302      	bcc.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d122      	bne.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	4013      	ands	r3, r2
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	425a      	negs	r2, r3
 80023d2:	4153      	adcs	r3, r2
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	001a      	movs	r2, r3
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d113      	bne.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	2220      	movs	r2, #32
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2241      	movs	r2, #65	; 0x41
 80023f0:	2120      	movs	r1, #32
 80023f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2242      	movs	r2, #66	; 0x42
 80023f8:	2100      	movs	r1, #0
 80023fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e00f      	b.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	425a      	negs	r2, r3
 8002418:	4153      	adcs	r3, r2
 800241a:	b2db      	uxtb	r3, r3
 800241c:	001a      	movs	r2, r3
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d0bf      	beq.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800243c:	e032      	b.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f8ff 	bl	8002648 <I2C_IsErrorOccurred>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e030      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	d025      	beq.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7ff fa64 	bl	8001924 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11a      	bne.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2202      	movs	r2, #2
 8002476:	4013      	ands	r3, r2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d013      	beq.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	2220      	movs	r2, #32
 8002482:	431a      	orrs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2241      	movs	r2, #65	; 0x41
 800248c:	2120      	movs	r1, #32
 800248e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2242      	movs	r2, #66	; 0x42
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e007      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d1c5      	bne.n	800243e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b004      	add	sp, #16
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c8:	e02f      	b.n	800252a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 f8b9 	bl	8002648 <I2C_IsErrorOccurred>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e02d      	b.n	800253a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7ff fa21 	bl	8001924 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11a      	bne.n	800252a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2220      	movs	r2, #32
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d013      	beq.n	800252a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	2220      	movs	r2, #32
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2241      	movs	r2, #65	; 0x41
 8002512:	2120      	movs	r1, #32
 8002514:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2242      	movs	r2, #66	; 0x42
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2220      	movs	r2, #32
 8002532:	4013      	ands	r3, r2
 8002534:	2b20      	cmp	r3, #32
 8002536:	d1c8      	bne.n	80024ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002550:	e06b      	b.n	800262a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f875 	bl	8002648 <I2C_IsErrorOccurred>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e069      	b.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	2b20      	cmp	r3, #32
 8002572:	d138      	bne.n	80025e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	2b04      	cmp	r3, #4
 8002580:	d105      	bne.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e055      	b.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2210      	movs	r2, #16
 8002596:	4013      	ands	r3, r2
 8002598:	2b10      	cmp	r3, #16
 800259a:	d107      	bne.n	80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2204      	movs	r2, #4
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
 80025aa:	e002      	b.n	80025b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2220      	movs	r2, #32
 80025b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	491f      	ldr	r1, [pc, #124]	; (8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2241      	movs	r2, #65	; 0x41
 80025ce:	2120      	movs	r1, #32
 80025d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2242      	movs	r2, #66	; 0x42
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e029      	b.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7ff f99d 	bl	8001924 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2204      	movs	r2, #4
 8002604:	4013      	ands	r3, r2
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00f      	beq.n	800262a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	2220      	movs	r2, #32
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2241      	movs	r2, #65	; 0x41
 800261a:	2120      	movs	r1, #32
 800261c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e007      	b.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2204      	movs	r2, #4
 8002632:	4013      	ands	r3, r2
 8002634:	2b04      	cmp	r3, #4
 8002636:	d18c      	bne.n	8002552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b08b      	sub	sp, #44	; 0x2c
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	2327      	movs	r3, #39	; 0x27
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2210      	movs	r2, #16
 8002670:	4013      	ands	r3, r2
 8002672:	d100      	bne.n	8002676 <I2C_IsErrorOccurred+0x2e>
 8002674:	e082      	b.n	800277c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2210      	movs	r2, #16
 800267c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800267e:	e060      	b.n	8002742 <I2C_IsErrorOccurred+0xfa>
 8002680:	2427      	movs	r4, #39	; 0x27
 8002682:	193b      	adds	r3, r7, r4
 8002684:	193a      	adds	r2, r7, r4
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3301      	adds	r3, #1
 800268e:	d058      	beq.n	8002742 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7ff f948 	bl	8001924 <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	429a      	cmp	r2, r3
 800269e:	d306      	bcc.n	80026ae <I2C_IsErrorOccurred+0x66>
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	193a      	adds	r2, r7, r4
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d149      	bne.n	8002742 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	01db      	lsls	r3, r3, #7
 80026b8:	4013      	ands	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026bc:	2013      	movs	r0, #19
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	2142      	movs	r1, #66	; 0x42
 80026c4:	5c52      	ldrb	r2, [r2, r1]
 80026c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	401a      	ands	r2, r3
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	429a      	cmp	r2, r3
 80026da:	d126      	bne.n	800272a <I2C_IsErrorOccurred+0xe2>
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	01db      	lsls	r3, r3, #7
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d021      	beq.n	800272a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d01d      	beq.n	800272a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	01c9      	lsls	r1, r1, #7
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002700:	f7ff f910 	bl	8001924 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002708:	e00f      	b.n	800272a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800270a:	f7ff f90b 	bl	8001924 <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b19      	cmp	r3, #25
 8002716:	d908      	bls.n	800272a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	2220      	movs	r2, #32
 800271c:	4313      	orrs	r3, r2
 800271e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002720:	2327      	movs	r3, #39	; 0x27
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]

              break;
 8002728:	e00b      	b.n	8002742 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2220      	movs	r2, #32
 8002732:	4013      	ands	r3, r2
 8002734:	2127      	movs	r1, #39	; 0x27
 8002736:	187a      	adds	r2, r7, r1
 8002738:	1879      	adds	r1, r7, r1
 800273a:	7809      	ldrb	r1, [r1, #0]
 800273c:	7011      	strb	r1, [r2, #0]
 800273e:	2b20      	cmp	r3, #32
 8002740:	d1e3      	bne.n	800270a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2220      	movs	r2, #32
 800274a:	4013      	ands	r3, r2
 800274c:	2b20      	cmp	r3, #32
 800274e:	d004      	beq.n	800275a <I2C_IsErrorOccurred+0x112>
 8002750:	2327      	movs	r3, #39	; 0x27
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d092      	beq.n	8002680 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800275a:	2327      	movs	r3, #39	; 0x27
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2220      	movs	r2, #32
 800276a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2204      	movs	r2, #4
 8002770:	4313      	orrs	r3, r2
 8002772:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002774:	2327      	movs	r3, #39	; 0x27
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4013      	ands	r3, r2
 800278c:	d00c      	beq.n	80027a8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2201      	movs	r2, #1
 8002792:	4313      	orrs	r3, r2
 8002794:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0052      	lsls	r2, r2, #1
 800279e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027a0:	2327      	movs	r3, #39	; 0x27
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4013      	ands	r3, r2
 80027b0:	d00c      	beq.n	80027cc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2208      	movs	r2, #8
 80027b6:	4313      	orrs	r3, r2
 80027b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	00d2      	lsls	r2, r2, #3
 80027c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027c4:	2327      	movs	r3, #39	; 0x27
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d00c      	beq.n	80027f0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2202      	movs	r2, #2
 80027da:	4313      	orrs	r3, r2
 80027dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027e8:	2327      	movs	r3, #39	; 0x27
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80027f0:	2327      	movs	r3, #39	; 0x27
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01d      	beq.n	8002836 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff fda7 	bl	8002350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	490d      	ldr	r1, [pc, #52]	; (8002844 <I2C_IsErrorOccurred+0x1fc>)
 800280e:	400a      	ands	r2, r1
 8002810:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2241      	movs	r2, #65	; 0x41
 8002822:	2120      	movs	r1, #32
 8002824:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2242      	movs	r2, #66	; 0x42
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002836:	2327      	movs	r3, #39	; 0x27
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b00b      	add	sp, #44	; 0x2c
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	fe00e800 	.word	0xfe00e800

08002848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	0008      	movs	r0, r1
 8002852:	0011      	movs	r1, r2
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	240a      	movs	r4, #10
 8002858:	193b      	adds	r3, r7, r4
 800285a:	1c02      	adds	r2, r0, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	2009      	movs	r0, #9
 8002860:	183b      	adds	r3, r7, r0
 8002862:	1c0a      	adds	r2, r1, #0
 8002864:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002866:	193b      	adds	r3, r7, r4
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	059b      	lsls	r3, r3, #22
 800286c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800286e:	183b      	adds	r3, r7, r0
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	0419      	lsls	r1, r3, #16
 8002874:	23ff      	movs	r3, #255	; 0xff
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800287a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	4313      	orrs	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002892:	0d51      	lsrs	r1, r2, #21
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	00d2      	lsls	r2, r2, #3
 8002898:	400a      	ands	r2, r1
 800289a:	4907      	ldr	r1, [pc, #28]	; (80028b8 <I2C_TransferConfig+0x70>)
 800289c:	430a      	orrs	r2, r1
 800289e:	43d2      	mvns	r2, r2
 80028a0:	401a      	ands	r2, r3
 80028a2:	0011      	movs	r1, r2
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b007      	add	sp, #28
 80028b4:	bd90      	pop	{r4, r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	03ff63ff 	.word	0x03ff63ff

080028bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2241      	movs	r2, #65	; 0x41
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d138      	bne.n	8002944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	5c9b      	ldrb	r3, [r3, r2]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028dc:	2302      	movs	r3, #2
 80028de:	e032      	b.n	8002946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2240      	movs	r2, #64	; 0x40
 80028e4:	2101      	movs	r1, #1
 80028e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	2124      	movs	r1, #36	; 0x24
 80028ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4911      	ldr	r1, [pc, #68]	; (8002950 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800290c:	400a      	ands	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2241      	movs	r2, #65	; 0x41
 8002934:	2120      	movs	r1, #32
 8002936:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	2100      	movs	r1, #0
 800293e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	ffffefff 	.word	0xffffefff

08002954 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	5c9b      	ldrb	r3, [r3, r2]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b20      	cmp	r3, #32
 8002968:	d139      	bne.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2240      	movs	r2, #64	; 0x40
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002974:	2302      	movs	r3, #2
 8002976:	e033      	b.n	80029e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2241      	movs	r2, #65	; 0x41
 8002984:	2124      	movs	r1, #36	; 0x24
 8002986:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2241      	movs	r2, #65	; 0x41
 80029ce:	2120      	movs	r1, #32
 80029d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029de:	2302      	movs	r3, #2
  }
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b004      	add	sp, #16
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	fffff0ff 	.word	0xfffff0ff

080029ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e301      	b.n	8003002 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d100      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1e>
 8002a08:	e08d      	b.n	8002b26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a0a:	4bc3      	ldr	r3, [pc, #780]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	220c      	movs	r2, #12
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d00e      	beq.n	8002a34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a16:	4bc0      	ldr	r3, [pc, #768]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x64>
 8002a22:	4bbd      	ldr	r3, [pc, #756]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	025b      	lsls	r3, r3, #9
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	025b      	lsls	r3, r3, #9
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d10d      	bne.n	8002a50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4bb8      	ldr	r3, [pc, #736]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <HAL_RCC_OscConfig+0x56>
 8002a40:	e070      	b.n	8002b24 <HAL_RCC_OscConfig+0x138>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d000      	beq.n	8002a4c <HAL_RCC_OscConfig+0x60>
 8002a4a:	e06b      	b.n	8002b24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e2d8      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x7c>
 8002a58:	4baf      	ldr	r3, [pc, #700]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4bae      	ldr	r3, [pc, #696]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	0249      	lsls	r1, r1, #9
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e02f      	b.n	8002ac8 <HAL_RCC_OscConfig+0xdc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x9e>
 8002a70:	4ba9      	ldr	r3, [pc, #676]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4ba8      	ldr	r3, [pc, #672]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a76:	49a9      	ldr	r1, [pc, #676]	; (8002d1c <HAL_RCC_OscConfig+0x330>)
 8002a78:	400a      	ands	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4ba6      	ldr	r3, [pc, #664]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4ba5      	ldr	r3, [pc, #660]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	49a7      	ldr	r1, [pc, #668]	; (8002d20 <HAL_RCC_OscConfig+0x334>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e01e      	b.n	8002ac8 <HAL_RCC_OscConfig+0xdc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d10e      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xc4>
 8002a92:	4ba1      	ldr	r3, [pc, #644]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	02c9      	lsls	r1, r1, #11
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	4b9d      	ldr	r3, [pc, #628]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b9c      	ldr	r3, [pc, #624]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	0249      	lsls	r1, r1, #9
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0xdc>
 8002ab0:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b98      	ldr	r3, [pc, #608]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	4999      	ldr	r1, [pc, #612]	; (8002d1c <HAL_RCC_OscConfig+0x330>)
 8002ab8:	400a      	ands	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b96      	ldr	r3, [pc, #600]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002ac2:	4997      	ldr	r1, [pc, #604]	; (8002d20 <HAL_RCC_OscConfig+0x334>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d014      	beq.n	8002afa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe ff28 	bl	8001924 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ada:	f7fe ff23 	bl	8001924 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	; 0x64
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e28a      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aec:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0xee>
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7fe ff13 	bl	8001924 <HAL_GetTick>
 8002afe:	0003      	movs	r3, r0
 8002b00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe ff0e 	bl	8001924 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e275      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	029b      	lsls	r3, r3, #10
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x118>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <HAL_RCC_OscConfig+0x146>
 8002b30:	e069      	b.n	8002c06 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b32:	4b79      	ldr	r3, [pc, #484]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	220c      	movs	r2, #12
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d00b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b3c:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	220c      	movs	r2, #12
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d11c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x196>
 8002b48:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	025b      	lsls	r3, r3, #9
 8002b50:	4013      	ands	r3, r2
 8002b52:	d116      	bne.n	8002b82 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b54:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d005      	beq.n	8002b6a <HAL_RCC_OscConfig+0x17e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e24b      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	22f8      	movs	r2, #248	; 0xf8
 8002b70:	4393      	bics	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00da      	lsls	r2, r3, #3
 8002b7a:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b80:	e041      	b.n	8002c06 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d024      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fec5 	bl	8001924 <HAL_GetTick>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fec0 	bl	8001924 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e227      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0f1      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	22f8      	movs	r2, #248	; 0xf8
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00da      	lsls	r2, r3, #3
 8002bcc:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e018      	b.n	8002c06 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	438a      	bics	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fea0 	bl	8001924 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fe9b 	bl	8001924 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e202      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2202      	movs	r2, #2
 8002c02:	4013      	ands	r3, r2
 8002c04:	d1f1      	bne.n	8002bea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d036      	beq.n	8002c7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d019      	beq.n	8002c4c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c18:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1c:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe fe7e 	bl	8001924 <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fe79 	bl	8001924 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1e0      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2202      	movs	r2, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d0f1      	beq.n	8002c2e <HAL_RCC_OscConfig+0x242>
 8002c4a:	e018      	b.n	8002c7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	438a      	bics	r2, r1
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fe64 	bl	8001924 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fe5f 	bl	8001924 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1c6      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d1f1      	bne.n	8002c62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2204      	movs	r2, #4
 8002c84:	4013      	ands	r3, r2
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x29e>
 8002c88:	e0b4      	b.n	8002df4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	201f      	movs	r0, #31
 8002c8c:	183b      	adds	r3, r7, r0
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	055b      	lsls	r3, r3, #21
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d110      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	0549      	lsls	r1, r1, #21
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	61da      	str	r2, [r3, #28]
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	055b      	lsls	r3, r3, #21
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cba:	183b      	adds	r3, r7, r0
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCC_OscConfig+0x338>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d11a      	bne.n	8002d02 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x338>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_RCC_OscConfig+0x338>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0049      	lsls	r1, r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fe23 	bl	8001924 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe fe1e 	bl	8001924 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e185      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x338>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d10e      	bne.n	8002d28 <HAL_RCC_OscConfig+0x33c>
 8002d0a:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <HAL_RCC_OscConfig+0x32c>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	430a      	orrs	r2, r1
 8002d14:	621a      	str	r2, [r3, #32]
 8002d16:	e035      	b.n	8002d84 <HAL_RCC_OscConfig+0x398>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	fffeffff 	.word	0xfffeffff
 8002d20:	fffbffff 	.word	0xfffbffff
 8002d24:	40007000 	.word	0x40007000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x35e>
 8002d30:	4bb6      	ldr	r3, [pc, #728]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	4bb5      	ldr	r3, [pc, #724]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	438a      	bics	r2, r1
 8002d3a:	621a      	str	r2, [r3, #32]
 8002d3c:	4bb3      	ldr	r3, [pc, #716]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	4bb2      	ldr	r3, [pc, #712]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d42:	2104      	movs	r1, #4
 8002d44:	438a      	bics	r2, r1
 8002d46:	621a      	str	r2, [r3, #32]
 8002d48:	e01c      	b.n	8002d84 <HAL_RCC_OscConfig+0x398>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x380>
 8002d52:	4bae      	ldr	r3, [pc, #696]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	4bad      	ldr	r3, [pc, #692]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d58:	2104      	movs	r1, #4
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	621a      	str	r2, [r3, #32]
 8002d5e:	4bab      	ldr	r3, [pc, #684]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	4baa      	ldr	r3, [pc, #680]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	621a      	str	r2, [r3, #32]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x398>
 8002d6c:	4ba7      	ldr	r3, [pc, #668]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	4ba6      	ldr	r3, [pc, #664]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d72:	2101      	movs	r1, #1
 8002d74:	438a      	bics	r2, r1
 8002d76:	621a      	str	r2, [r3, #32]
 8002d78:	4ba4      	ldr	r3, [pc, #656]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	4ba3      	ldr	r3, [pc, #652]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002d7e:	2104      	movs	r1, #4
 8002d80:	438a      	bics	r2, r1
 8002d82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d014      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fdca 	bl	8001924 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	e009      	b.n	8002daa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe fdc5 	bl	8001924 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	4a9b      	ldr	r2, [pc, #620]	; (8003010 <HAL_RCC_OscConfig+0x624>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e12b      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	4b98      	ldr	r3, [pc, #608]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x3aa>
 8002db4:	e013      	b.n	8002dde <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fdb5 	bl	8001924 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fdb0 	bl	8001924 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	4a91      	ldr	r2, [pc, #580]	; (8003010 <HAL_RCC_OscConfig+0x624>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e116      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dde:	231f      	movs	r3, #31
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	4b87      	ldr	r3, [pc, #540]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002dee:	4989      	ldr	r1, [pc, #548]	; (8003014 <HAL_RCC_OscConfig+0x628>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2210      	movs	r2, #16
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d12a      	bne.n	8002e5c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e06:	4b81      	ldr	r3, [pc, #516]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	4b80      	ldr	r3, [pc, #512]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e12:	4b7e      	ldr	r3, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e16:	4b7d      	ldr	r3, [pc, #500]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fd81 	bl	8001924 <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e28:	f7fe fd7c 	bl	8001924 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0e3      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e3a:	4b74      	ldr	r3, [pc, #464]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d0f1      	beq.n	8002e28 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e44:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	22f8      	movs	r2, #248	; 0xf8
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	00da      	lsls	r2, r3, #3
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	e034      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	3305      	adds	r3, #5
 8002e62:	d111      	bne.n	8002e88 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e64:	4b69      	ldr	r3, [pc, #420]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	22f8      	movs	r2, #248	; 0xf8
 8002e76:	4393      	bics	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	00da      	lsls	r2, r3, #3
 8002e80:	4b62      	ldr	r3, [pc, #392]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e82:	430a      	orrs	r2, r1
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
 8002e86:	e01e      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e88:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e8e:	2104      	movs	r1, #4
 8002e90:	430a      	orrs	r2, r1
 8002e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e94:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e98:	4b5c      	ldr	r3, [pc, #368]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fd40 	bl	8001924 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eaa:	f7fe fd3b 	bl	8001924 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0a2      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d1f1      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4e4>
 8002ece:	e097      	b.n	8003000 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	220c      	movs	r2, #12
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d100      	bne.n	8002ede <HAL_RCC_OscConfig+0x4f2>
 8002edc:	e06b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d14c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b49      	ldr	r3, [pc, #292]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b48      	ldr	r3, [pc, #288]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002eec:	494a      	ldr	r1, [pc, #296]	; (8003018 <HAL_RCC_OscConfig+0x62c>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fd17 	bl	8001924 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fd12 	bl	8001924 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e079      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	049b      	lsls	r3, r3, #18
 8002f16:	4013      	ands	r3, r2
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	220f      	movs	r2, #15
 8002f20:	4393      	bics	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a3a      	ldr	r2, [pc, #232]	; (800301c <HAL_RCC_OscConfig+0x630>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	0449      	lsls	r1, r1, #17
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fce5 	bl	8001924 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fce0 	bl	8001924 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e047      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	049b      	lsls	r3, r3, #18
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x574>
 8002f7e:	e03f      	b.n	8003000 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002f86:	4924      	ldr	r1, [pc, #144]	; (8003018 <HAL_RCC_OscConfig+0x62c>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fcca 	bl	8001924 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fcc5 	bl	8001924 <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e02c      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	049b      	lsls	r3, r3, #18
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x5aa>
 8002fb4:	e024      	b.n	8003000 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e01f      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x620>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	025b      	lsls	r3, r3, #9
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d10e      	bne.n	8002ffc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	23f0      	movs	r3, #240	; 0xf0
 8002ff0:	039b      	lsls	r3, r3, #14
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b008      	add	sp, #32
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	00001388 	.word	0x00001388
 8003014:	efffffff 	.word	0xefffffff
 8003018:	feffffff 	.word	0xfeffffff
 800301c:	ffc2ffff 	.word	0xffc2ffff

08003020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b3      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	4013      	ands	r3, r2
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d911      	bls.n	8003066 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b58      	ldr	r3, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	4393      	bics	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	4013      	ands	r3, r2
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d001      	beq.n	8003066 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e09a      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2202      	movs	r2, #2
 800306c:	4013      	ands	r3, r2
 800306e:	d015      	beq.n	800309c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2204      	movs	r2, #4
 8003076:	4013      	ands	r3, r2
 8003078:	d006      	beq.n	8003088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800307a:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 8003080:	21e0      	movs	r1, #224	; 0xe0
 8003082:	00c9      	lsls	r1, r1, #3
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	22f0      	movs	r2, #240	; 0xf0
 800308e:	4393      	bics	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2201      	movs	r2, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	d040      	beq.n	8003128 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	4013      	ands	r3, r2
 80030b8:	d114      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06e      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	049b      	lsls	r3, r3, #18
 80030ce:	4013      	ands	r3, r2
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e062      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2202      	movs	r2, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e05b      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e4:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2203      	movs	r2, #3
 80030ea:	4393      	bics	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fc14 	bl	8001924 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003100:	e009      	b.n	8003116 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003102:	f7fe fc0f 	bl	8001924 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x18c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e042      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	220c      	movs	r2, #12
 800311c:	401a      	ands	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1ec      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d211      	bcs.n	800315a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	4393      	bics	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x184>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d001      	beq.n	800315a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e020      	b.n	800319c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2204      	movs	r2, #4
 8003160:	4013      	ands	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_RCC_ClockConfig+0x190>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003178:	f000 f820 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800317c:	0001      	movs	r1, r0
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x188>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	220f      	movs	r2, #15
 8003186:	4013      	ands	r3, r2
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x194>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	000a      	movs	r2, r1
 800318e:	40da      	lsrs	r2, r3
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x198>)
 8003192:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe fb7f 	bl	8001898 <HAL_InitTick>
  
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40022000 	.word	0x40022000
 80031a8:	40021000 	.word	0x40021000
 80031ac:	00001388 	.word	0x00001388
 80031b0:	fffff8ff 	.word	0xfffff8ff
 80031b4:	080046d4 	.word	0x080046d4
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	220c      	movs	r2, #12
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x30>
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ea:	e02c      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ee:	613b      	str	r3, [r7, #16]
      break;
 80031f0:	e02c      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	220f      	movs	r2, #15
 80031f8:	4013      	ands	r3, r2
 80031fa:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031fc:	5cd3      	ldrb	r3, [r2, r3]
 80031fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	220f      	movs	r2, #15
 8003206:	4013      	ands	r3, r2
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <HAL_RCC_GetSysClockFreq+0xa8>)
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	4013      	ands	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4810      	ldr	r0, [pc, #64]	; (800325c <HAL_RCC_GetSysClockFreq+0xa0>)
 800321c:	f7fc ff86 	bl	800012c <__udivsi3>
 8003220:	0003      	movs	r3, r0
 8003222:	001a      	movs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4353      	muls	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e009      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	000a      	movs	r2, r1
 8003230:	0152      	lsls	r2, r2, #5
 8003232:	1a52      	subs	r2, r2, r1
 8003234:	0193      	lsls	r3, r2, #6
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	185b      	adds	r3, r3, r1
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
      break;
 8003244:	e002      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003248:	613b      	str	r3, [r7, #16]
      break;
 800324a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800324c:	693b      	ldr	r3, [r7, #16]
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	40021000 	.word	0x40021000
 800325c:	007a1200 	.word	0x007a1200
 8003260:	080046ec 	.word	0x080046ec
 8003264:	080046fc 	.word	0x080046fc

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_RCC_GetHCLKFreq+0x10>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003280:	f7ff fff2 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003284:	0001      	movs	r1, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	2207      	movs	r2, #7
 800328e:	4013      	ands	r3, r2
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	40d9      	lsrs	r1, r3
 8003296:	000b      	movs	r3, r1
}    
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	40021000 	.word	0x40021000
 80032a4:	080046e4 	.word	0x080046e4

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	025b      	lsls	r3, r3, #9
 80032c0:	4013      	ands	r3, r2
 80032c2:	d100      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80032c4:	e08e      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2017      	movs	r0, #23
 80032c8:	183b      	adds	r3, r7, r0
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b5f      	ldr	r3, [pc, #380]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	4013      	ands	r3, r2
 80032d8:	d110      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b5c      	ldr	r3, [pc, #368]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0549      	lsls	r1, r1, #21
 80032e4:	430a      	orrs	r2, r1
 80032e6:	61da      	str	r2, [r3, #28]
 80032e8:	4b58      	ldr	r3, [pc, #352]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	055b      	lsls	r3, r3, #21
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b54      	ldr	r3, [pc, #336]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d11a      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003308:	4b51      	ldr	r3, [pc, #324]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	0049      	lsls	r1, r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe fb05 	bl	8001924 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	e008      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003320:	f7fe fb00 	bl	8001924 <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e087      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4013      	ands	r3, r2
 800333c:	d0f0      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	23c0      	movs	r3, #192	; 0xc0
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d034      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4013      	ands	r3, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	429a      	cmp	r2, r3
 800335e:	d02c      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003360:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	0249      	lsls	r1, r1, #9
 8003374:	430a      	orrs	r2, r1
 8003376:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800337a:	6a1a      	ldr	r2, [r3, #32]
 800337c:	4b33      	ldr	r3, [pc, #204]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800337e:	4936      	ldr	r1, [pc, #216]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003380:	400a      	ands	r2, r1
 8003382:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	4013      	ands	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fe fac7 	bl	8001924 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe fac2 	bl	8001924 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	4a2d      	ldr	r2, [pc, #180]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e048      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	2202      	movs	r2, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033ca:	430a      	orrs	r2, r1
 80033cc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ce:	2317      	movs	r3, #23
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033de:	4920      	ldr	r1, [pc, #128]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	2203      	movs	r2, #3
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033fe:	430a      	orrs	r2, r1
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d009      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2210      	movs	r2, #16
 8003412:	4393      	bics	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800341c:	430a      	orrs	r2, r1
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4013      	ands	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2240      	movs	r2, #64	; 0x40
 8003432:	4393      	bics	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800343c:	430a      	orrs	r2, r1
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
 8003454:	fffffcff 	.word	0xfffffcff
 8003458:	fffeffff 	.word	0xfffeffff
 800345c:	00001388 	.word	0x00001388
 8003460:	efffffff 	.word	0xefffffff

08003464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e044      	b.n	8003500 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2278      	movs	r2, #120	; 0x78
 8003482:	2100      	movs	r1, #0
 8003484:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f7fe f925 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2224      	movs	r2, #36	; 0x24
 8003492:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	438a      	bics	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 f8d0 	bl	800364c <UART_SetConfig>
 80034ac:	0003      	movs	r3, r0
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e024      	b.n	8003500 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 fa03 	bl	80038cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	490d      	ldr	r1, [pc, #52]	; (8003508 <HAL_UART_Init+0xa4>)
 80034d2:	400a      	ands	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	212a      	movs	r1, #42	; 0x2a
 80034e2:	438a      	bics	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fa9b 	bl	8003a34 <UART_CheckIdleState>
 80034fe:	0003      	movs	r3, r0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}
 8003508:	ffffb7ff 	.word	0xffffb7ff

0800350c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	1dbb      	adds	r3, r7, #6
 800351a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003520:	2b20      	cmp	r3, #32
 8003522:	d000      	beq.n	8003526 <HAL_UART_Transmit+0x1a>
 8003524:	e08d      	b.n	8003642 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_UART_Transmit+0x28>
 800352c:	1dbb      	adds	r3, r7, #6
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e085      	b.n	8003644 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	429a      	cmp	r2, r3
 8003542:	d109      	bne.n	8003558 <HAL_UART_Transmit+0x4c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d001      	beq.n	8003558 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e075      	b.n	8003644 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2284      	movs	r2, #132	; 0x84
 800355c:	2100      	movs	r1, #0
 800355e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003566:	f7fe f9dd 	bl	8001924 <HAL_GetTick>
 800356a:	0003      	movs	r3, r0
 800356c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1dba      	adds	r2, r7, #6
 8003572:	2150      	movs	r1, #80	; 0x50
 8003574:	8812      	ldrh	r2, [r2, #0]
 8003576:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1dba      	adds	r2, r7, #6
 800357c:	2152      	movs	r1, #82	; 0x52
 800357e:	8812      	ldrh	r2, [r2, #0]
 8003580:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	015b      	lsls	r3, r3, #5
 800358a:	429a      	cmp	r2, r3
 800358c:	d108      	bne.n	80035a0 <HAL_UART_Transmit+0x94>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a8:	e030      	b.n	800360c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	0013      	movs	r3, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	f000 fae4 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d004      	beq.n	80035ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e03c      	b.n	8003644 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	05d2      	lsls	r2, r2, #23
 80035da:	0dd2      	lsrs	r2, r2, #23
 80035dc:	b292      	uxth	r2, r2
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	3302      	adds	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e008      	b.n	80035fa <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	b292      	uxth	r2, r2
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2252      	movs	r2, #82	; 0x52
 80035fe:	5a9b      	ldrh	r3, [r3, r2]
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b299      	uxth	r1, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2252      	movs	r2, #82	; 0x52
 800360a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2252      	movs	r2, #82	; 0x52
 8003610:	5a9b      	ldrh	r3, [r3, r2]
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1c8      	bne.n	80035aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	0013      	movs	r3, r2
 8003622:	2200      	movs	r2, #0
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	f000 faad 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d004      	beq.n	8003638 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e005      	b.n	8003644 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b008      	add	sp, #32
 800364a:	bd80      	pop	{r7, pc}

0800364c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003654:	231e      	movs	r3, #30
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a8d      	ldr	r2, [pc, #564]	; (80038b0 <UART_SetConfig+0x264>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a88      	ldr	r2, [pc, #544]	; (80038b4 <UART_SetConfig+0x268>)
 8003692:	4013      	ands	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <UART_SetConfig+0x26c>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7b      	ldr	r2, [pc, #492]	; (80038bc <UART_SetConfig+0x270>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d127      	bne.n	8003722 <UART_SetConfig+0xd6>
 80036d2:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <UART_SetConfig+0x274>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	2203      	movs	r2, #3
 80036d8:	4013      	ands	r3, r2
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d00d      	beq.n	80036fa <UART_SetConfig+0xae>
 80036de:	d81b      	bhi.n	8003718 <UART_SetConfig+0xcc>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d014      	beq.n	800370e <UART_SetConfig+0xc2>
 80036e4:	d818      	bhi.n	8003718 <UART_SetConfig+0xcc>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <UART_SetConfig+0xa4>
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d00a      	beq.n	8003704 <UART_SetConfig+0xb8>
 80036ee:	e013      	b.n	8003718 <UART_SetConfig+0xcc>
 80036f0:	231f      	movs	r3, #31
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e021      	b.n	800373e <UART_SetConfig+0xf2>
 80036fa:	231f      	movs	r3, #31
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e01c      	b.n	800373e <UART_SetConfig+0xf2>
 8003704:	231f      	movs	r3, #31
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e017      	b.n	800373e <UART_SetConfig+0xf2>
 800370e:	231f      	movs	r3, #31
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2208      	movs	r2, #8
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e012      	b.n	800373e <UART_SetConfig+0xf2>
 8003718:	231f      	movs	r3, #31
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2210      	movs	r2, #16
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e00d      	b.n	800373e <UART_SetConfig+0xf2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a67      	ldr	r2, [pc, #412]	; (80038c4 <UART_SetConfig+0x278>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d104      	bne.n	8003736 <UART_SetConfig+0xea>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e003      	b.n	800373e <UART_SetConfig+0xf2>
 8003736:	231f      	movs	r3, #31
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2210      	movs	r2, #16
 800373c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	429a      	cmp	r2, r3
 8003748:	d15c      	bne.n	8003804 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d015      	beq.n	8003780 <UART_SetConfig+0x134>
 8003754:	dc18      	bgt.n	8003788 <UART_SetConfig+0x13c>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d00d      	beq.n	8003776 <UART_SetConfig+0x12a>
 800375a:	dc15      	bgt.n	8003788 <UART_SetConfig+0x13c>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <UART_SetConfig+0x11a>
 8003760:	2b02      	cmp	r3, #2
 8003762:	d005      	beq.n	8003770 <UART_SetConfig+0x124>
 8003764:	e010      	b.n	8003788 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003766:	f7ff fd89 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 800376a:	0003      	movs	r3, r0
 800376c:	61bb      	str	r3, [r7, #24]
        break;
 800376e:	e012      	b.n	8003796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <UART_SetConfig+0x27c>)
 8003772:	61bb      	str	r3, [r7, #24]
        break;
 8003774:	e00f      	b.n	8003796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7ff fd21 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800377a:	0003      	movs	r3, r0
 800377c:	61bb      	str	r3, [r7, #24]
        break;
 800377e:	e00a      	b.n	8003796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	61bb      	str	r3, [r7, #24]
        break;
 8003786:	e006      	b.n	8003796 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800378c:	231e      	movs	r3, #30
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
        break;
 8003794:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d100      	bne.n	800379e <UART_SetConfig+0x152>
 800379c:	e07a      	b.n	8003894 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0019      	movs	r1, r3
 80037b0:	0010      	movs	r0, r2
 80037b2:	f7fc fcbb 	bl	800012c <__udivsi3>
 80037b6:	0003      	movs	r3, r0
 80037b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d91c      	bls.n	80037fa <UART_SetConfig+0x1ae>
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	025b      	lsls	r3, r3, #9
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d217      	bcs.n	80037fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	200e      	movs	r0, #14
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	210f      	movs	r1, #15
 80037d4:	438a      	bics	r2, r1
 80037d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2207      	movs	r2, #7
 80037e0:	4013      	ands	r3, r2
 80037e2:	b299      	uxth	r1, r3
 80037e4:	183b      	adds	r3, r7, r0
 80037e6:	183a      	adds	r2, r7, r0
 80037e8:	8812      	ldrh	r2, [r2, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	183a      	adds	r2, r7, r0
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	e04c      	b.n	8003894 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80037fa:	231e      	movs	r3, #30
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e047      	b.n	8003894 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003804:	231f      	movs	r3, #31
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d015      	beq.n	800383a <UART_SetConfig+0x1ee>
 800380e:	dc18      	bgt.n	8003842 <UART_SetConfig+0x1f6>
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00d      	beq.n	8003830 <UART_SetConfig+0x1e4>
 8003814:	dc15      	bgt.n	8003842 <UART_SetConfig+0x1f6>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <UART_SetConfig+0x1d4>
 800381a:	2b02      	cmp	r3, #2
 800381c:	d005      	beq.n	800382a <UART_SetConfig+0x1de>
 800381e:	e010      	b.n	8003842 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7ff fd2c 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8003824:	0003      	movs	r3, r0
 8003826:	61bb      	str	r3, [r7, #24]
        break;
 8003828:	e012      	b.n	8003850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <UART_SetConfig+0x27c>)
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003830:	f7ff fcc4 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8003834:	0003      	movs	r3, r0
 8003836:	61bb      	str	r3, [r7, #24]
        break;
 8003838:	e00a      	b.n	8003850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e006      	b.n	8003850 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003846:	231e      	movs	r3, #30
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
        break;
 800384e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01e      	beq.n	8003894 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085a      	lsrs	r2, r3, #1
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	18d2      	adds	r2, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f7fc fc60 	bl	800012c <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d90a      	bls.n	800388c <UART_SetConfig+0x240>
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	025b      	lsls	r3, r3, #9
 800387c:	429a      	cmp	r2, r3
 800387e:	d205      	bcs.n	800388c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	e003      	b.n	8003894 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800388c:	231e      	movs	r3, #30
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038a0:	231e      	movs	r3, #30
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b008      	add	sp, #32
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	ffff69f3 	.word	0xffff69f3
 80038b4:	ffffcfff 	.word	0xffffcfff
 80038b8:	fffff4ff 	.word	0xfffff4ff
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40004400 	.word	0x40004400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <UART_AdvFeatureConfig+0x144>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2202      	movs	r2, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	d00b      	beq.n	8003918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a43      	ldr	r2, [pc, #268]	; (8003a14 <UART_AdvFeatureConfig+0x148>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2204      	movs	r2, #4
 800391e:	4013      	ands	r3, r2
 8003920:	d00b      	beq.n	800393a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a3b      	ldr	r2, [pc, #236]	; (8003a18 <UART_AdvFeatureConfig+0x14c>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2208      	movs	r2, #8
 8003940:	4013      	ands	r3, r2
 8003942:	d00b      	beq.n	800395c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a34      	ldr	r2, [pc, #208]	; (8003a1c <UART_AdvFeatureConfig+0x150>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2210      	movs	r2, #16
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <UART_AdvFeatureConfig+0x154>)
 800396e:	4013      	ands	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2220      	movs	r2, #32
 8003984:	4013      	ands	r3, r2
 8003986:	d00b      	beq.n	80039a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <UART_AdvFeatureConfig+0x158>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <UART_AdvFeatureConfig+0x15c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	035b      	lsls	r3, r3, #13
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10b      	bne.n	80039e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <UART_AdvFeatureConfig+0x160>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	4013      	ands	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <UART_AdvFeatureConfig+0x164>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	fffdffff 	.word	0xfffdffff
 8003a14:	fffeffff 	.word	0xfffeffff
 8003a18:	fffbffff 	.word	0xfffbffff
 8003a1c:	ffff7fff 	.word	0xffff7fff
 8003a20:	ffffefff 	.word	0xffffefff
 8003a24:	ffffdfff 	.word	0xffffdfff
 8003a28:	ffefffff 	.word	0xffefffff
 8003a2c:	ff9fffff 	.word	0xff9fffff
 8003a30:	fff7ffff 	.word	0xfff7ffff

08003a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b092      	sub	sp, #72	; 0x48
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2284      	movs	r2, #132	; 0x84
 8003a40:	2100      	movs	r1, #0
 8003a42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a44:	f7fd ff6e 	bl	8001924 <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d12c      	bne.n	8003ab4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	0391      	lsls	r1, r2, #14
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <UART_CheckIdleState+0x148>)
 8003a64:	9200      	str	r2, [sp, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f000 f88c 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d021      	beq.n	8003ab4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2278      	movs	r2, #120	; 0x78
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e05f      	b.n	8003b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d146      	bne.n	8003b50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	03d1      	lsls	r1, r2, #15
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <UART_CheckIdleState+0x148>)
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f000 f858 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d03b      	beq.n	8003b50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ade:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4921      	ldr	r1, [pc, #132]	; (8003b80 <UART_CheckIdleState+0x14c>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
 8003b14:	2301      	movs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	2120      	movs	r1, #32
 8003b42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2278      	movs	r2, #120	; 0x78
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e011      	b.n	8003b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2278      	movs	r2, #120	; 0x78
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b010      	add	sp, #64	; 0x40
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	01ffffff 	.word	0x01ffffff
 8003b80:	fffffedf 	.word	0xfffffedf

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e04b      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	d048      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fd fec2 	bl	8001924 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e04b      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d035      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d111      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f83c 	bl	8003c58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2284      	movs	r2, #132	; 0x84
 8003be4:	2108      	movs	r1, #8
 8003be6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2278      	movs	r2, #120	; 0x78
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e02c      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	401a      	ands	r2, r3
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d112      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f81f 	bl	8003c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2284      	movs	r2, #132	; 0x84
 8003c1e:	2120      	movs	r1, #32
 8003c20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2278      	movs	r2, #120	; 0x78
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00f      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	425a      	negs	r2, r3
 8003c3e:	4153      	adcs	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	001a      	movs	r2, r3
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d0a4      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	; 0x38
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	617b      	str	r3, [r7, #20]
  return(result);
 8003c66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4926      	ldr	r1, [pc, #152]	; (8003d1c <UART_EndRxTransfer+0xc4>)
 8003c82:	400a      	ands	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	623b      	str	r3, [r7, #32]
  return(result);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d118      	bne.n	8003cfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2110      	movs	r1, #16
 8003cee:	438a      	bics	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	2120      	movs	r1, #32
 8003d04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b00e      	add	sp, #56	; 0x38
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	fffffedf 	.word	0xfffffedf

08003d20 <siprintf>:
 8003d20:	b40e      	push	{r1, r2, r3}
 8003d22:	b500      	push	{lr}
 8003d24:	490b      	ldr	r1, [pc, #44]	; (8003d54 <siprintf+0x34>)
 8003d26:	b09c      	sub	sp, #112	; 0x70
 8003d28:	ab1d      	add	r3, sp, #116	; 0x74
 8003d2a:	9002      	str	r0, [sp, #8]
 8003d2c:	9006      	str	r0, [sp, #24]
 8003d2e:	9107      	str	r1, [sp, #28]
 8003d30:	9104      	str	r1, [sp, #16]
 8003d32:	4809      	ldr	r0, [pc, #36]	; (8003d58 <siprintf+0x38>)
 8003d34:	4909      	ldr	r1, [pc, #36]	; (8003d5c <siprintf+0x3c>)
 8003d36:	cb04      	ldmia	r3!, {r2}
 8003d38:	9105      	str	r1, [sp, #20]
 8003d3a:	6800      	ldr	r0, [r0, #0]
 8003d3c:	a902      	add	r1, sp, #8
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	f000 f9aa 	bl	8004098 <_svfiprintf_r>
 8003d44:	2200      	movs	r2, #0
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	b01c      	add	sp, #112	; 0x70
 8003d4c:	bc08      	pop	{r3}
 8003d4e:	b003      	add	sp, #12
 8003d50:	4718      	bx	r3
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	7fffffff 	.word	0x7fffffff
 8003d58:	20000058 	.word	0x20000058
 8003d5c:	ffff0208 	.word	0xffff0208

08003d60 <memset>:
 8003d60:	0003      	movs	r3, r0
 8003d62:	1882      	adds	r2, r0, r2
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memset+0xa>
 8003d68:	4770      	bx	lr
 8003d6a:	7019      	strb	r1, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	e7f9      	b.n	8003d64 <memset+0x4>

08003d70 <__errno>:
 8003d70:	4b01      	ldr	r3, [pc, #4]	; (8003d78 <__errno+0x8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	4770      	bx	lr
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	20000058 	.word	0x20000058

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	2600      	movs	r6, #0
 8003d80:	4c0c      	ldr	r4, [pc, #48]	; (8003db4 <__libc_init_array+0x38>)
 8003d82:	4d0d      	ldr	r5, [pc, #52]	; (8003db8 <__libc_init_array+0x3c>)
 8003d84:	1b64      	subs	r4, r4, r5
 8003d86:	10a4      	asrs	r4, r4, #2
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	f000 fc75 	bl	800467c <_init>
 8003d92:	4c0a      	ldr	r4, [pc, #40]	; (8003dbc <__libc_init_array+0x40>)
 8003d94:	4d0a      	ldr	r5, [pc, #40]	; (8003dc0 <__libc_init_array+0x44>)
 8003d96:	1b64      	subs	r4, r4, r5
 8003d98:	10a4      	asrs	r4, r4, #2
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	00b3      	lsls	r3, r6, #2
 8003da2:	58eb      	ldr	r3, [r5, r3]
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	00b3      	lsls	r3, r6, #2
 8003dac:	58eb      	ldr	r3, [r5, r3]
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	08004740 	.word	0x08004740
 8003db8:	08004740 	.word	0x08004740
 8003dbc:	08004744 	.word	0x08004744
 8003dc0:	08004740 	.word	0x08004740

08003dc4 <__retarget_lock_acquire_recursive>:
 8003dc4:	4770      	bx	lr

08003dc6 <__retarget_lock_release_recursive>:
 8003dc6:	4770      	bx	lr

08003dc8 <strcpy>:
 8003dc8:	0003      	movs	r3, r0
 8003dca:	780a      	ldrb	r2, [r1, #0]
 8003dcc:	3101      	adds	r1, #1
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d1f9      	bne.n	8003dca <strcpy+0x2>
 8003dd6:	4770      	bx	lr

08003dd8 <_free_r>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	0005      	movs	r5, r0
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	d010      	beq.n	8003e02 <_free_r+0x2a>
 8003de0:	1f0c      	subs	r4, r1, #4
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	da00      	bge.n	8003dea <_free_r+0x12>
 8003de8:	18e4      	adds	r4, r4, r3
 8003dea:	0028      	movs	r0, r5
 8003dec:	f000 f8e2 	bl	8003fb4 <__malloc_lock>
 8003df0:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <_free_r+0x90>)
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <_free_r+0x2c>
 8003df8:	6063      	str	r3, [r4, #4]
 8003dfa:	6014      	str	r4, [r2, #0]
 8003dfc:	0028      	movs	r0, r5
 8003dfe:	f000 f8e1 	bl	8003fc4 <__malloc_unlock>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d908      	bls.n	8003e1a <_free_r+0x42>
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	1821      	adds	r1, r4, r0
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d1f3      	bne.n	8003df8 <_free_r+0x20>
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	1809      	adds	r1, r1, r0
 8003e16:	6021      	str	r1, [r4, #0]
 8003e18:	e7ee      	b.n	8003df8 <_free_r+0x20>
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <_free_r+0x4e>
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	d9f9      	bls.n	8003e1a <_free_r+0x42>
 8003e26:	6811      	ldr	r1, [r2, #0]
 8003e28:	1850      	adds	r0, r2, r1
 8003e2a:	42a0      	cmp	r0, r4
 8003e2c:	d10b      	bne.n	8003e46 <_free_r+0x6e>
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	1809      	adds	r1, r1, r0
 8003e32:	1850      	adds	r0, r2, r1
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	4283      	cmp	r3, r0
 8003e38:	d1e0      	bne.n	8003dfc <_free_r+0x24>
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	1841      	adds	r1, r0, r1
 8003e40:	6011      	str	r1, [r2, #0]
 8003e42:	6053      	str	r3, [r2, #4]
 8003e44:	e7da      	b.n	8003dfc <_free_r+0x24>
 8003e46:	42a0      	cmp	r0, r4
 8003e48:	d902      	bls.n	8003e50 <_free_r+0x78>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	e7d5      	b.n	8003dfc <_free_r+0x24>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	1821      	adds	r1, r4, r0
 8003e54:	428b      	cmp	r3, r1
 8003e56:	d103      	bne.n	8003e60 <_free_r+0x88>
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	1809      	adds	r1, r1, r0
 8003e5e:	6021      	str	r1, [r4, #0]
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	6054      	str	r4, [r2, #4]
 8003e64:	e7ca      	b.n	8003dfc <_free_r+0x24>
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	2000029c 	.word	0x2000029c

08003e6c <sbrk_aligned>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4e0f      	ldr	r6, [pc, #60]	; (8003eac <sbrk_aligned+0x40>)
 8003e70:	000d      	movs	r5, r1
 8003e72:	6831      	ldr	r1, [r6, #0]
 8003e74:	0004      	movs	r4, r0
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d102      	bne.n	8003e80 <sbrk_aligned+0x14>
 8003e7a:	f000 fba1 	bl	80045c0 <_sbrk_r>
 8003e7e:	6030      	str	r0, [r6, #0]
 8003e80:	0029      	movs	r1, r5
 8003e82:	0020      	movs	r0, r4
 8003e84:	f000 fb9c 	bl	80045c0 <_sbrk_r>
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d00a      	beq.n	8003ea2 <sbrk_aligned+0x36>
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	1cc5      	adds	r5, r0, #3
 8003e90:	439d      	bics	r5, r3
 8003e92:	42a8      	cmp	r0, r5
 8003e94:	d007      	beq.n	8003ea6 <sbrk_aligned+0x3a>
 8003e96:	1a29      	subs	r1, r5, r0
 8003e98:	0020      	movs	r0, r4
 8003e9a:	f000 fb91 	bl	80045c0 <_sbrk_r>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d101      	bne.n	8003ea6 <sbrk_aligned+0x3a>
 8003ea2:	2501      	movs	r5, #1
 8003ea4:	426d      	negs	r5, r5
 8003ea6:	0028      	movs	r0, r5
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	200002a0 	.word	0x200002a0

08003eb0 <_malloc_r>:
 8003eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	1ccb      	adds	r3, r1, #3
 8003eb6:	4393      	bics	r3, r2
 8003eb8:	3308      	adds	r3, #8
 8003eba:	0006      	movs	r6, r0
 8003ebc:	001f      	movs	r7, r3
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d238      	bcs.n	8003f34 <_malloc_r+0x84>
 8003ec2:	270c      	movs	r7, #12
 8003ec4:	42b9      	cmp	r1, r7
 8003ec6:	d837      	bhi.n	8003f38 <_malloc_r+0x88>
 8003ec8:	0030      	movs	r0, r6
 8003eca:	f000 f873 	bl	8003fb4 <__malloc_lock>
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <_malloc_r+0x100>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	001c      	movs	r4, r3
 8003ed6:	2c00      	cmp	r4, #0
 8003ed8:	d133      	bne.n	8003f42 <_malloc_r+0x92>
 8003eda:	0039      	movs	r1, r7
 8003edc:	0030      	movs	r0, r6
 8003ede:	f7ff ffc5 	bl	8003e6c <sbrk_aligned>
 8003ee2:	0004      	movs	r4, r0
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d15e      	bne.n	8003fa6 <_malloc_r+0xf6>
 8003ee8:	9b00      	ldr	r3, [sp, #0]
 8003eea:	681c      	ldr	r4, [r3, #0]
 8003eec:	0025      	movs	r5, r4
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	d14e      	bne.n	8003f90 <_malloc_r+0xe0>
 8003ef2:	2c00      	cmp	r4, #0
 8003ef4:	d051      	beq.n	8003f9a <_malloc_r+0xea>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	0029      	movs	r1, r5
 8003efa:	18e3      	adds	r3, r4, r3
 8003efc:	0030      	movs	r0, r6
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	f000 fb5e 	bl	80045c0 <_sbrk_r>
 8003f04:	9b01      	ldr	r3, [sp, #4]
 8003f06:	4283      	cmp	r3, r0
 8003f08:	d147      	bne.n	8003f9a <_malloc_r+0xea>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0030      	movs	r0, r6
 8003f0e:	1aff      	subs	r7, r7, r3
 8003f10:	0039      	movs	r1, r7
 8003f12:	f7ff ffab 	bl	8003e6c <sbrk_aligned>
 8003f16:	3001      	adds	r0, #1
 8003f18:	d03f      	beq.n	8003f9a <_malloc_r+0xea>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	19db      	adds	r3, r3, r7
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	9b00      	ldr	r3, [sp, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d040      	beq.n	8003faa <_malloc_r+0xfa>
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	42a2      	cmp	r2, r4
 8003f2c:	d133      	bne.n	8003f96 <_malloc_r+0xe6>
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e014      	b.n	8003f5e <_malloc_r+0xae>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	dac5      	bge.n	8003ec4 <_malloc_r+0x14>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	6033      	str	r3, [r6, #0]
 8003f3e:	0028      	movs	r0, r5
 8003f40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	1bc9      	subs	r1, r1, r7
 8003f46:	d420      	bmi.n	8003f8a <_malloc_r+0xda>
 8003f48:	290b      	cmp	r1, #11
 8003f4a:	d918      	bls.n	8003f7e <_malloc_r+0xce>
 8003f4c:	19e2      	adds	r2, r4, r7
 8003f4e:	6027      	str	r7, [r4, #0]
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d112      	bne.n	8003f7a <_malloc_r+0xca>
 8003f54:	9b00      	ldr	r3, [sp, #0]
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	6011      	str	r1, [r2, #0]
 8003f5c:	6053      	str	r3, [r2, #4]
 8003f5e:	0030      	movs	r0, r6
 8003f60:	0025      	movs	r5, r4
 8003f62:	f000 f82f 	bl	8003fc4 <__malloc_unlock>
 8003f66:	2207      	movs	r2, #7
 8003f68:	350b      	adds	r5, #11
 8003f6a:	1d23      	adds	r3, r4, #4
 8003f6c:	4395      	bics	r5, r2
 8003f6e:	1aea      	subs	r2, r5, r3
 8003f70:	429d      	cmp	r5, r3
 8003f72:	d0e4      	beq.n	8003f3e <_malloc_r+0x8e>
 8003f74:	1b5b      	subs	r3, r3, r5
 8003f76:	50a3      	str	r3, [r4, r2]
 8003f78:	e7e1      	b.n	8003f3e <_malloc_r+0x8e>
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	e7ec      	b.n	8003f58 <_malloc_r+0xa8>
 8003f7e:	6862      	ldr	r2, [r4, #4]
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d1d5      	bne.n	8003f30 <_malloc_r+0x80>
 8003f84:	9b00      	ldr	r3, [sp, #0]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e7e9      	b.n	8003f5e <_malloc_r+0xae>
 8003f8a:	0023      	movs	r3, r4
 8003f8c:	6864      	ldr	r4, [r4, #4]
 8003f8e:	e7a2      	b.n	8003ed6 <_malloc_r+0x26>
 8003f90:	002c      	movs	r4, r5
 8003f92:	686d      	ldr	r5, [r5, #4]
 8003f94:	e7ab      	b.n	8003eee <_malloc_r+0x3e>
 8003f96:	0013      	movs	r3, r2
 8003f98:	e7c4      	b.n	8003f24 <_malloc_r+0x74>
 8003f9a:	230c      	movs	r3, #12
 8003f9c:	0030      	movs	r0, r6
 8003f9e:	6033      	str	r3, [r6, #0]
 8003fa0:	f000 f810 	bl	8003fc4 <__malloc_unlock>
 8003fa4:	e7cb      	b.n	8003f3e <_malloc_r+0x8e>
 8003fa6:	6027      	str	r7, [r4, #0]
 8003fa8:	e7d9      	b.n	8003f5e <_malloc_r+0xae>
 8003faa:	605b      	str	r3, [r3, #4]
 8003fac:	deff      	udf	#255	; 0xff
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	2000029c 	.word	0x2000029c

08003fb4 <__malloc_lock>:
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <__malloc_lock+0xc>)
 8003fb8:	f7ff ff04 	bl	8003dc4 <__retarget_lock_acquire_recursive>
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	20000298 	.word	0x20000298

08003fc4 <__malloc_unlock>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4802      	ldr	r0, [pc, #8]	; (8003fd0 <__malloc_unlock+0xc>)
 8003fc8:	f7ff fefd 	bl	8003dc6 <__retarget_lock_release_recursive>
 8003fcc:	bd10      	pop	{r4, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	20000298 	.word	0x20000298

08003fd4 <__ssputs_r>:
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	9203      	str	r2, [sp, #12]
 8003fdc:	688e      	ldr	r6, [r1, #8]
 8003fde:	9a01      	ldr	r2, [sp, #4]
 8003fe0:	0007      	movs	r7, r0
 8003fe2:	000c      	movs	r4, r1
 8003fe4:	680b      	ldr	r3, [r1, #0]
 8003fe6:	4296      	cmp	r6, r2
 8003fe8:	d831      	bhi.n	800404e <__ssputs_r+0x7a>
 8003fea:	898a      	ldrh	r2, [r1, #12]
 8003fec:	2190      	movs	r1, #144	; 0x90
 8003fee:	00c9      	lsls	r1, r1, #3
 8003ff0:	420a      	tst	r2, r1
 8003ff2:	d029      	beq.n	8004048 <__ssputs_r+0x74>
 8003ff4:	2003      	movs	r0, #3
 8003ff6:	6921      	ldr	r1, [r4, #16]
 8003ff8:	1a5b      	subs	r3, r3, r1
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	6963      	ldr	r3, [r4, #20]
 8003ffe:	4343      	muls	r3, r0
 8004000:	0fdd      	lsrs	r5, r3, #31
 8004002:	18ed      	adds	r5, r5, r3
 8004004:	9b01      	ldr	r3, [sp, #4]
 8004006:	9802      	ldr	r0, [sp, #8]
 8004008:	3301      	adds	r3, #1
 800400a:	181b      	adds	r3, r3, r0
 800400c:	106d      	asrs	r5, r5, #1
 800400e:	42ab      	cmp	r3, r5
 8004010:	d900      	bls.n	8004014 <__ssputs_r+0x40>
 8004012:	001d      	movs	r5, r3
 8004014:	0552      	lsls	r2, r2, #21
 8004016:	d529      	bpl.n	800406c <__ssputs_r+0x98>
 8004018:	0029      	movs	r1, r5
 800401a:	0038      	movs	r0, r7
 800401c:	f7ff ff48 	bl	8003eb0 <_malloc_r>
 8004020:	1e06      	subs	r6, r0, #0
 8004022:	d02d      	beq.n	8004080 <__ssputs_r+0xac>
 8004024:	9a02      	ldr	r2, [sp, #8]
 8004026:	6921      	ldr	r1, [r4, #16]
 8004028:	f000 fae7 	bl	80045fa <memcpy>
 800402c:	89a2      	ldrh	r2, [r4, #12]
 800402e:	4b19      	ldr	r3, [pc, #100]	; (8004094 <__ssputs_r+0xc0>)
 8004030:	401a      	ands	r2, r3
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	4313      	orrs	r3, r2
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	9b02      	ldr	r3, [sp, #8]
 800403a:	6126      	str	r6, [r4, #16]
 800403c:	18f6      	adds	r6, r6, r3
 800403e:	6026      	str	r6, [r4, #0]
 8004040:	6165      	str	r5, [r4, #20]
 8004042:	9e01      	ldr	r6, [sp, #4]
 8004044:	1aed      	subs	r5, r5, r3
 8004046:	60a5      	str	r5, [r4, #8]
 8004048:	9b01      	ldr	r3, [sp, #4]
 800404a:	429e      	cmp	r6, r3
 800404c:	d900      	bls.n	8004050 <__ssputs_r+0x7c>
 800404e:	9e01      	ldr	r6, [sp, #4]
 8004050:	0032      	movs	r2, r6
 8004052:	9903      	ldr	r1, [sp, #12]
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	f000 fa9f 	bl	8004598 <memmove>
 800405a:	2000      	movs	r0, #0
 800405c:	68a3      	ldr	r3, [r4, #8]
 800405e:	1b9b      	subs	r3, r3, r6
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	199b      	adds	r3, r3, r6
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	b005      	add	sp, #20
 800406a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800406c:	002a      	movs	r2, r5
 800406e:	0038      	movs	r0, r7
 8004070:	f000 facc 	bl	800460c <_realloc_r>
 8004074:	1e06      	subs	r6, r0, #0
 8004076:	d1df      	bne.n	8004038 <__ssputs_r+0x64>
 8004078:	0038      	movs	r0, r7
 800407a:	6921      	ldr	r1, [r4, #16]
 800407c:	f7ff feac 	bl	8003dd8 <_free_r>
 8004080:	230c      	movs	r3, #12
 8004082:	2001      	movs	r0, #1
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	89a2      	ldrh	r2, [r4, #12]
 8004088:	3334      	adds	r3, #52	; 0x34
 800408a:	4313      	orrs	r3, r2
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	4240      	negs	r0, r0
 8004090:	e7ea      	b.n	8004068 <__ssputs_r+0x94>
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	fffffb7f 	.word	0xfffffb7f

08004098 <_svfiprintf_r>:
 8004098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409a:	b0a1      	sub	sp, #132	; 0x84
 800409c:	9003      	str	r0, [sp, #12]
 800409e:	001d      	movs	r5, r3
 80040a0:	898b      	ldrh	r3, [r1, #12]
 80040a2:	000f      	movs	r7, r1
 80040a4:	0016      	movs	r6, r2
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	d511      	bpl.n	80040ce <_svfiprintf_r+0x36>
 80040aa:	690b      	ldr	r3, [r1, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <_svfiprintf_r+0x36>
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	f7ff fefd 	bl	8003eb0 <_malloc_r>
 80040b6:	6038      	str	r0, [r7, #0]
 80040b8:	6138      	str	r0, [r7, #16]
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d105      	bne.n	80040ca <_svfiprintf_r+0x32>
 80040be:	230c      	movs	r3, #12
 80040c0:	9a03      	ldr	r2, [sp, #12]
 80040c2:	3801      	subs	r0, #1
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	b021      	add	sp, #132	; 0x84
 80040c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	2300      	movs	r3, #0
 80040d0:	ac08      	add	r4, sp, #32
 80040d2:	6163      	str	r3, [r4, #20]
 80040d4:	3320      	adds	r3, #32
 80040d6:	7663      	strb	r3, [r4, #25]
 80040d8:	3310      	adds	r3, #16
 80040da:	76a3      	strb	r3, [r4, #26]
 80040dc:	9507      	str	r5, [sp, #28]
 80040de:	0035      	movs	r5, r6
 80040e0:	782b      	ldrb	r3, [r5, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <_svfiprintf_r+0x52>
 80040e6:	2b25      	cmp	r3, #37	; 0x25
 80040e8:	d148      	bne.n	800417c <_svfiprintf_r+0xe4>
 80040ea:	1bab      	subs	r3, r5, r6
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	42b5      	cmp	r5, r6
 80040f0:	d00b      	beq.n	800410a <_svfiprintf_r+0x72>
 80040f2:	0032      	movs	r2, r6
 80040f4:	0039      	movs	r1, r7
 80040f6:	9803      	ldr	r0, [sp, #12]
 80040f8:	f7ff ff6c 	bl	8003fd4 <__ssputs_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d100      	bne.n	8004102 <_svfiprintf_r+0x6a>
 8004100:	e0af      	b.n	8004262 <_svfiprintf_r+0x1ca>
 8004102:	6963      	ldr	r3, [r4, #20]
 8004104:	9a05      	ldr	r2, [sp, #20]
 8004106:	189b      	adds	r3, r3, r2
 8004108:	6163      	str	r3, [r4, #20]
 800410a:	782b      	ldrb	r3, [r5, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d100      	bne.n	8004112 <_svfiprintf_r+0x7a>
 8004110:	e0a7      	b.n	8004262 <_svfiprintf_r+0x1ca>
 8004112:	2201      	movs	r2, #1
 8004114:	2300      	movs	r3, #0
 8004116:	4252      	negs	r2, r2
 8004118:	6062      	str	r2, [r4, #4]
 800411a:	a904      	add	r1, sp, #16
 800411c:	3254      	adds	r2, #84	; 0x54
 800411e:	1852      	adds	r2, r2, r1
 8004120:	1c6e      	adds	r6, r5, #1
 8004122:	6023      	str	r3, [r4, #0]
 8004124:	60e3      	str	r3, [r4, #12]
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	7013      	strb	r3, [r2, #0]
 800412a:	65a3      	str	r3, [r4, #88]	; 0x58
 800412c:	4b55      	ldr	r3, [pc, #340]	; (8004284 <_svfiprintf_r+0x1ec>)
 800412e:	2205      	movs	r2, #5
 8004130:	0018      	movs	r0, r3
 8004132:	7831      	ldrb	r1, [r6, #0]
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	f000 fa55 	bl	80045e4 <memchr>
 800413a:	1c75      	adds	r5, r6, #1
 800413c:	2800      	cmp	r0, #0
 800413e:	d11f      	bne.n	8004180 <_svfiprintf_r+0xe8>
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	06d3      	lsls	r3, r2, #27
 8004144:	d504      	bpl.n	8004150 <_svfiprintf_r+0xb8>
 8004146:	2353      	movs	r3, #83	; 0x53
 8004148:	a904      	add	r1, sp, #16
 800414a:	185b      	adds	r3, r3, r1
 800414c:	2120      	movs	r1, #32
 800414e:	7019      	strb	r1, [r3, #0]
 8004150:	0713      	lsls	r3, r2, #28
 8004152:	d504      	bpl.n	800415e <_svfiprintf_r+0xc6>
 8004154:	2353      	movs	r3, #83	; 0x53
 8004156:	a904      	add	r1, sp, #16
 8004158:	185b      	adds	r3, r3, r1
 800415a:	212b      	movs	r1, #43	; 0x2b
 800415c:	7019      	strb	r1, [r3, #0]
 800415e:	7833      	ldrb	r3, [r6, #0]
 8004160:	2b2a      	cmp	r3, #42	; 0x2a
 8004162:	d016      	beq.n	8004192 <_svfiprintf_r+0xfa>
 8004164:	0035      	movs	r5, r6
 8004166:	2100      	movs	r1, #0
 8004168:	200a      	movs	r0, #10
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	782a      	ldrb	r2, [r5, #0]
 800416e:	1c6e      	adds	r6, r5, #1
 8004170:	3a30      	subs	r2, #48	; 0x30
 8004172:	2a09      	cmp	r2, #9
 8004174:	d94e      	bls.n	8004214 <_svfiprintf_r+0x17c>
 8004176:	2900      	cmp	r1, #0
 8004178:	d111      	bne.n	800419e <_svfiprintf_r+0x106>
 800417a:	e017      	b.n	80041ac <_svfiprintf_r+0x114>
 800417c:	3501      	adds	r5, #1
 800417e:	e7af      	b.n	80040e0 <_svfiprintf_r+0x48>
 8004180:	9b05      	ldr	r3, [sp, #20]
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	2301      	movs	r3, #1
 8004188:	4083      	lsls	r3, r0
 800418a:	4313      	orrs	r3, r2
 800418c:	002e      	movs	r6, r5
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	e7cc      	b.n	800412c <_svfiprintf_r+0x94>
 8004192:	9b07      	ldr	r3, [sp, #28]
 8004194:	1d19      	adds	r1, r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	9107      	str	r1, [sp, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db01      	blt.n	80041a2 <_svfiprintf_r+0x10a>
 800419e:	930b      	str	r3, [sp, #44]	; 0x2c
 80041a0:	e004      	b.n	80041ac <_svfiprintf_r+0x114>
 80041a2:	425b      	negs	r3, r3
 80041a4:	60e3      	str	r3, [r4, #12]
 80041a6:	2302      	movs	r3, #2
 80041a8:	4313      	orrs	r3, r2
 80041aa:	6023      	str	r3, [r4, #0]
 80041ac:	782b      	ldrb	r3, [r5, #0]
 80041ae:	2b2e      	cmp	r3, #46	; 0x2e
 80041b0:	d10a      	bne.n	80041c8 <_svfiprintf_r+0x130>
 80041b2:	786b      	ldrb	r3, [r5, #1]
 80041b4:	2b2a      	cmp	r3, #42	; 0x2a
 80041b6:	d135      	bne.n	8004224 <_svfiprintf_r+0x18c>
 80041b8:	9b07      	ldr	r3, [sp, #28]
 80041ba:	3502      	adds	r5, #2
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	9207      	str	r2, [sp, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	db2b      	blt.n	800421e <_svfiprintf_r+0x186>
 80041c6:	9309      	str	r3, [sp, #36]	; 0x24
 80041c8:	4e2f      	ldr	r6, [pc, #188]	; (8004288 <_svfiprintf_r+0x1f0>)
 80041ca:	2203      	movs	r2, #3
 80041cc:	0030      	movs	r0, r6
 80041ce:	7829      	ldrb	r1, [r5, #0]
 80041d0:	f000 fa08 	bl	80045e4 <memchr>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d006      	beq.n	80041e6 <_svfiprintf_r+0x14e>
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	1b80      	subs	r0, r0, r6
 80041dc:	4083      	lsls	r3, r0
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	3501      	adds	r5, #1
 80041e2:	4313      	orrs	r3, r2
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	7829      	ldrb	r1, [r5, #0]
 80041e8:	2206      	movs	r2, #6
 80041ea:	4828      	ldr	r0, [pc, #160]	; (800428c <_svfiprintf_r+0x1f4>)
 80041ec:	1c6e      	adds	r6, r5, #1
 80041ee:	7621      	strb	r1, [r4, #24]
 80041f0:	f000 f9f8 	bl	80045e4 <memchr>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d03c      	beq.n	8004272 <_svfiprintf_r+0x1da>
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <_svfiprintf_r+0x1f8>)
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d125      	bne.n	800424a <_svfiprintf_r+0x1b2>
 80041fe:	2207      	movs	r2, #7
 8004200:	9b07      	ldr	r3, [sp, #28]
 8004202:	3307      	adds	r3, #7
 8004204:	4393      	bics	r3, r2
 8004206:	3308      	adds	r3, #8
 8004208:	9307      	str	r3, [sp, #28]
 800420a:	6963      	ldr	r3, [r4, #20]
 800420c:	9a04      	ldr	r2, [sp, #16]
 800420e:	189b      	adds	r3, r3, r2
 8004210:	6163      	str	r3, [r4, #20]
 8004212:	e764      	b.n	80040de <_svfiprintf_r+0x46>
 8004214:	4343      	muls	r3, r0
 8004216:	0035      	movs	r5, r6
 8004218:	2101      	movs	r1, #1
 800421a:	189b      	adds	r3, r3, r2
 800421c:	e7a6      	b.n	800416c <_svfiprintf_r+0xd4>
 800421e:	2301      	movs	r3, #1
 8004220:	425b      	negs	r3, r3
 8004222:	e7d0      	b.n	80041c6 <_svfiprintf_r+0x12e>
 8004224:	2300      	movs	r3, #0
 8004226:	200a      	movs	r0, #10
 8004228:	001a      	movs	r2, r3
 800422a:	3501      	adds	r5, #1
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	7829      	ldrb	r1, [r5, #0]
 8004230:	1c6e      	adds	r6, r5, #1
 8004232:	3930      	subs	r1, #48	; 0x30
 8004234:	2909      	cmp	r1, #9
 8004236:	d903      	bls.n	8004240 <_svfiprintf_r+0x1a8>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0c5      	beq.n	80041c8 <_svfiprintf_r+0x130>
 800423c:	9209      	str	r2, [sp, #36]	; 0x24
 800423e:	e7c3      	b.n	80041c8 <_svfiprintf_r+0x130>
 8004240:	4342      	muls	r2, r0
 8004242:	0035      	movs	r5, r6
 8004244:	2301      	movs	r3, #1
 8004246:	1852      	adds	r2, r2, r1
 8004248:	e7f1      	b.n	800422e <_svfiprintf_r+0x196>
 800424a:	aa07      	add	r2, sp, #28
 800424c:	9200      	str	r2, [sp, #0]
 800424e:	0021      	movs	r1, r4
 8004250:	003a      	movs	r2, r7
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <_svfiprintf_r+0x1fc>)
 8004254:	9803      	ldr	r0, [sp, #12]
 8004256:	e000      	b.n	800425a <_svfiprintf_r+0x1c2>
 8004258:	bf00      	nop
 800425a:	9004      	str	r0, [sp, #16]
 800425c:	9b04      	ldr	r3, [sp, #16]
 800425e:	3301      	adds	r3, #1
 8004260:	d1d3      	bne.n	800420a <_svfiprintf_r+0x172>
 8004262:	89bb      	ldrh	r3, [r7, #12]
 8004264:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004266:	065b      	lsls	r3, r3, #25
 8004268:	d400      	bmi.n	800426c <_svfiprintf_r+0x1d4>
 800426a:	e72c      	b.n	80040c6 <_svfiprintf_r+0x2e>
 800426c:	2001      	movs	r0, #1
 800426e:	4240      	negs	r0, r0
 8004270:	e729      	b.n	80040c6 <_svfiprintf_r+0x2e>
 8004272:	aa07      	add	r2, sp, #28
 8004274:	9200      	str	r2, [sp, #0]
 8004276:	0021      	movs	r1, r4
 8004278:	003a      	movs	r2, r7
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <_svfiprintf_r+0x1fc>)
 800427c:	9803      	ldr	r0, [sp, #12]
 800427e:	f000 f87b 	bl	8004378 <_printf_i>
 8004282:	e7ea      	b.n	800425a <_svfiprintf_r+0x1c2>
 8004284:	0800470c 	.word	0x0800470c
 8004288:	08004712 	.word	0x08004712
 800428c:	08004716 	.word	0x08004716
 8004290:	00000000 	.word	0x00000000
 8004294:	08003fd5 	.word	0x08003fd5

08004298 <_printf_common>:
 8004298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800429a:	0016      	movs	r6, r2
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	688a      	ldr	r2, [r1, #8]
 80042a0:	690b      	ldr	r3, [r1, #16]
 80042a2:	000c      	movs	r4, r1
 80042a4:	9000      	str	r0, [sp, #0]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	da00      	bge.n	80042ac <_printf_common+0x14>
 80042aa:	0013      	movs	r3, r2
 80042ac:	0022      	movs	r2, r4
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	3243      	adds	r2, #67	; 0x43
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d001      	beq.n	80042bc <_printf_common+0x24>
 80042b8:	3301      	adds	r3, #1
 80042ba:	6033      	str	r3, [r6, #0]
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	069b      	lsls	r3, r3, #26
 80042c0:	d502      	bpl.n	80042c8 <_printf_common+0x30>
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	3302      	adds	r3, #2
 80042c6:	6033      	str	r3, [r6, #0]
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	2306      	movs	r3, #6
 80042cc:	0015      	movs	r5, r2
 80042ce:	401d      	ands	r5, r3
 80042d0:	421a      	tst	r2, r3
 80042d2:	d027      	beq.n	8004324 <_printf_common+0x8c>
 80042d4:	0023      	movs	r3, r4
 80042d6:	3343      	adds	r3, #67	; 0x43
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	1e5a      	subs	r2, r3, #1
 80042dc:	4193      	sbcs	r3, r2
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	0692      	lsls	r2, r2, #26
 80042e2:	d430      	bmi.n	8004346 <_printf_common+0xae>
 80042e4:	0022      	movs	r2, r4
 80042e6:	9901      	ldr	r1, [sp, #4]
 80042e8:	9800      	ldr	r0, [sp, #0]
 80042ea:	9d08      	ldr	r5, [sp, #32]
 80042ec:	3243      	adds	r2, #67	; 0x43
 80042ee:	47a8      	blx	r5
 80042f0:	3001      	adds	r0, #1
 80042f2:	d025      	beq.n	8004340 <_printf_common+0xa8>
 80042f4:	2206      	movs	r2, #6
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	2500      	movs	r5, #0
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d105      	bne.n	800430c <_printf_common+0x74>
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	68e5      	ldr	r5, [r4, #12]
 8004304:	1aed      	subs	r5, r5, r3
 8004306:	43eb      	mvns	r3, r5
 8004308:	17db      	asrs	r3, r3, #31
 800430a:	401d      	ands	r5, r3
 800430c:	68a3      	ldr	r3, [r4, #8]
 800430e:	6922      	ldr	r2, [r4, #16]
 8004310:	4293      	cmp	r3, r2
 8004312:	dd01      	ble.n	8004318 <_printf_common+0x80>
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	18ed      	adds	r5, r5, r3
 8004318:	2600      	movs	r6, #0
 800431a:	42b5      	cmp	r5, r6
 800431c:	d120      	bne.n	8004360 <_printf_common+0xc8>
 800431e:	2000      	movs	r0, #0
 8004320:	e010      	b.n	8004344 <_printf_common+0xac>
 8004322:	3501      	adds	r5, #1
 8004324:	68e3      	ldr	r3, [r4, #12]
 8004326:	6832      	ldr	r2, [r6, #0]
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	42ab      	cmp	r3, r5
 800432c:	ddd2      	ble.n	80042d4 <_printf_common+0x3c>
 800432e:	0022      	movs	r2, r4
 8004330:	2301      	movs	r3, #1
 8004332:	9901      	ldr	r1, [sp, #4]
 8004334:	9800      	ldr	r0, [sp, #0]
 8004336:	9f08      	ldr	r7, [sp, #32]
 8004338:	3219      	adds	r2, #25
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	d1f0      	bne.n	8004322 <_printf_common+0x8a>
 8004340:	2001      	movs	r0, #1
 8004342:	4240      	negs	r0, r0
 8004344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004346:	2030      	movs	r0, #48	; 0x30
 8004348:	18e1      	adds	r1, r4, r3
 800434a:	3143      	adds	r1, #67	; 0x43
 800434c:	7008      	strb	r0, [r1, #0]
 800434e:	0021      	movs	r1, r4
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	3145      	adds	r1, #69	; 0x45
 8004354:	7809      	ldrb	r1, [r1, #0]
 8004356:	18a2      	adds	r2, r4, r2
 8004358:	3243      	adds	r2, #67	; 0x43
 800435a:	3302      	adds	r3, #2
 800435c:	7011      	strb	r1, [r2, #0]
 800435e:	e7c1      	b.n	80042e4 <_printf_common+0x4c>
 8004360:	0022      	movs	r2, r4
 8004362:	2301      	movs	r3, #1
 8004364:	9901      	ldr	r1, [sp, #4]
 8004366:	9800      	ldr	r0, [sp, #0]
 8004368:	9f08      	ldr	r7, [sp, #32]
 800436a:	321a      	adds	r2, #26
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	d0e6      	beq.n	8004340 <_printf_common+0xa8>
 8004372:	3601      	adds	r6, #1
 8004374:	e7d1      	b.n	800431a <_printf_common+0x82>
	...

08004378 <_printf_i>:
 8004378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437a:	b08b      	sub	sp, #44	; 0x2c
 800437c:	9206      	str	r2, [sp, #24]
 800437e:	000a      	movs	r2, r1
 8004380:	3243      	adds	r2, #67	; 0x43
 8004382:	9307      	str	r3, [sp, #28]
 8004384:	9005      	str	r0, [sp, #20]
 8004386:	9204      	str	r2, [sp, #16]
 8004388:	7e0a      	ldrb	r2, [r1, #24]
 800438a:	000c      	movs	r4, r1
 800438c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800438e:	2a78      	cmp	r2, #120	; 0x78
 8004390:	d809      	bhi.n	80043a6 <_printf_i+0x2e>
 8004392:	2a62      	cmp	r2, #98	; 0x62
 8004394:	d80b      	bhi.n	80043ae <_printf_i+0x36>
 8004396:	2a00      	cmp	r2, #0
 8004398:	d100      	bne.n	800439c <_printf_i+0x24>
 800439a:	e0be      	b.n	800451a <_printf_i+0x1a2>
 800439c:	497c      	ldr	r1, [pc, #496]	; (8004590 <_printf_i+0x218>)
 800439e:	9103      	str	r1, [sp, #12]
 80043a0:	2a58      	cmp	r2, #88	; 0x58
 80043a2:	d100      	bne.n	80043a6 <_printf_i+0x2e>
 80043a4:	e093      	b.n	80044ce <_printf_i+0x156>
 80043a6:	0026      	movs	r6, r4
 80043a8:	3642      	adds	r6, #66	; 0x42
 80043aa:	7032      	strb	r2, [r6, #0]
 80043ac:	e022      	b.n	80043f4 <_printf_i+0x7c>
 80043ae:	0010      	movs	r0, r2
 80043b0:	3863      	subs	r0, #99	; 0x63
 80043b2:	2815      	cmp	r0, #21
 80043b4:	d8f7      	bhi.n	80043a6 <_printf_i+0x2e>
 80043b6:	f7fb feaf 	bl	8000118 <__gnu_thumb1_case_shi>
 80043ba:	0016      	.short	0x0016
 80043bc:	fff6001f 	.word	0xfff6001f
 80043c0:	fff6fff6 	.word	0xfff6fff6
 80043c4:	001ffff6 	.word	0x001ffff6
 80043c8:	fff6fff6 	.word	0xfff6fff6
 80043cc:	fff6fff6 	.word	0xfff6fff6
 80043d0:	003600a3 	.word	0x003600a3
 80043d4:	fff60083 	.word	0xfff60083
 80043d8:	00b4fff6 	.word	0x00b4fff6
 80043dc:	0036fff6 	.word	0x0036fff6
 80043e0:	fff6fff6 	.word	0xfff6fff6
 80043e4:	0087      	.short	0x0087
 80043e6:	0026      	movs	r6, r4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	3642      	adds	r6, #66	; 0x42
 80043ec:	1d11      	adds	r1, r2, #4
 80043ee:	6019      	str	r1, [r3, #0]
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	7033      	strb	r3, [r6, #0]
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0a2      	b.n	800453e <_printf_i+0x1c6>
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	6809      	ldr	r1, [r1, #0]
 80043fc:	1d02      	adds	r2, r0, #4
 80043fe:	060d      	lsls	r5, r1, #24
 8004400:	d50b      	bpl.n	800441a <_printf_i+0xa2>
 8004402:	6805      	ldr	r5, [r0, #0]
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	2d00      	cmp	r5, #0
 8004408:	da03      	bge.n	8004412 <_printf_i+0x9a>
 800440a:	232d      	movs	r3, #45	; 0x2d
 800440c:	9a04      	ldr	r2, [sp, #16]
 800440e:	426d      	negs	r5, r5
 8004410:	7013      	strb	r3, [r2, #0]
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <_printf_i+0x218>)
 8004414:	270a      	movs	r7, #10
 8004416:	9303      	str	r3, [sp, #12]
 8004418:	e01b      	b.n	8004452 <_printf_i+0xda>
 800441a:	6805      	ldr	r5, [r0, #0]
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	0649      	lsls	r1, r1, #25
 8004420:	d5f1      	bpl.n	8004406 <_printf_i+0x8e>
 8004422:	b22d      	sxth	r5, r5
 8004424:	e7ef      	b.n	8004406 <_printf_i+0x8e>
 8004426:	680d      	ldr	r5, [r1, #0]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	1d08      	adds	r0, r1, #4
 800442c:	6018      	str	r0, [r3, #0]
 800442e:	062e      	lsls	r6, r5, #24
 8004430:	d501      	bpl.n	8004436 <_printf_i+0xbe>
 8004432:	680d      	ldr	r5, [r1, #0]
 8004434:	e003      	b.n	800443e <_printf_i+0xc6>
 8004436:	066d      	lsls	r5, r5, #25
 8004438:	d5fb      	bpl.n	8004432 <_printf_i+0xba>
 800443a:	680d      	ldr	r5, [r1, #0]
 800443c:	b2ad      	uxth	r5, r5
 800443e:	4b54      	ldr	r3, [pc, #336]	; (8004590 <_printf_i+0x218>)
 8004440:	2708      	movs	r7, #8
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	2a6f      	cmp	r2, #111	; 0x6f
 8004446:	d000      	beq.n	800444a <_printf_i+0xd2>
 8004448:	3702      	adds	r7, #2
 800444a:	0023      	movs	r3, r4
 800444c:	2200      	movs	r2, #0
 800444e:	3343      	adds	r3, #67	; 0x43
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	6863      	ldr	r3, [r4, #4]
 8004454:	60a3      	str	r3, [r4, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	db03      	blt.n	8004462 <_printf_i+0xea>
 800445a:	2104      	movs	r1, #4
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	438a      	bics	r2, r1
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	2d00      	cmp	r5, #0
 8004464:	d102      	bne.n	800446c <_printf_i+0xf4>
 8004466:	9e04      	ldr	r6, [sp, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <_printf_i+0x10e>
 800446c:	9e04      	ldr	r6, [sp, #16]
 800446e:	0028      	movs	r0, r5
 8004470:	0039      	movs	r1, r7
 8004472:	f7fb fee1 	bl	8000238 <__aeabi_uidivmod>
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	3e01      	subs	r6, #1
 800447a:	5c5b      	ldrb	r3, [r3, r1]
 800447c:	7033      	strb	r3, [r6, #0]
 800447e:	002b      	movs	r3, r5
 8004480:	0005      	movs	r5, r0
 8004482:	429f      	cmp	r7, r3
 8004484:	d9f3      	bls.n	800446e <_printf_i+0xf6>
 8004486:	2f08      	cmp	r7, #8
 8004488:	d109      	bne.n	800449e <_printf_i+0x126>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	07db      	lsls	r3, r3, #31
 800448e:	d506      	bpl.n	800449e <_printf_i+0x126>
 8004490:	6862      	ldr	r2, [r4, #4]
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	429a      	cmp	r2, r3
 8004496:	dc02      	bgt.n	800449e <_printf_i+0x126>
 8004498:	2330      	movs	r3, #48	; 0x30
 800449a:	3e01      	subs	r6, #1
 800449c:	7033      	strb	r3, [r6, #0]
 800449e:	9b04      	ldr	r3, [sp, #16]
 80044a0:	1b9b      	subs	r3, r3, r6
 80044a2:	6123      	str	r3, [r4, #16]
 80044a4:	9b07      	ldr	r3, [sp, #28]
 80044a6:	0021      	movs	r1, r4
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	9805      	ldr	r0, [sp, #20]
 80044ac:	9b06      	ldr	r3, [sp, #24]
 80044ae:	aa09      	add	r2, sp, #36	; 0x24
 80044b0:	f7ff fef2 	bl	8004298 <_printf_common>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d147      	bne.n	8004548 <_printf_i+0x1d0>
 80044b8:	2001      	movs	r0, #1
 80044ba:	4240      	negs	r0, r0
 80044bc:	b00b      	add	sp, #44	; 0x2c
 80044be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c0:	2220      	movs	r2, #32
 80044c2:	6809      	ldr	r1, [r1, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	6022      	str	r2, [r4, #0]
 80044c8:	2278      	movs	r2, #120	; 0x78
 80044ca:	4932      	ldr	r1, [pc, #200]	; (8004594 <_printf_i+0x21c>)
 80044cc:	9103      	str	r1, [sp, #12]
 80044ce:	0021      	movs	r1, r4
 80044d0:	3145      	adds	r1, #69	; 0x45
 80044d2:	700a      	strb	r2, [r1, #0]
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	c920      	ldmia	r1!, {r5}
 80044da:	0610      	lsls	r0, r2, #24
 80044dc:	d402      	bmi.n	80044e4 <_printf_i+0x16c>
 80044de:	0650      	lsls	r0, r2, #25
 80044e0:	d500      	bpl.n	80044e4 <_printf_i+0x16c>
 80044e2:	b2ad      	uxth	r5, r5
 80044e4:	6019      	str	r1, [r3, #0]
 80044e6:	07d3      	lsls	r3, r2, #31
 80044e8:	d502      	bpl.n	80044f0 <_printf_i+0x178>
 80044ea:	2320      	movs	r3, #32
 80044ec:	4313      	orrs	r3, r2
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	2710      	movs	r7, #16
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	d1a9      	bne.n	800444a <_printf_i+0xd2>
 80044f6:	2220      	movs	r2, #32
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	4393      	bics	r3, r2
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	e7a4      	b.n	800444a <_printf_i+0xd2>
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	680d      	ldr	r5, [r1, #0]
 8004504:	1d10      	adds	r0, r2, #4
 8004506:	6949      	ldr	r1, [r1, #20]
 8004508:	6018      	str	r0, [r3, #0]
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	062e      	lsls	r6, r5, #24
 800450e:	d501      	bpl.n	8004514 <_printf_i+0x19c>
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0x1a2>
 8004514:	066d      	lsls	r5, r5, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0x198>
 8004518:	8019      	strh	r1, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	9e04      	ldr	r6, [sp, #16]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	e7c0      	b.n	80044a4 <_printf_i+0x12c>
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	1d11      	adds	r1, r2, #4
 8004526:	6019      	str	r1, [r3, #0]
 8004528:	6816      	ldr	r6, [r2, #0]
 800452a:	2100      	movs	r1, #0
 800452c:	0030      	movs	r0, r6
 800452e:	6862      	ldr	r2, [r4, #4]
 8004530:	f000 f858 	bl	80045e4 <memchr>
 8004534:	2800      	cmp	r0, #0
 8004536:	d001      	beq.n	800453c <_printf_i+0x1c4>
 8004538:	1b80      	subs	r0, r0, r6
 800453a:	6060      	str	r0, [r4, #4]
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	2300      	movs	r3, #0
 8004542:	9a04      	ldr	r2, [sp, #16]
 8004544:	7013      	strb	r3, [r2, #0]
 8004546:	e7ad      	b.n	80044a4 <_printf_i+0x12c>
 8004548:	0032      	movs	r2, r6
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	9906      	ldr	r1, [sp, #24]
 800454e:	9805      	ldr	r0, [sp, #20]
 8004550:	9d07      	ldr	r5, [sp, #28]
 8004552:	47a8      	blx	r5
 8004554:	3001      	adds	r0, #1
 8004556:	d0af      	beq.n	80044b8 <_printf_i+0x140>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	079b      	lsls	r3, r3, #30
 800455c:	d415      	bmi.n	800458a <_printf_i+0x212>
 800455e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004560:	68e0      	ldr	r0, [r4, #12]
 8004562:	4298      	cmp	r0, r3
 8004564:	daaa      	bge.n	80044bc <_printf_i+0x144>
 8004566:	0018      	movs	r0, r3
 8004568:	e7a8      	b.n	80044bc <_printf_i+0x144>
 800456a:	0022      	movs	r2, r4
 800456c:	2301      	movs	r3, #1
 800456e:	9906      	ldr	r1, [sp, #24]
 8004570:	9805      	ldr	r0, [sp, #20]
 8004572:	9e07      	ldr	r6, [sp, #28]
 8004574:	3219      	adds	r2, #25
 8004576:	47b0      	blx	r6
 8004578:	3001      	adds	r0, #1
 800457a:	d09d      	beq.n	80044b8 <_printf_i+0x140>
 800457c:	3501      	adds	r5, #1
 800457e:	68e3      	ldr	r3, [r4, #12]
 8004580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	42ab      	cmp	r3, r5
 8004586:	dcf0      	bgt.n	800456a <_printf_i+0x1f2>
 8004588:	e7e9      	b.n	800455e <_printf_i+0x1e6>
 800458a:	2500      	movs	r5, #0
 800458c:	e7f7      	b.n	800457e <_printf_i+0x206>
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	0800471d 	.word	0x0800471d
 8004594:	0800472e 	.word	0x0800472e

08004598 <memmove>:
 8004598:	b510      	push	{r4, lr}
 800459a:	4288      	cmp	r0, r1
 800459c:	d902      	bls.n	80045a4 <memmove+0xc>
 800459e:	188b      	adds	r3, r1, r2
 80045a0:	4298      	cmp	r0, r3
 80045a2:	d303      	bcc.n	80045ac <memmove+0x14>
 80045a4:	2300      	movs	r3, #0
 80045a6:	e007      	b.n	80045b8 <memmove+0x20>
 80045a8:	5c8b      	ldrb	r3, [r1, r2]
 80045aa:	5483      	strb	r3, [r0, r2]
 80045ac:	3a01      	subs	r2, #1
 80045ae:	d2fb      	bcs.n	80045a8 <memmove+0x10>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	5ccc      	ldrb	r4, [r1, r3]
 80045b4:	54c4      	strb	r4, [r0, r3]
 80045b6:	3301      	adds	r3, #1
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1fa      	bne.n	80045b2 <memmove+0x1a>
 80045bc:	e7f8      	b.n	80045b0 <memmove+0x18>
	...

080045c0 <_sbrk_r>:
 80045c0:	2300      	movs	r3, #0
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	4d06      	ldr	r5, [pc, #24]	; (80045e0 <_sbrk_r+0x20>)
 80045c6:	0004      	movs	r4, r0
 80045c8:	0008      	movs	r0, r1
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	f7fd f8ea 	bl	80017a4 <_sbrk>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d103      	bne.n	80045dc <_sbrk_r+0x1c>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d000      	beq.n	80045dc <_sbrk_r+0x1c>
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20000294 	.word	0x20000294

080045e4 <memchr>:
 80045e4:	b2c9      	uxtb	r1, r1
 80045e6:	1882      	adds	r2, r0, r2
 80045e8:	4290      	cmp	r0, r2
 80045ea:	d101      	bne.n	80045f0 <memchr+0xc>
 80045ec:	2000      	movs	r0, #0
 80045ee:	4770      	bx	lr
 80045f0:	7803      	ldrb	r3, [r0, #0]
 80045f2:	428b      	cmp	r3, r1
 80045f4:	d0fb      	beq.n	80045ee <memchr+0xa>
 80045f6:	3001      	adds	r0, #1
 80045f8:	e7f6      	b.n	80045e8 <memchr+0x4>

080045fa <memcpy>:
 80045fa:	2300      	movs	r3, #0
 80045fc:	b510      	push	{r4, lr}
 80045fe:	429a      	cmp	r2, r3
 8004600:	d100      	bne.n	8004604 <memcpy+0xa>
 8004602:	bd10      	pop	{r4, pc}
 8004604:	5ccc      	ldrb	r4, [r1, r3]
 8004606:	54c4      	strb	r4, [r0, r3]
 8004608:	3301      	adds	r3, #1
 800460a:	e7f8      	b.n	80045fe <memcpy+0x4>

0800460c <_realloc_r>:
 800460c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800460e:	0007      	movs	r7, r0
 8004610:	000e      	movs	r6, r1
 8004612:	0014      	movs	r4, r2
 8004614:	2900      	cmp	r1, #0
 8004616:	d105      	bne.n	8004624 <_realloc_r+0x18>
 8004618:	0011      	movs	r1, r2
 800461a:	f7ff fc49 	bl	8003eb0 <_malloc_r>
 800461e:	0005      	movs	r5, r0
 8004620:	0028      	movs	r0, r5
 8004622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004624:	2a00      	cmp	r2, #0
 8004626:	d103      	bne.n	8004630 <_realloc_r+0x24>
 8004628:	f7ff fbd6 	bl	8003dd8 <_free_r>
 800462c:	0025      	movs	r5, r4
 800462e:	e7f7      	b.n	8004620 <_realloc_r+0x14>
 8004630:	f000 f81b 	bl	800466a <_malloc_usable_size_r>
 8004634:	9001      	str	r0, [sp, #4]
 8004636:	4284      	cmp	r4, r0
 8004638:	d803      	bhi.n	8004642 <_realloc_r+0x36>
 800463a:	0035      	movs	r5, r6
 800463c:	0843      	lsrs	r3, r0, #1
 800463e:	42a3      	cmp	r3, r4
 8004640:	d3ee      	bcc.n	8004620 <_realloc_r+0x14>
 8004642:	0021      	movs	r1, r4
 8004644:	0038      	movs	r0, r7
 8004646:	f7ff fc33 	bl	8003eb0 <_malloc_r>
 800464a:	1e05      	subs	r5, r0, #0
 800464c:	d0e8      	beq.n	8004620 <_realloc_r+0x14>
 800464e:	9b01      	ldr	r3, [sp, #4]
 8004650:	0022      	movs	r2, r4
 8004652:	429c      	cmp	r4, r3
 8004654:	d900      	bls.n	8004658 <_realloc_r+0x4c>
 8004656:	001a      	movs	r2, r3
 8004658:	0031      	movs	r1, r6
 800465a:	0028      	movs	r0, r5
 800465c:	f7ff ffcd 	bl	80045fa <memcpy>
 8004660:	0031      	movs	r1, r6
 8004662:	0038      	movs	r0, r7
 8004664:	f7ff fbb8 	bl	8003dd8 <_free_r>
 8004668:	e7da      	b.n	8004620 <_realloc_r+0x14>

0800466a <_malloc_usable_size_r>:
 800466a:	1f0b      	subs	r3, r1, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1f18      	subs	r0, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	da01      	bge.n	8004678 <_malloc_usable_size_r+0xe>
 8004674:	580b      	ldr	r3, [r1, r0]
 8004676:	18c0      	adds	r0, r0, r3
 8004678:	4770      	bx	lr
	...

0800467c <_init>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr

08004688 <_fini>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr
