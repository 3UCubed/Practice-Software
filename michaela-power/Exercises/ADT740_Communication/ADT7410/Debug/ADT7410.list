
ADT7410.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b04  08003b04  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b04  08003b04  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b04  08003b04  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08003b68  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003b68  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a39d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001860  00000000  00000000  0002a464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ef  00000000  00000000  0002c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c82  00000000  00000000  0002cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca8a  00000000  00000000  0003e919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069b90  00000000  00000000  0004b3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024f8  00000000  00000000  000b4f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b742c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a68 	.word	0x08003a68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003a68 	.word	0x08003a68

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2uiz>:
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	b510      	push	{r4, lr}
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	1c04      	adds	r4, r0, #0
 800024c:	f000 fa54 	bl	80006f8 <__aeabi_fcmpge>
 8000250:	2800      	cmp	r0, #0
 8000252:	d103      	bne.n	800025c <__aeabi_f2uiz+0x18>
 8000254:	1c20      	adds	r0, r4, #0
 8000256:	f000 f9ad 	bl	80005b4 <__aeabi_f2iz>
 800025a:	bd10      	pop	{r4, pc}
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	1c20      	adds	r0, r4, #0
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	f000 f807 	bl	8000274 <__aeabi_fsub>
 8000266:	f000 f9a5 	bl	80005b4 <__aeabi_f2iz>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	469c      	mov	ip, r3
 8000270:	4460      	add	r0, ip
 8000272:	e7f2      	b.n	800025a <__aeabi_f2uiz+0x16>

08000274 <__aeabi_fsub>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46c6      	mov	lr, r8
 8000278:	0243      	lsls	r3, r0, #9
 800027a:	0a5b      	lsrs	r3, r3, #9
 800027c:	0045      	lsls	r5, r0, #1
 800027e:	00da      	lsls	r2, r3, #3
 8000280:	0fc4      	lsrs	r4, r0, #31
 8000282:	0248      	lsls	r0, r1, #9
 8000284:	004f      	lsls	r7, r1, #1
 8000286:	4694      	mov	ip, r2
 8000288:	0a42      	lsrs	r2, r0, #9
 800028a:	001e      	movs	r6, r3
 800028c:	4690      	mov	r8, r2
 800028e:	b500      	push	{lr}
 8000290:	0e2d      	lsrs	r5, r5, #24
 8000292:	0e3f      	lsrs	r7, r7, #24
 8000294:	0fc9      	lsrs	r1, r1, #31
 8000296:	0980      	lsrs	r0, r0, #6
 8000298:	2fff      	cmp	r7, #255	; 0xff
 800029a:	d059      	beq.n	8000350 <__aeabi_fsub+0xdc>
 800029c:	2201      	movs	r2, #1
 800029e:	4051      	eors	r1, r2
 80002a0:	428c      	cmp	r4, r1
 80002a2:	d039      	beq.n	8000318 <__aeabi_fsub+0xa4>
 80002a4:	1bea      	subs	r2, r5, r7
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	dd58      	ble.n	800035c <__aeabi_fsub+0xe8>
 80002aa:	2f00      	cmp	r7, #0
 80002ac:	d068      	beq.n	8000380 <__aeabi_fsub+0x10c>
 80002ae:	2dff      	cmp	r5, #255	; 0xff
 80002b0:	d100      	bne.n	80002b4 <__aeabi_fsub+0x40>
 80002b2:	e0d1      	b.n	8000458 <__aeabi_fsub+0x1e4>
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	04db      	lsls	r3, r3, #19
 80002b8:	4318      	orrs	r0, r3
 80002ba:	2a1b      	cmp	r2, #27
 80002bc:	dc00      	bgt.n	80002c0 <__aeabi_fsub+0x4c>
 80002be:	e0e3      	b.n	8000488 <__aeabi_fsub+0x214>
 80002c0:	2301      	movs	r3, #1
 80002c2:	4662      	mov	r2, ip
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	015a      	lsls	r2, r3, #5
 80002c8:	d400      	bmi.n	80002cc <__aeabi_fsub+0x58>
 80002ca:	e0ac      	b.n	8000426 <__aeabi_fsub+0x1b2>
 80002cc:	019b      	lsls	r3, r3, #6
 80002ce:	099e      	lsrs	r6, r3, #6
 80002d0:	0030      	movs	r0, r6
 80002d2:	f000 fa1b 	bl	800070c <__clzsi2>
 80002d6:	0033      	movs	r3, r6
 80002d8:	3805      	subs	r0, #5
 80002da:	4083      	lsls	r3, r0
 80002dc:	4285      	cmp	r5, r0
 80002de:	dc00      	bgt.n	80002e2 <__aeabi_fsub+0x6e>
 80002e0:	e0c6      	b.n	8000470 <__aeabi_fsub+0x1fc>
 80002e2:	4ab2      	ldr	r2, [pc, #712]	; (80005ac <__aeabi_fsub+0x338>)
 80002e4:	1a2d      	subs	r5, r5, r0
 80002e6:	4013      	ands	r3, r2
 80002e8:	075a      	lsls	r2, r3, #29
 80002ea:	d004      	beq.n	80002f6 <__aeabi_fsub+0x82>
 80002ec:	220f      	movs	r2, #15
 80002ee:	401a      	ands	r2, r3
 80002f0:	2a04      	cmp	r2, #4
 80002f2:	d000      	beq.n	80002f6 <__aeabi_fsub+0x82>
 80002f4:	3304      	adds	r3, #4
 80002f6:	015a      	lsls	r2, r3, #5
 80002f8:	d400      	bmi.n	80002fc <__aeabi_fsub+0x88>
 80002fa:	e097      	b.n	800042c <__aeabi_fsub+0x1b8>
 80002fc:	1c6a      	adds	r2, r5, #1
 80002fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000300:	d100      	bne.n	8000304 <__aeabi_fsub+0x90>
 8000302:	e084      	b.n	800040e <__aeabi_fsub+0x19a>
 8000304:	019b      	lsls	r3, r3, #6
 8000306:	0a5e      	lsrs	r6, r3, #9
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	05d0      	lsls	r0, r2, #23
 800030c:	4330      	orrs	r0, r6
 800030e:	07e4      	lsls	r4, r4, #31
 8000310:	4320      	orrs	r0, r4
 8000312:	bc80      	pop	{r7}
 8000314:	46b8      	mov	r8, r7
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	1bea      	subs	r2, r5, r7
 800031a:	2a00      	cmp	r2, #0
 800031c:	dd41      	ble.n	80003a2 <__aeabi_fsub+0x12e>
 800031e:	2f00      	cmp	r7, #0
 8000320:	d06b      	beq.n	80003fa <__aeabi_fsub+0x186>
 8000322:	2dff      	cmp	r5, #255	; 0xff
 8000324:	d100      	bne.n	8000328 <__aeabi_fsub+0xb4>
 8000326:	e097      	b.n	8000458 <__aeabi_fsub+0x1e4>
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	04db      	lsls	r3, r3, #19
 800032c:	4318      	orrs	r0, r3
 800032e:	2a1b      	cmp	r2, #27
 8000330:	dc00      	bgt.n	8000334 <__aeabi_fsub+0xc0>
 8000332:	e0cc      	b.n	80004ce <__aeabi_fsub+0x25a>
 8000334:	2301      	movs	r3, #1
 8000336:	4463      	add	r3, ip
 8000338:	015a      	lsls	r2, r3, #5
 800033a:	d574      	bpl.n	8000426 <__aeabi_fsub+0x1b2>
 800033c:	3501      	adds	r5, #1
 800033e:	2dff      	cmp	r5, #255	; 0xff
 8000340:	d065      	beq.n	800040e <__aeabi_fsub+0x19a>
 8000342:	2201      	movs	r2, #1
 8000344:	499a      	ldr	r1, [pc, #616]	; (80005b0 <__aeabi_fsub+0x33c>)
 8000346:	401a      	ands	r2, r3
 8000348:	085b      	lsrs	r3, r3, #1
 800034a:	400b      	ands	r3, r1
 800034c:	4313      	orrs	r3, r2
 800034e:	e7cb      	b.n	80002e8 <__aeabi_fsub+0x74>
 8000350:	2800      	cmp	r0, #0
 8000352:	d01f      	beq.n	8000394 <__aeabi_fsub+0x120>
 8000354:	428c      	cmp	r4, r1
 8000356:	d022      	beq.n	800039e <__aeabi_fsub+0x12a>
 8000358:	002a      	movs	r2, r5
 800035a:	3aff      	subs	r2, #255	; 0xff
 800035c:	2a00      	cmp	r2, #0
 800035e:	d035      	beq.n	80003cc <__aeabi_fsub+0x158>
 8000360:	1b7a      	subs	r2, r7, r5
 8000362:	2d00      	cmp	r5, #0
 8000364:	d000      	beq.n	8000368 <__aeabi_fsub+0xf4>
 8000366:	e099      	b.n	800049c <__aeabi_fsub+0x228>
 8000368:	4663      	mov	r3, ip
 800036a:	2b00      	cmp	r3, #0
 800036c:	d100      	bne.n	8000370 <__aeabi_fsub+0xfc>
 800036e:	e0dd      	b.n	800052c <__aeabi_fsub+0x2b8>
 8000370:	1e53      	subs	r3, r2, #1
 8000372:	2a01      	cmp	r2, #1
 8000374:	d100      	bne.n	8000378 <__aeabi_fsub+0x104>
 8000376:	e105      	b.n	8000584 <__aeabi_fsub+0x310>
 8000378:	2aff      	cmp	r2, #255	; 0xff
 800037a:	d06b      	beq.n	8000454 <__aeabi_fsub+0x1e0>
 800037c:	001a      	movs	r2, r3
 800037e:	e094      	b.n	80004aa <__aeabi_fsub+0x236>
 8000380:	2800      	cmp	r0, #0
 8000382:	d073      	beq.n	800046c <__aeabi_fsub+0x1f8>
 8000384:	1e51      	subs	r1, r2, #1
 8000386:	2a01      	cmp	r2, #1
 8000388:	d100      	bne.n	800038c <__aeabi_fsub+0x118>
 800038a:	e0df      	b.n	800054c <__aeabi_fsub+0x2d8>
 800038c:	2aff      	cmp	r2, #255	; 0xff
 800038e:	d063      	beq.n	8000458 <__aeabi_fsub+0x1e4>
 8000390:	000a      	movs	r2, r1
 8000392:	e792      	b.n	80002ba <__aeabi_fsub+0x46>
 8000394:	2201      	movs	r2, #1
 8000396:	4051      	eors	r1, r2
 8000398:	42a1      	cmp	r1, r4
 800039a:	d000      	beq.n	800039e <__aeabi_fsub+0x12a>
 800039c:	e782      	b.n	80002a4 <__aeabi_fsub+0x30>
 800039e:	002a      	movs	r2, r5
 80003a0:	3aff      	subs	r2, #255	; 0xff
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d036      	beq.n	8000414 <__aeabi_fsub+0x1a0>
 80003a6:	1b7a      	subs	r2, r7, r5
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d100      	bne.n	80003ae <__aeabi_fsub+0x13a>
 80003ac:	e0aa      	b.n	8000504 <__aeabi_fsub+0x290>
 80003ae:	2fff      	cmp	r7, #255	; 0xff
 80003b0:	d100      	bne.n	80003b4 <__aeabi_fsub+0x140>
 80003b2:	e0da      	b.n	800056a <__aeabi_fsub+0x2f6>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	4661      	mov	r1, ip
 80003b8:	04db      	lsls	r3, r3, #19
 80003ba:	4319      	orrs	r1, r3
 80003bc:	468c      	mov	ip, r1
 80003be:	2a1b      	cmp	r2, #27
 80003c0:	dc00      	bgt.n	80003c4 <__aeabi_fsub+0x150>
 80003c2:	e0d4      	b.n	800056e <__aeabi_fsub+0x2fa>
 80003c4:	2301      	movs	r3, #1
 80003c6:	003d      	movs	r5, r7
 80003c8:	181b      	adds	r3, r3, r0
 80003ca:	e7b5      	b.n	8000338 <__aeabi_fsub+0xc4>
 80003cc:	27fe      	movs	r7, #254	; 0xfe
 80003ce:	1c6a      	adds	r2, r5, #1
 80003d0:	4217      	tst	r7, r2
 80003d2:	d171      	bne.n	80004b8 <__aeabi_fsub+0x244>
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d000      	beq.n	80003da <__aeabi_fsub+0x166>
 80003d8:	e09e      	b.n	8000518 <__aeabi_fsub+0x2a4>
 80003da:	4663      	mov	r3, ip
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d100      	bne.n	80003e2 <__aeabi_fsub+0x16e>
 80003e0:	e0d5      	b.n	800058e <__aeabi_fsub+0x31a>
 80003e2:	2200      	movs	r2, #0
 80003e4:	2800      	cmp	r0, #0
 80003e6:	d100      	bne.n	80003ea <__aeabi_fsub+0x176>
 80003e8:	e78f      	b.n	800030a <__aeabi_fsub+0x96>
 80003ea:	1a1b      	subs	r3, r3, r0
 80003ec:	015e      	lsls	r6, r3, #5
 80003ee:	d400      	bmi.n	80003f2 <__aeabi_fsub+0x17e>
 80003f0:	e0d6      	b.n	80005a0 <__aeabi_fsub+0x32c>
 80003f2:	4663      	mov	r3, ip
 80003f4:	000c      	movs	r4, r1
 80003f6:	1ac3      	subs	r3, r0, r3
 80003f8:	e776      	b.n	80002e8 <__aeabi_fsub+0x74>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d036      	beq.n	800046c <__aeabi_fsub+0x1f8>
 80003fe:	1e51      	subs	r1, r2, #1
 8000400:	2a01      	cmp	r2, #1
 8000402:	d100      	bne.n	8000406 <__aeabi_fsub+0x192>
 8000404:	e09a      	b.n	800053c <__aeabi_fsub+0x2c8>
 8000406:	2aff      	cmp	r2, #255	; 0xff
 8000408:	d026      	beq.n	8000458 <__aeabi_fsub+0x1e4>
 800040a:	000a      	movs	r2, r1
 800040c:	e78f      	b.n	800032e <__aeabi_fsub+0xba>
 800040e:	22ff      	movs	r2, #255	; 0xff
 8000410:	2600      	movs	r6, #0
 8000412:	e77a      	b.n	800030a <__aeabi_fsub+0x96>
 8000414:	27fe      	movs	r7, #254	; 0xfe
 8000416:	1c6a      	adds	r2, r5, #1
 8000418:	4217      	tst	r7, r2
 800041a:	d062      	beq.n	80004e2 <__aeabi_fsub+0x26e>
 800041c:	2aff      	cmp	r2, #255	; 0xff
 800041e:	d0f6      	beq.n	800040e <__aeabi_fsub+0x19a>
 8000420:	0015      	movs	r5, r2
 8000422:	4460      	add	r0, ip
 8000424:	0843      	lsrs	r3, r0, #1
 8000426:	075a      	lsls	r2, r3, #29
 8000428:	d000      	beq.n	800042c <__aeabi_fsub+0x1b8>
 800042a:	e75f      	b.n	80002ec <__aeabi_fsub+0x78>
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	2dff      	cmp	r5, #255	; 0xff
 8000430:	d012      	beq.n	8000458 <__aeabi_fsub+0x1e4>
 8000432:	025b      	lsls	r3, r3, #9
 8000434:	0a5e      	lsrs	r6, r3, #9
 8000436:	b2ea      	uxtb	r2, r5
 8000438:	e767      	b.n	800030a <__aeabi_fsub+0x96>
 800043a:	4662      	mov	r2, ip
 800043c:	2a00      	cmp	r2, #0
 800043e:	d100      	bne.n	8000442 <__aeabi_fsub+0x1ce>
 8000440:	e093      	b.n	800056a <__aeabi_fsub+0x2f6>
 8000442:	2800      	cmp	r0, #0
 8000444:	d008      	beq.n	8000458 <__aeabi_fsub+0x1e4>
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	03d2      	lsls	r2, r2, #15
 800044a:	4213      	tst	r3, r2
 800044c:	d004      	beq.n	8000458 <__aeabi_fsub+0x1e4>
 800044e:	4640      	mov	r0, r8
 8000450:	4210      	tst	r0, r2
 8000452:	d101      	bne.n	8000458 <__aeabi_fsub+0x1e4>
 8000454:	000c      	movs	r4, r1
 8000456:	4643      	mov	r3, r8
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0d8      	beq.n	800040e <__aeabi_fsub+0x19a>
 800045c:	2680      	movs	r6, #128	; 0x80
 800045e:	03f6      	lsls	r6, r6, #15
 8000460:	431e      	orrs	r6, r3
 8000462:	0276      	lsls	r6, r6, #9
 8000464:	22ff      	movs	r2, #255	; 0xff
 8000466:	0a76      	lsrs	r6, r6, #9
 8000468:	e74f      	b.n	800030a <__aeabi_fsub+0x96>
 800046a:	4643      	mov	r3, r8
 800046c:	0015      	movs	r5, r2
 800046e:	e7de      	b.n	800042e <__aeabi_fsub+0x1ba>
 8000470:	2220      	movs	r2, #32
 8000472:	1b40      	subs	r0, r0, r5
 8000474:	3001      	adds	r0, #1
 8000476:	1a12      	subs	r2, r2, r0
 8000478:	0019      	movs	r1, r3
 800047a:	4093      	lsls	r3, r2
 800047c:	40c1      	lsrs	r1, r0
 800047e:	1e5a      	subs	r2, r3, #1
 8000480:	4193      	sbcs	r3, r2
 8000482:	2500      	movs	r5, #0
 8000484:	430b      	orrs	r3, r1
 8000486:	e72f      	b.n	80002e8 <__aeabi_fsub+0x74>
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	0001      	movs	r1, r0
 800048e:	4098      	lsls	r0, r3
 8000490:	0003      	movs	r3, r0
 8000492:	40d1      	lsrs	r1, r2
 8000494:	1e5a      	subs	r2, r3, #1
 8000496:	4193      	sbcs	r3, r2
 8000498:	430b      	orrs	r3, r1
 800049a:	e712      	b.n	80002c2 <__aeabi_fsub+0x4e>
 800049c:	2fff      	cmp	r7, #255	; 0xff
 800049e:	d0d9      	beq.n	8000454 <__aeabi_fsub+0x1e0>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	4664      	mov	r4, ip
 80004a4:	04db      	lsls	r3, r3, #19
 80004a6:	431c      	orrs	r4, r3
 80004a8:	46a4      	mov	ip, r4
 80004aa:	2a1b      	cmp	r2, #27
 80004ac:	dd52      	ble.n	8000554 <__aeabi_fsub+0x2e0>
 80004ae:	2301      	movs	r3, #1
 80004b0:	000c      	movs	r4, r1
 80004b2:	003d      	movs	r5, r7
 80004b4:	1ac3      	subs	r3, r0, r3
 80004b6:	e706      	b.n	80002c6 <__aeabi_fsub+0x52>
 80004b8:	4663      	mov	r3, ip
 80004ba:	1a1e      	subs	r6, r3, r0
 80004bc:	0173      	lsls	r3, r6, #5
 80004be:	d439      	bmi.n	8000534 <__aeabi_fsub+0x2c0>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d000      	beq.n	80004c6 <__aeabi_fsub+0x252>
 80004c4:	e704      	b.n	80002d0 <__aeabi_fsub+0x5c>
 80004c6:	2400      	movs	r4, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	2600      	movs	r6, #0
 80004cc:	e71d      	b.n	800030a <__aeabi_fsub+0x96>
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	0001      	movs	r1, r0
 80004d4:	4098      	lsls	r0, r3
 80004d6:	0003      	movs	r3, r0
 80004d8:	40d1      	lsrs	r1, r2
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	4193      	sbcs	r3, r2
 80004de:	430b      	orrs	r3, r1
 80004e0:	e729      	b.n	8000336 <__aeabi_fsub+0xc2>
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d1a9      	bne.n	800043a <__aeabi_fsub+0x1c6>
 80004e6:	4663      	mov	r3, ip
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d056      	beq.n	800059a <__aeabi_fsub+0x326>
 80004ec:	2200      	movs	r2, #0
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fsub+0x280>
 80004f2:	e70a      	b.n	800030a <__aeabi_fsub+0x96>
 80004f4:	0003      	movs	r3, r0
 80004f6:	4463      	add	r3, ip
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	d594      	bpl.n	8000426 <__aeabi_fsub+0x1b2>
 80004fc:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <__aeabi_fsub+0x338>)
 80004fe:	3501      	adds	r5, #1
 8000500:	4013      	ands	r3, r2
 8000502:	e790      	b.n	8000426 <__aeabi_fsub+0x1b2>
 8000504:	4663      	mov	r3, ip
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0af      	beq.n	800046a <__aeabi_fsub+0x1f6>
 800050a:	1e53      	subs	r3, r2, #1
 800050c:	2a01      	cmp	r2, #1
 800050e:	d015      	beq.n	800053c <__aeabi_fsub+0x2c8>
 8000510:	2aff      	cmp	r2, #255	; 0xff
 8000512:	d02a      	beq.n	800056a <__aeabi_fsub+0x2f6>
 8000514:	001a      	movs	r2, r3
 8000516:	e752      	b.n	80003be <__aeabi_fsub+0x14a>
 8000518:	4662      	mov	r2, ip
 800051a:	2a00      	cmp	r2, #0
 800051c:	d191      	bne.n	8000442 <__aeabi_fsub+0x1ce>
 800051e:	2800      	cmp	r0, #0
 8000520:	d198      	bne.n	8000454 <__aeabi_fsub+0x1e0>
 8000522:	2680      	movs	r6, #128	; 0x80
 8000524:	2400      	movs	r4, #0
 8000526:	22ff      	movs	r2, #255	; 0xff
 8000528:	03f6      	lsls	r6, r6, #15
 800052a:	e6ee      	b.n	800030a <__aeabi_fsub+0x96>
 800052c:	000c      	movs	r4, r1
 800052e:	4643      	mov	r3, r8
 8000530:	0015      	movs	r5, r2
 8000532:	e77c      	b.n	800042e <__aeabi_fsub+0x1ba>
 8000534:	4663      	mov	r3, ip
 8000536:	000c      	movs	r4, r1
 8000538:	1ac6      	subs	r6, r0, r3
 800053a:	e6c9      	b.n	80002d0 <__aeabi_fsub+0x5c>
 800053c:	0003      	movs	r3, r0
 800053e:	4463      	add	r3, ip
 8000540:	2501      	movs	r5, #1
 8000542:	015a      	lsls	r2, r3, #5
 8000544:	d400      	bmi.n	8000548 <__aeabi_fsub+0x2d4>
 8000546:	e76e      	b.n	8000426 <__aeabi_fsub+0x1b2>
 8000548:	2502      	movs	r5, #2
 800054a:	e6fa      	b.n	8000342 <__aeabi_fsub+0xce>
 800054c:	4663      	mov	r3, ip
 800054e:	2501      	movs	r5, #1
 8000550:	1a1b      	subs	r3, r3, r0
 8000552:	e6b8      	b.n	80002c6 <__aeabi_fsub+0x52>
 8000554:	4664      	mov	r4, ip
 8000556:	2320      	movs	r3, #32
 8000558:	40d4      	lsrs	r4, r2
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4662      	mov	r2, ip
 800055e:	409a      	lsls	r2, r3
 8000560:	0013      	movs	r3, r2
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	4193      	sbcs	r3, r2
 8000566:	4323      	orrs	r3, r4
 8000568:	e7a2      	b.n	80004b0 <__aeabi_fsub+0x23c>
 800056a:	4643      	mov	r3, r8
 800056c:	e774      	b.n	8000458 <__aeabi_fsub+0x1e4>
 800056e:	4661      	mov	r1, ip
 8000570:	2320      	movs	r3, #32
 8000572:	40d1      	lsrs	r1, r2
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	4662      	mov	r2, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0013      	movs	r3, r2
 800057c:	1e5a      	subs	r2, r3, #1
 800057e:	4193      	sbcs	r3, r2
 8000580:	430b      	orrs	r3, r1
 8000582:	e720      	b.n	80003c6 <__aeabi_fsub+0x152>
 8000584:	4663      	mov	r3, ip
 8000586:	000c      	movs	r4, r1
 8000588:	2501      	movs	r5, #1
 800058a:	1ac3      	subs	r3, r0, r3
 800058c:	e69b      	b.n	80002c6 <__aeabi_fsub+0x52>
 800058e:	2800      	cmp	r0, #0
 8000590:	d099      	beq.n	80004c6 <__aeabi_fsub+0x252>
 8000592:	000c      	movs	r4, r1
 8000594:	4646      	mov	r6, r8
 8000596:	2200      	movs	r2, #0
 8000598:	e6b7      	b.n	800030a <__aeabi_fsub+0x96>
 800059a:	4646      	mov	r6, r8
 800059c:	2200      	movs	r2, #0
 800059e:	e6b4      	b.n	800030a <__aeabi_fsub+0x96>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fsub+0x332>
 80005a4:	e73f      	b.n	8000426 <__aeabi_fsub+0x1b2>
 80005a6:	2400      	movs	r4, #0
 80005a8:	2600      	movs	r6, #0
 80005aa:	e6ae      	b.n	800030a <__aeabi_fsub+0x96>
 80005ac:	fbffffff 	.word	0xfbffffff
 80005b0:	7dffffff 	.word	0x7dffffff

080005b4 <__aeabi_f2iz>:
 80005b4:	0241      	lsls	r1, r0, #9
 80005b6:	0042      	lsls	r2, r0, #1
 80005b8:	0fc3      	lsrs	r3, r0, #31
 80005ba:	0a49      	lsrs	r1, r1, #9
 80005bc:	2000      	movs	r0, #0
 80005be:	0e12      	lsrs	r2, r2, #24
 80005c0:	2a7e      	cmp	r2, #126	; 0x7e
 80005c2:	dd03      	ble.n	80005cc <__aeabi_f2iz+0x18>
 80005c4:	2a9d      	cmp	r2, #157	; 0x9d
 80005c6:	dd02      	ble.n	80005ce <__aeabi_f2iz+0x1a>
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <__aeabi_f2iz+0x3c>)
 80005ca:	1898      	adds	r0, r3, r2
 80005cc:	4770      	bx	lr
 80005ce:	2080      	movs	r0, #128	; 0x80
 80005d0:	0400      	lsls	r0, r0, #16
 80005d2:	4301      	orrs	r1, r0
 80005d4:	2a95      	cmp	r2, #149	; 0x95
 80005d6:	dc07      	bgt.n	80005e8 <__aeabi_f2iz+0x34>
 80005d8:	2096      	movs	r0, #150	; 0x96
 80005da:	1a82      	subs	r2, r0, r2
 80005dc:	40d1      	lsrs	r1, r2
 80005de:	4248      	negs	r0, r1
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f3      	bne.n	80005cc <__aeabi_f2iz+0x18>
 80005e4:	0008      	movs	r0, r1
 80005e6:	e7f1      	b.n	80005cc <__aeabi_f2iz+0x18>
 80005e8:	3a96      	subs	r2, #150	; 0x96
 80005ea:	4091      	lsls	r1, r2
 80005ec:	e7f7      	b.n	80005de <__aeabi_f2iz+0x2a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	7fffffff 	.word	0x7fffffff

080005f4 <__aeabi_i2f>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d013      	beq.n	8000622 <__aeabi_i2f+0x2e>
 80005fa:	17c3      	asrs	r3, r0, #31
 80005fc:	18c5      	adds	r5, r0, r3
 80005fe:	405d      	eors	r5, r3
 8000600:	0fc4      	lsrs	r4, r0, #31
 8000602:	0028      	movs	r0, r5
 8000604:	f000 f882 	bl	800070c <__clzsi2>
 8000608:	239e      	movs	r3, #158	; 0x9e
 800060a:	0001      	movs	r1, r0
 800060c:	1a1b      	subs	r3, r3, r0
 800060e:	2b96      	cmp	r3, #150	; 0x96
 8000610:	dc0f      	bgt.n	8000632 <__aeabi_i2f+0x3e>
 8000612:	2808      	cmp	r0, #8
 8000614:	d031      	beq.n	800067a <__aeabi_i2f+0x86>
 8000616:	3908      	subs	r1, #8
 8000618:	408d      	lsls	r5, r1
 800061a:	026d      	lsls	r5, r5, #9
 800061c:	0a6d      	lsrs	r5, r5, #9
 800061e:	b2d8      	uxtb	r0, r3
 8000620:	e002      	b.n	8000628 <__aeabi_i2f+0x34>
 8000622:	2400      	movs	r4, #0
 8000624:	2000      	movs	r0, #0
 8000626:	2500      	movs	r5, #0
 8000628:	05c0      	lsls	r0, r0, #23
 800062a:	4328      	orrs	r0, r5
 800062c:	07e4      	lsls	r4, r4, #31
 800062e:	4320      	orrs	r0, r4
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	2b99      	cmp	r3, #153	; 0x99
 8000634:	dd0c      	ble.n	8000650 <__aeabi_i2f+0x5c>
 8000636:	2205      	movs	r2, #5
 8000638:	1a12      	subs	r2, r2, r0
 800063a:	0028      	movs	r0, r5
 800063c:	40d0      	lsrs	r0, r2
 800063e:	0002      	movs	r2, r0
 8000640:	0008      	movs	r0, r1
 8000642:	301b      	adds	r0, #27
 8000644:	4085      	lsls	r5, r0
 8000646:	0028      	movs	r0, r5
 8000648:	1e45      	subs	r5, r0, #1
 800064a:	41a8      	sbcs	r0, r5
 800064c:	4302      	orrs	r2, r0
 800064e:	0015      	movs	r5, r2
 8000650:	2905      	cmp	r1, #5
 8000652:	dc16      	bgt.n	8000682 <__aeabi_i2f+0x8e>
 8000654:	002a      	movs	r2, r5
 8000656:	480f      	ldr	r0, [pc, #60]	; (8000694 <__aeabi_i2f+0xa0>)
 8000658:	4002      	ands	r2, r0
 800065a:	076e      	lsls	r6, r5, #29
 800065c:	d009      	beq.n	8000672 <__aeabi_i2f+0x7e>
 800065e:	260f      	movs	r6, #15
 8000660:	4035      	ands	r5, r6
 8000662:	2d04      	cmp	r5, #4
 8000664:	d005      	beq.n	8000672 <__aeabi_i2f+0x7e>
 8000666:	3204      	adds	r2, #4
 8000668:	0155      	lsls	r5, r2, #5
 800066a:	d502      	bpl.n	8000672 <__aeabi_i2f+0x7e>
 800066c:	239f      	movs	r3, #159	; 0x9f
 800066e:	4002      	ands	r2, r0
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	0192      	lsls	r2, r2, #6
 8000674:	0a55      	lsrs	r5, r2, #9
 8000676:	b2d8      	uxtb	r0, r3
 8000678:	e7d6      	b.n	8000628 <__aeabi_i2f+0x34>
 800067a:	026d      	lsls	r5, r5, #9
 800067c:	2096      	movs	r0, #150	; 0x96
 800067e:	0a6d      	lsrs	r5, r5, #9
 8000680:	e7d2      	b.n	8000628 <__aeabi_i2f+0x34>
 8000682:	1f4a      	subs	r2, r1, #5
 8000684:	4095      	lsls	r5, r2
 8000686:	002a      	movs	r2, r5
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <__aeabi_i2f+0xa0>)
 800068a:	4002      	ands	r2, r0
 800068c:	076e      	lsls	r6, r5, #29
 800068e:	d0f0      	beq.n	8000672 <__aeabi_i2f+0x7e>
 8000690:	e7e5      	b.n	800065e <__aeabi_i2f+0x6a>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	fbffffff 	.word	0xfbffffff

08000698 <__aeabi_cfrcmple>:
 8000698:	4684      	mov	ip, r0
 800069a:	0008      	movs	r0, r1
 800069c:	4661      	mov	r1, ip
 800069e:	e7ff      	b.n	80006a0 <__aeabi_cfcmpeq>

080006a0 <__aeabi_cfcmpeq>:
 80006a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80006a2:	f000 f8bd 	bl	8000820 <__lesf2>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d401      	bmi.n	80006ae <__aeabi_cfcmpeq+0xe>
 80006aa:	2100      	movs	r1, #0
 80006ac:	42c8      	cmn	r0, r1
 80006ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080006b0 <__aeabi_fcmpeq>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	f000 f849 	bl	8000748 <__eqsf2>
 80006b6:	4240      	negs	r0, r0
 80006b8:	3001      	adds	r0, #1
 80006ba:	bd10      	pop	{r4, pc}

080006bc <__aeabi_fcmplt>:
 80006bc:	b510      	push	{r4, lr}
 80006be:	f000 f8af 	bl	8000820 <__lesf2>
 80006c2:	2800      	cmp	r0, #0
 80006c4:	db01      	blt.n	80006ca <__aeabi_fcmplt+0xe>
 80006c6:	2000      	movs	r0, #0
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	2001      	movs	r0, #1
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_fcmple>:
 80006d0:	b510      	push	{r4, lr}
 80006d2:	f000 f8a5 	bl	8000820 <__lesf2>
 80006d6:	2800      	cmp	r0, #0
 80006d8:	dd01      	ble.n	80006de <__aeabi_fcmple+0xe>
 80006da:	2000      	movs	r0, #0
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	2001      	movs	r0, #1
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)

080006e4 <__aeabi_fcmpgt>:
 80006e4:	b510      	push	{r4, lr}
 80006e6:	f000 f855 	bl	8000794 <__gesf2>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	dc01      	bgt.n	80006f2 <__aeabi_fcmpgt+0xe>
 80006ee:	2000      	movs	r0, #0
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	2001      	movs	r0, #1
 80006f4:	bd10      	pop	{r4, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)

080006f8 <__aeabi_fcmpge>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	f000 f84b 	bl	8000794 <__gesf2>
 80006fe:	2800      	cmp	r0, #0
 8000700:	da01      	bge.n	8000706 <__aeabi_fcmpge+0xe>
 8000702:	2000      	movs	r0, #0
 8000704:	bd10      	pop	{r4, pc}
 8000706:	2001      	movs	r0, #1
 8000708:	bd10      	pop	{r4, pc}
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__clzsi2>:
 800070c:	211c      	movs	r1, #28
 800070e:	2301      	movs	r3, #1
 8000710:	041b      	lsls	r3, r3, #16
 8000712:	4298      	cmp	r0, r3
 8000714:	d301      	bcc.n	800071a <__clzsi2+0xe>
 8000716:	0c00      	lsrs	r0, r0, #16
 8000718:	3910      	subs	r1, #16
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	4298      	cmp	r0, r3
 800071e:	d301      	bcc.n	8000724 <__clzsi2+0x18>
 8000720:	0a00      	lsrs	r0, r0, #8
 8000722:	3908      	subs	r1, #8
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	4298      	cmp	r0, r3
 8000728:	d301      	bcc.n	800072e <__clzsi2+0x22>
 800072a:	0900      	lsrs	r0, r0, #4
 800072c:	3904      	subs	r1, #4
 800072e:	a202      	add	r2, pc, #8	; (adr r2, 8000738 <__clzsi2+0x2c>)
 8000730:	5c10      	ldrb	r0, [r2, r0]
 8000732:	1840      	adds	r0, r0, r1
 8000734:	4770      	bx	lr
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	02020304 	.word	0x02020304
 800073c:	01010101 	.word	0x01010101
	...

08000748 <__eqsf2>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	0042      	lsls	r2, r0, #1
 800074c:	0245      	lsls	r5, r0, #9
 800074e:	024e      	lsls	r6, r1, #9
 8000750:	004c      	lsls	r4, r1, #1
 8000752:	0fc3      	lsrs	r3, r0, #31
 8000754:	0a6d      	lsrs	r5, r5, #9
 8000756:	2001      	movs	r0, #1
 8000758:	0e12      	lsrs	r2, r2, #24
 800075a:	0a76      	lsrs	r6, r6, #9
 800075c:	0e24      	lsrs	r4, r4, #24
 800075e:	0fc9      	lsrs	r1, r1, #31
 8000760:	2aff      	cmp	r2, #255	; 0xff
 8000762:	d006      	beq.n	8000772 <__eqsf2+0x2a>
 8000764:	2cff      	cmp	r4, #255	; 0xff
 8000766:	d003      	beq.n	8000770 <__eqsf2+0x28>
 8000768:	42a2      	cmp	r2, r4
 800076a:	d101      	bne.n	8000770 <__eqsf2+0x28>
 800076c:	42b5      	cmp	r5, r6
 800076e:	d006      	beq.n	800077e <__eqsf2+0x36>
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	2d00      	cmp	r5, #0
 8000774:	d1fc      	bne.n	8000770 <__eqsf2+0x28>
 8000776:	2cff      	cmp	r4, #255	; 0xff
 8000778:	d1fa      	bne.n	8000770 <__eqsf2+0x28>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d1f8      	bne.n	8000770 <__eqsf2+0x28>
 800077e:	428b      	cmp	r3, r1
 8000780:	d006      	beq.n	8000790 <__eqsf2+0x48>
 8000782:	2001      	movs	r0, #1
 8000784:	2a00      	cmp	r2, #0
 8000786:	d1f3      	bne.n	8000770 <__eqsf2+0x28>
 8000788:	0028      	movs	r0, r5
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	e7ef      	b.n	8000770 <__eqsf2+0x28>
 8000790:	2000      	movs	r0, #0
 8000792:	e7ed      	b.n	8000770 <__eqsf2+0x28>

08000794 <__gesf2>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	0042      	lsls	r2, r0, #1
 8000798:	0245      	lsls	r5, r0, #9
 800079a:	024e      	lsls	r6, r1, #9
 800079c:	004c      	lsls	r4, r1, #1
 800079e:	0fc3      	lsrs	r3, r0, #31
 80007a0:	0a6d      	lsrs	r5, r5, #9
 80007a2:	0e12      	lsrs	r2, r2, #24
 80007a4:	0a76      	lsrs	r6, r6, #9
 80007a6:	0e24      	lsrs	r4, r4, #24
 80007a8:	0fc8      	lsrs	r0, r1, #31
 80007aa:	2aff      	cmp	r2, #255	; 0xff
 80007ac:	d01b      	beq.n	80007e6 <__gesf2+0x52>
 80007ae:	2cff      	cmp	r4, #255	; 0xff
 80007b0:	d00e      	beq.n	80007d0 <__gesf2+0x3c>
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d11b      	bne.n	80007ee <__gesf2+0x5a>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d101      	bne.n	80007be <__gesf2+0x2a>
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d01c      	beq.n	80007f8 <__gesf2+0x64>
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d00c      	beq.n	80007dc <__gesf2+0x48>
 80007c2:	4283      	cmp	r3, r0
 80007c4:	d01c      	beq.n	8000800 <__gesf2+0x6c>
 80007c6:	2102      	movs	r1, #2
 80007c8:	1e58      	subs	r0, r3, #1
 80007ca:	4008      	ands	r0, r1
 80007cc:	3801      	subs	r0, #1
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d122      	bne.n	800081a <__gesf2+0x86>
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	d1f4      	bne.n	80007c2 <__gesf2+0x2e>
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d1f2      	bne.n	80007c2 <__gesf2+0x2e>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d1f6      	bne.n	80007ce <__gesf2+0x3a>
 80007e0:	2001      	movs	r0, #1
 80007e2:	4240      	negs	r0, r0
 80007e4:	e7f3      	b.n	80007ce <__gesf2+0x3a>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d117      	bne.n	800081a <__gesf2+0x86>
 80007ea:	2cff      	cmp	r4, #255	; 0xff
 80007ec:	d0f0      	beq.n	80007d0 <__gesf2+0x3c>
 80007ee:	2c00      	cmp	r4, #0
 80007f0:	d1e7      	bne.n	80007c2 <__gesf2+0x2e>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d1e5      	bne.n	80007c2 <__gesf2+0x2e>
 80007f6:	e7e6      	b.n	80007c6 <__gesf2+0x32>
 80007f8:	2000      	movs	r0, #0
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d0e7      	beq.n	80007ce <__gesf2+0x3a>
 80007fe:	e7e2      	b.n	80007c6 <__gesf2+0x32>
 8000800:	42a2      	cmp	r2, r4
 8000802:	dc05      	bgt.n	8000810 <__gesf2+0x7c>
 8000804:	dbea      	blt.n	80007dc <__gesf2+0x48>
 8000806:	42b5      	cmp	r5, r6
 8000808:	d802      	bhi.n	8000810 <__gesf2+0x7c>
 800080a:	d3e7      	bcc.n	80007dc <__gesf2+0x48>
 800080c:	2000      	movs	r0, #0
 800080e:	e7de      	b.n	80007ce <__gesf2+0x3a>
 8000810:	4243      	negs	r3, r0
 8000812:	4158      	adcs	r0, r3
 8000814:	0040      	lsls	r0, r0, #1
 8000816:	3801      	subs	r0, #1
 8000818:	e7d9      	b.n	80007ce <__gesf2+0x3a>
 800081a:	2002      	movs	r0, #2
 800081c:	4240      	negs	r0, r0
 800081e:	e7d6      	b.n	80007ce <__gesf2+0x3a>

08000820 <__lesf2>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	0042      	lsls	r2, r0, #1
 8000824:	0245      	lsls	r5, r0, #9
 8000826:	024e      	lsls	r6, r1, #9
 8000828:	004c      	lsls	r4, r1, #1
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a6d      	lsrs	r5, r5, #9
 800082e:	0e12      	lsrs	r2, r2, #24
 8000830:	0a76      	lsrs	r6, r6, #9
 8000832:	0e24      	lsrs	r4, r4, #24
 8000834:	0fc8      	lsrs	r0, r1, #31
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d00b      	beq.n	8000852 <__lesf2+0x32>
 800083a:	2cff      	cmp	r4, #255	; 0xff
 800083c:	d00d      	beq.n	800085a <__lesf2+0x3a>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d11f      	bne.n	8000882 <__lesf2+0x62>
 8000842:	2c00      	cmp	r4, #0
 8000844:	d116      	bne.n	8000874 <__lesf2+0x54>
 8000846:	2e00      	cmp	r6, #0
 8000848:	d114      	bne.n	8000874 <__lesf2+0x54>
 800084a:	2000      	movs	r0, #0
 800084c:	2d00      	cmp	r5, #0
 800084e:	d010      	beq.n	8000872 <__lesf2+0x52>
 8000850:	e009      	b.n	8000866 <__lesf2+0x46>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d10c      	bne.n	8000870 <__lesf2+0x50>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d113      	bne.n	8000882 <__lesf2+0x62>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d108      	bne.n	8000870 <__lesf2+0x50>
 800085e:	2a00      	cmp	r2, #0
 8000860:	d008      	beq.n	8000874 <__lesf2+0x54>
 8000862:	4283      	cmp	r3, r0
 8000864:	d012      	beq.n	800088c <__lesf2+0x6c>
 8000866:	2102      	movs	r1, #2
 8000868:	1e58      	subs	r0, r3, #1
 800086a:	4008      	ands	r0, r1
 800086c:	3801      	subs	r0, #1
 800086e:	e000      	b.n	8000872 <__lesf2+0x52>
 8000870:	2002      	movs	r0, #2
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	2d00      	cmp	r5, #0
 8000876:	d1f4      	bne.n	8000862 <__lesf2+0x42>
 8000878:	2800      	cmp	r0, #0
 800087a:	d1fa      	bne.n	8000872 <__lesf2+0x52>
 800087c:	2001      	movs	r0, #1
 800087e:	4240      	negs	r0, r0
 8000880:	e7f7      	b.n	8000872 <__lesf2+0x52>
 8000882:	2c00      	cmp	r4, #0
 8000884:	d1ed      	bne.n	8000862 <__lesf2+0x42>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d1eb      	bne.n	8000862 <__lesf2+0x42>
 800088a:	e7ec      	b.n	8000866 <__lesf2+0x46>
 800088c:	42a2      	cmp	r2, r4
 800088e:	dc05      	bgt.n	800089c <__lesf2+0x7c>
 8000890:	dbf2      	blt.n	8000878 <__lesf2+0x58>
 8000892:	42b5      	cmp	r5, r6
 8000894:	d802      	bhi.n	800089c <__lesf2+0x7c>
 8000896:	d3ef      	bcc.n	8000878 <__lesf2+0x58>
 8000898:	2000      	movs	r0, #0
 800089a:	e7ea      	b.n	8000872 <__lesf2+0x52>
 800089c:	4243      	negs	r3, r0
 800089e:	4158      	adcs	r0, r3
 80008a0:	0040      	lsls	r0, r0, #1
 80008a2:	3801      	subs	r0, #1
 80008a4:	e7e5      	b.n	8000872 <__lesf2+0x52>
 80008a6:	46c0      	nop			; (mov r8, r8)

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af02      	add	r7, sp, #8
  int16_t final_data; //store raw temp data, initially set to 0
  float val;
  unsigned int large;//left of decimal
  unsigned int small; //right of decimal

  HAL_Init();
 80008ae:	f000 fb21 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f89d 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f96f 	bl	8000b98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008ba:	f000 f8fd 	bl	8000ab8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008be:	f000 f93b 	bl	8000b38 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buffer[0] = REG_TMP;
 80008c2:	2300      	movs	r3, #0
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	2014      	movs	r0, #20
 80008c8:	183b      	adds	r3, r7, r0
 80008ca:	701a      	strb	r2, [r3, #0]

	      //RECEIVE DATA
	  	  	ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_ADDR, buffer, 2, HAL_MAX_DELAY);
 80008cc:	2390      	movs	r3, #144	; 0x90
 80008ce:	b299      	uxth	r1, r3
 80008d0:	2525      	movs	r5, #37	; 0x25
 80008d2:	197c      	adds	r4, r7, r5
 80008d4:	183a      	adds	r2, r7, r0
 80008d6:	4841      	ldr	r0, [pc, #260]	; (80009dc <main+0x134>)
 80008d8:	2301      	movs	r3, #1
 80008da:	425b      	negs	r3, r3
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2302      	movs	r3, #2
 80008e0:	f000 fe68 	bl	80015b4 <HAL_I2C_Master_Receive>
 80008e4:	0003      	movs	r3, r0
 80008e6:	7023      	strb	r3, [r4, #0]
	      	if (ret != HAL_OK) {
 80008e8:	197b      	adds	r3, r7, r5
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d011      	beq.n	8000914 <main+0x6c>
	      		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 80008f0:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <main+0x134>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 ff66 	bl	80017c4 <HAL_I2C_GetError>
 80008f8:	0003      	movs	r3, r0
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d001      	beq.n	8000902 <main+0x5a>
	      			Error_Handler(); //BASIC ERROR CHECK
 80008fe:	f000 f9b5 	bl	8000c6c <Error_Handler>
	      		}
	      		//IF ERROR PRODUCED DURING RECEIVAL
	      		strcpy(uart, "ERROR RX\r\n");
 8000902:	003b      	movs	r3, r7
 8000904:	4a36      	ldr	r2, [pc, #216]	; (80009e0 <main+0x138>)
 8000906:	ca03      	ldmia	r2!, {r0, r1}
 8000908:	c303      	stmia	r3!, {r0, r1}
 800090a:	8811      	ldrh	r1, [r2, #0]
 800090c:	8019      	strh	r1, [r3, #0]
 800090e:	7892      	ldrb	r2, [r2, #2]
 8000910:	709a      	strb	r2, [r3, #2]
 8000912:	e051      	b.n	80009b8 <main+0x110>
	      	} else {
	      		//CONVERT DATA TO CELSIUS (WORKS)
	      		final_data = ((uint16_t)buffer[0]<<8)|(buffer[1]);//>> 3;
 8000914:	2214      	movs	r2, #20
 8000916:	18bb      	adds	r3, r7, r2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b219      	sxth	r1, r3
 800091e:	18bb      	adds	r3, r7, r2
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	b21a      	sxth	r2, r3
 8000924:	2026      	movs	r0, #38	; 0x26
 8000926:	183b      	adds	r3, r7, r0
 8000928:	430a      	orrs	r2, r1
 800092a:	801a      	strh	r2, [r3, #0]
	      		if (final_data>511) { //MSB is 1, negative case
 800092c:	0001      	movs	r1, r0
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	5e9a      	ldrsh	r2, [r3, r2]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	429a      	cmp	r2, r3
 800093a:	db0e      	blt.n	800095a <main+0xb2>
	      			final_data = (final_data-8192)/16;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	5e9b      	ldrsh	r3, [r3, r2]
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <main+0x13c>)
 8000944:	4694      	mov	ip, r2
 8000946:	4463      	add	r3, ip
 8000948:	2b00      	cmp	r3, #0
 800094a:	da00      	bge.n	800094e <main+0xa6>
 800094c:	330f      	adds	r3, #15
 800094e:	111b      	asrs	r3, r3, #4
 8000950:	001a      	movs	r2, r3
 8000952:	2326      	movs	r3, #38	; 0x26
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	801a      	strh	r2, [r3, #0]
 8000958:	e009      	b.n	800096e <main+0xc6>
	      		} else { //MSB is 0, positive case
	      			final_data = (final_data)/16;
 800095a:	2326      	movs	r3, #38	; 0x26
 800095c:	18fa      	adds	r2, r7, r3
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	2100      	movs	r1, #0
 8000962:	5e5b      	ldrsh	r3, [r3, r1]
 8000964:	2b00      	cmp	r3, #0
 8000966:	da00      	bge.n	800096a <main+0xc2>
 8000968:	330f      	adds	r3, #15
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	8013      	strh	r3, [r2, #0]
	      		}
	      		val = final_data*100;
 800096e:	2326      	movs	r3, #38	; 0x26
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	2200      	movs	r2, #0
 8000974:	5e9b      	ldrsh	r3, [r3, r2]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	4353      	muls	r3, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fe3a 	bl	80005f4 <__aeabi_i2f>
 8000980:	1c03      	adds	r3, r0, #0
 8000982:	623b      	str	r3, [r7, #32]
	      		//FORMAT INTO DIGESTABLE STRING
	      		large = (unsigned int)val/100;
 8000984:	6a38      	ldr	r0, [r7, #32]
 8000986:	f7ff fc5d 	bl	8000244 <__aeabi_f2uiz>
 800098a:	0003      	movs	r3, r0
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff fbcc 	bl	800012c <__udivsi3>
 8000994:	0003      	movs	r3, r0
 8000996:	61fb      	str	r3, [r7, #28]
	      		small = (unsigned int)val%100;
 8000998:	6a38      	ldr	r0, [r7, #32]
 800099a:	f7ff fc53 	bl	8000244 <__aeabi_f2uiz>
 800099e:	0003      	movs	r3, r0
 80009a0:	2164      	movs	r1, #100	; 0x64
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fc48 	bl	8000238 <__aeabi_uidivmod>
 80009a8:	000b      	movs	r3, r1
 80009aa:	61bb      	str	r3, [r7, #24]
	      		sprintf(uart, "%u.%02u C\r\n", large, small);
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	490d      	ldr	r1, [pc, #52]	; (80009e8 <main+0x140>)
 80009b2:	0038      	movs	r0, r7
 80009b4:	f002 fbb2 	bl	800311c <siprintf>
	      	}
	      //TRANSMIT STRING IN PROPER FORM TO PC via UART
	      HAL_UART_Transmit(&huart1, (uint8_t*)uart, strlen(uart), HAL_MAX_DELAY);
 80009b8:	003b      	movs	r3, r7
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff fba4 	bl	8000108 <strlen>
 80009c0:	0003      	movs	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	0039      	movs	r1, r7
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x144>)
 80009cc:	f001 ff9c 	bl	8002908 <HAL_UART_Transmit>
	      HAL_Delay(1000);
 80009d0:	23fa      	movs	r3, #250	; 0xfa
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 faf1 	bl	8000fbc <HAL_Delay>
	  buffer[0] = REG_TMP;
 80009da:	e772      	b.n	80008c2 <main+0x1a>
 80009dc:	20000078 	.word	0x20000078
 80009e0:	08003a80 	.word	0x08003a80
 80009e4:	ffffe000 	.word	0xffffe000
 80009e8:	08003a8c 	.word	0x08003a8c
 80009ec:	200000cc 	.word	0x200000cc

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b097      	sub	sp, #92	; 0x5c
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	2428      	movs	r4, #40	; 0x28
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	0018      	movs	r0, r3
 80009fc:	2330      	movs	r3, #48	; 0x30
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f002 fbab 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a06:	2318      	movs	r3, #24
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f002 fba3 	bl	800315c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	2314      	movs	r3, #20
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f002 fb9c 	bl	800315c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2202      	movs	r2, #2
 8000a2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2210      	movs	r2, #16
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	22a0      	movs	r2, #160	; 0xa0
 8000a48:	0392      	lsls	r2, r2, #14
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 f9c7 	bl	8001de8 <HAL_RCC_OscConfig>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a5e:	f000 f905 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	2118      	movs	r1, #24
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2207      	movs	r2, #7
 8000a68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 fccb 	bl	800241c <HAL_RCC_ClockConfig>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a8a:	f000 f8ef 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2221      	movs	r2, #33	; 0x21
 8000a92:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 fdfe 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aac:	f000 f8de 	bl	8000c6c <Error_Handler>
  }
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b017      	add	sp, #92	; 0x5c
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_I2C1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_I2C1_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fcc7 	bl	8001488 <HAL_I2C_Init>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 f8b5 	bl	8000c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 f8d6 	bl	8001cb8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 f8ac 	bl	8000c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f919 	bl	8001d50 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 f8a3 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000078 	.word	0x20000078
 8000b30:	40005400 	.word	0x40005400
 8000b34:	2000090e 	.word	0x2000090e

08000b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_USART1_UART_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b44:	2296      	movs	r2, #150	; 0x96
 8000b46:	0212      	lsls	r2, r2, #8
 8000b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 fe6f 	bl	8002860 <HAL_UART_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 f871 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000cc 	.word	0x200000cc
 8000b94:	40013800 	.word	0x40013800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	240c      	movs	r4, #12
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2314      	movs	r3, #20
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f002 fad7 	bl	800315c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0289      	lsls	r1, r1, #10
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	029b      	lsls	r3, r3, #10
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0309      	lsls	r1, r1, #12
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	031b      	lsls	r3, r3, #12
 8000be0:	4013      	ands	r3, r2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	02c9      	lsls	r1, r1, #11
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	02db      	lsls	r3, r3, #11
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c02:	23c0      	movs	r3, #192	; 0xc0
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4818      	ldr	r0, [pc, #96]	; (8000c68 <MX_GPIO_Init+0xd0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f000 fc1e 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2290      	movs	r2, #144	; 0x90
 8000c1a:	0352      	lsls	r2, r2, #13
 8000c1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c24:	193a      	adds	r2, r7, r4
 8000c26:	2390      	movs	r3, #144	; 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 fa9d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000c32:	0021      	movs	r1, r4
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	22c0      	movs	r2, #192	; 0xc0
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2201      	movs	r2, #1
 8000c40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <MX_GPIO_Init+0xd0>)
 8000c52:	0019      	movs	r1, r3
 8000c54:	0010      	movs	r0, r2
 8000c56:	f000 fa89 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b009      	add	sp, #36	; 0x24
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48000800 	.word	0x48000800

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	619a      	str	r2, [r3, #24]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0549      	lsls	r1, r1, #21
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	61da      	str	r2, [r3, #28]
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	055b      	lsls	r3, r3, #21
 8000cac:	4013      	ands	r3, r2
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	2414      	movs	r4, #20
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f002 fa42 	bl	800315c <memset>
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <HAL_I2C_MspInit+0x90>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d131      	bne.n	8000d46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	02c9      	lsls	r1, r1, #11
 8000cec:	430a      	orrs	r2, r1
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	02db      	lsls	r3, r3, #11
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	0021      	movs	r1, r4
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	22c0      	movs	r2, #192	; 0xc0
 8000d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2212      	movs	r2, #18
 8000d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2203      	movs	r2, #3
 8000d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	0010      	movs	r0, r2
 8000d26:	f000 fa21 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000d2c:	69da      	ldr	r2, [r3, #28]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0389      	lsls	r1, r1, #14
 8000d34:	430a      	orrs	r2, r1
 8000d36:	61da      	str	r2, [r3, #28]
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000d3a:	69da      	ldr	r2, [r3, #28]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	039b      	lsls	r3, r3, #14
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b00b      	add	sp, #44	; 0x2c
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b08b      	sub	sp, #44	; 0x2c
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	2414      	movs	r4, #20
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f002 f9f4 	bl	800315c <memset>
  if(huart->Instance==USART1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_UART_MspInit+0x94>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d133      	bne.n	8000de6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	01c9      	lsls	r1, r1, #7
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	619a      	str	r2, [r3, #24]
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000d8e:	699a      	ldr	r2, [r3, #24]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	01db      	lsls	r3, r3, #7
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	0289      	lsls	r1, r1, #10
 8000da4:	430a      	orrs	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	029b      	lsls	r3, r3, #10
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	22c0      	movs	r2, #192	; 0xc0
 8000dba:	00d2      	lsls	r2, r2, #3
 8000dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	0021      	movs	r1, r4
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	187a      	adds	r2, r7, r1
 8000dda:	2390      	movs	r3, #144	; 0x90
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 f9c3 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b00b      	add	sp, #44	; 0x2c
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f8b2 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f002 f988 	bl	800316c <__errno>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	425b      	negs	r3, r3
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	18d2      	adds	r2, r2, r3
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b006      	add	sp, #24
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20002000 	.word	0x20002000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000154 	.word	0x20000154
 8000e90:	200002a8 	.word	0x200002a8

08000e94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
  mov   sp, r0          /* set stack pointer */
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopForever+0x2>)
  
 8000ea2:	4685      	mov	sp, r0
  /* Call the clock system initialization function.*/
  bl  SystemInit

 8000ea4:	f7ff fff6 	bl	8000e94 <SystemInit>
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
  ldr r1, =_edata
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopForever+0x6>)
  ldr r2, =_sidata
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopForever+0xa>)
  movs r3, #0
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopForever+0xe>)
  b LoopCopyDataInit
 8000eae:	2300      	movs	r3, #0

 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:
CopyDataInit:
  ldr r4, [r2, r3]
  str r4, [r0, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  adds r3, r3, #4
 8000eb4:	50c4      	str	r4, [r0, r3]

 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:
LoopCopyDataInit:
  adds r4, r0, r3
  cmp r4, r1
 8000eb8:	18c4      	adds	r4, r0, r3
  bcc CopyDataInit
 8000eba:	428c      	cmp	r4, r1
  
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
  ldr r4, =_ebss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopForever+0x12>)
  movs r3, #0
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopForever+0x16>)
  b LoopFillZerobss
 8000ec2:	2300      	movs	r3, #0

 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:
FillZerobss:
  str  r3, [r2]
  adds r2, r2, #4
 8000ec6:	6013      	str	r3, [r2, #0]

 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
  bcc FillZerobss
 8000eca:	42a2      	cmp	r2, r4

 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>
/* Call static constructors */
  bl __libc_init_array
/* Call the application's entry point.*/
 8000ece:	f002 f953 	bl	8003178 <__libc_init_array>
  bl main

 8000ed2:	f7ff fce9 	bl	80008a8 <main>

08000ed6 <LoopForever>:
LoopForever:
    b LoopForever

 8000ed6:	e7fe      	b.n	8000ed6 <LoopForever>
  mov   sp, r0          /* set stack pointer */
 8000ed8:	20002000 	.word	0x20002000
  ldr r1, =_edata
 8000edc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ee0:	2000005c 	.word	0x2000005c
  movs r3, #0
 8000ee4:	08003b0c 	.word	0x08003b0c
  ldr r4, =_ebss
 8000ee8:	2000005c 	.word	0x2000005c
  movs r3, #0
 8000eec:	200002a4 	.word	0x200002a4

08000ef0 <ADC1_COMP_IRQHandler>:
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
  .size Default_Handler, .-Default_Handler
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_COMP_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_Init+0x24>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_Init+0x24>)
 8000efe:	2110      	movs	r1, #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f809 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0a:	f7ff feb5 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	23fa      	movs	r3, #250	; 0xfa
 8000f30:	0098      	lsls	r0, r3, #2
 8000f32:	f7ff f8fb 	bl	800012c <__udivsi3>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	f7ff f8f6 	bl	800012c <__udivsi3>
 8000f40:	0003      	movs	r3, r0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f905 	bl	8001152 <HAL_SYSTICK_Config>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e00f      	b.n	8000f70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d80b      	bhi.n	8000f6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f8e2 	bl	8001128 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_InitTick+0x64>)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b003      	add	sp, #12
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	18d2      	adds	r2, r2, r3
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000158 	.word	0x20000158

08000fa8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000158 	.word	0x20000158

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff fff0 	bl	8000fa8 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001a      	movs	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	189b      	adds	r3, r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	f7ff ffe0 	bl	8000fa8 <HAL_GetTick>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000008 	.word	0x20000008

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b7f      	cmp	r3, #127	; 0x7f
 8001018:	d828      	bhi.n	800106c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800101a:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <__NVIC_SetPriority+0xd4>)
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	33c0      	adds	r3, #192	; 0xc0
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	589b      	ldr	r3, [r3, r2]
 800102a:	1dfa      	adds	r2, r7, #7
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	0011      	movs	r1, r2
 8001030:	2203      	movs	r2, #3
 8001032:	400a      	ands	r2, r1
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	21ff      	movs	r1, #255	; 0xff
 8001038:	4091      	lsls	r1, r2
 800103a:	000a      	movs	r2, r1
 800103c:	43d2      	mvns	r2, r2
 800103e:	401a      	ands	r2, r3
 8001040:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	401a      	ands	r2, r3
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	0018      	movs	r0, r3
 8001050:	2303      	movs	r3, #3
 8001052:	4003      	ands	r3, r0
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001058:	481f      	ldr	r0, [pc, #124]	; (80010d8 <__NVIC_SetPriority+0xd4>)
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b25b      	sxtb	r3, r3
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	430a      	orrs	r2, r1
 8001064:	33c0      	adds	r3, #192	; 0xc0
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800106a:	e031      	b.n	80010d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <__NVIC_SetPriority+0xd8>)
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	0019      	movs	r1, r3
 8001074:	230f      	movs	r3, #15
 8001076:	400b      	ands	r3, r1
 8001078:	3b08      	subs	r3, #8
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3306      	adds	r3, #6
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	18d3      	adds	r3, r2, r3
 8001082:	3304      	adds	r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1dfa      	adds	r2, r7, #7
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	0011      	movs	r1, r2
 800108c:	2203      	movs	r2, #3
 800108e:	400a      	ands	r2, r1
 8001090:	00d2      	lsls	r2, r2, #3
 8001092:	21ff      	movs	r1, #255	; 0xff
 8001094:	4091      	lsls	r1, r2
 8001096:	000a      	movs	r2, r1
 8001098:	43d2      	mvns	r2, r2
 800109a:	401a      	ands	r2, r3
 800109c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	019b      	lsls	r3, r3, #6
 80010a2:	22ff      	movs	r2, #255	; 0xff
 80010a4:	401a      	ands	r2, r3
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	0018      	movs	r0, r3
 80010ac:	2303      	movs	r3, #3
 80010ae:	4003      	ands	r3, r0
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <__NVIC_SetPriority+0xd8>)
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	001c      	movs	r4, r3
 80010bc:	230f      	movs	r3, #15
 80010be:	4023      	ands	r3, r4
 80010c0:	3b08      	subs	r3, #8
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	430a      	orrs	r2, r1
 80010c6:	3306      	adds	r3, #6
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	18c3      	adds	r3, r0, r3
 80010cc:	3304      	adds	r3, #4
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b003      	add	sp, #12
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	045b      	lsls	r3, r3, #17
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d301      	bcc.n	80010f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f4:	2301      	movs	r3, #1
 80010f6:	e010      	b.n	800111a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <SysTick_Config+0x44>)
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	3a01      	subs	r2, #1
 80010fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001100:	2301      	movs	r3, #1
 8001102:	425b      	negs	r3, r3
 8001104:	2103      	movs	r1, #3
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff ff7c 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x44>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x44>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	210f      	movs	r1, #15
 8001134:	187b      	adds	r3, r7, r1
 8001136:	1c02      	adds	r2, r0, #0
 8001138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	187b      	adds	r3, r7, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25b      	sxtb	r3, r3
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ffbf 	bl	80010e0 <SysTick_Config>
 8001162:	0003      	movs	r3, r0
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e14f      	b.n	800141c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <HAL_GPIO_Init+0x28>
 8001192:	e140      	b.n	8001416 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2203      	movs	r2, #3
 800119a:	4013      	ands	r3, r2
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2203      	movs	r2, #3
 80011a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	2201      	movs	r2, #1
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	4013      	ands	r3, r2
 8001216:	2b03      	cmp	r3, #3
 8001218:	d017      	beq.n	800124a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b02      	cmp	r3, #2
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	58d3      	ldr	r3, [r2, r3]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2207      	movs	r2, #7
 8001268:	4013      	ands	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2107      	movs	r1, #7
 8001282:	400b      	ands	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	6939      	ldr	r1, [r7, #16]
 800129c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	401a      	ands	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	029b      	lsls	r3, r3, #10
 80012da:	4013      	ands	r3, r2
 80012dc:	d100      	bne.n	80012e0 <HAL_GPIO_Init+0x174>
 80012de:	e09a      	b.n	8001416 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	589b      	ldr	r3, [r3, r2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	409a      	lsls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	2390      	movs	r3, #144	; 0x90
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	429a      	cmp	r2, r3
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x1e2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x1de>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a43      	ldr	r2, [pc, #268]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x1da>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_GPIO_Init+0x2d8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x1d6>
 800133e:	2303      	movs	r3, #3
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001342:	2305      	movs	r3, #5
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x1e4>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	2103      	movs	r1, #3
 8001354:	400a      	ands	r2, r1
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	035b      	lsls	r3, r3, #13
 8001386:	4013      	ands	r3, r2
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	039b      	lsls	r3, r3, #14
 80013b0:	4013      	ands	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43da      	mvns	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	025b      	lsls	r3, r3, #9
 8001404:	4013      	ands	r3, r2
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	40da      	lsrs	r2, r3
 8001424:	1e13      	subs	r3, r2, #0
 8001426:	d000      	beq.n	800142a <HAL_GPIO_Init+0x2be>
 8001428:	e6a8      	b.n	800117c <HAL_GPIO_Init+0x10>
  } 
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b006      	add	sp, #24
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800
 8001444:	48000c00 	.word	0x48000c00
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	0008      	movs	r0, r1
 8001456:	0011      	movs	r1, r2
 8001458:	1cbb      	adds	r3, r7, #2
 800145a:	1c02      	adds	r2, r0, #0
 800145c:	801a      	strh	r2, [r3, #0]
 800145e:	1c7b      	adds	r3, r7, #1
 8001460:	1c0a      	adds	r2, r1, #0
 8001462:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001464:	1c7b      	adds	r3, r7, #1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146c:	1cbb      	adds	r3, r7, #2
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	1cbb      	adds	r3, r7, #2
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e082      	b.n	80015a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2241      	movs	r2, #65	; 0x41
 800149e:	5c9b      	ldrb	r3, [r3, r2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fc05 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2241      	movs	r2, #65	; 0x41
 80014ba:	2124      	movs	r1, #36	; 0x24
 80014bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	438a      	bics	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4934      	ldr	r1, [pc, #208]	; (80015a8 <HAL_I2C_Init+0x120>)
 80014d8:	400a      	ands	r2, r1
 80014da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4931      	ldr	r1, [pc, #196]	; (80015ac <HAL_I2C_Init+0x124>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0209      	lsls	r1, r1, #8
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e007      	b.n	8001516 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2184      	movs	r1, #132	; 0x84
 8001510:	0209      	lsls	r1, r1, #8
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d104      	bne.n	8001528 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	491f      	ldr	r1, [pc, #124]	; (80015b0 <HAL_I2C_Init+0x128>)
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	491a      	ldr	r1, [pc, #104]	; (80015ac <HAL_I2C_Init+0x124>)
 8001544:	400a      	ands	r2, r1
 8001546:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	431a      	orrs	r2, r3
 8001552:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69d9      	ldr	r1, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2241      	movs	r2, #65	; 0x41
 800158c:	2120      	movs	r1, #32
 800158e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2242      	movs	r2, #66	; 0x42
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	f0ffffff 	.word	0xf0ffffff
 80015ac:	ffff7fff 	.word	0xffff7fff
 80015b0:	02008000 	.word	0x02008000

080015b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	0008      	movs	r0, r1
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	0019      	movs	r1, r3
 80015c2:	230a      	movs	r3, #10
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	1c02      	adds	r2, r0, #0
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	2308      	movs	r3, #8
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	1c0a      	adds	r2, r1, #0
 80015d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2241      	movs	r2, #65	; 0x41
 80015d6:	5c9b      	ldrb	r3, [r3, r2]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d000      	beq.n	80015e0 <HAL_I2C_Master_Receive+0x2c>
 80015de:	e0e8      	b.n	80017b2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2240      	movs	r2, #64	; 0x40
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_I2C_Master_Receive+0x3a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e0e2      	b.n	80017b4 <HAL_I2C_Master_Receive+0x200>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015f6:	f7ff fcd7 	bl	8000fa8 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	0219      	lsls	r1, r3, #8
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2319      	movs	r3, #25
 800160a:	2201      	movs	r2, #1
 800160c:	f000 f906 	bl	800181c <I2C_WaitOnFlagUntilTimeout>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cd      	b.n	80017b4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2241      	movs	r2, #65	; 0x41
 800161c:	2122      	movs	r1, #34	; 0x22
 800161e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2242      	movs	r2, #66	; 0x42
 8001624:	2110      	movs	r1, #16
 8001626:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2208      	movs	r2, #8
 8001638:	18ba      	adds	r2, r7, r2
 800163a:	8812      	ldrh	r2, [r2, #0]
 800163c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d911      	bls.n	8001672 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	22ff      	movs	r2, #255	; 0xff
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	b2da      	uxtb	r2, r3
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	045c      	lsls	r4, r3, #17
 800165e:	230a      	movs	r3, #10
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	8819      	ldrh	r1, [r3, #0]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_I2C_Master_Receive+0x208>)
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	0023      	movs	r3, r4
 800166c:	f000 faea 	bl	8001c44 <I2C_TransferConfig>
 8001670:	e076      	b.n	8001760 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	b2da      	uxtb	r2, r3
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	049c      	lsls	r4, r3, #18
 8001686:	230a      	movs	r3, #10
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	8819      	ldrh	r1, [r3, #0]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_I2C_Master_Receive+0x208>)
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	0023      	movs	r3, r4
 8001694:	f000 fad6 	bl	8001c44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001698:	e062      	b.n	8001760 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 f94d 	bl	8001940 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e082      	b.n	80017b4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d03a      	beq.n	8001760 <HAL_I2C_Master_Receive+0x1ac>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d136      	bne.n	8001760 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	0013      	movs	r3, r2
 80016fc:	2200      	movs	r2, #0
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	f000 f88c 	bl	800181c <I2C_WaitOnFlagUntilTimeout>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e053      	b.n	80017b4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d911      	bls.n	800173a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	045c      	lsls	r4, r3, #17
 8001726:	230a      	movs	r3, #10
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	8819      	ldrh	r1, [r3, #0]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	0023      	movs	r3, r4
 8001734:	f000 fa86 	bl	8001c44 <I2C_TransferConfig>
 8001738:	e012      	b.n	8001760 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	b2da      	uxtb	r2, r3
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049c      	lsls	r4, r3, #18
 800174e:	230a      	movs	r3, #10
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	8819      	ldrh	r1, [r3, #0]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	0023      	movs	r3, r4
 800175c:	f000 fa72 	bl	8001c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d197      	bne.n	800169a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 f8a1 	bl	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e01a      	b.n	80017b4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	490b      	ldr	r1, [pc, #44]	; (80017c0 <HAL_I2C_Master_Receive+0x20c>)
 8001792:	400a      	ands	r2, r1
 8001794:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2241      	movs	r2, #65	; 0x41
 800179a:	2120      	movs	r1, #32
 800179c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2242      	movs	r2, #66	; 0x42
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	2100      	movs	r1, #0
 80017ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
  }
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b007      	add	sp, #28
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	80002400 	.word	0x80002400
 80017c0:	fe00e800 	.word	0xfe00e800

080017c4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d103      	bne.n	80017f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	2b01      	cmp	r3, #1
 8001802:	d007      	beq.n	8001814 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2101      	movs	r1, #1
 8001810:	430a      	orrs	r2, r1
 8001812:	619a      	str	r2, [r3, #24]
  }
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800182c:	e030      	b.n	8001890 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	d02d      	beq.n	8001890 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001834:	f7ff fbb8 	bl	8000fa8 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d302      	bcc.n	800184a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d122      	bne.n	8001890 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4013      	ands	r3, r2
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	425a      	negs	r2, r3
 800185a:	4153      	adcs	r3, r2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	001a      	movs	r2, r3
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d113      	bne.n	8001890 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	2220      	movs	r2, #32
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2242      	movs	r2, #66	; 0x42
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e00f      	b.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	425a      	negs	r2, r3
 80018a0:	4153      	adcs	r3, r2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	001a      	movs	r2, r3
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d0bf      	beq.n	800182e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c4:	e02f      	b.n	8001926 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f8b9 	bl	8001a44 <I2C_IsErrorOccurred>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d001      	beq.n	80018da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e02d      	b.n	8001936 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018da:	f7ff fb65 	bl	8000fa8 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d302      	bcc.n	80018f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11a      	bne.n	8001926 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2220      	movs	r2, #32
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d013      	beq.n	8001926 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	2220      	movs	r2, #32
 8001904:	431a      	orrs	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2241      	movs	r2, #65	; 0x41
 800190e:	2120      	movs	r1, #32
 8001910:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2242      	movs	r2, #66	; 0x42
 8001916:	2100      	movs	r1, #0
 8001918:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e007      	b.n	8001936 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2220      	movs	r2, #32
 800192e:	4013      	ands	r3, r2
 8001930:	2b20      	cmp	r3, #32
 8001932:	d1c8      	bne.n	80018c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800194c:	e06b      	b.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f875 	bl	8001a44 <I2C_IsErrorOccurred>
 800195a:	1e03      	subs	r3, r0, #0
 800195c:	d001      	beq.n	8001962 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e069      	b.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2220      	movs	r2, #32
 800196a:	4013      	ands	r3, r2
 800196c:	2b20      	cmp	r3, #32
 800196e:	d138      	bne.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2204      	movs	r2, #4
 8001978:	4013      	ands	r3, r2
 800197a:	2b04      	cmp	r3, #4
 800197c:	d105      	bne.n	800198a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e055      	b.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2210      	movs	r2, #16
 8001992:	4013      	ands	r3, r2
 8001994:	2b10      	cmp	r3, #16
 8001996:	d107      	bne.n	80019a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2210      	movs	r2, #16
 800199e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2204      	movs	r2, #4
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
 80019a6:	e002      	b.n	80019ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2220      	movs	r2, #32
 80019b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	491f      	ldr	r1, [pc, #124]	; (8001a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	2120      	movs	r1, #32
 80019cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2242      	movs	r2, #66	; 0x42
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	2100      	movs	r1, #0
 80019dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e029      	b.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e2:	f7ff fae1 	bl	8000fa8 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d302      	bcc.n	80019f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d116      	bne.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2204      	movs	r2, #4
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d00f      	beq.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	2120      	movs	r1, #32
 8001a18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e007      	b.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d18c      	bne.n	800194e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	fe00e800 	.word	0xfe00e800

08001a44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2327      	movs	r3, #39	; 0x27
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <I2C_IsErrorOccurred+0x2e>
 8001a70:	e082      	b.n	8001b78 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2210      	movs	r2, #16
 8001a78:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a7a:	e060      	b.n	8001b3e <I2C_IsErrorOccurred+0xfa>
 8001a7c:	2427      	movs	r4, #39	; 0x27
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	193a      	adds	r2, r7, r4
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	d058      	beq.n	8001b3e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a8c:	f7ff fa8c 	bl	8000fa8 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d306      	bcc.n	8001aaa <I2C_IsErrorOccurred+0x66>
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	193a      	adds	r2, r7, r4
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d149      	bne.n	8001b3e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ab8:	2013      	movs	r0, #19
 8001aba:	183b      	adds	r3, r7, r0
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	2142      	movs	r1, #66	; 0x42
 8001ac0:	5c52      	ldrb	r2, [r2, r1]
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	401a      	ands	r2, r3
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d126      	bne.n	8001b26 <I2C_IsErrorOccurred+0xe2>
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	01db      	lsls	r3, r3, #7
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d021      	beq.n	8001b26 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d01d      	beq.n	8001b26 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	01c9      	lsls	r1, r1, #7
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001afc:	f7ff fa54 	bl	8000fa8 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b04:	e00f      	b.n	8001b26 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b06:	f7ff fa4f 	bl	8000fa8 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b19      	cmp	r3, #25
 8001b12:	d908      	bls.n	8001b26 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	2220      	movs	r2, #32
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b1c:	2327      	movs	r3, #39	; 0x27
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]

              break;
 8001b24:	e00b      	b.n	8001b3e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2127      	movs	r1, #39	; 0x27
 8001b32:	187a      	adds	r2, r7, r1
 8001b34:	1879      	adds	r1, r7, r1
 8001b36:	7809      	ldrb	r1, [r1, #0]
 8001b38:	7011      	strb	r1, [r2, #0]
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d1e3      	bne.n	8001b06 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2220      	movs	r2, #32
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d004      	beq.n	8001b56 <I2C_IsErrorOccurred+0x112>
 8001b4c:	2327      	movs	r3, #39	; 0x27
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d092      	beq.n	8001a7c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b56:	2327      	movs	r3, #39	; 0x27
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2220      	movs	r2, #32
 8001b66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b70:	2327      	movs	r3, #39	; 0x27
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	d00c      	beq.n	8001ba4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0052      	lsls	r2, r2, #1
 8001b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b9c:	2327      	movs	r3, #39	; 0x27
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4013      	ands	r3, r2
 8001bac:	d00c      	beq.n	8001bc8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	00d2      	lsls	r2, r2, #3
 8001bbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bc0:	2327      	movs	r3, #39	; 0x27
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d00c      	beq.n	8001bec <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001be4:	2327      	movs	r3, #39	; 0x27
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001bec:	2327      	movs	r3, #39	; 0x27
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01d      	beq.n	8001c32 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fded 	bl	80017d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	490d      	ldr	r1, [pc, #52]	; (8001c40 <I2C_IsErrorOccurred+0x1fc>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2241      	movs	r2, #65	; 0x41
 8001c1e:	2120      	movs	r1, #32
 8001c20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2242      	movs	r2, #66	; 0x42
 8001c26:	2100      	movs	r1, #0
 8001c28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001c32:	2327      	movs	r3, #39	; 0x27
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	781b      	ldrb	r3, [r3, #0]
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b00b      	add	sp, #44	; 0x2c
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	fe00e800 	.word	0xfe00e800

08001c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	0008      	movs	r0, r1
 8001c4e:	0011      	movs	r1, r2
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	240a      	movs	r4, #10
 8001c54:	193b      	adds	r3, r7, r4
 8001c56:	1c02      	adds	r2, r0, #0
 8001c58:	801a      	strh	r2, [r3, #0]
 8001c5a:	2009      	movs	r0, #9
 8001c5c:	183b      	adds	r3, r7, r0
 8001c5e:	1c0a      	adds	r2, r1, #0
 8001c60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c62:	193b      	adds	r3, r7, r4
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	059b      	lsls	r3, r3, #22
 8001c68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0419      	lsls	r1, r3, #16
 8001c70:	23ff      	movs	r3, #255	; 0xff
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c8e:	0d51      	lsrs	r1, r2, #21
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	00d2      	lsls	r2, r2, #3
 8001c94:	400a      	ands	r2, r1
 8001c96:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <I2C_TransferConfig+0x70>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b007      	add	sp, #28
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	03ff63ff 	.word	0x03ff63ff

08001cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2241      	movs	r2, #65	; 0x41
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d138      	bne.n	8001d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2240      	movs	r2, #64	; 0x40
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e032      	b.n	8001d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2241      	movs	r2, #65	; 0x41
 8001ce8:	2124      	movs	r1, #36	; 0x24
 8001cea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4911      	ldr	r1, [pc, #68]	; (8001d4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2241      	movs	r2, #65	; 0x41
 8001d30:	2120      	movs	r1, #32
 8001d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	ffffefff 	.word	0xffffefff

08001d50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2241      	movs	r2, #65	; 0x41
 8001d5e:	5c9b      	ldrb	r3, [r3, r2]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d139      	bne.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e033      	b.n	8001ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	2101      	movs	r1, #1
 8001d7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2241      	movs	r2, #65	; 0x41
 8001d80:	2124      	movs	r1, #36	; 0x24
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2241      	movs	r2, #65	; 0x41
 8001dca:	2120      	movs	r1, #32
 8001dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
  }
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	fffff0ff 	.word	0xfffff0ff

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e301      	b.n	80023fe <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d100      	bne.n	8001e06 <HAL_RCC_OscConfig+0x1e>
 8001e04:	e08d      	b.n	8001f22 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e06:	4bc3      	ldr	r3, [pc, #780]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d00e      	beq.n	8001e30 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e12:	4bc0      	ldr	r3, [pc, #768]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	220c      	movs	r2, #12
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x64>
 8001e1e:	4bbd      	ldr	r3, [pc, #756]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	401a      	ands	r2, r3
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	4bb8      	ldr	r3, [pc, #736]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCC_OscConfig+0x56>
 8001e3c:	e070      	b.n	8001f20 <HAL_RCC_OscConfig+0x138>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d000      	beq.n	8001e48 <HAL_RCC_OscConfig+0x60>
 8001e46:	e06b      	b.n	8001f20 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e2d8      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0x7c>
 8001e54:	4baf      	ldr	r3, [pc, #700]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4bae      	ldr	r3, [pc, #696]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	0249      	lsls	r1, r1, #9
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e02f      	b.n	8001ec4 <HAL_RCC_OscConfig+0xdc>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x9e>
 8001e6c:	4ba9      	ldr	r3, [pc, #676]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4ba8      	ldr	r3, [pc, #672]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e72:	49a9      	ldr	r1, [pc, #676]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4ba6      	ldr	r3, [pc, #664]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4ba5      	ldr	r3, [pc, #660]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	49a7      	ldr	r1, [pc, #668]	; (800211c <HAL_RCC_OscConfig+0x334>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e01e      	b.n	8001ec4 <HAL_RCC_OscConfig+0xdc>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10e      	bne.n	8001eac <HAL_RCC_OscConfig+0xc4>
 8001e8e:	4ba1      	ldr	r3, [pc, #644]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4ba0      	ldr	r3, [pc, #640]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	02c9      	lsls	r1, r1, #11
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	4b9d      	ldr	r3, [pc, #628]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b9c      	ldr	r3, [pc, #624]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	0249      	lsls	r1, r1, #9
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xdc>
 8001eac:	4b99      	ldr	r3, [pc, #612]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b98      	ldr	r3, [pc, #608]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	4999      	ldr	r1, [pc, #612]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	4b96      	ldr	r3, [pc, #600]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b95      	ldr	r3, [pc, #596]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001ebe:	4997      	ldr	r1, [pc, #604]	; (800211c <HAL_RCC_OscConfig+0x334>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f86c 	bl	8000fa8 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f867 	bl	8000fa8 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e28a      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	4b8a      	ldr	r3, [pc, #552]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xee>
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f857 	bl	8000fa8 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff f852 	bl	8000fa8 <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e275      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x118>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x146>
 8001f2c:	e069      	b.n	8002002 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f2e:	4b79      	ldr	r3, [pc, #484]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	220c      	movs	r2, #12
 8001f34:	4013      	ands	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f38:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d11c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x196>
 8001f44:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d116      	bne.n	8001f7e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f50:	4b70      	ldr	r3, [pc, #448]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e24b      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	22f8      	movs	r2, #248	; 0xf8
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00da      	lsls	r2, r3, #3
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7c:	e041      	b.n	8002002 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d024      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b62      	ldr	r3, [pc, #392]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff f809 	bl	8000fa8 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f804 	bl	8000fa8 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e227      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d0f1      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	22f8      	movs	r2, #248	; 0xf8
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00da      	lsls	r2, r3, #3
 8001fc8:	4b52      	ldr	r3, [pc, #328]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ffe4 	bl	8000fa8 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ffdf 	bl	8000fa8 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e202      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2208      	movs	r2, #8
 8002008:	4013      	ands	r3, r2
 800200a:	d036      	beq.n	800207a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8002016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe ffc2 	bl	8000fa8 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202a:	f7fe ffbd 	bl	8000fa8 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1e0      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2202      	movs	r2, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d0f1      	beq.n	800202a <HAL_RCC_OscConfig+0x242>
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 800204a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe ffa8 	bl	8000fa8 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205e:	f7fe ffa3 	bl	8000fa8 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1c6      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d1f1      	bne.n	800205e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2204      	movs	r2, #4
 8002080:	4013      	ands	r3, r2
 8002082:	d100      	bne.n	8002086 <HAL_RCC_OscConfig+0x29e>
 8002084:	e0b4      	b.n	80021f0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	201f      	movs	r0, #31
 8002088:	183b      	adds	r3, r7, r0
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	055b      	lsls	r3, r3, #21
 8002096:	4013      	ands	r3, r2
 8002098:	d110      	bne.n	80020bc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0549      	lsls	r1, r1, #21
 80020a4:	430a      	orrs	r2, r1
 80020a6:	61da      	str	r2, [r3, #28]
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	055b      	lsls	r3, r3, #21
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020b6:	183b      	adds	r3, r7, r0
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_RCC_OscConfig+0x338>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d11a      	bne.n	80020fe <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x338>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCC_OscConfig+0x338>)
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	0049      	lsls	r1, r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe ff67 	bl	8000fa8 <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe ff62 	bl	8000fa8 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e185      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x338>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_RCC_OscConfig+0x33c>
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_RCC_OscConfig+0x32c>)
 800210c:	2101      	movs	r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	621a      	str	r2, [r3, #32]
 8002112:	e035      	b.n	8002180 <HAL_RCC_OscConfig+0x398>
 8002114:	40021000 	.word	0x40021000
 8002118:	fffeffff 	.word	0xfffeffff
 800211c:	fffbffff 	.word	0xfffbffff
 8002120:	40007000 	.word	0x40007000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_OscConfig+0x35e>
 800212c:	4bb6      	ldr	r3, [pc, #728]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	4bb5      	ldr	r3, [pc, #724]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002132:	2101      	movs	r1, #1
 8002134:	438a      	bics	r2, r1
 8002136:	621a      	str	r2, [r3, #32]
 8002138:	4bb3      	ldr	r3, [pc, #716]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	4bb2      	ldr	r3, [pc, #712]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800213e:	2104      	movs	r1, #4
 8002140:	438a      	bics	r2, r1
 8002142:	621a      	str	r2, [r3, #32]
 8002144:	e01c      	b.n	8002180 <HAL_RCC_OscConfig+0x398>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x380>
 800214e:	4bae      	ldr	r3, [pc, #696]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	4bad      	ldr	r3, [pc, #692]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002154:	2104      	movs	r1, #4
 8002156:	430a      	orrs	r2, r1
 8002158:	621a      	str	r2, [r3, #32]
 800215a:	4bab      	ldr	r3, [pc, #684]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	4baa      	ldr	r3, [pc, #680]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002160:	2101      	movs	r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	621a      	str	r2, [r3, #32]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0x398>
 8002168:	4ba7      	ldr	r3, [pc, #668]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	4ba6      	ldr	r3, [pc, #664]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800216e:	2101      	movs	r1, #1
 8002170:	438a      	bics	r2, r1
 8002172:	621a      	str	r2, [r3, #32]
 8002174:	4ba4      	ldr	r3, [pc, #656]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	4ba3      	ldr	r3, [pc, #652]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800217a:	2104      	movs	r1, #4
 800217c:	438a      	bics	r2, r1
 800217e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d014      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7fe ff0e 	bl	8000fa8 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e009      	b.n	80021a6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe ff09 	bl	8000fa8 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a9b      	ldr	r2, [pc, #620]	; (800240c <HAL_RCC_OscConfig+0x624>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e12b      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	4b98      	ldr	r3, [pc, #608]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x3aa>
 80021b0:	e013      	b.n	80021da <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fef9 	bl	8000fa8 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	e009      	b.n	80021d0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fef4 	bl	8000fa8 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	4a91      	ldr	r2, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x624>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e116      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021da:	231f      	movs	r3, #31
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b88      	ldr	r3, [pc, #544]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	4b87      	ldr	r3, [pc, #540]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80021ea:	4989      	ldr	r1, [pc, #548]	; (8002410 <HAL_RCC_OscConfig+0x628>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	4013      	ands	r3, r2
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d12a      	bne.n	8002258 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002202:	4b81      	ldr	r3, [pc, #516]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002206:	4b80      	ldr	r3, [pc, #512]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002208:	2104      	movs	r1, #4
 800220a:	430a      	orrs	r2, r1
 800220c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800220e:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	4b7d      	ldr	r3, [pc, #500]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002214:	2101      	movs	r1, #1
 8002216:	430a      	orrs	r2, r1
 8002218:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7fe fec5 	bl	8000fa8 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002224:	f7fe fec0 	bl	8000fa8 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0e3      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002236:	4b74      	ldr	r3, [pc, #464]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d0f1      	beq.n	8002224 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002240:	4b71      	ldr	r3, [pc, #452]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	22f8      	movs	r2, #248	; 0xf8
 8002246:	4393      	bics	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	00da      	lsls	r2, r3, #3
 8002250:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002252:	430a      	orrs	r2, r1
 8002254:	635a      	str	r2, [r3, #52]	; 0x34
 8002256:	e034      	b.n	80022c2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	3305      	adds	r3, #5
 800225e:	d111      	bne.n	8002284 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002260:	4b69      	ldr	r3, [pc, #420]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002266:	2104      	movs	r1, #4
 8002268:	438a      	bics	r2, r1
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	22f8      	movs	r2, #248	; 0xf8
 8002272:	4393      	bics	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	00da      	lsls	r2, r3, #3
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800227e:	430a      	orrs	r2, r1
 8002280:	635a      	str	r2, [r3, #52]	; 0x34
 8002282:	e01e      	b.n	80022c2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002284:	4b60      	ldr	r3, [pc, #384]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002288:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800228a:	2104      	movs	r1, #4
 800228c:	430a      	orrs	r2, r1
 800228e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002290:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002296:	2101      	movs	r1, #1
 8002298:	438a      	bics	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fe84 	bl	8000fa8 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022a6:	f7fe fe7f 	bl	8000fa8 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0a2      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022b8:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d1f1      	bne.n	80022a6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d100      	bne.n	80022cc <HAL_RCC_OscConfig+0x4e4>
 80022ca:	e097      	b.n	80023fc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	220c      	movs	r2, #12
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d100      	bne.n	80022da <HAL_RCC_OscConfig+0x4f2>
 80022d8:	e06b      	b.n	80023b2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d14c      	bne.n	800237c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b48      	ldr	r3, [pc, #288]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80022e8:	494a      	ldr	r1, [pc, #296]	; (8002414 <HAL_RCC_OscConfig+0x62c>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fe5b 	bl	8000fa8 <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fe56 	bl	8000fa8 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e079      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	4013      	ands	r3, r2
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	220f      	movs	r2, #15
 800231c:	4393      	bics	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
 800232a:	4b37      	ldr	r3, [pc, #220]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a3a      	ldr	r2, [pc, #232]	; (8002418 <HAL_RCC_OscConfig+0x630>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	431a      	orrs	r2, r3
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0449      	lsls	r1, r1, #17
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fe29 	bl	8000fa8 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fe24 	bl	8000fa8 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e047      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	049b      	lsls	r3, r3, #18
 8002376:	4013      	ands	r3, r2
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x574>
 800237a:	e03f      	b.n	80023fc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 8002382:	4924      	ldr	r1, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x62c>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7fe fe0e 	bl	8000fa8 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fe09 	bl	8000fa8 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e02c      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	049b      	lsls	r3, r3, #18
 80023ac:	4013      	ands	r3, r2
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x5aa>
 80023b0:	e024      	b.n	80023fc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e01f      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x620>)
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	025b      	lsls	r3, r3, #9
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d10e      	bne.n	80023f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	220f      	movs	r2, #15
 80023de:	401a      	ands	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	23f0      	movs	r3, #240	; 0xf0
 80023ec:	039b      	lsls	r3, r3, #14
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b008      	add	sp, #32
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000
 800240c:	00001388 	.word	0x00001388
 8002410:	efffffff 	.word	0xefffffff
 8002414:	feffffff 	.word	0xfeffffff
 8002418:	ffc2ffff 	.word	0xffc2ffff

0800241c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0b3      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d911      	bls.n	8002462 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4393      	bics	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e09a      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d015      	beq.n	8002498 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2204      	movs	r2, #4
 8002472:	4013      	ands	r3, r2
 8002474:	d006      	beq.n	8002484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002476:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 800247c:	21e0      	movs	r1, #224	; 0xe0
 800247e:	00c9      	lsls	r1, r1, #3
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	22f0      	movs	r2, #240	; 0xf0
 800248a:	4393      	bics	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	d040      	beq.n	8002524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	029b      	lsls	r3, r3, #10
 80024b2:	4013      	ands	r3, r2
 80024b4:	d114      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06e      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	049b      	lsls	r3, r3, #18
 80024ca:	4013      	ands	r3, r2
 80024cc:	d108      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e062      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e05b      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e0:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	4393      	bics	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fd58 	bl	8000fa8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fc:	e009      	b.n	8002512 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fe:	f7fe fd53 	bl	8000fa8 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <HAL_RCC_ClockConfig+0x18c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e042      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	220c      	movs	r2, #12
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1ec      	bne.n	80024fe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	4013      	ands	r3, r2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d211      	bcs.n	8002556 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4393      	bics	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x184>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e020      	b.n	8002598 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2204      	movs	r2, #4
 800255c:	4013      	ands	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_RCC_ClockConfig+0x190>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002574:	f000 f820 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002578:	0001      	movs	r1, r0
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x188>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	220f      	movs	r2, #15
 8002582:	4013      	ands	r3, r2
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x194>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	000a      	movs	r2, r1
 800258a:	40da      	lsrs	r2, r3
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x198>)
 800258e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002590:	2000      	movs	r0, #0
 8002592:	f7fe fcc3 	bl	8000f1c <HAL_InitTick>
  
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	00001388 	.word	0x00001388
 80025ac:	fffff8ff 	.word	0xfffff8ff
 80025b0:	08003a98 	.word	0x08003a98
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	220c      	movs	r2, #12
 80025dc:	4013      	ands	r3, r2
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x30>
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x36>
 80025e6:	e02c      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ea:	613b      	str	r3, [r7, #16]
      break;
 80025ec:	e02c      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	220f      	movs	r2, #15
 80025f4:	4013      	ands	r3, r2
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	220f      	movs	r2, #15
 8002602:	4013      	ands	r3, r2
 8002604:	4a16      	ldr	r2, [pc, #88]	; (8002660 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	4013      	ands	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4810      	ldr	r0, [pc, #64]	; (8002658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002618:	f7fd fd88 	bl	800012c <__udivsi3>
 800261c:	0003      	movs	r3, r0
 800261e:	001a      	movs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4353      	muls	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e009      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	000a      	movs	r2, r1
 800262c:	0152      	lsls	r2, r2, #5
 800262e:	1a52      	subs	r2, r2, r1
 8002630:	0193      	lsls	r3, r2, #6
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	185b      	adds	r3, r3, r1
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
      break;
 8002640:	e002      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002644:	613b      	str	r3, [r7, #16]
      break;
 8002646:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002648:	693b      	ldr	r3, [r7, #16]
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b006      	add	sp, #24
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	007a1200 	.word	0x007a1200
 800265c:	08003ab0 	.word	0x08003ab0
 8002660:	08003ac0 	.word	0x08003ac0

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <HAL_RCC_GetHCLKFreq+0x10>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20000000 	.word	0x20000000

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800267c:	f7ff fff2 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002680:	0001      	movs	r1, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	2207      	movs	r2, #7
 800268a:	4013      	ands	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	40d9      	lsrs	r1, r3
 8002692:	000b      	movs	r3, r1
}    
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	08003aa8 	.word	0x08003aa8

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	025b      	lsls	r3, r3, #9
 80026bc:	4013      	ands	r3, r2
 80026be:	d100      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026c0:	e08e      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2017      	movs	r0, #23
 80026c4:	183b      	adds	r3, r7, r0
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	4013      	ands	r3, r2
 80026d4:	d110      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0549      	lsls	r1, r1, #21
 80026e0:	430a      	orrs	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
 80026e4:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	055b      	lsls	r3, r3, #21
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d11a      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002704:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	0049      	lsls	r1, r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7fe fc49 	bl	8000fa8 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	e008      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7fe fc44 	bl	8000fa8 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e087      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d0f0      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	23c0      	movs	r3, #192	; 0xc0
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4013      	ands	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d034      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4013      	ands	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d02c      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800275c:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002766:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	4b37      	ldr	r3, [pc, #220]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0249      	lsls	r1, r1, #9
 8002770:	430a      	orrs	r2, r1
 8002772:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800277a:	4936      	ldr	r1, [pc, #216]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800277c:	400a      	ands	r2, r1
 800277e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002780:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe fc0b 	bl	8000fa8 <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	e009      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fc06 	bl	8000fa8 <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e048      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027da:	4920      	ldr	r1, [pc, #128]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027dc:	400a      	ands	r2, r1
 80027de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	2203      	movs	r2, #3
 80027f0:	4393      	bics	r3, r2
 80027f2:	0019      	movs	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027fa:	430a      	orrs	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2220      	movs	r2, #32
 8002804:	4013      	ands	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	2210      	movs	r2, #16
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002818:	430a      	orrs	r2, r1
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4013      	ands	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	4393      	bics	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002838:	430a      	orrs	r2, r1
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b006      	add	sp, #24
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
 8002850:	fffffcff 	.word	0xfffffcff
 8002854:	fffeffff 	.word	0xfffeffff
 8002858:	00001388 	.word	0x00001388
 800285c:	efffffff 	.word	0xefffffff

08002860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e044      	b.n	80028fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2278      	movs	r2, #120	; 0x78
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7fe fa69 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2224      	movs	r2, #36	; 0x24
 800288e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	438a      	bics	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f8d0 	bl	8002a48 <UART_SetConfig>
 80028a8:	0003      	movs	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e024      	b.n	80028fc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fa03 	bl	8002cc8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	490d      	ldr	r1, [pc, #52]	; (8002904 <HAL_UART_Init+0xa4>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	212a      	movs	r1, #42	; 0x2a
 80028de:	438a      	bics	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fa9b 	bl	8002e30 <UART_CheckIdleState>
 80028fa:	0003      	movs	r3, r0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	ffffb7ff 	.word	0xffffb7ff

08002908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	1dbb      	adds	r3, r7, #6
 8002916:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291c:	2b20      	cmp	r3, #32
 800291e:	d000      	beq.n	8002922 <HAL_UART_Transmit+0x1a>
 8002920:	e08d      	b.n	8002a3e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_UART_Transmit+0x28>
 8002928:	1dbb      	adds	r3, r7, #6
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e085      	b.n	8002a40 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	429a      	cmp	r2, r3
 800293e:	d109      	bne.n	8002954 <HAL_UART_Transmit+0x4c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2201      	movs	r2, #1
 800294c:	4013      	ands	r3, r2
 800294e:	d001      	beq.n	8002954 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e075      	b.n	8002a40 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2284      	movs	r2, #132	; 0x84
 8002958:	2100      	movs	r1, #0
 800295a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2221      	movs	r2, #33	; 0x21
 8002960:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002962:	f7fe fb21 	bl	8000fa8 <HAL_GetTick>
 8002966:	0003      	movs	r3, r0
 8002968:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1dba      	adds	r2, r7, #6
 800296e:	2150      	movs	r1, #80	; 0x50
 8002970:	8812      	ldrh	r2, [r2, #0]
 8002972:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1dba      	adds	r2, r7, #6
 8002978:	2152      	movs	r1, #82	; 0x52
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	015b      	lsls	r3, r3, #5
 8002986:	429a      	cmp	r2, r3
 8002988:	d108      	bne.n	800299c <HAL_UART_Transmit+0x94>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d104      	bne.n	800299c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e003      	b.n	80029a4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029a4:	e030      	b.n	8002a08 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	0013      	movs	r3, r2
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	f000 fae4 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e03c      	b.n	8002a40 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	881a      	ldrh	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	05d2      	lsls	r2, r2, #23
 80029d6:	0dd2      	lsrs	r2, r2, #23
 80029d8:	b292      	uxth	r2, r2
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	3302      	adds	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e008      	b.n	80029f6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b292      	uxth	r2, r2
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2252      	movs	r2, #82	; 0x52
 80029fa:	5a9b      	ldrh	r3, [r3, r2]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b299      	uxth	r1, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2252      	movs	r2, #82	; 0x52
 8002a06:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2252      	movs	r2, #82	; 0x52
 8002a0c:	5a9b      	ldrh	r3, [r3, r2]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1c8      	bne.n	80029a6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2140      	movs	r1, #64	; 0x40
 8002a22:	f000 faad 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e005      	b.n	8002a40 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
  }
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b008      	add	sp, #32
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a50:	231e      	movs	r3, #30
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a8d      	ldr	r2, [pc, #564]	; (8002cac <UART_SetConfig+0x264>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a88      	ldr	r2, [pc, #544]	; (8002cb0 <UART_SetConfig+0x268>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a7f      	ldr	r2, [pc, #508]	; (8002cb4 <UART_SetConfig+0x26c>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7b      	ldr	r2, [pc, #492]	; (8002cb8 <UART_SetConfig+0x270>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d127      	bne.n	8002b1e <UART_SetConfig+0xd6>
 8002ace:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <UART_SetConfig+0x274>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d00d      	beq.n	8002af6 <UART_SetConfig+0xae>
 8002ada:	d81b      	bhi.n	8002b14 <UART_SetConfig+0xcc>
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d014      	beq.n	8002b0a <UART_SetConfig+0xc2>
 8002ae0:	d818      	bhi.n	8002b14 <UART_SetConfig+0xcc>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <UART_SetConfig+0xa4>
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d00a      	beq.n	8002b00 <UART_SetConfig+0xb8>
 8002aea:	e013      	b.n	8002b14 <UART_SetConfig+0xcc>
 8002aec:	231f      	movs	r3, #31
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e021      	b.n	8002b3a <UART_SetConfig+0xf2>
 8002af6:	231f      	movs	r3, #31
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e01c      	b.n	8002b3a <UART_SetConfig+0xf2>
 8002b00:	231f      	movs	r3, #31
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2204      	movs	r2, #4
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e017      	b.n	8002b3a <UART_SetConfig+0xf2>
 8002b0a:	231f      	movs	r3, #31
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2208      	movs	r2, #8
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e012      	b.n	8002b3a <UART_SetConfig+0xf2>
 8002b14:	231f      	movs	r3, #31
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2210      	movs	r2, #16
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e00d      	b.n	8002b3a <UART_SetConfig+0xf2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <UART_SetConfig+0x278>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d104      	bne.n	8002b32 <UART_SetConfig+0xea>
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e003      	b.n	8002b3a <UART_SetConfig+0xf2>
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2210      	movs	r2, #16
 8002b38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d15c      	bne.n	8002c00 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d015      	beq.n	8002b7c <UART_SetConfig+0x134>
 8002b50:	dc18      	bgt.n	8002b84 <UART_SetConfig+0x13c>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d00d      	beq.n	8002b72 <UART_SetConfig+0x12a>
 8002b56:	dc15      	bgt.n	8002b84 <UART_SetConfig+0x13c>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <UART_SetConfig+0x11a>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d005      	beq.n	8002b6c <UART_SetConfig+0x124>
 8002b60:	e010      	b.n	8002b84 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b62:	f7ff fd89 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
        break;
 8002b6a:	e012      	b.n	8002b92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b6c:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <UART_SetConfig+0x27c>)
 8002b6e:	61bb      	str	r3, [r7, #24]
        break;
 8002b70:	e00f      	b.n	8002b92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b72:	f7ff fd21 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002b76:	0003      	movs	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
        break;
 8002b7a:	e00a      	b.n	8002b92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	61bb      	str	r3, [r7, #24]
        break;
 8002b82:	e006      	b.n	8002b92 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b88:	231e      	movs	r3, #30
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
        break;
 8002b90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <UART_SetConfig+0x152>
 8002b98:	e07a      	b.n	8002c90 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	005a      	lsls	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	18d2      	adds	r2, r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f7fd fabd 	bl	800012c <__udivsi3>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d91c      	bls.n	8002bf6 <UART_SetConfig+0x1ae>
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	025b      	lsls	r3, r3, #9
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d217      	bcs.n	8002bf6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	200e      	movs	r0, #14
 8002bcc:	183b      	adds	r3, r7, r0
 8002bce:	210f      	movs	r1, #15
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2207      	movs	r2, #7
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b299      	uxth	r1, r3
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	183a      	adds	r2, r7, r0
 8002be4:	8812      	ldrh	r2, [r2, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	183a      	adds	r2, r7, r0
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	e04c      	b.n	8002c90 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf6:	231e      	movs	r3, #30
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e047      	b.n	8002c90 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c00:	231f      	movs	r3, #31
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d015      	beq.n	8002c36 <UART_SetConfig+0x1ee>
 8002c0a:	dc18      	bgt.n	8002c3e <UART_SetConfig+0x1f6>
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d00d      	beq.n	8002c2c <UART_SetConfig+0x1e4>
 8002c10:	dc15      	bgt.n	8002c3e <UART_SetConfig+0x1f6>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <UART_SetConfig+0x1d4>
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d005      	beq.n	8002c26 <UART_SetConfig+0x1de>
 8002c1a:	e010      	b.n	8002c3e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f7ff fd2c 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8002c20:	0003      	movs	r3, r0
 8002c22:	61bb      	str	r3, [r7, #24]
        break;
 8002c24:	e012      	b.n	8002c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c26:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <UART_SetConfig+0x27c>)
 8002c28:	61bb      	str	r3, [r7, #24]
        break;
 8002c2a:	e00f      	b.n	8002c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2c:	f7ff fcc4 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
        break;
 8002c34:	e00a      	b.n	8002c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	61bb      	str	r3, [r7, #24]
        break;
 8002c3c:	e006      	b.n	8002c4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c42:	231e      	movs	r3, #30
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
        break;
 8002c4a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01e      	beq.n	8002c90 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	085a      	lsrs	r2, r3, #1
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	18d2      	adds	r2, r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0019      	movs	r1, r3
 8002c62:	0010      	movs	r0, r2
 8002c64:	f7fd fa62 	bl	800012c <__udivsi3>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	d90a      	bls.n	8002c88 <UART_SetConfig+0x240>
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	025b      	lsls	r3, r3, #9
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d205      	bcs.n	8002c88 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	e003      	b.n	8002c90 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002c88:	231e      	movs	r3, #30
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c9c:	231e      	movs	r3, #30
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b008      	add	sp, #32
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	ffff69f3 	.word	0xffff69f3
 8002cb0:	ffffcfff 	.word	0xffffcfff
 8002cb4:	fffff4ff 	.word	0xfffff4ff
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40004400 	.word	0x40004400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <UART_AdvFeatureConfig+0x144>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <UART_AdvFeatureConfig+0x148>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2204      	movs	r2, #4
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <UART_AdvFeatureConfig+0x14c>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <UART_AdvFeatureConfig+0x150>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <UART_AdvFeatureConfig+0x154>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2220      	movs	r2, #32
 8002d80:	4013      	ands	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <UART_AdvFeatureConfig+0x158>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	4013      	ands	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <UART_AdvFeatureConfig+0x15c>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	035b      	lsls	r3, r3, #13
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10b      	bne.n	8002de2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <UART_AdvFeatureConfig+0x160>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	4013      	ands	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <UART_AdvFeatureConfig+0x164>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	fffdffff 	.word	0xfffdffff
 8002e10:	fffeffff 	.word	0xfffeffff
 8002e14:	fffbffff 	.word	0xfffbffff
 8002e18:	ffff7fff 	.word	0xffff7fff
 8002e1c:	ffffefff 	.word	0xffffefff
 8002e20:	ffffdfff 	.word	0xffffdfff
 8002e24:	ffefffff 	.word	0xffefffff
 8002e28:	ff9fffff 	.word	0xff9fffff
 8002e2c:	fff7ffff 	.word	0xfff7ffff

08002e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b092      	sub	sp, #72	; 0x48
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2284      	movs	r2, #132	; 0x84
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e40:	f7fe f8b2 	bl	8000fa8 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d12c      	bne.n	8002eb0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	0391      	lsls	r1, r2, #14
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <UART_CheckIdleState+0x148>)
 8002e60:	9200      	str	r2, [sp, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f000 f88c 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d021      	beq.n	8002eb0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e76:	2301      	movs	r3, #1
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	438a      	bics	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2278      	movs	r2, #120	; 0x78
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e05f      	b.n	8002f70 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d146      	bne.n	8002f4c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	03d1      	lsls	r1, r2, #15
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <UART_CheckIdleState+0x148>)
 8002ec8:	9200      	str	r2, [sp, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f000 f858 	bl	8002f80 <UART_WaitOnFlagUntilTimeout>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d03b      	beq.n	8002f4c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eda:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ede:	2301      	movs	r3, #1
 8002ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4921      	ldr	r1, [pc, #132]	; (8002f7c <UART_CheckIdleState+0x14c>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f06:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f10:	2301      	movs	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f383 8810 	msr	PRIMASK, r3
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2101      	movs	r1, #1
 8002f28:	438a      	bics	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2278      	movs	r2, #120	; 0x78
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e011      	b.n	8002f70 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	2120      	movs	r1, #32
 8002f58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2278      	movs	r2, #120	; 0x78
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b010      	add	sp, #64	; 0x40
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	01ffffff 	.word	0x01ffffff
 8002f7c:	fffffedf 	.word	0xfffffedf

08002f80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f90:	e04b      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	3301      	adds	r3, #1
 8002f96:	d048      	beq.n	800302a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7fe f806 	bl	8000fa8 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e04b      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d035      	beq.n	800302a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d111      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f83c 	bl	8003054 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2284      	movs	r2, #132	; 0x84
 8002fe0:	2108      	movs	r1, #8
 8002fe2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2278      	movs	r2, #120	; 0x78
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e02c      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	429a      	cmp	r2, r3
 8003002:	d112      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 f81f 	bl	8003054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2284      	movs	r2, #132	; 0x84
 800301a:	2120      	movs	r1, #32
 800301c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2278      	movs	r2, #120	; 0x78
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e00f      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	425a      	negs	r2, r3
 800303a:	4153      	adcs	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	001a      	movs	r2, r3
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d0a4      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b004      	add	sp, #16
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8310 	mrs	r3, PRIMASK
 8003060:	617b      	str	r3, [r7, #20]
  return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4926      	ldr	r1, [pc, #152]	; (8003118 <UART_EndRxTransfer+0xc4>)
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308e:	f3ef 8310 	mrs	r3, PRIMASK
 8003092:	623b      	str	r3, [r7, #32]
  return(result);
 8003094:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
 8003098:	2301      	movs	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f383 8810 	msr	PRIMASK, r3
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d118      	bne.n	80030fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c8:	f3ef 8310 	mrs	r3, PRIMASK
 80030cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80030ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	2301      	movs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2110      	movs	r1, #16
 80030ea:	438a      	bics	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f383 8810 	msr	PRIMASK, r3
}
 80030f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	2120      	movs	r1, #32
 8003100:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b00e      	add	sp, #56	; 0x38
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	fffffedf 	.word	0xfffffedf

0800311c <siprintf>:
 800311c:	b40e      	push	{r1, r2, r3}
 800311e:	b500      	push	{lr}
 8003120:	490b      	ldr	r1, [pc, #44]	; (8003150 <siprintf+0x34>)
 8003122:	b09c      	sub	sp, #112	; 0x70
 8003124:	ab1d      	add	r3, sp, #116	; 0x74
 8003126:	9002      	str	r0, [sp, #8]
 8003128:	9006      	str	r0, [sp, #24]
 800312a:	9107      	str	r1, [sp, #28]
 800312c:	9104      	str	r1, [sp, #16]
 800312e:	4809      	ldr	r0, [pc, #36]	; (8003154 <siprintf+0x38>)
 8003130:	4909      	ldr	r1, [pc, #36]	; (8003158 <siprintf+0x3c>)
 8003132:	cb04      	ldmia	r3!, {r2}
 8003134:	9105      	str	r1, [sp, #20]
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	a902      	add	r1, sp, #8
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	f000 f9a2 	bl	8003484 <_svfiprintf_r>
 8003140:	2200      	movs	r2, #0
 8003142:	9b02      	ldr	r3, [sp, #8]
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	b01c      	add	sp, #112	; 0x70
 8003148:	bc08      	pop	{r3}
 800314a:	b003      	add	sp, #12
 800314c:	4718      	bx	r3
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	7fffffff 	.word	0x7fffffff
 8003154:	20000058 	.word	0x20000058
 8003158:	ffff0208 	.word	0xffff0208

0800315c <memset>:
 800315c:	0003      	movs	r3, r0
 800315e:	1882      	adds	r2, r0, r2
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	7019      	strb	r1, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <__errno>:
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <__errno+0x8>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	4770      	bx	lr
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	20000058 	.word	0x20000058

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	2600      	movs	r6, #0
 800317c:	4c0c      	ldr	r4, [pc, #48]	; (80031b0 <__libc_init_array+0x38>)
 800317e:	4d0d      	ldr	r5, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 8003180:	1b64      	subs	r4, r4, r5
 8003182:	10a4      	asrs	r4, r4, #2
 8003184:	42a6      	cmp	r6, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	2600      	movs	r6, #0
 800318a:	f000 fc6d 	bl	8003a68 <_init>
 800318e:	4c0a      	ldr	r4, [pc, #40]	; (80031b8 <__libc_init_array+0x40>)
 8003190:	4d0a      	ldr	r5, [pc, #40]	; (80031bc <__libc_init_array+0x44>)
 8003192:	1b64      	subs	r4, r4, r5
 8003194:	10a4      	asrs	r4, r4, #2
 8003196:	42a6      	cmp	r6, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	00b3      	lsls	r3, r6, #2
 800319e:	58eb      	ldr	r3, [r5, r3]
 80031a0:	4798      	blx	r3
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	00b3      	lsls	r3, r6, #2
 80031a8:	58eb      	ldr	r3, [r5, r3]
 80031aa:	4798      	blx	r3
 80031ac:	3601      	adds	r6, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003b04 	.word	0x08003b04
 80031b4:	08003b04 	.word	0x08003b04
 80031b8:	08003b08 	.word	0x08003b08
 80031bc:	08003b04 	.word	0x08003b04

080031c0 <__retarget_lock_acquire_recursive>:
 80031c0:	4770      	bx	lr

080031c2 <__retarget_lock_release_recursive>:
 80031c2:	4770      	bx	lr

080031c4 <_free_r>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	0005      	movs	r5, r0
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d010      	beq.n	80031ee <_free_r+0x2a>
 80031cc:	1f0c      	subs	r4, r1, #4
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da00      	bge.n	80031d6 <_free_r+0x12>
 80031d4:	18e4      	adds	r4, r4, r3
 80031d6:	0028      	movs	r0, r5
 80031d8:	f000 f8e2 	bl	80033a0 <__malloc_lock>
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <_free_r+0x90>)
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <_free_r+0x2c>
 80031e4:	6063      	str	r3, [r4, #4]
 80031e6:	6014      	str	r4, [r2, #0]
 80031e8:	0028      	movs	r0, r5
 80031ea:	f000 f8e1 	bl	80033b0 <__malloc_unlock>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	d908      	bls.n	8003206 <_free_r+0x42>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	1821      	adds	r1, r4, r0
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d1f3      	bne.n	80031e4 <_free_r+0x20>
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	1809      	adds	r1, r1, r0
 8003202:	6021      	str	r1, [r4, #0]
 8003204:	e7ee      	b.n	80031e4 <_free_r+0x20>
 8003206:	001a      	movs	r2, r3
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <_free_r+0x4e>
 800320e:	42a3      	cmp	r3, r4
 8003210:	d9f9      	bls.n	8003206 <_free_r+0x42>
 8003212:	6811      	ldr	r1, [r2, #0]
 8003214:	1850      	adds	r0, r2, r1
 8003216:	42a0      	cmp	r0, r4
 8003218:	d10b      	bne.n	8003232 <_free_r+0x6e>
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	1809      	adds	r1, r1, r0
 800321e:	1850      	adds	r0, r2, r1
 8003220:	6011      	str	r1, [r2, #0]
 8003222:	4283      	cmp	r3, r0
 8003224:	d1e0      	bne.n	80031e8 <_free_r+0x24>
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	1841      	adds	r1, r0, r1
 800322c:	6011      	str	r1, [r2, #0]
 800322e:	6053      	str	r3, [r2, #4]
 8003230:	e7da      	b.n	80031e8 <_free_r+0x24>
 8003232:	42a0      	cmp	r0, r4
 8003234:	d902      	bls.n	800323c <_free_r+0x78>
 8003236:	230c      	movs	r3, #12
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	e7d5      	b.n	80031e8 <_free_r+0x24>
 800323c:	6820      	ldr	r0, [r4, #0]
 800323e:	1821      	adds	r1, r4, r0
 8003240:	428b      	cmp	r3, r1
 8003242:	d103      	bne.n	800324c <_free_r+0x88>
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	1809      	adds	r1, r1, r0
 800324a:	6021      	str	r1, [r4, #0]
 800324c:	6063      	str	r3, [r4, #4]
 800324e:	6054      	str	r4, [r2, #4]
 8003250:	e7ca      	b.n	80031e8 <_free_r+0x24>
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	2000029c 	.word	0x2000029c

08003258 <sbrk_aligned>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	4e0f      	ldr	r6, [pc, #60]	; (8003298 <sbrk_aligned+0x40>)
 800325c:	000d      	movs	r5, r1
 800325e:	6831      	ldr	r1, [r6, #0]
 8003260:	0004      	movs	r4, r0
 8003262:	2900      	cmp	r1, #0
 8003264:	d102      	bne.n	800326c <sbrk_aligned+0x14>
 8003266:	f000 fba1 	bl	80039ac <_sbrk_r>
 800326a:	6030      	str	r0, [r6, #0]
 800326c:	0029      	movs	r1, r5
 800326e:	0020      	movs	r0, r4
 8003270:	f000 fb9c 	bl	80039ac <_sbrk_r>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d00a      	beq.n	800328e <sbrk_aligned+0x36>
 8003278:	2303      	movs	r3, #3
 800327a:	1cc5      	adds	r5, r0, #3
 800327c:	439d      	bics	r5, r3
 800327e:	42a8      	cmp	r0, r5
 8003280:	d007      	beq.n	8003292 <sbrk_aligned+0x3a>
 8003282:	1a29      	subs	r1, r5, r0
 8003284:	0020      	movs	r0, r4
 8003286:	f000 fb91 	bl	80039ac <_sbrk_r>
 800328a:	3001      	adds	r0, #1
 800328c:	d101      	bne.n	8003292 <sbrk_aligned+0x3a>
 800328e:	2501      	movs	r5, #1
 8003290:	426d      	negs	r5, r5
 8003292:	0028      	movs	r0, r5
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	200002a0 	.word	0x200002a0

0800329c <_malloc_r>:
 800329c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800329e:	2203      	movs	r2, #3
 80032a0:	1ccb      	adds	r3, r1, #3
 80032a2:	4393      	bics	r3, r2
 80032a4:	3308      	adds	r3, #8
 80032a6:	0006      	movs	r6, r0
 80032a8:	001f      	movs	r7, r3
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d238      	bcs.n	8003320 <_malloc_r+0x84>
 80032ae:	270c      	movs	r7, #12
 80032b0:	42b9      	cmp	r1, r7
 80032b2:	d837      	bhi.n	8003324 <_malloc_r+0x88>
 80032b4:	0030      	movs	r0, r6
 80032b6:	f000 f873 	bl	80033a0 <__malloc_lock>
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <_malloc_r+0x100>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	001c      	movs	r4, r3
 80032c2:	2c00      	cmp	r4, #0
 80032c4:	d133      	bne.n	800332e <_malloc_r+0x92>
 80032c6:	0039      	movs	r1, r7
 80032c8:	0030      	movs	r0, r6
 80032ca:	f7ff ffc5 	bl	8003258 <sbrk_aligned>
 80032ce:	0004      	movs	r4, r0
 80032d0:	1c43      	adds	r3, r0, #1
 80032d2:	d15e      	bne.n	8003392 <_malloc_r+0xf6>
 80032d4:	9b00      	ldr	r3, [sp, #0]
 80032d6:	681c      	ldr	r4, [r3, #0]
 80032d8:	0025      	movs	r5, r4
 80032da:	2d00      	cmp	r5, #0
 80032dc:	d14e      	bne.n	800337c <_malloc_r+0xe0>
 80032de:	2c00      	cmp	r4, #0
 80032e0:	d051      	beq.n	8003386 <_malloc_r+0xea>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	0029      	movs	r1, r5
 80032e6:	18e3      	adds	r3, r4, r3
 80032e8:	0030      	movs	r0, r6
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	f000 fb5e 	bl	80039ac <_sbrk_r>
 80032f0:	9b01      	ldr	r3, [sp, #4]
 80032f2:	4283      	cmp	r3, r0
 80032f4:	d147      	bne.n	8003386 <_malloc_r+0xea>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	0030      	movs	r0, r6
 80032fa:	1aff      	subs	r7, r7, r3
 80032fc:	0039      	movs	r1, r7
 80032fe:	f7ff ffab 	bl	8003258 <sbrk_aligned>
 8003302:	3001      	adds	r0, #1
 8003304:	d03f      	beq.n	8003386 <_malloc_r+0xea>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	19db      	adds	r3, r3, r7
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	9b00      	ldr	r3, [sp, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d040      	beq.n	8003396 <_malloc_r+0xfa>
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	42a2      	cmp	r2, r4
 8003318:	d133      	bne.n	8003382 <_malloc_r+0xe6>
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	e014      	b.n	800334a <_malloc_r+0xae>
 8003320:	2b00      	cmp	r3, #0
 8003322:	dac5      	bge.n	80032b0 <_malloc_r+0x14>
 8003324:	230c      	movs	r3, #12
 8003326:	2500      	movs	r5, #0
 8003328:	6033      	str	r3, [r6, #0]
 800332a:	0028      	movs	r0, r5
 800332c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800332e:	6821      	ldr	r1, [r4, #0]
 8003330:	1bc9      	subs	r1, r1, r7
 8003332:	d420      	bmi.n	8003376 <_malloc_r+0xda>
 8003334:	290b      	cmp	r1, #11
 8003336:	d918      	bls.n	800336a <_malloc_r+0xce>
 8003338:	19e2      	adds	r2, r4, r7
 800333a:	6027      	str	r7, [r4, #0]
 800333c:	42a3      	cmp	r3, r4
 800333e:	d112      	bne.n	8003366 <_malloc_r+0xca>
 8003340:	9b00      	ldr	r3, [sp, #0]
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	6863      	ldr	r3, [r4, #4]
 8003346:	6011      	str	r1, [r2, #0]
 8003348:	6053      	str	r3, [r2, #4]
 800334a:	0030      	movs	r0, r6
 800334c:	0025      	movs	r5, r4
 800334e:	f000 f82f 	bl	80033b0 <__malloc_unlock>
 8003352:	2207      	movs	r2, #7
 8003354:	350b      	adds	r5, #11
 8003356:	1d23      	adds	r3, r4, #4
 8003358:	4395      	bics	r5, r2
 800335a:	1aea      	subs	r2, r5, r3
 800335c:	429d      	cmp	r5, r3
 800335e:	d0e4      	beq.n	800332a <_malloc_r+0x8e>
 8003360:	1b5b      	subs	r3, r3, r5
 8003362:	50a3      	str	r3, [r4, r2]
 8003364:	e7e1      	b.n	800332a <_malloc_r+0x8e>
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	e7ec      	b.n	8003344 <_malloc_r+0xa8>
 800336a:	6862      	ldr	r2, [r4, #4]
 800336c:	42a3      	cmp	r3, r4
 800336e:	d1d5      	bne.n	800331c <_malloc_r+0x80>
 8003370:	9b00      	ldr	r3, [sp, #0]
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e7e9      	b.n	800334a <_malloc_r+0xae>
 8003376:	0023      	movs	r3, r4
 8003378:	6864      	ldr	r4, [r4, #4]
 800337a:	e7a2      	b.n	80032c2 <_malloc_r+0x26>
 800337c:	002c      	movs	r4, r5
 800337e:	686d      	ldr	r5, [r5, #4]
 8003380:	e7ab      	b.n	80032da <_malloc_r+0x3e>
 8003382:	0013      	movs	r3, r2
 8003384:	e7c4      	b.n	8003310 <_malloc_r+0x74>
 8003386:	230c      	movs	r3, #12
 8003388:	0030      	movs	r0, r6
 800338a:	6033      	str	r3, [r6, #0]
 800338c:	f000 f810 	bl	80033b0 <__malloc_unlock>
 8003390:	e7cb      	b.n	800332a <_malloc_r+0x8e>
 8003392:	6027      	str	r7, [r4, #0]
 8003394:	e7d9      	b.n	800334a <_malloc_r+0xae>
 8003396:	605b      	str	r3, [r3, #4]
 8003398:	deff      	udf	#255	; 0xff
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	2000029c 	.word	0x2000029c

080033a0 <__malloc_lock>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4802      	ldr	r0, [pc, #8]	; (80033ac <__malloc_lock+0xc>)
 80033a4:	f7ff ff0c 	bl	80031c0 <__retarget_lock_acquire_recursive>
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	20000298 	.word	0x20000298

080033b0 <__malloc_unlock>:
 80033b0:	b510      	push	{r4, lr}
 80033b2:	4802      	ldr	r0, [pc, #8]	; (80033bc <__malloc_unlock+0xc>)
 80033b4:	f7ff ff05 	bl	80031c2 <__retarget_lock_release_recursive>
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	20000298 	.word	0x20000298

080033c0 <__ssputs_r>:
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b085      	sub	sp, #20
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	9203      	str	r2, [sp, #12]
 80033c8:	688e      	ldr	r6, [r1, #8]
 80033ca:	9a01      	ldr	r2, [sp, #4]
 80033cc:	0007      	movs	r7, r0
 80033ce:	000c      	movs	r4, r1
 80033d0:	680b      	ldr	r3, [r1, #0]
 80033d2:	4296      	cmp	r6, r2
 80033d4:	d831      	bhi.n	800343a <__ssputs_r+0x7a>
 80033d6:	898a      	ldrh	r2, [r1, #12]
 80033d8:	2190      	movs	r1, #144	; 0x90
 80033da:	00c9      	lsls	r1, r1, #3
 80033dc:	420a      	tst	r2, r1
 80033de:	d029      	beq.n	8003434 <__ssputs_r+0x74>
 80033e0:	2003      	movs	r0, #3
 80033e2:	6921      	ldr	r1, [r4, #16]
 80033e4:	1a5b      	subs	r3, r3, r1
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	6963      	ldr	r3, [r4, #20]
 80033ea:	4343      	muls	r3, r0
 80033ec:	0fdd      	lsrs	r5, r3, #31
 80033ee:	18ed      	adds	r5, r5, r3
 80033f0:	9b01      	ldr	r3, [sp, #4]
 80033f2:	9802      	ldr	r0, [sp, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	181b      	adds	r3, r3, r0
 80033f8:	106d      	asrs	r5, r5, #1
 80033fa:	42ab      	cmp	r3, r5
 80033fc:	d900      	bls.n	8003400 <__ssputs_r+0x40>
 80033fe:	001d      	movs	r5, r3
 8003400:	0552      	lsls	r2, r2, #21
 8003402:	d529      	bpl.n	8003458 <__ssputs_r+0x98>
 8003404:	0029      	movs	r1, r5
 8003406:	0038      	movs	r0, r7
 8003408:	f7ff ff48 	bl	800329c <_malloc_r>
 800340c:	1e06      	subs	r6, r0, #0
 800340e:	d02d      	beq.n	800346c <__ssputs_r+0xac>
 8003410:	9a02      	ldr	r2, [sp, #8]
 8003412:	6921      	ldr	r1, [r4, #16]
 8003414:	f000 fae7 	bl	80039e6 <memcpy>
 8003418:	89a2      	ldrh	r2, [r4, #12]
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <__ssputs_r+0xc0>)
 800341c:	401a      	ands	r2, r3
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	4313      	orrs	r3, r2
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	9b02      	ldr	r3, [sp, #8]
 8003426:	6126      	str	r6, [r4, #16]
 8003428:	18f6      	adds	r6, r6, r3
 800342a:	6026      	str	r6, [r4, #0]
 800342c:	6165      	str	r5, [r4, #20]
 800342e:	9e01      	ldr	r6, [sp, #4]
 8003430:	1aed      	subs	r5, r5, r3
 8003432:	60a5      	str	r5, [r4, #8]
 8003434:	9b01      	ldr	r3, [sp, #4]
 8003436:	429e      	cmp	r6, r3
 8003438:	d900      	bls.n	800343c <__ssputs_r+0x7c>
 800343a:	9e01      	ldr	r6, [sp, #4]
 800343c:	0032      	movs	r2, r6
 800343e:	9903      	ldr	r1, [sp, #12]
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	f000 fa9f 	bl	8003984 <memmove>
 8003446:	2000      	movs	r0, #0
 8003448:	68a3      	ldr	r3, [r4, #8]
 800344a:	1b9b      	subs	r3, r3, r6
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	199b      	adds	r3, r3, r6
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	b005      	add	sp, #20
 8003456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003458:	002a      	movs	r2, r5
 800345a:	0038      	movs	r0, r7
 800345c:	f000 facc 	bl	80039f8 <_realloc_r>
 8003460:	1e06      	subs	r6, r0, #0
 8003462:	d1df      	bne.n	8003424 <__ssputs_r+0x64>
 8003464:	0038      	movs	r0, r7
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	f7ff feac 	bl	80031c4 <_free_r>
 800346c:	230c      	movs	r3, #12
 800346e:	2001      	movs	r0, #1
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	89a2      	ldrh	r2, [r4, #12]
 8003474:	3334      	adds	r3, #52	; 0x34
 8003476:	4313      	orrs	r3, r2
 8003478:	81a3      	strh	r3, [r4, #12]
 800347a:	4240      	negs	r0, r0
 800347c:	e7ea      	b.n	8003454 <__ssputs_r+0x94>
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	fffffb7f 	.word	0xfffffb7f

08003484 <_svfiprintf_r>:
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	b0a1      	sub	sp, #132	; 0x84
 8003488:	9003      	str	r0, [sp, #12]
 800348a:	001d      	movs	r5, r3
 800348c:	898b      	ldrh	r3, [r1, #12]
 800348e:	000f      	movs	r7, r1
 8003490:	0016      	movs	r6, r2
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	d511      	bpl.n	80034ba <_svfiprintf_r+0x36>
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10e      	bne.n	80034ba <_svfiprintf_r+0x36>
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	f7ff fefd 	bl	800329c <_malloc_r>
 80034a2:	6038      	str	r0, [r7, #0]
 80034a4:	6138      	str	r0, [r7, #16]
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d105      	bne.n	80034b6 <_svfiprintf_r+0x32>
 80034aa:	230c      	movs	r3, #12
 80034ac:	9a03      	ldr	r2, [sp, #12]
 80034ae:	3801      	subs	r0, #1
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	b021      	add	sp, #132	; 0x84
 80034b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b6:	2340      	movs	r3, #64	; 0x40
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	ac08      	add	r4, sp, #32
 80034be:	6163      	str	r3, [r4, #20]
 80034c0:	3320      	adds	r3, #32
 80034c2:	7663      	strb	r3, [r4, #25]
 80034c4:	3310      	adds	r3, #16
 80034c6:	76a3      	strb	r3, [r4, #26]
 80034c8:	9507      	str	r5, [sp, #28]
 80034ca:	0035      	movs	r5, r6
 80034cc:	782b      	ldrb	r3, [r5, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <_svfiprintf_r+0x52>
 80034d2:	2b25      	cmp	r3, #37	; 0x25
 80034d4:	d148      	bne.n	8003568 <_svfiprintf_r+0xe4>
 80034d6:	1bab      	subs	r3, r5, r6
 80034d8:	9305      	str	r3, [sp, #20]
 80034da:	42b5      	cmp	r5, r6
 80034dc:	d00b      	beq.n	80034f6 <_svfiprintf_r+0x72>
 80034de:	0032      	movs	r2, r6
 80034e0:	0039      	movs	r1, r7
 80034e2:	9803      	ldr	r0, [sp, #12]
 80034e4:	f7ff ff6c 	bl	80033c0 <__ssputs_r>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d100      	bne.n	80034ee <_svfiprintf_r+0x6a>
 80034ec:	e0af      	b.n	800364e <_svfiprintf_r+0x1ca>
 80034ee:	6963      	ldr	r3, [r4, #20]
 80034f0:	9a05      	ldr	r2, [sp, #20]
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	6163      	str	r3, [r4, #20]
 80034f6:	782b      	ldrb	r3, [r5, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d100      	bne.n	80034fe <_svfiprintf_r+0x7a>
 80034fc:	e0a7      	b.n	800364e <_svfiprintf_r+0x1ca>
 80034fe:	2201      	movs	r2, #1
 8003500:	2300      	movs	r3, #0
 8003502:	4252      	negs	r2, r2
 8003504:	6062      	str	r2, [r4, #4]
 8003506:	a904      	add	r1, sp, #16
 8003508:	3254      	adds	r2, #84	; 0x54
 800350a:	1852      	adds	r2, r2, r1
 800350c:	1c6e      	adds	r6, r5, #1
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	60e3      	str	r3, [r4, #12]
 8003512:	60a3      	str	r3, [r4, #8]
 8003514:	7013      	strb	r3, [r2, #0]
 8003516:	65a3      	str	r3, [r4, #88]	; 0x58
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <_svfiprintf_r+0x1ec>)
 800351a:	2205      	movs	r2, #5
 800351c:	0018      	movs	r0, r3
 800351e:	7831      	ldrb	r1, [r6, #0]
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	f000 fa55 	bl	80039d0 <memchr>
 8003526:	1c75      	adds	r5, r6, #1
 8003528:	2800      	cmp	r0, #0
 800352a:	d11f      	bne.n	800356c <_svfiprintf_r+0xe8>
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	06d3      	lsls	r3, r2, #27
 8003530:	d504      	bpl.n	800353c <_svfiprintf_r+0xb8>
 8003532:	2353      	movs	r3, #83	; 0x53
 8003534:	a904      	add	r1, sp, #16
 8003536:	185b      	adds	r3, r3, r1
 8003538:	2120      	movs	r1, #32
 800353a:	7019      	strb	r1, [r3, #0]
 800353c:	0713      	lsls	r3, r2, #28
 800353e:	d504      	bpl.n	800354a <_svfiprintf_r+0xc6>
 8003540:	2353      	movs	r3, #83	; 0x53
 8003542:	a904      	add	r1, sp, #16
 8003544:	185b      	adds	r3, r3, r1
 8003546:	212b      	movs	r1, #43	; 0x2b
 8003548:	7019      	strb	r1, [r3, #0]
 800354a:	7833      	ldrb	r3, [r6, #0]
 800354c:	2b2a      	cmp	r3, #42	; 0x2a
 800354e:	d016      	beq.n	800357e <_svfiprintf_r+0xfa>
 8003550:	0035      	movs	r5, r6
 8003552:	2100      	movs	r1, #0
 8003554:	200a      	movs	r0, #10
 8003556:	68e3      	ldr	r3, [r4, #12]
 8003558:	782a      	ldrb	r2, [r5, #0]
 800355a:	1c6e      	adds	r6, r5, #1
 800355c:	3a30      	subs	r2, #48	; 0x30
 800355e:	2a09      	cmp	r2, #9
 8003560:	d94e      	bls.n	8003600 <_svfiprintf_r+0x17c>
 8003562:	2900      	cmp	r1, #0
 8003564:	d111      	bne.n	800358a <_svfiprintf_r+0x106>
 8003566:	e017      	b.n	8003598 <_svfiprintf_r+0x114>
 8003568:	3501      	adds	r5, #1
 800356a:	e7af      	b.n	80034cc <_svfiprintf_r+0x48>
 800356c:	9b05      	ldr	r3, [sp, #20]
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	1ac0      	subs	r0, r0, r3
 8003572:	2301      	movs	r3, #1
 8003574:	4083      	lsls	r3, r0
 8003576:	4313      	orrs	r3, r2
 8003578:	002e      	movs	r6, r5
 800357a:	6023      	str	r3, [r4, #0]
 800357c:	e7cc      	b.n	8003518 <_svfiprintf_r+0x94>
 800357e:	9b07      	ldr	r3, [sp, #28]
 8003580:	1d19      	adds	r1, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9107      	str	r1, [sp, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db01      	blt.n	800358e <_svfiprintf_r+0x10a>
 800358a:	930b      	str	r3, [sp, #44]	; 0x2c
 800358c:	e004      	b.n	8003598 <_svfiprintf_r+0x114>
 800358e:	425b      	negs	r3, r3
 8003590:	60e3      	str	r3, [r4, #12]
 8003592:	2302      	movs	r3, #2
 8003594:	4313      	orrs	r3, r2
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	782b      	ldrb	r3, [r5, #0]
 800359a:	2b2e      	cmp	r3, #46	; 0x2e
 800359c:	d10a      	bne.n	80035b4 <_svfiprintf_r+0x130>
 800359e:	786b      	ldrb	r3, [r5, #1]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d135      	bne.n	8003610 <_svfiprintf_r+0x18c>
 80035a4:	9b07      	ldr	r3, [sp, #28]
 80035a6:	3502      	adds	r5, #2
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	9207      	str	r2, [sp, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	db2b      	blt.n	800360a <_svfiprintf_r+0x186>
 80035b2:	9309      	str	r3, [sp, #36]	; 0x24
 80035b4:	4e2f      	ldr	r6, [pc, #188]	; (8003674 <_svfiprintf_r+0x1f0>)
 80035b6:	2203      	movs	r2, #3
 80035b8:	0030      	movs	r0, r6
 80035ba:	7829      	ldrb	r1, [r5, #0]
 80035bc:	f000 fa08 	bl	80039d0 <memchr>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d006      	beq.n	80035d2 <_svfiprintf_r+0x14e>
 80035c4:	2340      	movs	r3, #64	; 0x40
 80035c6:	1b80      	subs	r0, r0, r6
 80035c8:	4083      	lsls	r3, r0
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	3501      	adds	r5, #1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	7829      	ldrb	r1, [r5, #0]
 80035d4:	2206      	movs	r2, #6
 80035d6:	4828      	ldr	r0, [pc, #160]	; (8003678 <_svfiprintf_r+0x1f4>)
 80035d8:	1c6e      	adds	r6, r5, #1
 80035da:	7621      	strb	r1, [r4, #24]
 80035dc:	f000 f9f8 	bl	80039d0 <memchr>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d03c      	beq.n	800365e <_svfiprintf_r+0x1da>
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <_svfiprintf_r+0x1f8>)
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d125      	bne.n	8003636 <_svfiprintf_r+0x1b2>
 80035ea:	2207      	movs	r2, #7
 80035ec:	9b07      	ldr	r3, [sp, #28]
 80035ee:	3307      	adds	r3, #7
 80035f0:	4393      	bics	r3, r2
 80035f2:	3308      	adds	r3, #8
 80035f4:	9307      	str	r3, [sp, #28]
 80035f6:	6963      	ldr	r3, [r4, #20]
 80035f8:	9a04      	ldr	r2, [sp, #16]
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	6163      	str	r3, [r4, #20]
 80035fe:	e764      	b.n	80034ca <_svfiprintf_r+0x46>
 8003600:	4343      	muls	r3, r0
 8003602:	0035      	movs	r5, r6
 8003604:	2101      	movs	r1, #1
 8003606:	189b      	adds	r3, r3, r2
 8003608:	e7a6      	b.n	8003558 <_svfiprintf_r+0xd4>
 800360a:	2301      	movs	r3, #1
 800360c:	425b      	negs	r3, r3
 800360e:	e7d0      	b.n	80035b2 <_svfiprintf_r+0x12e>
 8003610:	2300      	movs	r3, #0
 8003612:	200a      	movs	r0, #10
 8003614:	001a      	movs	r2, r3
 8003616:	3501      	adds	r5, #1
 8003618:	6063      	str	r3, [r4, #4]
 800361a:	7829      	ldrb	r1, [r5, #0]
 800361c:	1c6e      	adds	r6, r5, #1
 800361e:	3930      	subs	r1, #48	; 0x30
 8003620:	2909      	cmp	r1, #9
 8003622:	d903      	bls.n	800362c <_svfiprintf_r+0x1a8>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0c5      	beq.n	80035b4 <_svfiprintf_r+0x130>
 8003628:	9209      	str	r2, [sp, #36]	; 0x24
 800362a:	e7c3      	b.n	80035b4 <_svfiprintf_r+0x130>
 800362c:	4342      	muls	r2, r0
 800362e:	0035      	movs	r5, r6
 8003630:	2301      	movs	r3, #1
 8003632:	1852      	adds	r2, r2, r1
 8003634:	e7f1      	b.n	800361a <_svfiprintf_r+0x196>
 8003636:	aa07      	add	r2, sp, #28
 8003638:	9200      	str	r2, [sp, #0]
 800363a:	0021      	movs	r1, r4
 800363c:	003a      	movs	r2, r7
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <_svfiprintf_r+0x1fc>)
 8003640:	9803      	ldr	r0, [sp, #12]
 8003642:	e000      	b.n	8003646 <_svfiprintf_r+0x1c2>
 8003644:	bf00      	nop
 8003646:	9004      	str	r0, [sp, #16]
 8003648:	9b04      	ldr	r3, [sp, #16]
 800364a:	3301      	adds	r3, #1
 800364c:	d1d3      	bne.n	80035f6 <_svfiprintf_r+0x172>
 800364e:	89bb      	ldrh	r3, [r7, #12]
 8003650:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003652:	065b      	lsls	r3, r3, #25
 8003654:	d400      	bmi.n	8003658 <_svfiprintf_r+0x1d4>
 8003656:	e72c      	b.n	80034b2 <_svfiprintf_r+0x2e>
 8003658:	2001      	movs	r0, #1
 800365a:	4240      	negs	r0, r0
 800365c:	e729      	b.n	80034b2 <_svfiprintf_r+0x2e>
 800365e:	aa07      	add	r2, sp, #28
 8003660:	9200      	str	r2, [sp, #0]
 8003662:	0021      	movs	r1, r4
 8003664:	003a      	movs	r2, r7
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <_svfiprintf_r+0x1fc>)
 8003668:	9803      	ldr	r0, [sp, #12]
 800366a:	f000 f87b 	bl	8003764 <_printf_i>
 800366e:	e7ea      	b.n	8003646 <_svfiprintf_r+0x1c2>
 8003670:	08003ad0 	.word	0x08003ad0
 8003674:	08003ad6 	.word	0x08003ad6
 8003678:	08003ada 	.word	0x08003ada
 800367c:	00000000 	.word	0x00000000
 8003680:	080033c1 	.word	0x080033c1

08003684 <_printf_common>:
 8003684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003686:	0016      	movs	r6, r2
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	688a      	ldr	r2, [r1, #8]
 800368c:	690b      	ldr	r3, [r1, #16]
 800368e:	000c      	movs	r4, r1
 8003690:	9000      	str	r0, [sp, #0]
 8003692:	4293      	cmp	r3, r2
 8003694:	da00      	bge.n	8003698 <_printf_common+0x14>
 8003696:	0013      	movs	r3, r2
 8003698:	0022      	movs	r2, r4
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	3243      	adds	r2, #67	; 0x43
 800369e:	7812      	ldrb	r2, [r2, #0]
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d001      	beq.n	80036a8 <_printf_common+0x24>
 80036a4:	3301      	adds	r3, #1
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	069b      	lsls	r3, r3, #26
 80036ac:	d502      	bpl.n	80036b4 <_printf_common+0x30>
 80036ae:	6833      	ldr	r3, [r6, #0]
 80036b0:	3302      	adds	r3, #2
 80036b2:	6033      	str	r3, [r6, #0]
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	2306      	movs	r3, #6
 80036b8:	0015      	movs	r5, r2
 80036ba:	401d      	ands	r5, r3
 80036bc:	421a      	tst	r2, r3
 80036be:	d027      	beq.n	8003710 <_printf_common+0x8c>
 80036c0:	0023      	movs	r3, r4
 80036c2:	3343      	adds	r3, #67	; 0x43
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	1e5a      	subs	r2, r3, #1
 80036c8:	4193      	sbcs	r3, r2
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	0692      	lsls	r2, r2, #26
 80036ce:	d430      	bmi.n	8003732 <_printf_common+0xae>
 80036d0:	0022      	movs	r2, r4
 80036d2:	9901      	ldr	r1, [sp, #4]
 80036d4:	9800      	ldr	r0, [sp, #0]
 80036d6:	9d08      	ldr	r5, [sp, #32]
 80036d8:	3243      	adds	r2, #67	; 0x43
 80036da:	47a8      	blx	r5
 80036dc:	3001      	adds	r0, #1
 80036de:	d025      	beq.n	800372c <_printf_common+0xa8>
 80036e0:	2206      	movs	r2, #6
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	2500      	movs	r5, #0
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d105      	bne.n	80036f8 <_printf_common+0x74>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	68e5      	ldr	r5, [r4, #12]
 80036f0:	1aed      	subs	r5, r5, r3
 80036f2:	43eb      	mvns	r3, r5
 80036f4:	17db      	asrs	r3, r3, #31
 80036f6:	401d      	ands	r5, r3
 80036f8:	68a3      	ldr	r3, [r4, #8]
 80036fa:	6922      	ldr	r2, [r4, #16]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	dd01      	ble.n	8003704 <_printf_common+0x80>
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	18ed      	adds	r5, r5, r3
 8003704:	2600      	movs	r6, #0
 8003706:	42b5      	cmp	r5, r6
 8003708:	d120      	bne.n	800374c <_printf_common+0xc8>
 800370a:	2000      	movs	r0, #0
 800370c:	e010      	b.n	8003730 <_printf_common+0xac>
 800370e:	3501      	adds	r5, #1
 8003710:	68e3      	ldr	r3, [r4, #12]
 8003712:	6832      	ldr	r2, [r6, #0]
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	42ab      	cmp	r3, r5
 8003718:	ddd2      	ble.n	80036c0 <_printf_common+0x3c>
 800371a:	0022      	movs	r2, r4
 800371c:	2301      	movs	r3, #1
 800371e:	9901      	ldr	r1, [sp, #4]
 8003720:	9800      	ldr	r0, [sp, #0]
 8003722:	9f08      	ldr	r7, [sp, #32]
 8003724:	3219      	adds	r2, #25
 8003726:	47b8      	blx	r7
 8003728:	3001      	adds	r0, #1
 800372a:	d1f0      	bne.n	800370e <_printf_common+0x8a>
 800372c:	2001      	movs	r0, #1
 800372e:	4240      	negs	r0, r0
 8003730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003732:	2030      	movs	r0, #48	; 0x30
 8003734:	18e1      	adds	r1, r4, r3
 8003736:	3143      	adds	r1, #67	; 0x43
 8003738:	7008      	strb	r0, [r1, #0]
 800373a:	0021      	movs	r1, r4
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	3145      	adds	r1, #69	; 0x45
 8003740:	7809      	ldrb	r1, [r1, #0]
 8003742:	18a2      	adds	r2, r4, r2
 8003744:	3243      	adds	r2, #67	; 0x43
 8003746:	3302      	adds	r3, #2
 8003748:	7011      	strb	r1, [r2, #0]
 800374a:	e7c1      	b.n	80036d0 <_printf_common+0x4c>
 800374c:	0022      	movs	r2, r4
 800374e:	2301      	movs	r3, #1
 8003750:	9901      	ldr	r1, [sp, #4]
 8003752:	9800      	ldr	r0, [sp, #0]
 8003754:	9f08      	ldr	r7, [sp, #32]
 8003756:	321a      	adds	r2, #26
 8003758:	47b8      	blx	r7
 800375a:	3001      	adds	r0, #1
 800375c:	d0e6      	beq.n	800372c <_printf_common+0xa8>
 800375e:	3601      	adds	r6, #1
 8003760:	e7d1      	b.n	8003706 <_printf_common+0x82>
	...

08003764 <_printf_i>:
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	9206      	str	r2, [sp, #24]
 800376a:	000a      	movs	r2, r1
 800376c:	3243      	adds	r2, #67	; 0x43
 800376e:	9307      	str	r3, [sp, #28]
 8003770:	9005      	str	r0, [sp, #20]
 8003772:	9204      	str	r2, [sp, #16]
 8003774:	7e0a      	ldrb	r2, [r1, #24]
 8003776:	000c      	movs	r4, r1
 8003778:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800377a:	2a78      	cmp	r2, #120	; 0x78
 800377c:	d809      	bhi.n	8003792 <_printf_i+0x2e>
 800377e:	2a62      	cmp	r2, #98	; 0x62
 8003780:	d80b      	bhi.n	800379a <_printf_i+0x36>
 8003782:	2a00      	cmp	r2, #0
 8003784:	d100      	bne.n	8003788 <_printf_i+0x24>
 8003786:	e0be      	b.n	8003906 <_printf_i+0x1a2>
 8003788:	497c      	ldr	r1, [pc, #496]	; (800397c <_printf_i+0x218>)
 800378a:	9103      	str	r1, [sp, #12]
 800378c:	2a58      	cmp	r2, #88	; 0x58
 800378e:	d100      	bne.n	8003792 <_printf_i+0x2e>
 8003790:	e093      	b.n	80038ba <_printf_i+0x156>
 8003792:	0026      	movs	r6, r4
 8003794:	3642      	adds	r6, #66	; 0x42
 8003796:	7032      	strb	r2, [r6, #0]
 8003798:	e022      	b.n	80037e0 <_printf_i+0x7c>
 800379a:	0010      	movs	r0, r2
 800379c:	3863      	subs	r0, #99	; 0x63
 800379e:	2815      	cmp	r0, #21
 80037a0:	d8f7      	bhi.n	8003792 <_printf_i+0x2e>
 80037a2:	f7fc fcb9 	bl	8000118 <__gnu_thumb1_case_shi>
 80037a6:	0016      	.short	0x0016
 80037a8:	fff6001f 	.word	0xfff6001f
 80037ac:	fff6fff6 	.word	0xfff6fff6
 80037b0:	001ffff6 	.word	0x001ffff6
 80037b4:	fff6fff6 	.word	0xfff6fff6
 80037b8:	fff6fff6 	.word	0xfff6fff6
 80037bc:	003600a3 	.word	0x003600a3
 80037c0:	fff60083 	.word	0xfff60083
 80037c4:	00b4fff6 	.word	0x00b4fff6
 80037c8:	0036fff6 	.word	0x0036fff6
 80037cc:	fff6fff6 	.word	0xfff6fff6
 80037d0:	0087      	.short	0x0087
 80037d2:	0026      	movs	r6, r4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	3642      	adds	r6, #66	; 0x42
 80037d8:	1d11      	adds	r1, r2, #4
 80037da:	6019      	str	r1, [r3, #0]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	7033      	strb	r3, [r6, #0]
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0a2      	b.n	800392a <_printf_i+0x1c6>
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	6809      	ldr	r1, [r1, #0]
 80037e8:	1d02      	adds	r2, r0, #4
 80037ea:	060d      	lsls	r5, r1, #24
 80037ec:	d50b      	bpl.n	8003806 <_printf_i+0xa2>
 80037ee:	6805      	ldr	r5, [r0, #0]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	da03      	bge.n	80037fe <_printf_i+0x9a>
 80037f6:	232d      	movs	r3, #45	; 0x2d
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	426d      	negs	r5, r5
 80037fc:	7013      	strb	r3, [r2, #0]
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <_printf_i+0x218>)
 8003800:	270a      	movs	r7, #10
 8003802:	9303      	str	r3, [sp, #12]
 8003804:	e01b      	b.n	800383e <_printf_i+0xda>
 8003806:	6805      	ldr	r5, [r0, #0]
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	0649      	lsls	r1, r1, #25
 800380c:	d5f1      	bpl.n	80037f2 <_printf_i+0x8e>
 800380e:	b22d      	sxth	r5, r5
 8003810:	e7ef      	b.n	80037f2 <_printf_i+0x8e>
 8003812:	680d      	ldr	r5, [r1, #0]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	1d08      	adds	r0, r1, #4
 8003818:	6018      	str	r0, [r3, #0]
 800381a:	062e      	lsls	r6, r5, #24
 800381c:	d501      	bpl.n	8003822 <_printf_i+0xbe>
 800381e:	680d      	ldr	r5, [r1, #0]
 8003820:	e003      	b.n	800382a <_printf_i+0xc6>
 8003822:	066d      	lsls	r5, r5, #25
 8003824:	d5fb      	bpl.n	800381e <_printf_i+0xba>
 8003826:	680d      	ldr	r5, [r1, #0]
 8003828:	b2ad      	uxth	r5, r5
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <_printf_i+0x218>)
 800382c:	2708      	movs	r7, #8
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	2a6f      	cmp	r2, #111	; 0x6f
 8003832:	d000      	beq.n	8003836 <_printf_i+0xd2>
 8003834:	3702      	adds	r7, #2
 8003836:	0023      	movs	r3, r4
 8003838:	2200      	movs	r2, #0
 800383a:	3343      	adds	r3, #67	; 0x43
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	60a3      	str	r3, [r4, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db03      	blt.n	800384e <_printf_i+0xea>
 8003846:	2104      	movs	r1, #4
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	438a      	bics	r2, r1
 800384c:	6022      	str	r2, [r4, #0]
 800384e:	2d00      	cmp	r5, #0
 8003850:	d102      	bne.n	8003858 <_printf_i+0xf4>
 8003852:	9e04      	ldr	r6, [sp, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <_printf_i+0x10e>
 8003858:	9e04      	ldr	r6, [sp, #16]
 800385a:	0028      	movs	r0, r5
 800385c:	0039      	movs	r1, r7
 800385e:	f7fc fceb 	bl	8000238 <__aeabi_uidivmod>
 8003862:	9b03      	ldr	r3, [sp, #12]
 8003864:	3e01      	subs	r6, #1
 8003866:	5c5b      	ldrb	r3, [r3, r1]
 8003868:	7033      	strb	r3, [r6, #0]
 800386a:	002b      	movs	r3, r5
 800386c:	0005      	movs	r5, r0
 800386e:	429f      	cmp	r7, r3
 8003870:	d9f3      	bls.n	800385a <_printf_i+0xf6>
 8003872:	2f08      	cmp	r7, #8
 8003874:	d109      	bne.n	800388a <_printf_i+0x126>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d506      	bpl.n	800388a <_printf_i+0x126>
 800387c:	6862      	ldr	r2, [r4, #4]
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	dc02      	bgt.n	800388a <_printf_i+0x126>
 8003884:	2330      	movs	r3, #48	; 0x30
 8003886:	3e01      	subs	r6, #1
 8003888:	7033      	strb	r3, [r6, #0]
 800388a:	9b04      	ldr	r3, [sp, #16]
 800388c:	1b9b      	subs	r3, r3, r6
 800388e:	6123      	str	r3, [r4, #16]
 8003890:	9b07      	ldr	r3, [sp, #28]
 8003892:	0021      	movs	r1, r4
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	9805      	ldr	r0, [sp, #20]
 8003898:	9b06      	ldr	r3, [sp, #24]
 800389a:	aa09      	add	r2, sp, #36	; 0x24
 800389c:	f7ff fef2 	bl	8003684 <_printf_common>
 80038a0:	3001      	adds	r0, #1
 80038a2:	d147      	bne.n	8003934 <_printf_i+0x1d0>
 80038a4:	2001      	movs	r0, #1
 80038a6:	4240      	negs	r0, r0
 80038a8:	b00b      	add	sp, #44	; 0x2c
 80038aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ac:	2220      	movs	r2, #32
 80038ae:	6809      	ldr	r1, [r1, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	6022      	str	r2, [r4, #0]
 80038b4:	2278      	movs	r2, #120	; 0x78
 80038b6:	4932      	ldr	r1, [pc, #200]	; (8003980 <_printf_i+0x21c>)
 80038b8:	9103      	str	r1, [sp, #12]
 80038ba:	0021      	movs	r1, r4
 80038bc:	3145      	adds	r1, #69	; 0x45
 80038be:	700a      	strb	r2, [r1, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	c920      	ldmia	r1!, {r5}
 80038c6:	0610      	lsls	r0, r2, #24
 80038c8:	d402      	bmi.n	80038d0 <_printf_i+0x16c>
 80038ca:	0650      	lsls	r0, r2, #25
 80038cc:	d500      	bpl.n	80038d0 <_printf_i+0x16c>
 80038ce:	b2ad      	uxth	r5, r5
 80038d0:	6019      	str	r1, [r3, #0]
 80038d2:	07d3      	lsls	r3, r2, #31
 80038d4:	d502      	bpl.n	80038dc <_printf_i+0x178>
 80038d6:	2320      	movs	r3, #32
 80038d8:	4313      	orrs	r3, r2
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	2710      	movs	r7, #16
 80038de:	2d00      	cmp	r5, #0
 80038e0:	d1a9      	bne.n	8003836 <_printf_i+0xd2>
 80038e2:	2220      	movs	r2, #32
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	4393      	bics	r3, r2
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	e7a4      	b.n	8003836 <_printf_i+0xd2>
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	680d      	ldr	r5, [r1, #0]
 80038f0:	1d10      	adds	r0, r2, #4
 80038f2:	6949      	ldr	r1, [r1, #20]
 80038f4:	6018      	str	r0, [r3, #0]
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	062e      	lsls	r6, r5, #24
 80038fa:	d501      	bpl.n	8003900 <_printf_i+0x19c>
 80038fc:	6019      	str	r1, [r3, #0]
 80038fe:	e002      	b.n	8003906 <_printf_i+0x1a2>
 8003900:	066d      	lsls	r5, r5, #25
 8003902:	d5fb      	bpl.n	80038fc <_printf_i+0x198>
 8003904:	8019      	strh	r1, [r3, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	9e04      	ldr	r6, [sp, #16]
 800390a:	6123      	str	r3, [r4, #16]
 800390c:	e7c0      	b.n	8003890 <_printf_i+0x12c>
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	1d11      	adds	r1, r2, #4
 8003912:	6019      	str	r1, [r3, #0]
 8003914:	6816      	ldr	r6, [r2, #0]
 8003916:	2100      	movs	r1, #0
 8003918:	0030      	movs	r0, r6
 800391a:	6862      	ldr	r2, [r4, #4]
 800391c:	f000 f858 	bl	80039d0 <memchr>
 8003920:	2800      	cmp	r0, #0
 8003922:	d001      	beq.n	8003928 <_printf_i+0x1c4>
 8003924:	1b80      	subs	r0, r0, r6
 8003926:	6060      	str	r0, [r4, #4]
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	2300      	movs	r3, #0
 800392e:	9a04      	ldr	r2, [sp, #16]
 8003930:	7013      	strb	r3, [r2, #0]
 8003932:	e7ad      	b.n	8003890 <_printf_i+0x12c>
 8003934:	0032      	movs	r2, r6
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	9906      	ldr	r1, [sp, #24]
 800393a:	9805      	ldr	r0, [sp, #20]
 800393c:	9d07      	ldr	r5, [sp, #28]
 800393e:	47a8      	blx	r5
 8003940:	3001      	adds	r0, #1
 8003942:	d0af      	beq.n	80038a4 <_printf_i+0x140>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	079b      	lsls	r3, r3, #30
 8003948:	d415      	bmi.n	8003976 <_printf_i+0x212>
 800394a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800394c:	68e0      	ldr	r0, [r4, #12]
 800394e:	4298      	cmp	r0, r3
 8003950:	daaa      	bge.n	80038a8 <_printf_i+0x144>
 8003952:	0018      	movs	r0, r3
 8003954:	e7a8      	b.n	80038a8 <_printf_i+0x144>
 8003956:	0022      	movs	r2, r4
 8003958:	2301      	movs	r3, #1
 800395a:	9906      	ldr	r1, [sp, #24]
 800395c:	9805      	ldr	r0, [sp, #20]
 800395e:	9e07      	ldr	r6, [sp, #28]
 8003960:	3219      	adds	r2, #25
 8003962:	47b0      	blx	r6
 8003964:	3001      	adds	r0, #1
 8003966:	d09d      	beq.n	80038a4 <_printf_i+0x140>
 8003968:	3501      	adds	r5, #1
 800396a:	68e3      	ldr	r3, [r4, #12]
 800396c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	42ab      	cmp	r3, r5
 8003972:	dcf0      	bgt.n	8003956 <_printf_i+0x1f2>
 8003974:	e7e9      	b.n	800394a <_printf_i+0x1e6>
 8003976:	2500      	movs	r5, #0
 8003978:	e7f7      	b.n	800396a <_printf_i+0x206>
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	08003ae1 	.word	0x08003ae1
 8003980:	08003af2 	.word	0x08003af2

08003984 <memmove>:
 8003984:	b510      	push	{r4, lr}
 8003986:	4288      	cmp	r0, r1
 8003988:	d902      	bls.n	8003990 <memmove+0xc>
 800398a:	188b      	adds	r3, r1, r2
 800398c:	4298      	cmp	r0, r3
 800398e:	d303      	bcc.n	8003998 <memmove+0x14>
 8003990:	2300      	movs	r3, #0
 8003992:	e007      	b.n	80039a4 <memmove+0x20>
 8003994:	5c8b      	ldrb	r3, [r1, r2]
 8003996:	5483      	strb	r3, [r0, r2]
 8003998:	3a01      	subs	r2, #1
 800399a:	d2fb      	bcs.n	8003994 <memmove+0x10>
 800399c:	bd10      	pop	{r4, pc}
 800399e:	5ccc      	ldrb	r4, [r1, r3]
 80039a0:	54c4      	strb	r4, [r0, r3]
 80039a2:	3301      	adds	r3, #1
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1fa      	bne.n	800399e <memmove+0x1a>
 80039a8:	e7f8      	b.n	800399c <memmove+0x18>
	...

080039ac <_sbrk_r>:
 80039ac:	2300      	movs	r3, #0
 80039ae:	b570      	push	{r4, r5, r6, lr}
 80039b0:	4d06      	ldr	r5, [pc, #24]	; (80039cc <_sbrk_r+0x20>)
 80039b2:	0004      	movs	r4, r0
 80039b4:	0008      	movs	r0, r1
 80039b6:	602b      	str	r3, [r5, #0]
 80039b8:	f7fd fa36 	bl	8000e28 <_sbrk>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d103      	bne.n	80039c8 <_sbrk_r+0x1c>
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d000      	beq.n	80039c8 <_sbrk_r+0x1c>
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	20000294 	.word	0x20000294

080039d0 <memchr>:
 80039d0:	b2c9      	uxtb	r1, r1
 80039d2:	1882      	adds	r2, r0, r2
 80039d4:	4290      	cmp	r0, r2
 80039d6:	d101      	bne.n	80039dc <memchr+0xc>
 80039d8:	2000      	movs	r0, #0
 80039da:	4770      	bx	lr
 80039dc:	7803      	ldrb	r3, [r0, #0]
 80039de:	428b      	cmp	r3, r1
 80039e0:	d0fb      	beq.n	80039da <memchr+0xa>
 80039e2:	3001      	adds	r0, #1
 80039e4:	e7f6      	b.n	80039d4 <memchr+0x4>

080039e6 <memcpy>:
 80039e6:	2300      	movs	r3, #0
 80039e8:	b510      	push	{r4, lr}
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d100      	bne.n	80039f0 <memcpy+0xa>
 80039ee:	bd10      	pop	{r4, pc}
 80039f0:	5ccc      	ldrb	r4, [r1, r3]
 80039f2:	54c4      	strb	r4, [r0, r3]
 80039f4:	3301      	adds	r3, #1
 80039f6:	e7f8      	b.n	80039ea <memcpy+0x4>

080039f8 <_realloc_r>:
 80039f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039fa:	0007      	movs	r7, r0
 80039fc:	000e      	movs	r6, r1
 80039fe:	0014      	movs	r4, r2
 8003a00:	2900      	cmp	r1, #0
 8003a02:	d105      	bne.n	8003a10 <_realloc_r+0x18>
 8003a04:	0011      	movs	r1, r2
 8003a06:	f7ff fc49 	bl	800329c <_malloc_r>
 8003a0a:	0005      	movs	r5, r0
 8003a0c:	0028      	movs	r0, r5
 8003a0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	d103      	bne.n	8003a1c <_realloc_r+0x24>
 8003a14:	f7ff fbd6 	bl	80031c4 <_free_r>
 8003a18:	0025      	movs	r5, r4
 8003a1a:	e7f7      	b.n	8003a0c <_realloc_r+0x14>
 8003a1c:	f000 f81b 	bl	8003a56 <_malloc_usable_size_r>
 8003a20:	9001      	str	r0, [sp, #4]
 8003a22:	4284      	cmp	r4, r0
 8003a24:	d803      	bhi.n	8003a2e <_realloc_r+0x36>
 8003a26:	0035      	movs	r5, r6
 8003a28:	0843      	lsrs	r3, r0, #1
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	d3ee      	bcc.n	8003a0c <_realloc_r+0x14>
 8003a2e:	0021      	movs	r1, r4
 8003a30:	0038      	movs	r0, r7
 8003a32:	f7ff fc33 	bl	800329c <_malloc_r>
 8003a36:	1e05      	subs	r5, r0, #0
 8003a38:	d0e8      	beq.n	8003a0c <_realloc_r+0x14>
 8003a3a:	9b01      	ldr	r3, [sp, #4]
 8003a3c:	0022      	movs	r2, r4
 8003a3e:	429c      	cmp	r4, r3
 8003a40:	d900      	bls.n	8003a44 <_realloc_r+0x4c>
 8003a42:	001a      	movs	r2, r3
 8003a44:	0031      	movs	r1, r6
 8003a46:	0028      	movs	r0, r5
 8003a48:	f7ff ffcd 	bl	80039e6 <memcpy>
 8003a4c:	0031      	movs	r1, r6
 8003a4e:	0038      	movs	r0, r7
 8003a50:	f7ff fbb8 	bl	80031c4 <_free_r>
 8003a54:	e7da      	b.n	8003a0c <_realloc_r+0x14>

08003a56 <_malloc_usable_size_r>:
 8003a56:	1f0b      	subs	r3, r1, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1f18      	subs	r0, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da01      	bge.n	8003a64 <_malloc_usable_size_r+0xe>
 8003a60:	580b      	ldr	r3, [r1, r0]
 8003a62:	18c0      	adds	r0, r0, r3
 8003a64:	4770      	bx	lr
	...

08003a68 <_init>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr

08003a74 <_fini>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr
