
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e64  08005e64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e64  08005e64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e64  08005e64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000070  08005edc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08005edc  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f2a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc5  00000000  00000000  00035fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00038c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001391d  00000000  00000000  0003b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018836  00000000  00000000  0004ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076bcb  00000000  00000000  000674b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c70  00000000  00000000  000de0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005dd0 	.word	0x08005dd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005dd0 	.word	0x08005dd0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000248:	f3bf 8f4f 	dsb	sy
}
 800024c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__NVIC_SystemReset+0x1c>)
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <__NVIC_SystemReset+0x20>)
 8000252:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000254:	f3bf 8f4f 	dsb	sy
}
 8000258:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	e7fd      	b.n	800025a <__NVIC_SystemReset+0x16>
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	05fa0004 	.word	0x05fa0004

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f001 f917 	bl	80014a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000272:	f000 f897 	bl	80003a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000276:	f000 fc73 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 800027a:	f000 fc4b 	bl	8000b14 <MX_DMA_Init>
  MX_SPI2_Init();
 800027e:	f000 faa1 	bl	80007c4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000282:	f000 fadd 	bl	8000840 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000286:	f000 fb93 	bl	80009b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800028a:	f000 fa5b 	bl	8000744 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800028e:	f000 fc11 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000292:	f000 f9e9 	bl	8000668 <MX_DAC1_Init>
  MX_ADC_Init();
 8000296:	f000 f8ef 	bl	8000478 <MX_ADC_Init>
  MX_I2C1_Init();
 800029a:	f000 fa13 	bl	80006c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800029e:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <main+0x120>)
 80002a0:	2100      	movs	r1, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fcfb 	bl	8001c9e <HAL_DAC_Start>

    /* Start Timers with OC & Interrupt */
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80002a8:	4b38      	ldr	r3, [pc, #224]	; (800038c <main+0x124>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	0018      	movs	r0, r3
 80002ae:	f003 f84d 	bl	800334c <HAL_TIM_OC_Start_IT>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <main+0x128>)
 80002b4:	210c      	movs	r1, #12
 80002b6:	0018      	movs	r0, r3
 80002b8:	f003 f848 	bl	800334c <HAL_TIM_OC_Start_IT>

    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	4b35      	ldr	r3, [pc, #212]	; (8000394 <main+0x12c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	69da      	ldr	r2, [r3, #28]
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	025b      	lsls	r3, r3, #9
 80002c8:	401a      	ands	r2, r3
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	025b      	lsls	r3, r3, #9
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d0f5      	beq.n	80002be <main+0x56>
    while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	4b2f      	ldr	r3, [pc, #188]	; (8000394 <main+0x12c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	69da      	ldr	r2, [r3, #28]
 80002da:	2380      	movs	r3, #128	; 0x80
 80002dc:	03db      	lsls	r3, r3, #15
 80002de:	401a      	ands	r2, r3
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	03db      	lsls	r3, r3, #15
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d1f5      	bne.n	80002d4 <main+0x6c>

    WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 80002e8:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <main+0x130>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
    WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 80002ee:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <main+0x130>)
 80002f0:	2210      	movs	r2, #16
 80002f2:	809a      	strh	r2, [r3, #4]
    WakeUpSelection.Address = 0x23; // send "£"
 80002f4:	4b28      	ldr	r3, [pc, #160]	; (8000398 <main+0x130>)
 80002f6:	2223      	movs	r2, #35	; 0x23
 80002f8:	719a      	strb	r2, [r3, #6]

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <main+0x130>)
 80002fc:	4825      	ldr	r0, [pc, #148]	; (8000394 <main+0x12c>)
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	685a      	ldr	r2, [r3, #4]
 8000302:	f005 f80d 	bl	8005320 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <main+0xa6>
        Error_Handler();
 800030a:	f000 fc81 	bl	8000c10 <Error_Handler>
    }

    /* Enable the LPUART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <main+0x12c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <main+0x12c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	03c9      	lsls	r1, r1, #15
 800031c:	430a      	orrs	r2, r1
 800031e:	609a      	str	r2, [r3, #8]

    /* enable MCU wake-up by LPUART */
    HAL_UARTEx_EnableStopMode(&huart1);
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <main+0x12c>)
 8000322:	0018      	movs	r0, r3
 8000324:	f005 f862 	bl	80053ec <HAL_UARTEx_EnableStopMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int counter = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
    uint8_t buf[13];
    while (1) {
        HAL_UART_Receive(&huart1, Rx_data, 1, 1000);
 800032c:	23fa      	movs	r3, #250	; 0xfa
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	491a      	ldr	r1, [pc, #104]	; (800039c <main+0x134>)
 8000332:	4818      	ldr	r0, [pc, #96]	; (8000394 <main+0x12c>)
 8000334:	2201      	movs	r2, #1
 8000336:	f004 f877 	bl	8004428 <HAL_UART_Receive>
        if (Rx_data[0] == 's') { // should be "¶" in the future
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <main+0x134>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b73      	cmp	r3, #115	; 0x73
 8000340:	d107      	bne.n	8000352 <main+0xea>
            HAL_SuspendTick();
 8000342:	f001 f911 	bl	8001568 <HAL_SuspendTick>
            HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000346:	2101      	movs	r1, #1
 8000348:	2001      	movs	r0, #1
 800034a:	f002 f921 	bl	8002590 <HAL_PWR_EnterSTOPMode>
            NVIC_SystemReset();
 800034e:	f7ff ff79 	bl	8000244 <__NVIC_SystemReset>
        }
        sprintf((char*)buf, "I am awake %d\r\n", counter);
 8000352:	697a      	ldr	r2, [r7, #20]
 8000354:	4912      	ldr	r1, [pc, #72]	; (80003a0 <main+0x138>)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	f005 f8cf 	bl	80054fc <siprintf>
        HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	f7ff fed1 	bl	8000108 <strlen>
 8000366:	0003      	movs	r3, r0
 8000368:	b29a      	uxth	r2, r3
 800036a:	2301      	movs	r3, #1
 800036c:	425b      	negs	r3, r3
 800036e:	1d39      	adds	r1, r7, #4
 8000370:	4808      	ldr	r0, [pc, #32]	; (8000394 <main+0x12c>)
 8000372:	f003 ffaf 	bl	80042d4 <HAL_UART_Transmit>
        counter++;
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	3301      	adds	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
        if (counter > 99) {
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	2b63      	cmp	r3, #99	; 0x63
 8000380:	ddd4      	ble.n	800032c <main+0xc4>
        	counter = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
    while (1) {
 8000386:	e7d1      	b.n	800032c <main+0xc4>
 8000388:	20000110 	.word	0x20000110
 800038c:	200002c0 	.word	0x200002c0
 8000390:	20000308 	.word	0x20000308
 8000394:	20000350 	.word	0x20000350
 8000398:	200003d4 	.word	0x200003d4
 800039c:	200003dc 	.word	0x200003dc
 80003a0:	08005de8 	.word	0x08005de8

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b097      	sub	sp, #92	; 0x5c
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	2428      	movs	r4, #40	; 0x28
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	2330      	movs	r3, #48	; 0x30
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f005 f899 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	2318      	movs	r3, #24
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f005 f891 	bl	80054ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	2314      	movs	r3, #20
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f005 f88a 	bl	80054ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80003d8:	0021      	movs	r1, r4
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2212      	movs	r2, #18
 80003de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2201      	movs	r2, #1
 80003e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2201      	movs	r2, #1
 80003ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2210      	movs	r2, #16
 80003f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2210      	movs	r2, #16
 80003f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2202      	movs	r2, #2
 80003fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	22a0      	movs	r2, #160	; 0xa0
 8000408:	0392      	lsls	r2, r2, #14
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	187b      	adds	r3, r7, r1
 8000414:	0018      	movs	r0, r3
 8000416:	f002 f8ef 	bl	80025f8 <HAL_RCC_OscConfig>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800041e:	f000 fbf7 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	2118      	movs	r1, #24
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2207      	movs	r2, #7
 8000428:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2202      	movs	r2, #2
 800042e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2101      	movs	r1, #1
 8000440:	0018      	movs	r0, r3
 8000442:	f002 fbf3 	bl	8002c2c <HAL_RCC_ClockConfig>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800044a:	f000 fbe1 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2221      	movs	r2, #33	; 0x21
 8000452:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2203      	movs	r2, #3
 8000458:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fd34 	bl	8002ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800046c:	f000 fbd0 	bl	8000c10 <Error_Handler>
  }
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b017      	add	sp, #92	; 0x5c
 8000476:	bd90      	pop	{r4, r7, pc}

08000478 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	230c      	movs	r3, #12
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f005 f830 	bl	80054ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800048c:	4b74      	ldr	r3, [pc, #464]	; (8000660 <MX_ADC_Init+0x1e8>)
 800048e:	4a75      	ldr	r2, [pc, #468]	; (8000664 <MX_ADC_Init+0x1ec>)
 8000490:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000492:	4b73      	ldr	r3, [pc, #460]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000498:	4b71      	ldr	r3, [pc, #452]	; (8000660 <MX_ADC_Init+0x1e8>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049e:	4b70      	ldr	r3, [pc, #448]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004a4:	4b6e      	ldr	r3, [pc, #440]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004aa:	4b6d      	ldr	r3, [pc, #436]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004b0:	4b6b      	ldr	r3, [pc, #428]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004b6:	4b6a      	ldr	r3, [pc, #424]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004bc:	4b68      	ldr	r3, [pc, #416]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004c2:	4b67      	ldr	r3, [pc, #412]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c8:	4b65      	ldr	r3, [pc, #404]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004ca:	22c2      	movs	r2, #194	; 0xc2
 80004cc:	32ff      	adds	r2, #255	; 0xff
 80004ce:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d0:	4b63      	ldr	r3, [pc, #396]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004d6:	4b62      	ldr	r3, [pc, #392]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004d8:	2224      	movs	r2, #36	; 0x24
 80004da:	2100      	movs	r1, #0
 80004dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004de:	4b60      	ldr	r3, [pc, #384]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e4:	4b5e      	ldr	r3, [pc, #376]	; (8000660 <MX_ADC_Init+0x1e8>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 f84c 	bl	8001584 <HAL_ADC_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004f0:	f000 fb8e 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0152      	lsls	r2, r2, #5
 8000500:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	0552      	lsls	r2, r2, #21
 8000508:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800050a:	1d3a      	adds	r2, r7, #4
 800050c:	4b54      	ldr	r3, [pc, #336]	; (8000660 <MX_ADC_Init+0x1e8>)
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f001 f977 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800051a:	f000 fb79 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	4b4e      	ldr	r3, [pc, #312]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f001 f96a 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000534:	f000 fb6c 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2202      	movs	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053e:	1d3a      	adds	r2, r7, #4
 8000540:	4b47      	ldr	r3, [pc, #284]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f95d 	bl	8001804 <HAL_ADC_ConfigChannel>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800054e:	f000 fb5f 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2203      	movs	r2, #3
 8000556:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <MX_ADC_Init+0x1e8>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f001 f950 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000568:	f000 fb52 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2207      	movs	r2, #7
 8000570:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000572:	1d3a      	adds	r2, r7, #4
 8000574:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f943 	bl	8001804 <HAL_ADC_ConfigChannel>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000582:	f000 fb45 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2208      	movs	r2, #8
 800058a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800058c:	1d3a      	adds	r2, r7, #4
 800058e:	4b34      	ldr	r3, [pc, #208]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f936 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 800059c:	f000 fb38 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2209      	movs	r2, #9
 80005a4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005a6:	1d3a      	adds	r2, r7, #4
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <MX_ADC_Init+0x1e8>)
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 f929 	bl	8001804 <HAL_ADC_ConfigChannel>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80005b6:	f000 fb2b 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	220a      	movs	r2, #10
 80005be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005c0:	1d3a      	adds	r2, r7, #4
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_ADC_Init+0x1e8>)
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 f91c 	bl	8001804 <HAL_ADC_ConfigChannel>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80005d0:	f000 fb1e 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	220b      	movs	r2, #11
 80005d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC_Init+0x1e8>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 f90f 	bl	8001804 <HAL_ADC_ConfigChannel>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80005ea:	f000 fb11 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	220c      	movs	r2, #12
 80005f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC_Init+0x1e8>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 f902 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000604:	f000 fb04 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	220d      	movs	r2, #13
 800060c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 f8f5 	bl	8001804 <HAL_ADC_ConfigChannel>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800061e:	f000 faf7 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	220e      	movs	r2, #14
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_ADC_Init+0x1e8>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 f8e8 	bl	8001804 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000638:	f000 faea 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	220f      	movs	r2, #15
 8000640:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_ADC_Init+0x1e8>)
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 f8db 	bl	8001804 <HAL_ADC_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000652:	f000 fadd 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	2000008c 	.word	0x2000008c
 8000664:	40012400 	.word	0x40012400

08000668 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800066e:	003b      	movs	r3, r7
 8000670:	0018      	movs	r0, r3
 8000672:	2308      	movs	r3, #8
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f004 ff38 	bl	80054ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_DAC1_Init+0x54>)
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <MX_DAC1_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_DAC1_Init+0x54>)
 8000684:	0018      	movs	r0, r3
 8000686:	f001 faa9 	bl	8001bdc <HAL_DAC_Init>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800068e:	f000 fabf 	bl	8000c10 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800069e:	0039      	movs	r1, r7
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_DAC1_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fabc 	bl	8001c22 <HAL_DAC_ConfigChannel>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 faaf 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000110 	.word	0x20000110
 80006c0:	40007400 	.word	0x40007400

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x74>)
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fe17 	bl	8002334 <HAL_I2C_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 fa81 	bl	8000c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x74>)
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fea4 	bl	8002460 <HAL_I2CEx_ConfigAnalogFilter>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 fa78 	bl	8000c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_I2C1_Init+0x74>)
 8000722:	2100      	movs	r1, #0
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fee7 	bl	80024f8 <HAL_I2CEx_ConfigDigitalFilter>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 fa6f 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000124 	.word	0x20000124
 800073c:	40005400 	.word	0x40005400
 8000740:	00201d2b 	.word	0x00201d2b

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_SPI1_Init+0x78>)
 800074a:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <MX_SPI1_Init+0x7c>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_SPI1_Init+0x78>)
 8000750:	2282      	movs	r2, #130	; 0x82
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_SPI1_Init+0x78>)
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0212      	lsls	r2, r2, #8
 800075c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI1_Init+0x78>)
 8000760:	22f0      	movs	r2, #240	; 0xf0
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_SPI1_Init+0x78>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_SPI1_Init+0x78>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI1_Init+0x78>)
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_SPI1_Init+0x78>)
 800077c:	2218      	movs	r2, #24
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x78>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_SPI1_Init+0x78>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_SPI1_Init+0x78>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI1_Init+0x78>)
 8000794:	2207      	movs	r2, #7
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_SPI1_Init+0x78>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI1_Init+0x78>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_SPI1_Init+0x78>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fc70 	bl	800308c <HAL_SPI_Init>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80007b0:	f000 fa2e 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	200001f8 	.word	0x200001f8
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_SPI2_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_SPI2_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_SPI2_Init+0x74>)
 80007d0:	2282      	movs	r2, #130	; 0x82
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_SPI2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_SPI2_Init+0x74>)
 80007de:	22f0      	movs	r2, #240	; 0xf0
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_SPI2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_SPI2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_SPI2_Init+0x74>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_SPI2_Init+0x74>)
 80007fa:	2218      	movs	r2, #24
 80007fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_SPI2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SPI2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_SPI2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SPI2_Init+0x74>)
 8000812:	2207      	movs	r2, #7
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_SPI2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SPI2_Init+0x74>)
 800081e:	2208      	movs	r2, #8
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <MX_SPI2_Init+0x74>)
 8000824:	0018      	movs	r0, r3
 8000826:	f002 fc31 	bl	800308c <HAL_SPI_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f9ef 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000025c 	.word	0x2000025c
 800083c:	40003800 	.word	0x40003800

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	; 0x58
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	2348      	movs	r3, #72	; 0x48
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	2310      	movs	r3, #16
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 fe4b 	bl	80054ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	2308      	movs	r3, #8
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f004 fe43 	bl	80054ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	2324      	movs	r3, #36	; 0x24
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	0018      	movs	r0, r3
 800086c:	231c      	movs	r3, #28
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f004 fe3b 	bl	80054ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	2320      	movs	r3, #32
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f004 fe34 	bl	80054ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000884:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <MX_TIM1_Init+0x160>)
 8000886:	4a47      	ldr	r2, [pc, #284]	; (80009a4 <MX_TIM1_Init+0x164>)
 8000888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800088a:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <MX_TIM1_Init+0x160>)
 800088c:	2263      	movs	r2, #99	; 0x63
 800088e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b43      	ldr	r3, [pc, #268]	; (80009a0 <MX_TIM1_Init+0x160>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <MX_TIM1_Init+0x160>)
 8000898:	4a43      	ldr	r2, [pc, #268]	; (80009a8 <MX_TIM1_Init+0x168>)
 800089a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <MX_TIM1_Init+0x160>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a2:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <MX_TIM1_Init+0x160>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a8:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <MX_TIM1_Init+0x160>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <MX_TIM1_Init+0x160>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 fca3 	bl	80031fc <HAL_TIM_Base_Init>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008ba:	f000 f9a9 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	2148      	movs	r1, #72	; 0x48
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	0152      	lsls	r2, r2, #5
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c8:	187a      	adds	r2, r7, r1
 80008ca:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <MX_TIM1_Init+0x160>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 ffaa 	bl	8003828 <HAL_TIM_ConfigClockSource>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008d8:	f000 f99a 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008dc:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <MX_TIM1_Init+0x160>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 fcdc 	bl	800329c <HAL_TIM_OC_Init>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008e8:	f000 f992 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_TIM1_Init+0x160>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f003 fbc7 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800090a:	f000 f981 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800090e:	2124      	movs	r1, #36	; 0x24
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 12000 - 1;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	4a24      	ldr	r2, [pc, #144]	; (80009ac <MX_TIM1_Init+0x16c>)
 800091a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093a:	1879      	adds	r1, r7, r1
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM1_Init+0x160>)
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f002 ff19 	bl	8003778 <HAL_TIM_OC_ConfigChannel>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800094a:	f000 f961 	bl	8000c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	0192      	lsls	r2, r2, #6
 8000972:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800097a:	1d3a      	adds	r2, r7, #4
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_TIM1_Init+0x160>)
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f003 fbe5 	bl	8004150 <HAL_TIMEx_ConfigBreakDeadTime>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800098a:	f000 f941 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <MX_TIM1_Init+0x160>)
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fbf5 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b016      	add	sp, #88	; 0x58
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	200002c0 	.word	0x200002c0
 80009a4:	40012c00 	.word	0x40012c00
 80009a8:	00005dc0 	.word	0x00005dc0
 80009ac:	00002edf 	.word	0x00002edf

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	2328      	movs	r3, #40	; 0x28
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f004 fd93 	bl	80054ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c6:	2320      	movs	r3, #32
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	2308      	movs	r3, #8
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f004 fd8b 	bl	80054ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	231c      	movs	r3, #28
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f004 fd84 	bl	80054ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	05d2      	lsls	r2, r2, #23
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 80009ee:	2263      	movs	r2, #99	; 0x63
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000 - 1;
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 80009fa:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <MX_TIM2_Init+0xfc>)
 80009fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fbf5 	bl	80031fc <HAL_TIM_Base_Init>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 f8fb 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	2128      	movs	r1, #40	; 0x28
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	0152      	lsls	r2, r2, #5
 8000a22:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a24:	187a      	adds	r2, r7, r1
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 fefc 	bl	8003828 <HAL_TIM_ConfigClockSource>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000a34:	f000 f8ec 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fc2e 	bl	800329c <HAL_TIM_OC_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a44:	f000 f8e4 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2120      	movs	r1, #32
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a56:	187a      	adds	r2, r7, r1
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f003 fb19 	bl	8004094 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a66:	f000 f8d3 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2230      	movs	r2, #48	; 0x30
 8000a6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6000 - 1;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <MX_TIM2_Init+0x100>)
 8000a74:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a82:	1d39      	adds	r1, r7, #4
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 fe75 	bl	8003778 <HAL_TIM_OC_ConfigChannel>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000a92:	f000 f8bd 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <MX_TIM2_Init+0xf8>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fb71 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b00e      	add	sp, #56	; 0x38
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000308 	.word	0x20000308
 8000aac:	0000752f 	.word	0x0000752f
 8000ab0:	0000176f 	.word	0x0000176f

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_USART1_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac0:	22e1      	movs	r2, #225	; 0xe1
 8000ac2:	0252      	lsls	r2, r2, #9
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f003 fb97 	bl	800422c <HAL_UART_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 f885 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000350 	.word	0x20000350
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_DMA_Init+0x48>)
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_DMA_Init+0x48>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_DMA_Init+0x48>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2009      	movs	r0, #9
 8000b38:	f001 f81e 	bl	8001b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b3c:	2009      	movs	r0, #9
 8000b3e:	f001 f830 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	200a      	movs	r0, #10
 8000b48:	f001 f816 	bl	8001b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f001 f828 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40021000 	.word	0x40021000

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	240c      	movs	r4, #12
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f004 fcbb 	bl	80054ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0309      	lsls	r1, r1, #12
 8000b80:	430a      	orrs	r2, r1
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	031b      	lsls	r3, r3, #12
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0289      	lsls	r1, r1, #10
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	4013      	ands	r3, r2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	02c9      	lsls	r1, r1, #11
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_GPIO_Init+0xa8>)
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	02db      	lsls	r3, r3, #11
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8000bca:	23c0      	movs	r3, #192	; 0xc0
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <MX_GPIO_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	f001 fb90 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|GREEN_LED_Pin;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	22c0      	movs	r2, #192	; 0xc0
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2201      	movs	r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <MX_GPIO_Init+0xac>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f001 fa0d 	bl	8002018 <HAL_GPIO_Init>

}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b009      	add	sp, #36	; 0x24
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000800 	.word	0x48000800

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x44>)
 8000c24:	699a      	ldr	r2, [r3, #24]
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_MspInit+0x44>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	619a      	str	r2, [r3, #24]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x44>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x44>)
 8000c3c:	69da      	ldr	r2, [r3, #28]
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_MspInit+0x44>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	0549      	lsls	r1, r1, #21
 8000c44:	430a      	orrs	r2, r1
 8000c46:	61da      	str	r2, [r3, #28]
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_MspInit+0x44>)
 8000c4a:	69da      	ldr	r2, [r3, #28]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	055b      	lsls	r3, r3, #21
 8000c50:	4013      	ands	r3, r2
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b08d      	sub	sp, #52	; 0x34
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	241c      	movs	r4, #28
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f004 fc38 	bl	80054ec <memset>
  if(hadc->Instance==ADC1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a4a      	ldr	r2, [pc, #296]	; (8000dac <HAL_ADC_MspInit+0x148>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d000      	beq.n	8000c88 <HAL_ADC_MspInit+0x24>
 8000c86:	e08d      	b.n	8000da4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c88:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000c8a:	699a      	ldr	r2, [r3, #24]
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0089      	lsls	r1, r1, #2
 8000c92:	430a      	orrs	r2, r1
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000c98:	699a      	ldr	r2, [r3, #24]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0309      	lsls	r1, r1, #12
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	031b      	lsls	r3, r3, #12
 8000cba:	4013      	ands	r3, r2
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	0289      	lsls	r1, r1, #10
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000cde:	695a      	ldr	r2, [r3, #20]
 8000ce0:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	02c9      	lsls	r1, r1, #11
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <HAL_ADC_MspInit+0x14c>)
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	02db      	lsls	r3, r3, #11
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	223f      	movs	r2, #63	; 0x3f
 8000cfc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2203      	movs	r2, #3
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <HAL_ADC_MspInit+0x150>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f001 f981 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	228f      	movs	r2, #143	; 0x8f
 8000d1a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2203      	movs	r2, #3
 8000d20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	193a      	adds	r2, r7, r4
 8000d2a:	2390      	movs	r3, #144	; 0x90
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	0011      	movs	r1, r2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f001 f971 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2203      	movs	r2, #3
 8000d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2203      	movs	r2, #3
 8000d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <HAL_ADC_MspInit+0x154>)
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	0010      	movs	r0, r2
 8000d50:	f001 f962 	bl	8002018 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_ADC_MspInit+0x15c>)
 8000d58:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	0052      	lsls	r2, r2, #1
 8000d72:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 ffc0 	bl	8001d10 <HAL_DMA_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8000d94:	f7ff ff3c 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_ADC_MspInit+0x158>)
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b00d      	add	sp, #52	; 0x34
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	40012400 	.word	0x40012400
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000800 	.word	0x48000800
 8000db8:	48000400 	.word	0x48000400
 8000dbc:	200000cc 	.word	0x200000cc
 8000dc0:	40020008 	.word	0x40020008

08000dc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b08b      	sub	sp, #44	; 0x2c
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	2414      	movs	r4, #20
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f004 fb88 	bl	80054ec <memset>
  if(hdac->Instance==DAC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_DAC_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_DAC_MspInit+0x88>)
 8000de8:	69da      	ldr	r2, [r3, #28]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_DAC_MspInit+0x88>)
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0589      	lsls	r1, r1, #22
 8000df0:	430a      	orrs	r2, r1
 8000df2:	61da      	str	r2, [r3, #28]
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_DAC_MspInit+0x88>)
 8000df6:	69da      	ldr	r2, [r3, #28]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	059b      	lsls	r3, r3, #22
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_DAC_MspInit+0x88>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_DAC_MspInit+0x88>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0289      	lsls	r1, r1, #10
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_DAC_MspInit+0x88>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	029b      	lsls	r3, r3, #10
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2210      	movs	r2, #16
 8000e22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	2203      	movs	r2, #3
 8000e28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	193a      	adds	r2, r7, r4
 8000e32:	2390      	movs	r3, #144	; 0x90
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 f8ed 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b00b      	add	sp, #44	; 0x2c
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40007400 	.word	0x40007400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b08b      	sub	sp, #44	; 0x2c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	2414      	movs	r4, #20
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	2314      	movs	r3, #20
 8000e60:	001a      	movs	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f004 fb42 	bl	80054ec <memset>
  if(hi2c->Instance==I2C1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <HAL_I2C_MspInit+0x128>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d000      	beq.n	8000e74 <HAL_I2C_MspInit+0x24>
 8000e72:	e07d      	b.n	8000f70 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <HAL_I2C_MspInit+0x12c>)
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <HAL_I2C_MspInit+0x12c>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	02c9      	lsls	r1, r1, #11
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <HAL_I2C_MspInit+0x12c>)
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	02db      	lsls	r3, r3, #11
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e90:	0021      	movs	r1, r4
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	22c0      	movs	r2, #192	; 0xc0
 8000e96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2212      	movs	r2, #18
 8000e9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	4a33      	ldr	r2, [pc, #204]	; (8000f80 <HAL_I2C_MspInit+0x130>)
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	f001 f8ae 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_I2C_MspInit+0x12c>)
 8000ebe:	69da      	ldr	r2, [r3, #28]
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <HAL_I2C_MspInit+0x12c>)
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	0389      	lsls	r1, r1, #14
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	61da      	str	r2, [r3, #28]
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_I2C_MspInit+0x12c>)
 8000ecc:	69da      	ldr	r2, [r3, #28]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	039b      	lsls	r3, r3, #14
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000eda:	4a2b      	ldr	r2, [pc, #172]	; (8000f88 <HAL_I2C_MspInit+0x138>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 ff00 	bl	8001d10 <HAL_DMA_Init>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8000f14:	f7ff fe7c 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_I2C_MspInit+0x134>)
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_I2C_MspInit+0x140>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 feda 	bl	8001d10 <HAL_DMA_Init>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8000f60:	f7ff fe56 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_I2C_MspInit+0x13c>)
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b00b      	add	sp, #44	; 0x2c
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	20000170 	.word	0x20000170
 8000f88:	40020030 	.word	0x40020030
 8000f8c:	200001b4 	.word	0x200001b4
 8000f90:	4002001c 	.word	0x4002001c

08000f94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b08d      	sub	sp, #52	; 0x34
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	241c      	movs	r4, #28
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f004 faa0 	bl	80054ec <memset>
  if(hspi->Instance==SPI1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d156      	bne.n	8001064 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0149      	lsls	r1, r1, #5
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0289      	lsls	r1, r1, #10
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	02c9      	lsls	r1, r1, #11
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	02db      	lsls	r3, r3, #11
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2260      	movs	r2, #96	; 0x60
 800100e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2202      	movs	r2, #2
 8001014:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2203      	movs	r2, #3
 8001020:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	193a      	adds	r2, r7, r4
 800102a:	2390      	movs	r3, #144	; 0x90
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fff1 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001036:	0021      	movs	r1, r4
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2220      	movs	r2, #32
 800103c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2202      	movs	r2, #2
 8001042:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2203      	movs	r2, #3
 800104e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	187b      	adds	r3, r7, r1
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 800105a:	0019      	movs	r1, r3
 800105c:	0010      	movs	r0, r2
 800105e:	f000 ffdb 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001062:	e037      	b.n	80010d4 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_SPI_MspInit+0x154>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d132      	bne.n	80010d4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8001070:	69da      	ldr	r2, [r3, #28]
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	01c9      	lsls	r1, r1, #7
 8001078:	430a      	orrs	r2, r1
 800107a:	61da      	str	r2, [r3, #28]
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 800107e:	69da      	ldr	r2, [r3, #28]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	02c9      	lsls	r1, r1, #11
 8001094:	430a      	orrs	r2, r1
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	02db      	lsls	r3, r3, #11
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010a6:	211c      	movs	r1, #28
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	22e0      	movs	r2, #224	; 0xe0
 80010ac:	0212      	lsls	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2202      	movs	r2, #2
 80010b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2203      	movs	r2, #3
 80010c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 80010cc:	0019      	movs	r1, r3
 80010ce:	0010      	movs	r0, r2
 80010d0:	f000 ffa2 	bl	8002018 <HAL_GPIO_Init>
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b00d      	add	sp, #52	; 0x34
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	40003800 	.word	0x40003800

080010ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_TIM_Base_MspInit+0x8c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11e      	bne.n	800113c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_TIM_Base_MspInit+0x90>)
 8001100:	699a      	ldr	r2, [r3, #24]
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_TIM_Base_MspInit+0x90>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0109      	lsls	r1, r1, #4
 8001108:	430a      	orrs	r2, r1
 800110a:	619a      	str	r2, [r3, #24]
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_TIM_Base_MspInit+0x90>)
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	200d      	movs	r0, #13
 8001120:	f000 fd2a 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001124:	200d      	movs	r0, #13
 8001126:	f000 fd3c 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200e      	movs	r0, #14
 8001130:	f000 fd22 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001134:	200e      	movs	r0, #14
 8001136:	f000 fd34 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800113a:	e019      	b.n	8001170 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	429a      	cmp	r2, r3
 8001146:	d113      	bne.n	8001170 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_TIM_Base_MspInit+0x90>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_TIM_Base_MspInit+0x90>)
 800114e:	2101      	movs	r1, #1
 8001150:	430a      	orrs	r2, r1
 8001152:	61da      	str	r2, [r3, #28]
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_TIM_Base_MspInit+0x90>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	200f      	movs	r0, #15
 8001166:	f000 fd07 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 fd19 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b004      	add	sp, #16
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012c00 	.word	0x40012c00
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	2414      	movs	r4, #20
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0018      	movs	r0, r3
 800118e:	2314      	movs	r3, #20
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f004 f9aa 	bl	80054ec <memset>
  if(htim->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2c      	ldr	r2, [pc, #176]	; (8001250 <HAL_TIM_MspPostInit+0xd0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d126      	bne.n	80011f0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_TIM_MspPostInit+0xd4>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_TIM_MspPostInit+0xd4>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0289      	lsls	r1, r1, #10
 80011ac:	430a      	orrs	r2, r1
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_TIM_MspPostInit+0xd4>)
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	0021      	movs	r1, r4
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2202      	movs	r2, #2
 80011cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2202      	movs	r2, #2
 80011de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	187a      	adds	r2, r7, r1
 80011e2:	2390      	movs	r3, #144	; 0x90
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 ff15 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ee:	e02a      	b.n	8001246 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d124      	bne.n	8001246 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_TIM_MspPostInit+0xd4>)
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_TIM_MspPostInit+0xd4>)
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	02c9      	lsls	r1, r1, #11
 8001206:	430a      	orrs	r2, r1
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_TIM_MspPostInit+0xd4>)
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	02db      	lsls	r3, r3, #11
 8001212:	4013      	ands	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001218:	2114      	movs	r1, #20
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2202      	movs	r2, #2
 8001226:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2202      	movs	r2, #2
 8001238:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	187b      	adds	r3, r7, r1
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_TIM_MspPostInit+0xd8>)
 800123e:	0019      	movs	r1, r3
 8001240:	0010      	movs	r0, r2
 8001242:	f000 fee9 	bl	8002018 <HAL_GPIO_Init>
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b00b      	add	sp, #44	; 0x2c
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	40012c00 	.word	0x40012c00
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	2414      	movs	r4, #20
 8001266:	193b      	adds	r3, r7, r4
 8001268:	0018      	movs	r0, r3
 800126a:	2314      	movs	r3, #20
 800126c:	001a      	movs	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f004 f93c 	bl	80054ec <memset>
  if(huart->Instance==USART1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_UART_MspInit+0xa4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d13b      	bne.n	80012f6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_UART_MspInit+0xa8>)
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_UART_MspInit+0xa8>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	01c9      	lsls	r1, r1, #7
 8001288:	430a      	orrs	r2, r1
 800128a:	619a      	str	r2, [r3, #24]
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_UART_MspInit+0xa8>)
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	01db      	lsls	r3, r3, #7
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_UART_MspInit+0xa8>)
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_UART_MspInit+0xa8>)
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	0289      	lsls	r1, r1, #10
 80012a4:	430a      	orrs	r2, r1
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_UART_MspInit+0xa8>)
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	22c0      	movs	r2, #192	; 0xc0
 80012ba:	00d2      	lsls	r2, r2, #3
 80012bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	0021      	movs	r1, r4
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2202      	movs	r2, #2
 80012c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2203      	movs	r2, #3
 80012d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2201      	movs	r2, #1
 80012d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	187a      	adds	r2, r7, r1
 80012da:	2390      	movs	r3, #144	; 0x90
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 fe99 	bl	8002018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201b      	movs	r0, #27
 80012ec:	f000 fc44 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012f0:	201b      	movs	r0, #27
 80012f2:	f000 fc56 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b00b      	add	sp, #44	; 0x2c
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40013800 	.word	0x40013800
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f900 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <DMA1_Channel1_IRQHandler+0x14>)
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fdab 	bl	8001e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	200000cc 	.word	0x200000cc

08001350 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001356:	0018      	movs	r0, r3
 8001358:	f000 fd9f 	bl	8001e9a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <DMA1_Channel2_3_IRQHandler+0x20>)
 800135e:	0018      	movs	r0, r3
 8001360:	f000 fd9b 	bl	8001e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	200001b4 	.word	0x200001b4
 8001370:	20000170 	.word	0x20000170

08001374 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800137a:	0018      	movs	r0, r3
 800137c:	f002 f8e6 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	200002c0 	.word	0x200002c0

0800138c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <TIM1_CC_IRQHandler+0x14>)
 8001392:	0018      	movs	r0, r3
 8001394:	f002 f8da 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	200002c0 	.word	0x200002c0

080013a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <TIM2_IRQHandler+0x14>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 f8ce 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	20000308 	.word	0x20000308

080013bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <USART1_IRQHandler+0x14>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f003 f90c 	bl	80045e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	20000350 	.word	0x20000350

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f004 f848 	bl	8005498 <__errno>
 8001408:	0003      	movs	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	2301      	movs	r3, #1
 8001410:	425b      	negs	r3, r3
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	18d2      	adds	r2, r2, r3
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b006      	add	sp, #24
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20002000 	.word	0x20002000
 8001434:	00000400 	.word	0x00000400
 8001438:	200003e0 	.word	0x200003e0
 800143c:	200003f8 	.word	0x200003f8

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490e      	ldr	r1, [pc, #56]	; (800148c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0b      	ldr	r4, [pc, #44]	; (8001498 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001476:	f7ff ffe3 	bl	8001440 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800147a:	f004 f813 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147e:	f7fe fef3 	bl	8000268 <main>

08001482 <LoopForever>:

LoopForever:
    b LoopForever
 8001482:	e7fe      	b.n	8001482 <LoopForever>
  ldr   r0, =_estack
 8001484:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001490:	08005e6c 	.word	0x08005e6c
  ldr r2, =_sbss
 8001494:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001498:	200003f8 	.word	0x200003f8

0800149c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_COMP_IRQHandler>
	...

080014a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_Init+0x24>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_Init+0x24>)
 80014aa:	2110      	movs	r1, #16
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f809 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b6:	f7ff fbb1 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	40022000 	.word	0x40022000

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_InitTick+0x5c>)
 80014d2:	681c      	ldr	r4, [r3, #0]
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_InitTick+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	0019      	movs	r1, r3
 80014da:	23fa      	movs	r3, #250	; 0xfa
 80014dc:	0098      	lsls	r0, r3, #2
 80014de:	f7fe fe25 	bl	800012c <__udivsi3>
 80014e2:	0003      	movs	r3, r0
 80014e4:	0019      	movs	r1, r3
 80014e6:	0020      	movs	r0, r4
 80014e8:	f7fe fe20 	bl	800012c <__udivsi3>
 80014ec:	0003      	movs	r3, r0
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 fb67 	bl	8001bc2 <HAL_SYSTICK_Config>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e00f      	b.n	800151c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d80b      	bhi.n	800151a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2301      	movs	r3, #1
 8001506:	425b      	negs	r3, r3
 8001508:	2200      	movs	r2, #0
 800150a:	0018      	movs	r0, r3
 800150c:	f000 fb34 	bl	8001b78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_InitTick+0x64>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b003      	add	sp, #12
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	20000008 	.word	0x20000008
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x1c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	001a      	movs	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	18d2      	adds	r2, r2, r3
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_IncTick+0x20>)
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	20000008 	.word	0x20000008
 8001550:	200003e4 	.word	0x200003e4

08001554 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <HAL_GetTick+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	200003e4 	.word	0x200003e4

08001568 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_SuspendTick+0x18>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_SuspendTick+0x18>)
 8001572:	2102      	movs	r1, #2
 8001574:	438a      	bics	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e125      	b.n	80017ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10a      	bne.n	80015c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2234      	movs	r2, #52	; 0x34
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff fb52 	bl	8000c64 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	2210      	movs	r2, #16
 80015c6:	4013      	ands	r3, r2
 80015c8:	d000      	beq.n	80015cc <HAL_ADC_Init+0x48>
 80015ca:	e103      	b.n	80017d4 <HAL_ADC_Init+0x250>
 80015cc:	230f      	movs	r3, #15
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d000      	beq.n	80015d8 <HAL_ADC_Init+0x54>
 80015d6:	e0fd      	b.n	80017d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2204      	movs	r2, #4
 80015e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80015e2:	d000      	beq.n	80015e6 <HAL_ADC_Init+0x62>
 80015e4:	e0f6      	b.n	80017d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	4a83      	ldr	r2, [pc, #524]	; (80017f8 <HAL_ADC_Init+0x274>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	2202      	movs	r2, #2
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
 8001600:	2b01      	cmp	r3, #1
 8001602:	d112      	bne.n	800162a <HAL_ADC_Init+0xa6>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	2b01      	cmp	r3, #1
 8001610:	d009      	beq.n	8001626 <HAL_ADC_Init+0xa2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	401a      	ands	r2, r3
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	429a      	cmp	r2, r3
 8001624:	d101      	bne.n	800162a <HAL_ADC_Init+0xa6>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_ADC_Init+0xa8>
 800162a:	2300      	movs	r3, #0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d116      	bne.n	800165e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2218      	movs	r2, #24
 8001638:	4393      	bics	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	0899      	lsrs	r1, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4964      	ldr	r1, [pc, #400]	; (80017fc <HAL_ADC_Init+0x278>)
 800166a:	400a      	ands	r2, r1
 800166c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7e1b      	ldrb	r3, [r3, #24]
 8001672:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e5b      	ldrb	r3, [r3, #25]
 8001678:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e9b      	ldrb	r3, [r3, #26]
 8001680:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001682:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	2b01      	cmp	r3, #1
 800168a:	d002      	beq.n	8001692 <HAL_ADC_Init+0x10e>
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	e000      	b.n	8001694 <HAL_ADC_Init+0x110>
 8001692:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001694:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800169a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_Init+0x124>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e000      	b.n	80016aa <HAL_ADC_Init+0x126>
 80016a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80016aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2124      	movs	r1, #36	; 0x24
 80016b0:	5c5b      	ldrb	r3, [r3, r1]
 80016b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7edb      	ldrb	r3, [r3, #27]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d115      	bne.n	80016f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7e9b      	ldrb	r3, [r3, #26]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	0252      	lsls	r2, r2, #9
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	e00b      	b.n	80016f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	2220      	movs	r2, #32
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	2201      	movs	r2, #1
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	23c2      	movs	r3, #194	; 0xc2
 80016f6:	33ff      	adds	r3, #255	; 0xff
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d007      	beq.n	800170c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001704:	4313      	orrs	r3, r2
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4313      	orrs	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d9      	ldr	r1, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	430a      	orrs	r2, r1
 800171a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	429a      	cmp	r2, r3
 8001726:	d01b      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b01      	cmp	r3, #1
 800172e:	d017      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	2b02      	cmp	r3, #2
 8001736:	d013      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	2b03      	cmp	r3, #3
 800173e:	d00f      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00b      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	2b05      	cmp	r3, #5
 800174e:	d007      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	2b06      	cmp	r3, #6
 8001756:	d003      	beq.n	8001760 <HAL_ADC_Init+0x1dc>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	2b07      	cmp	r3, #7
 800175e:	d112      	bne.n	8001786 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2107      	movs	r1, #7
 800176c:	438a      	bics	r2, r1
 800176e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6959      	ldr	r1, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	2207      	movs	r2, #7
 800177c:	401a      	ands	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <HAL_ADC_Init+0x27c>)
 800178e:	4013      	ands	r3, r2
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d10b      	bne.n	80017ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	2203      	movs	r2, #3
 80017a2:	4393      	bics	r3, r2
 80017a4:	2201      	movs	r2, #1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017ac:	e01c      	b.n	80017e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	2212      	movs	r2, #18
 80017b4:	4393      	bics	r3, r2
 80017b6:	2210      	movs	r2, #16
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	2201      	movs	r2, #1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80017ca:	230f      	movs	r3, #15
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017d2:	e009      	b.n	80017e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	2210      	movs	r2, #16
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	fffffefd 	.word	0xfffffefd
 80017fc:	fffe0219 	.word	0xfffe0219
 8001800:	833fffe7 	.word	0x833fffe7

08001804 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180e:	230f      	movs	r3, #15
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	055b      	lsls	r3, r3, #21
 8001822:	429a      	cmp	r2, r3
 8001824:	d011      	beq.n	800184a <HAL_ADC_ConfigChannel+0x46>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d00d      	beq.n	800184a <HAL_ADC_ConfigChannel+0x46>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	2b02      	cmp	r3, #2
 8001834:	d009      	beq.n	800184a <HAL_ADC_ConfigChannel+0x46>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	2b03      	cmp	r3, #3
 800183c:	d005      	beq.n	800184a <HAL_ADC_ConfigChannel+0x46>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	2b04      	cmp	r3, #4
 8001844:	d001      	beq.n	800184a <HAL_ADC_ConfigChannel+0x46>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2234      	movs	r2, #52	; 0x34
 800184e:	5c9b      	ldrb	r3, [r3, r2]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x54>
 8001854:	2302      	movs	r3, #2
 8001856:	e0d0      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1f6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2234      	movs	r2, #52	; 0x34
 800185c:	2101      	movs	r1, #1
 800185e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d000      	beq.n	800186e <HAL_ADC_ConfigChannel+0x6a>
 800186c:	e0b4      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a64      	ldr	r2, [pc, #400]	; (8001a04 <HAL_ADC_ConfigChannel+0x200>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d100      	bne.n	800187a <HAL_ADC_ConfigChannel+0x76>
 8001878:	e082      	b.n	8001980 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	055b      	lsls	r3, r3, #21
 8001898:	429a      	cmp	r2, r3
 800189a:	d037      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d033      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d02f      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d02b      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d027      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d023      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d01f      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	2b07      	cmp	r3, #7
 80018d2:	d01b      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2107      	movs	r1, #7
 80018e0:	400b      	ands	r3, r1
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d012      	beq.n	800190c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2107      	movs	r1, #7
 80018f2:	438a      	bics	r2, r1
 80018f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6959      	ldr	r1, [r3, #20]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2207      	movs	r2, #7
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d007      	beq.n	8001924 <HAL_ADC_ConfigChannel+0x120>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b11      	cmp	r3, #17
 800191a:	d003      	beq.n	8001924 <HAL_ADC_ConfigChannel+0x120>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b12      	cmp	r3, #18
 8001922:	d163      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_ADC_ConfigChannel+0x204>)
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d009      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x140>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b11      	cmp	r3, #17
 8001936:	d102      	bne.n	800193e <HAL_ADC_ConfigChannel+0x13a>
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	03db      	lsls	r3, r3, #15
 800193c:	e004      	b.n	8001948 <HAL_ADC_ConfigChannel+0x144>
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	045b      	lsls	r3, r3, #17
 8001942:	e001      	b.n	8001948 <HAL_ADC_ConfigChannel+0x144>
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_ADC_ConfigChannel+0x204>)
 800194a:	430b      	orrs	r3, r1
 800194c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d14a      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_ADC_ConfigChannel+0x208>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	492d      	ldr	r1, [pc, #180]	; (8001a10 <HAL_ADC_ConfigChannel+0x20c>)
 800195c:	0018      	movs	r0, r3
 800195e:	f7fe fbe5 	bl	800012c <__udivsi3>
 8001962:	0003      	movs	r3, r0
 8001964:	001a      	movs	r2, r3
 8001966:	0013      	movs	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	189b      	adds	r3, r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001970:	e002      	b.n	8001978 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x16e>
 800197e:	e035      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	4099      	lsls	r1, r3
 800198e:	000b      	movs	r3, r1
 8001990:	43d9      	mvns	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	400a      	ands	r2, r1
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d007      	beq.n	80019b2 <HAL_ADC_ConfigChannel+0x1ae>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b11      	cmp	r3, #17
 80019a8:	d003      	beq.n	80019b2 <HAL_ADC_ConfigChannel+0x1ae>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d11c      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_ADC_ConfigChannel+0x204>)
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d007      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x1ca>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b11      	cmp	r3, #17
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x1c6>
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_ADC_ConfigChannel+0x210>)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x1cc>
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_ConfigChannel+0x214>)
 80019cc:	e000      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x1cc>
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_ADC_ConfigChannel+0x218>)
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_ADC_ConfigChannel+0x204>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e009      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	2220      	movs	r2, #32
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2234      	movs	r2, #52	; 0x34
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80019f4:	230f      	movs	r3, #15
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	781b      	ldrb	r3, [r3, #0]
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	00001001 	.word	0x00001001
 8001a08:	40012708 	.word	0x40012708
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	000f4240 	.word	0x000f4240
 8001a14:	ffbfffff 	.word	0xffbfffff
 8001a18:	feffffff 	.word	0xfeffffff
 8001a1c:	ff7fffff 	.word	0xff7fffff

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	0002      	movs	r2, r0
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b7f      	cmp	r3, #127	; 0x7f
 8001a32:	d809      	bhi.n	8001a48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	001a      	movs	r2, r3
 8001a3a:	231f      	movs	r3, #31
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_EnableIRQ+0x30>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	4091      	lsls	r1, r2
 8001a44:	000a      	movs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
  }
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b7f      	cmp	r3, #127	; 0x7f
 8001a68:	d828      	bhi.n	8001abc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <__NVIC_SetPriority+0xd4>)
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	33c0      	adds	r3, #192	; 0xc0
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	589b      	ldr	r3, [r3, r2]
 8001a7a:	1dfa      	adds	r2, r7, #7
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	2203      	movs	r2, #3
 8001a82:	400a      	ands	r2, r1
 8001a84:	00d2      	lsls	r2, r2, #3
 8001a86:	21ff      	movs	r1, #255	; 0xff
 8001a88:	4091      	lsls	r1, r2
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	43d2      	mvns	r2, r2
 8001a8e:	401a      	ands	r2, r3
 8001a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	22ff      	movs	r2, #255	; 0xff
 8001a98:	401a      	ands	r2, r3
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	4003      	ands	r3, r0
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <__NVIC_SetPriority+0xd4>)
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b25b      	sxtb	r3, r3
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	33c0      	adds	r3, #192	; 0xc0
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001aba:	e031      	b.n	8001b20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <__NVIC_SetPriority+0xd8>)
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	3b08      	subs	r3, #8
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3306      	adds	r3, #6
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	18d3      	adds	r3, r2, r3
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1dfa      	adds	r2, r7, #7
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	0011      	movs	r1, r2
 8001adc:	2203      	movs	r2, #3
 8001ade:	400a      	ands	r2, r1
 8001ae0:	00d2      	lsls	r2, r2, #3
 8001ae2:	21ff      	movs	r1, #255	; 0xff
 8001ae4:	4091      	lsls	r1, r2
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	43d2      	mvns	r2, r2
 8001aea:	401a      	ands	r2, r3
 8001aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	401a      	ands	r2, r3
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	0018      	movs	r0, r3
 8001afc:	2303      	movs	r3, #3
 8001afe:	4003      	ands	r3, r0
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b04:	4809      	ldr	r0, [pc, #36]	; (8001b2c <__NVIC_SetPriority+0xd8>)
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	001c      	movs	r4, r3
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	4023      	ands	r3, r4
 8001b10:	3b08      	subs	r3, #8
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	430a      	orrs	r2, r1
 8001b16:	3306      	adds	r3, #6
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	18c3      	adds	r3, r0, r3
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b003      	add	sp, #12
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1e5a      	subs	r2, r3, #1
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	045b      	lsls	r3, r3, #17
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d301      	bcc.n	8001b48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b44:	2301      	movs	r3, #1
 8001b46:	e010      	b.n	8001b6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <SysTick_Config+0x44>)
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	3a01      	subs	r2, #1
 8001b4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b50:	2301      	movs	r3, #1
 8001b52:	425b      	negs	r3, r3
 8001b54:	2103      	movs	r1, #3
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff ff7c 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x44>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x44>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	210f      	movs	r1, #15
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	1c02      	adds	r2, r0, #0
 8001b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	0002      	movs	r2, r0
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff33 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff ffaf 	bl	8001b30 <SysTick_Config>
 8001bd2:	0003      	movs	r3, r0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e015      	b.n	8001c1a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	791b      	ldrb	r3, [r3, #4]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d106      	bne.n	8001c06 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff f8df 	bl	8000dc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_DAC_ConfigChannel+0x20>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e029      	b.n	8001c96 <HAL_DAC_ConfigChannel+0x74>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8001c56:	223e      	movs	r2, #62	; 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	4013      	ands	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b006      	add	sp, #24
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	795b      	ldrb	r3, [r3, #5]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_DAC_Start+0x16>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e028      	b.n	8001d06 <HAL_DAC_Start+0x68>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	223c      	movs	r2, #60	; 0x3c
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b3c      	cmp	r3, #60	; 0x3c
 8001ce6:	d107      	bne.n	8001cf8 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e036      	b.n	8001d94 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2221      	movs	r2, #33	; 0x21
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_DMA_Init+0x8c>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 f932 	bl	8001fe0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	2100      	movs	r1, #0
 8001d90:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}  
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	ffffc00f 	.word	0xffffc00f

08001da0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2221      	movs	r2, #33	; 0x21
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d008      	beq.n	8001dc6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2204      	movs	r2, #4
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e020      	b.n	8001e08 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	210e      	movs	r1, #14
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	438a      	bics	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	2101      	movs	r1, #1
 8001df0:	4091      	lsls	r1, r2
 8001df2:	000a      	movs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2221      	movs	r2, #33	; 0x21
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	210f      	movs	r1, #15
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2221      	movs	r2, #33	; 0x21
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d006      	beq.n	8001e3a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e028      	b.n	8001e8c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	210e      	movs	r1, #14
 8001e46:	438a      	bics	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	438a      	bics	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2101      	movs	r1, #1
 8001e64:	4091      	lsls	r1, r2
 8001e66:	000a      	movs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	0010      	movs	r0, r2
 8001e8a:	4798      	blx	r3
    } 
  }
  return status;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d024      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x72>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d020      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4091      	lsls	r1, r2
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d100      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x66>
 8001efe:	e06a      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	0010      	movs	r0, r2
 8001f08:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f0a:	e064      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2202      	movs	r2, #2
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d02b      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xda>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d027      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d10b      	bne.n	8001f48 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	210a      	movs	r1, #10
 8001f3c:	438a      	bics	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2221      	movs	r2, #33	; 0x21
 8001f44:	2101      	movs	r1, #1
 8001f46:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	2102      	movs	r1, #2
 8001f52:	4091      	lsls	r1, r2
 8001f54:	000a      	movs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d036      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	0010      	movs	r0, r2
 8001f70:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f72:	e030      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2208      	movs	r2, #8
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	d028      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2208      	movs	r2, #8
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d024      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	210e      	movs	r1, #14
 8001f98:	438a      	bics	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4091      	lsls	r1, r2
 8001fa8:	000a      	movs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2221      	movs	r2, #33	; 0x21
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	0010      	movs	r0, r2
 8001fd2:	4798      	blx	r3
    }
   }
}  
 8001fd4:	e7ff      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x13c>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a08      	ldr	r2, [pc, #32]	; (8002010 <DMA_CalcBaseAndBitshift+0x30>)
 8001fee:	4694      	mov	ip, r2
 8001ff0:	4463      	add	r3, ip
 8001ff2:	2114      	movs	r1, #20
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7fe f899 	bl	800012c <__udivsi3>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <DMA_CalcBaseAndBitshift+0x34>)
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}
 8002010:	bffdfff8 	.word	0xbffdfff8
 8002014:	40020000 	.word	0x40020000

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e14f      	b.n	80022c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4091      	lsls	r1, r2
 8002032:	000a      	movs	r2, r1
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d100      	bne.n	8002040 <HAL_GPIO_Init+0x28>
 800203e:	e140      	b.n	80022c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	4013      	ands	r3, r2
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002054:	2b02      	cmp	r3, #2
 8002056:	d130      	bne.n	80020ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	409a      	lsls	r2, r3
 8002066:	0013      	movs	r3, r2
 8002068:	43da      	mvns	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	409a      	lsls	r2, r3
 800207a:	0013      	movs	r3, r2
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800208e:	2201      	movs	r2, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	2201      	movs	r2, #1
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2203      	movs	r2, #3
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d017      	beq.n	80020f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	43da      	mvns	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	409a      	lsls	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d123      	bne.n	800214a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	58d3      	ldr	r3, [r2, r3]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2207      	movs	r2, #7
 8002114:	4013      	ands	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	43da      	mvns	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2107      	movs	r1, #7
 800212e:	400b      	ands	r3, r1
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	409a      	lsls	r2, r3
 8002134:	0013      	movs	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	6939      	ldr	r1, [r7, #16]
 8002148:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	43da      	mvns	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	401a      	ands	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	0013      	movs	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	23c0      	movs	r3, #192	; 0xc0
 8002184:	029b      	lsls	r3, r3, #10
 8002186:	4013      	ands	r3, r2
 8002188:	d100      	bne.n	800218c <HAL_GPIO_Init+0x174>
 800218a:	e09a      	b.n	80022c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <HAL_GPIO_Init+0x2c8>)
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <HAL_GPIO_Init+0x2c8>)
 8002192:	2101      	movs	r1, #1
 8002194:	430a      	orrs	r2, r1
 8002196:	619a      	str	r2, [r3, #24]
 8002198:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_GPIO_Init+0x2c8>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	589b      	ldr	r3, [r3, r2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	409a      	lsls	r2, r3
 80021be:	0013      	movs	r3, r2
 80021c0:	43da      	mvns	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	2390      	movs	r3, #144	; 0x90
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x1e2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x1de>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a43      	ldr	r2, [pc, #268]	; (80022ec <HAL_GPIO_Init+0x2d4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x1da>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_GPIO_Init+0x2d8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x1d6>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021fa:	2300      	movs	r3, #0
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	2103      	movs	r1, #3
 8002200:	400a      	ands	r2, r1
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43da      	mvns	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	025b      	lsls	r3, r3, #9
 8002232:	4013      	ands	r3, r2
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43da      	mvns	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	029b      	lsls	r3, r3, #10
 800225c:	4013      	ands	r3, r2
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43da      	mvns	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	035b      	lsls	r3, r3, #13
 8002286:	4013      	ands	r3, r2
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43da      	mvns	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	4013      	ands	r3, r2
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	40da      	lsrs	r2, r3
 80022d0:	1e13      	subs	r3, r2, #0
 80022d2:	d000      	beq.n	80022d6 <HAL_GPIO_Init+0x2be>
 80022d4:	e6a8      	b.n	8002028 <HAL_GPIO_Init+0x10>
  } 
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	0008      	movs	r0, r1
 8002302:	0011      	movs	r1, r2
 8002304:	1cbb      	adds	r3, r7, #2
 8002306:	1c02      	adds	r2, r0, #0
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	1c7b      	adds	r3, r7, #1
 800230c:	1c0a      	adds	r2, r1, #0
 800230e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	1c7b      	adds	r3, r7, #1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002318:	1cbb      	adds	r3, r7, #2
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002322:	1cbb      	adds	r3, r7, #2
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e082      	b.n	800244c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2241      	movs	r2, #65	; 0x41
 800234a:	5c9b      	ldrb	r3, [r3, r2]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	2100      	movs	r1, #0
 8002358:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f7fe fd77 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2241      	movs	r2, #65	; 0x41
 8002366:	2124      	movs	r1, #36	; 0x24
 8002368:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	438a      	bics	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4934      	ldr	r1, [pc, #208]	; (8002454 <HAL_I2C_Init+0x120>)
 8002384:	400a      	ands	r2, r1
 8002386:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4931      	ldr	r1, [pc, #196]	; (8002458 <HAL_I2C_Init+0x124>)
 8002394:	400a      	ands	r2, r1
 8002396:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	0209      	lsls	r1, r1, #8
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	e007      	b.n	80023c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2184      	movs	r1, #132	; 0x84
 80023bc:	0209      	lsls	r1, r1, #8
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d104      	bne.n	80023d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	491f      	ldr	r1, [pc, #124]	; (800245c <HAL_I2C_Init+0x128>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	491a      	ldr	r1, [pc, #104]	; (8002458 <HAL_I2C_Init+0x124>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69d9      	ldr	r1, [r3, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2241      	movs	r2, #65	; 0x41
 8002438:	2120      	movs	r1, #32
 800243a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2242      	movs	r2, #66	; 0x42
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	f0ffffff 	.word	0xf0ffffff
 8002458:	ffff7fff 	.word	0xffff7fff
 800245c:	02008000 	.word	0x02008000

08002460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	; 0x41
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	d138      	bne.n	80024e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2240      	movs	r2, #64	; 0x40
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e032      	b.n	80024ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2241      	movs	r2, #65	; 0x41
 8002490:	2124      	movs	r1, #36	; 0x24
 8002492:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4911      	ldr	r1, [pc, #68]	; (80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2241      	movs	r2, #65	; 0x41
 80024d8:	2120      	movs	r1, #32
 80024da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b002      	add	sp, #8
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	ffffefff 	.word	0xffffefff

080024f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2241      	movs	r2, #65	; 0x41
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	d139      	bne.n	8002582 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	5c9b      	ldrb	r3, [r3, r2]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002518:	2302      	movs	r3, #2
 800251a:	e033      	b.n	8002584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2241      	movs	r2, #65	; 0x41
 8002528:	2124      	movs	r1, #36	; 0x24
 800252a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2241      	movs	r2, #65	; 0x41
 8002572:	2120      	movs	r1, #32
 8002574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	fffff0ff 	.word	0xfffff0ff

08002590 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	000a      	movs	r2, r1
 800259a:	1cfb      	adds	r3, r7, #3
 800259c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_PWR_EnterSTOPMode+0x60>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2203      	movs	r2, #3
 80025ac:	4393      	bics	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_PWR_EnterSTOPMode+0x60>)
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_PWR_EnterSTOPMode+0x64>)
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_PWR_EnterSTOPMode+0x64>)
 80025c4:	2104      	movs	r1, #4
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80025ca:	1cfb      	adds	r3, r7, #3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80025d2:	bf30      	wfi
 80025d4:	e002      	b.n	80025dc <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80025d6:	bf40      	sev
    __WFE();
 80025d8:	bf20      	wfe
    __WFE();
 80025da:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_PWR_EnterSTOPMode+0x64>)
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_PWR_EnterSTOPMode+0x64>)
 80025e2:	2104      	movs	r1, #4
 80025e4:	438a      	bics	r2, r1
 80025e6:	611a      	str	r2, [r3, #16]
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40007000 	.word	0x40007000
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e301      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d100      	bne.n	8002616 <HAL_RCC_OscConfig+0x1e>
 8002614:	e08d      	b.n	8002732 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002616:	4bc3      	ldr	r3, [pc, #780]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	220c      	movs	r2, #12
 800261c:	4013      	ands	r3, r2
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00e      	beq.n	8002640 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002622:	4bc0      	ldr	r3, [pc, #768]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	220c      	movs	r2, #12
 8002628:	4013      	ands	r3, r2
 800262a:	2b08      	cmp	r3, #8
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x64>
 800262e:	4bbd      	ldr	r3, [pc, #756]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	025b      	lsls	r3, r3, #9
 8002636:	401a      	ands	r2, r3
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	025b      	lsls	r3, r3, #9
 800263c:	429a      	cmp	r2, r3
 800263e:	d10d      	bne.n	800265c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4bb8      	ldr	r3, [pc, #736]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d100      	bne.n	800264e <HAL_RCC_OscConfig+0x56>
 800264c:	e070      	b.n	8002730 <HAL_RCC_OscConfig+0x138>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d000      	beq.n	8002658 <HAL_RCC_OscConfig+0x60>
 8002656:	e06b      	b.n	8002730 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e2d8      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x7c>
 8002664:	4baf      	ldr	r3, [pc, #700]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4bae      	ldr	r3, [pc, #696]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0249      	lsls	r1, r1, #9
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e02f      	b.n	80026d4 <HAL_RCC_OscConfig+0xdc>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x9e>
 800267c:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4ba8      	ldr	r3, [pc, #672]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002682:	49a9      	ldr	r1, [pc, #676]	; (8002928 <HAL_RCC_OscConfig+0x330>)
 8002684:	400a      	ands	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4ba6      	ldr	r3, [pc, #664]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4ba5      	ldr	r3, [pc, #660]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800268e:	49a7      	ldr	r1, [pc, #668]	; (800292c <HAL_RCC_OscConfig+0x334>)
 8002690:	400a      	ands	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e01e      	b.n	80026d4 <HAL_RCC_OscConfig+0xdc>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10e      	bne.n	80026bc <HAL_RCC_OscConfig+0xc4>
 800269e:	4ba1      	ldr	r3, [pc, #644]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4ba0      	ldr	r3, [pc, #640]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	02c9      	lsls	r1, r1, #11
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b9d      	ldr	r3, [pc, #628]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b9c      	ldr	r3, [pc, #624]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0249      	lsls	r1, r1, #9
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xdc>
 80026bc:	4b99      	ldr	r3, [pc, #612]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b98      	ldr	r3, [pc, #608]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	4999      	ldr	r1, [pc, #612]	; (8002928 <HAL_RCC_OscConfig+0x330>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4b96      	ldr	r3, [pc, #600]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b95      	ldr	r3, [pc, #596]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	4997      	ldr	r1, [pc, #604]	; (800292c <HAL_RCC_OscConfig+0x334>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff3a 	bl	8001554 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e6:	f7fe ff35 	bl	8001554 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e28a      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f8:	4b8a      	ldr	r3, [pc, #552]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0xee>
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe ff25 	bl	8001554 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe ff20 	bl	8001554 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e275      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	4013      	ands	r3, r2
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x118>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2202      	movs	r2, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d100      	bne.n	800273e <HAL_RCC_OscConfig+0x146>
 800273c:	e069      	b.n	8002812 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800273e:	4b79      	ldr	r3, [pc, #484]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	220c      	movs	r2, #12
 8002744:	4013      	ands	r3, r2
 8002746:	d00b      	beq.n	8002760 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002748:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	220c      	movs	r2, #12
 800274e:	4013      	ands	r3, r2
 8002750:	2b08      	cmp	r3, #8
 8002752:	d11c      	bne.n	800278e <HAL_RCC_OscConfig+0x196>
 8002754:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	4013      	ands	r3, r2
 800275e:	d116      	bne.n	800278e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002760:	4b70      	ldr	r3, [pc, #448]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2202      	movs	r2, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e24b      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b6b      	ldr	r3, [pc, #428]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	22f8      	movs	r2, #248	; 0xf8
 800277c:	4393      	bics	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00da      	lsls	r2, r3, #3
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278c:	e041      	b.n	8002812 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fed7 	bl	8001554 <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ac:	f7fe fed2 	bl	8001554 <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e227      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2202      	movs	r2, #2
 80027c4:	4013      	ands	r3, r2
 80027c6:	d0f1      	beq.n	80027ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b56      	ldr	r3, [pc, #344]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	22f8      	movs	r2, #248	; 0xf8
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00da      	lsls	r2, r3, #3
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e018      	b.n	8002812 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe feb2 	bl	8001554 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fead 	bl	8001554 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e202      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002808:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d1f1      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2208      	movs	r2, #8
 8002818:	4013      	ands	r3, r2
 800281a:	d036      	beq.n	800288a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002828:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800282a:	2101      	movs	r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe fe90 	bl	8001554 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fe8b 	bl	8001554 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1e0      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d0f1      	beq.n	800283a <HAL_RCC_OscConfig+0x242>
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800285a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fe76 	bl	8001554 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fe71 	bl	8001554 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1c6      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f1      	bne.n	800286e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x29e>
 8002894:	e0b4      	b.n	8002a00 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	201f      	movs	r0, #31
 8002898:	183b      	adds	r3, r7, r0
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	055b      	lsls	r3, r3, #21
 80028a6:	4013      	ands	r3, r2
 80028a8:	d110      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	0549      	lsls	r1, r1, #21
 80028b4:	430a      	orrs	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	055b      	lsls	r3, r3, #21
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_RCC_OscConfig+0x338>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d11a      	bne.n	800290e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_RCC_OscConfig+0x338>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_RCC_OscConfig+0x338>)
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	0049      	lsls	r1, r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fe35 	bl	8001554 <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe fe30 	bl	8001554 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e185      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_OscConfig+0x338>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10e      	bne.n	8002934 <HAL_RCC_OscConfig+0x33c>
 8002916:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	4b02      	ldr	r3, [pc, #8]	; (8002924 <HAL_RCC_OscConfig+0x32c>)
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	621a      	str	r2, [r3, #32]
 8002922:	e035      	b.n	8002990 <HAL_RCC_OscConfig+0x398>
 8002924:	40021000 	.word	0x40021000
 8002928:	fffeffff 	.word	0xfffeffff
 800292c:	fffbffff 	.word	0xfffbffff
 8002930:	40007000 	.word	0x40007000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x35e>
 800293c:	4bb6      	ldr	r3, [pc, #728]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	4bb5      	ldr	r3, [pc, #724]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002942:	2101      	movs	r1, #1
 8002944:	438a      	bics	r2, r1
 8002946:	621a      	str	r2, [r3, #32]
 8002948:	4bb3      	ldr	r3, [pc, #716]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	4bb2      	ldr	r3, [pc, #712]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800294e:	2104      	movs	r1, #4
 8002950:	438a      	bics	r2, r1
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x398>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x380>
 800295e:	4bae      	ldr	r3, [pc, #696]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	4bad      	ldr	r3, [pc, #692]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002964:	2104      	movs	r1, #4
 8002966:	430a      	orrs	r2, r1
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	4bab      	ldr	r3, [pc, #684]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800296c:	6a1a      	ldr	r2, [r3, #32]
 800296e:	4baa      	ldr	r3, [pc, #680]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002970:	2101      	movs	r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	621a      	str	r2, [r3, #32]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x398>
 8002978:	4ba7      	ldr	r3, [pc, #668]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	4ba6      	ldr	r3, [pc, #664]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	621a      	str	r2, [r3, #32]
 8002984:	4ba4      	ldr	r3, [pc, #656]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002986:	6a1a      	ldr	r2, [r3, #32]
 8002988:	4ba3      	ldr	r3, [pc, #652]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 800298a:	2104      	movs	r1, #4
 800298c:	438a      	bics	r2, r1
 800298e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d014      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7fe fddc 	bl	8001554 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fdd7 	bl	8001554 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4a9b      	ldr	r2, [pc, #620]	; (8002c1c <HAL_RCC_OscConfig+0x624>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e12b      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	4b98      	ldr	r3, [pc, #608]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3aa>
 80029c0:	e013      	b.n	80029ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fdc7 	bl	8001554 <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	e009      	b.n	80029e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fdc2 	bl	8001554 <HAL_GetTick>
 80029d0:	0002      	movs	r2, r0
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	4a91      	ldr	r2, [pc, #580]	; (8002c1c <HAL_RCC_OscConfig+0x624>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e116      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	4b8d      	ldr	r3, [pc, #564]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	2202      	movs	r2, #2
 80029e6:	4013      	ands	r3, r2
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ea:	231f      	movs	r3, #31
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	4b87      	ldr	r3, [pc, #540]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 80029fa:	4989      	ldr	r1, [pc, #548]	; (8002c20 <HAL_RCC_OscConfig+0x628>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	4013      	ands	r3, r2
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d12a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a12:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a16:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a18:	2104      	movs	r1, #4
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a1e:	4b7e      	ldr	r3, [pc, #504]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fd93 	bl	8001554 <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a34:	f7fe fd8e 	bl	8001554 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0e3      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a46:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d0f1      	beq.n	8002a34 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a50:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	22f8      	movs	r2, #248	; 0xf8
 8002a56:	4393      	bics	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	00da      	lsls	r2, r3, #3
 8002a60:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a62:	430a      	orrs	r2, r1
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
 8002a66:	e034      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	3305      	adds	r3, #5
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a70:	4b69      	ldr	r3, [pc, #420]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a76:	2104      	movs	r1, #4
 8002a78:	438a      	bics	r2, r1
 8002a7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a7c:	4b66      	ldr	r3, [pc, #408]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	22f8      	movs	r2, #248	; 0xf8
 8002a82:	4393      	bics	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	00da      	lsls	r2, r3, #3
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34
 8002a92:	e01e      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a94:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a98:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002aa0:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7fe fd52 	bl	8001554 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ab6:	f7fe fd4d 	bl	8001554 <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0a2      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d1f1      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d100      	bne.n	8002adc <HAL_RCC_OscConfig+0x4e4>
 8002ada:	e097      	b.n	8002c0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d100      	bne.n	8002aea <HAL_RCC_OscConfig+0x4f2>
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d14c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002af8:	494a      	ldr	r1, [pc, #296]	; (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe fd29 	bl	8001554 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fd24 	bl	8001554 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e079      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	049b      	lsls	r3, r3, #18
 8002b22:	4013      	ands	r3, r2
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b36:	430a      	orrs	r2, r1
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a3a      	ldr	r2, [pc, #232]	; (8002c28 <HAL_RCC_OscConfig+0x630>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	0449      	lsls	r1, r1, #17
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fcf7 	bl	8001554 <HAL_GetTick>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fcf2 	bl	8001554 <HAL_GetTick>
 8002b70:	0002      	movs	r2, r0
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e047      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	049b      	lsls	r3, r3, #18
 8002b86:	4013      	ands	r3, r2
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x574>
 8002b8a:	e03f      	b.n	8002c0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002b92:	4924      	ldr	r1, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fcdc 	bl	8001554 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fcd7 	bl	8001554 <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e02c      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	049b      	lsls	r3, r3, #18
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5aa>
 8002bc0:	e024      	b.n	8002c0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e01f      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x620>)
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	025b      	lsls	r3, r3, #9
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d10e      	bne.n	8002c08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	220f      	movs	r2, #15
 8002bee:	401a      	ands	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	23f0      	movs	r3, #240	; 0xf0
 8002bfc:	039b      	lsls	r3, r3, #14
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b008      	add	sp, #32
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	00001388 	.word	0x00001388
 8002c20:	efffffff 	.word	0xefffffff
 8002c24:	feffffff 	.word	0xfeffffff
 8002c28:	ffc2ffff 	.word	0xffc2ffff

08002c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b3      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d911      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4393      	bics	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e09a      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d015      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2204      	movs	r2, #4
 8002c82:	4013      	ands	r3, r2
 8002c84:	d006      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c86:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	21e0      	movs	r1, #224	; 0xe0
 8002c8e:	00c9      	lsls	r1, r1, #3
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	22f0      	movs	r2, #240	; 0xf0
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d114      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06e      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	049b      	lsls	r3, r3, #18
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e062      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e05b      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc26 	bl	8001554 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0e:	f7fe fc21 	bl	8001554 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_RCC_ClockConfig+0x18c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e042      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	220c      	movs	r2, #12
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1ec      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d211      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4393      	bics	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_RCC_ClockConfig+0x184>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e020      	b.n	8002da8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_RCC_ClockConfig+0x190>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d84:	f000 f820 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002d88:	0001      	movs	r1, r0
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x188>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	220f      	movs	r2, #15
 8002d92:	4013      	ands	r3, r2
 8002d94:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x194>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	000a      	movs	r2, r1
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x198>)
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002da0:	2003      	movs	r0, #3
 8002da2:	f7fe fb91 	bl	80014c8 <HAL_InitTick>
  
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	fffff8ff 	.word	0xfffff8ff
 8002dc0:	08005e18 	.word	0x08005e18
 8002dc4:	20000000 	.word	0x20000000

08002dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b08f      	sub	sp, #60	; 0x3c
 8002dcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002dce:	2314      	movs	r3, #20
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	4a2b      	ldr	r2, [pc, #172]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dd6:	c313      	stmia	r3!, {r0, r1, r4}
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002de2:	c313      	stmia	r3!, {r0, r1, r4}
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dec:	2300      	movs	r3, #0
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	220c      	movs	r2, #12
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d002      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x4a>
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d003      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x50>
 8002e10:	e02d      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e16:	e02d      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2214      	movs	r2, #20
 8002e22:	18ba      	adds	r2, r7, r2
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	4013      	ands	r3, r2
 8002e30:	1d3a      	adds	r2, r7, #4
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e42:	4812      	ldr	r0, [pc, #72]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e44:	f7fd f972 	bl	800012c <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	4353      	muls	r3, r2
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
 8002e52:	e009      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e56:	000a      	movs	r2, r1
 8002e58:	0152      	lsls	r2, r2, #5
 8002e5a:	1a52      	subs	r2, r2, r1
 8002e5c:	0193      	lsls	r3, r2, #6
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	185b      	adds	r3, r3, r1
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e6c:	e002      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b00f      	add	sp, #60	; 0x3c
 8002e7c:	bd90      	pop	{r4, r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	08005df8 	.word	0x08005df8
 8002e84:	08005e08 	.word	0x08005e08
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ea8:	f7ff fff2 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eac:	0001      	movs	r1, r0
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	40d9      	lsrs	r1, r3
 8002ebe:	000b      	movs	r3, r1
}    
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	08005e28 	.word	0x08005e28

08002ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d100      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002eec:	e08e      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2017      	movs	r0, #23
 8002ef0:	183b      	adds	r3, r7, r0
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	055b      	lsls	r3, r3, #21
 8002efe:	4013      	ands	r3, r2
 8002f00:	d110      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0549      	lsls	r1, r1, #21
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	61da      	str	r2, [r3, #28]
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	055b      	lsls	r3, r3, #21
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d11a      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	0049      	lsls	r1, r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fb09 	bl	8001554 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	e008      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fe fb04 	bl	8001554 <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e087      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	23c0      	movs	r3, #192	; 0xc0
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d034      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	23c0      	movs	r3, #192	; 0xc0
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d02c      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f88:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0249      	lsls	r1, r1, #9
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fa6:	4936      	ldr	r1, [pc, #216]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe facb 	bl	8001554 <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fac6 	bl	8001554 <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e048      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff6:	2317      	movs	r3, #23
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003006:	4920      	ldr	r1, [pc, #128]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003008:	400a      	ands	r2, r1
 800300a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	2203      	movs	r2, #3
 800301c:	4393      	bics	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003026:	430a      	orrs	r2, r1
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2220      	movs	r2, #32
 8003030:	4013      	ands	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2210      	movs	r2, #16
 800303a:	4393      	bics	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003044:	430a      	orrs	r2, r1
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4013      	ands	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	4393      	bics	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003064:	430a      	orrs	r2, r1
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b006      	add	sp, #24
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
 800307c:	fffffcff 	.word	0xfffffcff
 8003080:	fffeffff 	.word	0xfffeffff
 8003084:	00001388 	.word	0x00001388
 8003088:	efffffff 	.word	0xefffffff

0800308c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0a8      	b.n	80031f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	2382      	movs	r3, #130	; 0x82
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d009      	beq.n	80030c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	61da      	str	r2, [r3, #28]
 80030b8:	e005      	b.n	80030c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	225d      	movs	r2, #93	; 0x5d
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	225c      	movs	r2, #92	; 0x5c
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7fd ff56 	bl	8000f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	225d      	movs	r2, #93	; 0x5d
 80030ec:	2102      	movs	r1, #2
 80030ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	438a      	bics	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	23e0      	movs	r3, #224	; 0xe0
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	429a      	cmp	r2, r3
 800310a:	d902      	bls.n	8003112 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e002      	b.n	8003118 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	015b      	lsls	r3, r3, #5
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	23f0      	movs	r3, #240	; 0xf0
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	429a      	cmp	r2, r3
 8003122:	d008      	beq.n	8003136 <HAL_SPI_Init+0xaa>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	23e0      	movs	r3, #224	; 0xe0
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	429a      	cmp	r2, r3
 800312e:	d002      	beq.n	8003136 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	2382      	movs	r3, #130	; 0x82
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	2384      	movs	r3, #132	; 0x84
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	400b      	ands	r3, r1
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2102      	movs	r1, #2
 8003152:	400b      	ands	r3, r1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2101      	movs	r1, #1
 800315c:	400b      	ands	r3, r1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6999      	ldr	r1, [r3, #24]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	400b      	ands	r3, r1
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2138      	movs	r1, #56	; 0x38
 8003172:	400b      	ands	r3, r1
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	400b      	ands	r3, r1
 800317e:	431a      	orrs	r2, r3
 8003180:	0011      	movs	r1, r2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	2204      	movs	r2, #4
 800319c:	401a      	ands	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2110      	movs	r1, #16
 80031a4:	400b      	ands	r3, r1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	2108      	movs	r1, #8
 80031ae:	400b      	ands	r3, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	23f0      	movs	r3, #240	; 0xf0
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	400b      	ands	r3, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	0011      	movs	r1, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	015b      	lsls	r3, r3, #5
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4907      	ldr	r1, [pc, #28]	; (80031f8 <HAL_SPI_Init+0x16c>)
 80031dc:	400a      	ands	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	225d      	movs	r2, #93	; 0x5d
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	fffff7ff 	.word	0xfffff7ff

080031fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e042      	b.n	8003294 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	223d      	movs	r2, #61	; 0x3d
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	223c      	movs	r2, #60	; 0x3c
 800321e:	2100      	movs	r1, #0
 8003220:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0018      	movs	r0, r3
 8003226:	f7fd ff61 	bl	80010ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	223d      	movs	r2, #61	; 0x3d
 800322e:	2102      	movs	r1, #2
 8003230:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	0019      	movs	r1, r3
 800323c:	0010      	movs	r0, r2
 800323e:	f000 fbef 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2246      	movs	r2, #70	; 0x46
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223e      	movs	r2, #62	; 0x3e
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223f      	movs	r2, #63	; 0x3f
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2240      	movs	r2, #64	; 0x40
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2241      	movs	r2, #65	; 0x41
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2242      	movs	r2, #66	; 0x42
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2243      	movs	r2, #67	; 0x43
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2244      	movs	r2, #68	; 0x44
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2245      	movs	r2, #69	; 0x45
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223d      	movs	r2, #61	; 0x3d
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e042      	b.n	8003334 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	223d      	movs	r2, #61	; 0x3d
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	223c      	movs	r2, #60	; 0x3c
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 f839 	bl	800333c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223d      	movs	r2, #61	; 0x3d
 80032ce:	2102      	movs	r1, #2
 80032d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	0019      	movs	r1, r3
 80032dc:	0010      	movs	r0, r2
 80032de:	f000 fb9f 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2246      	movs	r2, #70	; 0x46
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	223e      	movs	r2, #62	; 0x3e
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223f      	movs	r2, #63	; 0x3f
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2240      	movs	r2, #64	; 0x40
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2241      	movs	r2, #65	; 0x41
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2242      	movs	r2, #66	; 0x42
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2243      	movs	r2, #67	; 0x43
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2244      	movs	r2, #68	; 0x44
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2245      	movs	r2, #69	; 0x45
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	223d      	movs	r2, #61	; 0x3d
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	230f      	movs	r3, #15
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <HAL_TIM_OC_Start_IT+0x2a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223e      	movs	r2, #62	; 0x3e
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	4193      	sbcs	r3, r2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e01f      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x6a>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d108      	bne.n	800338e <HAL_TIM_OC_Start_IT+0x42>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	223f      	movs	r2, #63	; 0x3f
 8003380:	5c9b      	ldrb	r3, [r3, r2]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	1e5a      	subs	r2, r3, #1
 8003388:	4193      	sbcs	r3, r2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e013      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x6a>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d108      	bne.n	80033a6 <HAL_TIM_OC_Start_IT+0x5a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	5c9b      	ldrb	r3, [r3, r2]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	4193      	sbcs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e007      	b.n	80033b6 <HAL_TIM_OC_Start_IT+0x6a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2241      	movs	r2, #65	; 0x41
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	4193      	sbcs	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0b7      	b.n	800352e <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_OC_Start_IT+0x82>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223e      	movs	r2, #62	; 0x3e
 80033c8:	2102      	movs	r1, #2
 80033ca:	5499      	strb	r1, [r3, r2]
 80033cc:	e013      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0xaa>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d104      	bne.n	80033de <HAL_TIM_OC_Start_IT+0x92>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	223f      	movs	r2, #63	; 0x3f
 80033d8:	2102      	movs	r1, #2
 80033da:	5499      	strb	r1, [r3, r2]
 80033dc:	e00b      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0xaa>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_OC_Start_IT+0xa2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	2102      	movs	r1, #2
 80033ea:	5499      	strb	r1, [r3, r2]
 80033ec:	e003      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0xaa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2241      	movs	r2, #65	; 0x41
 80033f2:	2102      	movs	r1, #2
 80033f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d02a      	beq.n	8003452 <HAL_TIM_OC_Start_IT+0x106>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d830      	bhi.n	8003464 <HAL_TIM_OC_Start_IT+0x118>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d01b      	beq.n	8003440 <HAL_TIM_OC_Start_IT+0xf4>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b08      	cmp	r3, #8
 800340c:	d82a      	bhi.n	8003464 <HAL_TIM_OC_Start_IT+0x118>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_TIM_OC_Start_IT+0xd0>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d009      	beq.n	800342e <HAL_TIM_OC_Start_IT+0xe2>
 800341a:	e023      	b.n	8003464 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2102      	movs	r1, #2
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]
      break;
 800342c:	e01f      	b.n	800346e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2104      	movs	r1, #4
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
      break;
 800343e:	e016      	b.n	800346e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2108      	movs	r1, #8
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]
      break;
 8003450:	e00d      	b.n	800346e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2110      	movs	r1, #16
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
      break;
 8003462:	e004      	b.n	800346e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8003464:	230f      	movs	r3, #15
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
      break;
 800346c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800346e:	230f      	movs	r3, #15
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d157      	bne.n	8003528 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	2201      	movs	r2, #1
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fde3 	bl	800404c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <HAL_TIM_OC_Start_IT+0x1ec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_TIM_OC_Start_IT+0x162>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <HAL_TIM_OC_Start_IT+0x1f0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_TIM_OC_Start_IT+0x162>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_TIM_OC_Start_IT+0x1f4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_TIM_OC_Start_IT+0x162>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_TIM_OC_Start_IT+0x1f8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_OC_Start_IT+0x166>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_TIM_OC_Start_IT+0x168>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	0209      	lsls	r1, r1, #8
 80034c6:	430a      	orrs	r2, r1
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_TIM_OC_Start_IT+0x1ec>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <HAL_TIM_OC_Start_IT+0x1a8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	05db      	lsls	r3, r3, #23
 80034dc:	429a      	cmp	r2, r3
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_OC_Start_IT+0x1a8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_TIM_OC_Start_IT+0x1fc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_OC_Start_IT+0x1a8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_TIM_OC_Start_IT+0x1f0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d111      	bne.n	8003518 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2207      	movs	r2, #7
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d010      	beq.n	8003528 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	e007      	b.n	8003528 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2101      	movs	r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003528:	230f      	movs	r3, #15
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	781b      	ldrb	r3, [r3, #0]
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40014000 	.word	0x40014000
 8003540:	40014400 	.word	0x40014400
 8003544:	40014800 	.word	0x40014800
 8003548:	40000400 	.word	0x40000400

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d124      	bne.n	80035ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d11d      	bne.n	80035ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2203      	movs	r2, #3
 8003576:	4252      	negs	r2, r2
 8003578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2203      	movs	r2, #3
 8003588:	4013      	ands	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fa2e 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003594:	e007      	b.n	80035a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 fa21 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fa2d 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2204      	movs	r2, #4
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d125      	bne.n	8003606 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2204      	movs	r2, #4
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11e      	bne.n	8003606 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2205      	movs	r2, #5
 80035ce:	4252      	negs	r2, r2
 80035d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	23c0      	movs	r3, #192	; 0xc0
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4013      	ands	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 fa01 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 80035ee:	e007      	b.n	8003600 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f9f4 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 fa00 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2208      	movs	r2, #8
 800360e:	4013      	ands	r3, r2
 8003610:	2b08      	cmp	r3, #8
 8003612:	d124      	bne.n	800365e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2208      	movs	r2, #8
 800361c:	4013      	ands	r3, r2
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11d      	bne.n	800365e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2209      	movs	r2, #9
 8003628:	4252      	negs	r2, r2
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2204      	movs	r2, #4
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2203      	movs	r2, #3
 800363a:	4013      	ands	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f9d5 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003646:	e007      	b.n	8003658 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f9c8 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f9d4 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	2b10      	cmp	r3, #16
 800366a:	d125      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2210      	movs	r2, #16
 8003674:	4013      	ands	r3, r2
 8003676:	2b10      	cmp	r3, #16
 8003678:	d11e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2211      	movs	r2, #17
 8003680:	4252      	negs	r2, r2
 8003682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2208      	movs	r2, #8
 8003688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	23c0      	movs	r3, #192	; 0xc0
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4013      	ands	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	0018      	movs	r0, r3
 800369c:	f000 f9a8 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 f99b 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 f9a7 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10f      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2202      	movs	r2, #2
 80036da:	4252      	negs	r2, r2
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f975 	bl	80039d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b80      	cmp	r3, #128	; 0x80
 80036f2:	d10f      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b80      	cmp	r3, #128	; 0x80
 8003700:	d108      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2281      	movs	r2, #129	; 0x81
 8003708:	4252      	negs	r2, r2
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 fd84 	bl	800421c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	4013      	ands	r3, r2
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d10f      	bne.n	8003742 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	4013      	ands	r3, r2
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d108      	bne.n	8003742 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2241      	movs	r2, #65	; 0x41
 8003736:	4252      	negs	r2, r2
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f967 	bl	8003a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2220      	movs	r2, #32
 800374a:	4013      	ands	r3, r2
 800374c:	2b20      	cmp	r3, #32
 800374e:	d10f      	bne.n	8003770 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	4013      	ands	r3, r2
 800375a:	2b20      	cmp	r3, #32
 800375c:	d108      	bne.n	8003770 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2221      	movs	r2, #33	; 0x21
 8003764:	4252      	negs	r2, r2
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	0018      	movs	r0, r3
 800376c:	f000 fd4e 	bl	800420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2317      	movs	r3, #23
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	223c      	movs	r2, #60	; 0x3c
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_TIM_OC_ConfigChannel+0x22>
 8003796:	2302      	movs	r3, #2
 8003798:	e042      	b.n	8003820 <HAL_TIM_OC_ConfigChannel+0xa8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	223c      	movs	r2, #60	; 0x3c
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d027      	beq.n	80037f8 <HAL_TIM_OC_ConfigChannel+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d82c      	bhi.n	8003808 <HAL_TIM_OC_ConfigChannel+0x90>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d019      	beq.n	80037e8 <HAL_TIM_OC_ConfigChannel+0x70>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d826      	bhi.n	8003808 <HAL_TIM_OC_ConfigChannel+0x90>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_TIM_OC_ConfigChannel+0x50>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d008      	beq.n	80037d8 <HAL_TIM_OC_ConfigChannel+0x60>
 80037c6:	e01f      	b.n	8003808 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 f9a5 	bl	8003b20 <TIM_OC1_SetConfig>
      break;
 80037d6:	e01c      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fa25 	bl	8003c30 <TIM_OC2_SetConfig>
      break;
 80037e6:	e014      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 faa1 	bl	8003d38 <TIM_OC3_SetConfig>
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fb1f 	bl	8003e44 <TIM_OC4_SetConfig>
      break;
 8003806:	e004      	b.n	8003812 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8003808:	2317      	movs	r3, #23
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
      break;
 8003810:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	223c      	movs	r2, #60	; 0x3c
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

  return status;
 800381a:	2317      	movs	r3, #23
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	230f      	movs	r3, #15
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223c      	movs	r2, #60	; 0x3c
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x20>
 8003844:	2302      	movs	r3, #2
 8003846:	e0bc      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x19a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223c      	movs	r2, #60	; 0x3c
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223d      	movs	r2, #61	; 0x3d
 8003854:	2102      	movs	r1, #2
 8003856:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2277      	movs	r2, #119	; 0x77
 8003864:	4393      	bics	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a58      	ldr	r2, [pc, #352]	; (80039cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	0192      	lsls	r2, r2, #6
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xde>
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0192      	lsls	r2, r2, #6
 8003888:	4293      	cmp	r3, r2
 800388a:	d900      	bls.n	800388e <HAL_TIM_ConfigClockSource+0x66>
 800388c:	e088      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	0152      	lsls	r2, r2, #5
 8003892:	4293      	cmp	r3, r2
 8003894:	d100      	bne.n	8003898 <HAL_TIM_ConfigClockSource+0x70>
 8003896:	e088      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x182>
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	0152      	lsls	r2, r2, #5
 800389c:	4293      	cmp	r3, r2
 800389e:	d900      	bls.n	80038a2 <HAL_TIM_ConfigClockSource+0x7a>
 80038a0:	e07e      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038a2:	2b70      	cmp	r3, #112	; 0x70
 80038a4:	d018      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0xb0>
 80038a6:	d900      	bls.n	80038aa <HAL_TIM_ConfigClockSource+0x82>
 80038a8:	e07a      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038aa:	2b60      	cmp	r3, #96	; 0x60
 80038ac:	d04f      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x126>
 80038ae:	d900      	bls.n	80038b2 <HAL_TIM_ConfigClockSource+0x8a>
 80038b0:	e076      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038b2:	2b50      	cmp	r3, #80	; 0x50
 80038b4:	d03b      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x106>
 80038b6:	d900      	bls.n	80038ba <HAL_TIM_ConfigClockSource+0x92>
 80038b8:	e072      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d057      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x146>
 80038be:	d900      	bls.n	80038c2 <HAL_TIM_ConfigClockSource+0x9a>
 80038c0:	e06e      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038c2:	2b30      	cmp	r3, #48	; 0x30
 80038c4:	d063      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038c6:	d86b      	bhi.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d060      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038cc:	d868      	bhi.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d05d      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d05b      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x166>
 80038d6:	e063      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f000 fb90 	bl	800400c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2277      	movs	r2, #119	; 0x77
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
      break;
 8003904:	e052      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f000 fb79 	bl	800400c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	01c9      	lsls	r1, r1, #7
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
      break;
 800392c:	e03e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	001a      	movs	r2, r3
 800393c:	f000 faec 	bl	8003f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2150      	movs	r1, #80	; 0x50
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fb46 	bl	8003fd8 <TIM_ITRx_SetConfig>
      break;
 800394c:	e02e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	001a      	movs	r2, r3
 800395c:	f000 fb0a 	bl	8003f74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2160      	movs	r1, #96	; 0x60
 8003966:	0018      	movs	r0, r3
 8003968:	f000 fb36 	bl	8003fd8 <TIM_ITRx_SetConfig>
      break;
 800396c:	e01e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	001a      	movs	r2, r3
 800397c:	f000 facc 	bl	8003f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2140      	movs	r1, #64	; 0x40
 8003986:	0018      	movs	r0, r3
 8003988:	f000 fb26 	bl	8003fd8 <TIM_ITRx_SetConfig>
      break;
 800398c:	e00e      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0019      	movs	r1, r3
 8003998:	0010      	movs	r0, r2
 800399a:	f000 fb1d 	bl	8003fd8 <TIM_ITRx_SetConfig>
      break;
 800399e:	e005      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
      break;
 80039a8:	e000      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	223d      	movs	r2, #61	; 0x3d
 80039b0:	2101      	movs	r1, #1
 80039b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	223c      	movs	r2, #60	; 0x3c
 80039b8:	2100      	movs	r1, #0
 80039ba:	5499      	strb	r1, [r3, r2]

  return status;
 80039bc:	230f      	movs	r3, #15
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	781b      	ldrb	r3, [r3, #0]
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	ffff00ff 	.word	0xffff00ff

080039d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <TIM_Base_SetConfig+0xe4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d008      	beq.n	8003a4a <TIM_Base_SetConfig+0x2a>
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	05db      	lsls	r3, r3, #23
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d003      	beq.n	8003a4a <TIM_Base_SetConfig+0x2a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <TIM_Base_SetConfig+0xe8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2270      	movs	r2, #112	; 0x70
 8003a4e:	4393      	bics	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <TIM_Base_SetConfig+0xe4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d013      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <TIM_Base_SetConfig+0xe8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <TIM_Base_SetConfig+0xec>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <TIM_Base_SetConfig+0xf4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <TIM_Base_SetConfig+0xf8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <TIM_Base_SetConfig+0xfc>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	4393      	bics	r3, r2
 8003aae:	001a      	movs	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_Base_SetConfig+0xe4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_Base_SetConfig+0xce>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <TIM_Base_SetConfig+0xf0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <TIM_Base_SetConfig+0xce>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <TIM_Base_SetConfig+0xf4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_Base_SetConfig+0xce>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <TIM_Base_SetConfig+0xf8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d103      	bne.n	8003af6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	615a      	str	r2, [r3, #20]
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b004      	add	sp, #16
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40002000 	.word	0x40002000
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800
 8003b1c:	fffffcff 	.word	0xfffffcff

08003b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4393      	bics	r3, r2
 8003b32:	001a      	movs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2270      	movs	r2, #112	; 0x70
 8003b4e:	4393      	bics	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2203      	movs	r2, #3
 8003b56:	4393      	bics	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2202      	movs	r2, #2
 8003b68:	4393      	bics	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <TIM_OC1_SetConfig+0xf8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_OC1_SetConfig+0x76>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <TIM_OC1_SetConfig+0xfc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_OC1_SetConfig+0x76>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <TIM_OC1_SetConfig+0x100>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC1_SetConfig+0x76>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a24      	ldr	r2, [pc, #144]	; (8003c24 <TIM_OC1_SetConfig+0x104>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10c      	bne.n	8003bb0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2204      	movs	r2, #4
 8003bac:	4393      	bics	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <TIM_OC1_SetConfig+0xf8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_OC1_SetConfig+0xb0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <TIM_OC1_SetConfig+0xfc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_OC1_SetConfig+0xb0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <TIM_OC1_SetConfig+0x100>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC1_SetConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <TIM_OC1_SetConfig+0x104>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <TIM_OC1_SetConfig+0x108>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <TIM_OC1_SetConfig+0x10c>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b006      	add	sp, #24
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	fffffeff 	.word	0xfffffeff
 8003c2c:	fffffdff 	.word	0xfffffdff

08003c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	4393      	bics	r3, r2
 8003c42:	001a      	movs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a2e      	ldr	r2, [pc, #184]	; (8003d18 <TIM_OC2_SetConfig+0xe8>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <TIM_OC2_SetConfig+0xec>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <TIM_OC2_SetConfig+0xf0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	4393      	bics	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2240      	movs	r2, #64	; 0x40
 8003caa:	4393      	bics	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <TIM_OC2_SetConfig+0xf0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_OC2_SetConfig+0x9e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <TIM_OC2_SetConfig+0xf4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <TIM_OC2_SetConfig+0x9e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <TIM_OC2_SetConfig+0xf8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_OC2_SetConfig+0x9e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <TIM_OC2_SetConfig+0xfc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d113      	bne.n	8003cf6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <TIM_OC2_SetConfig+0x100>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <TIM_OC2_SetConfig+0x104>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	621a      	str	r2, [r3, #32]
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b006      	add	sp, #24
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	ffff8fff 	.word	0xffff8fff
 8003d1c:	fffffcff 	.word	0xfffffcff
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800
 8003d30:	fffffbff 	.word	0xfffffbff
 8003d34:	fffff7ff 	.word	0xfffff7ff

08003d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4a35      	ldr	r2, [pc, #212]	; (8003e1c <TIM_OC3_SetConfig+0xe4>)
 8003d48:	401a      	ands	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2270      	movs	r2, #112	; 0x70
 8003d64:	4393      	bics	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	4393      	bics	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <TIM_OC3_SetConfig+0xe8>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <TIM_OC3_SetConfig+0xec>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10d      	bne.n	8003db2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <TIM_OC3_SetConfig+0xf0>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <TIM_OC3_SetConfig+0xf4>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <TIM_OC3_SetConfig+0xec>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <TIM_OC3_SetConfig+0xf8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <TIM_OC3_SetConfig+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <TIM_OC3_SetConfig+0x100>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d113      	bne.n	8003dfa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <TIM_OC3_SetConfig+0x104>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <TIM_OC3_SetConfig+0x108>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	fffffeff 	.word	0xfffffeff
 8003e20:	fffffdff 	.word	0xfffffdff
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	fffff7ff 	.word	0xfffff7ff
 8003e2c:	fffffbff 	.word	0xfffffbff
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800
 8003e3c:	ffffefff 	.word	0xffffefff
 8003e40:	ffffdfff 	.word	0xffffdfff

08003e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <TIM_OC4_SetConfig+0xb0>)
 8003e54:	401a      	ands	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <TIM_OC4_SetConfig+0xb4>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a21      	ldr	r2, [pc, #132]	; (8003efc <TIM_OC4_SetConfig+0xb8>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <TIM_OC4_SetConfig+0xbc>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <TIM_OC4_SetConfig+0xc0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_OC4_SetConfig+0x78>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <TIM_OC4_SetConfig+0xc4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_OC4_SetConfig+0x78>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <TIM_OC4_SetConfig+0xc8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_OC4_SetConfig+0x78>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <TIM_OC4_SetConfig+0xcc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <TIM_OC4_SetConfig+0xd0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b006      	add	sp, #24
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	ffffefff 	.word	0xffffefff
 8003ef8:	ffff8fff 	.word	0xffff8fff
 8003efc:	fffffcff 	.word	0xfffffcff
 8003f00:	ffffdfff 	.word	0xffffdfff
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	ffffbfff 	.word	0xffffbfff

08003f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4393      	bics	r3, r2
 8003f32:	001a      	movs	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	22f0      	movs	r2, #240	; 0xf0
 8003f42:	4393      	bics	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	220a      	movs	r2, #10
 8003f54:	4393      	bics	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	2210      	movs	r2, #16
 8003f86:	4393      	bics	r3, r2
 8003f88:	001a      	movs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <TIM_TI2_ConfigInputStage+0x60>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	031b      	lsls	r3, r3, #12
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	22a0      	movs	r2, #160	; 0xa0
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b006      	add	sp, #24
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	ffff0fff 	.word	0xffff0fff

08003fd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2270      	movs	r2, #112	; 0x70
 8003fec:	4393      	bics	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	609a      	str	r2, [r3, #8]
}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	b004      	add	sp, #16
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <TIM_ETR_SetConfig+0x3c>)
 8004024:	4013      	ands	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	431a      	orrs	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b006      	add	sp, #24
 8004046:	bd80      	pop	{r7, pc}
 8004048:	ffff00ff 	.word	0xffff00ff

0800404c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	221f      	movs	r2, #31
 800405c:	4013      	ands	r3, r2
 800405e:	2201      	movs	r2, #1
 8004060:	409a      	lsls	r2, r3
 8004062:	0013      	movs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	43d2      	mvns	r2, r2
 800406e:	401a      	ands	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	211f      	movs	r1, #31
 800407c:	400b      	ands	r3, r1
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4099      	lsls	r1, r3
 8004082:	000b      	movs	r3, r1
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b006      	add	sp, #24
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	223c      	movs	r2, #60	; 0x3c
 80040a2:	5c9b      	ldrb	r3, [r3, r2]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e047      	b.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	223c      	movs	r2, #60	; 0x3c
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	223d      	movs	r2, #61	; 0x3d
 80040b8:	2102      	movs	r1, #2
 80040ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2270      	movs	r2, #112	; 0x70
 80040d0:	4393      	bics	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00f      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d009      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10c      	bne.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	4393      	bics	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223d      	movs	r2, #61	; 0x3d
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40014000 	.word	0x40014000

08004150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	223c      	movs	r2, #60	; 0x3c
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004168:	2302      	movs	r3, #2
 800416a:	e03e      	b.n	80041ea <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	223c      	movs	r2, #60	; 0x3c
 8004170:	2101      	movs	r1, #1
 8004172:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	4393      	bics	r3, r2
 800417a:	001a      	movs	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004188:	401a      	ands	r2, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004196:	401a      	ands	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80041a4:	401a      	ands	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80041b2:	401a      	ands	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80041c0:	401a      	ands	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80041ce:	401a      	ands	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	223c      	movs	r2, #60	; 0x3c
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b004      	add	sp, #16
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	fffffcff 	.word	0xfffffcff
 80041f8:	fffffbff 	.word	0xfffffbff
 80041fc:	fffff7ff 	.word	0xfffff7ff
 8004200:	ffffefff 	.word	0xffffefff
 8004204:	ffffdfff 	.word	0xffffdfff
 8004208:	ffffbfff 	.word	0xffffbfff

0800420c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e044      	b.n	80042c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2274      	movs	r2, #116	; 0x74
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	0018      	movs	r0, r3
 8004252:	f7fd f803 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2224      	movs	r2, #36	; 0x24
 800425a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2101      	movs	r1, #1
 8004268:	438a      	bics	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fcaa 	bl	8004bc8 <UART_SetConfig>
 8004274:	0003      	movs	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e024      	b.n	80042c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f000 fddd 	bl	8004e48 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	490d      	ldr	r1, [pc, #52]	; (80042d0 <HAL_UART_Init+0xa4>)
 800429a:	400a      	ands	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	212a      	movs	r1, #42	; 0x2a
 80042aa:	438a      	bics	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 fe75 	bl	8004fb0 <UART_CheckIdleState>
 80042c6:	0003      	movs	r3, r0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	ffffb7ff 	.word	0xffffb7ff

080042d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d000      	beq.n	80042ee <HAL_UART_Transmit+0x1a>
 80042ec:	e096      	b.n	800441c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_UART_Transmit+0x28>
 80042f4:	1dbb      	adds	r3, r7, #6
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e08e      	b.n	800441e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	429a      	cmp	r2, r3
 800430a:	d109      	bne.n	8004320 <HAL_UART_Transmit+0x4c>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2201      	movs	r2, #1
 8004318:	4013      	ands	r3, r2
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e07e      	b.n	800441e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2274      	movs	r2, #116	; 0x74
 8004324:	5c9b      	ldrb	r3, [r3, r2]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_UART_Transmit+0x5a>
 800432a:	2302      	movs	r3, #2
 800432c:	e077      	b.n	800441e <HAL_UART_Transmit+0x14a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2274      	movs	r2, #116	; 0x74
 8004332:	2101      	movs	r1, #1
 8004334:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	2100      	movs	r1, #0
 800433c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2221      	movs	r2, #33	; 0x21
 8004342:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004344:	f7fd f906 	bl	8001554 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1dba      	adds	r2, r7, #6
 8004350:	2150      	movs	r1, #80	; 0x50
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1dba      	adds	r2, r7, #6
 800435a:	2152      	movs	r1, #82	; 0x52
 800435c:	8812      	ldrh	r2, [r2, #0]
 800435e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	015b      	lsls	r3, r3, #5
 8004368:	429a      	cmp	r2, r3
 800436a:	d108      	bne.n	800437e <HAL_UART_Transmit+0xaa>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	e003      	b.n	8004386 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2274      	movs	r2, #116	; 0x74
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800438e:	e02d      	b.n	80043ec <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	0013      	movs	r3, r2
 800439a:	2200      	movs	r2, #0
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	f000 fe4f 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d001      	beq.n	80043aa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e039      	b.n	800441e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	05d2      	lsls	r2, r2, #23
 80043ba:	0dd2      	lsrs	r2, r2, #23
 80043bc:	b292      	uxth	r2, r2
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	3302      	adds	r3, #2
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e008      	b.n	80043da <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2252      	movs	r2, #82	; 0x52
 80043de:	5a9b      	ldrh	r3, [r3, r2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b299      	uxth	r1, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2252      	movs	r2, #82	; 0x52
 80043ea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2252      	movs	r2, #82	; 0x52
 80043f0:	5a9b      	ldrh	r3, [r3, r2]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1cb      	bne.n	8004390 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	0013      	movs	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	f000 fe1b 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 800440a:	1e03      	subs	r3, r0, #0
 800440c:	d001      	beq.n	8004412 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e005      	b.n	800441e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b008      	add	sp, #32
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	1dbb      	adds	r3, r7, #6
 8004436:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800443c:	2b20      	cmp	r3, #32
 800443e:	d000      	beq.n	8004442 <HAL_UART_Receive+0x1a>
 8004440:	e0c6      	b.n	80045d0 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_UART_Receive+0x28>
 8004448:	1dbb      	adds	r3, r7, #6
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0be      	b.n	80045d2 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	015b      	lsls	r3, r3, #5
 800445c:	429a      	cmp	r2, r3
 800445e:	d109      	bne.n	8004474 <HAL_UART_Receive+0x4c>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2201      	movs	r2, #1
 800446c:	4013      	ands	r3, r2
 800446e:	d001      	beq.n	8004474 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0ae      	b.n	80045d2 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2274      	movs	r2, #116	; 0x74
 8004478:	5c9b      	ldrb	r3, [r3, r2]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_UART_Receive+0x5a>
 800447e:	2302      	movs	r3, #2
 8004480:	e0a7      	b.n	80045d2 <HAL_UART_Receive+0x1aa>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2274      	movs	r2, #116	; 0x74
 8004486:	2101      	movs	r1, #1
 8004488:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	2100      	movs	r1, #0
 8004490:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2222      	movs	r2, #34	; 0x22
 8004496:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449e:	f7fd f859 	bl	8001554 <HAL_GetTick>
 80044a2:	0003      	movs	r3, r0
 80044a4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1dba      	adds	r2, r7, #6
 80044aa:	2158      	movs	r1, #88	; 0x58
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1dba      	adds	r2, r7, #6
 80044b4:	215a      	movs	r1, #90	; 0x5a
 80044b6:	8812      	ldrh	r2, [r2, #0]
 80044b8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d10d      	bne.n	80044e2 <HAL_UART_Receive+0xba>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <HAL_UART_Receive+0xb0>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	225c      	movs	r2, #92	; 0x5c
 80044d2:	4942      	ldr	r1, [pc, #264]	; (80045dc <HAL_UART_Receive+0x1b4>)
 80044d4:	5299      	strh	r1, [r3, r2]
 80044d6:	e01a      	b.n	800450e <HAL_UART_Receive+0xe6>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	225c      	movs	r2, #92	; 0x5c
 80044dc:	21ff      	movs	r1, #255	; 0xff
 80044de:	5299      	strh	r1, [r3, r2]
 80044e0:	e015      	b.n	800450e <HAL_UART_Receive+0xe6>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <HAL_UART_Receive+0xde>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_UART_Receive+0xd4>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	225c      	movs	r2, #92	; 0x5c
 80044f6:	21ff      	movs	r1, #255	; 0xff
 80044f8:	5299      	strh	r1, [r3, r2]
 80044fa:	e008      	b.n	800450e <HAL_UART_Receive+0xe6>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	225c      	movs	r2, #92	; 0x5c
 8004500:	217f      	movs	r1, #127	; 0x7f
 8004502:	5299      	strh	r1, [r3, r2]
 8004504:	e003      	b.n	800450e <HAL_UART_Receive+0xe6>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	225c      	movs	r2, #92	; 0x5c
 800450a:	2100      	movs	r1, #0
 800450c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800450e:	2312      	movs	r3, #18
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	215c      	movs	r1, #92	; 0x5c
 8004516:	5a52      	ldrh	r2, [r2, r1]
 8004518:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	015b      	lsls	r3, r3, #5
 8004522:	429a      	cmp	r2, r3
 8004524:	d108      	bne.n	8004538 <HAL_UART_Receive+0x110>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e003      	b.n	8004540 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2274      	movs	r2, #116	; 0x74
 8004544:	2100      	movs	r1, #0
 8004546:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004548:	e037      	b.n	80045ba <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	0013      	movs	r3, r2
 8004554:	2200      	movs	r2, #0
 8004556:	2120      	movs	r1, #32
 8004558:	f000 fd72 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 800455c:	1e03      	subs	r3, r0, #0
 800455e:	d001      	beq.n	8004564 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e036      	b.n	80045d2 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10e      	bne.n	8004588 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004570:	b29b      	uxth	r3, r3
 8004572:	2212      	movs	r2, #18
 8004574:	18ba      	adds	r2, r7, r2
 8004576:	8812      	ldrh	r2, [r2, #0]
 8004578:	4013      	ands	r3, r2
 800457a:	b29a      	uxth	r2, r3
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	3302      	adds	r3, #2
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e00f      	b.n	80045a8 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800458e:	b29b      	uxth	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2212      	movs	r2, #18
 8004594:	18ba      	adds	r2, r7, r2
 8004596:	8812      	ldrh	r2, [r2, #0]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	4013      	ands	r3, r2
 800459c:	b2da      	uxtb	r2, r3
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	225a      	movs	r2, #90	; 0x5a
 80045ac:	5a9b      	ldrh	r3, [r3, r2]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b299      	uxth	r1, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	225a      	movs	r2, #90	; 0x5a
 80045b8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	225a      	movs	r2, #90	; 0x5a
 80045be:	5a9b      	ldrh	r3, [r3, r2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1c1      	bne.n	800454a <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b008      	add	sp, #32
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	000001ff 	.word	0x000001ff

080045e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b0ab      	sub	sp, #172	; 0xac
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	22a4      	movs	r2, #164	; 0xa4
 80045f0:	18b9      	adds	r1, r7, r2
 80045f2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	20a0      	movs	r0, #160	; 0xa0
 80045fc:	1839      	adds	r1, r7, r0
 80045fe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	219c      	movs	r1, #156	; 0x9c
 8004608:	1879      	adds	r1, r7, r1
 800460a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800460c:	0011      	movs	r1, r2
 800460e:	18bb      	adds	r3, r7, r2
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a99      	ldr	r2, [pc, #612]	; (8004878 <HAL_UART_IRQHandler+0x298>)
 8004614:	4013      	ands	r3, r2
 8004616:	2298      	movs	r2, #152	; 0x98
 8004618:	18bc      	adds	r4, r7, r2
 800461a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800461c:	18bb      	adds	r3, r7, r2
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d114      	bne.n	800464e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004624:	187b      	adds	r3, r7, r1
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2220      	movs	r2, #32
 800462a:	4013      	ands	r3, r2
 800462c:	d00f      	beq.n	800464e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800462e:	183b      	adds	r3, r7, r0
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2220      	movs	r2, #32
 8004634:	4013      	ands	r3, r2
 8004636:	d00a      	beq.n	800464e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463c:	2b00      	cmp	r3, #0
 800463e:	d100      	bne.n	8004642 <HAL_UART_IRQHandler+0x62>
 8004640:	e296      	b.n	8004b70 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	0010      	movs	r0, r2
 800464a:	4798      	blx	r3
      }
      return;
 800464c:	e290      	b.n	8004b70 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800464e:	2398      	movs	r3, #152	; 0x98
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d100      	bne.n	800465a <HAL_UART_IRQHandler+0x7a>
 8004658:	e114      	b.n	8004884 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800465a:	239c      	movs	r3, #156	; 0x9c
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d106      	bne.n	8004674 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004666:	23a0      	movs	r3, #160	; 0xa0
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a83      	ldr	r2, [pc, #524]	; (800487c <HAL_UART_IRQHandler+0x29c>)
 800466e:	4013      	ands	r3, r2
 8004670:	d100      	bne.n	8004674 <HAL_UART_IRQHandler+0x94>
 8004672:	e107      	b.n	8004884 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004674:	23a4      	movs	r3, #164	; 0xa4
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	4013      	ands	r3, r2
 800467e:	d012      	beq.n	80046a6 <HAL_UART_IRQHandler+0xc6>
 8004680:	23a0      	movs	r3, #160	; 0xa0
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4013      	ands	r3, r2
 800468c:	d00b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	589b      	ldr	r3, [r3, r2]
 800469c:	2201      	movs	r2, #1
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046a6:	23a4      	movs	r3, #164	; 0xa4
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2202      	movs	r2, #2
 80046ae:	4013      	ands	r3, r2
 80046b0:	d011      	beq.n	80046d6 <HAL_UART_IRQHandler+0xf6>
 80046b2:	239c      	movs	r3, #156	; 0x9c
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	4013      	ands	r3, r2
 80046bc:	d00b      	beq.n	80046d6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2202      	movs	r2, #2
 80046c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	589b      	ldr	r3, [r3, r2]
 80046cc:	2204      	movs	r2, #4
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d6:	23a4      	movs	r3, #164	; 0xa4
 80046d8:	18fb      	adds	r3, r7, r3
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2204      	movs	r2, #4
 80046de:	4013      	ands	r3, r2
 80046e0:	d011      	beq.n	8004706 <HAL_UART_IRQHandler+0x126>
 80046e2:	239c      	movs	r3, #156	; 0x9c
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	d00b      	beq.n	8004706 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2204      	movs	r2, #4
 80046f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	589b      	ldr	r3, [r3, r2]
 80046fc:	2202      	movs	r2, #2
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004706:	23a4      	movs	r3, #164	; 0xa4
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2208      	movs	r2, #8
 800470e:	4013      	ands	r3, r2
 8004710:	d017      	beq.n	8004742 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004712:	23a0      	movs	r3, #160	; 0xa0
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	4013      	ands	r3, r2
 800471c:	d105      	bne.n	800472a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800471e:	239c      	movs	r3, #156	; 0x9c
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2201      	movs	r2, #1
 8004726:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004728:	d00b      	beq.n	8004742 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2208      	movs	r2, #8
 8004730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2280      	movs	r2, #128	; 0x80
 8004736:	589b      	ldr	r3, [r3, r2]
 8004738:	2208      	movs	r2, #8
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004742:	23a4      	movs	r3, #164	; 0xa4
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4013      	ands	r3, r2
 800474e:	d013      	beq.n	8004778 <HAL_UART_IRQHandler+0x198>
 8004750:	23a0      	movs	r3, #160	; 0xa0
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	04db      	lsls	r3, r3, #19
 800475a:	4013      	ands	r3, r2
 800475c:	d00c      	beq.n	8004778 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2280      	movs	r2, #128	; 0x80
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	589b      	ldr	r3, [r3, r2]
 800476e:	2220      	movs	r2, #32
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	589b      	ldr	r3, [r3, r2]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d100      	bne.n	8004784 <HAL_UART_IRQHandler+0x1a4>
 8004782:	e1f7      	b.n	8004b74 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004784:	23a4      	movs	r3, #164	; 0xa4
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2220      	movs	r2, #32
 800478c:	4013      	ands	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004790:	23a0      	movs	r3, #160	; 0xa0
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2220      	movs	r2, #32
 8004798:	4013      	ands	r3, r2
 800479a:	d008      	beq.n	80047ae <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	0010      	movs	r0, r2
 80047ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	589b      	ldr	r3, [r3, r2]
 80047b4:	2194      	movs	r1, #148	; 0x94
 80047b6:	187a      	adds	r2, r7, r1
 80047b8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d004      	beq.n	80047d2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047c8:	187b      	adds	r3, r7, r1
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2228      	movs	r2, #40	; 0x28
 80047ce:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d0:	d047      	beq.n	8004862 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 fcf7 	bl	80051c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2240      	movs	r2, #64	; 0x40
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	d137      	bne.n	8004858 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80047ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f0:	2090      	movs	r0, #144	; 0x90
 80047f2:	183a      	adds	r2, r7, r0
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	2301      	movs	r3, #1
 80047f8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2140      	movs	r1, #64	; 0x40
 800480e:	438a      	bics	r2, r1
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	183b      	adds	r3, r7, r0
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	2b00      	cmp	r3, #0
 8004826:	d012      	beq.n	800484e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <HAL_UART_IRQHandler+0x2a0>)
 800482e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	0018      	movs	r0, r3
 8004836:	f7fd faeb 	bl	8001e10 <HAL_DMA_Abort_IT>
 800483a:	1e03      	subs	r3, r0, #0
 800483c:	d01a      	beq.n	8004874 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	0018      	movs	r0, r3
 800484a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e012      	b.n	8004874 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 f9a5 	bl	8004ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004856:	e00d      	b.n	8004874 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0018      	movs	r0, r3
 800485c:	f000 f9a0 	bl	8004ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	e008      	b.n	8004874 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 f99b 	bl	8004ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	2100      	movs	r1, #0
 8004870:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004872:	e17f      	b.n	8004b74 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	46c0      	nop			; (mov r8, r8)
    return;
 8004876:	e17d      	b.n	8004b74 <HAL_UART_IRQHandler+0x594>
 8004878:	0000080f 	.word	0x0000080f
 800487c:	04000120 	.word	0x04000120
 8004880:	0800528d 	.word	0x0800528d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004888:	2b01      	cmp	r3, #1
 800488a:	d000      	beq.n	800488e <HAL_UART_IRQHandler+0x2ae>
 800488c:	e131      	b.n	8004af2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800488e:	23a4      	movs	r3, #164	; 0xa4
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2210      	movs	r2, #16
 8004896:	4013      	ands	r3, r2
 8004898:	d100      	bne.n	800489c <HAL_UART_IRQHandler+0x2bc>
 800489a:	e12a      	b.n	8004af2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800489c:	23a0      	movs	r3, #160	; 0xa0
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2210      	movs	r2, #16
 80048a4:	4013      	ands	r3, r2
 80048a6:	d100      	bne.n	80048aa <HAL_UART_IRQHandler+0x2ca>
 80048a8:	e123      	b.n	8004af2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2240      	movs	r2, #64	; 0x40
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d000      	beq.n	80048c2 <HAL_UART_IRQHandler+0x2e2>
 80048c0:	e09b      	b.n	80049fa <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	217e      	movs	r1, #126	; 0x7e
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d100      	bne.n	80048da <HAL_UART_IRQHandler+0x2fa>
 80048d8:	e14e      	b.n	8004b78 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2258      	movs	r2, #88	; 0x58
 80048de:	5a9b      	ldrh	r3, [r3, r2]
 80048e0:	187a      	adds	r2, r7, r1
 80048e2:	8812      	ldrh	r2, [r2, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d300      	bcc.n	80048ea <HAL_UART_IRQHandler+0x30a>
 80048e8:	e146      	b.n	8004b78 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	187a      	adds	r2, r7, r1
 80048ee:	215a      	movs	r1, #90	; 0x5a
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d06e      	beq.n	80049dc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004906:	67bb      	str	r3, [r7, #120]	; 0x78
 8004908:	2301      	movs	r3, #1
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490e:	f383 8810 	msr	PRIMASK, r3
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	499a      	ldr	r1, [pc, #616]	; (8004b88 <HAL_UART_IRQHandler+0x5a8>)
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	f383 8810 	msr	PRIMASK, r3
}
 800492e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004930:	f3ef 8310 	mrs	r3, PRIMASK
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	677b      	str	r3, [r7, #116]	; 0x74
 800493a:	2301      	movs	r3, #1
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2101      	movs	r1, #1
 8004952:	438a      	bics	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	673b      	str	r3, [r7, #112]	; 0x70
 800496c:	2301      	movs	r3, #1
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2140      	movs	r1, #64	; 0x40
 8004984:	438a      	bics	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800498a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498e:	f383 8810 	msr	PRIMASK, r3
}
 8004992:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a0:	f3ef 8310 	mrs	r3, PRIMASK
 80049a4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049aa:	2301      	movs	r3, #1
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b0:	f383 8810 	msr	PRIMASK, r3
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2110      	movs	r1, #16
 80049c2:	438a      	bics	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7fd f9e2 	bl	8001da0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2258      	movs	r2, #88	; 0x58
 80049e0:	5a9a      	ldrh	r2, [r3, r2]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	215a      	movs	r1, #90	; 0x5a
 80049e6:	5a5b      	ldrh	r3, [r3, r1]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 f8dc 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049f8:	e0be      	b.n	8004b78 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2258      	movs	r2, #88	; 0x58
 80049fe:	5a99      	ldrh	r1, [r3, r2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	225a      	movs	r2, #90	; 0x5a
 8004a04:	5a9b      	ldrh	r3, [r3, r2]
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	208e      	movs	r0, #142	; 0x8e
 8004a0a:	183b      	adds	r3, r7, r0
 8004a0c:	1a8a      	subs	r2, r1, r2
 8004a0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	225a      	movs	r2, #90	; 0x5a
 8004a14:	5a9b      	ldrh	r3, [r3, r2]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d100      	bne.n	8004a1e <HAL_UART_IRQHandler+0x43e>
 8004a1c:	e0ae      	b.n	8004b7c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d100      	bne.n	8004a28 <HAL_UART_IRQHandler+0x448>
 8004a26:	e0a9      	b.n	8004b7c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a28:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a30:	2488      	movs	r4, #136	; 0x88
 8004a32:	193a      	adds	r2, r7, r4
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	2301      	movs	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	494f      	ldr	r1, [pc, #316]	; (8004b8c <HAL_UART_IRQHandler+0x5ac>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	193b      	adds	r3, r7, r4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a60:	f3ef 8310 	mrs	r3, PRIMASK
 8004a64:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	2484      	movs	r4, #132	; 0x84
 8004a6a:	193a      	adds	r2, r7, r4
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f383 8810 	msr	PRIMASK, r3
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	438a      	bics	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab2:	2480      	movs	r4, #128	; 0x80
 8004ab4:	193a      	adds	r2, r7, r4
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2110      	movs	r1, #16
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	193b      	adds	r3, r7, r4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0011      	movs	r1, r2
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 f860 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004af0:	e044      	b.n	8004b7c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004af2:	23a4      	movs	r3, #164	; 0xa4
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	035b      	lsls	r3, r3, #13
 8004afc:	4013      	ands	r3, r2
 8004afe:	d010      	beq.n	8004b22 <HAL_UART_IRQHandler+0x542>
 8004b00:	239c      	movs	r3, #156	; 0x9c
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	03db      	lsls	r3, r3, #15
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	0352      	lsls	r2, r2, #13
 8004b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 fbf8 	bl	8005310 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b20:	e02f      	b.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b22:	23a4      	movs	r3, #164	; 0xa4
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b2e:	23a0      	movs	r3, #160	; 0xa0
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	4013      	ands	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01e      	beq.n	8004b80 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	0010      	movs	r0, r2
 8004b4a:	4798      	blx	r3
    }
    return;
 8004b4c:	e018      	b.n	8004b80 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b4e:	23a4      	movs	r3, #164	; 0xa4
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2240      	movs	r2, #64	; 0x40
 8004b56:	4013      	ands	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
 8004b5a:	23a0      	movs	r3, #160	; 0xa0
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2240      	movs	r2, #64	; 0x40
 8004b62:	4013      	ands	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 fba6 	bl	80052ba <UART_EndTransmit_IT>
    return;
 8004b6e:	e008      	b.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	e006      	b.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	e004      	b.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	e002      	b.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	e000      	b.n	8004b82 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004b80:	46c0      	nop			; (mov r8, r8)
  }

}
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b02b      	add	sp, #172	; 0xac
 8004b86:	bd90      	pop	{r4, r7, pc}
 8004b88:	fffffeff 	.word	0xfffffeff
 8004b8c:	fffffedf 	.word	0xfffffedf

08004b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	000a      	movs	r2, r1
 8004bba:	1cbb      	adds	r3, r7, #2
 8004bbc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b002      	add	sp, #8
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd0:	231e      	movs	r3, #30
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a8d      	ldr	r2, [pc, #564]	; (8004e2c <UART_SetConfig+0x264>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a88      	ldr	r2, [pc, #544]	; (8004e30 <UART_SetConfig+0x268>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a7f      	ldr	r2, [pc, #508]	; (8004e34 <UART_SetConfig+0x26c>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a7b      	ldr	r2, [pc, #492]	; (8004e38 <UART_SetConfig+0x270>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d127      	bne.n	8004c9e <UART_SetConfig+0xd6>
 8004c4e:	4b7b      	ldr	r3, [pc, #492]	; (8004e3c <UART_SetConfig+0x274>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	2203      	movs	r2, #3
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d00d      	beq.n	8004c76 <UART_SetConfig+0xae>
 8004c5a:	d81b      	bhi.n	8004c94 <UART_SetConfig+0xcc>
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d014      	beq.n	8004c8a <UART_SetConfig+0xc2>
 8004c60:	d818      	bhi.n	8004c94 <UART_SetConfig+0xcc>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <UART_SetConfig+0xa4>
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d00a      	beq.n	8004c80 <UART_SetConfig+0xb8>
 8004c6a:	e013      	b.n	8004c94 <UART_SetConfig+0xcc>
 8004c6c:	231f      	movs	r3, #31
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e021      	b.n	8004cba <UART_SetConfig+0xf2>
 8004c76:	231f      	movs	r3, #31
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e01c      	b.n	8004cba <UART_SetConfig+0xf2>
 8004c80:	231f      	movs	r3, #31
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2204      	movs	r2, #4
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e017      	b.n	8004cba <UART_SetConfig+0xf2>
 8004c8a:	231f      	movs	r3, #31
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	2208      	movs	r2, #8
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e012      	b.n	8004cba <UART_SetConfig+0xf2>
 8004c94:	231f      	movs	r3, #31
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	2210      	movs	r2, #16
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e00d      	b.n	8004cba <UART_SetConfig+0xf2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a67      	ldr	r2, [pc, #412]	; (8004e40 <UART_SetConfig+0x278>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d104      	bne.n	8004cb2 <UART_SetConfig+0xea>
 8004ca8:	231f      	movs	r3, #31
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e003      	b.n	8004cba <UART_SetConfig+0xf2>
 8004cb2:	231f      	movs	r3, #31
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d15d      	bne.n	8004d82 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004cc6:	231f      	movs	r3, #31
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d015      	beq.n	8004cfc <UART_SetConfig+0x134>
 8004cd0:	dc18      	bgt.n	8004d04 <UART_SetConfig+0x13c>
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00d      	beq.n	8004cf2 <UART_SetConfig+0x12a>
 8004cd6:	dc15      	bgt.n	8004d04 <UART_SetConfig+0x13c>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0x11a>
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d005      	beq.n	8004cec <UART_SetConfig+0x124>
 8004ce0:	e010      	b.n	8004d04 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce2:	f7fe f8df 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	61bb      	str	r3, [r7, #24]
        break;
 8004cea:	e012      	b.n	8004d12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <UART_SetConfig+0x27c>)
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e00f      	b.n	8004d12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fe f869 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	61bb      	str	r3, [r7, #24]
        break;
 8004cfa:	e00a      	b.n	8004d12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	61bb      	str	r3, [r7, #24]
        break;
 8004d02:	e006      	b.n	8004d12 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d08:	231e      	movs	r3, #30
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
        break;
 8004d10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d100      	bne.n	8004d1a <UART_SetConfig+0x152>
 8004d18:	e07b      	b.n	8004e12 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	005a      	lsls	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	18d2      	adds	r2, r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	0010      	movs	r0, r2
 8004d2e:	f7fb f9fd 	bl	800012c <__udivsi3>
 8004d32:	0003      	movs	r3, r0
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d91c      	bls.n	8004d78 <UART_SetConfig+0x1b0>
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	025b      	lsls	r3, r3, #9
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d217      	bcs.n	8004d78 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	200e      	movs	r0, #14
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	210f      	movs	r1, #15
 8004d52:	438a      	bics	r2, r1
 8004d54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b299      	uxth	r1, r3
 8004d62:	183b      	adds	r3, r7, r0
 8004d64:	183a      	adds	r2, r7, r0
 8004d66:	8812      	ldrh	r2, [r2, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	183a      	adds	r2, r7, r0
 8004d72:	8812      	ldrh	r2, [r2, #0]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	e04c      	b.n	8004e12 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004d78:	231e      	movs	r3, #30
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e047      	b.n	8004e12 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d82:	231f      	movs	r3, #31
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d015      	beq.n	8004db8 <UART_SetConfig+0x1f0>
 8004d8c:	dc18      	bgt.n	8004dc0 <UART_SetConfig+0x1f8>
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00d      	beq.n	8004dae <UART_SetConfig+0x1e6>
 8004d92:	dc15      	bgt.n	8004dc0 <UART_SetConfig+0x1f8>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <UART_SetConfig+0x1d6>
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d005      	beq.n	8004da8 <UART_SetConfig+0x1e0>
 8004d9c:	e010      	b.n	8004dc0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d9e:	f7fe f881 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8004da2:	0003      	movs	r3, r0
 8004da4:	61bb      	str	r3, [r7, #24]
        break;
 8004da6:	e012      	b.n	8004dce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b26      	ldr	r3, [pc, #152]	; (8004e44 <UART_SetConfig+0x27c>)
 8004daa:	61bb      	str	r3, [r7, #24]
        break;
 8004dac:	e00f      	b.n	8004dce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fe f80b 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61bb      	str	r3, [r7, #24]
        break;
 8004db6:	e00a      	b.n	8004dce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	61bb      	str	r3, [r7, #24]
        break;
 8004dbe:	e006      	b.n	8004dce <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dc4:	231e      	movs	r3, #30
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	2201      	movs	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]
        break;
 8004dcc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01e      	beq.n	8004e12 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	085a      	lsrs	r2, r3, #1
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	18d2      	adds	r2, r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0019      	movs	r1, r3
 8004de4:	0010      	movs	r0, r2
 8004de6:	f7fb f9a1 	bl	800012c <__udivsi3>
 8004dea:	0003      	movs	r3, r0
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	d909      	bls.n	8004e0a <UART_SetConfig+0x242>
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	025b      	lsls	r3, r3, #9
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d204      	bcs.n	8004e0a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e003      	b.n	8004e12 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0a:	231e      	movs	r3, #30
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e1e:	231e      	movs	r3, #30
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	781b      	ldrb	r3, [r3, #0]
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b008      	add	sp, #32
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	ffff69f3 	.word	0xffff69f3
 8004e30:	ffffcfff 	.word	0xffffcfff
 8004e34:	fffff4ff 	.word	0xfffff4ff
 8004e38:	40013800 	.word	0x40013800
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40004400 	.word	0x40004400
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2201      	movs	r2, #1
 8004e56:	4013      	ands	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a4a      	ldr	r2, [pc, #296]	; (8004f8c <UART_AdvFeatureConfig+0x144>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2202      	movs	r2, #2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4a43      	ldr	r2, [pc, #268]	; (8004f90 <UART_AdvFeatureConfig+0x148>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2204      	movs	r2, #4
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a3b      	ldr	r2, [pc, #236]	; (8004f94 <UART_AdvFeatureConfig+0x14c>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	2208      	movs	r2, #8
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <UART_AdvFeatureConfig+0x150>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2210      	movs	r2, #16
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <UART_AdvFeatureConfig+0x154>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2220      	movs	r2, #32
 8004f00:	4013      	ands	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4a25      	ldr	r2, [pc, #148]	; (8004fa0 <UART_AdvFeatureConfig+0x158>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2240      	movs	r2, #64	; 0x40
 8004f22:	4013      	ands	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <UART_AdvFeatureConfig+0x15c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	035b      	lsls	r3, r3, #13
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d10b      	bne.n	8004f62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <UART_AdvFeatureConfig+0x160>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	0019      	movs	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <UART_AdvFeatureConfig+0x164>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	0019      	movs	r1, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }
}
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b002      	add	sp, #8
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	fffdffff 	.word	0xfffdffff
 8004f90:	fffeffff 	.word	0xfffeffff
 8004f94:	fffbffff 	.word	0xfffbffff
 8004f98:	ffff7fff 	.word	0xffff7fff
 8004f9c:	ffffefff 	.word	0xffffefff
 8004fa0:	ffffdfff 	.word	0xffffdfff
 8004fa4:	ffefffff 	.word	0xffefffff
 8004fa8:	ff9fffff 	.word	0xff9fffff
 8004fac:	fff7ffff 	.word	0xfff7ffff

08004fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc0:	f7fc fac8 	bl	8001554 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d10c      	bne.n	8004ff0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	0391      	lsls	r1, r2, #14
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <UART_CheckIdleState+0x8c>)
 8004fe0:	9200      	str	r2, [sp, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f000 f82c 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d001      	beq.n	8004ff0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e021      	b.n	8005034 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d10c      	bne.n	8005018 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	03d1      	lsls	r1, r2, #15
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4a0d      	ldr	r2, [pc, #52]	; (800503c <UART_CheckIdleState+0x8c>)
 8005008:	9200      	str	r2, [sp, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	f000 f818 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8005010:	1e03      	subs	r3, r0, #0
 8005012:	d001      	beq.n	8005018 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e00d      	b.n	8005034 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2274      	movs	r2, #116	; 0x74
 800502e:	2100      	movs	r1, #0
 8005030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b004      	add	sp, #16
 800503a:	bd80      	pop	{r7, pc}
 800503c:	01ffffff 	.word	0x01ffffff

08005040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b094      	sub	sp, #80	; 0x50
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	1dfb      	adds	r3, r7, #7
 800504e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	e0a3      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005054:	3301      	adds	r3, #1
 8005056:	d100      	bne.n	800505a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005058:	e09f      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505a:	f7fc fa7b 	bl	8001554 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
 800506a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800506c:	2b00      	cmp	r3, #0
 800506e:	d13d      	bne.n	80050ec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005070:	f3ef 8310 	mrs	r3, PRIMASK
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005078:	647b      	str	r3, [r7, #68]	; 0x44
 800507a:	2301      	movs	r3, #1
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	494c      	ldr	r1, [pc, #304]	; (80051c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005092:	400a      	ands	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	f383 8810 	msr	PRIMASK, r3
}
 80050a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a2:	f3ef 8310 	mrs	r3, PRIMASK
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	643b      	str	r3, [r7, #64]	; 0x40
 80050ac:	2301      	movs	r3, #1
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2101      	movs	r1, #1
 80050c4:	438a      	bics	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2274      	movs	r2, #116	; 0x74
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e067      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2204      	movs	r2, #4
 80050f4:	4013      	ands	r3, r2
 80050f6:	d050      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	401a      	ands	r2, r3
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	429a      	cmp	r2, r3
 800510a:	d146      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	0112      	lsls	r2, r2, #4
 8005114:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005116:	f3ef 8310 	mrs	r3, PRIMASK
 800511a:	613b      	str	r3, [r7, #16]
  return(result);
 800511c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f383 8810 	msr	PRIMASK, r3
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4923      	ldr	r1, [pc, #140]	; (80051c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005138:	400a      	ands	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f383 8810 	msr	PRIMASK, r3
}
 8005146:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005148:	f3ef 8310 	mrs	r3, PRIMASK
 800514c:	61fb      	str	r3, [r7, #28]
  return(result);
 800514e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	64bb      	str	r3, [r7, #72]	; 0x48
 8005152:	2301      	movs	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f383 8810 	msr	PRIMASK, r3
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2101      	movs	r1, #1
 800516a:	438a      	bics	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	f383 8810 	msr	PRIMASK, r3
}
 8005178:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	2120      	movs	r1, #32
 800518c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2274      	movs	r2, #116	; 0x74
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e010      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	425a      	negs	r2, r3
 80051aa:	4153      	adcs	r3, r2
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	001a      	movs	r2, r3
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d100      	bne.n	80051ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80051b8:	e74b      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b014      	add	sp, #80	; 0x50
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	fffffe5f 	.word	0xfffffe5f

080051c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d0:	f3ef 8310 	mrs	r3, PRIMASK
 80051d4:	617b      	str	r3, [r7, #20]
  return(result);
 80051d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
 80051da:	2301      	movs	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4925      	ldr	r1, [pc, #148]	; (8005288 <UART_EndRxTransfer+0xc0>)
 80051f2:	400a      	ands	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005202:	f3ef 8310 	mrs	r3, PRIMASK
 8005206:	623b      	str	r3, [r7, #32]
  return(result);
 8005208:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	633b      	str	r3, [r7, #48]	; 0x30
 800520c:	2301      	movs	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	f383 8810 	msr	PRIMASK, r3
}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	438a      	bics	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	2b01      	cmp	r3, #1
 800523a:	d118      	bne.n	800526e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	60bb      	str	r3, [r7, #8]
  return(result);
 8005242:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005246:	2301      	movs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2110      	movs	r1, #16
 800525e:	438a      	bics	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b00e      	add	sp, #56	; 0x38
 8005286:	bd80      	pop	{r7, pc}
 8005288:	fffffedf 	.word	0xfffffedf

0800528c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	225a      	movs	r2, #90	; 0x5a
 800529e:	2100      	movs	r1, #0
 80052a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2252      	movs	r2, #82	; 0x52
 80052a6:	2100      	movs	r1, #0
 80052a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7ff fc77 	bl	8004ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b004      	add	sp, #16
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c2:	f3ef 8310 	mrs	r3, PRIMASK
 80052c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f383 8810 	msr	PRIMASK, r3
}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2140      	movs	r1, #64	; 0x40
 80052e4:	438a      	bics	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	0018      	movs	r0, r3
 8005304:	f7ff fc44 	bl	8004b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	b006      	add	sp, #24
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b002      	add	sp, #8
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	6019      	str	r1, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2317      	movs	r3, #23
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2274      	movs	r2, #116	; 0x74
 800533a:	5c9b      	ldrb	r3, [r3, r2]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8005340:	2302      	movs	r3, #2
 8005342:	e04a      	b.n	80053da <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2274      	movs	r2, #116	; 0x74
 8005348:	2101      	movs	r1, #1
 800534a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2224      	movs	r2, #36	; 0x24
 8005350:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2101      	movs	r1, #1
 800535e:	438a      	bics	r2, r1
 8005360:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	6819      	ldr	r1, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	f000 f860 	bl	800544e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	430a      	orrs	r2, r1
 800539c:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800539e:	f7fc f8d9 	bl	8001554 <HAL_GetTick>
 80053a2:	0003      	movs	r3, r0
 80053a4:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	03d1      	lsls	r1, r2, #15
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80053b0:	9200      	str	r2, [sp, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f7ff fe44 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 80053b8:	1e03      	subs	r3, r0, #0
 80053ba:	d004      	beq.n	80053c6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80053bc:	2317      	movs	r3, #23
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	2203      	movs	r2, #3
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e002      	b.n	80053cc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2274      	movs	r2, #116	; 0x74
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

  return status;
 80053d4:	2317      	movs	r3, #23
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	781b      	ldrb	r3, [r3, #0]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b006      	add	sp, #24
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	ffcfffff 	.word	0xffcfffff
 80053e8:	01ffffff 	.word	0x01ffffff

080053ec <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2274      	movs	r2, #116	; 0x74
 80053f8:	5c9b      	ldrb	r3, [r3, r2]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_UARTEx_EnableStopMode+0x16>
 80053fe:	2302      	movs	r3, #2
 8005400:	e021      	b.n	8005446 <HAL_UARTEx_EnableStopMode+0x5a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2274      	movs	r2, #116	; 0x74
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540a:	f3ef 8310 	mrs	r3, PRIMASK
 800540e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005410:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	2301      	movs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2102      	movs	r1, #2
 800542c:	430a      	orrs	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2274      	movs	r2, #116	; 0x74
 8005440:	2100      	movs	r1, #0
 8005442:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	b006      	add	sp, #24
 800544c:	bd80      	pop	{r7, pc}

0800544e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	1d3b      	adds	r3, r7, #4
 8005458:	6019      	str	r1, [r3, #0]
 800545a:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2210      	movs	r2, #16
 8005464:	4393      	bics	r3, r2
 8005466:	001a      	movs	r2, r3
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	889b      	ldrh	r3, [r3, #4]
 800546c:	0019      	movs	r1, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	0a19      	lsrs	r1, r3, #8
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	799b      	ldrb	r3, [r3, #6]
 8005484:	061a      	lsls	r2, r3, #24
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	2600      	movs	r6, #0
 80054a8:	4d0c      	ldr	r5, [pc, #48]	; (80054dc <__libc_init_array+0x38>)
 80054aa:	4c0d      	ldr	r4, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054ac:	1b64      	subs	r4, r4, r5
 80054ae:	10a4      	asrs	r4, r4, #2
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	2600      	movs	r6, #0
 80054b6:	f000 fc8b 	bl	8005dd0 <_init>
 80054ba:	4d0a      	ldr	r5, [pc, #40]	; (80054e4 <__libc_init_array+0x40>)
 80054bc:	4c0a      	ldr	r4, [pc, #40]	; (80054e8 <__libc_init_array+0x44>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	00b3      	lsls	r3, r6, #2
 80054ca:	58eb      	ldr	r3, [r5, r3]
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	00b3      	lsls	r3, r6, #2
 80054d4:	58eb      	ldr	r3, [r5, r3]
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005e64 	.word	0x08005e64
 80054e0:	08005e64 	.word	0x08005e64
 80054e4:	08005e64 	.word	0x08005e64
 80054e8:	08005e68 	.word	0x08005e68

080054ec <memset>:
 80054ec:	0003      	movs	r3, r0
 80054ee:	1882      	adds	r2, r0, r2
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	7019      	strb	r1, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <siprintf>:
 80054fc:	b40e      	push	{r1, r2, r3}
 80054fe:	b500      	push	{lr}
 8005500:	490b      	ldr	r1, [pc, #44]	; (8005530 <siprintf+0x34>)
 8005502:	b09c      	sub	sp, #112	; 0x70
 8005504:	ab1d      	add	r3, sp, #116	; 0x74
 8005506:	9002      	str	r0, [sp, #8]
 8005508:	9006      	str	r0, [sp, #24]
 800550a:	9107      	str	r1, [sp, #28]
 800550c:	9104      	str	r1, [sp, #16]
 800550e:	4809      	ldr	r0, [pc, #36]	; (8005534 <siprintf+0x38>)
 8005510:	4909      	ldr	r1, [pc, #36]	; (8005538 <siprintf+0x3c>)
 8005512:	cb04      	ldmia	r3!, {r2}
 8005514:	9105      	str	r1, [sp, #20]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	a902      	add	r1, sp, #8
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	f000 f870 	bl	8005600 <_svfiprintf_r>
 8005520:	2300      	movs	r3, #0
 8005522:	9a02      	ldr	r2, [sp, #8]
 8005524:	7013      	strb	r3, [r2, #0]
 8005526:	b01c      	add	sp, #112	; 0x70
 8005528:	bc08      	pop	{r3}
 800552a:	b003      	add	sp, #12
 800552c:	4718      	bx	r3
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	7fffffff 	.word	0x7fffffff
 8005534:	2000000c 	.word	0x2000000c
 8005538:	ffff0208 	.word	0xffff0208

0800553c <__ssputs_r>:
 800553c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553e:	688e      	ldr	r6, [r1, #8]
 8005540:	b085      	sub	sp, #20
 8005542:	0007      	movs	r7, r0
 8005544:	000c      	movs	r4, r1
 8005546:	9203      	str	r2, [sp, #12]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	429e      	cmp	r6, r3
 800554c:	d83c      	bhi.n	80055c8 <__ssputs_r+0x8c>
 800554e:	2390      	movs	r3, #144	; 0x90
 8005550:	898a      	ldrh	r2, [r1, #12]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	421a      	tst	r2, r3
 8005556:	d034      	beq.n	80055c2 <__ssputs_r+0x86>
 8005558:	6909      	ldr	r1, [r1, #16]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	6960      	ldr	r0, [r4, #20]
 800555e:	1a5b      	subs	r3, r3, r1
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	2303      	movs	r3, #3
 8005564:	4343      	muls	r3, r0
 8005566:	0fdd      	lsrs	r5, r3, #31
 8005568:	18ed      	adds	r5, r5, r3
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	9802      	ldr	r0, [sp, #8]
 800556e:	3301      	adds	r3, #1
 8005570:	181b      	adds	r3, r3, r0
 8005572:	106d      	asrs	r5, r5, #1
 8005574:	42ab      	cmp	r3, r5
 8005576:	d900      	bls.n	800557a <__ssputs_r+0x3e>
 8005578:	001d      	movs	r5, r3
 800557a:	0553      	lsls	r3, r2, #21
 800557c:	d532      	bpl.n	80055e4 <__ssputs_r+0xa8>
 800557e:	0029      	movs	r1, r5
 8005580:	0038      	movs	r0, r7
 8005582:	f000 fb53 	bl	8005c2c <_malloc_r>
 8005586:	1e06      	subs	r6, r0, #0
 8005588:	d109      	bne.n	800559e <__ssputs_r+0x62>
 800558a:	230c      	movs	r3, #12
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	2340      	movs	r3, #64	; 0x40
 8005590:	2001      	movs	r0, #1
 8005592:	89a2      	ldrh	r2, [r4, #12]
 8005594:	4240      	negs	r0, r0
 8005596:	4313      	orrs	r3, r2
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	b005      	add	sp, #20
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559e:	9a02      	ldr	r2, [sp, #8]
 80055a0:	6921      	ldr	r1, [r4, #16]
 80055a2:	f000 faba 	bl	8005b1a <memcpy>
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	4a14      	ldr	r2, [pc, #80]	; (80055fc <__ssputs_r+0xc0>)
 80055aa:	401a      	ands	r2, r3
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	4313      	orrs	r3, r2
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	9b02      	ldr	r3, [sp, #8]
 80055b4:	6126      	str	r6, [r4, #16]
 80055b6:	18f6      	adds	r6, r6, r3
 80055b8:	6026      	str	r6, [r4, #0]
 80055ba:	6165      	str	r5, [r4, #20]
 80055bc:	9e01      	ldr	r6, [sp, #4]
 80055be:	1aed      	subs	r5, r5, r3
 80055c0:	60a5      	str	r5, [r4, #8]
 80055c2:	9b01      	ldr	r3, [sp, #4]
 80055c4:	429e      	cmp	r6, r3
 80055c6:	d900      	bls.n	80055ca <__ssputs_r+0x8e>
 80055c8:	9e01      	ldr	r6, [sp, #4]
 80055ca:	0032      	movs	r2, r6
 80055cc:	9903      	ldr	r1, [sp, #12]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	f000 faac 	bl	8005b2c <memmove>
 80055d4:	68a3      	ldr	r3, [r4, #8]
 80055d6:	2000      	movs	r0, #0
 80055d8:	1b9b      	subs	r3, r3, r6
 80055da:	60a3      	str	r3, [r4, #8]
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	199e      	adds	r6, r3, r6
 80055e0:	6026      	str	r6, [r4, #0]
 80055e2:	e7da      	b.n	800559a <__ssputs_r+0x5e>
 80055e4:	002a      	movs	r2, r5
 80055e6:	0038      	movs	r0, r7
 80055e8:	f000 fb96 	bl	8005d18 <_realloc_r>
 80055ec:	1e06      	subs	r6, r0, #0
 80055ee:	d1e0      	bne.n	80055b2 <__ssputs_r+0x76>
 80055f0:	0038      	movs	r0, r7
 80055f2:	6921      	ldr	r1, [r4, #16]
 80055f4:	f000 faae 	bl	8005b54 <_free_r>
 80055f8:	e7c7      	b.n	800558a <__ssputs_r+0x4e>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	fffffb7f 	.word	0xfffffb7f

08005600 <_svfiprintf_r>:
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	b0a1      	sub	sp, #132	; 0x84
 8005604:	9003      	str	r0, [sp, #12]
 8005606:	001d      	movs	r5, r3
 8005608:	898b      	ldrh	r3, [r1, #12]
 800560a:	000f      	movs	r7, r1
 800560c:	0016      	movs	r6, r2
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	d511      	bpl.n	8005636 <_svfiprintf_r+0x36>
 8005612:	690b      	ldr	r3, [r1, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10e      	bne.n	8005636 <_svfiprintf_r+0x36>
 8005618:	2140      	movs	r1, #64	; 0x40
 800561a:	f000 fb07 	bl	8005c2c <_malloc_r>
 800561e:	6038      	str	r0, [r7, #0]
 8005620:	6138      	str	r0, [r7, #16]
 8005622:	2800      	cmp	r0, #0
 8005624:	d105      	bne.n	8005632 <_svfiprintf_r+0x32>
 8005626:	230c      	movs	r3, #12
 8005628:	9a03      	ldr	r2, [sp, #12]
 800562a:	3801      	subs	r0, #1
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	b021      	add	sp, #132	; 0x84
 8005630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	2300      	movs	r3, #0
 8005638:	ac08      	add	r4, sp, #32
 800563a:	6163      	str	r3, [r4, #20]
 800563c:	3320      	adds	r3, #32
 800563e:	7663      	strb	r3, [r4, #25]
 8005640:	3310      	adds	r3, #16
 8005642:	76a3      	strb	r3, [r4, #26]
 8005644:	9507      	str	r5, [sp, #28]
 8005646:	0035      	movs	r5, r6
 8005648:	782b      	ldrb	r3, [r5, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <_svfiprintf_r+0x52>
 800564e:	2b25      	cmp	r3, #37	; 0x25
 8005650:	d147      	bne.n	80056e2 <_svfiprintf_r+0xe2>
 8005652:	1bab      	subs	r3, r5, r6
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	42b5      	cmp	r5, r6
 8005658:	d00c      	beq.n	8005674 <_svfiprintf_r+0x74>
 800565a:	0032      	movs	r2, r6
 800565c:	0039      	movs	r1, r7
 800565e:	9803      	ldr	r0, [sp, #12]
 8005660:	f7ff ff6c 	bl	800553c <__ssputs_r>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d100      	bne.n	800566a <_svfiprintf_r+0x6a>
 8005668:	e0ae      	b.n	80057c8 <_svfiprintf_r+0x1c8>
 800566a:	6962      	ldr	r2, [r4, #20]
 800566c:	9b05      	ldr	r3, [sp, #20]
 800566e:	4694      	mov	ip, r2
 8005670:	4463      	add	r3, ip
 8005672:	6163      	str	r3, [r4, #20]
 8005674:	782b      	ldrb	r3, [r5, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d100      	bne.n	800567c <_svfiprintf_r+0x7c>
 800567a:	e0a5      	b.n	80057c8 <_svfiprintf_r+0x1c8>
 800567c:	2201      	movs	r2, #1
 800567e:	2300      	movs	r3, #0
 8005680:	4252      	negs	r2, r2
 8005682:	6062      	str	r2, [r4, #4]
 8005684:	a904      	add	r1, sp, #16
 8005686:	3254      	adds	r2, #84	; 0x54
 8005688:	1852      	adds	r2, r2, r1
 800568a:	1c6e      	adds	r6, r5, #1
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	60e3      	str	r3, [r4, #12]
 8005690:	60a3      	str	r3, [r4, #8]
 8005692:	7013      	strb	r3, [r2, #0]
 8005694:	65a3      	str	r3, [r4, #88]	; 0x58
 8005696:	2205      	movs	r2, #5
 8005698:	7831      	ldrb	r1, [r6, #0]
 800569a:	4854      	ldr	r0, [pc, #336]	; (80057ec <_svfiprintf_r+0x1ec>)
 800569c:	f000 fa32 	bl	8005b04 <memchr>
 80056a0:	1c75      	adds	r5, r6, #1
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d11f      	bne.n	80056e6 <_svfiprintf_r+0xe6>
 80056a6:	6822      	ldr	r2, [r4, #0]
 80056a8:	06d3      	lsls	r3, r2, #27
 80056aa:	d504      	bpl.n	80056b6 <_svfiprintf_r+0xb6>
 80056ac:	2353      	movs	r3, #83	; 0x53
 80056ae:	a904      	add	r1, sp, #16
 80056b0:	185b      	adds	r3, r3, r1
 80056b2:	2120      	movs	r1, #32
 80056b4:	7019      	strb	r1, [r3, #0]
 80056b6:	0713      	lsls	r3, r2, #28
 80056b8:	d504      	bpl.n	80056c4 <_svfiprintf_r+0xc4>
 80056ba:	2353      	movs	r3, #83	; 0x53
 80056bc:	a904      	add	r1, sp, #16
 80056be:	185b      	adds	r3, r3, r1
 80056c0:	212b      	movs	r1, #43	; 0x2b
 80056c2:	7019      	strb	r1, [r3, #0]
 80056c4:	7833      	ldrb	r3, [r6, #0]
 80056c6:	2b2a      	cmp	r3, #42	; 0x2a
 80056c8:	d016      	beq.n	80056f8 <_svfiprintf_r+0xf8>
 80056ca:	0035      	movs	r5, r6
 80056cc:	2100      	movs	r1, #0
 80056ce:	200a      	movs	r0, #10
 80056d0:	68e3      	ldr	r3, [r4, #12]
 80056d2:	782a      	ldrb	r2, [r5, #0]
 80056d4:	1c6e      	adds	r6, r5, #1
 80056d6:	3a30      	subs	r2, #48	; 0x30
 80056d8:	2a09      	cmp	r2, #9
 80056da:	d94e      	bls.n	800577a <_svfiprintf_r+0x17a>
 80056dc:	2900      	cmp	r1, #0
 80056de:	d111      	bne.n	8005704 <_svfiprintf_r+0x104>
 80056e0:	e017      	b.n	8005712 <_svfiprintf_r+0x112>
 80056e2:	3501      	adds	r5, #1
 80056e4:	e7b0      	b.n	8005648 <_svfiprintf_r+0x48>
 80056e6:	4b41      	ldr	r3, [pc, #260]	; (80057ec <_svfiprintf_r+0x1ec>)
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	1ac0      	subs	r0, r0, r3
 80056ec:	2301      	movs	r3, #1
 80056ee:	4083      	lsls	r3, r0
 80056f0:	4313      	orrs	r3, r2
 80056f2:	002e      	movs	r6, r5
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	e7ce      	b.n	8005696 <_svfiprintf_r+0x96>
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	1d19      	adds	r1, r3, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	9107      	str	r1, [sp, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db01      	blt.n	8005708 <_svfiprintf_r+0x108>
 8005704:	930b      	str	r3, [sp, #44]	; 0x2c
 8005706:	e004      	b.n	8005712 <_svfiprintf_r+0x112>
 8005708:	425b      	negs	r3, r3
 800570a:	60e3      	str	r3, [r4, #12]
 800570c:	2302      	movs	r3, #2
 800570e:	4313      	orrs	r3, r2
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	782b      	ldrb	r3, [r5, #0]
 8005714:	2b2e      	cmp	r3, #46	; 0x2e
 8005716:	d10a      	bne.n	800572e <_svfiprintf_r+0x12e>
 8005718:	786b      	ldrb	r3, [r5, #1]
 800571a:	2b2a      	cmp	r3, #42	; 0x2a
 800571c:	d135      	bne.n	800578a <_svfiprintf_r+0x18a>
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	3502      	adds	r5, #2
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9207      	str	r2, [sp, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	db2b      	blt.n	8005784 <_svfiprintf_r+0x184>
 800572c:	9309      	str	r3, [sp, #36]	; 0x24
 800572e:	4e30      	ldr	r6, [pc, #192]	; (80057f0 <_svfiprintf_r+0x1f0>)
 8005730:	2203      	movs	r2, #3
 8005732:	0030      	movs	r0, r6
 8005734:	7829      	ldrb	r1, [r5, #0]
 8005736:	f000 f9e5 	bl	8005b04 <memchr>
 800573a:	2800      	cmp	r0, #0
 800573c:	d006      	beq.n	800574c <_svfiprintf_r+0x14c>
 800573e:	2340      	movs	r3, #64	; 0x40
 8005740:	1b80      	subs	r0, r0, r6
 8005742:	4083      	lsls	r3, r0
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	3501      	adds	r5, #1
 8005748:	4313      	orrs	r3, r2
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	7829      	ldrb	r1, [r5, #0]
 800574e:	2206      	movs	r2, #6
 8005750:	4828      	ldr	r0, [pc, #160]	; (80057f4 <_svfiprintf_r+0x1f4>)
 8005752:	1c6e      	adds	r6, r5, #1
 8005754:	7621      	strb	r1, [r4, #24]
 8005756:	f000 f9d5 	bl	8005b04 <memchr>
 800575a:	2800      	cmp	r0, #0
 800575c:	d03c      	beq.n	80057d8 <_svfiprintf_r+0x1d8>
 800575e:	4b26      	ldr	r3, [pc, #152]	; (80057f8 <_svfiprintf_r+0x1f8>)
 8005760:	2b00      	cmp	r3, #0
 8005762:	d125      	bne.n	80057b0 <_svfiprintf_r+0x1b0>
 8005764:	2207      	movs	r2, #7
 8005766:	9b07      	ldr	r3, [sp, #28]
 8005768:	3307      	adds	r3, #7
 800576a:	4393      	bics	r3, r2
 800576c:	3308      	adds	r3, #8
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	6963      	ldr	r3, [r4, #20]
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	189b      	adds	r3, r3, r2
 8005776:	6163      	str	r3, [r4, #20]
 8005778:	e765      	b.n	8005646 <_svfiprintf_r+0x46>
 800577a:	4343      	muls	r3, r0
 800577c:	0035      	movs	r5, r6
 800577e:	2101      	movs	r1, #1
 8005780:	189b      	adds	r3, r3, r2
 8005782:	e7a6      	b.n	80056d2 <_svfiprintf_r+0xd2>
 8005784:	2301      	movs	r3, #1
 8005786:	425b      	negs	r3, r3
 8005788:	e7d0      	b.n	800572c <_svfiprintf_r+0x12c>
 800578a:	2300      	movs	r3, #0
 800578c:	200a      	movs	r0, #10
 800578e:	001a      	movs	r2, r3
 8005790:	3501      	adds	r5, #1
 8005792:	6063      	str	r3, [r4, #4]
 8005794:	7829      	ldrb	r1, [r5, #0]
 8005796:	1c6e      	adds	r6, r5, #1
 8005798:	3930      	subs	r1, #48	; 0x30
 800579a:	2909      	cmp	r1, #9
 800579c:	d903      	bls.n	80057a6 <_svfiprintf_r+0x1a6>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c5      	beq.n	800572e <_svfiprintf_r+0x12e>
 80057a2:	9209      	str	r2, [sp, #36]	; 0x24
 80057a4:	e7c3      	b.n	800572e <_svfiprintf_r+0x12e>
 80057a6:	4342      	muls	r2, r0
 80057a8:	0035      	movs	r5, r6
 80057aa:	2301      	movs	r3, #1
 80057ac:	1852      	adds	r2, r2, r1
 80057ae:	e7f1      	b.n	8005794 <_svfiprintf_r+0x194>
 80057b0:	ab07      	add	r3, sp, #28
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	003a      	movs	r2, r7
 80057b6:	0021      	movs	r1, r4
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <_svfiprintf_r+0x1fc>)
 80057ba:	9803      	ldr	r0, [sp, #12]
 80057bc:	e000      	b.n	80057c0 <_svfiprintf_r+0x1c0>
 80057be:	bf00      	nop
 80057c0:	9004      	str	r0, [sp, #16]
 80057c2:	9b04      	ldr	r3, [sp, #16]
 80057c4:	3301      	adds	r3, #1
 80057c6:	d1d3      	bne.n	8005770 <_svfiprintf_r+0x170>
 80057c8:	89bb      	ldrh	r3, [r7, #12]
 80057ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057cc:	065b      	lsls	r3, r3, #25
 80057ce:	d400      	bmi.n	80057d2 <_svfiprintf_r+0x1d2>
 80057d0:	e72d      	b.n	800562e <_svfiprintf_r+0x2e>
 80057d2:	2001      	movs	r0, #1
 80057d4:	4240      	negs	r0, r0
 80057d6:	e72a      	b.n	800562e <_svfiprintf_r+0x2e>
 80057d8:	ab07      	add	r3, sp, #28
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	003a      	movs	r2, r7
 80057de:	0021      	movs	r1, r4
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <_svfiprintf_r+0x1fc>)
 80057e2:	9803      	ldr	r0, [sp, #12]
 80057e4:	f000 f87c 	bl	80058e0 <_printf_i>
 80057e8:	e7ea      	b.n	80057c0 <_svfiprintf_r+0x1c0>
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	08005e30 	.word	0x08005e30
 80057f0:	08005e36 	.word	0x08005e36
 80057f4:	08005e3a 	.word	0x08005e3a
 80057f8:	00000000 	.word	0x00000000
 80057fc:	0800553d 	.word	0x0800553d

08005800 <_printf_common>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	0015      	movs	r5, r2
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	688a      	ldr	r2, [r1, #8]
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	000c      	movs	r4, r1
 800580c:	9000      	str	r0, [sp, #0]
 800580e:	4293      	cmp	r3, r2
 8005810:	da00      	bge.n	8005814 <_printf_common+0x14>
 8005812:	0013      	movs	r3, r2
 8005814:	0022      	movs	r2, r4
 8005816:	602b      	str	r3, [r5, #0]
 8005818:	3243      	adds	r2, #67	; 0x43
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	2a00      	cmp	r2, #0
 800581e:	d001      	beq.n	8005824 <_printf_common+0x24>
 8005820:	3301      	adds	r3, #1
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	069b      	lsls	r3, r3, #26
 8005828:	d502      	bpl.n	8005830 <_printf_common+0x30>
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	3302      	adds	r3, #2
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	2306      	movs	r3, #6
 8005834:	0017      	movs	r7, r2
 8005836:	401f      	ands	r7, r3
 8005838:	421a      	tst	r2, r3
 800583a:	d027      	beq.n	800588c <_printf_common+0x8c>
 800583c:	0023      	movs	r3, r4
 800583e:	3343      	adds	r3, #67	; 0x43
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	4193      	sbcs	r3, r2
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d430      	bmi.n	80058ae <_printf_common+0xae>
 800584c:	0022      	movs	r2, r4
 800584e:	9901      	ldr	r1, [sp, #4]
 8005850:	9800      	ldr	r0, [sp, #0]
 8005852:	9e08      	ldr	r6, [sp, #32]
 8005854:	3243      	adds	r2, #67	; 0x43
 8005856:	47b0      	blx	r6
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d025      	beq.n	80058a8 <_printf_common+0xa8>
 800585c:	2306      	movs	r3, #6
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	682a      	ldr	r2, [r5, #0]
 8005862:	68e1      	ldr	r1, [r4, #12]
 8005864:	2500      	movs	r5, #0
 8005866:	4003      	ands	r3, r0
 8005868:	2b04      	cmp	r3, #4
 800586a:	d103      	bne.n	8005874 <_printf_common+0x74>
 800586c:	1a8d      	subs	r5, r1, r2
 800586e:	43eb      	mvns	r3, r5
 8005870:	17db      	asrs	r3, r3, #31
 8005872:	401d      	ands	r5, r3
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	6922      	ldr	r2, [r4, #16]
 8005878:	4293      	cmp	r3, r2
 800587a:	dd01      	ble.n	8005880 <_printf_common+0x80>
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	18ed      	adds	r5, r5, r3
 8005880:	2700      	movs	r7, #0
 8005882:	42bd      	cmp	r5, r7
 8005884:	d120      	bne.n	80058c8 <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e010      	b.n	80058ac <_printf_common+0xac>
 800588a:	3701      	adds	r7, #1
 800588c:	68e3      	ldr	r3, [r4, #12]
 800588e:	682a      	ldr	r2, [r5, #0]
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	42bb      	cmp	r3, r7
 8005894:	ddd2      	ble.n	800583c <_printf_common+0x3c>
 8005896:	0022      	movs	r2, r4
 8005898:	2301      	movs	r3, #1
 800589a:	9901      	ldr	r1, [sp, #4]
 800589c:	9800      	ldr	r0, [sp, #0]
 800589e:	9e08      	ldr	r6, [sp, #32]
 80058a0:	3219      	adds	r2, #25
 80058a2:	47b0      	blx	r6
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d1f0      	bne.n	800588a <_printf_common+0x8a>
 80058a8:	2001      	movs	r0, #1
 80058aa:	4240      	negs	r0, r0
 80058ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ae:	2030      	movs	r0, #48	; 0x30
 80058b0:	18e1      	adds	r1, r4, r3
 80058b2:	3143      	adds	r1, #67	; 0x43
 80058b4:	7008      	strb	r0, [r1, #0]
 80058b6:	0021      	movs	r1, r4
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	3145      	adds	r1, #69	; 0x45
 80058bc:	7809      	ldrb	r1, [r1, #0]
 80058be:	18a2      	adds	r2, r4, r2
 80058c0:	3243      	adds	r2, #67	; 0x43
 80058c2:	3302      	adds	r3, #2
 80058c4:	7011      	strb	r1, [r2, #0]
 80058c6:	e7c1      	b.n	800584c <_printf_common+0x4c>
 80058c8:	0022      	movs	r2, r4
 80058ca:	2301      	movs	r3, #1
 80058cc:	9901      	ldr	r1, [sp, #4]
 80058ce:	9800      	ldr	r0, [sp, #0]
 80058d0:	9e08      	ldr	r6, [sp, #32]
 80058d2:	321a      	adds	r2, #26
 80058d4:	47b0      	blx	r6
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d0e6      	beq.n	80058a8 <_printf_common+0xa8>
 80058da:	3701      	adds	r7, #1
 80058dc:	e7d1      	b.n	8005882 <_printf_common+0x82>
	...

080058e0 <_printf_i>:
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b08b      	sub	sp, #44	; 0x2c
 80058e4:	9206      	str	r2, [sp, #24]
 80058e6:	000a      	movs	r2, r1
 80058e8:	3243      	adds	r2, #67	; 0x43
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	9005      	str	r0, [sp, #20]
 80058ee:	9204      	str	r2, [sp, #16]
 80058f0:	7e0a      	ldrb	r2, [r1, #24]
 80058f2:	000c      	movs	r4, r1
 80058f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058f6:	2a78      	cmp	r2, #120	; 0x78
 80058f8:	d807      	bhi.n	800590a <_printf_i+0x2a>
 80058fa:	2a62      	cmp	r2, #98	; 0x62
 80058fc:	d809      	bhi.n	8005912 <_printf_i+0x32>
 80058fe:	2a00      	cmp	r2, #0
 8005900:	d100      	bne.n	8005904 <_printf_i+0x24>
 8005902:	e0c1      	b.n	8005a88 <_printf_i+0x1a8>
 8005904:	2a58      	cmp	r2, #88	; 0x58
 8005906:	d100      	bne.n	800590a <_printf_i+0x2a>
 8005908:	e08c      	b.n	8005a24 <_printf_i+0x144>
 800590a:	0026      	movs	r6, r4
 800590c:	3642      	adds	r6, #66	; 0x42
 800590e:	7032      	strb	r2, [r6, #0]
 8005910:	e022      	b.n	8005958 <_printf_i+0x78>
 8005912:	0010      	movs	r0, r2
 8005914:	3863      	subs	r0, #99	; 0x63
 8005916:	2815      	cmp	r0, #21
 8005918:	d8f7      	bhi.n	800590a <_printf_i+0x2a>
 800591a:	f7fa fbfd 	bl	8000118 <__gnu_thumb1_case_shi>
 800591e:	0016      	.short	0x0016
 8005920:	fff6001f 	.word	0xfff6001f
 8005924:	fff6fff6 	.word	0xfff6fff6
 8005928:	001ffff6 	.word	0x001ffff6
 800592c:	fff6fff6 	.word	0xfff6fff6
 8005930:	fff6fff6 	.word	0xfff6fff6
 8005934:	003600a8 	.word	0x003600a8
 8005938:	fff6009a 	.word	0xfff6009a
 800593c:	00b9fff6 	.word	0x00b9fff6
 8005940:	0036fff6 	.word	0x0036fff6
 8005944:	fff6fff6 	.word	0xfff6fff6
 8005948:	009e      	.short	0x009e
 800594a:	0026      	movs	r6, r4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	3642      	adds	r6, #66	; 0x42
 8005950:	1d11      	adds	r1, r2, #4
 8005952:	6019      	str	r1, [r3, #0]
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	7033      	strb	r3, [r6, #0]
 8005958:	2301      	movs	r3, #1
 800595a:	e0a7      	b.n	8005aac <_printf_i+0x1cc>
 800595c:	6808      	ldr	r0, [r1, #0]
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	1d0a      	adds	r2, r1, #4
 8005962:	0605      	lsls	r5, r0, #24
 8005964:	d50b      	bpl.n	800597e <_printf_i+0x9e>
 8005966:	680d      	ldr	r5, [r1, #0]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	2d00      	cmp	r5, #0
 800596c:	da03      	bge.n	8005976 <_printf_i+0x96>
 800596e:	232d      	movs	r3, #45	; 0x2d
 8005970:	9a04      	ldr	r2, [sp, #16]
 8005972:	426d      	negs	r5, r5
 8005974:	7013      	strb	r3, [r2, #0]
 8005976:	4b61      	ldr	r3, [pc, #388]	; (8005afc <_printf_i+0x21c>)
 8005978:	270a      	movs	r7, #10
 800597a:	9303      	str	r3, [sp, #12]
 800597c:	e01b      	b.n	80059b6 <_printf_i+0xd6>
 800597e:	680d      	ldr	r5, [r1, #0]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	0641      	lsls	r1, r0, #25
 8005984:	d5f1      	bpl.n	800596a <_printf_i+0x8a>
 8005986:	b22d      	sxth	r5, r5
 8005988:	e7ef      	b.n	800596a <_printf_i+0x8a>
 800598a:	680d      	ldr	r5, [r1, #0]
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	1d08      	adds	r0, r1, #4
 8005990:	6018      	str	r0, [r3, #0]
 8005992:	062e      	lsls	r6, r5, #24
 8005994:	d501      	bpl.n	800599a <_printf_i+0xba>
 8005996:	680d      	ldr	r5, [r1, #0]
 8005998:	e003      	b.n	80059a2 <_printf_i+0xc2>
 800599a:	066d      	lsls	r5, r5, #25
 800599c:	d5fb      	bpl.n	8005996 <_printf_i+0xb6>
 800599e:	680d      	ldr	r5, [r1, #0]
 80059a0:	b2ad      	uxth	r5, r5
 80059a2:	4b56      	ldr	r3, [pc, #344]	; (8005afc <_printf_i+0x21c>)
 80059a4:	2708      	movs	r7, #8
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	2a6f      	cmp	r2, #111	; 0x6f
 80059aa:	d000      	beq.n	80059ae <_printf_i+0xce>
 80059ac:	3702      	adds	r7, #2
 80059ae:	0023      	movs	r3, r4
 80059b0:	2200      	movs	r2, #0
 80059b2:	3343      	adds	r3, #67	; 0x43
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	60a3      	str	r3, [r4, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	db03      	blt.n	80059c6 <_printf_i+0xe6>
 80059be:	2204      	movs	r2, #4
 80059c0:	6821      	ldr	r1, [r4, #0]
 80059c2:	4391      	bics	r1, r2
 80059c4:	6021      	str	r1, [r4, #0]
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	d102      	bne.n	80059d0 <_printf_i+0xf0>
 80059ca:	9e04      	ldr	r6, [sp, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <_printf_i+0x10a>
 80059d0:	9e04      	ldr	r6, [sp, #16]
 80059d2:	0028      	movs	r0, r5
 80059d4:	0039      	movs	r1, r7
 80059d6:	f7fa fc2f 	bl	8000238 <__aeabi_uidivmod>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	3e01      	subs	r6, #1
 80059de:	5c5b      	ldrb	r3, [r3, r1]
 80059e0:	7033      	strb	r3, [r6, #0]
 80059e2:	002b      	movs	r3, r5
 80059e4:	0005      	movs	r5, r0
 80059e6:	429f      	cmp	r7, r3
 80059e8:	d9f3      	bls.n	80059d2 <_printf_i+0xf2>
 80059ea:	2f08      	cmp	r7, #8
 80059ec:	d109      	bne.n	8005a02 <_printf_i+0x122>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	07db      	lsls	r3, r3, #31
 80059f2:	d506      	bpl.n	8005a02 <_printf_i+0x122>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	6922      	ldr	r2, [r4, #16]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	dc02      	bgt.n	8005a02 <_printf_i+0x122>
 80059fc:	2330      	movs	r3, #48	; 0x30
 80059fe:	3e01      	subs	r6, #1
 8005a00:	7033      	strb	r3, [r6, #0]
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	1b9b      	subs	r3, r3, r6
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	9b07      	ldr	r3, [sp, #28]
 8005a0a:	0021      	movs	r1, r4
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	9805      	ldr	r0, [sp, #20]
 8005a10:	9b06      	ldr	r3, [sp, #24]
 8005a12:	aa09      	add	r2, sp, #36	; 0x24
 8005a14:	f7ff fef4 	bl	8005800 <_printf_common>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d14c      	bne.n	8005ab6 <_printf_i+0x1d6>
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	4240      	negs	r0, r0
 8005a20:	b00b      	add	sp, #44	; 0x2c
 8005a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a24:	3145      	adds	r1, #69	; 0x45
 8005a26:	700a      	strb	r2, [r1, #0]
 8005a28:	4a34      	ldr	r2, [pc, #208]	; (8005afc <_printf_i+0x21c>)
 8005a2a:	9203      	str	r2, [sp, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	6821      	ldr	r1, [r4, #0]
 8005a30:	ca20      	ldmia	r2!, {r5}
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	0608      	lsls	r0, r1, #24
 8005a36:	d516      	bpl.n	8005a66 <_printf_i+0x186>
 8005a38:	07cb      	lsls	r3, r1, #31
 8005a3a:	d502      	bpl.n	8005a42 <_printf_i+0x162>
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	4319      	orrs	r1, r3
 8005a40:	6021      	str	r1, [r4, #0]
 8005a42:	2710      	movs	r7, #16
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	d1b2      	bne.n	80059ae <_printf_i+0xce>
 8005a48:	2320      	movs	r3, #32
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	439a      	bics	r2, r3
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	e7ad      	b.n	80059ae <_printf_i+0xce>
 8005a52:	2220      	movs	r2, #32
 8005a54:	6809      	ldr	r1, [r1, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	6022      	str	r2, [r4, #0]
 8005a5a:	0022      	movs	r2, r4
 8005a5c:	2178      	movs	r1, #120	; 0x78
 8005a5e:	3245      	adds	r2, #69	; 0x45
 8005a60:	7011      	strb	r1, [r2, #0]
 8005a62:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <_printf_i+0x220>)
 8005a64:	e7e1      	b.n	8005a2a <_printf_i+0x14a>
 8005a66:	0648      	lsls	r0, r1, #25
 8005a68:	d5e6      	bpl.n	8005a38 <_printf_i+0x158>
 8005a6a:	b2ad      	uxth	r5, r5
 8005a6c:	e7e4      	b.n	8005a38 <_printf_i+0x158>
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	680d      	ldr	r5, [r1, #0]
 8005a72:	1d10      	adds	r0, r2, #4
 8005a74:	6949      	ldr	r1, [r1, #20]
 8005a76:	6018      	str	r0, [r3, #0]
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	062e      	lsls	r6, r5, #24
 8005a7c:	d501      	bpl.n	8005a82 <_printf_i+0x1a2>
 8005a7e:	6019      	str	r1, [r3, #0]
 8005a80:	e002      	b.n	8005a88 <_printf_i+0x1a8>
 8005a82:	066d      	lsls	r5, r5, #25
 8005a84:	d5fb      	bpl.n	8005a7e <_printf_i+0x19e>
 8005a86:	8019      	strh	r1, [r3, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9e04      	ldr	r6, [sp, #16]
 8005a8c:	6123      	str	r3, [r4, #16]
 8005a8e:	e7bb      	b.n	8005a08 <_printf_i+0x128>
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	1d11      	adds	r1, r2, #4
 8005a94:	6019      	str	r1, [r3, #0]
 8005a96:	6816      	ldr	r6, [r2, #0]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	0030      	movs	r0, r6
 8005a9c:	6862      	ldr	r2, [r4, #4]
 8005a9e:	f000 f831 	bl	8005b04 <memchr>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d001      	beq.n	8005aaa <_printf_i+0x1ca>
 8005aa6:	1b80      	subs	r0, r0, r6
 8005aa8:	6060      	str	r0, [r4, #4]
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9a04      	ldr	r2, [sp, #16]
 8005ab2:	7013      	strb	r3, [r2, #0]
 8005ab4:	e7a8      	b.n	8005a08 <_printf_i+0x128>
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	0032      	movs	r2, r6
 8005aba:	9906      	ldr	r1, [sp, #24]
 8005abc:	9805      	ldr	r0, [sp, #20]
 8005abe:	9d07      	ldr	r5, [sp, #28]
 8005ac0:	47a8      	blx	r5
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d0aa      	beq.n	8005a1c <_printf_i+0x13c>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	079b      	lsls	r3, r3, #30
 8005aca:	d415      	bmi.n	8005af8 <_printf_i+0x218>
 8005acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	4298      	cmp	r0, r3
 8005ad2:	daa5      	bge.n	8005a20 <_printf_i+0x140>
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	e7a3      	b.n	8005a20 <_printf_i+0x140>
 8005ad8:	0022      	movs	r2, r4
 8005ada:	2301      	movs	r3, #1
 8005adc:	9906      	ldr	r1, [sp, #24]
 8005ade:	9805      	ldr	r0, [sp, #20]
 8005ae0:	9e07      	ldr	r6, [sp, #28]
 8005ae2:	3219      	adds	r2, #25
 8005ae4:	47b0      	blx	r6
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d098      	beq.n	8005a1c <_printf_i+0x13c>
 8005aea:	3501      	adds	r5, #1
 8005aec:	68e3      	ldr	r3, [r4, #12]
 8005aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	dcf0      	bgt.n	8005ad8 <_printf_i+0x1f8>
 8005af6:	e7e9      	b.n	8005acc <_printf_i+0x1ec>
 8005af8:	2500      	movs	r5, #0
 8005afa:	e7f7      	b.n	8005aec <_printf_i+0x20c>
 8005afc:	08005e41 	.word	0x08005e41
 8005b00:	08005e52 	.word	0x08005e52

08005b04 <memchr>:
 8005b04:	b2c9      	uxtb	r1, r1
 8005b06:	1882      	adds	r2, r0, r2
 8005b08:	4290      	cmp	r0, r2
 8005b0a:	d101      	bne.n	8005b10 <memchr+0xc>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	4770      	bx	lr
 8005b10:	7803      	ldrb	r3, [r0, #0]
 8005b12:	428b      	cmp	r3, r1
 8005b14:	d0fb      	beq.n	8005b0e <memchr+0xa>
 8005b16:	3001      	adds	r0, #1
 8005b18:	e7f6      	b.n	8005b08 <memchr+0x4>

08005b1a <memcpy>:
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d100      	bne.n	8005b24 <memcpy+0xa>
 8005b22:	bd10      	pop	{r4, pc}
 8005b24:	5ccc      	ldrb	r4, [r1, r3]
 8005b26:	54c4      	strb	r4, [r0, r3]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	e7f8      	b.n	8005b1e <memcpy+0x4>

08005b2c <memmove>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	4288      	cmp	r0, r1
 8005b30:	d902      	bls.n	8005b38 <memmove+0xc>
 8005b32:	188b      	adds	r3, r1, r2
 8005b34:	4298      	cmp	r0, r3
 8005b36:	d303      	bcc.n	8005b40 <memmove+0x14>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e007      	b.n	8005b4c <memmove+0x20>
 8005b3c:	5c8b      	ldrb	r3, [r1, r2]
 8005b3e:	5483      	strb	r3, [r0, r2]
 8005b40:	3a01      	subs	r2, #1
 8005b42:	d2fb      	bcs.n	8005b3c <memmove+0x10>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	5ccc      	ldrb	r4, [r1, r3]
 8005b48:	54c4      	strb	r4, [r0, r3]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1fa      	bne.n	8005b46 <memmove+0x1a>
 8005b50:	e7f8      	b.n	8005b44 <memmove+0x18>
	...

08005b54 <_free_r>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	0005      	movs	r5, r0
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d010      	beq.n	8005b7e <_free_r+0x2a>
 8005b5c:	1f0c      	subs	r4, r1, #4
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da00      	bge.n	8005b66 <_free_r+0x12>
 8005b64:	18e4      	adds	r4, r4, r3
 8005b66:	0028      	movs	r0, r5
 8005b68:	f000 f918 	bl	8005d9c <__malloc_lock>
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <_free_r+0x90>)
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <_free_r+0x2c>
 8005b74:	6063      	str	r3, [r4, #4]
 8005b76:	6014      	str	r4, [r2, #0]
 8005b78:	0028      	movs	r0, r5
 8005b7a:	f000 f917 	bl	8005dac <__malloc_unlock>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d908      	bls.n	8005b96 <_free_r+0x42>
 8005b84:	6821      	ldr	r1, [r4, #0]
 8005b86:	1860      	adds	r0, r4, r1
 8005b88:	4283      	cmp	r3, r0
 8005b8a:	d1f3      	bne.n	8005b74 <_free_r+0x20>
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	1841      	adds	r1, r0, r1
 8005b92:	6021      	str	r1, [r4, #0]
 8005b94:	e7ee      	b.n	8005b74 <_free_r+0x20>
 8005b96:	001a      	movs	r2, r3
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <_free_r+0x4e>
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	d9f9      	bls.n	8005b96 <_free_r+0x42>
 8005ba2:	6811      	ldr	r1, [r2, #0]
 8005ba4:	1850      	adds	r0, r2, r1
 8005ba6:	42a0      	cmp	r0, r4
 8005ba8:	d10b      	bne.n	8005bc2 <_free_r+0x6e>
 8005baa:	6820      	ldr	r0, [r4, #0]
 8005bac:	1809      	adds	r1, r1, r0
 8005bae:	1850      	adds	r0, r2, r1
 8005bb0:	6011      	str	r1, [r2, #0]
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	d1e0      	bne.n	8005b78 <_free_r+0x24>
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	1841      	adds	r1, r0, r1
 8005bbc:	6011      	str	r1, [r2, #0]
 8005bbe:	6053      	str	r3, [r2, #4]
 8005bc0:	e7da      	b.n	8005b78 <_free_r+0x24>
 8005bc2:	42a0      	cmp	r0, r4
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x78>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	e7d5      	b.n	8005b78 <_free_r+0x24>
 8005bcc:	6821      	ldr	r1, [r4, #0]
 8005bce:	1860      	adds	r0, r4, r1
 8005bd0:	4283      	cmp	r3, r0
 8005bd2:	d103      	bne.n	8005bdc <_free_r+0x88>
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	1841      	adds	r1, r0, r1
 8005bda:	6021      	str	r1, [r4, #0]
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6054      	str	r4, [r2, #4]
 8005be0:	e7ca      	b.n	8005b78 <_free_r+0x24>
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	200003e8 	.word	0x200003e8

08005be8 <sbrk_aligned>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4e0f      	ldr	r6, [pc, #60]	; (8005c28 <sbrk_aligned+0x40>)
 8005bec:	000d      	movs	r5, r1
 8005bee:	6831      	ldr	r1, [r6, #0]
 8005bf0:	0004      	movs	r4, r0
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d102      	bne.n	8005bfc <sbrk_aligned+0x14>
 8005bf6:	f000 f8bf 	bl	8005d78 <_sbrk_r>
 8005bfa:	6030      	str	r0, [r6, #0]
 8005bfc:	0029      	movs	r1, r5
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f000 f8ba 	bl	8005d78 <_sbrk_r>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d00a      	beq.n	8005c1e <sbrk_aligned+0x36>
 8005c08:	2303      	movs	r3, #3
 8005c0a:	1cc5      	adds	r5, r0, #3
 8005c0c:	439d      	bics	r5, r3
 8005c0e:	42a8      	cmp	r0, r5
 8005c10:	d007      	beq.n	8005c22 <sbrk_aligned+0x3a>
 8005c12:	1a29      	subs	r1, r5, r0
 8005c14:	0020      	movs	r0, r4
 8005c16:	f000 f8af 	bl	8005d78 <_sbrk_r>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d101      	bne.n	8005c22 <sbrk_aligned+0x3a>
 8005c1e:	2501      	movs	r5, #1
 8005c20:	426d      	negs	r5, r5
 8005c22:	0028      	movs	r0, r5
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	200003ec 	.word	0x200003ec

08005c2c <_malloc_r>:
 8005c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2e:	2203      	movs	r2, #3
 8005c30:	1ccb      	adds	r3, r1, #3
 8005c32:	4393      	bics	r3, r2
 8005c34:	3308      	adds	r3, #8
 8005c36:	0006      	movs	r6, r0
 8005c38:	001f      	movs	r7, r3
 8005c3a:	2b0c      	cmp	r3, #12
 8005c3c:	d232      	bcs.n	8005ca4 <_malloc_r+0x78>
 8005c3e:	270c      	movs	r7, #12
 8005c40:	42b9      	cmp	r1, r7
 8005c42:	d831      	bhi.n	8005ca8 <_malloc_r+0x7c>
 8005c44:	0030      	movs	r0, r6
 8005c46:	f000 f8a9 	bl	8005d9c <__malloc_lock>
 8005c4a:	4d32      	ldr	r5, [pc, #200]	; (8005d14 <_malloc_r+0xe8>)
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	001c      	movs	r4, r3
 8005c50:	2c00      	cmp	r4, #0
 8005c52:	d12e      	bne.n	8005cb2 <_malloc_r+0x86>
 8005c54:	0039      	movs	r1, r7
 8005c56:	0030      	movs	r0, r6
 8005c58:	f7ff ffc6 	bl	8005be8 <sbrk_aligned>
 8005c5c:	0004      	movs	r4, r0
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d11e      	bne.n	8005ca0 <_malloc_r+0x74>
 8005c62:	682c      	ldr	r4, [r5, #0]
 8005c64:	0025      	movs	r5, r4
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	d14a      	bne.n	8005d00 <_malloc_r+0xd4>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	0029      	movs	r1, r5
 8005c6e:	18e3      	adds	r3, r4, r3
 8005c70:	0030      	movs	r0, r6
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	f000 f880 	bl	8005d78 <_sbrk_r>
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	4283      	cmp	r3, r0
 8005c7c:	d143      	bne.n	8005d06 <_malloc_r+0xda>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	3703      	adds	r7, #3
 8005c82:	1aff      	subs	r7, r7, r3
 8005c84:	2303      	movs	r3, #3
 8005c86:	439f      	bics	r7, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	2f0c      	cmp	r7, #12
 8005c8c:	d200      	bcs.n	8005c90 <_malloc_r+0x64>
 8005c8e:	270c      	movs	r7, #12
 8005c90:	0039      	movs	r1, r7
 8005c92:	0030      	movs	r0, r6
 8005c94:	f7ff ffa8 	bl	8005be8 <sbrk_aligned>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d034      	beq.n	8005d06 <_malloc_r+0xda>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	19df      	adds	r7, r3, r7
 8005ca0:	6027      	str	r7, [r4, #0]
 8005ca2:	e013      	b.n	8005ccc <_malloc_r+0xa0>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dacb      	bge.n	8005c40 <_malloc_r+0x14>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	2500      	movs	r5, #0
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	0028      	movs	r0, r5
 8005cb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	1bd1      	subs	r1, r2, r7
 8005cb6:	d420      	bmi.n	8005cfa <_malloc_r+0xce>
 8005cb8:	290b      	cmp	r1, #11
 8005cba:	d917      	bls.n	8005cec <_malloc_r+0xc0>
 8005cbc:	19e2      	adds	r2, r4, r7
 8005cbe:	6027      	str	r7, [r4, #0]
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d111      	bne.n	8005ce8 <_malloc_r+0xbc>
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	6053      	str	r3, [r2, #4]
 8005ccc:	0030      	movs	r0, r6
 8005cce:	0025      	movs	r5, r4
 8005cd0:	f000 f86c 	bl	8005dac <__malloc_unlock>
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	350b      	adds	r5, #11
 8005cd8:	1d23      	adds	r3, r4, #4
 8005cda:	4395      	bics	r5, r2
 8005cdc:	1aea      	subs	r2, r5, r3
 8005cde:	429d      	cmp	r5, r3
 8005ce0:	d0e5      	beq.n	8005cae <_malloc_r+0x82>
 8005ce2:	1b5b      	subs	r3, r3, r5
 8005ce4:	50a3      	str	r3, [r4, r2]
 8005ce6:	e7e2      	b.n	8005cae <_malloc_r+0x82>
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	e7ec      	b.n	8005cc6 <_malloc_r+0x9a>
 8005cec:	6862      	ldr	r2, [r4, #4]
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	d101      	bne.n	8005cf6 <_malloc_r+0xca>
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	e7ea      	b.n	8005ccc <_malloc_r+0xa0>
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	e7e8      	b.n	8005ccc <_malloc_r+0xa0>
 8005cfa:	0023      	movs	r3, r4
 8005cfc:	6864      	ldr	r4, [r4, #4]
 8005cfe:	e7a7      	b.n	8005c50 <_malloc_r+0x24>
 8005d00:	002c      	movs	r4, r5
 8005d02:	686d      	ldr	r5, [r5, #4]
 8005d04:	e7af      	b.n	8005c66 <_malloc_r+0x3a>
 8005d06:	230c      	movs	r3, #12
 8005d08:	0030      	movs	r0, r6
 8005d0a:	6033      	str	r3, [r6, #0]
 8005d0c:	f000 f84e 	bl	8005dac <__malloc_unlock>
 8005d10:	e7cd      	b.n	8005cae <_malloc_r+0x82>
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	200003e8 	.word	0x200003e8

08005d18 <_realloc_r>:
 8005d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d1a:	0007      	movs	r7, r0
 8005d1c:	000e      	movs	r6, r1
 8005d1e:	0014      	movs	r4, r2
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d105      	bne.n	8005d30 <_realloc_r+0x18>
 8005d24:	0011      	movs	r1, r2
 8005d26:	f7ff ff81 	bl	8005c2c <_malloc_r>
 8005d2a:	0005      	movs	r5, r0
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d103      	bne.n	8005d3c <_realloc_r+0x24>
 8005d34:	f7ff ff0e 	bl	8005b54 <_free_r>
 8005d38:	0025      	movs	r5, r4
 8005d3a:	e7f7      	b.n	8005d2c <_realloc_r+0x14>
 8005d3c:	f000 f83e 	bl	8005dbc <_malloc_usable_size_r>
 8005d40:	9001      	str	r0, [sp, #4]
 8005d42:	4284      	cmp	r4, r0
 8005d44:	d803      	bhi.n	8005d4e <_realloc_r+0x36>
 8005d46:	0035      	movs	r5, r6
 8005d48:	0843      	lsrs	r3, r0, #1
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	d3ee      	bcc.n	8005d2c <_realloc_r+0x14>
 8005d4e:	0021      	movs	r1, r4
 8005d50:	0038      	movs	r0, r7
 8005d52:	f7ff ff6b 	bl	8005c2c <_malloc_r>
 8005d56:	1e05      	subs	r5, r0, #0
 8005d58:	d0e8      	beq.n	8005d2c <_realloc_r+0x14>
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	0022      	movs	r2, r4
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d900      	bls.n	8005d64 <_realloc_r+0x4c>
 8005d62:	001a      	movs	r2, r3
 8005d64:	0031      	movs	r1, r6
 8005d66:	0028      	movs	r0, r5
 8005d68:	f7ff fed7 	bl	8005b1a <memcpy>
 8005d6c:	0031      	movs	r1, r6
 8005d6e:	0038      	movs	r0, r7
 8005d70:	f7ff fef0 	bl	8005b54 <_free_r>
 8005d74:	e7da      	b.n	8005d2c <_realloc_r+0x14>
	...

08005d78 <_sbrk_r>:
 8005d78:	2300      	movs	r3, #0
 8005d7a:	b570      	push	{r4, r5, r6, lr}
 8005d7c:	4d06      	ldr	r5, [pc, #24]	; (8005d98 <_sbrk_r+0x20>)
 8005d7e:	0004      	movs	r4, r0
 8005d80:	0008      	movs	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb fb26 	bl	80013d4 <_sbrk>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d103      	bne.n	8005d94 <_sbrk_r+0x1c>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d000      	beq.n	8005d94 <_sbrk_r+0x1c>
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	bd70      	pop	{r4, r5, r6, pc}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	200003f0 	.word	0x200003f0

08005d9c <__malloc_lock>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4802      	ldr	r0, [pc, #8]	; (8005da8 <__malloc_lock+0xc>)
 8005da0:	f000 f814 	bl	8005dcc <__retarget_lock_acquire_recursive>
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	200003f4 	.word	0x200003f4

08005dac <__malloc_unlock>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	4802      	ldr	r0, [pc, #8]	; (8005db8 <__malloc_unlock+0xc>)
 8005db0:	f000 f80d 	bl	8005dce <__retarget_lock_release_recursive>
 8005db4:	bd10      	pop	{r4, pc}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	200003f4 	.word	0x200003f4

08005dbc <_malloc_usable_size_r>:
 8005dbc:	1f0b      	subs	r3, r1, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	1f18      	subs	r0, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da01      	bge.n	8005dca <_malloc_usable_size_r+0xe>
 8005dc6:	580b      	ldr	r3, [r1, r0]
 8005dc8:	18c0      	adds	r0, r0, r3
 8005dca:	4770      	bx	lr

08005dcc <__retarget_lock_acquire_recursive>:
 8005dcc:	4770      	bx	lr

08005dce <__retarget_lock_release_recursive>:
 8005dce:	4770      	bx	lr

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr
