
UARTFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080084e0  080084e0  000184e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080084f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08008500  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08008560  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  240000d0  080085c0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000314  080085c0  00020314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fca  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232a  00000000  00000000  000360c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000390b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036dca  00000000  00000000  00039cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120d9  00000000  00000000  00070a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e627  00000000  00000000  00082b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e118a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  001e11dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008438 	.word	0x08008438

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08008438 	.word	0x08008438

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SetBootloaderFlag>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetBootloaderFlag() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
	__disable_irq();
	*bootloader_flag = BOOTLOADER_FLAG_VALUE;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <SetBootloaderFlag+0x20>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <SetBootloaderFlag+0x24>)
 80005fa:	601a      	str	r2, [r3, #0]
	HAL_UART_DeInit(&huart1);
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <SetBootloaderFlag+0x28>)
 80005fe:	f005 fad1 	bl	8005ba4 <HAL_UART_DeInit>
	HAL_NVIC_SystemReset();
 8000602:	f000 ffb6 	bl	8001572 <HAL_NVIC_SystemReset>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	240002fc 	.word	0x240002fc
 8000610:	deadbeef 	.word	0xdeadbeef
 8000614:	240001d4 	.word	0x240001d4

08000618 <JumpToBootloader>:
void JumpToBootloader(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	bootloader_flag = (uint32_t*) (&_estack - BOOTLOADER_FLAG_OFFSET); // below top of stack
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <JumpToBootloader+0x58>)
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <JumpToBootloader+0x5c>)
 8000622:	601a      	str	r2, [r3, #0]
	if (*bootloader_flag == BOOTLOADER_FLAG_VALUE) {
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <JumpToBootloader+0x5c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <JumpToBootloader+0x60>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d116      	bne.n	800065e <JumpToBootloader+0x46>
		*bootloader_flag = 0;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <JumpToBootloader+0x5c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
		/* Jump to system memory bootloader */
		JumpAddress = *(__IO uint32_t*) (BOOTLOADER_ADDRESS + 4);
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <JumpToBootloader+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <JumpToBootloader+0x68>)
 800063e:	6013      	str	r3, [r2, #0]
		JumpToApplication = (pFunction) JumpAddress;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <JumpToBootloader+0x68>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <JumpToBootloader+0x6c>)
 8000648:	601a      	str	r2, [r3, #0]
		__set_MSP(*(__IO uint32_t*) BOOTLOADER_ADDRESS);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <JumpToBootloader+0x70>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f383 8808 	msr	MSP, r3
}
 8000656:	bf00      	nop
		JumpToApplication();
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <JumpToBootloader+0x6c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4798      	blx	r3
	}
		*bootloader_flag = 0; // So next boot won't be affected
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <JumpToBootloader+0x5c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2407f060 	.word	0x2407f060
 8000674:	240002fc 	.word	0x240002fc
 8000678:	deadbeef 	.word	0xdeadbeef
 800067c:	1ff09804 	.word	0x1ff09804
 8000680:	24000304 	.word	0x24000304
 8000684:	24000300 	.word	0x24000300
 8000688:	1ff09800 	.word	0x1ff09800

0800068c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b09e      	sub	sp, #120	; 0x78
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[64];
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	4829      	ldr	r0, [pc, #164]	; (8000744 <HAL_UART_RxCpltCallback+0xb8>)
 800069e:	f005 fb4f 	bl	8005d40 <HAL_UART_Receive_IT>
	uint8_t key_index = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	unsigned char key = rx_buffer[key_index];
 80006a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80006ac:	3378      	adds	r3, #120	; 0x78
 80006ae:	443b      	add	r3, r7
 80006b0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80006b4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	switch (key)
 80006b8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80006bc:	2b2a      	cmp	r3, #42	; 0x2a
 80006be:	d002      	beq.n	80006c6 <HAL_UART_RxCpltCallback+0x3a>
 80006c0:	2b2b      	cmp	r3, #43	; 0x2b
 80006c2:	d01d      	beq.n	8000700 <HAL_UART_RxCpltCallback+0x74>
		SetBootloaderFlag();
		break;
	}
	default:
	{
		break;
 80006c4:	e039      	b.n	800073a <HAL_UART_RxCpltCallback+0xae>
		char msg[] = "Program A: Entering Firmware Update Mode\n";
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <HAL_UART_RxCpltCallback+0xbc>)
 80006c8:	f107 0408 	add.w	r4, r7, #8
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	c403      	stmia	r4!, {r0, r1}
 80006dc:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fdf8 	bl	80002d8 <strlen>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f107 0108 	add.w	r1, r7, #8
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <HAL_UART_RxCpltCallback+0xb8>)
 80006f6:	f005 fa94 	bl	8005c22 <HAL_UART_Transmit>
		SetBootloaderFlag();
 80006fa:	f7ff ff77 	bl	80005ec <SetBootloaderFlag>
		break;
 80006fe:	e01c      	b.n	800073a <HAL_UART_RxCpltCallback+0xae>
		char msg[] = "Program B: Entering Firmware Update Mode\n";
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_UART_RxCpltCallback+0xc0>)
 8000702:	f107 0408 	add.w	r4, r7, #8
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000714:	c403      	stmia	r4!, {r0, r1}
 8000716:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fddb 	bl	80002d8 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	f107 0108 	add.w	r1, r7, #8
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_UART_RxCpltCallback+0xb8>)
 8000730:	f005 fa77 	bl	8005c22 <HAL_UART_Transmit>
		SetBootloaderFlag();
 8000734:	f7ff ff5a 	bl	80005ec <SetBootloaderFlag>
		break;
 8000738:	bf00      	nop
	}
	}
}
 800073a:	bf00      	nop
 800073c:	3778      	adds	r7, #120	; 0x78
 800073e:	46bd      	mov	sp, r7
 8000740:	bdb0      	pop	{r4, r5, r7, pc}
 8000742:	bf00      	nop
 8000744:	240001d4 	.word	0x240001d4
 8000748:	08008450 	.word	0x08008450
 800074c:	0800847c 	.word	0x0800847c

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b090      	sub	sp, #64	; 0x40
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	JumpToBootloader();
 8000756:	f7ff ff5f 	bl	8000618 <JumpToBootloader>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fd0d 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f811 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f95d 	bl	8000a20 <MX_GPIO_Init>
  MX_ETH_Init();
 8000766:	f000 f877 	bl	8000858 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800076a:	f000 f90d 	bl	8000988 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800076e:	f000 f8bf 	bl	80008f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rx_buffer[64];
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000772:	463b      	mov	r3, r7
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	4801      	ldr	r0, [pc, #4]	; (8000780 <main+0x30>)
 800077a:	f005 fae1 	bl	8005d40 <HAL_UART_Receive_IT>
  //SetBootloaderFlag();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077e:	e7fe      	b.n	800077e <main+0x2e>
 8000780:	240001d4 	.word	0x240001d4

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	; 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	224c      	movs	r2, #76	; 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 fe48 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 fe42 	bl	8008428 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f002 fb61 	bl	8002e6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemClock_Config+0xcc>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	4a27      	ldr	r2, [pc, #156]	; (8000850 <SystemClock_Config+0xcc>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xcc>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xd0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd0>)
 80007ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <SystemClock_Config+0xd0>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fb6b 	bl	8002ee0 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000810:	f000 f9e2 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	233f      	movs	r3, #63	; 0x3f
 8000816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f002 ffab 	bl	8003794 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000844:	f000 f9c8 	bl	8000bd8 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3770      	adds	r7, #112	; 0x70
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58000400 	.word	0x58000400
 8000854:	58024800 	.word	0x58024800

08000858 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ETH_Init+0x80>)
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_ETH_Init+0x84>)
 8000860:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ETH_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ETH_Init+0x88>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ETH_Init+0x88>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ETH_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ETH_Init+0x88>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ETH_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_ETH_Init+0x80>)
 8000888:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_ETH_Init+0x88>)
 800088a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_ETH_Init+0x80>)
 800088e:	2201      	movs	r2, #1
 8000890:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_ETH_Init+0x80>)
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_ETH_Init+0x8c>)
 8000896:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_ETH_Init+0x80>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_ETH_Init+0x90>)
 800089c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_ETH_Init+0x80>)
 80008a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_ETH_Init+0x80>)
 80008a8:	f001 fbd8 	bl	800205c <HAL_ETH_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008b2:	f000 f991 	bl	8000bd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008b6:	2238      	movs	r2, #56	; 0x38
 80008b8:	2100      	movs	r1, #0
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ETH_Init+0x94>)
 80008bc:	f007 fdb4 	bl	8008428 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_ETH_Init+0x94>)
 80008c2:	2221      	movs	r2, #33	; 0x21
 80008c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_ETH_Init+0x94>)
 80008c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_ETH_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000124 	.word	0x24000124
 80008dc:	40028000 	.word	0x40028000
 80008e0:	24000308 	.word	0x24000308
 80008e4:	24000070 	.word	0x24000070
 80008e8:	24000010 	.word	0x24000010
 80008ec:	240000ec 	.word	0x240000ec

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_USART1_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <MX_USART1_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_USART1_UART_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_USART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_USART1_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800093a:	f005 f8e3 	bl	8005b04 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f948 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800094c:	f007 fc7d 	bl	800824a <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f93f 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800095e:	f007 fcb2 	bl	80082c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f936 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_USART1_UART_Init+0x90>)
 800096e:	f007 fc33 	bl	80081d8 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f92e 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	240001d4 	.word	0x240001d4
 8000984:	40011000 	.word	0x40011000

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <MX_USART3_UART_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009d2:	f005 f897 	bl	8005b04 <HAL_UART_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 f8fc 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009e4:	f007 fc31 	bl	800824a <HAL_UARTEx_SetTxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f8f3 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009f6:	f007 fc66 	bl	80082c6 <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 f8ea 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 8000a06:	f007 fbe7 	bl	80081d8 <HAL_UARTEx_DisableFifoMode>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 f8e2 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	24000268 	.word	0x24000268
 8000a1c:	40004800 	.word	0x40004800

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b62      	ldr	r3, [pc, #392]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a60      	ldr	r2, [pc, #384]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b5e      	ldr	r3, [pc, #376]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a54:	4b5a      	ldr	r3, [pc, #360]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a59      	ldr	r2, [pc, #356]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b53      	ldr	r3, [pc, #332]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a51      	ldr	r2, [pc, #324]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b4f      	ldr	r3, [pc, #316]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a4a      	ldr	r2, [pc, #296]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	4a42      	ldr	r2, [pc, #264]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abe:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000acc:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000adc:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <MX_GPIO_Init+0x1a0>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b0e:	482d      	ldr	r0, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0x1a4>)
 8000b10:	f002 f992 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1a:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0x1a8>)
 8000b1c:	f002 f98c 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2102      	movs	r1, #2
 8000b24:	4829      	ldr	r0, [pc, #164]	; (8000bcc <MX_GPIO_Init+0x1ac>)
 8000b26:	f002 f987 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <MX_GPIO_Init+0x1b0>)
 8000b40:	f001 fec0 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b44:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <MX_GPIO_Init+0x1a4>)
 8000b5e:	f001 feb1 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <MX_GPIO_Init+0x1a8>)
 8000b7c:	f001 fea2 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x1b4>)
 8000b96:	f001 fe95 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <MX_GPIO_Init+0x1ac>)
 8000bb2:	f001 fe87 	bl	80028c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58020c00 	.word	0x58020c00
 8000bcc:	58021000 	.word	0x58021000
 8000bd0:	58020800 	.word	0x58020800
 8000bd4:	58021800 	.word	0x58021800

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x30>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x30>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	58024400 	.word	0x58024400

08000c18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a59      	ldr	r2, [pc, #356]	; (8000d9c <HAL_ETH_MspInit+0x184>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f040 80ab 	bne.w	8000d92 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c3c:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c42:	4a57      	ldr	r2, [pc, #348]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4c:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c56:	623b      	str	r3, [r7, #32]
 8000c58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c5a:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c60:	4a4f      	ldr	r2, [pc, #316]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c6a:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7e:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c88:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	4a39      	ldr	r2, [pc, #228]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d0e:	2332      	movs	r3, #50	; 0x32
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	481e      	ldr	r0, [pc, #120]	; (8000da4 <HAL_ETH_MspInit+0x18c>)
 8000d2a:	f001 fdcb 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d2e:	2386      	movs	r3, #134	; 0x86
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4817      	ldr	r0, [pc, #92]	; (8000da8 <HAL_ETH_MspInit+0x190>)
 8000d4a:	f001 fdbb 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d60:	230b      	movs	r3, #11
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4810      	ldr	r0, [pc, #64]	; (8000dac <HAL_ETH_MspInit+0x194>)
 8000d6c:	f001 fdaa 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d82:	230b      	movs	r3, #11
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <HAL_ETH_MspInit+0x198>)
 8000d8e:	f001 fd99 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40028000 	.word	0x40028000
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58020800 	.word	0x58020800
 8000da8:	58020000 	.word	0x58020000
 8000dac:	58020400 	.word	0x58020400
 8000db0:	58021800 	.word	0x58021800

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0bc      	sub	sp, #240	; 0xf0
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	22c0      	movs	r2, #192	; 0xc0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f007 fb27 	bl	8008428 <memset>
  if(huart->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <HAL_UART_MspInit+0x170>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d14f      	bne.n	8000e84 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de4:	f04f 0201 	mov.w	r2, #1
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 f856 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e06:	f7ff fee7 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e10:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e1a:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e60:	2307      	movs	r3, #7
 8000e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482f      	ldr	r0, [pc, #188]	; (8000f2c <HAL_UART_MspInit+0x178>)
 8000e6e:	f001 fd29 	bl	80028c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2025      	movs	r0, #37	; 0x25
 8000e78:	f000 fb45 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e7c:	2025      	movs	r0, #37	; 0x25
 8000e7e:	f000 fb5c 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e82:	e04b      	b.n	8000f1c <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <HAL_UART_MspInit+0x17c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d146      	bne.n	8000f1c <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8e:	f04f 0202 	mov.w	r2, #2
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 f801 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000eb0:	f7ff fe92 	bl	8000bd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x174>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f14:	4619      	mov	r1, r3
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <HAL_UART_MspInit+0x180>)
 8000f18:	f001 fcd4 	bl	80028c4 <HAL_GPIO_Init>
}
 8000f1c:	bf00      	nop
 8000f1e:	37f0      	adds	r7, #240	; 0xf0
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40011000 	.word	0x40011000
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020000 	.word	0x58020000
 8000f30:	40004800 	.word	0x40004800
 8000f34:	58020c00 	.word	0x58020c00

08000f38 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_MspDeInit+0x60>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d110      	bne.n	8000f6c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_MspDeInit+0x64>)
 8000f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_UART_MspDeInit+0x64>)
 8000f52:	f023 0310 	bic.w	r3, r3, #16
 8000f56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000f5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <HAL_UART_MspDeInit+0x68>)
 8000f60:	f001 fe60 	bl	8002c24 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000f64:	2025      	movs	r0, #37	; 0x25
 8000f66:	f000 faf6 	bl	8001556 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000f6a:	e011      	b.n	8000f90 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_UART_MspDeInit+0x6c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10c      	bne.n	8000f90 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_UART_MspDeInit+0x64>)
 8000f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_UART_MspDeInit+0x64>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 8000f86:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f8a:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_UART_MspDeInit+0x70>)
 8000f8c:	f001 fe4a 	bl	8002c24 <HAL_GPIO_DeInit>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020000 	.word	0x58020000
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	58020c00 	.word	0x58020c00

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f930 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f004 fee7 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240001d4 	.word	0x240001d4

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <SystemInit+0xe4>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a36      	ldr	r2, [pc, #216]	; (80010f8 <SystemInit+0xe4>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <SystemInit+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	2b06      	cmp	r3, #6
 8001032:	d807      	bhi.n	8001044 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <SystemInit+0xe8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <SystemInit+0xe8>)
 800103e:	f043 0307 	orr.w	r3, r3, #7
 8001042:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <SystemInit+0xec>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <SystemInit+0xec>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <SystemInit+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <SystemInit+0xec>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4929      	ldr	r1, [pc, #164]	; (8001100 <SystemInit+0xec>)
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <SystemInit+0xf0>)
 800105e:	4013      	ands	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <SystemInit+0xe8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemInit+0xe8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 030f 	bic.w	r3, r3, #15
 8001076:	4a21      	ldr	r2, [pc, #132]	; (80010fc <SystemInit+0xe8>)
 8001078:	f043 0307 	orr.w	r3, r3, #7
 800107c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <SystemInit+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SystemInit+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <SystemInit+0xec>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <SystemInit+0xec>)
 8001092:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <SystemInit+0xf4>)
 8001094:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <SystemInit+0xec>)
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <SystemInit+0xf8>)
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <SystemInit+0xec>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <SystemInit+0xfc>)
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <SystemInit+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <SystemInit+0xec>)
 80010aa:	4a19      	ldr	r2, [pc, #100]	; (8001110 <SystemInit+0xfc>)
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <SystemInit+0xec>)
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <SystemInit+0xfc>)
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <SystemInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <SystemInit+0xec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <SystemInit+0xec>)
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <SystemInit+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <SystemInit+0x100>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SystemInit+0x104>)
 80010d8:	4013      	ands	r3, r2
 80010da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010de:	d202      	bcs.n	80010e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <SystemInit+0x108>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <SystemInit+0x10c>)
 80010e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	52002000 	.word	0x52002000
 8001100:	58024400 	.word	0x58024400
 8001104:	eaf6ed7f 	.word	0xeaf6ed7f
 8001108:	02020200 	.word	0x02020200
 800110c:	01ff0000 	.word	0x01ff0000
 8001110:	01010280 	.word	0x01010280
 8001114:	5c001000 	.word	0x5c001000
 8001118:	ffff0000 	.word	0xffff0000
 800111c:	51008108 	.word	0x51008108
 8001120:	52004000 	.word	0x52004000

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001128:	f7ff ff74 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f007 f945 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fafb 	bl	8000750 <main>
  bx  lr
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001160:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001164:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001168:	080084f0 	.word	0x080084f0
  ldr r2, =_sbss
 800116c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001170:	24000314 	.word	0x24000314

08001174 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC3_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f000 f9b6 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001184:	f002 fcbc 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8001188:	4602      	mov	r2, r0
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_Init+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	4913      	ldr	r1, [pc, #76]	; (80011e4 <HAL_Init+0x6c>)
 8001196:	5ccb      	ldrb	r3, [r1, r3]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_Init+0x68>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_Init+0x6c>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_Init+0x70>)
 80011ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_Init+0x74>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f814 	bl	80011f0 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e002      	b.n	80011d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d2:	f7ff fd07 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58024400 	.word	0x58024400
 80011e4:	080084a8 	.word	0x080084a8
 80011e8:	24000004 	.word	0x24000004
 80011ec:	24000000 	.word	0x24000000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_InitTick+0x60>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e021      	b.n	8001248 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_InitTick+0x64>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_InitTick+0x60>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f9ad 	bl	800157a <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f965 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x68>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2400000c 	.word	0x2400000c
 8001254:	24000000 	.word	0x24000000
 8001258:	24000008 	.word	0x24000008

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2400000c 	.word	0x2400000c
 8001280:	24000310 	.word	0x24000310

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	24000310 	.word	0x24000310

0800129c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetREVID+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0c1b      	lsrs	r3, r3, #16
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	5c001000 	.word	0x5c001000

080012b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012c4:	4904      	ldr	r1, [pc, #16]	; (80012d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58000400 	.word	0x58000400

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <__NVIC_SetPriorityGrouping+0x40>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x40>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0000 	.word	0x05fa0000

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db12      	blt.n	80013b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	490a      	ldr	r1, [pc, #40]	; (80013c0 <__NVIC_DisableIRQ+0x44>)
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	3320      	adds	r3, #32
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013a8:	f3bf 8f4f 	dsb	sy
}
 80013ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ae:	f3bf 8f6f 	isb	sy
}
 80013b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001484:	f3bf 8f4f 	dsb	sy
}
 8001488:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <__NVIC_SystemReset+0x24>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001492:	4904      	ldr	r1, [pc, #16]	; (80014a4 <__NVIC_SystemReset+0x24>)
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_SystemReset+0x28>)
 8001496:	4313      	orrs	r3, r2
 8001498:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800149a:	f3bf 8f4f 	dsb	sy
}
 800149e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <__NVIC_SystemReset+0x20>
 80014a4:	e000ed00 	.word	0xe000ed00
 80014a8:	05fa0004 	.word	0x05fa0004

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff78 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff feef 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff06 	bl	8001324 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff7a 	bl	8001418 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff49 	bl	80013c4 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fef9 	bl	8001340 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff09 	bl	800137c <__NVIC_DisableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001576:	f7ff ff83 	bl	8001480 <__NVIC_SystemReset>

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff92 	bl	80014ac <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fe72 	bl	8001284 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e2dc      	b.n	8001b66 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e2cd      	b.n	8001b66 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a76      	ldr	r2, [pc, #472]	; (80017a8 <HAL_DMA_Abort+0x214>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d04a      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a74      	ldr	r2, [pc, #464]	; (80017ac <HAL_DMA_Abort+0x218>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d045      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a73      	ldr	r2, [pc, #460]	; (80017b0 <HAL_DMA_Abort+0x21c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d040      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a71      	ldr	r2, [pc, #452]	; (80017b4 <HAL_DMA_Abort+0x220>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d03b      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a70      	ldr	r2, [pc, #448]	; (80017b8 <HAL_DMA_Abort+0x224>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d036      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_DMA_Abort+0x228>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d031      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6d      	ldr	r2, [pc, #436]	; (80017c0 <HAL_DMA_Abort+0x22c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d02c      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6b      	ldr	r2, [pc, #428]	; (80017c4 <HAL_DMA_Abort+0x230>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d027      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <HAL_DMA_Abort+0x234>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a68      	ldr	r2, [pc, #416]	; (80017cc <HAL_DMA_Abort+0x238>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01d      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a67      	ldr	r2, [pc, #412]	; (80017d0 <HAL_DMA_Abort+0x23c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d018      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <HAL_DMA_Abort+0x240>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a64      	ldr	r2, [pc, #400]	; (80017d8 <HAL_DMA_Abort+0x244>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00e      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a62      	ldr	r2, [pc, #392]	; (80017dc <HAL_DMA_Abort+0x248>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d009      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a61      	ldr	r2, [pc, #388]	; (80017e0 <HAL_DMA_Abort+0x24c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d004      	beq.n	800166a <HAL_DMA_Abort+0xd6>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a5f      	ldr	r2, [pc, #380]	; (80017e4 <HAL_DMA_Abort+0x250>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_DMA_Abort+0xda>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_DMA_Abort+0xdc>
 800166e:	2300      	movs	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 021e 	bic.w	r2, r2, #30
 8001682:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001692:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e00a      	b.n	80016b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 020e 	bic.w	r2, r2, #14
 80016aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a3c      	ldr	r2, [pc, #240]	; (80017a8 <HAL_DMA_Abort+0x214>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d072      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <HAL_DMA_Abort+0x218>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d06d      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a39      	ldr	r2, [pc, #228]	; (80017b0 <HAL_DMA_Abort+0x21c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d068      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <HAL_DMA_Abort+0x220>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d063      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <HAL_DMA_Abort+0x224>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d05e      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a34      	ldr	r2, [pc, #208]	; (80017bc <HAL_DMA_Abort+0x228>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d059      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <HAL_DMA_Abort+0x22c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d054      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <HAL_DMA_Abort+0x230>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d04f      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <HAL_DMA_Abort+0x234>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d04a      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <HAL_DMA_Abort+0x238>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d045      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_DMA_Abort+0x23c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d040      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <HAL_DMA_Abort+0x240>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d03b      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <HAL_DMA_Abort+0x244>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d036      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_DMA_Abort+0x248>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d031      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <HAL_DMA_Abort+0x24c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d02c      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <HAL_DMA_Abort+0x250>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d027      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <HAL_DMA_Abort+0x254>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d022      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_DMA_Abort+0x258>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01d      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_DMA_Abort+0x25c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d018      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_DMA_Abort+0x260>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <HAL_DMA_Abort+0x264>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00e      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_DMA_Abort+0x268>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d009      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_DMA_Abort+0x26c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d004      	beq.n	80017a2 <HAL_DMA_Abort+0x20e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_DMA_Abort+0x270>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d132      	bne.n	8001808 <HAL_DMA_Abort+0x274>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e031      	b.n	800180a <HAL_DMA_Abort+0x276>
 80017a6:	bf00      	nop
 80017a8:	40020010 	.word	0x40020010
 80017ac:	40020028 	.word	0x40020028
 80017b0:	40020040 	.word	0x40020040
 80017b4:	40020058 	.word	0x40020058
 80017b8:	40020070 	.word	0x40020070
 80017bc:	40020088 	.word	0x40020088
 80017c0:	400200a0 	.word	0x400200a0
 80017c4:	400200b8 	.word	0x400200b8
 80017c8:	40020410 	.word	0x40020410
 80017cc:	40020428 	.word	0x40020428
 80017d0:	40020440 	.word	0x40020440
 80017d4:	40020458 	.word	0x40020458
 80017d8:	40020470 	.word	0x40020470
 80017dc:	40020488 	.word	0x40020488
 80017e0:	400204a0 	.word	0x400204a0
 80017e4:	400204b8 	.word	0x400204b8
 80017e8:	58025408 	.word	0x58025408
 80017ec:	5802541c 	.word	0x5802541c
 80017f0:	58025430 	.word	0x58025430
 80017f4:	58025444 	.word	0x58025444
 80017f8:	58025458 	.word	0x58025458
 80017fc:	5802546c 	.word	0x5802546c
 8001800:	58025480 	.word	0x58025480
 8001804:	58025494 	.word	0x58025494
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6d      	ldr	r2, [pc, #436]	; (80019d8 <HAL_DMA_Abort+0x444>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d04a      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6b      	ldr	r2, [pc, #428]	; (80019dc <HAL_DMA_Abort+0x448>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d045      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_DMA_Abort+0x44c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d040      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a68      	ldr	r2, [pc, #416]	; (80019e4 <HAL_DMA_Abort+0x450>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d03b      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a67      	ldr	r2, [pc, #412]	; (80019e8 <HAL_DMA_Abort+0x454>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d036      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_DMA_Abort+0x458>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d031      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a64      	ldr	r2, [pc, #400]	; (80019f0 <HAL_DMA_Abort+0x45c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d02c      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a62      	ldr	r2, [pc, #392]	; (80019f4 <HAL_DMA_Abort+0x460>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d027      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a61      	ldr	r2, [pc, #388]	; (80019f8 <HAL_DMA_Abort+0x464>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5f      	ldr	r2, [pc, #380]	; (80019fc <HAL_DMA_Abort+0x468>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01d      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5e      	ldr	r2, [pc, #376]	; (8001a00 <HAL_DMA_Abort+0x46c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d018      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5c      	ldr	r2, [pc, #368]	; (8001a04 <HAL_DMA_Abort+0x470>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5b      	ldr	r2, [pc, #364]	; (8001a08 <HAL_DMA_Abort+0x474>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00e      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a59      	ldr	r2, [pc, #356]	; (8001a0c <HAL_DMA_Abort+0x478>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_DMA_Abort+0x47c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Abort+0x32a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a56      	ldr	r2, [pc, #344]	; (8001a14 <HAL_DMA_Abort+0x480>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <HAL_DMA_Abort+0x33c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e007      	b.n	80018e0 <HAL_DMA_Abort+0x34c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018e0:	e013      	b.n	800190a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e2:	f7ff fccf 	bl	8001284 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d90c      	bls.n	800190a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e12d      	b.n	8001b66 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e5      	bne.n	80018e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <HAL_DMA_Abort+0x444>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d04a      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <HAL_DMA_Abort+0x448>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d045      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_DMA_Abort+0x44c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d040      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2a      	ldr	r2, [pc, #168]	; (80019e4 <HAL_DMA_Abort+0x450>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d03b      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a29      	ldr	r2, [pc, #164]	; (80019e8 <HAL_DMA_Abort+0x454>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d036      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a27      	ldr	r2, [pc, #156]	; (80019ec <HAL_DMA_Abort+0x458>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d031      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_DMA_Abort+0x45c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d02c      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_DMA_Abort+0x460>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d027      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_DMA_Abort+0x464>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d022      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_DMA_Abort+0x468>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01d      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_DMA_Abort+0x46c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d018      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <HAL_DMA_Abort+0x470>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_DMA_Abort+0x474>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00e      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1b      	ldr	r2, [pc, #108]	; (8001a0c <HAL_DMA_Abort+0x478>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d009      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <HAL_DMA_Abort+0x47c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d004      	beq.n	80019b6 <HAL_DMA_Abort+0x422>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_DMA_Abort+0x480>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_DMA_Abort+0x426>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_DMA_Abort+0x428>
 80019ba:	2300      	movs	r3, #0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d02b      	beq.n	8001a18 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	223f      	movs	r2, #63	; 0x3f
 80019d0:	409a      	lsls	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	e02a      	b.n	8001a2e <HAL_DMA_Abort+0x49a>
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2201      	movs	r2, #1
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_DMA_Abort+0x5dc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d072      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4d      	ldr	r2, [pc, #308]	; (8001b74 <HAL_DMA_Abort+0x5e0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d06d      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_DMA_Abort+0x5e4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d068      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <HAL_DMA_Abort+0x5e8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d063      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_DMA_Abort+0x5ec>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05e      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_DMA_Abort+0x5f0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d059      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <HAL_DMA_Abort+0x5f4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d054      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a44      	ldr	r2, [pc, #272]	; (8001b8c <HAL_DMA_Abort+0x5f8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d04f      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <HAL_DMA_Abort+0x5fc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d04a      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a41      	ldr	r2, [pc, #260]	; (8001b94 <HAL_DMA_Abort+0x600>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d045      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <HAL_DMA_Abort+0x604>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d040      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <HAL_DMA_Abort+0x608>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d03b      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_DMA_Abort+0x60c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d036      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <HAL_DMA_Abort+0x610>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d031      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <HAL_DMA_Abort+0x614>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d02c      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a38      	ldr	r2, [pc, #224]	; (8001bac <HAL_DMA_Abort+0x618>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d027      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_DMA_Abort+0x61c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d022      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a35      	ldr	r2, [pc, #212]	; (8001bb4 <HAL_DMA_Abort+0x620>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01d      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_DMA_Abort+0x624>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d018      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a32      	ldr	r2, [pc, #200]	; (8001bbc <HAL_DMA_Abort+0x628>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_DMA_Abort+0x62c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00e      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <HAL_DMA_Abort+0x630>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d009      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_DMA_Abort+0x634>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d004      	beq.n	8001b1e <HAL_DMA_Abort+0x58a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <HAL_DMA_Abort+0x638>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_DMA_Abort+0x58e>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_DMA_Abort+0x590>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d015      	beq.n	8001b54 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b30:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b48:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b52:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020010 	.word	0x40020010
 8001b74:	40020028 	.word	0x40020028
 8001b78:	40020040 	.word	0x40020040
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	40020070 	.word	0x40020070
 8001b84:	40020088 	.word	0x40020088
 8001b88:	400200a0 	.word	0x400200a0
 8001b8c:	400200b8 	.word	0x400200b8
 8001b90:	40020410 	.word	0x40020410
 8001b94:	40020428 	.word	0x40020428
 8001b98:	40020440 	.word	0x40020440
 8001b9c:	40020458 	.word	0x40020458
 8001ba0:	40020470 	.word	0x40020470
 8001ba4:	40020488 	.word	0x40020488
 8001ba8:	400204a0 	.word	0x400204a0
 8001bac:	400204b8 	.word	0x400204b8
 8001bb0:	58025408 	.word	0x58025408
 8001bb4:	5802541c 	.word	0x5802541c
 8001bb8:	58025430 	.word	0x58025430
 8001bbc:	58025444 	.word	0x58025444
 8001bc0:	58025458 	.word	0x58025458
 8001bc4:	5802546c 	.word	0x5802546c
 8001bc8:	58025480 	.word	0x58025480
 8001bcc:	58025494 	.word	0x58025494

08001bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e237      	b.n	8002052 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d004      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e22c      	b.n	8002052 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a5c      	ldr	r2, [pc, #368]	; (8001d70 <HAL_DMA_Abort_IT+0x1a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d04a      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a5b      	ldr	r2, [pc, #364]	; (8001d74 <HAL_DMA_Abort_IT+0x1a4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d045      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a59      	ldr	r2, [pc, #356]	; (8001d78 <HAL_DMA_Abort_IT+0x1a8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d040      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_DMA_Abort_IT+0x1ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d03b      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_DMA_Abort_IT+0x1b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d036      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <HAL_DMA_Abort_IT+0x1b4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d031      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a53      	ldr	r2, [pc, #332]	; (8001d88 <HAL_DMA_Abort_IT+0x1b8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02c      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_DMA_Abort_IT+0x1bc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d027      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_DMA_Abort_IT+0x1c0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d022      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_DMA_Abort_IT+0x1c4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d01d      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_DMA_Abort_IT+0x1c8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d018      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_DMA_Abort_IT+0x1cc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_DMA_Abort_IT+0x1d0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00e      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_DMA_Abort_IT+0x1d4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_DMA_Abort_IT+0x1d8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a46      	ldr	r2, [pc, #280]	; (8001dac <HAL_DMA_Abort_IT+0x1dc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Abort_IT+0xcc>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_Abort_IT+0xce>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8086 	beq.w	8001db0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <HAL_DMA_Abort_IT+0x1a0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d04a      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_DMA_Abort_IT+0x1a4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d045      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <HAL_DMA_Abort_IT+0x1a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d040      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_DMA_Abort_IT+0x1ac>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d03b      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <HAL_DMA_Abort_IT+0x1b0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d036      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <HAL_DMA_Abort_IT+0x1b4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d031      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <HAL_DMA_Abort_IT+0x1b8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02c      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_DMA_Abort_IT+0x1bc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d027      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_DMA_Abort_IT+0x1c0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_DMA_Abort_IT+0x1c4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d01d      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <HAL_DMA_Abort_IT+0x1c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d018      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_DMA_Abort_IT+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_DMA_Abort_IT+0x1d0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00e      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_DMA_Abort_IT+0x1d4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_DMA_Abort_IT+0x1d8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x17c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_DMA_Abort_IT+0x1dc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d108      	bne.n	8001d5e <HAL_DMA_Abort_IT+0x18e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e178      	b.n	8002050 <HAL_DMA_Abort_IT+0x480>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e16f      	b.n	8002050 <HAL_DMA_Abort_IT+0x480>
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6c      	ldr	r2, [pc, #432]	; (8001f78 <HAL_DMA_Abort_IT+0x3a8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04a      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6b      	ldr	r2, [pc, #428]	; (8001f7c <HAL_DMA_Abort_IT+0x3ac>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d045      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <HAL_DMA_Abort_IT+0x3b0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d040      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a68      	ldr	r2, [pc, #416]	; (8001f84 <HAL_DMA_Abort_IT+0x3b4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d03b      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a66      	ldr	r2, [pc, #408]	; (8001f88 <HAL_DMA_Abort_IT+0x3b8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_DMA_Abort_IT+0x3bc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d031      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_DMA_Abort_IT+0x3c0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02c      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a62      	ldr	r2, [pc, #392]	; (8001f94 <HAL_DMA_Abort_IT+0x3c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d027      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_DMA_Abort_IT+0x3c8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a5f      	ldr	r2, [pc, #380]	; (8001f9c <HAL_DMA_Abort_IT+0x3cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01d      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_DMA_Abort_IT+0x3d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5c      	ldr	r2, [pc, #368]	; (8001fa4 <HAL_DMA_Abort_IT+0x3d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <HAL_DMA_Abort_IT+0x3d8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a59      	ldr	r2, [pc, #356]	; (8001fac <HAL_DMA_Abort_IT+0x3dc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_DMA_Abort_IT+0x3e0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x290>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_DMA_Abort_IT+0x3e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_DMA_Abort_IT+0x2a2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_DMA_Abort_IT+0x2b2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a3c      	ldr	r2, [pc, #240]	; (8001f78 <HAL_DMA_Abort_IT+0x3a8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d072      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <HAL_DMA_Abort_IT+0x3ac>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d06d      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <HAL_DMA_Abort_IT+0x3b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d068      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_DMA_Abort_IT+0x3b4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d063      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a36      	ldr	r2, [pc, #216]	; (8001f88 <HAL_DMA_Abort_IT+0x3b8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d05e      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_DMA_Abort_IT+0x3bc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d059      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_DMA_Abort_IT+0x3c0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d054      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <HAL_DMA_Abort_IT+0x3c4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04f      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a30      	ldr	r2, [pc, #192]	; (8001f98 <HAL_DMA_Abort_IT+0x3c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04a      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_DMA_Abort_IT+0x3cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d045      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_DMA_Abort_IT+0x3d0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d040      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_DMA_Abort_IT+0x3d4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d03b      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <HAL_DMA_Abort_IT+0x3d8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d036      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_DMA_Abort_IT+0x3dc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d031      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <HAL_DMA_Abort_IT+0x3e0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d02c      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a25      	ldr	r2, [pc, #148]	; (8001fb4 <HAL_DMA_Abort_IT+0x3e4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d027      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a24      	ldr	r2, [pc, #144]	; (8001fb8 <HAL_DMA_Abort_IT+0x3e8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d022      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_DMA_Abort_IT+0x3ec>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01d      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <HAL_DMA_Abort_IT+0x3f0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d018      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <HAL_DMA_Abort_IT+0x3f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_DMA_Abort_IT+0x3f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00e      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_DMA_Abort_IT+0x3fc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_DMA_Abort_IT+0x400>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x3a2>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_DMA_Abort_IT+0x404>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d132      	bne.n	8001fd8 <HAL_DMA_Abort_IT+0x408>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e031      	b.n	8001fda <HAL_DMA_Abort_IT+0x40a>
 8001f76:	bf00      	nop
 8001f78:	40020010 	.word	0x40020010
 8001f7c:	40020028 	.word	0x40020028
 8001f80:	40020040 	.word	0x40020040
 8001f84:	40020058 	.word	0x40020058
 8001f88:	40020070 	.word	0x40020070
 8001f8c:	40020088 	.word	0x40020088
 8001f90:	400200a0 	.word	0x400200a0
 8001f94:	400200b8 	.word	0x400200b8
 8001f98:	40020410 	.word	0x40020410
 8001f9c:	40020428 	.word	0x40020428
 8001fa0:	40020440 	.word	0x40020440
 8001fa4:	40020458 	.word	0x40020458
 8001fa8:	40020470 	.word	0x40020470
 8001fac:	40020488 	.word	0x40020488
 8001fb0:	400204a0 	.word	0x400204a0
 8001fb4:	400204b8 	.word	0x400204b8
 8001fb8:	58025408 	.word	0x58025408
 8001fbc:	5802541c 	.word	0x5802541c
 8001fc0:	58025430 	.word	0x58025430
 8001fc4:	58025444 	.word	0x58025444
 8001fc8:	58025458 	.word	0x58025458
 8001fcc:	5802546c 	.word	0x5802546c
 8001fd0:	58025480 	.word	0x58025480
 8001fd4:	58025494 	.word	0x58025494
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800200c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002024:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800202e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop

0800205c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0e3      	b.n	8002236 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2223      	movs	r2, #35	; 0x23
 800207c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7fe fdc9 	bl	8000c18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	4b6e      	ldr	r3, [pc, #440]	; (8002240 <HAL_ETH_Init+0x1e4>)
 8002088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800208c:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_ETH_Init+0x1e4>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_ETH_Init+0x1e4>)
 8002098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7a1b      	ldrb	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff f901 	bl	80012b4 <HAL_SYSCFG_ETHInterfaceSelect>
 80020b2:	e003      	b.n	80020bc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80020b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80020b8:	f7ff f8fc 	bl	80012b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80020bc:	4b61      	ldr	r3, [pc, #388]	; (8002244 <HAL_ETH_Init+0x1e8>)
 80020be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d8:	f7ff f8d4 	bl	8001284 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020de:	e011      	b.n	8002104 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020e0:	f7ff f8d0 	bl	8001284 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ee:	d909      	bls.n	8002104 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	22e0      	movs	r2, #224	; 0xe0
 80020fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e098      	b.n	8002236 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e4      	bne.n	80020e0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f89e 	bl	8002258 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800211c:	f001 fe6a 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8002120:	4603      	mov	r3, r0
 8002122:	4a49      	ldr	r2, [pc, #292]	; (8002248 <HAL_ETH_Init+0x1ec>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3a01      	subs	r2, #1
 8002130:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fa81 	bl	800263c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002146:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002156:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	22e0      	movs	r2, #224	; 0xe0
 8002172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e05d      	b.n	8002236 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002182:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002186:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_ETH_Init+0x1f0>)
 8002188:	4013      	ands	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6952      	ldr	r2, [r2, #20]
 800218e:	0051      	lsls	r1, r2, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800219a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fae9 	bl	8002776 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fb2f 	bl	8002808 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	3305      	adds	r3, #5
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	021a      	lsls	r2, r3, #8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	3303      	adds	r3, #3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	061a      	lsls	r2, r3, #24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	3302      	adds	r3, #2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	041b      	lsls	r3, r3, #16
 80021dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	3301      	adds	r3, #1
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_ETH_Init+0x1f4>)
 800220a:	430b      	orrs	r3, r1
 800220c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_ETH_Init+0x1f8>)
 800221e:	430b      	orrs	r3, r1
 8002220:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2210      	movs	r2, #16
 8002230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400
 8002244:	58000400 	.word	0x58000400
 8002248:	431bde83 	.word	0x431bde83
 800224c:	ffff8001 	.word	0xffff8001
 8002250:	0c020060 	.word	0x0c020060
 8002254:	0c20c000 	.word	0x0c20c000

08002258 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002268:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002270:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002272:	f001 fdbf 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8002276:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d804      	bhi.n	800228a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e022      	b.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d204      	bcs.n	800229c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	e019      	b.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_ETH_SetMDIOClockRange+0x94>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d915      	bls.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_ETH_SetMDIOClockRange+0x98>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d804      	bhi.n	80022b6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e00c      	b.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d804      	bhi.n	80022c8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e003      	b.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80022ce:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	02160ebf 	.word	0x02160ebf
 80022e8:	03938700 	.word	0x03938700
 80022ec:	05f5e0ff 	.word	0x05f5e0ff
 80022f0:	08f0d17f 	.word	0x08f0d17f
 80022f4:	0ee6b27f 	.word	0x0ee6b27f

080022f8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800230a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	7b1b      	ldrb	r3, [r3, #12]
 8002318:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800231a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	7b5b      	ldrb	r3, [r3, #13]
 8002320:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002322:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7b9b      	ldrb	r3, [r3, #14]
 8002328:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800232a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	7bdb      	ldrb	r3, [r3, #15]
 8002330:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002332:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	7c12      	ldrb	r2, [r2, #16]
 8002338:	2a00      	cmp	r2, #0
 800233a:	d102      	bne.n	8002342 <ETH_SetMACConfig+0x4a>
 800233c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002340:	e000      	b.n	8002344 <ETH_SetMACConfig+0x4c>
 8002342:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002344:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	7c52      	ldrb	r2, [r2, #17]
 800234a:	2a00      	cmp	r2, #0
 800234c:	d102      	bne.n	8002354 <ETH_SetMACConfig+0x5c>
 800234e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002352:	e000      	b.n	8002356 <ETH_SetMACConfig+0x5e>
 8002354:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	7c9b      	ldrb	r3, [r3, #18]
 800235c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800235e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002364:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800236a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	7f1b      	ldrb	r3, [r3, #28]
 8002370:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002372:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	7f5b      	ldrb	r3, [r3, #29]
 8002378:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800237a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	7f92      	ldrb	r2, [r2, #30]
 8002380:	2a00      	cmp	r2, #0
 8002382:	d102      	bne.n	800238a <ETH_SetMACConfig+0x92>
 8002384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0x94>
 800238a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800238c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7fdb      	ldrb	r3, [r3, #31]
 8002392:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002394:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	f892 2020 	ldrb.w	r2, [r2, #32]
 800239c:	2a00      	cmp	r2, #0
 800239e:	d102      	bne.n	80023a6 <ETH_SetMACConfig+0xae>
 80023a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a4:	e000      	b.n	80023a8 <ETH_SetMACConfig+0xb0>
 80023a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80023a8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023b6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80023b8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b56      	ldr	r3, [pc, #344]	; (8002524 <ETH_SetMACConfig+0x22c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	68f9      	ldr	r1, [r7, #12]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80023f6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002400:	2a00      	cmp	r2, #0
 8002402:	d102      	bne.n	800240a <ETH_SetMACConfig+0x112>
 8002404:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x114>
 800240a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800240c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <ETH_SetMACConfig+0x230>)
 800241e:	4013      	ands	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	68f9      	ldr	r1, [r7, #12]
 8002426:	430b      	orrs	r3, r1
 8002428:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <ETH_SetMACConfig+0x234>)
 8002442:	4013      	ands	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	430b      	orrs	r3, r1
 800244c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002454:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800245a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002462:	2a00      	cmp	r2, #0
 8002464:	d101      	bne.n	800246a <ETH_SetMACConfig+0x172>
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	e000      	b.n	800246c <ETH_SetMACConfig+0x174>
 800246a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800246c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800247e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	430b      	orrs	r3, r1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002494:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800249c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f023 0103 	bic.w	r1, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80024c2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80024de:	2a00      	cmp	r2, #0
 80024e0:	d101      	bne.n	80024e6 <ETH_SetMACConfig+0x1ee>
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	e000      	b.n	80024e8 <ETH_SetMACConfig+0x1f0>
 80024e6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80024e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80024f0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80024fa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002508:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	430a      	orrs	r2, r1
 8002514:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	00048083 	.word	0x00048083
 8002528:	c0f88000 	.word	0xc0f88000
 800252c:	fffffef0 	.word	0xfffffef0

08002530 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b38      	ldr	r3, [pc, #224]	; (8002628 <ETH_SetDMAConfig+0xf8>)
 8002546:	4013      	ands	r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	6811      	ldr	r1, [r2, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002556:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002562:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7b1b      	ldrb	r3, [r3, #12]
 8002568:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4b2c      	ldr	r3, [pc, #176]	; (800262c <ETH_SetDMAConfig+0xfc>)
 800257a:	4013      	ands	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	430b      	orrs	r3, r1
 8002584:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002588:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	7b5b      	ldrb	r3, [r3, #13]
 800258e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <ETH_SetDMAConfig+0x100>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	7d1b      	ldrb	r3, [r3, #20]
 80025c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80025c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	7f5b      	ldrb	r3, [r3, #29]
 80025c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <ETH_SetDMAConfig+0x104>)
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7f1b      	ldrb	r3, [r3, #28]
 80025f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002604:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <ETH_SetDMAConfig+0x108>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	430b      	orrs	r3, r1
 8002614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002618:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	ffff87fd 	.word	0xffff87fd
 800262c:	ffff2ffe 	.word	0xffff2ffe
 8002630:	fffec000 	.word	0xfffec000
 8002634:	ffc0efef 	.word	0xffc0efef
 8002638:	7fc0ffff 	.word	0x7fc0ffff

0800263c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0a4      	sub	sp, #144	; 0x90
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800264a:	2300      	movs	r3, #0
 800264c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002684:	2300      	movs	r3, #0
 8002686:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002694:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002698:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80026a0:	2300      	movs	r3, #0
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80026b6:	2300      	movs	r3, #0
 80026b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80026be:	2300      	movs	r3, #0
 80026c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80026d4:	2320      	movs	r3, #32
 80026d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80026e6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002716:	2300      	movs	r3, #0
 8002718:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fde6 	bl	80022f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800272c:	2301      	movs	r3, #1
 800272e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002730:	2301      	movs	r3, #1
 8002732:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002746:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800274a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002750:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002754:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800275c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fee1 	bl	8002530 <ETH_SetDMAConfig>
}
 800276e:	bf00      	nop
 8002770:	3790      	adds	r7, #144	; 0x90
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e01d      	b.n	80027c0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	3206      	adds	r2, #6
 80027b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d9de      	bls.n	8002784 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d4:	461a      	mov	r2, r3
 80027d6:	2303      	movs	r3, #3
 80027d8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e023      	b.n	800285e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	3212      	adds	r2, #18
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d9d8      	bls.n	8002816 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288a:	461a      	mov	r2, r3
 800288c:	2303      	movs	r3, #3
 800288e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028d2:	4b89      	ldr	r3, [pc, #548]	; (8002af8 <HAL_GPIO_Init+0x234>)
 80028d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028d6:	e194      	b.n	8002c02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8186 	beq.w	8002bfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d005      	beq.n	8002908 <HAL_GPIO_Init+0x44>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d130      	bne.n	800296a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800293e:	2201      	movs	r2, #1
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0201 	and.w	r2, r3, #1
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b03      	cmp	r3, #3
 8002974:	d017      	beq.n	80029a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d123      	bne.n	80029fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	08da      	lsrs	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3208      	adds	r2, #8
 80029f4:	69b9      	ldr	r1, [r7, #24]
 80029f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0203 	and.w	r2, r3, #3
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80e0 	beq.w	8002bfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_GPIO_Init+0x238>)
 8002a3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a42:	4a2e      	ldr	r2, [pc, #184]	; (8002afc <HAL_GPIO_Init+0x238>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_GPIO_Init+0x238>)
 8002a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a5a:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_GPIO_Init+0x23c>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_GPIO_Init+0x240>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d052      	beq.n	8002b2c <HAL_GPIO_Init+0x268>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_GPIO_Init+0x244>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d031      	beq.n	8002af2 <HAL_GPIO_Init+0x22e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <HAL_GPIO_Init+0x248>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02b      	beq.n	8002aee <HAL_GPIO_Init+0x22a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_GPIO_Init+0x24c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d025      	beq.n	8002aea <HAL_GPIO_Init+0x226>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <HAL_GPIO_Init+0x250>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01f      	beq.n	8002ae6 <HAL_GPIO_Init+0x222>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_GPIO_Init+0x254>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d019      	beq.n	8002ae2 <HAL_GPIO_Init+0x21e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x258>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_GPIO_Init+0x21a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_GPIO_Init+0x25c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00d      	beq.n	8002ada <HAL_GPIO_Init+0x216>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_GPIO_Init+0x260>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <HAL_GPIO_Init+0x212>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_GPIO_Init+0x264>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_GPIO_Init+0x20e>
 8002ace:	2309      	movs	r3, #9
 8002ad0:	e02d      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	e02b      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	e029      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e027      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e025      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	e023      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e021      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e01f      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e01d      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01b      	b.n	8002b2e <HAL_GPIO_Init+0x26a>
 8002af6:	bf00      	nop
 8002af8:	58000080 	.word	0x58000080
 8002afc:	58024400 	.word	0x58024400
 8002b00:	58000400 	.word	0x58000400
 8002b04:	58020000 	.word	0x58020000
 8002b08:	58020400 	.word	0x58020400
 8002b0c:	58020800 	.word	0x58020800
 8002b10:	58020c00 	.word	0x58020c00
 8002b14:	58021000 	.word	0x58021000
 8002b18:	58021400 	.word	0x58021400
 8002b1c:	58021800 	.word	0x58021800
 8002b20:	58021c00 	.word	0x58021c00
 8002b24:	58022000 	.word	0x58022000
 8002b28:	58022400 	.word	0x58022400
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3e:	4938      	ldr	r1, [pc, #224]	; (8002c20 <HAL_GPIO_Init+0x35c>)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f ae63 	bne.w	80028d8 <HAL_GPIO_Init+0x14>
  }
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	3724      	adds	r7, #36	; 0x24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	58000400 	.word	0x58000400

08002c24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c32:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_GPIO_DeInit+0x1e4>)
 8002c34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002c36:	e0d9      	b.n	8002dec <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80cc 	beq.w	8002de6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c4e:	4a6f      	ldr	r2, [pc, #444]	; (8002e0c <HAL_GPIO_DeInit+0x1e8>)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <HAL_GPIO_DeInit+0x1ec>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d037      	beq.n	8002ce8 <HAL_GPIO_DeInit+0xc4>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a66      	ldr	r2, [pc, #408]	; (8002e14 <HAL_GPIO_DeInit+0x1f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d031      	beq.n	8002ce4 <HAL_GPIO_DeInit+0xc0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_GPIO_DeInit+0x1f4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d02b      	beq.n	8002ce0 <HAL_GPIO_DeInit+0xbc>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a64      	ldr	r2, [pc, #400]	; (8002e1c <HAL_GPIO_DeInit+0x1f8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d025      	beq.n	8002cdc <HAL_GPIO_DeInit+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a63      	ldr	r2, [pc, #396]	; (8002e20 <HAL_GPIO_DeInit+0x1fc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01f      	beq.n	8002cd8 <HAL_GPIO_DeInit+0xb4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a62      	ldr	r2, [pc, #392]	; (8002e24 <HAL_GPIO_DeInit+0x200>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d019      	beq.n	8002cd4 <HAL_GPIO_DeInit+0xb0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a61      	ldr	r2, [pc, #388]	; (8002e28 <HAL_GPIO_DeInit+0x204>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_DeInit+0xac>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a60      	ldr	r2, [pc, #384]	; (8002e2c <HAL_GPIO_DeInit+0x208>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_DeInit+0xa8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a5f      	ldr	r2, [pc, #380]	; (8002e30 <HAL_GPIO_DeInit+0x20c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_DeInit+0xa4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <HAL_GPIO_DeInit+0x210>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_DeInit+0xa0>
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	e012      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	e010      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002cc8:	2308      	movs	r3, #8
 8002cca:	e00e      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002ccc:	2307      	movs	r3, #7
 8002cce:	e00c      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	e00a      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002cd4:	2305      	movs	r3, #5
 8002cd6:	e008      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e006      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e004      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e002      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_GPIO_DeInit+0xc6>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	f002 0203 	and.w	r2, r2, #3
 8002cf0:	0092      	lsls	r2, r2, #2
 8002cf2:	4093      	lsls	r3, r2
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d136      	bne.n	8002d68 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d24:	4013      	ands	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d36:	4013      	ands	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d4a:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <HAL_GPIO_DeInit+0x1e8>)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	482c      	ldr	r0, [pc, #176]	; (8002e0c <HAL_GPIO_DeInit+0x1e8>)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	400a      	ands	r2, r1
 8002d62:	3302      	adds	r3, #2
 8002d64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2103      	movs	r1, #3
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	08d2      	lsrs	r2, r2, #3
 8002d9c:	4019      	ands	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2103      	movs	r1, #3
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2103      	movs	r1, #3
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	401a      	ands	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3301      	adds	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f af1f 	bne.w	8002c38 <HAL_GPIO_DeInit+0x14>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	58000080 	.word	0x58000080
 8002e0c:	58000400 	.word	0x58000400
 8002e10:	58020000 	.word	0x58020000
 8002e14:	58020400 	.word	0x58020400
 8002e18:	58020800 	.word	0x58020800
 8002e1c:	58020c00 	.word	0x58020c00
 8002e20:	58021000 	.word	0x58021000
 8002e24:	58021400 	.word	0x58021400
 8002e28:	58021800 	.word	0x58021800
 8002e2c:	58021c00 	.word	0x58021c00
 8002e30:	58022000 	.word	0x58022000
 8002e34:	58022400 	.word	0x58022400

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_PWREx_ConfigSupply+0x70>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d00a      	beq.n	8002e96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_PWREx_ConfigSupply+0x70>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d001      	beq.n	8002e92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e01f      	b.n	8002ed2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e01d      	b.n	8002ed2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_PWREx_ConfigSupply+0x70>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	490f      	ldr	r1, [pc, #60]	; (8002edc <HAL_PWREx_ConfigSupply+0x70>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ea6:	f7fe f9ed 	bl	8001284 <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002eac:	e009      	b.n	8002ec2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002eae:	f7fe f9e9 	bl	8001284 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ebc:	d901      	bls.n	8002ec2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_PWREx_ConfigSupply+0x70>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	d1ee      	bne.n	8002eae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	58024800 	.word	0x58024800

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	; 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f000 bc48 	b.w	8003784 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8088 	beq.w	8003012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b99      	ldr	r3, [pc, #612]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f0c:	4b96      	ldr	r3, [pc, #600]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d007      	beq.n	8002f28 <HAL_RCC_OscConfig+0x48>
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	2b18      	cmp	r3, #24
 8002f1c:	d111      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62>
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d06d      	beq.n	8003010 <HAL_RCC_OscConfig+0x130>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d169      	bne.n	8003010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f000 bc21 	b.w	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x7a>
 8002f4c:	4b86      	ldr	r3, [pc, #536]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a85      	ldr	r2, [pc, #532]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x9c>
 8002f62:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b75      	ldr	r3, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a74      	ldr	r2, [pc, #464]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd8>
 8002fa0:	4b71      	ldr	r3, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a70      	ldr	r2, [pc, #448]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b6e      	ldr	r3, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6d      	ldr	r2, [pc, #436]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f960 	bl	8001284 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe f95c 	bl	8001284 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e3d4      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe f94c 	bl	8001284 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe f948 	bl	8001284 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e3c0      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003002:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x110>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80ca 	beq.w	80031b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003020:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003028:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800302a:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_RCC_OscConfig+0x166>
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2b18      	cmp	r3, #24
 800303a:	d156      	bne.n	80030ea <HAL_RCC_OscConfig+0x20a>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d151      	bne.n	80030ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003046:	4b48      	ldr	r3, [pc, #288]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e392      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0219 	bic.w	r2, r3, #25
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	493f      	ldr	r1, [pc, #252]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f908 	bl	8001284 <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe f904 	bl	8001284 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e37c      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	f7fe f901 	bl	800129c <HAL_GetREVID>
 800309a:	4603      	mov	r3, r0
 800309c:	f241 0203 	movw	r2, #4099	; 0x1003
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d817      	bhi.n	80030d4 <HAL_RCC_OscConfig+0x1f4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d108      	bne.n	80030be <HAL_RCC_OscConfig+0x1de>
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	e07a      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	031b      	lsls	r3, r3, #12
 80030cc:	4926      	ldr	r1, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d2:	e06f      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	4921      	ldr	r1, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e8:	e064      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d047      	beq.n	8003182 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0219 	bic.w	r2, r3, #25
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	491a      	ldr	r1, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f8be 	bl	8001284 <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310c:	f7fe f8ba 	bl	8001284 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e332      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	f7fe f8b7 	bl	800129c <HAL_GetREVID>
 800312e:	4603      	mov	r3, r0
 8003130:	f241 0203 	movw	r2, #4099	; 0x1003
 8003134:	4293      	cmp	r3, r2
 8003136:	d819      	bhi.n	800316c <HAL_RCC_OscConfig+0x28c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d108      	bne.n	8003152 <HAL_RCC_OscConfig+0x272>
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800314a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314e:	6053      	str	r3, [r2, #4]
 8003150:	e030      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	031b      	lsls	r3, r3, #12
 8003160:	4901      	ldr	r1, [pc, #4]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
 8003166:	e025      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
 8003168:	58024400 	.word	0x58024400
 800316c:	4b9a      	ldr	r3, [pc, #616]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4997      	ldr	r1, [pc, #604]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	e018      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a94      	ldr	r2, [pc, #592]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe f879 	bl	8001284 <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe f875 	bl	8001284 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e2ed      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031a8:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a9 	beq.w	8003314 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031cc:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d007      	beq.n	80031e8 <HAL_RCC_OscConfig+0x308>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b18      	cmp	r3, #24
 80031dc:	d13a      	bne.n	8003254 <HAL_RCC_OscConfig+0x374>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d135      	bne.n	8003254 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x320>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e2c1      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003200:	f7fe f84c 	bl	800129c <HAL_GetREVID>
 8003204:	4603      	mov	r3, r0
 8003206:	f241 0203 	movw	r2, #4099	; 0x1003
 800320a:	4293      	cmp	r3, r2
 800320c:	d817      	bhi.n	800323e <HAL_RCC_OscConfig+0x35e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	2b20      	cmp	r3, #32
 8003214:	d108      	bne.n	8003228 <HAL_RCC_OscConfig+0x348>
 8003216:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800321e:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003224:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003226:	e075      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003228:	4b6b      	ldr	r3, [pc, #428]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	069b      	lsls	r3, r3, #26
 8003236:	4968      	ldr	r1, [pc, #416]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800323c:	e06a      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800323e:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	4962      	ldr	r1, [pc, #392]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003252:	e05f      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d042      	beq.n	80032e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe f80c 	bl	8001284 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003270:	f7fe f808 	bl	8001284 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e280      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800328e:	f7fe f805 	bl	800129c <HAL_GetREVID>
 8003292:	4603      	mov	r3, r0
 8003294:	f241 0203 	movw	r2, #4099	; 0x1003
 8003298:	4293      	cmp	r3, r2
 800329a:	d817      	bhi.n	80032cc <HAL_RCC_OscConfig+0x3ec>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d108      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3d6>
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b2:	6053      	str	r3, [r2, #4]
 80032b4:	e02e      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
 80032b6:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	069b      	lsls	r3, r3, #26
 80032c4:	4944      	ldr	r1, [pc, #272]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
 80032ca:	e023      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	493f      	ldr	r1, [pc, #252]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
 80032e0:	e018      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd ffc9 	bl	8001284 <HAL_GetTick>
 80032f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032f6:	f7fd ffc5 	bl	8001284 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e23d      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003308:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d036      	beq.n	800338e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d019      	beq.n	800335c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd ffa6 	bl	8001284 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7fd ffa2 	bl	8001284 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e21a      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x45c>
 800335a:	e018      	b.n	800338e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fd ff8c 	bl	8001284 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003370:	f7fd ff88 	bl	8001284 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e200      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d039      	beq.n	800340e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01c      	beq.n	80033dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033ae:	f7fd ff69 	bl	8001284 <HAL_GetTick>
 80033b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b6:	f7fd ff65 	bl	8001284 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1dd      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
 80033d4:	e01b      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033dc:	4b9b      	ldr	r3, [pc, #620]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a9a      	ldr	r2, [pc, #616]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80033e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033e8:	f7fd ff4c 	bl	8001284 <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f0:	f7fd ff48 	bl	8001284 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1c0      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003402:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8081 	beq.w	800351e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800341c:	4b8c      	ldr	r3, [pc, #560]	; (8003650 <HAL_RCC_OscConfig+0x770>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a8b      	ldr	r2, [pc, #556]	; (8003650 <HAL_RCC_OscConfig+0x770>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003428:	f7fd ff2c 	bl	8001284 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fd ff28 	bl	8001284 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1a0      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003442:	4b83      	ldr	r3, [pc, #524]	; (8003650 <HAL_RCC_OscConfig+0x770>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d106      	bne.n	8003464 <HAL_RCC_OscConfig+0x584>
 8003456:	4b7d      	ldr	r3, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a7c      	ldr	r2, [pc, #496]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	e02d      	b.n	80034c0 <HAL_RCC_OscConfig+0x5e0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10c      	bne.n	8003486 <HAL_RCC_OscConfig+0x5a6>
 800346c:	4b77      	ldr	r3, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a76      	ldr	r2, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	4b74      	ldr	r3, [pc, #464]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a73      	ldr	r2, [pc, #460]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	e01c      	b.n	80034c0 <HAL_RCC_OscConfig+0x5e0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5c8>
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a6b      	ldr	r2, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x5e0>
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a64      	ldr	r2, [pc, #400]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fd fedc 	bl	8001284 <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fd fed8 	bl	8001284 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e14e      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034e6:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <HAL_RCC_OscConfig+0x5f0>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fec6 	bl	8001284 <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fec2 	bl	8001284 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e138      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 812d 	beq.w	8003782 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003528:	4b48      	ldr	r3, [pc, #288]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003530:	2b18      	cmp	r3, #24
 8003532:	f000 80bd 	beq.w	80036b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b02      	cmp	r3, #2
 800353c:	f040 809e 	bne.w	800367c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a41      	ldr	r2, [pc, #260]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fe9a 	bl	8001284 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd fe96 	bl	8001284 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e10e      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003576:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_RCC_OscConfig+0x774>)
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	430a      	orrs	r2, r1
 8003586:	4931      	ldr	r1, [pc, #196]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	628b      	str	r3, [r1, #40]	; 0x28
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	3b01      	subs	r3, #1
 8003592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	3b01      	subs	r3, #1
 800359c:	025b      	lsls	r3, r3, #9
 800359e:	b29b      	uxth	r3, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	3b01      	subs	r3, #1
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	3b01      	subs	r3, #1
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035bc:	4923      	ldr	r1, [pc, #140]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCC_OscConfig+0x778>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035da:	00d2      	lsls	r2, r2, #3
 80035dc:	491b      	ldr	r1, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f023 020c 	bic.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4917      	ldr	r1, [pc, #92]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f023 0202 	bic.w	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	4912      	ldr	r1, [pc, #72]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4a0d      	ldr	r2, [pc, #52]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800363c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fd fe1f 	bl	8001284 <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003648:	e011      	b.n	800366e <HAL_RCC_OscConfig+0x78e>
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
 8003650:	58024800 	.word	0x58024800
 8003654:	fffffc0c 	.word	0xfffffc0c
 8003658:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd fe12 	bl	8001284 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e08a      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x77c>
 800367a:	e082      	b.n	8003782 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fdfc 	bl	8001284 <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd fdf8 	bl	8001284 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e070      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036a2:	4b3a      	ldr	r3, [pc, #232]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x7b0>
 80036ae:	e068      	b.n	8003782 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036b6:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d031      	beq.n	8003728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d12a      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d122      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d11a      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0a5b      	lsrs	r3, r3, #9
 80036f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d111      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	0e1b      	lsrs	r3, r3, #24
 800371a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e02b      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003736:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d01f      	beq.n	8003782 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a11      	ldr	r2, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800374e:	f7fd fd99 	bl	8001284 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003754:	bf00      	nop
 8003756:	f7fd fd95 	bl	8001284 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	4293      	cmp	r3, r2
 8003760:	d0f9      	beq.n	8003756 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_OscConfig+0x8b0>)
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800376e:	00d2      	lsls	r2, r2, #3
 8003770:	4906      	ldr	r1, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003772:	4313      	orrs	r3, r2
 8003774:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3730      	adds	r7, #48	; 0x30
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	58024400 	.word	0x58024400
 8003790:	ffff0007 	.word	0xffff0007

08003794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e19c      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b8a      	ldr	r3, [pc, #552]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d910      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b87      	ldr	r3, [pc, #540]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 020f 	bic.w	r2, r3, #15
 80037be:	4985      	ldr	r1, [pc, #532]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b83      	ldr	r3, [pc, #524]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e184      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d908      	bls.n	8003806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037f4:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	4975      	ldr	r1, [pc, #468]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003802:	4313      	orrs	r3, r2
 8003804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d010      	beq.n	8003834 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800381e:	429a      	cmp	r2, r3
 8003820:	d908      	bls.n	8003834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	496a      	ldr	r1, [pc, #424]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003830:	4313      	orrs	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800384c:	429a      	cmp	r2, r3
 800384e:	d908      	bls.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	495e      	ldr	r1, [pc, #376]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 800385e:	4313      	orrs	r3, r2
 8003860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d010      	beq.n	8003890 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800387a:	429a      	cmp	r2, r3
 800387c:	d908      	bls.n	8003890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4953      	ldr	r1, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 800388c:	4313      	orrs	r3, r2
 800388e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d908      	bls.n	80038be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f023 020f 	bic.w	r2, r3, #15
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4947      	ldr	r1, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d055      	beq.n	8003976 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038e4:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d121      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0f6      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d115      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0ea      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0de      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d6      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f023 0207 	bic.w	r2, r3, #7
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4925      	ldr	r1, [pc, #148]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003942:	4313      	orrs	r3, r2
 8003944:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003946:	f7fd fc9d 	bl	8001284 <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394c:	e00a      	b.n	8003964 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394e:	f7fd fc99 	bl	8001284 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0be      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	429a      	cmp	r2, r3
 8003974:	d1eb      	bne.n	800394e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	429a      	cmp	r2, r3
 8003990:	d208      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f023 020f 	bic.w	r2, r3, #15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d214      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 020f 	bic.w	r2, r3, #15
 80039ba:	4906      	ldr	r1, [pc, #24]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e086      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
 80039d4:	52002000 	.word	0x52002000
 80039d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d208      	bcs.n	8003a0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039f8:	4b3c      	ldr	r3, [pc, #240]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4939      	ldr	r1, [pc, #228]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d208      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	492e      	ldr	r1, [pc, #184]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d208      	bcs.n	8003a66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4922      	ldr	r1, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d208      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4917      	ldr	r1, [pc, #92]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a94:	f000 f834 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4912      	ldr	r1, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x35c>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <HAL_RCC_ClockConfig+0x35c>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x360>)
 8003aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003acc:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x364>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x368>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fb8a 	bl	80011f0 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
 8003af0:	080084a8 	.word	0x080084a8
 8003af4:	24000004 	.word	0x24000004
 8003af8:	24000000 	.word	0x24000000
 8003afc:	24000008 	.word	0x24000008

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b06:	4bb3      	ldr	r3, [pc, #716]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0e:	2b18      	cmp	r3, #24
 8003b10:	f200 8155 	bhi.w	8003dbe <HAL_RCC_GetSysClockFreq+0x2be>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003dbf 	.word	0x08003dbf
 8003b24:	08003dbf 	.word	0x08003dbf
 8003b28:	08003dbf 	.word	0x08003dbf
 8003b2c:	08003dbf 	.word	0x08003dbf
 8003b30:	08003dbf 	.word	0x08003dbf
 8003b34:	08003dbf 	.word	0x08003dbf
 8003b38:	08003dbf 	.word	0x08003dbf
 8003b3c:	08003ba7 	.word	0x08003ba7
 8003b40:	08003dbf 	.word	0x08003dbf
 8003b44:	08003dbf 	.word	0x08003dbf
 8003b48:	08003dbf 	.word	0x08003dbf
 8003b4c:	08003dbf 	.word	0x08003dbf
 8003b50:	08003dbf 	.word	0x08003dbf
 8003b54:	08003dbf 	.word	0x08003dbf
 8003b58:	08003dbf 	.word	0x08003dbf
 8003b5c:	08003bad 	.word	0x08003bad
 8003b60:	08003dbf 	.word	0x08003dbf
 8003b64:	08003dbf 	.word	0x08003dbf
 8003b68:	08003dbf 	.word	0x08003dbf
 8003b6c:	08003dbf 	.word	0x08003dbf
 8003b70:	08003dbf 	.word	0x08003dbf
 8003b74:	08003dbf 	.word	0x08003dbf
 8003b78:	08003dbf 	.word	0x08003dbf
 8003b7c:	08003bb3 	.word	0x08003bb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b80:	4b94      	ldr	r3, [pc, #592]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b8c:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	4a90      	ldr	r2, [pc, #576]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b9e:	e111      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ba0:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ba2:	61bb      	str	r3, [r7, #24]
      break;
 8003ba4:	e10e      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ba8:	61bb      	str	r3, [r7, #24]
      break;
 8003baa:	e10b      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003bac:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bae:	61bb      	str	r3, [r7, #24]
      break;
 8003bb0:	e108      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bb2:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bc8:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003bd2:	4b80      	ldr	r3, [pc, #512]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	08db      	lsrs	r3, r3, #3
 8003bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80e1 	beq.w	8003db8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f000 8083 	beq.w	8003d04 <HAL_RCC_GetSysClockFreq+0x204>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f200 80a1 	bhi.w	8003d48 <HAL_RCC_GetSysClockFreq+0x248>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x114>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d056      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c12:	e099      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c20:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	4a6b      	ldr	r2, [pc, #428]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4a:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c7a:	e087      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003de8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ca2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cbe:	e065      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d02:	e043      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003df0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d46:	e021      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	0a5b      	lsrs	r3, r3, #9
 8003d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d96:	3301      	adds	r3, #1
 8003d98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db0:	ee17 3a90 	vmov	r3, s15
 8003db4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003db6:	e005      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
      break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dc0:	61bb      	str	r3, [r7, #24]
      break;
 8003dc2:	bf00      	nop
  }

  return sysclockfreq;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	03d09000 	.word	0x03d09000
 8003ddc:	003d0900 	.word	0x003d0900
 8003de0:	007a1200 	.word	0x007a1200
 8003de4:	46000000 	.word	0x46000000
 8003de8:	4c742400 	.word	0x4c742400
 8003dec:	4a742400 	.word	0x4a742400
 8003df0:	4af42400 	.word	0x4af42400

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003dfa:	f7ff fe81 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	490f      	ldr	r1, [pc, #60]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e0c:	5ccb      	ldrb	r3, [r1, r3]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	080084a8 	.word	0x080084a8
 8003e4c:	24000004 	.word	0x24000004
 8003e50:	24000000 	.word	0x24000000

08003e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e58:	f7ff ffcc 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	080084a8 	.word	0x080084a8

08003e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e84:	f7ff ffb6 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	080084a8 	.word	0x080084a8

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b0ca      	sub	sp, #296	; 0x128
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ed6:	d049      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee2:	d02f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee8:	d828      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eee:	d01a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef4:	d822      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d007      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f00:	e01c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f02:	4bb8      	ldr	r3, [pc, #736]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4ab7      	ldr	r2, [pc, #732]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f0e:	e01a      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f14:	3308      	adds	r3, #8
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fc8f 	bl	800583c <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f24:	e00f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	3328      	adds	r3, #40	; 0x28
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fd36 	bl	80059a0 <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f3a:	e004      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f4e:	4ba5      	ldr	r3, [pc, #660]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5c:	4aa1      	ldr	r2, [pc, #644]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6513      	str	r3, [r2, #80]	; 0x50
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003f78:	f04f 0900 	mov.w	r9, #0
 8003f7c:	ea58 0309 	orrs.w	r3, r8, r9
 8003f80:	d047      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d82a      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fa9 	.word	0x08003fa9
 8003f98:	08003fb7 	.word	0x08003fb7
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003feb 	.word	0x08003feb
 8003fa4:	08003feb 	.word	0x08003feb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa8:	4b8e      	ldr	r3, [pc, #568]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a8d      	ldr	r2, [pc, #564]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e01a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fba:	3308      	adds	r3, #8
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fc3c 	bl	800583c <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fca:	e00f      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	3328      	adds	r3, #40	; 0x28
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fce3 	bl	80059a0 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff4:	4b7b      	ldr	r3, [pc, #492]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	f023 0107 	bic.w	r1, r3, #7
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	4a78      	ldr	r2, [pc, #480]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6513      	str	r3, [r2, #80]	; 0x50
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800401e:	f04f 0b00 	mov.w	fp, #0
 8004022:	ea5a 030b 	orrs.w	r3, sl, fp
 8004026:	d04c      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d030      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d829      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800403a:	2bc0      	cmp	r3, #192	; 0xc0
 800403c:	d02d      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800403e:	2bc0      	cmp	r3, #192	; 0xc0
 8004040:	d825      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d018      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d821      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d007      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004052:	e01c      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a62      	ldr	r2, [pc, #392]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800405a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004060:	e01c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004066:	3308      	adds	r3, #8
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f001 fbe6 	bl	800583c <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004076:	e011      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fc8d 	bl	80059a0 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	4a4c      	ldr	r2, [pc, #304]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6513      	str	r3, [r2, #80]	; 0x50
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80040ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d053      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ee:	d035      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040f4:	d82e      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fa:	d031      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004100:	d828      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004106:	d01a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410c:	d822      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004116:	d007      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004118:	e01c      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411a:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4a31      	ldr	r2, [pc, #196]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004126:	e01c      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	3308      	adds	r3, #8
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fb83 	bl	800583c <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800413c:	e011      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004142:	3328      	adds	r3, #40	; 0x28
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fc2a 	bl	80059a0 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004152:	e006      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800415a:	e002      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800416a:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800417a:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004196:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d056      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b6:	d038      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80041b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041bc:	d831      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041c2:	d034      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80041c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041c8:	d82b      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ce:	d01d      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80041d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041d4:	d825      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80041da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041e0:	e01f      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4ba2      	ldr	r3, [pc, #648]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4aa1      	ldr	r2, [pc, #644]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041f4:	e01c      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fb1c 	bl	800583c <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800420a:	e011      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	3328      	adds	r3, #40	; 0x28
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fbc3 	bl	80059a0 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004238:	4b8e      	ldr	r3, [pc, #568]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004248:	4a8a      	ldr	r2, [pc, #552]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800424a:	430b      	orrs	r3, r1
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800426e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d03a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	2b30      	cmp	r3, #48	; 0x30
 8004280:	d01f      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d819      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004286:	2b20      	cmp	r3, #32
 8004288:	d00c      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800428a:	2b20      	cmp	r3, #32
 800428c:	d815      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d019      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004292:	2b10      	cmp	r3, #16
 8004294:	d111      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004296:	4b77      	ldr	r3, [pc, #476]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042a2:	e011      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a8:	3308      	adds	r3, #8
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 fac5 	bl	800583c <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042d0:	4b68      	ldr	r3, [pc, #416]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042e4:	e003      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80042fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004304:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d051      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004318:	d035      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800431a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431e:	d82e      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004324:	d031      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800432a:	d828      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800432c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004330:	d01a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d822      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004340:	d007      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004342:	e01c      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004350:	e01c      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	3308      	adds	r3, #8
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fa6e 	bl	800583c <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004366:	e011      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	3328      	adds	r3, #40	; 0x28
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fb15 	bl	80059a0 <RCCEx_PLL3_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800438a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004394:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6513      	str	r3, [r2, #80]	; 0x50
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80043be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043dc:	d033      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80043de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e2:	d82c      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043e8:	d02f      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80043ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ee:	d826      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043f4:	d02b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80043f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043fa:	d820      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004400:	d012      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004406:	d81a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	d115      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	3308      	adds	r3, #8
 8004418:	2101      	movs	r1, #1
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fa0e 	bl	800583c <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004426:	e015      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	3328      	adds	r3, #40	; 0x28
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f001 fab5 	bl	80059a0 <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800443c:	e00a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446a:	4a02      	ldr	r2, [pc, #8]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6513      	str	r3, [r2, #80]	; 0x50
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800448c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004496:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d055      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ac:	d033      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b2:	d82c      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d02f      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d826      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044c4:	d02b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80044c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ca:	d820      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d0:	d012      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80044d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d6:	d81a      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d022      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80044dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e0:	d115      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e6:	3308      	adds	r3, #8
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 f9a6 	bl	800583c <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044f6:	e015      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fc:	3328      	adds	r3, #40	; 0x28
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fa4d 	bl	80059a0 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004514:	e006      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004516:	bf00      	nop
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800452c:	4ba3      	ldr	r3, [pc, #652]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800453c:	4a9f      	ldr	r2, [pc, #636]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d037      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004576:	d00e      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457c:	d816      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004586:	d111      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004588:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	4a8b      	ldr	r2, [pc, #556]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	3308      	adds	r3, #8
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f94c 	bl	800583c <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045be:	4b7f      	ldr	r3, [pc, #508]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a7b      	ldr	r2, [pc, #492]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6513      	str	r3, [r2, #80]	; 0x50
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ec:	2300      	movs	r3, #0
 80045ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d039      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004602:	2b03      	cmp	r3, #3
 8004604:	d81c      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004649 	.word	0x08004649
 8004610:	0800461d 	.word	0x0800461d
 8004614:	0800462b 	.word	0x0800462b
 8004618:	08004649 	.word	0x08004649
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a66      	ldr	r2, [pc, #408]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004628:	e00f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462e:	3308      	adds	r3, #8
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f902 	bl	800583c <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004652:	4b5a      	ldr	r3, [pc, #360]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	f023 0103 	bic.w	r1, r3, #3
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	4a56      	ldr	r2, [pc, #344]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004662:	430b      	orrs	r3, r1
 8004664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800467c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004686:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	f000 809f 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004692:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4a      	ldr	r2, [pc, #296]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800469e:	f7fc fdf1 	bl	8001284 <HAL_GetTick>
 80046a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046a6:	e00b      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a8:	f7fc fdec 	bl	8001284 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b64      	cmp	r3, #100	; 0x64
 80046b6:	d903      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046be:	e005      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c0:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ed      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80046cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d179      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046e0:	4053      	eors	r3, r2
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d015      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a30      	ldr	r2, [pc, #192]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004702:	4b2e      	ldr	r3, [pc, #184]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a2d      	ldr	r2, [pc, #180]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800470e:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800471e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004722:	d118      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc fdae 	bl	8001284 <HAL_GetTick>
 8004728:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800472c:	e00d      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fc fda9 	bl	8001284 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004738:	1ad2      	subs	r2, r2, r3
 800473a:	f241 3388 	movw	r3, #5000	; 0x1388
 800473e:	429a      	cmp	r2, r3
 8004740:	d903      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004748:	e005      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0eb      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475a:	2b00      	cmp	r3, #0
 800475c:	d129      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004762:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476e:	d10e      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004780:	091a      	lsrs	r2, r3, #4
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004784:	4013      	ands	r3, r2
 8004786:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6113      	str	r3, [r2, #16]
 800478c:	e005      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004798:	6113      	str	r3, [r2, #16]
 800479a:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e00e      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80047ba:	e009      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80047bc:	58024400 	.word	0x58024400
 80047c0:	58024800 	.word	0x58024800
 80047c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 0301 	and.w	r3, r2, #1
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f000 8089 	beq.w	8004904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f8:	2b28      	cmp	r3, #40	; 0x28
 80047fa:	d86b      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	080048dd 	.word	0x080048dd
 8004808:	080048d5 	.word	0x080048d5
 800480c:	080048d5 	.word	0x080048d5
 8004810:	080048d5 	.word	0x080048d5
 8004814:	080048d5 	.word	0x080048d5
 8004818:	080048d5 	.word	0x080048d5
 800481c:	080048d5 	.word	0x080048d5
 8004820:	080048d5 	.word	0x080048d5
 8004824:	080048a9 	.word	0x080048a9
 8004828:	080048d5 	.word	0x080048d5
 800482c:	080048d5 	.word	0x080048d5
 8004830:	080048d5 	.word	0x080048d5
 8004834:	080048d5 	.word	0x080048d5
 8004838:	080048d5 	.word	0x080048d5
 800483c:	080048d5 	.word	0x080048d5
 8004840:	080048d5 	.word	0x080048d5
 8004844:	080048bf 	.word	0x080048bf
 8004848:	080048d5 	.word	0x080048d5
 800484c:	080048d5 	.word	0x080048d5
 8004850:	080048d5 	.word	0x080048d5
 8004854:	080048d5 	.word	0x080048d5
 8004858:	080048d5 	.word	0x080048d5
 800485c:	080048d5 	.word	0x080048d5
 8004860:	080048d5 	.word	0x080048d5
 8004864:	080048dd 	.word	0x080048dd
 8004868:	080048d5 	.word	0x080048d5
 800486c:	080048d5 	.word	0x080048d5
 8004870:	080048d5 	.word	0x080048d5
 8004874:	080048d5 	.word	0x080048d5
 8004878:	080048d5 	.word	0x080048d5
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048d5 	.word	0x080048d5
 8004884:	080048dd 	.word	0x080048dd
 8004888:	080048d5 	.word	0x080048d5
 800488c:	080048d5 	.word	0x080048d5
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048d5 	.word	0x080048d5
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048dd 	.word	0x080048dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	3308      	adds	r3, #8
 80048ae:	2101      	movs	r1, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 ffc3 	bl	800583c <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048bc:	e00f      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c2:	3328      	adds	r3, #40	; 0x28
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 f86a 	bl	80059a0 <RCCEx_PLL3_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048d2:	e004      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80048dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048e6:	4bbf      	ldr	r3, [pc, #764]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	4abb      	ldr	r2, [pc, #748]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6553      	str	r3, [r2, #84]	; 0x54
 80048fa:	e003      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004900:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f002 0302 	and.w	r3, r2, #2
 8004910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800491a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d041      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	2b05      	cmp	r3, #5
 800492c:	d824      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004981 	.word	0x08004981
 8004938:	0800494d 	.word	0x0800494d
 800493c:	08004963 	.word	0x08004963
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	3308      	adds	r3, #8
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f000 ff71 	bl	800583c <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	3328      	adds	r3, #40	; 0x28
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f818 	bl	80059a0 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800498a:	4b96      	ldr	r3, [pc, #600]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f023 0107 	bic.w	r1, r3, #7
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004998:	4a92      	ldr	r2, [pc, #584]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800499a:	430b      	orrs	r3, r1
 800499c:	6553      	str	r3, [r2, #84]	; 0x54
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f002 0304 	and.w	r3, r2, #4
 80049b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d044      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d825      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a29 	.word	0x08004a29
 80049e0:	080049f5 	.word	0x080049f5
 80049e4:	08004a0b 	.word	0x08004a0b
 80049e8:	08004a29 	.word	0x08004a29
 80049ec:	08004a29 	.word	0x08004a29
 80049f0:	08004a29 	.word	0x08004a29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	3308      	adds	r3, #8
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 ff1d 	bl	800583c <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a08:	e00f      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	3328      	adds	r3, #40	; 0x28
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 ffc4 	bl	80059a0 <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a1e:	e004      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a32:	4b6c      	ldr	r3, [pc, #432]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	f023 0107 	bic.w	r1, r3, #7
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	4a68      	ldr	r2, [pc, #416]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
 8004a48:	e003      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f002 0320 	and.w	r3, r2, #32
 8004a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d055      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d033      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d82c      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d02f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d826      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a9c:	d820      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d012      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d81a      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d022      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d115      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab8:	3308      	adds	r3, #8
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 febd 	bl	800583c <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e015      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ace:	3328      	adds	r3, #40	; 0x28
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff64 	bl	80059a0 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ade:	e00a      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae6:	e006      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004aec:	bf00      	nop
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6553      	str	r3, [r2, #84]	; 0x54
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d058      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b4a:	d033      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b50:	d82c      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d02f      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d826      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b62:	d02b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b68:	d820      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	d012      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d81a      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d022      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d115      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	3308      	adds	r3, #8
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fe57 	bl	800583c <RCCEx_PLL2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b94:	e015      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9a:	3328      	adds	r3, #40	; 0x28
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fefe 	bl	80059a0 <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bb4:	bf00      	nop
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bda:	4a02      	ldr	r2, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6593      	str	r3, [r2, #88]	; 0x58
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c00:	2300      	movs	r3, #0
 8004c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	d055      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c1c:	d033      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004c1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c22:	d82c      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c28:	d02f      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d826      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c34:	d02b      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004c36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c3a:	d820      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d012      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c46:	d81a      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d022      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c50:	d115      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c56:	3308      	adds	r3, #8
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fdee 	bl	800583c <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c66:	e015      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6c:	3328      	adds	r3, #40	; 0x28
 8004c6e:	2102      	movs	r1, #2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fe95 	bl	80059a0 <RCCEx_PLL3_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c86:	bf00      	nop
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c9c:	4ba1      	ldr	r3, [pc, #644]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cac:	4a9d      	ldr	r2, [pc, #628]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f002 0308 	and.w	r3, r2, #8
 8004cc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d01e      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cee:	3328      	adds	r3, #40	; 0x28
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fe54 	bl	80059a0 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d04:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d14:	4a83      	ldr	r2, [pc, #524]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	f002 0310 	and.w	r3, r2, #16
 8004d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d34:	460b      	mov	r3, r1
 8004d36:	4313      	orrs	r3, r2
 8004d38:	d01e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4c:	3328      	adds	r3, #40	; 0x28
 8004d4e:	2102      	movs	r1, #2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fe25 	bl	80059a0 <RCCEx_PLL3_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d62:	4b70      	ldr	r3, [pc, #448]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d72:	4a6c      	ldr	r2, [pc, #432]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	d03e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da4:	d022      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004daa:	d81b      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d00b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004db6:	e015      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fd3b 	bl	800583c <RCCEx_PLL2_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004dcc:	e00f      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	3328      	adds	r3, #40	; 0x28
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fde2 	bl	80059a0 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df6:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e06:	4a47      	ldr	r2, [pc, #284]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e24:	2300      	movs	r3, #0
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e3e:	d01f      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e44:	d818      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e50:	d007      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e52:	e011      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e54:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e60:	e00f      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e66:	3328      	adds	r3, #40	; 0x28
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fd98 	bl	80059a0 <RCCEx_PLL3_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e8a:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6553      	str	r3, [r2, #84]	; 0x54
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004eb8:	2300      	movs	r3, #0
 8004eba:	677b      	str	r3, [r7, #116]	; 0x74
 8004ebc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d034      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d007      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ed6:	e011      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ee4:	e00e      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eea:	3308      	adds	r3, #8
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fca4 	bl	800583c <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	4a02      	ldr	r2, [pc, #8]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f20:	e006      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3e:	2300      	movs	r3, #0
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d00c      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f50:	3328      	adds	r3, #40	; 0x28
 8004f52:	2102      	movs	r1, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fd23 	bl	80059a0 <RCCEx_PLL3_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
 8004f74:	2300      	movs	r3, #0
 8004f76:	667b      	str	r3, [r7, #100]	; 0x64
 8004f78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d038      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8e:	d018      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f94:	d811      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9a:	d014      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d80b      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d011      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fac:	4bc3      	ldr	r3, [pc, #780]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4ac2      	ldr	r2, [pc, #776]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fc0:	e004      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e002      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fd4:	4bb9      	ldr	r3, [pc, #740]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe4:	4ab5      	ldr	r2, [pc, #724]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6553      	str	r3, [r2, #84]	; 0x54
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005000:	65bb      	str	r3, [r7, #88]	; 0x58
 8005002:	2300      	movs	r3, #0
 8005004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005006:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800500a:	460b      	mov	r3, r1
 800500c:	4313      	orrs	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005010:	4baa      	ldr	r3, [pc, #680]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	4aa7      	ldr	r2, [pc, #668]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005030:	653b      	str	r3, [r7, #80]	; 0x50
 8005032:	2300      	movs	r3, #0
 8005034:	657b      	str	r3, [r7, #84]	; 0x54
 8005036:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005040:	4b9e      	ldr	r3, [pc, #632]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005050:	4a9a      	ldr	r2, [pc, #616]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005052:	430b      	orrs	r3, r1
 8005054:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	2300      	movs	r3, #0
 8005066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005068:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005072:	4b92      	ldr	r3, [pc, #584]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005080:	4a8e      	ldr	r2, [pc, #568]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
 8005094:	2300      	movs	r3, #0
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
 8005098:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800509c:	460b      	mov	r3, r1
 800509e:	4313      	orrs	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050a2:	4b86      	ldr	r3, [pc, #536]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a85      	ldr	r2, [pc, #532]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	4b83      	ldr	r3, [pc, #524]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b0:	6919      	ldr	r1, [r3, #16]
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050ba:	4a80      	ldr	r2, [pc, #512]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80050cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ce:	2300      	movs	r3, #0
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050dc:	4b77      	ldr	r3, [pc, #476]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	4a74      	ldr	r2, [pc, #464]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
 80050fe:	2300      	movs	r3, #0
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800510c:	4b6b      	ldr	r3, [pc, #428]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511c:	4a67      	ldr	r2, [pc, #412]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800511e:	430b      	orrs	r3, r1
 8005120:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	2100      	movs	r1, #0
 800512c:	62b9      	str	r1, [r7, #40]	; 0x28
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005134:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005138:	460b      	mov	r3, r1
 800513a:	4313      	orrs	r3, r2
 800513c:	d011      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005142:	3308      	adds	r3, #8
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb78 	bl	800583c <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	2100      	movs	r1, #0
 800516c:	6239      	str	r1, [r7, #32]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
 8005174:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005178:	460b      	mov	r3, r1
 800517a:	4313      	orrs	r3, r2
 800517c:	d011      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005182:	3308      	adds	r3, #8
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fb58 	bl	800583c <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800519e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	2100      	movs	r1, #0
 80051ac:	61b9      	str	r1, [r7, #24]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051b8:	460b      	mov	r3, r1
 80051ba:	4313      	orrs	r3, r2
 80051bc:	d011      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	3308      	adds	r3, #8
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb38 	bl	800583c <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80051d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	2100      	movs	r1, #0
 80051ec:	6139      	str	r1, [r7, #16]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d011      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	3328      	adds	r3, #40	; 0x28
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fbca 	bl	80059a0 <RCCEx_PLL3_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	2100      	movs	r1, #0
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d011      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005242:	3328      	adds	r3, #40	; 0x28
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fbaa 	bl	80059a0 <RCCEx_PLL3_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	2100      	movs	r1, #0
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	d011      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005282:	3328      	adds	r3, #40	; 0x28
 8005284:	2102      	movs	r1, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fb8a 	bl	80059a0 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80052a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052bc:	58024400 	.word	0x58024400

080052c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052c4:	f7fe fd96 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4904      	ldr	r1, [pc, #16]	; (80052e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	58024400 	.word	0x58024400
 80052e8:	080084a8 	.word	0x080084a8

080052ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052f4:	4ba1      	ldr	r3, [pc, #644]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052fe:	4b9f      	ldr	r3, [pc, #636]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	0b1b      	lsrs	r3, r3, #12
 8005304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005308:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800530a:	4b9c      	ldr	r3, [pc, #624]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005316:	4b99      	ldr	r3, [pc, #612]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	08db      	lsrs	r3, r3, #3
 800531c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8111 	beq.w	800555c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b02      	cmp	r3, #2
 800533e:	f000 8083 	beq.w	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b02      	cmp	r3, #2
 8005346:	f200 80a1 	bhi.w	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d056      	beq.n	8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005356:	e099      	b.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005358:	4b88      	ldr	r3, [pc, #544]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02d      	beq.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005364:	4b85      	ldr	r3, [pc, #532]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	08db      	lsrs	r3, r3, #3
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	4a84      	ldr	r2, [pc, #528]	; (8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
 8005374:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b7b      	ldr	r3, [pc, #492]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053be:	e087      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005588 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b6a      	ldr	r3, [pc, #424]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005402:	e065      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800558c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005446:	e043      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b48      	ldr	r3, [pc, #288]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a03 	vldr	s12, [r7, #12]
 800546e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548a:	e021      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800558c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800549a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549e:	4b37      	ldr	r3, [pc, #220]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054d0:	4b2a      	ldr	r3, [pc, #168]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	0a5b      	lsrs	r3, r3, #9
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f6:	ee17 2a90 	vmov	r2, s15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054fe:	4b1f      	ldr	r3, [pc, #124]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005518:	edd7 6a07 	vldr	s13, [r7, #28]
 800551c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005524:	ee17 2a90 	vmov	r2, s15
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800552c:	4b13      	ldr	r3, [pc, #76]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005546:	edd7 6a07 	vldr	s13, [r7, #28]
 800554a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800554e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005552:	ee17 2a90 	vmov	r2, s15
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800555a:	e008      	b.n	800556e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
}
 800556e:	bf00      	nop
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
 8005580:	03d09000 	.word	0x03d09000
 8005584:	46000000 	.word	0x46000000
 8005588:	4c742400 	.word	0x4c742400
 800558c:	4a742400 	.word	0x4a742400
 8005590:	4af42400 	.word	0x4af42400

08005594 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559c:	4ba1      	ldr	r3, [pc, #644]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055a6:	4b9f      	ldr	r3, [pc, #636]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	0d1b      	lsrs	r3, r3, #20
 80055ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055b2:	4b9c      	ldr	r3, [pc, #624]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055be:	4b99      	ldr	r3, [pc, #612]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8111 	beq.w	8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f200 80a1 	bhi.w	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d056      	beq.n	80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055fe:	e099      	b.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005600:	4b88      	ldr	r3, [pc, #544]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800560c:	4b85      	ldr	r3, [pc, #532]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	4a84      	ldr	r2, [pc, #528]	; (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005666:	e087      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a03 	vldr	s12, [r7, #12]
 800568e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056aa:	e065      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b59      	ldr	r3, [pc, #356]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ee:	e043      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b48      	ldr	r3, [pc, #288]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a45 	vldr	s11, [pc, #276]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005732:	e021      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b37      	ldr	r3, [pc, #220]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a03 	vldr	s12, [r7, #12]
 800575a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005776:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005778:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005792:	edd7 6a07 	vldr	s13, [r7, #28]
 8005796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579e:	ee17 2a90 	vmov	r2, s15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80057a6:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	0c1b      	lsrs	r3, r3, #16
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057cc:	ee17 2a90 	vmov	r2, s15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005802:	e008      	b.n	8005816 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
}
 8005816:	bf00      	nop
 8005818:	3724      	adds	r7, #36	; 0x24
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	03d09000 	.word	0x03d09000
 800582c:	46000000 	.word	0x46000000
 8005830:	4c742400 	.word	0x4c742400
 8005834:	4a742400 	.word	0x4a742400
 8005838:	4af42400 	.word	0x4af42400

0800583c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800584a:	4b53      	ldr	r3, [pc, #332]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b03      	cmp	r3, #3
 8005854:	d101      	bne.n	800585a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e099      	b.n	800598e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800585a:	4b4f      	ldr	r3, [pc, #316]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4e      	ldr	r2, [pc, #312]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fb fd0d 	bl	8001284 <HAL_GetTick>
 800586a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800586c:	e008      	b.n	8005880 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800586e:	f7fb fd09 	bl	8001284 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e086      	b.n	800598e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005880:	4b45      	ldr	r3, [pc, #276]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	031b      	lsls	r3, r3, #12
 800589a:	493f      	ldr	r1, [pc, #252]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	628b      	str	r3, [r1, #40]	; 0x28
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	025b      	lsls	r3, r3, #9
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d0:	4931      	ldr	r1, [pc, #196]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	492d      	ldr	r1, [pc, #180]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058e8:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	f023 0220 	bic.w	r2, r3, #32
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	4928      	ldr	r1, [pc, #160]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058fa:	4b27      	ldr	r3, [pc, #156]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a26      	ldr	r2, [pc, #152]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <RCCEx_PLL2_Config+0x160>)
 800590c:	4013      	ands	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	69d2      	ldr	r2, [r2, #28]
 8005912:	00d2      	lsls	r2, r2, #3
 8005914:	4920      	ldr	r1, [pc, #128]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f043 0310 	orr.w	r3, r3, #16
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a19      	ldr	r2, [pc, #100]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005938:	e00f      	b.n	800595a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800594c:	e005      	b.n	800595a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a11      	ldr	r2, [pc, #68]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005966:	f7fb fc8d 	bl	8001284 <HAL_GetTick>
 800596a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800596c:	e008      	b.n	8005980 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800596e:	f7fb fc89 	bl	8001284 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	58024400 	.word	0x58024400
 800599c:	ffff0007 	.word	0xffff0007

080059a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ae:	4b53      	ldr	r3, [pc, #332]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d101      	bne.n	80059be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e099      	b.n	8005af2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059be:	4b4f      	ldr	r3, [pc, #316]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a4e      	ldr	r2, [pc, #312]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ca:	f7fb fc5b 	bl	8001284 <HAL_GetTick>
 80059ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059d0:	e008      	b.n	80059e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059d2:	f7fb fc57 	bl	8001284 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e086      	b.n	8005af2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f0      	bne.n	80059d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059f0:	4b42      	ldr	r3, [pc, #264]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	051b      	lsls	r3, r3, #20
 80059fe:	493f      	ldr	r1, [pc, #252]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	628b      	str	r3, [r1, #40]	; 0x28
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	025b      	lsls	r3, r3, #9
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a34:	4931      	ldr	r1, [pc, #196]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a3a:	4b30      	ldr	r3, [pc, #192]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	492d      	ldr	r1, [pc, #180]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a4c:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	4928      	ldr	r1, [pc, #160]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a5e:	4b27      	ldr	r3, [pc, #156]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a26      	ldr	r2, [pc, #152]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <RCCEx_PLL3_Config+0x160>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	69d2      	ldr	r2, [r2, #28]
 8005a76:	00d2      	lsls	r2, r2, #3
 8005a78:	4920      	ldr	r1, [pc, #128]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a7e:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a19      	ldr	r2, [pc, #100]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a9c:	e00f      	b.n	8005abe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005aa4:	4b15      	ldr	r3, [pc, #84]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ab0:	e005      	b.n	8005abe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	4a11      	ldr	r2, [pc, #68]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005abc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aca:	f7fb fbdb 	bl	8001284 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ad0:	e008      	b.n	8005ae4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ad2:	f7fb fbd7 	bl	8001284 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e006      	b.n	8005af2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
 8005b00:	ffff0007 	.word	0xffff0007

08005b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e042      	b.n	8005b9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d106      	bne.n	8005b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7fb f943 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2224      	movs	r2, #36	; 0x24
 8005b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 fa84 	bl	800705c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fd19 	bl	800658c <UART_SetConfig>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e01b      	b.n	8005b9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fb03 	bl	80071a0 <UART_CheckIdleState>
 8005b9a:	4603      	mov	r3, r0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e031      	b.n	8005c1a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2224      	movs	r2, #36	; 0x24
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0201 	bic.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb f9a6 	bl	8000f38 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b08a      	sub	sp, #40	; 0x28
 8005c26:	af02      	add	r7, sp, #8
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d17b      	bne.n	8005d34 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_UART_Transmit+0x26>
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e074      	b.n	8005d36 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2221      	movs	r2, #33	; 0x21
 8005c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c5c:	f7fb fb12 	bl	8001284 <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d108      	bne.n	8005c8e <HAL_UART_Transmit+0x6c>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e003      	b.n	8005c96 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c96:	e030      	b.n	8005cfa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f001 fb26 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e03d      	b.n	8005d36 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e007      	b.n	8005ce8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1c8      	bne.n	8005c98 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 faef 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e006      	b.n	8005d36 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d137      	bne.n	8005dc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_UART_Receive_IT+0x24>
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e030      	b.n	8005dca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <HAL_UART_Receive_IT+0x94>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d01f      	beq.n	8005db8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d018      	beq.n	8005db8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f001 fb06 	bl	80073d0 <UART_Start_Receive_IT>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	e000      	b.n	8005dca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3728      	adds	r7, #40	; 0x28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	58000c00 	.word	0x58000c00

08005dd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b0ba      	sub	sp, #232	; 0xe8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e02:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e06:	4013      	ands	r3, r2
 8005e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11b      	bne.n	8005e4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d015      	beq.n	8005e4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8377 	beq.w	8006530 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      }
      return;
 8005e4a:	e371      	b.n	8006530 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8123 	beq.w	800609c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e5a:	4b8d      	ldr	r3, [pc, #564]	; (8006090 <HAL_UART_IRQHandler+0x2b8>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e66:	4b8b      	ldr	r3, [pc, #556]	; (8006094 <HAL_UART_IRQHandler+0x2bc>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8116 	beq.w	800609c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xc8>
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d011      	beq.n	8005ed0 <HAL_UART_IRQHandler+0xf8>
 8005eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d011      	beq.n	8005f00 <HAL_UART_IRQHandler+0x128>
 8005edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2204      	movs	r2, #4
 8005eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d017      	beq.n	8005f3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f1c:	4b5c      	ldr	r3, [pc, #368]	; (8006090 <HAL_UART_IRQHandler+0x2b8>)
 8005f1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f32:	f043 0208 	orr.w	r2, r3, #8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d012      	beq.n	8005f6e <HAL_UART_IRQHandler+0x196>
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	f043 0220 	orr.w	r2, r3, #32
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 82dd 	beq.w	8006534 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d013      	beq.n	8005fae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b40      	cmp	r3, #64	; 0x40
 8005fc4:	d005      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d054      	beq.n	800607c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fb1e 	bl	8007614 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d146      	bne.n	8006074 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800601e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1d9      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006038:	2b00      	cmp	r3, #0
 800603a:	d017      	beq.n	800606c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006042:	4a15      	ldr	r2, [pc, #84]	; (8006098 <HAL_UART_IRQHandler+0x2c0>)
 8006044:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604c:	4618      	mov	r0, r3
 800604e:	f7fb fdbf 	bl	8001bd0 <HAL_DMA_Abort_IT>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d019      	beq.n	800608c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006066:	4610      	mov	r0, r2
 8006068:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606a:	e00f      	b.n	800608c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa77 	bl	8006560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	e00b      	b.n	800608c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa73 	bl	8006560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607a:	e007      	b.n	800608c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa6f 	bl	8006560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800608a:	e253      	b.n	8006534 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	bf00      	nop
    return;
 800608e:	e251      	b.n	8006534 <HAL_UART_IRQHandler+0x75c>
 8006090:	10000001 	.word	0x10000001
 8006094:	04000120 	.word	0x04000120
 8006098:	080076e1 	.word	0x080076e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 81e7 	bne.w	8006474 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 81e0 	beq.w	8006474 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 81d9 	beq.w	8006474 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	f040 8151 	bne.w	800637c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a96      	ldr	r2, [pc, #600]	; (800633c <HAL_UART_IRQHandler+0x564>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d068      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a93      	ldr	r2, [pc, #588]	; (8006340 <HAL_UART_IRQHandler+0x568>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d061      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a91      	ldr	r2, [pc, #580]	; (8006344 <HAL_UART_IRQHandler+0x56c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d05a      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a8e      	ldr	r2, [pc, #568]	; (8006348 <HAL_UART_IRQHandler+0x570>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d053      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a8c      	ldr	r2, [pc, #560]	; (800634c <HAL_UART_IRQHandler+0x574>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d04c      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a89      	ldr	r2, [pc, #548]	; (8006350 <HAL_UART_IRQHandler+0x578>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d045      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a87      	ldr	r2, [pc, #540]	; (8006354 <HAL_UART_IRQHandler+0x57c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d03e      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a84      	ldr	r2, [pc, #528]	; (8006358 <HAL_UART_IRQHandler+0x580>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d037      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a82      	ldr	r2, [pc, #520]	; (800635c <HAL_UART_IRQHandler+0x584>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d030      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a7f      	ldr	r2, [pc, #508]	; (8006360 <HAL_UART_IRQHandler+0x588>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d029      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7d      	ldr	r2, [pc, #500]	; (8006364 <HAL_UART_IRQHandler+0x58c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7a      	ldr	r2, [pc, #488]	; (8006368 <HAL_UART_IRQHandler+0x590>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01b      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a78      	ldr	r2, [pc, #480]	; (800636c <HAL_UART_IRQHandler+0x594>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d014      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a75      	ldr	r2, [pc, #468]	; (8006370 <HAL_UART_IRQHandler+0x598>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00d      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a73      	ldr	r2, [pc, #460]	; (8006374 <HAL_UART_IRQHandler+0x59c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d006      	beq.n	80061ba <HAL_UART_IRQHandler+0x3e2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a70      	ldr	r2, [pc, #448]	; (8006378 <HAL_UART_IRQHandler+0x5a0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d106      	bne.n	80061c8 <HAL_UART_IRQHandler+0x3f0>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	e005      	b.n	80061d4 <HAL_UART_IRQHandler+0x3fc>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 81ab 	beq.w	8006538 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ec:	429a      	cmp	r2, r3
 80061ee:	f080 81a3 	bcs.w	8006538 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006208:	f000 8087 	beq.w	800631a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800623a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800624e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1da      	bne.n	800620c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800627a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800627e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800628c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e1      	bne.n	8006256 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e3      	bne.n	8006292 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e8:	f023 0310 	bic.w	r3, r3, #16
 80062ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80062fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e4      	bne.n	80062d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006314:	4618      	mov	r0, r3
 8006316:	f7fb f93d 	bl	8001594 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800632c:	b29b      	uxth	r3, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f91d 	bl	8006574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800633a:	e0fd      	b.n	8006538 <HAL_UART_IRQHandler+0x760>
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006388:	b29b      	uxth	r3, r3
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80cf 	beq.w	800653c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800639e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80ca 	beq.w	800653c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e4      	bne.n	80063a8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	623b      	str	r3, [r7, #32]
   return(result);
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	4b55      	ldr	r3, [pc, #340]	; (8006548 <HAL_UART_IRQHandler+0x770>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006402:	633a      	str	r2, [r7, #48]	; 0x30
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e3      	bne.n	80063de <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	60fb      	str	r3, [r7, #12]
   return(result);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0310 	bic.w	r3, r3, #16
 800643e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	69b9      	ldr	r1, [r7, #24]
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	617b      	str	r3, [r7, #20]
   return(result);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e4      	bne.n	800642a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f881 	bl	8006574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006472:	e063      	b.n	800653c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <HAL_UART_IRQHandler+0x6c6>
 8006480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fe80 	bl	800819c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800649c:	e051      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03a      	beq.n	8006540 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
    }
    return;
 80064d2:	e035      	b.n	8006540 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <HAL_UART_IRQHandler+0x71c>
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f90d 	bl	800770c <UART_EndTransmit_IT>
    return;
 80064f2:	e026      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_UART_IRQHandler+0x73c>
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fe59 	bl	80081c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006512:	e016      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <HAL_UART_IRQHandler+0x76a>
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006524:	2b00      	cmp	r3, #0
 8006526:	da0c      	bge.n	8006542 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 fe41 	bl	80081b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800652e:	e008      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
      return;
 8006530:	bf00      	nop
 8006532:	e006      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
    return;
 8006534:	bf00      	nop
 8006536:	e004      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
      return;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
      return;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <HAL_UART_IRQHandler+0x76a>
    return;
 8006540:	bf00      	nop
  }
}
 8006542:	37e8      	adds	r7, #232	; 0xe8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	effffffe 	.word	0xeffffffe

0800654c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800658c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006590:	b092      	sub	sp, #72	; 0x48
 8006592:	af00      	add	r7, sp, #0
 8006594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4bbe      	ldr	r3, [pc, #760]	; (80068b4 <UART_SetConfig+0x328>)
 80065bc:	4013      	ands	r3, r2
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4ab3      	ldr	r2, [pc, #716]	; (80068b8 <UART_SetConfig+0x32c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f4:	4313      	orrs	r3, r2
 80065f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	4baf      	ldr	r3, [pc, #700]	; (80068bc <UART_SetConfig+0x330>)
 8006600:	4013      	ands	r3, r2
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006608:	430b      	orrs	r3, r1
 800660a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f023 010f 	bic.w	r1, r3, #15
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4aa6      	ldr	r2, [pc, #664]	; (80068c0 <UART_SetConfig+0x334>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d177      	bne.n	800671c <UART_SetConfig+0x190>
 800662c:	4ba5      	ldr	r3, [pc, #660]	; (80068c4 <UART_SetConfig+0x338>)
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006634:	2b28      	cmp	r3, #40	; 0x28
 8006636:	d86d      	bhi.n	8006714 <UART_SetConfig+0x188>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0xb4>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	080066e5 	.word	0x080066e5
 8006644:	08006715 	.word	0x08006715
 8006648:	08006715 	.word	0x08006715
 800664c:	08006715 	.word	0x08006715
 8006650:	08006715 	.word	0x08006715
 8006654:	08006715 	.word	0x08006715
 8006658:	08006715 	.word	0x08006715
 800665c:	08006715 	.word	0x08006715
 8006660:	080066ed 	.word	0x080066ed
 8006664:	08006715 	.word	0x08006715
 8006668:	08006715 	.word	0x08006715
 800666c:	08006715 	.word	0x08006715
 8006670:	08006715 	.word	0x08006715
 8006674:	08006715 	.word	0x08006715
 8006678:	08006715 	.word	0x08006715
 800667c:	08006715 	.word	0x08006715
 8006680:	080066f5 	.word	0x080066f5
 8006684:	08006715 	.word	0x08006715
 8006688:	08006715 	.word	0x08006715
 800668c:	08006715 	.word	0x08006715
 8006690:	08006715 	.word	0x08006715
 8006694:	08006715 	.word	0x08006715
 8006698:	08006715 	.word	0x08006715
 800669c:	08006715 	.word	0x08006715
 80066a0:	080066fd 	.word	0x080066fd
 80066a4:	08006715 	.word	0x08006715
 80066a8:	08006715 	.word	0x08006715
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006715 	.word	0x08006715
 80066b4:	08006715 	.word	0x08006715
 80066b8:	08006715 	.word	0x08006715
 80066bc:	08006715 	.word	0x08006715
 80066c0:	08006705 	.word	0x08006705
 80066c4:	08006715 	.word	0x08006715
 80066c8:	08006715 	.word	0x08006715
 80066cc:	08006715 	.word	0x08006715
 80066d0:	08006715 	.word	0x08006715
 80066d4:	08006715 	.word	0x08006715
 80066d8:	08006715 	.word	0x08006715
 80066dc:	08006715 	.word	0x08006715
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e222      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80066ec:	2304      	movs	r3, #4
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f2:	e21e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80066f4:	2308      	movs	r3, #8
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fa:	e21a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80066fc:	2310      	movs	r3, #16
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e216      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006704:	2320      	movs	r3, #32
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e212      	b.n	8006b32 <UART_SetConfig+0x5a6>
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e20e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e20a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a69      	ldr	r2, [pc, #420]	; (80068c8 <UART_SetConfig+0x33c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d130      	bne.n	8006788 <UART_SetConfig+0x1fc>
 8006726:	4b67      	ldr	r3, [pc, #412]	; (80068c4 <UART_SetConfig+0x338>)
 8006728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	2b05      	cmp	r3, #5
 8006730:	d826      	bhi.n	8006780 <UART_SetConfig+0x1f4>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0x1ac>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	08006751 	.word	0x08006751
 800673c:	08006759 	.word	0x08006759
 8006740:	08006761 	.word	0x08006761
 8006744:	08006769 	.word	0x08006769
 8006748:	08006771 	.word	0x08006771
 800674c:	08006779 	.word	0x08006779
 8006750:	2300      	movs	r3, #0
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e1ec      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e1e8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e1e4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e1e0      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006770:	2320      	movs	r3, #32
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e1dc      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006778:	2340      	movs	r3, #64	; 0x40
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e1d8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e1d4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a4f      	ldr	r2, [pc, #316]	; (80068cc <UART_SetConfig+0x340>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d130      	bne.n	80067f4 <UART_SetConfig+0x268>
 8006792:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <UART_SetConfig+0x338>)
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b05      	cmp	r3, #5
 800679c:	d826      	bhi.n	80067ec <UART_SetConfig+0x260>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x218>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067bd 	.word	0x080067bd
 80067a8:	080067c5 	.word	0x080067c5
 80067ac:	080067cd 	.word	0x080067cd
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e1b6      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e1b2      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e1ae      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e1aa      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067dc:	2320      	movs	r3, #32
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e1a6      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e1a2      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f2:	e19e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a35      	ldr	r2, [pc, #212]	; (80068d0 <UART_SetConfig+0x344>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d130      	bne.n	8006860 <UART_SetConfig+0x2d4>
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <UART_SetConfig+0x338>)
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b05      	cmp	r3, #5
 8006808:	d826      	bhi.n	8006858 <UART_SetConfig+0x2cc>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x284>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006829 	.word	0x08006829
 8006814:	08006831 	.word	0x08006831
 8006818:	08006839 	.word	0x08006839
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e180      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e17c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e178      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e174      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006848:	2320      	movs	r3, #32
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e170      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006856:	e16c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685e:	e168      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <UART_SetConfig+0x348>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d142      	bne.n	80068f0 <UART_SetConfig+0x364>
 800686a:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <UART_SetConfig+0x338>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b05      	cmp	r3, #5
 8006874:	d838      	bhi.n	80068e8 <UART_SetConfig+0x35c>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x2f0>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006895 	.word	0x08006895
 8006880:	0800689d 	.word	0x0800689d
 8006884:	080068a5 	.word	0x080068a5
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068e1 	.word	0x080068e1
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e14a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e146      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e142      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e13e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068b4:	cfff69f3 	.word	0xcfff69f3
 80068b8:	58000c00 	.word	0x58000c00
 80068bc:	11fff4ff 	.word	0x11fff4ff
 80068c0:	40011000 	.word	0x40011000
 80068c4:	58024400 	.word	0x58024400
 80068c8:	40004400 	.word	0x40004400
 80068cc:	40004800 	.word	0x40004800
 80068d0:	40004c00 	.word	0x40004c00
 80068d4:	40005000 	.word	0x40005000
 80068d8:	2320      	movs	r3, #32
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e128      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068e0:	2340      	movs	r3, #64	; 0x40
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e6:	e124      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ee:	e120      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4acb      	ldr	r2, [pc, #812]	; (8006c24 <UART_SetConfig+0x698>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d176      	bne.n	80069e8 <UART_SetConfig+0x45c>
 80068fa:	4bcb      	ldr	r3, [pc, #812]	; (8006c28 <UART_SetConfig+0x69c>)
 80068fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006902:	2b28      	cmp	r3, #40	; 0x28
 8006904:	d86c      	bhi.n	80069e0 <UART_SetConfig+0x454>
 8006906:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0x380>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	080069b1 	.word	0x080069b1
 8006910:	080069e1 	.word	0x080069e1
 8006914:	080069e1 	.word	0x080069e1
 8006918:	080069e1 	.word	0x080069e1
 800691c:	080069e1 	.word	0x080069e1
 8006920:	080069e1 	.word	0x080069e1
 8006924:	080069e1 	.word	0x080069e1
 8006928:	080069e1 	.word	0x080069e1
 800692c:	080069b9 	.word	0x080069b9
 8006930:	080069e1 	.word	0x080069e1
 8006934:	080069e1 	.word	0x080069e1
 8006938:	080069e1 	.word	0x080069e1
 800693c:	080069e1 	.word	0x080069e1
 8006940:	080069e1 	.word	0x080069e1
 8006944:	080069e1 	.word	0x080069e1
 8006948:	080069e1 	.word	0x080069e1
 800694c:	080069c1 	.word	0x080069c1
 8006950:	080069e1 	.word	0x080069e1
 8006954:	080069e1 	.word	0x080069e1
 8006958:	080069e1 	.word	0x080069e1
 800695c:	080069e1 	.word	0x080069e1
 8006960:	080069e1 	.word	0x080069e1
 8006964:	080069e1 	.word	0x080069e1
 8006968:	080069e1 	.word	0x080069e1
 800696c:	080069c9 	.word	0x080069c9
 8006970:	080069e1 	.word	0x080069e1
 8006974:	080069e1 	.word	0x080069e1
 8006978:	080069e1 	.word	0x080069e1
 800697c:	080069e1 	.word	0x080069e1
 8006980:	080069e1 	.word	0x080069e1
 8006984:	080069e1 	.word	0x080069e1
 8006988:	080069e1 	.word	0x080069e1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069e1 	.word	0x080069e1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b6:	e0bc      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069be:	e0b8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c6:	e0b4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ce:	e0b0      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069d0:	2320      	movs	r3, #32
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d6:	e0ac      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069d8:	2340      	movs	r3, #64	; 0x40
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069de:	e0a8      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e6:	e0a4      	b.n	8006b32 <UART_SetConfig+0x5a6>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a8f      	ldr	r2, [pc, #572]	; (8006c2c <UART_SetConfig+0x6a0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d130      	bne.n	8006a54 <UART_SetConfig+0x4c8>
 80069f2:	4b8d      	ldr	r3, [pc, #564]	; (8006c28 <UART_SetConfig+0x69c>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d826      	bhi.n	8006a4c <UART_SetConfig+0x4c0>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0x478>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a1d 	.word	0x08006a1d
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a22:	e086      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e082      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a32:	e07e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e07a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e076      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4a:	e072      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a4c:	2380      	movs	r3, #128	; 0x80
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a52:	e06e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a75      	ldr	r2, [pc, #468]	; (8006c30 <UART_SetConfig+0x6a4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d130      	bne.n	8006ac0 <UART_SetConfig+0x534>
 8006a5e:	4b72      	ldr	r3, [pc, #456]	; (8006c28 <UART_SetConfig+0x69c>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d826      	bhi.n	8006ab8 <UART_SetConfig+0x52c>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <UART_SetConfig+0x4e4>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e050      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e04c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e048      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e044      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e040      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006ab0:	2340      	movs	r3, #64	; 0x40
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e03c      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e038      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a5b      	ldr	r2, [pc, #364]	; (8006c34 <UART_SetConfig+0x6a8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d130      	bne.n	8006b2c <UART_SetConfig+0x5a0>
 8006aca:	4b57      	ldr	r3, [pc, #348]	; (8006c28 <UART_SetConfig+0x69c>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d826      	bhi.n	8006b24 <UART_SetConfig+0x598>
 8006ad6:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <UART_SetConfig+0x550>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006af5 	.word	0x08006af5
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006b05 	.word	0x08006b05
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e01a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e016      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e012      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e00e      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b14:	2320      	movs	r3, #32
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e00a      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e006      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e002      	b.n	8006b32 <UART_SetConfig+0x5a6>
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a3f      	ldr	r2, [pc, #252]	; (8006c34 <UART_SetConfig+0x6a8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	f040 80f8 	bne.w	8006d2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	dc46      	bgt.n	8006bd4 <UART_SetConfig+0x648>
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	f2c0 8082 	blt.w	8006c50 <UART_SetConfig+0x6c4>
 8006b4c:	3b02      	subs	r3, #2
 8006b4e:	2b1e      	cmp	r3, #30
 8006b50:	d87e      	bhi.n	8006c50 <UART_SetConfig+0x6c4>
 8006b52:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <UART_SetConfig+0x5cc>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006bdb 	.word	0x08006bdb
 8006b5c:	08006c51 	.word	0x08006c51
 8006b60:	08006be3 	.word	0x08006be3
 8006b64:	08006c51 	.word	0x08006c51
 8006b68:	08006c51 	.word	0x08006c51
 8006b6c:	08006c51 	.word	0x08006c51
 8006b70:	08006bf3 	.word	0x08006bf3
 8006b74:	08006c51 	.word	0x08006c51
 8006b78:	08006c51 	.word	0x08006c51
 8006b7c:	08006c51 	.word	0x08006c51
 8006b80:	08006c51 	.word	0x08006c51
 8006b84:	08006c51 	.word	0x08006c51
 8006b88:	08006c51 	.word	0x08006c51
 8006b8c:	08006c51 	.word	0x08006c51
 8006b90:	08006c03 	.word	0x08006c03
 8006b94:	08006c51 	.word	0x08006c51
 8006b98:	08006c51 	.word	0x08006c51
 8006b9c:	08006c51 	.word	0x08006c51
 8006ba0:	08006c51 	.word	0x08006c51
 8006ba4:	08006c51 	.word	0x08006c51
 8006ba8:	08006c51 	.word	0x08006c51
 8006bac:	08006c51 	.word	0x08006c51
 8006bb0:	08006c51 	.word	0x08006c51
 8006bb4:	08006c51 	.word	0x08006c51
 8006bb8:	08006c51 	.word	0x08006c51
 8006bbc:	08006c51 	.word	0x08006c51
 8006bc0:	08006c51 	.word	0x08006c51
 8006bc4:	08006c51 	.word	0x08006c51
 8006bc8:	08006c51 	.word	0x08006c51
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006c43 	.word	0x08006c43
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d037      	beq.n	8006c48 <UART_SetConfig+0x6bc>
 8006bd8:	e03a      	b.n	8006c50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006bda:	f7fe fb71 	bl	80052c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006be0:	e03c      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fb80 	bl	80052ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf0:	e034      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf2:	f107 0318 	add.w	r3, r7, #24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fccc 	bl	8005594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c00:	e02c      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <UART_SetConfig+0x69c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <UART_SetConfig+0x69c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <UART_SetConfig+0x6ac>)
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c20:	e01c      	b.n	8006c5c <UART_SetConfig+0x6d0>
 8006c22:	bf00      	nop
 8006c24:	40011400 	.word	0x40011400
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	40007800 	.word	0x40007800
 8006c30:	40007c00 	.word	0x40007c00
 8006c34:	58000c00 	.word	0x58000c00
 8006c38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b9d      	ldr	r3, [pc, #628]	; (8006eb4 <UART_SetConfig+0x928>)
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c40:	e00c      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c42:	4b9d      	ldr	r3, [pc, #628]	; (8006eb8 <UART_SetConfig+0x92c>)
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c46:	e009      	b.n	8006c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c4e:	e005      	b.n	8006c5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 81de 	beq.w	8007020 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	4a94      	ldr	r2, [pc, #592]	; (8006ebc <UART_SetConfig+0x930>)
 8006c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d305      	bcc.n	8006c94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d903      	bls.n	8006c9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c9a:	e1c1      	b.n	8007020 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	60fa      	str	r2, [r7, #12]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	4a84      	ldr	r2, [pc, #528]	; (8006ebc <UART_SetConfig+0x930>)
 8006caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cbe:	f7f9 fb13 	bl	80002e8 <__aeabi_uldivmod>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	020b      	lsls	r3, r1, #8
 8006cd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cd8:	0202      	lsls	r2, r0, #8
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	6849      	ldr	r1, [r1, #4]
 8006cde:	0849      	lsrs	r1, r1, #1
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	eb12 0804 	adds.w	r8, r2, r4
 8006cea:	eb43 0905 	adc.w	r9, r3, r5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	469a      	mov	sl, r3
 8006cf6:	4693      	mov	fp, r2
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4649      	mov	r1, r9
 8006d00:	f7f9 faf2 	bl	80002e8 <__aeabi_uldivmod>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4613      	mov	r3, r2
 8006d0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d12:	d308      	bcc.n	8006d26 <UART_SetConfig+0x79a>
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1a:	d204      	bcs.n	8006d26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d22:	60da      	str	r2, [r3, #12]
 8006d24:	e17c      	b.n	8007020 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d2c:	e178      	b.n	8007020 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d36:	f040 80c5 	bne.w	8006ec4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006d3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	dc48      	bgt.n	8006dd4 <UART_SetConfig+0x848>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	db7b      	blt.n	8006e3e <UART_SetConfig+0x8b2>
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d879      	bhi.n	8006e3e <UART_SetConfig+0x8b2>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x7c4>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006ddb 	.word	0x08006ddb
 8006d54:	08006de3 	.word	0x08006de3
 8006d58:	08006e3f 	.word	0x08006e3f
 8006d5c:	08006e3f 	.word	0x08006e3f
 8006d60:	08006deb 	.word	0x08006deb
 8006d64:	08006e3f 	.word	0x08006e3f
 8006d68:	08006e3f 	.word	0x08006e3f
 8006d6c:	08006e3f 	.word	0x08006e3f
 8006d70:	08006dfb 	.word	0x08006dfb
 8006d74:	08006e3f 	.word	0x08006e3f
 8006d78:	08006e3f 	.word	0x08006e3f
 8006d7c:	08006e3f 	.word	0x08006e3f
 8006d80:	08006e3f 	.word	0x08006e3f
 8006d84:	08006e3f 	.word	0x08006e3f
 8006d88:	08006e3f 	.word	0x08006e3f
 8006d8c:	08006e3f 	.word	0x08006e3f
 8006d90:	08006e0b 	.word	0x08006e0b
 8006d94:	08006e3f 	.word	0x08006e3f
 8006d98:	08006e3f 	.word	0x08006e3f
 8006d9c:	08006e3f 	.word	0x08006e3f
 8006da0:	08006e3f 	.word	0x08006e3f
 8006da4:	08006e3f 	.word	0x08006e3f
 8006da8:	08006e3f 	.word	0x08006e3f
 8006dac:	08006e3f 	.word	0x08006e3f
 8006db0:	08006e3f 	.word	0x08006e3f
 8006db4:	08006e3f 	.word	0x08006e3f
 8006db8:	08006e3f 	.word	0x08006e3f
 8006dbc:	08006e3f 	.word	0x08006e3f
 8006dc0:	08006e3f 	.word	0x08006e3f
 8006dc4:	08006e3f 	.word	0x08006e3f
 8006dc8:	08006e3f 	.word	0x08006e3f
 8006dcc:	08006e3f 	.word	0x08006e3f
 8006dd0:	08006e31 	.word	0x08006e31
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d02e      	beq.n	8006e36 <UART_SetConfig+0x8aa>
 8006dd8:	e031      	b.n	8006e3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dda:	f7fd f83b 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8006dde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006de0:	e033      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de2:	f7fd f84d 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 8006de6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006de8:	e02f      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fa7c 	bl	80052ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df8:	e027      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfa:	f107 0318 	add.w	r3, r7, #24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fbc8 	bl	8005594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e08:	e01f      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0a:	4b2d      	ldr	r3, [pc, #180]	; (8006ec0 <UART_SetConfig+0x934>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e16:	4b2a      	ldr	r3, [pc, #168]	; (8006ec0 <UART_SetConfig+0x934>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <UART_SetConfig+0x928>)
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e28:	e00f      	b.n	8006e4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e2a:	4b22      	ldr	r3, [pc, #136]	; (8006eb4 <UART_SetConfig+0x928>)
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2e:	e00c      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <UART_SetConfig+0x92c>)
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e34:	e009      	b.n	8006e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3c:	e005      	b.n	8006e4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80e7 	beq.w	8007020 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <UART_SetConfig+0x930>)
 8006e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d916      	bls.n	8006eac <UART_SetConfig+0x920>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d212      	bcs.n	8006eac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f023 030f 	bic.w	r3, r3, #15
 8006e8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	e0b9      	b.n	8007020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006eb2:	e0b5      	b.n	8007020 <UART_SetConfig+0xa94>
 8006eb4:	03d09000 	.word	0x03d09000
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	080084b8 	.word	0x080084b8
 8006ec0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	dc49      	bgt.n	8006f60 <UART_SetConfig+0x9d4>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	db7c      	blt.n	8006fca <UART_SetConfig+0xa3e>
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d87a      	bhi.n	8006fca <UART_SetConfig+0xa3e>
 8006ed4:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <UART_SetConfig+0x950>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f67 	.word	0x08006f67
 8006ee0:	08006f6f 	.word	0x08006f6f
 8006ee4:	08006fcb 	.word	0x08006fcb
 8006ee8:	08006fcb 	.word	0x08006fcb
 8006eec:	08006f77 	.word	0x08006f77
 8006ef0:	08006fcb 	.word	0x08006fcb
 8006ef4:	08006fcb 	.word	0x08006fcb
 8006ef8:	08006fcb 	.word	0x08006fcb
 8006efc:	08006f87 	.word	0x08006f87
 8006f00:	08006fcb 	.word	0x08006fcb
 8006f04:	08006fcb 	.word	0x08006fcb
 8006f08:	08006fcb 	.word	0x08006fcb
 8006f0c:	08006fcb 	.word	0x08006fcb
 8006f10:	08006fcb 	.word	0x08006fcb
 8006f14:	08006fcb 	.word	0x08006fcb
 8006f18:	08006fcb 	.word	0x08006fcb
 8006f1c:	08006f97 	.word	0x08006f97
 8006f20:	08006fcb 	.word	0x08006fcb
 8006f24:	08006fcb 	.word	0x08006fcb
 8006f28:	08006fcb 	.word	0x08006fcb
 8006f2c:	08006fcb 	.word	0x08006fcb
 8006f30:	08006fcb 	.word	0x08006fcb
 8006f34:	08006fcb 	.word	0x08006fcb
 8006f38:	08006fcb 	.word	0x08006fcb
 8006f3c:	08006fcb 	.word	0x08006fcb
 8006f40:	08006fcb 	.word	0x08006fcb
 8006f44:	08006fcb 	.word	0x08006fcb
 8006f48:	08006fcb 	.word	0x08006fcb
 8006f4c:	08006fcb 	.word	0x08006fcb
 8006f50:	08006fcb 	.word	0x08006fcb
 8006f54:	08006fcb 	.word	0x08006fcb
 8006f58:	08006fcb 	.word	0x08006fcb
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d02e      	beq.n	8006fc2 <UART_SetConfig+0xa36>
 8006f64:	e031      	b.n	8006fca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fc ff75 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8006f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f6c:	e033      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6e:	f7fc ff87 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 8006f72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f74:	e02f      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f9b6 	bl	80052ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f84:	e027      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f86:	f107 0318 	add.w	r3, r7, #24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fb02 	bl	8005594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f94:	e01f      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <UART_SetConfig+0xac0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	; (800704c <UART_SetConfig+0xac0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	4a28      	ldr	r2, [pc, #160]	; (8007050 <UART_SetConfig+0xac4>)
 8006fae:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fb4:	e00f      	b.n	8006fd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006fb6:	4b26      	ldr	r3, [pc, #152]	; (8007050 <UART_SetConfig+0xac4>)
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fba:	e00c      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <UART_SetConfig+0xac8>)
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc0:	e009      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc8:	e005      	b.n	8006fd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fd4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d021      	beq.n	8007020 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <UART_SetConfig+0xacc>)
 8006fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	441a      	add	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d909      	bls.n	800701a <UART_SetConfig+0xa8e>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d205      	bcs.n	800701a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	b29a      	uxth	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e002      	b.n	8007020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2201      	movs	r2, #1
 8007024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2201      	movs	r2, #1
 800702c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2200      	movs	r2, #0
 8007034:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800703c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007040:	4618      	mov	r0, r3
 8007042:	3748      	adds	r7, #72	; 0x48
 8007044:	46bd      	mov	sp, r7
 8007046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
 8007050:	03d09000 	.word	0x03d09000
 8007054:	003d0900 	.word	0x003d0900
 8007058:	080084b8 	.word	0x080084b8

0800705c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01a      	beq.n	8007172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715a:	d10a      	bne.n	8007172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
  }
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b098      	sub	sp, #96	; 0x60
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b0:	f7fa f868 	bl	8001284 <HAL_GetTick>
 80071b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d12f      	bne.n	8007224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f88e 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d022      	beq.n	8007224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f2:	653b      	str	r3, [r7, #80]	; 0x50
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
 80071fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e063      	b.n	80072ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b04      	cmp	r3, #4
 8007230:	d149      	bne.n	80072c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007232:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800723a:	2200      	movs	r2, #0
 800723c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f857 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d03c      	beq.n	80072c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	623b      	str	r3, [r7, #32]
   return(result);
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
 800726c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	60fb      	str	r3, [r7, #12]
   return(result);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	64bb      	str	r3, [r7, #72]	; 0x48
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800729e:	61fa      	str	r2, [r7, #28]
 80072a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	69b9      	ldr	r1, [r7, #24]
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	617b      	str	r3, [r7, #20]
   return(result);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e012      	b.n	80072ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3758      	adds	r7, #88	; 0x58
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	e04f      	b.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d04b      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7f9 ffb9 	bl	8001284 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e04e      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d037      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d034      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d031      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d110      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f95b 	bl	8007614 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2208      	movs	r2, #8
 8007362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e029      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007380:	d111      	bne.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f941 	bl	8007614 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e00f      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d0a0      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b0a3      	sub	sp, #140	; 0x8c
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d10e      	bne.n	8007422 <UART_Start_Receive_IT+0x52>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <UART_Start_Receive_IT+0x48>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007416:	e02d      	b.n	8007474 <UART_Start_Receive_IT+0xa4>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	22ff      	movs	r2, #255	; 0xff
 800741c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007420:	e028      	b.n	8007474 <UART_Start_Receive_IT+0xa4>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10d      	bne.n	8007446 <UART_Start_Receive_IT+0x76>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <UART_Start_Receive_IT+0x6c>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800743a:	e01b      	b.n	8007474 <UART_Start_Receive_IT+0xa4>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	227f      	movs	r2, #127	; 0x7f
 8007440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007444:	e016      	b.n	8007474 <UART_Start_Receive_IT+0xa4>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744e:	d10d      	bne.n	800746c <UART_Start_Receive_IT+0x9c>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <UART_Start_Receive_IT+0x92>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	227f      	movs	r2, #127	; 0x7f
 800745c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007460:	e008      	b.n	8007474 <UART_Start_Receive_IT+0xa4>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	223f      	movs	r2, #63	; 0x3f
 8007466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800746a:	e003      	b.n	8007474 <UART_Start_Receive_IT+0xa4>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2222      	movs	r2, #34	; 0x22
 8007480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3308      	adds	r3, #8
 800748a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80074a8:	673a      	str	r2, [r7, #112]	; 0x70
 80074aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80074ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80074b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c4:	d14f      	bne.n	8007566 <UART_Start_Receive_IT+0x196>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d349      	bcc.n	8007566 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d107      	bne.n	80074ec <UART_Start_Receive_IT+0x11c>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4a47      	ldr	r2, [pc, #284]	; (8007604 <UART_Start_Receive_IT+0x234>)
 80074e8:	675a      	str	r2, [r3, #116]	; 0x74
 80074ea:	e002      	b.n	80074f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a46      	ldr	r2, [pc, #280]	; (8007608 <UART_Start_Receive_IT+0x238>)
 80074f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d01a      	beq.n	8007530 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800751c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800751e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007522:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800752a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e4      	bne.n	80074fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007546:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007550:	64ba      	str	r2, [r7, #72]	; 0x48
 8007552:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800755e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e5      	bne.n	8007530 <UART_Start_Receive_IT+0x160>
 8007564:	e046      	b.n	80075f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756e:	d107      	bne.n	8007580 <UART_Start_Receive_IT+0x1b0>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4a24      	ldr	r2, [pc, #144]	; (800760c <UART_Start_Receive_IT+0x23c>)
 800757c:	675a      	str	r2, [r3, #116]	; 0x74
 800757e:	e002      	b.n	8007586 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a23      	ldr	r2, [pc, #140]	; (8007610 <UART_Start_Receive_IT+0x240>)
 8007584:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d019      	beq.n	80075c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80075a2:	677b      	str	r3, [r7, #116]	; 0x74
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
 80075ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_Start_Receive_IT+0x1be>
 80075c0:	e018      	b.n	80075f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	613b      	str	r3, [r7, #16]
   return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f043 0320 	orr.w	r3, r3, #32
 80075d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075e0:	623b      	str	r3, [r7, #32]
 80075e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e6      	bne.n	80075c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	378c      	adds	r7, #140	; 0x8c
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	08007e35 	.word	0x08007e35
 8007608:	08007ad5 	.word	0x08007ad5
 800760c:	0800791d 	.word	0x0800791d
 8007610:	08007765 	.word	0x08007765

08007614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b095      	sub	sp, #84	; 0x54
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763a:	643b      	str	r3, [r7, #64]	; 0x40
 800763c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e6      	bne.n	800761c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3308      	adds	r3, #8
 8007654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	61fb      	str	r3, [r7, #28]
   return(result);
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <UART_EndRxTransfer+0xc8>)
 8007662:	4013      	ands	r3, r2
 8007664:	64bb      	str	r3, [r7, #72]	; 0x48
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e5      	bne.n	800764e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007686:	2b01      	cmp	r3, #1
 8007688:	d118      	bne.n	80076bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	60bb      	str	r3, [r7, #8]
   return(result);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f023 0310 	bic.w	r3, r3, #16
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	613b      	str	r3, [r7, #16]
   return(result);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80076d0:	bf00      	nop
 80076d2:	3754      	adds	r7, #84	; 0x54
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	effffffe 	.word	0xeffffffe

080076e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7fe ff2e 	bl	8006560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	60bb      	str	r3, [r7, #8]
   return(result);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	613b      	str	r3, [r7, #16]
   return(result);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e6      	bne.n	8007714 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7fe fef9 	bl	800654c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800775a:	bf00      	nop
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b09c      	sub	sp, #112	; 0x70
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007772:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777c:	2b22      	cmp	r3, #34	; 0x22
 800777e:	f040 80be 	bne.w	80078fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800778c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007790:	b2d9      	uxtb	r1, r3
 8007792:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007796:	b2da      	uxtb	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779c:	400a      	ands	r2, r1
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f040 80a1 	bne.w	800790e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e6      	bne.n	80077cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	667b      	str	r3, [r7, #100]	; 0x64
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3308      	adds	r3, #8
 800781c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800781e:	647a      	str	r2, [r7, #68]	; 0x44
 8007820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800782c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e5      	bne.n	80077fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a33      	ldr	r2, [pc, #204]	; (8007918 <UART_RxISR_8BIT+0x1b4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01f      	beq.n	8007890 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d018      	beq.n	8007890 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	623b      	str	r3, [r7, #32]
   return(result);
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007872:	663b      	str	r3, [r7, #96]	; 0x60
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800787c:	633b      	str	r3, [r7, #48]	; 0x30
 800787e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e6      	bne.n	800785e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007894:	2b01      	cmp	r3, #1
 8007896:	d12e      	bne.n	80078f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0310 	bic.w	r3, r3, #16
 80078b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078bc:	61fb      	str	r3, [r7, #28]
 80078be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	69b9      	ldr	r1, [r7, #24]
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d103      	bne.n	80078e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2210      	movs	r2, #16
 80078e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe fe40 	bl	8006574 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078f4:	e00b      	b.n	800790e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7f8 fec8 	bl	800068c <HAL_UART_RxCpltCallback>
}
 80078fc:	e007      	b.n	800790e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0208 	orr.w	r2, r2, #8
 800790c:	619a      	str	r2, [r3, #24]
}
 800790e:	bf00      	nop
 8007910:	3770      	adds	r7, #112	; 0x70
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	58000c00 	.word	0x58000c00

0800791c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b09c      	sub	sp, #112	; 0x70
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800792a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007934:	2b22      	cmp	r3, #34	; 0x22
 8007936:	f040 80be 	bne.w	8007ab6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007948:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800794a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800794e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007952:	4013      	ands	r3, r2
 8007954:	b29a      	uxth	r2, r3
 8007956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007958:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	1c9a      	adds	r2, r3, #2
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800796a:	b29b      	uxth	r3, r3
 800796c:	3b01      	subs	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 80a1 	bne.w	8007ac6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007998:	667b      	str	r3, [r7, #100]	; 0x64
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a2:	657b      	str	r3, [r7, #84]	; 0x54
 80079a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e6      	bne.n	8007984 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3308      	adds	r3, #8
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	663b      	str	r3, [r7, #96]	; 0x60
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079d6:	643a      	str	r2, [r7, #64]	; 0x40
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a33      	ldr	r2, [pc, #204]	; (8007ad0 <UART_RxISR_16BIT+0x1b4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d01f      	beq.n	8007a48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d018      	beq.n	8007a48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e6      	bne.n	8007a16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d12e      	bne.n	8007aae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6979      	ldr	r1, [r7, #20]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	613b      	str	r3, [r7, #16]
   return(result);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e6      	bne.n	8007a56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d103      	bne.n	8007a9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fe fd64 	bl	8006574 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aac:	e00b      	b.n	8007ac6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7f8 fdec 	bl	800068c <HAL_UART_RxCpltCallback>
}
 8007ab4:	e007      	b.n	8007ac6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0208 	orr.w	r2, r2, #8
 8007ac4:	619a      	str	r2, [r3, #24]
}
 8007ac6:	bf00      	nop
 8007ac8:	3770      	adds	r7, #112	; 0x70
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	58000c00 	.word	0x58000c00

08007ad4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b0ac      	sub	sp, #176	; 0xb0
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ae2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0a:	2b22      	cmp	r3, #34	; 0x22
 8007b0c:	f040 8180 	bne.w	8007e10 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b16:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b1a:	e123      	b.n	8007d64 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007b2a:	b2d9      	uxtb	r1, r3
 8007b2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b36:	400a      	ands	r2, r1
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d053      	beq.n	8007c16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d011      	beq.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f043 0201 	orr.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d011      	beq.n	8007bce <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc4:	f043 0204 	orr.w	r2, r3, #4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d011      	beq.n	8007bfe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2204      	movs	r2, #4
 8007bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf4:	f043 0202 	orr.w	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d006      	beq.n	8007c16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fe fca9 	bl	8006560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f040 80a0 	bne.w	8007d64 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c48:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e4      	bne.n	8007c24 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007c6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c6c:	4b6e      	ldr	r3, [pc, #440]	; (8007e28 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c7e:	66ba      	str	r2, [r7, #104]	; 0x68
 8007c80:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e3      	bne.n	8007c5a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a60      	ldr	r2, [pc, #384]	; (8007e2c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d021      	beq.n	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01a      	beq.n	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ce6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e4      	bne.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d130      	bne.n	8007d5e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	f023 0310 	bic.w	r3, r3, #16
 8007d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d24:	643b      	str	r3, [r7, #64]	; 0x40
 8007d26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e4      	bne.n	8007d02 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d103      	bne.n	8007d4e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fe fc0c 	bl	8006574 <HAL_UARTEx_RxEventCallback>
 8007d5c:	e002      	b.n	8007d64 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7f8 fc94 	bl	800068c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d64:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d006      	beq.n	8007d7a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f aed1 	bne.w	8007b1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d049      	beq.n	8007e20 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d92:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d242      	bcs.n	8007e20 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3308      	adds	r3, #8
 8007dba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e3      	bne.n	8007d9a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a16      	ldr	r2, [pc, #88]	; (8007e30 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007dd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f043 0320 	orr.w	r3, r3, #32
 8007dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dfa:	61bb      	str	r3, [r7, #24]
 8007dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6979      	ldr	r1, [r7, #20]
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	613b      	str	r3, [r7, #16]
   return(result);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e4      	bne.n	8007dd8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e0e:	e007      	b.n	8007e20 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0208 	orr.w	r2, r2, #8
 8007e1e:	619a      	str	r2, [r3, #24]
}
 8007e20:	bf00      	nop
 8007e22:	37b0      	adds	r7, #176	; 0xb0
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	effffffe 	.word	0xeffffffe
 8007e2c:	58000c00 	.word	0x58000c00
 8007e30:	08007765 	.word	0x08007765

08007e34 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b0ae      	sub	sp, #184	; 0xb8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e42:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	2b22      	cmp	r3, #34	; 0x22
 8007e6c:	f040 8184 	bne.w	8008178 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e76:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e7a:	e127      	b.n	80080cc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e8e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007e92:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007e96:	4013      	ands	r3, r2
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea4:	1c9a      	adds	r2, r3, #2
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d053      	beq.n	8007f7a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f043 0201 	orr.w	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f28:	f043 0204 	orr.w	r2, r3, #4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d011      	beq.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2204      	movs	r2, #4
 8007f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f58:	f043 0202 	orr.w	r2, r3, #2
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7fe faf7 	bl	8006560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 80a2 	bne.w	80080cc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fae:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e2      	bne.n	8007f88 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	; (8008190 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fe8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e3      	bne.n	8007fc2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a60      	ldr	r2, [pc, #384]	; (8008194 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d021      	beq.n	800805c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01a      	beq.n	800805c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800803a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008048:	65bb      	str	r3, [r7, #88]	; 0x58
 800804a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800804e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e4      	bne.n	8008026 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008060:	2b01      	cmp	r3, #1
 8008062:	d130      	bne.n	80080c6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807a:	f023 0310 	bic.w	r3, r3, #16
 800807e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800808c:	647b      	str	r3, [r7, #68]	; 0x44
 800808e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800809a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e4      	bne.n	800806a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 0310 	and.w	r3, r3, #16
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d103      	bne.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2210      	movs	r2, #16
 80080b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe fa58 	bl	8006574 <HAL_UARTEx_RxEventCallback>
 80080c4:	e002      	b.n	80080cc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7f8 fae0 	bl	800068c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d006      	beq.n	80080e2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80080d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080d8:	f003 0320 	and.w	r3, r3, #32
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f47f aecd 	bne.w	8007e7c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d049      	beq.n	8008188 <UART_RxISR_16BIT_FIFOEN+0x354>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80080fe:	429a      	cmp	r2, r3
 8008100:	d242      	bcs.n	8008188 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	623b      	str	r3, [r7, #32]
   return(result);
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008126:	633a      	str	r2, [r7, #48]	; 0x30
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e3      	bne.n	8008102 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a16      	ldr	r2, [pc, #88]	; (8008198 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800813e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	60fb      	str	r3, [r7, #12]
   return(result);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f043 0320 	orr.w	r3, r3, #32
 8008154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	69b9      	ldr	r1, [r7, #24]
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	617b      	str	r3, [r7, #20]
   return(result);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e4      	bne.n	8008140 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008176:	e007      	b.n	8008188 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0208 	orr.w	r2, r2, #8
 8008186:	619a      	str	r2, [r3, #24]
}
 8008188:	bf00      	nop
 800818a:	37b8      	adds	r7, #184	; 0xb8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	effffffe 	.word	0xeffffffe
 8008194:	58000c00 	.word	0x58000c00
 8008198:	0800791d 	.word	0x0800791d

0800819c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_UARTEx_DisableFifoMode+0x16>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e027      	b.n	800823e <HAL_UARTEx_DisableFifoMode+0x66>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2224      	movs	r2, #36	; 0x24
 80081fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800821c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800825e:	2302      	movs	r3, #2
 8008260:	e02d      	b.n	80082be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	; 0x24
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f850 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082da:	2302      	movs	r3, #2
 80082dc:	e02d      	b.n	800833a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	; 0x24
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f812 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008364:	e031      	b.n	80083ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008366:	2310      	movs	r3, #16
 8008368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800836a:	2310      	movs	r3, #16
 800836c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	0e5b      	lsrs	r3, r3, #25
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	0f5b      	lsrs	r3, r3, #29
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	7b3a      	ldrb	r2, [r7, #12]
 8008392:	4911      	ldr	r1, [pc, #68]	; (80083d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008394:	5c8a      	ldrb	r2, [r1, r2]
 8008396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800839a:	7b3a      	ldrb	r2, [r7, #12]
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <UARTEx_SetNbDataToProcess+0x98>)
 800839e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	7b7a      	ldrb	r2, [r7, #13]
 80083b0:	4909      	ldr	r1, [pc, #36]	; (80083d8 <UARTEx_SetNbDataToProcess+0x94>)
 80083b2:	5c8a      	ldrb	r2, [r1, r2]
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083b8:	7b7a      	ldrb	r2, [r7, #13]
 80083ba:	4908      	ldr	r1, [pc, #32]	; (80083dc <UARTEx_SetNbDataToProcess+0x98>)
 80083bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083be:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	080084d0 	.word	0x080084d0
 80083dc:	080084d8 	.word	0x080084d8

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4d0d      	ldr	r5, [pc, #52]	; (8008418 <__libc_init_array+0x38>)
 80083e4:	4c0d      	ldr	r4, [pc, #52]	; (800841c <__libc_init_array+0x3c>)
 80083e6:	1b64      	subs	r4, r4, r5
 80083e8:	10a4      	asrs	r4, r4, #2
 80083ea:	2600      	movs	r6, #0
 80083ec:	42a6      	cmp	r6, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	4d0b      	ldr	r5, [pc, #44]	; (8008420 <__libc_init_array+0x40>)
 80083f2:	4c0c      	ldr	r4, [pc, #48]	; (8008424 <__libc_init_array+0x44>)
 80083f4:	f000 f820 	bl	8008438 <_init>
 80083f8:	1b64      	subs	r4, r4, r5
 80083fa:	10a4      	asrs	r4, r4, #2
 80083fc:	2600      	movs	r6, #0
 80083fe:	42a6      	cmp	r6, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f855 3b04 	ldr.w	r3, [r5], #4
 8008408:	4798      	blx	r3
 800840a:	3601      	adds	r6, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008412:	4798      	blx	r3
 8008414:	3601      	adds	r6, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	080084e8 	.word	0x080084e8
 800841c:	080084e8 	.word	0x080084e8
 8008420:	080084e8 	.word	0x080084e8
 8008424:	080084ec 	.word	0x080084ec

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <_init>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr

08008444 <_fini>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr
