
Real Time Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003028  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800317c  0800317c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800317c  0800317c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800317c  0800317c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080031f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080031f4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b7d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015aa  00000000  00000000  00028c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001239c  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096a2  00000000  00000000  0003d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006de50  00000000  00000000  00046926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001af0  00000000  00000000  000b47c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030d0 	.word	0x080030d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080030d0 	.word	0x080030d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46c6      	mov	lr, r8
 8000248:	b500      	push	{lr}
 800024a:	b0a6      	sub	sp, #152	; 0x98
 800024c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 fad5 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f86d 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f967 	bl	8000528 <MX_GPIO_Init>
  MX_RTC_Init();
 800025a:	f000 f8d3 	bl	8000404 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800025e:	f000 f933 	bl	80004c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef sTime = {0};
 8000262:	2368      	movs	r3, #104	; 0x68
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 faa9 	bl	80027c4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000272:	2364      	movs	r3, #100	; 0x64
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 800027a:	23fa      	movs	r3, #250	; 0xfa
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fb20 	bl	80008c4 <HAL_Delay>
	  // Black wire can go into any GND pin
	  // Yellow wire goes into PA9. PA9 is for when the board is transmitting data.
	  // The Yellow wire receives the data.
	  // Get the time from the RTC and store it in sTime
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000284:	2568      	movs	r5, #104	; 0x68
 8000286:	1979      	adds	r1, r7, r5
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <main+0xe0>)
 800028a:	2200      	movs	r2, #0
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fbf9 	bl	8001a84 <HAL_RTC_GetTime>
	  // Need to compute the time in milliseconds based on the SubSeconds (remaining ticks in current second)
	  // The Synchronizing Prescaler + 1 is the SubSecond tick frequency
	  // So the total number of ticks per second is SynchPrediv + 1
	  uint32_t milliseconds = (1000 * sTime.SubSeconds) / (hrtc.Init.SynchPrediv + 1);
 8000292:	197b      	adds	r3, r7, r5
 8000294:	685a      	ldr	r2, [r3, #4]
 8000296:	0013      	movs	r3, r2
 8000298:	015b      	lsls	r3, r3, #5
 800029a:	1a9b      	subs	r3, r3, r2
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	189b      	adds	r3, r3, r2
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	001a      	movs	r2, r3
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <main+0xe0>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	0019      	movs	r1, r3
 80002ac:	0010      	movs	r0, r2
 80002ae:	f7ff ff3d 	bl	800012c <__udivsi3>
 80002b2:	0003      	movs	r3, r0
 80002b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	  // Get the Date from the RTC and store it in sDate
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80002b6:	2464      	movs	r4, #100	; 0x64
 80002b8:	1939      	adds	r1, r7, r4
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <main+0xe0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fcce 	bl	8001c60 <HAL_RTC_GetDate>
	  // Buffer to hold rtc data before it is transmitted
	  char buffer[100];
	  // Format time/date data into the buffer
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
	                   sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes,
 80002c4:	0022      	movs	r2, r4
 80002c6:	18bb      	adds	r3, r7, r2
 80002c8:	78db      	ldrb	r3, [r3, #3]
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
 80002ca:	4698      	mov	r8, r3
	                   sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes,
 80002cc:	18bb      	adds	r3, r7, r2
 80002ce:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
 80002d0:	0019      	movs	r1, r3
	                   sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes,
 80002d2:	18bb      	adds	r3, r7, r2
 80002d4:	789b      	ldrb	r3, [r3, #2]
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
 80002d6:	001c      	movs	r4, r3
	                   sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes,
 80002d8:	002a      	movs	r2, r5
 80002da:	18bb      	adds	r3, r7, r2
 80002dc:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
 80002de:	001d      	movs	r5, r3
	                   sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes,
 80002e0:	18bb      	adds	r3, r7, r2
 80002e2:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
 80002e4:	001e      	movs	r6, r3
	                   sTime.Seconds, milliseconds);
 80002e6:	18bb      	adds	r3, r7, r2
 80002e8:	789b      	ldrb	r3, [r3, #2]
	  snprintf(buffer, sizeof(buffer), "20%02d-%02d-%02d %02d:%02d:%02d:%03lu\r\n",
 80002ea:	469c      	mov	ip, r3
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <main+0xe4>)
 80002ee:	0038      	movs	r0, r7
 80002f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80002f2:	9305      	str	r3, [sp, #20]
 80002f4:	4663      	mov	r3, ip
 80002f6:	9304      	str	r3, [sp, #16]
 80002f8:	9603      	str	r6, [sp, #12]
 80002fa:	9502      	str	r5, [sp, #8]
 80002fc:	9401      	str	r4, [sp, #4]
 80002fe:	9100      	str	r1, [sp, #0]
 8000300:	4643      	mov	r3, r8
 8000302:	2164      	movs	r1, #100	; 0x64
 8000304:	f002 fa66 	bl	80027d4 <sniprintf>
	  // Transmit the RTC data over UART
	  // This can be seen on the COM port. I used PuTTY to display the data
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8000308:	003b      	movs	r3, r7
 800030a:	0018      	movs	r0, r3
 800030c:	f7ff fefc 	bl	8000108 <strlen>
 8000310:	0003      	movs	r3, r0
 8000312:	b29a      	uxth	r2, r3
 8000314:	23fa      	movs	r3, #250	; 0xfa
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	0039      	movs	r1, r7
 800031a:	4804      	ldr	r0, [pc, #16]	; (800032c <main+0xe8>)
 800031c:	f001 fe18 	bl	8001f50 <HAL_UART_Transmit>
  {
 8000320:	e7ab      	b.n	800027a <main+0x36>
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	2000008c 	.word	0x2000008c
 8000328:	080030e8 	.word	0x080030e8
 800032c:	200000ac 	.word	0x200000ac

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b097      	sub	sp, #92	; 0x5c
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	2428      	movs	r4, #40	; 0x28
 8000338:	193b      	adds	r3, r7, r4
 800033a:	0018      	movs	r0, r3
 800033c:	2330      	movs	r3, #48	; 0x30
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f002 fa3f 	bl	80027c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000346:	2318      	movs	r3, #24
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	2310      	movs	r3, #16
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fa37 	bl	80027c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	2314      	movs	r3, #20
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f002 fa30 	bl	80027c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000364:	0021      	movs	r1, r4
 8000366:	187b      	adds	r3, r7, r1
 8000368:	220a      	movs	r2, #10
 800036a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2201      	movs	r2, #1
 8000370:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2210      	movs	r2, #16
 8000376:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2201      	movs	r2, #1
 800037c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2202      	movs	r2, #2
 8000382:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	22a0      	movs	r2, #160	; 0xa0
 800038e:	0392      	lsls	r2, r2, #14
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	187b      	adds	r3, r7, r1
 800039a:	0018      	movs	r0, r3
 800039c:	f000 fcf8 	bl	8000d90 <HAL_RCC_OscConfig>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003a4:	f000 f91c 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	2118      	movs	r1, #24
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2207      	movs	r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2202      	movs	r2, #2
 80003b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2101      	movs	r1, #1
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fffc 	bl	80013c4 <HAL_RCC_ClockConfig>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003d0:	f000 f906 	bl	80005e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <SystemClock_Config+0xd0>)
 80003d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 f92e 	bl	800164c <HAL_RCCEx_PeriphCLKConfig>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80003f4:	f000 f8f4 	bl	80005e0 <Error_Handler>
  }
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b017      	add	sp, #92	; 0x5c
 80003fe:	bd90      	pop	{r4, r7, pc}
 8000400:	00010001 	.word	0x00010001

08000404 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	0018      	movs	r0, r3
 800040e:	2314      	movs	r3, #20
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f002 f9d6 	bl	80027c4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000418:	003b      	movs	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_RTC_Init+0xbc>)
 8000420:	4a28      	ldr	r2, [pc, #160]	; (80004c4 <MX_RTC_Init+0xc0>)
 8000422:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <MX_RTC_Init+0xbc>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_RTC_Init+0xbc>)
 800042c:	227f      	movs	r2, #127	; 0x7f
 800042e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <MX_RTC_Init+0xbc>)
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_RTC_Init+0xbc>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800043c:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <MX_RTC_Init+0xbc>)
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <MX_RTC_Init+0xbc>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_RTC_Init+0xbc>)
 800044a:	0018      	movs	r0, r3
 800044c:	f001 f9dc 	bl	8001808 <HAL_RTC_Init>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000454:	f000 f8c4 	bl	80005e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	220c      	movs	r2, #12
 800045c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 23;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2217      	movs	r2, #23
 8000462:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 12;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	220c      	movs	r2, #12
 8000468:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000476:	1d39      	adds	r1, r7, #4
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_RTC_Init+0xbc>)
 800047a:	2200      	movs	r2, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fa5b 	bl	8001938 <HAL_RTC_SetTime>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000486:	f000 f8ab 	bl	80005e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800048a:	003b      	movs	r3, r7
 800048c:	2201      	movs	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000490:	003b      	movs	r3, r7
 8000492:	2206      	movs	r2, #6
 8000494:	705a      	strb	r2, [r3, #1]
  sDate.Date = 12;
 8000496:	003b      	movs	r3, r7
 8000498:	220c      	movs	r2, #12
 800049a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800049c:	003b      	movs	r3, r7
 800049e:	2218      	movs	r2, #24
 80004a0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80004a2:	0039      	movs	r1, r7
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_RTC_Init+0xbc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fb49 	bl	8001b40 <HAL_RTC_SetDate>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80004b2:	f000 f895 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b006      	add	sp, #24
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	40002800 	.word	0x40002800

080004c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <MX_USART1_UART_Init+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004d4:	22e1      	movs	r2, #225	; 0xe1
 80004d6:	0252      	lsls	r2, r2, #9
 80004d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART1_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART1_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART1_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <MX_USART1_UART_Init+0x58>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fccb 	bl	8001ea8 <HAL_UART_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000516:	f000 f863 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000ac 	.word	0x200000ac
 8000524:	40013800 	.word	0x40013800

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	240c      	movs	r4, #12
 8000530:	193b      	adds	r3, r7, r4
 8000532:	0018      	movs	r0, r3
 8000534:	2314      	movs	r3, #20
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f002 f943 	bl	80027c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <MX_GPIO_Init+0xb0>)
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <MX_GPIO_Init+0xb0>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0289      	lsls	r1, r1, #10
 8000548:	430a      	orrs	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <MX_GPIO_Init+0xb0>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	029b      	lsls	r3, r3, #10
 8000554:	4013      	ands	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xb0>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_GPIO_Init+0xb0>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0309      	lsls	r1, r1, #12
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xb0>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	031b      	lsls	r3, r3, #12
 8000570:	4013      	ands	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000576:	23c0      	movs	r3, #192	; 0xc0
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4818      	ldr	r0, [pc, #96]	; (80005dc <MX_GPIO_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	0019      	movs	r1, r3
 8000580:	f000 fbe8 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2290      	movs	r2, #144	; 0x90
 800058e:	0352      	lsls	r2, r2, #13
 8000590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000598:	193a      	adds	r2, r7, r4
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fa67 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	22c0      	movs	r2, #192	; 0xc0
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2201      	movs	r2, #1
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <MX_GPIO_Init+0xb4>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f000 fa53 	bl	8000a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b009      	add	sp, #36	; 0x24
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000800 	.word	0x48000800

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x44>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_MspInit+0x44>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	619a      	str	r2, [r3, #24]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_MspInit+0x44>)
 800060c:	69da      	ldr	r2, [r3, #28]
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_MspInit+0x44>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0549      	lsls	r1, r1, #21
 8000614:	430a      	orrs	r2, r1
 8000616:	61da      	str	r2, [r3, #28]
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_MspInit+0x44>)
 800061a:	69da      	ldr	r2, [r3, #28]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	055b      	lsls	r3, r3, #21
 8000620:	4013      	ands	r3, r2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_RTC_MspInit+0x28>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_RTC_MspInit+0x2c>)
 8000648:	6a1a      	ldr	r2, [r3, #32]
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_RTC_MspInit+0x2c>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	0209      	lsls	r1, r1, #8
 8000650:	430a      	orrs	r2, r1
 8000652:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40002800 	.word	0x40002800
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b08b      	sub	sp, #44	; 0x2c
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	2414      	movs	r4, #20
 800066e:	193b      	adds	r3, r7, r4
 8000670:	0018      	movs	r0, r3
 8000672:	2314      	movs	r3, #20
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f002 f8a4 	bl	80027c4 <memset>
  if(huart->Instance==USART1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <HAL_UART_MspInit+0x94>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d133      	bne.n	80006ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <HAL_UART_MspInit+0x98>)
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_UART_MspInit+0x98>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	01c9      	lsls	r1, r1, #7
 8000690:	430a      	orrs	r2, r1
 8000692:	619a      	str	r2, [r3, #24]
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_UART_MspInit+0x98>)
 8000696:	699a      	ldr	r2, [r3, #24]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	01db      	lsls	r3, r3, #7
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_UART_MspInit+0x98>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_UART_MspInit+0x98>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0289      	lsls	r1, r1, #10
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_UART_MspInit+0x98>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	22c0      	movs	r2, #192	; 0xc0
 80006c2:	00d2      	lsls	r2, r2, #3
 80006c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	0021      	movs	r1, r4
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2202      	movs	r2, #2
 80006cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2203      	movs	r2, #3
 80006d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	2390      	movs	r3, #144	; 0x90
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 f9c3 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b00b      	add	sp, #44	; 0x2c
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40021000 	.word	0x40021000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f8b2 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f002 f806 	bl	8002770 <__errno>
 8000764:	0003      	movs	r3, r0
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076a:	2301      	movs	r3, #1
 800076c:	425b      	negs	r3, r3
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	18d2      	adds	r2, r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <_sbrk+0x64>)
 8000780:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b006      	add	sp, #24
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20002000 	.word	0x20002000
 8000790:	00000400 	.word	0x00000400
 8000794:	20000134 	.word	0x20000134
 8000798:	20000150 	.word	0x20000150

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007aa:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80007ac:	f7ff fff6 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	; (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	; (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d6:	f001 ffd1 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fd33 	bl	8000244 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   r0, =_estack
 80007e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007ec:	08003184 	.word	0x08003184
  ldr r2, =_sbss
 80007f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007f4:	2000014c 	.word	0x2000014c

080007f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_COMP_IRQHandler>
	...

080007fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <HAL_Init+0x24>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_Init+0x24>)
 8000806:	2110      	movs	r1, #16
 8000808:	430a      	orrs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f809 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000812:	f7ff feeb 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_InitTick+0x5c>)
 800082e:	681c      	ldr	r4, [r3, #0]
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_InitTick+0x60>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	0019      	movs	r1, r3
 8000836:	23fa      	movs	r3, #250	; 0xfa
 8000838:	0098      	lsls	r0, r3, #2
 800083a:	f7ff fc77 	bl	800012c <__udivsi3>
 800083e:	0003      	movs	r3, r0
 8000840:	0019      	movs	r1, r3
 8000842:	0020      	movs	r0, r4
 8000844:	f7ff fc72 	bl	800012c <__udivsi3>
 8000848:	0003      	movs	r3, r0
 800084a:	0018      	movs	r0, r3
 800084c:	f000 f905 	bl	8000a5a <HAL_SYSTICK_Config>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	e00f      	b.n	8000878 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d80b      	bhi.n	8000876 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	2301      	movs	r3, #1
 8000862:	425b      	negs	r3, r3
 8000864:	2200      	movs	r2, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f8e2 	bl	8000a30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_InitTick+0x64>)
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b003      	add	sp, #12
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	18d2      	adds	r2, r2, r3
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_IncTick+0x20>)
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000138 	.word	0x20000138

080008b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000138 	.word	0x20000138

080008c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008cc:	f7ff fff0 	bl	80008b0 <HAL_GetTick>
 80008d0:	0003      	movs	r3, r0
 80008d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	d005      	beq.n	80008ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_Delay+0x44>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001a      	movs	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	189b      	adds	r3, r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	f7ff ffe0 	bl	80008b0 <HAL_GetTick>
 80008f0:	0002      	movs	r2, r0
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d8f7      	bhi.n	80008ec <HAL_Delay+0x28>
  {
  }
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b004      	add	sp, #16
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000008 	.word	0x20000008

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	0002      	movs	r2, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b7f      	cmp	r3, #127	; 0x7f
 8000920:	d828      	bhi.n	8000974 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <__NVIC_SetPriority+0xd4>)
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b25b      	sxtb	r3, r3
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	33c0      	adds	r3, #192	; 0xc0
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	589b      	ldr	r3, [r3, r2]
 8000932:	1dfa      	adds	r2, r7, #7
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	0011      	movs	r1, r2
 8000938:	2203      	movs	r2, #3
 800093a:	400a      	ands	r2, r1
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	4091      	lsls	r1, r2
 8000942:	000a      	movs	r2, r1
 8000944:	43d2      	mvns	r2, r2
 8000946:	401a      	ands	r2, r3
 8000948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	401a      	ands	r2, r3
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	2303      	movs	r3, #3
 800095a:	4003      	ands	r3, r0
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <__NVIC_SetPriority+0xd4>)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	430a      	orrs	r2, r1
 800096c:	33c0      	adds	r3, #192	; 0xc0
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000972:	e031      	b.n	80009d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <__NVIC_SetPriority+0xd8>)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0019      	movs	r1, r3
 800097c:	230f      	movs	r3, #15
 800097e:	400b      	ands	r3, r1
 8000980:	3b08      	subs	r3, #8
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3306      	adds	r3, #6
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	3304      	adds	r3, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	0011      	movs	r1, r2
 8000994:	2203      	movs	r2, #3
 8000996:	400a      	ands	r2, r1
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	21ff      	movs	r1, #255	; 0xff
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	401a      	ands	r2, r3
 80009a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	401a      	ands	r2, r3
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	2303      	movs	r3, #3
 80009b6:	4003      	ands	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <__NVIC_SetPriority+0xd8>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	001c      	movs	r4, r3
 80009c4:	230f      	movs	r3, #15
 80009c6:	4023      	ands	r3, r4
 80009c8:	3b08      	subs	r3, #8
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	430a      	orrs	r2, r1
 80009ce:	3306      	adds	r3, #6
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	18c3      	adds	r3, r0, r3
 80009d4:	3304      	adds	r3, #4
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b003      	add	sp, #12
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	045b      	lsls	r3, r3, #17
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d301      	bcc.n	8000a00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fc:	2301      	movs	r3, #1
 80009fe:	e010      	b.n	8000a22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <SysTick_Config+0x44>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	3a01      	subs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a08:	2301      	movs	r3, #1
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff ff7c 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x44>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x44>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	1c02      	adds	r2, r0, #0
 8000a40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff ff5d 	bl	800090c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff ffbf 	bl	80009e8 <SysTick_Config>
 8000a6a:	0003      	movs	r3, r0
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b002      	add	sp, #8
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e14f      	b.n	8000d24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d100      	bne.n	8000a9c <HAL_GPIO_Init+0x28>
 8000a9a:	e140      	b.n	8000d1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	43da      	mvns	r2, r3
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	2201      	movs	r2, #1
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	58d3      	ldr	r3, [r2, r3]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2207      	movs	r2, #7
 8000b70:	4013      	ands	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2107      	movs	r1, #7
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	6939      	ldr	r1, [r7, #16]
 8000ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	4013      	ands	r3, r2
 8000be4:	d100      	bne.n	8000be8 <HAL_GPIO_Init+0x174>
 8000be6:	e09a      	b.n	8000d1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b54      	ldr	r3, [pc, #336]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	4b53      	ldr	r3, [pc, #332]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	619a      	str	r2, [r3, #24]
 8000bf4:	4b51      	ldr	r3, [pc, #324]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c00:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	589b      	ldr	r3, [r3, r2]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2203      	movs	r2, #3
 8000c12:	4013      	ands	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	2390      	movs	r3, #144	; 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d013      	beq.n	8000c56 <HAL_GPIO_Init+0x1e2>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a44      	ldr	r2, [pc, #272]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00d      	beq.n	8000c52 <HAL_GPIO_Init+0x1de>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a43      	ldr	r2, [pc, #268]	; (8000d48 <HAL_GPIO_Init+0x2d4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d007      	beq.n	8000c4e <HAL_GPIO_Init+0x1da>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a42      	ldr	r2, [pc, #264]	; (8000d4c <HAL_GPIO_Init+0x2d8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_GPIO_Init+0x1d6>
 8000c46:	2303      	movs	r3, #3
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e004      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e002      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c56:	2300      	movs	r3, #0
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4093      	lsls	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c68:	4935      	ldr	r1, [pc, #212]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	035b      	lsls	r3, r3, #13
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	039b      	lsls	r3, r3, #14
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	40da      	lsrs	r2, r3
 8000d2c:	1e13      	subs	r3, r2, #0
 8000d2e:	d000      	beq.n	8000d32 <HAL_GPIO_Init+0x2be>
 8000d30:	e6a8      	b.n	8000a84 <HAL_GPIO_Init+0x10>
  } 
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b006      	add	sp, #24
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	0008      	movs	r0, r1
 8000d5e:	0011      	movs	r1, r2
 8000d60:	1cbb      	adds	r3, r7, #2
 8000d62:	1c02      	adds	r2, r0, #0
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	1c7b      	adds	r3, r7, #1
 8000d68:	1c0a      	adds	r2, r1, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	1c7b      	adds	r3, r7, #1
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d004      	beq.n	8000d7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d74:	1cbb      	adds	r3, r7, #2
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e003      	b.n	8000d86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	1cbb      	adds	r3, r7, #2
 8000d80:	881a      	ldrh	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e301      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	d100      	bne.n	8000dae <HAL_RCC_OscConfig+0x1e>
 8000dac:	e08d      	b.n	8000eca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dae:	4bc3      	ldr	r3, [pc, #780]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	220c      	movs	r2, #12
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d00e      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dba:	4bc0      	ldr	r3, [pc, #768]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d116      	bne.n	8000df4 <HAL_RCC_OscConfig+0x64>
 8000dc6:	4bbd      	ldr	r3, [pc, #756]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	401a      	ands	r2, r3
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d10d      	bne.n	8000df4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	4bb8      	ldr	r3, [pc, #736]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	029b      	lsls	r3, r3, #10
 8000de0:	4013      	ands	r3, r2
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x56>
 8000de4:	e070      	b.n	8000ec8 <HAL_RCC_OscConfig+0x138>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d000      	beq.n	8000df0 <HAL_RCC_OscConfig+0x60>
 8000dee:	e06b      	b.n	8000ec8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e2d8      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d107      	bne.n	8000e0c <HAL_RCC_OscConfig+0x7c>
 8000dfc:	4baf      	ldr	r3, [pc, #700]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4bae      	ldr	r3, [pc, #696]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	0249      	lsls	r1, r1, #9
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e02f      	b.n	8000e6c <HAL_RCC_OscConfig+0xdc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x9e>
 8000e14:	4ba9      	ldr	r3, [pc, #676]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4ba8      	ldr	r3, [pc, #672]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	49a9      	ldr	r1, [pc, #676]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	4ba6      	ldr	r3, [pc, #664]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4ba5      	ldr	r3, [pc, #660]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e26:	49a7      	ldr	r1, [pc, #668]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e01e      	b.n	8000e6c <HAL_RCC_OscConfig+0xdc>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d10e      	bne.n	8000e54 <HAL_RCC_OscConfig+0xc4>
 8000e36:	4ba1      	ldr	r3, [pc, #644]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4ba0      	ldr	r3, [pc, #640]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	02c9      	lsls	r1, r1, #11
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	4b9d      	ldr	r3, [pc, #628]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b9c      	ldr	r3, [pc, #624]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0xdc>
 8000e54:	4b99      	ldr	r3, [pc, #612]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b98      	ldr	r3, [pc, #608]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	4999      	ldr	r1, [pc, #612]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	4b96      	ldr	r3, [pc, #600]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b95      	ldr	r3, [pc, #596]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e66:	4997      	ldr	r1, [pc, #604]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d014      	beq.n	8000e9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fd1c 	bl	80008b0 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fd17 	bl	80008b0 <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b64      	cmp	r3, #100	; 0x64
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e28a      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0xee>
 8000e9c:	e015      	b.n	8000eca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fd07 	bl	80008b0 <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fd02 	bl	80008b0 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e275      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	4b80      	ldr	r3, [pc, #512]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	029b      	lsls	r3, r3, #10
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x118>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x146>
 8000ed4:	e069      	b.n	8000faa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ed6:	4b79      	ldr	r3, [pc, #484]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	220c      	movs	r2, #12
 8000edc:	4013      	ands	r3, r2
 8000ede:	d00b      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ee0:	4b76      	ldr	r3, [pc, #472]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	220c      	movs	r2, #12
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d11c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x196>
 8000eec:	4b73      	ldr	r3, [pc, #460]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d116      	bne.n	8000f26 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef8:	4b70      	ldr	r3, [pc, #448]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2202      	movs	r2, #2
 8000efe:	4013      	ands	r3, r2
 8000f00:	d005      	beq.n	8000f0e <HAL_RCC_OscConfig+0x17e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d001      	beq.n	8000f0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e24b      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	22f8      	movs	r2, #248	; 0xf8
 8000f14:	4393      	bics	r3, r2
 8000f16:	0019      	movs	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	00da      	lsls	r2, r3, #3
 8000f1e:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f24:	e041      	b.n	8000faa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d024      	beq.n	8000f78 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f2e:	4b63      	ldr	r3, [pc, #396]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fcb9 	bl	80008b0 <HAL_GetTick>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff fcb4 	bl	80008b0 <HAL_GetTick>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e227      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f56:	4b59      	ldr	r3, [pc, #356]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d0f1      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b56      	ldr	r3, [pc, #344]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	22f8      	movs	r2, #248	; 0xf8
 8000f66:	4393      	bics	r3, r2
 8000f68:	0019      	movs	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	00da      	lsls	r2, r3, #3
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e018      	b.n	8000faa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f78:	4b50      	ldr	r3, [pc, #320]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	438a      	bics	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fc94 	bl	80008b0 <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fc8f 	bl	80008b0 <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e202      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d1f1      	bne.n	8000f8e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2208      	movs	r2, #8
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d036      	beq.n	8001022 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d019      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fc72 	bl	80008b0 <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fc6d 	bl	80008b0 <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e1e0      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe4:	4b35      	ldr	r3, [pc, #212]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2202      	movs	r2, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d0f1      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x242>
 8000fee:	e018      	b.n	8001022 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fc58 	bl	80008b0 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001006:	f7ff fc53 	bl	80008b0 <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e1c6      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	2202      	movs	r2, #2
 800101e:	4013      	ands	r3, r2
 8001020:	d1f1      	bne.n	8001006 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2204      	movs	r2, #4
 8001028:	4013      	ands	r3, r2
 800102a:	d100      	bne.n	800102e <HAL_RCC_OscConfig+0x29e>
 800102c:	e0b4      	b.n	8001198 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800102e:	201f      	movs	r0, #31
 8001030:	183b      	adds	r3, r7, r0
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	055b      	lsls	r3, r3, #21
 800103e:	4013      	ands	r3, r2
 8001040:	d110      	bne.n	8001064 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0549      	lsls	r1, r1, #21
 800104c:	430a      	orrs	r2, r1
 800104e:	61da      	str	r2, [r3, #28]
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001052:	69da      	ldr	r2, [r3, #28]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	055b      	lsls	r3, r3, #21
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800105e:	183b      	adds	r3, r7, r0
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4013      	ands	r3, r2
 800106e:	d11a      	bne.n	80010a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0049      	lsls	r1, r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800107e:	f7ff fc17 	bl	80008b0 <HAL_GetTick>
 8001082:	0003      	movs	r3, r0
 8001084:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001088:	f7ff fc12 	bl	80008b0 <HAL_GetTick>
 800108c:	0002      	movs	r2, r0
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e185      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10e      	bne.n	80010cc <HAL_RCC_OscConfig+0x33c>
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 80010b0:	6a1a      	ldr	r2, [r3, #32]
 80010b2:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	621a      	str	r2, [r3, #32]
 80010ba:	e035      	b.n	8001128 <HAL_RCC_OscConfig+0x398>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	fffeffff 	.word	0xfffeffff
 80010c4:	fffbffff 	.word	0xfffbffff
 80010c8:	40007000 	.word	0x40007000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x35e>
 80010d4:	4bb6      	ldr	r3, [pc, #728]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80010d6:	6a1a      	ldr	r2, [r3, #32]
 80010d8:	4bb5      	ldr	r3, [pc, #724]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	621a      	str	r2, [r3, #32]
 80010e0:	4bb3      	ldr	r3, [pc, #716]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4bb2      	ldr	r3, [pc, #712]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80010e6:	2104      	movs	r1, #4
 80010e8:	438a      	bics	r2, r1
 80010ea:	621a      	str	r2, [r3, #32]
 80010ec:	e01c      	b.n	8001128 <HAL_RCC_OscConfig+0x398>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x380>
 80010f6:	4bae      	ldr	r3, [pc, #696]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	4bad      	ldr	r3, [pc, #692]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80010fc:	2104      	movs	r1, #4
 80010fe:	430a      	orrs	r2, r1
 8001100:	621a      	str	r2, [r3, #32]
 8001102:	4bab      	ldr	r3, [pc, #684]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001104:	6a1a      	ldr	r2, [r3, #32]
 8001106:	4baa      	ldr	r3, [pc, #680]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001108:	2101      	movs	r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	621a      	str	r2, [r3, #32]
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0x398>
 8001110:	4ba7      	ldr	r3, [pc, #668]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	4ba6      	ldr	r3, [pc, #664]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001116:	2101      	movs	r1, #1
 8001118:	438a      	bics	r2, r1
 800111a:	621a      	str	r2, [r3, #32]
 800111c:	4ba4      	ldr	r3, [pc, #656]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800111e:	6a1a      	ldr	r2, [r3, #32]
 8001120:	4ba3      	ldr	r3, [pc, #652]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001122:	2104      	movs	r1, #4
 8001124:	438a      	bics	r2, r1
 8001126:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d014      	beq.n	800115a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fbbe 	bl	80008b0 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e009      	b.n	800114e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fbb9 	bl	80008b0 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	4a9b      	ldr	r2, [pc, #620]	; (80013b4 <HAL_RCC_OscConfig+0x624>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e12b      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114e:	4b98      	ldr	r3, [pc, #608]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x3aa>
 8001158:	e013      	b.n	8001182 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fba9 	bl	80008b0 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001162:	e009      	b.n	8001178 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001164:	f7ff fba4 	bl	80008b0 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4a91      	ldr	r2, [pc, #580]	; (80013b4 <HAL_RCC_OscConfig+0x624>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e116      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	4b8d      	ldr	r3, [pc, #564]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	2202      	movs	r2, #2
 800117e:	4013      	ands	r3, r2
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001182:	231f      	movs	r3, #31
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118c:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800118e:	69da      	ldr	r2, [r3, #28]
 8001190:	4b87      	ldr	r3, [pc, #540]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001192:	4989      	ldr	r1, [pc, #548]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001194:	400a      	ands	r2, r1
 8001196:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2210      	movs	r2, #16
 800119e:	4013      	ands	r3, r2
 80011a0:	d063      	beq.n	800126a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d12a      	bne.n	8001200 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011aa:	4b81      	ldr	r3, [pc, #516]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ae:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011b0:	2104      	movs	r1, #4
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011b6:	4b7e      	ldr	r3, [pc, #504]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	4b7d      	ldr	r3, [pc, #500]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fb75 	bl	80008b0 <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011cc:	f7ff fb70 	bl	80008b0 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e0e3      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011de:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d0f1      	beq.n	80011cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e8:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ec:	22f8      	movs	r2, #248	; 0xf8
 80011ee:	4393      	bics	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	00da      	lsls	r2, r3, #3
 80011f8:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
 80011fe:	e034      	b.n	800126a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	3305      	adds	r3, #5
 8001206:	d111      	bne.n	800122c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800120e:	2104      	movs	r1, #4
 8001210:	438a      	bics	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001214:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	22f8      	movs	r2, #248	; 0xf8
 800121a:	4393      	bics	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	00da      	lsls	r2, r3, #3
 8001224:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
 800122a:	e01e      	b.n	800126a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800122c:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800122e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001230:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001232:	2104      	movs	r1, #4
 8001234:	430a      	orrs	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001238:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800123a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123c:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800123e:	2101      	movs	r1, #1
 8001240:	438a      	bics	r2, r1
 8001242:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fb34 	bl	80008b0 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800124e:	f7ff fb2f 	bl	80008b0 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0a2      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	2202      	movs	r2, #2
 8001266:	4013      	ands	r3, r2
 8001268:	d1f1      	bne.n	800124e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d100      	bne.n	8001274 <HAL_RCC_OscConfig+0x4e4>
 8001272:	e097      	b.n	80013a4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	220c      	movs	r2, #12
 800127a:	4013      	ands	r3, r2
 800127c:	2b08      	cmp	r3, #8
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x4f2>
 8001280:	e06b      	b.n	800135a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d14c      	bne.n	8001324 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001290:	494a      	ldr	r1, [pc, #296]	; (80013bc <HAL_RCC_OscConfig+0x62c>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fb0b 	bl	80008b0 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff fb06 	bl	80008b0 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e079      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	049b      	lsls	r3, r3, #18
 80012ba:	4013      	ands	r3, r2
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	220f      	movs	r2, #15
 80012c4:	4393      	bics	r3, r2
 80012c6:	0019      	movs	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a3a      	ldr	r2, [pc, #232]	; (80013c0 <HAL_RCC_OscConfig+0x630>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	431a      	orrs	r2, r3
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012e8:	430a      	orrs	r2, r1
 80012ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	0449      	lsls	r1, r1, #17
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fad9 	bl	80008b0 <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fad4 	bl	80008b0 <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e047      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	049b      	lsls	r3, r3, #18
 800131e:	4013      	ands	r3, r2
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x574>
 8001322:	e03f      	b.n	80013a4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800132a:	4924      	ldr	r1, [pc, #144]	; (80013bc <HAL_RCC_OscConfig+0x62c>)
 800132c:	400a      	ands	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fabe 	bl	80008b0 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fab9 	bl	80008b0 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e02c      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	049b      	lsls	r3, r3, #18
 8001354:	4013      	ands	r3, r2
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x5aa>
 8001358:	e024      	b.n	80013a4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e01f      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	025b      	lsls	r3, r3, #9
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	429a      	cmp	r2, r3
 8001380:	d10e      	bne.n	80013a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	220f      	movs	r2, #15
 8001386:	401a      	ands	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	23f0      	movs	r3, #240	; 0xf0
 8001394:	039b      	lsls	r3, r3, #14
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b008      	add	sp, #32
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	00001388 	.word	0x00001388
 80013b8:	efffffff 	.word	0xefffffff
 80013bc:	feffffff 	.word	0xfeffffff
 80013c0:	ffc2ffff 	.word	0xffc2ffff

080013c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0b3      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013d8:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d911      	bls.n	800140a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4393      	bics	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f8:	4b53      	ldr	r3, [pc, #332]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e09a      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d015      	beq.n	8001440 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2204      	movs	r2, #4
 800141a:	4013      	ands	r3, r2
 800141c:	d006      	beq.n	800142c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800141e:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 8001424:	21e0      	movs	r1, #224	; 0xe0
 8001426:	00c9      	lsls	r1, r1, #3
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	22f0      	movs	r2, #240	; 0xf0
 8001432:	4393      	bics	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	d040      	beq.n	80014cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d114      	bne.n	8001488 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06e      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	049b      	lsls	r3, r3, #18
 8001472:	4013      	ands	r3, r2
 8001474:	d108      	bne.n	8001488 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e062      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e05b      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff fa08 	bl	80008b0 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a4:	e009      	b.n	80014ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a6:	f7ff fa03 	bl	80008b0 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x18c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e042      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1ec      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d211      	bcs.n	80014fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_RCC_ClockConfig+0x184>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e020      	b.n	8001540 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d009      	beq.n	800151c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_RCC_ClockConfig+0x190>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800151c:	f000 f820 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001520:	0001      	movs	r1, r0
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_ClockConfig+0x188>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	220f      	movs	r2, #15
 800152a:	4013      	ands	r3, r2
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x194>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	000a      	movs	r2, r1
 8001532:	40da      	lsrs	r2, r3
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x198>)
 8001536:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff f973 	bl	8000824 <HAL_InitTick>
  
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	00001388 	.word	0x00001388
 8001554:	fffff8ff 	.word	0xfffff8ff
 8001558:	08003110 	.word	0x08003110
 800155c:	20000000 	.word	0x20000000

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	220c      	movs	r2, #12
 8001584:	4013      	ands	r3, r2
 8001586:	2b04      	cmp	r3, #4
 8001588:	d002      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x30>
 800158a:	2b08      	cmp	r3, #8
 800158c:	d003      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x36>
 800158e:	e02c      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001592:	613b      	str	r3, [r7, #16]
      break;
 8001594:	e02c      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	220f      	movs	r2, #15
 800159c:	4013      	ands	r3, r2
 800159e:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	220f      	movs	r2, #15
 80015aa:	4013      	ands	r3, r2
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_RCC_GetSysClockFreq+0xa8>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	4013      	ands	r3, r2
 80015ba:	d009      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	4810      	ldr	r0, [pc, #64]	; (8001600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015c0:	f7fe fdb4 	bl	800012c <__udivsi3>
 80015c4:	0003      	movs	r3, r0
 80015c6:	001a      	movs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4353      	muls	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	000a      	movs	r2, r1
 80015d4:	0152      	lsls	r2, r2, #5
 80015d6:	1a52      	subs	r2, r2, r1
 80015d8:	0193      	lsls	r3, r2, #6
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	185b      	adds	r3, r3, r1
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	e002      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ec:	613b      	str	r3, [r7, #16]
      break;
 80015ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015f0:	693b      	ldr	r3, [r7, #16]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b006      	add	sp, #24
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	007a1200 	.word	0x007a1200
 8001604:	08003128 	.word	0x08003128
 8001608:	08003138 	.word	0x08003138

0800160c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_RCC_GetHCLKFreq+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001624:	f7ff fff2 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001628:	0001      	movs	r1, r0
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	2207      	movs	r2, #7
 8001632:	4013      	ands	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	40d9      	lsrs	r1, r3
 800163a:	000b      	movs	r3, r1
}    
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000
 8001648:	08003120 	.word	0x08003120

0800164c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001668:	e08e      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2017      	movs	r0, #23
 800166c:	183b      	adds	r3, r7, r0
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	055b      	lsls	r3, r3, #21
 800167a:	4013      	ands	r3, r2
 800167c:	d110      	bne.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0549      	lsls	r1, r1, #21
 8001688:	430a      	orrs	r2, r1
 800168a:	61da      	str	r2, [r3, #28]
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	055b      	lsls	r3, r3, #21
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	183b      	adds	r3, r7, r0
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	d11a      	bne.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	0049      	lsls	r1, r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff f8f9 	bl	80008b0 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	e008      	b.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c4:	f7ff f8f4 	bl	80008b0 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e087      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	23c0      	movs	r3, #192	; 0xc0
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d02c      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001704:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0249      	lsls	r1, r1, #9
 8001718:	430a      	orrs	r2, r1
 800171a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001724:	400a      	ands	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff f8bb 	bl	80008b0 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	e009      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff f8b6 	bl	80008b0 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e048      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d0f0      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001764:	4013      	ands	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176e:	430a      	orrs	r2, r1
 8001770:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001782:	4920      	ldr	r1, [pc, #128]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001784:	400a      	ands	r2, r1
 8001786:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d009      	beq.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	2203      	movs	r2, #3
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2220      	movs	r2, #32
 80017ac:	4013      	ands	r3, r2
 80017ae:	d009      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	2210      	movs	r2, #16
 80017b6:	4393      	bics	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	d009      	beq.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b006      	add	sp, #24
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	fffffcff 	.word	0xfffffcff
 80017fc:	fffeffff 	.word	0xfffeffff
 8001800:	00001388 	.word	0x00001388
 8001804:	efffffff 	.word	0xefffffff

08001808 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e081      	b.n	8001926 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7f5b      	ldrb	r3, [r3, #29]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0018      	movs	r0, r3
 8001836:	f7fe fefd 	bl	8000634 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2202      	movs	r2, #2
 800183e:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2210      	movs	r2, #16
 8001848:	4013      	ands	r3, r2
 800184a:	2b10      	cmp	r3, #16
 800184c:	d05c      	beq.n	8001908 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	22ca      	movs	r2, #202	; 0xca
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2253      	movs	r2, #83	; 0x53
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800185e:	250f      	movs	r5, #15
 8001860:	197c      	adds	r4, r7, r5
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f000 fa73 	bl	8001d50 <RTC_EnterInitMode>
 800186a:	0003      	movs	r3, r0
 800186c:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800186e:	0028      	movs	r0, r5
 8001870:	183b      	adds	r3, r7, r0
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d12c      	bne.n	80018d2 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	492b      	ldr	r1, [pc, #172]	; (8001930 <HAL_RTC_Init+0x128>)
 8001884:	400a      	ands	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6919      	ldr	r1, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	041a      	lsls	r2, r3, #16
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80018c4:	183c      	adds	r4, r7, r0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 fa84 	bl	8001dd6 <RTC_ExitInitMode>
 80018ce:	0003      	movs	r3, r0
 80018d0:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d110      	bne.n	80018fe <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4913      	ldr	r1, [pc, #76]	; (8001934 <HAL_RTC_Init+0x12c>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
 8001906:	e003      	b.n	8001910 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001908:	230f      	movs	r3, #15
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001910:	230f      	movs	r3, #15
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001920:	230f      	movs	r3, #15
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	781b      	ldrb	r3, [r3, #0]
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bdb0      	pop	{r4, r5, r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	ff8fffbf 	.word	0xff8fffbf
 8001934:	fffbffff 	.word	0xfffbffff

08001938 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	7f1b      	ldrb	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_RTC_SetTime+0x1c>
 8001950:	2302      	movs	r3, #2
 8001952:	e08e      	b.n	8001a72 <HAL_RTC_SetTime+0x13a>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2202      	movs	r2, #2
 800195e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d125      	bne.n	80019b2 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2240      	movs	r2, #64	; 0x40
 800196e:	4013      	ands	r3, r2
 8001970:	d102      	bne.n	8001978 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	0018      	movs	r0, r3
 800197e:	f000 fa53 	bl	8001e28 <RTC_ByteToBcd2>
 8001982:	0003      	movs	r3, r0
 8001984:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	785b      	ldrb	r3, [r3, #1]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fa4c 	bl	8001e28 <RTC_ByteToBcd2>
 8001990:	0003      	movs	r3, r0
 8001992:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001994:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	789b      	ldrb	r3, [r3, #2]
 800199a:	0018      	movs	r0, r3
 800199c:	f000 fa44 	bl	8001e28 <RTC_ByteToBcd2>
 80019a0:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80019a2:	0022      	movs	r2, r4
 80019a4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	78db      	ldrb	r3, [r3, #3]
 80019aa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e017      	b.n	80019e2 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	4013      	ands	r3, r2
 80019bc:	d102      	bne.n	80019c4 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2200      	movs	r2, #0
 80019c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019d0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80019d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	78db      	ldrb	r3, [r3, #3]
 80019dc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	22ca      	movs	r2, #202	; 0xca
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2253      	movs	r2, #83	; 0x53
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019f2:	2513      	movs	r5, #19
 80019f4:	197c      	adds	r4, r7, r5
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 f9a9 	bl	8001d50 <RTC_EnterInitMode>
 80019fe:	0003      	movs	r3, r0
 8001a00:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001a02:	0028      	movs	r0, r5
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d120      	bne.n	8001a4e <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	491a      	ldr	r1, [pc, #104]	; (8001a7c <HAL_RTC_SetTime+0x144>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4917      	ldr	r1, [pc, #92]	; (8001a80 <HAL_RTC_SetTime+0x148>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6899      	ldr	r1, [r3, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a40:	183c      	adds	r4, r7, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f9c6 	bl	8001dd6 <RTC_ExitInitMode>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001a4e:	2313      	movs	r3, #19
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	22ff      	movs	r2, #255	; 0xff
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]

  return status;
 8001a6c:	2313      	movs	r3, #19
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	781b      	ldrb	r3, [r3, #0]
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b006      	add	sp, #24
 8001a78:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	007f7f7f 	.word	0x007f7f7f
 8001a80:	fffbffff 	.word	0xfffbffff

08001a84 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	045b      	lsls	r3, r3, #17
 8001aa6:	0c5a      	lsrs	r2, r3, #17
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_RTC_GetTime+0xb8>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	223f      	movs	r2, #63	; 0x3f
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	227f      	movs	r2, #127	; 0x7f
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	227f      	movs	r2, #127	; 0x7f
 8001ade:	4013      	ands	r3, r2
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	0d9b      	lsrs	r3, r3, #22
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d11a      	bne.n	8001b32 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f9b2 	bl	8001e6a <RTC_Bcd2ToByte>
 8001b06:	0003      	movs	r3, r0
 8001b08:	001a      	movs	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f9a9 	bl	8001e6a <RTC_Bcd2ToByte>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	789b      	ldrb	r3, [r3, #2]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f9a0 	bl	8001e6a <RTC_Bcd2ToByte>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	007f7f7f 	.word	0x007f7f7f

08001b40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_RTC_SetDate+0x1c>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e07a      	b.n	8001c52 <HAL_RTC_SetDate+0x112>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2202      	movs	r2, #2
 8001b66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <HAL_RTC_SetDate+0x4c>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	001a      	movs	r2, r3
 8001b74:	2310      	movs	r3, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d008      	beq.n	8001b8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	4393      	bics	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	330a      	adds	r3, #10
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11c      	bne.n	8001bcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	78db      	ldrb	r3, [r3, #3]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f946 	bl	8001e28 <RTC_ByteToBcd2>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f93f 	bl	8001e28 <RTC_ByteToBcd2>
 8001baa:	0003      	movs	r3, r0
 8001bac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001bae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	789b      	ldrb	r3, [r3, #2]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f937 	bl	8001e28 <RTC_ByteToBcd2>
 8001bba:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001bbc:	0022      	movs	r2, r4
 8001bbe:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e00e      	b.n	8001bea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001bd8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001bde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	22ca      	movs	r2, #202	; 0xca
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2253      	movs	r2, #83	; 0x53
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001bfa:	2513      	movs	r5, #19
 8001bfc:	197c      	adds	r4, r7, r5
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 f8a5 	bl	8001d50 <RTC_EnterInitMode>
 8001c06:	0003      	movs	r3, r0
 8001c08:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001c0a:	0028      	movs	r0, r5
 8001c0c:	183b      	adds	r3, r7, r0
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10c      	bne.n	8001c2e <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4910      	ldr	r1, [pc, #64]	; (8001c5c <HAL_RTC_SetDate+0x11c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001c20:	183c      	adds	r4, r7, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f8d6 	bl	8001dd6 <RTC_ExitInitMode>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001c2e:	2313      	movs	r3, #19
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]

  return status;
 8001c4c:	2313      	movs	r3, #19
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	781b      	ldrb	r3, [r3, #0]
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b006      	add	sp, #24
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	00ffff3f 	.word	0x00ffff3f

08001c60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <HAL_RTC_GetDate+0x9c>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	223f      	movs	r2, #63	; 0x3f
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	0b5b      	lsrs	r3, r3, #13
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2207      	movs	r2, #7
 8001cac:	4013      	ands	r3, r2
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 f8d3 	bl	8001e6a <RTC_Bcd2ToByte>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 f8ca 	bl	8001e6a <RTC_Bcd2ToByte>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	001a      	movs	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	789b      	ldrb	r3, [r3, #2]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f8c1 	bl	8001e6a <RTC_Bcd2ToByte>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	001a      	movs	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b006      	add	sp, #24
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	00ffff3f 	.word	0x00ffff3f

08001d00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_RTC_WaitForSynchro+0x4c>)
 8001d12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d14:	f7fe fdcc 	bl	80008b0 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d1e:	f7fe fdc7 	bl	80008b0 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad2      	subs	r2, r2, r3
 8001d28:	23fa      	movs	r3, #250	; 0xfa
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d901      	bls.n	8001d34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e006      	b.n	8001d42 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b004      	add	sp, #16
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	00017959 	.word	0x00017959

08001d50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d12b      	bne.n	8001dc8 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d80:	f7fe fd96 	bl	80008b0 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001d88:	e013      	b.n	8001db2 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d8a:	f7fe fd91 	bl	80008b0 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1ad2      	subs	r2, r2, r3
 8001d94:	200f      	movs	r0, #15
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	1839      	adds	r1, r7, r0
 8001d9a:	7809      	ldrb	r1, [r1, #0]
 8001d9c:	7019      	strb	r1, [r3, #0]
 8001d9e:	23fa      	movs	r3, #250	; 0xfa
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d905      	bls.n	8001db2 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2240      	movs	r2, #64	; 0x40
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d104      	bne.n	8001dc8 <RTC_EnterInitMode+0x78>
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d1e0      	bne.n	8001d8a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b004      	add	sp, #16
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001dd6:	b590      	push	{r4, r7, lr}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	240f      	movs	r4, #15
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	438a      	bics	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d10b      	bne.n	8001e1a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ff7b 	bl	8001d00 <HAL_RTC_WaitForSynchro>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d005      	beq.n	8001e1a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b005      	add	sp, #20
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	0002      	movs	r2, r0
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8001e38:	e007      	b.n	8001e4a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	1dfa      	adds	r2, r7, #7
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	3a0a      	subs	r2, #10
 8001e48:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	d8f3      	bhi.n	8001e3a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	0002      	movs	r2, r0
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	001a      	movs	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	210f      	movs	r1, #15
 8001e98:	400b      	ands	r3, r1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	b2db      	uxtb	r3, r3
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b004      	add	sp, #16
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e044      	b.n	8001f44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2278      	movs	r2, #120	; 0x78
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe fbc9 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2224      	movs	r2, #36	; 0x24
 8001ed6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 fa0c 	bl	8002310 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 f8c8 	bl	8002090 <UART_SetConfig>
 8001f00:	0003      	movs	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e01c      	b.n	8001f44 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	490d      	ldr	r1, [pc, #52]	; (8001f4c <HAL_UART_Init+0xa4>)
 8001f16:	400a      	ands	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	212a      	movs	r1, #42	; 0x2a
 8001f26:	438a      	bics	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 fa9b 	bl	8002478 <UART_CheckIdleState>
 8001f42:	0003      	movs	r3, r0
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	ffffb7ff 	.word	0xffffb7ff

08001f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	1dbb      	adds	r3, r7, #6
 8001f5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d000      	beq.n	8001f6a <HAL_UART_Transmit+0x1a>
 8001f68:	e08d      	b.n	8002086 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_UART_Transmit+0x28>
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e085      	b.n	8002088 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	015b      	lsls	r3, r3, #5
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d109      	bne.n	8001f9c <HAL_UART_Transmit+0x4c>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e075      	b.n	8002088 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2284      	movs	r2, #132	; 0x84
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2221      	movs	r2, #33	; 0x21
 8001fa8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001faa:	f7fe fc81 	bl	80008b0 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1dba      	adds	r2, r7, #6
 8001fb6:	2150      	movs	r1, #80	; 0x50
 8001fb8:	8812      	ldrh	r2, [r2, #0]
 8001fba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1dba      	adds	r2, r7, #6
 8001fc0:	2152      	movs	r1, #82	; 0x52
 8001fc2:	8812      	ldrh	r2, [r2, #0]
 8001fc4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	015b      	lsls	r3, r3, #5
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d108      	bne.n	8001fe4 <HAL_UART_Transmit+0x94>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d104      	bne.n	8001fe4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	e003      	b.n	8001fec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fec:	e030      	b.n	8002050 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	f000 fae4 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d004      	beq.n	800200e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e03c      	b.n	8002088 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	05d2      	lsls	r2, r2, #23
 800201e:	0dd2      	lsrs	r2, r2, #23
 8002020:	b292      	uxth	r2, r2
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3302      	adds	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	e008      	b.n	800203e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b292      	uxth	r2, r2
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2252      	movs	r2, #82	; 0x52
 8002042:	5a9b      	ldrh	r3, [r3, r2]
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b299      	uxth	r1, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2252      	movs	r2, #82	; 0x52
 800204e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2252      	movs	r2, #82	; 0x52
 8002054:	5a9b      	ldrh	r3, [r3, r2]
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1c8      	bne.n	8001fee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	0013      	movs	r3, r2
 8002066:	2200      	movs	r2, #0
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	f000 faad 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d004      	beq.n	800207c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e005      	b.n	8002088 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b008      	add	sp, #32
 800208e:	bd80      	pop	{r7, pc}

08002090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002098:	231e      	movs	r3, #30
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a8d      	ldr	r2, [pc, #564]	; (80022f4 <UART_SetConfig+0x264>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a88      	ldr	r2, [pc, #544]	; (80022f8 <UART_SetConfig+0x268>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	; (80022fc <UART_SetConfig+0x26c>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7b      	ldr	r2, [pc, #492]	; (8002300 <UART_SetConfig+0x270>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d127      	bne.n	8002166 <UART_SetConfig+0xd6>
 8002116:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <UART_SetConfig+0x274>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	2203      	movs	r2, #3
 800211c:	4013      	ands	r3, r2
 800211e:	2b03      	cmp	r3, #3
 8002120:	d00d      	beq.n	800213e <UART_SetConfig+0xae>
 8002122:	d81b      	bhi.n	800215c <UART_SetConfig+0xcc>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d014      	beq.n	8002152 <UART_SetConfig+0xc2>
 8002128:	d818      	bhi.n	800215c <UART_SetConfig+0xcc>
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <UART_SetConfig+0xa4>
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00a      	beq.n	8002148 <UART_SetConfig+0xb8>
 8002132:	e013      	b.n	800215c <UART_SetConfig+0xcc>
 8002134:	231f      	movs	r3, #31
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e021      	b.n	8002182 <UART_SetConfig+0xf2>
 800213e:	231f      	movs	r3, #31
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e01c      	b.n	8002182 <UART_SetConfig+0xf2>
 8002148:	231f      	movs	r3, #31
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2204      	movs	r2, #4
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e017      	b.n	8002182 <UART_SetConfig+0xf2>
 8002152:	231f      	movs	r3, #31
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2208      	movs	r2, #8
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e012      	b.n	8002182 <UART_SetConfig+0xf2>
 800215c:	231f      	movs	r3, #31
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2210      	movs	r2, #16
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e00d      	b.n	8002182 <UART_SetConfig+0xf2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a67      	ldr	r2, [pc, #412]	; (8002308 <UART_SetConfig+0x278>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d104      	bne.n	800217a <UART_SetConfig+0xea>
 8002170:	231f      	movs	r3, #31
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e003      	b.n	8002182 <UART_SetConfig+0xf2>
 800217a:	231f      	movs	r3, #31
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2210      	movs	r2, #16
 8002180:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	429a      	cmp	r2, r3
 800218c:	d15c      	bne.n	8002248 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800218e:	231f      	movs	r3, #31
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d015      	beq.n	80021c4 <UART_SetConfig+0x134>
 8002198:	dc18      	bgt.n	80021cc <UART_SetConfig+0x13c>
 800219a:	2b04      	cmp	r3, #4
 800219c:	d00d      	beq.n	80021ba <UART_SetConfig+0x12a>
 800219e:	dc15      	bgt.n	80021cc <UART_SetConfig+0x13c>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <UART_SetConfig+0x11a>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d005      	beq.n	80021b4 <UART_SetConfig+0x124>
 80021a8:	e010      	b.n	80021cc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021aa:	f7ff fa39 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 80021ae:	0003      	movs	r3, r0
 80021b0:	61bb      	str	r3, [r7, #24]
        break;
 80021b2:	e012      	b.n	80021da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <UART_SetConfig+0x27c>)
 80021b6:	61bb      	str	r3, [r7, #24]
        break;
 80021b8:	e00f      	b.n	80021da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ba:	f7ff f9d1 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 80021be:	0003      	movs	r3, r0
 80021c0:	61bb      	str	r3, [r7, #24]
        break;
 80021c2:	e00a      	b.n	80021da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	61bb      	str	r3, [r7, #24]
        break;
 80021ca:	e006      	b.n	80021da <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021d0:	231e      	movs	r3, #30
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
        break;
 80021d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d100      	bne.n	80021e2 <UART_SetConfig+0x152>
 80021e0:	e07a      	b.n	80022d8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	005a      	lsls	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	18d2      	adds	r2, r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0019      	movs	r1, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	f7fd ff99 	bl	800012c <__udivsi3>
 80021fa:	0003      	movs	r3, r0
 80021fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d91c      	bls.n	800223e <UART_SetConfig+0x1ae>
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	025b      	lsls	r3, r3, #9
 800220a:	429a      	cmp	r2, r3
 800220c:	d217      	bcs.n	800223e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	b29a      	uxth	r2, r3
 8002212:	200e      	movs	r0, #14
 8002214:	183b      	adds	r3, r7, r0
 8002216:	210f      	movs	r1, #15
 8002218:	438a      	bics	r2, r1
 800221a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	b29b      	uxth	r3, r3
 8002222:	2207      	movs	r2, #7
 8002224:	4013      	ands	r3, r2
 8002226:	b299      	uxth	r1, r3
 8002228:	183b      	adds	r3, r7, r0
 800222a:	183a      	adds	r2, r7, r0
 800222c:	8812      	ldrh	r2, [r2, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	183a      	adds	r2, r7, r0
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	e04c      	b.n	80022d8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800223e:	231e      	movs	r3, #30
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e047      	b.n	80022d8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d015      	beq.n	800227e <UART_SetConfig+0x1ee>
 8002252:	dc18      	bgt.n	8002286 <UART_SetConfig+0x1f6>
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00d      	beq.n	8002274 <UART_SetConfig+0x1e4>
 8002258:	dc15      	bgt.n	8002286 <UART_SetConfig+0x1f6>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <UART_SetConfig+0x1d4>
 800225e:	2b02      	cmp	r3, #2
 8002260:	d005      	beq.n	800226e <UART_SetConfig+0x1de>
 8002262:	e010      	b.n	8002286 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002264:	f7ff f9dc 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 8002268:	0003      	movs	r3, r0
 800226a:	61bb      	str	r3, [r7, #24]
        break;
 800226c:	e012      	b.n	8002294 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <UART_SetConfig+0x27c>)
 8002270:	61bb      	str	r3, [r7, #24]
        break;
 8002272:	e00f      	b.n	8002294 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002274:	f7ff f974 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8002278:	0003      	movs	r3, r0
 800227a:	61bb      	str	r3, [r7, #24]
        break;
 800227c:	e00a      	b.n	8002294 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	61bb      	str	r3, [r7, #24]
        break;
 8002284:	e006      	b.n	8002294 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800228a:	231e      	movs	r3, #30
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
        break;
 8002292:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01e      	beq.n	80022d8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	085a      	lsrs	r2, r3, #1
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	18d2      	adds	r2, r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0019      	movs	r1, r3
 80022aa:	0010      	movs	r0, r2
 80022ac:	f7fd ff3e 	bl	800012c <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	d90a      	bls.n	80022d0 <UART_SetConfig+0x240>
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d205      	bcs.n	80022d0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	e003      	b.n	80022d8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80022d0:	231e      	movs	r3, #30
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80022e4:	231e      	movs	r3, #30
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	781b      	ldrb	r3, [r3, #0]
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b008      	add	sp, #32
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	ffff69f3 	.word	0xffff69f3
 80022f8:	ffffcfff 	.word	0xffffcfff
 80022fc:	fffff4ff 	.word	0xfffff4ff
 8002300:	40013800 	.word	0x40013800
 8002304:	40021000 	.word	0x40021000
 8002308:	40004400 	.word	0x40004400
 800230c:	007a1200 	.word	0x007a1200

08002310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2208      	movs	r2, #8
 800231e:	4013      	ands	r3, r2
 8002320:	d00b      	beq.n	800233a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <UART_AdvFeatureConfig+0x144>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d00b      	beq.n	800235c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a43      	ldr	r2, [pc, #268]	; (8002458 <UART_AdvFeatureConfig+0x148>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d00b      	beq.n	800237e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a3b      	ldr	r2, [pc, #236]	; (800245c <UART_AdvFeatureConfig+0x14c>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2204      	movs	r2, #4
 8002384:	4013      	ands	r3, r2
 8002386:	d00b      	beq.n	80023a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a34      	ldr	r2, [pc, #208]	; (8002460 <UART_AdvFeatureConfig+0x150>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2210      	movs	r2, #16
 80023a6:	4013      	ands	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <UART_AdvFeatureConfig+0x154>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	2220      	movs	r2, #32
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4a25      	ldr	r2, [pc, #148]	; (8002468 <UART_AdvFeatureConfig+0x158>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2240      	movs	r2, #64	; 0x40
 80023ea:	4013      	ands	r3, r2
 80023ec:	d01d      	beq.n	800242a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <UART_AdvFeatureConfig+0x15c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	035b      	lsls	r3, r3, #13
 800240e:	429a      	cmp	r2, r3
 8002410:	d10b      	bne.n	800242a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <UART_AdvFeatureConfig+0x160>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	4013      	ands	r3, r2
 8002432:	d00b      	beq.n	800244c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <UART_AdvFeatureConfig+0x164>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  }
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	ffff7fff 	.word	0xffff7fff
 8002458:	fffdffff 	.word	0xfffdffff
 800245c:	fffeffff 	.word	0xfffeffff
 8002460:	fffbffff 	.word	0xfffbffff
 8002464:	ffffefff 	.word	0xffffefff
 8002468:	ffffdfff 	.word	0xffffdfff
 800246c:	ffefffff 	.word	0xffefffff
 8002470:	ff9fffff 	.word	0xff9fffff
 8002474:	fff7ffff 	.word	0xfff7ffff

08002478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b092      	sub	sp, #72	; 0x48
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2284      	movs	r2, #132	; 0x84
 8002484:	2100      	movs	r1, #0
 8002486:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002488:	f7fe fa12 	bl	80008b0 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2208      	movs	r2, #8
 8002498:	4013      	ands	r3, r2
 800249a:	2b08      	cmp	r3, #8
 800249c:	d12c      	bne.n	80024f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	0391      	lsls	r1, r2, #14
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4a46      	ldr	r2, [pc, #280]	; (80025c0 <UART_CheckIdleState+0x148>)
 80024a8:	9200      	str	r2, [sp, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f000 f88c 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d021      	beq.n	80024f8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b4:	f3ef 8310 	mrs	r3, PRIMASK
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	f383 8810 	msr	PRIMASK, r3
}
 80024e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2278      	movs	r2, #120	; 0x78
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e05f      	b.n	80025b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d146      	bne.n	8002594 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	03d1      	lsls	r1, r2, #15
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <UART_CheckIdleState+0x148>)
 8002510:	9200      	str	r2, [sp, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	f000 f858 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d03b      	beq.n	8002594 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251c:	f3ef 8310 	mrs	r3, PRIMASK
 8002520:	60fb      	str	r3, [r7, #12]
  return(result);
 8002522:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
 8002526:	2301      	movs	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4921      	ldr	r1, [pc, #132]	; (80025c4 <UART_CheckIdleState+0x14c>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	61bb      	str	r3, [r7, #24]
  return(result);
 8002554:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
 8002558:	2301      	movs	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	2120      	movs	r1, #32
 8002586:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2278      	movs	r2, #120	; 0x78
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e011      	b.n	80025b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	2120      	movs	r1, #32
 80025a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2278      	movs	r2, #120	; 0x78
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b010      	add	sp, #64	; 0x40
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	01ffffff 	.word	0x01ffffff
 80025c4:	fffffedf 	.word	0xfffffedf

080025c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	e051      	b.n	800267e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3301      	adds	r3, #1
 80025de:	d04e      	beq.n	800267e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7fe f966 	bl	80008b0 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e051      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	d03b      	beq.n	800267e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d038      	beq.n	800267e <UART_WaitOnFlagUntilTimeout+0xb6>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d035      	beq.n	800267e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2208      	movs	r2, #8
 800261a:	4013      	ands	r3, r2
 800261c:	2b08      	cmp	r3, #8
 800261e:	d111      	bne.n	8002644 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2208      	movs	r2, #8
 8002626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f83c 	bl	80026a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2284      	movs	r2, #132	; 0x84
 8002634:	2108      	movs	r1, #8
 8002636:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2278      	movs	r2, #120	; 0x78
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02c      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	401a      	ands	r2, r3
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	429a      	cmp	r2, r3
 8002656:	d112      	bne.n	800267e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 f81f 	bl	80026a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2284      	movs	r2, #132	; 0x84
 800266e:	2120      	movs	r1, #32
 8002670:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2278      	movs	r2, #120	; 0x78
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e00f      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	425a      	negs	r2, r3
 800268e:	4153      	adcs	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	001a      	movs	r2, r3
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d09e      	beq.n	80025da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	; 0x38
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b0:	f3ef 8310 	mrs	r3, PRIMASK
 80026b4:	617b      	str	r3, [r7, #20]
  return(result);
 80026b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ba:	2301      	movs	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4926      	ldr	r1, [pc, #152]	; (800276c <UART_EndRxTransfer+0xc4>)
 80026d2:	400a      	ands	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f383 8810 	msr	PRIMASK, r3
}
 80026e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e2:	f3ef 8310 	mrs	r3, PRIMASK
 80026e6:	623b      	str	r3, [r7, #32]
  return(result);
 80026e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
 80026ec:	2301      	movs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f383 8810 	msr	PRIMASK, r3
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2101      	movs	r1, #1
 8002704:	438a      	bics	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	f383 8810 	msr	PRIMASK, r3
}
 8002712:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	2b01      	cmp	r3, #1
 800271a:	d118      	bne.n	800274e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271c:	f3ef 8310 	mrs	r3, PRIMASK
 8002720:	60bb      	str	r3, [r7, #8]
  return(result);
 8002722:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002726:	2301      	movs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2110      	movs	r1, #16
 800273e:	438a      	bics	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f383 8810 	msr	PRIMASK, r3
}
 800274c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	2120      	movs	r1, #32
 8002754:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b00e      	add	sp, #56	; 0x38
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	fffffedf 	.word	0xfffffedf

08002770 <__errno>:
 8002770:	4b01      	ldr	r3, [pc, #4]	; (8002778 <__errno+0x8>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	4770      	bx	lr
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	2000000c 	.word	0x2000000c

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	2600      	movs	r6, #0
 8002780:	4d0c      	ldr	r5, [pc, #48]	; (80027b4 <__libc_init_array+0x38>)
 8002782:	4c0d      	ldr	r4, [pc, #52]	; (80027b8 <__libc_init_array+0x3c>)
 8002784:	1b64      	subs	r4, r4, r5
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	2600      	movs	r6, #0
 800278e:	f000 fc9f 	bl	80030d0 <_init>
 8002792:	4d0a      	ldr	r5, [pc, #40]	; (80027bc <__libc_init_array+0x40>)
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <__libc_init_array+0x44>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	00b3      	lsls	r3, r6, #2
 80027a2:	58eb      	ldr	r3, [r5, r3]
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	00b3      	lsls	r3, r6, #2
 80027ac:	58eb      	ldr	r3, [r5, r3]
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	0800317c 	.word	0x0800317c
 80027b8:	0800317c 	.word	0x0800317c
 80027bc:	0800317c 	.word	0x0800317c
 80027c0:	08003180 	.word	0x08003180

080027c4 <memset>:
 80027c4:	0003      	movs	r3, r0
 80027c6:	1882      	adds	r2, r0, r2
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d100      	bne.n	80027ce <memset+0xa>
 80027cc:	4770      	bx	lr
 80027ce:	7019      	strb	r1, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	e7f9      	b.n	80027c8 <memset+0x4>

080027d4 <sniprintf>:
 80027d4:	b40c      	push	{r2, r3}
 80027d6:	b530      	push	{r4, r5, lr}
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <sniprintf+0x64>)
 80027da:	000c      	movs	r4, r1
 80027dc:	681d      	ldr	r5, [r3, #0]
 80027de:	b09d      	sub	sp, #116	; 0x74
 80027e0:	2900      	cmp	r1, #0
 80027e2:	da08      	bge.n	80027f6 <sniprintf+0x22>
 80027e4:	238b      	movs	r3, #139	; 0x8b
 80027e6:	2001      	movs	r0, #1
 80027e8:	602b      	str	r3, [r5, #0]
 80027ea:	4240      	negs	r0, r0
 80027ec:	b01d      	add	sp, #116	; 0x74
 80027ee:	bc30      	pop	{r4, r5}
 80027f0:	bc08      	pop	{r3}
 80027f2:	b002      	add	sp, #8
 80027f4:	4718      	bx	r3
 80027f6:	2382      	movs	r3, #130	; 0x82
 80027f8:	466a      	mov	r2, sp
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	8293      	strh	r3, [r2, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	9002      	str	r0, [sp, #8]
 8002802:	9006      	str	r0, [sp, #24]
 8002804:	4299      	cmp	r1, r3
 8002806:	d000      	beq.n	800280a <sniprintf+0x36>
 8002808:	1e4b      	subs	r3, r1, #1
 800280a:	9304      	str	r3, [sp, #16]
 800280c:	9307      	str	r3, [sp, #28]
 800280e:	2301      	movs	r3, #1
 8002810:	466a      	mov	r2, sp
 8002812:	425b      	negs	r3, r3
 8002814:	82d3      	strh	r3, [r2, #22]
 8002816:	0028      	movs	r0, r5
 8002818:	ab21      	add	r3, sp, #132	; 0x84
 800281a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800281c:	a902      	add	r1, sp, #8
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	f000 f86e 	bl	8002900 <_svfiprintf_r>
 8002824:	1c43      	adds	r3, r0, #1
 8002826:	da01      	bge.n	800282c <sniprintf+0x58>
 8002828:	238b      	movs	r3, #139	; 0x8b
 800282a:	602b      	str	r3, [r5, #0]
 800282c:	2c00      	cmp	r4, #0
 800282e:	d0dd      	beq.n	80027ec <sniprintf+0x18>
 8002830:	2300      	movs	r3, #0
 8002832:	9a02      	ldr	r2, [sp, #8]
 8002834:	7013      	strb	r3, [r2, #0]
 8002836:	e7d9      	b.n	80027ec <sniprintf+0x18>
 8002838:	2000000c 	.word	0x2000000c

0800283c <__ssputs_r>:
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	688e      	ldr	r6, [r1, #8]
 8002840:	b085      	sub	sp, #20
 8002842:	0007      	movs	r7, r0
 8002844:	000c      	movs	r4, r1
 8002846:	9203      	str	r2, [sp, #12]
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	429e      	cmp	r6, r3
 800284c:	d83c      	bhi.n	80028c8 <__ssputs_r+0x8c>
 800284e:	2390      	movs	r3, #144	; 0x90
 8002850:	898a      	ldrh	r2, [r1, #12]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	421a      	tst	r2, r3
 8002856:	d034      	beq.n	80028c2 <__ssputs_r+0x86>
 8002858:	6909      	ldr	r1, [r1, #16]
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	6960      	ldr	r0, [r4, #20]
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	2303      	movs	r3, #3
 8002864:	4343      	muls	r3, r0
 8002866:	0fdd      	lsrs	r5, r3, #31
 8002868:	18ed      	adds	r5, r5, r3
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	9802      	ldr	r0, [sp, #8]
 800286e:	3301      	adds	r3, #1
 8002870:	181b      	adds	r3, r3, r0
 8002872:	106d      	asrs	r5, r5, #1
 8002874:	42ab      	cmp	r3, r5
 8002876:	d900      	bls.n	800287a <__ssputs_r+0x3e>
 8002878:	001d      	movs	r5, r3
 800287a:	0553      	lsls	r3, r2, #21
 800287c:	d532      	bpl.n	80028e4 <__ssputs_r+0xa8>
 800287e:	0029      	movs	r1, r5
 8002880:	0038      	movs	r0, r7
 8002882:	f000 fb53 	bl	8002f2c <_malloc_r>
 8002886:	1e06      	subs	r6, r0, #0
 8002888:	d109      	bne.n	800289e <__ssputs_r+0x62>
 800288a:	230c      	movs	r3, #12
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	2001      	movs	r0, #1
 8002892:	89a2      	ldrh	r2, [r4, #12]
 8002894:	4240      	negs	r0, r0
 8002896:	4313      	orrs	r3, r2
 8002898:	81a3      	strh	r3, [r4, #12]
 800289a:	b005      	add	sp, #20
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	9a02      	ldr	r2, [sp, #8]
 80028a0:	6921      	ldr	r1, [r4, #16]
 80028a2:	f000 faba 	bl	8002e1a <memcpy>
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	4a14      	ldr	r2, [pc, #80]	; (80028fc <__ssputs_r+0xc0>)
 80028aa:	401a      	ands	r2, r3
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	4313      	orrs	r3, r2
 80028b0:	81a3      	strh	r3, [r4, #12]
 80028b2:	9b02      	ldr	r3, [sp, #8]
 80028b4:	6126      	str	r6, [r4, #16]
 80028b6:	18f6      	adds	r6, r6, r3
 80028b8:	6026      	str	r6, [r4, #0]
 80028ba:	6165      	str	r5, [r4, #20]
 80028bc:	9e01      	ldr	r6, [sp, #4]
 80028be:	1aed      	subs	r5, r5, r3
 80028c0:	60a5      	str	r5, [r4, #8]
 80028c2:	9b01      	ldr	r3, [sp, #4]
 80028c4:	429e      	cmp	r6, r3
 80028c6:	d900      	bls.n	80028ca <__ssputs_r+0x8e>
 80028c8:	9e01      	ldr	r6, [sp, #4]
 80028ca:	0032      	movs	r2, r6
 80028cc:	9903      	ldr	r1, [sp, #12]
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	f000 faac 	bl	8002e2c <memmove>
 80028d4:	68a3      	ldr	r3, [r4, #8]
 80028d6:	2000      	movs	r0, #0
 80028d8:	1b9b      	subs	r3, r3, r6
 80028da:	60a3      	str	r3, [r4, #8]
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	199e      	adds	r6, r3, r6
 80028e0:	6026      	str	r6, [r4, #0]
 80028e2:	e7da      	b.n	800289a <__ssputs_r+0x5e>
 80028e4:	002a      	movs	r2, r5
 80028e6:	0038      	movs	r0, r7
 80028e8:	f000 fb96 	bl	8003018 <_realloc_r>
 80028ec:	1e06      	subs	r6, r0, #0
 80028ee:	d1e0      	bne.n	80028b2 <__ssputs_r+0x76>
 80028f0:	0038      	movs	r0, r7
 80028f2:	6921      	ldr	r1, [r4, #16]
 80028f4:	f000 faae 	bl	8002e54 <_free_r>
 80028f8:	e7c7      	b.n	800288a <__ssputs_r+0x4e>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	fffffb7f 	.word	0xfffffb7f

08002900 <_svfiprintf_r>:
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002902:	b0a1      	sub	sp, #132	; 0x84
 8002904:	9003      	str	r0, [sp, #12]
 8002906:	001d      	movs	r5, r3
 8002908:	898b      	ldrh	r3, [r1, #12]
 800290a:	000f      	movs	r7, r1
 800290c:	0016      	movs	r6, r2
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	d511      	bpl.n	8002936 <_svfiprintf_r+0x36>
 8002912:	690b      	ldr	r3, [r1, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <_svfiprintf_r+0x36>
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	f000 fb07 	bl	8002f2c <_malloc_r>
 800291e:	6038      	str	r0, [r7, #0]
 8002920:	6138      	str	r0, [r7, #16]
 8002922:	2800      	cmp	r0, #0
 8002924:	d105      	bne.n	8002932 <_svfiprintf_r+0x32>
 8002926:	230c      	movs	r3, #12
 8002928:	9a03      	ldr	r2, [sp, #12]
 800292a:	3801      	subs	r0, #1
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	b021      	add	sp, #132	; 0x84
 8002930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002932:	2340      	movs	r3, #64	; 0x40
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	2300      	movs	r3, #0
 8002938:	ac08      	add	r4, sp, #32
 800293a:	6163      	str	r3, [r4, #20]
 800293c:	3320      	adds	r3, #32
 800293e:	7663      	strb	r3, [r4, #25]
 8002940:	3310      	adds	r3, #16
 8002942:	76a3      	strb	r3, [r4, #26]
 8002944:	9507      	str	r5, [sp, #28]
 8002946:	0035      	movs	r5, r6
 8002948:	782b      	ldrb	r3, [r5, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <_svfiprintf_r+0x52>
 800294e:	2b25      	cmp	r3, #37	; 0x25
 8002950:	d147      	bne.n	80029e2 <_svfiprintf_r+0xe2>
 8002952:	1bab      	subs	r3, r5, r6
 8002954:	9305      	str	r3, [sp, #20]
 8002956:	42b5      	cmp	r5, r6
 8002958:	d00c      	beq.n	8002974 <_svfiprintf_r+0x74>
 800295a:	0032      	movs	r2, r6
 800295c:	0039      	movs	r1, r7
 800295e:	9803      	ldr	r0, [sp, #12]
 8002960:	f7ff ff6c 	bl	800283c <__ssputs_r>
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	d100      	bne.n	800296a <_svfiprintf_r+0x6a>
 8002968:	e0ae      	b.n	8002ac8 <_svfiprintf_r+0x1c8>
 800296a:	6962      	ldr	r2, [r4, #20]
 800296c:	9b05      	ldr	r3, [sp, #20]
 800296e:	4694      	mov	ip, r2
 8002970:	4463      	add	r3, ip
 8002972:	6163      	str	r3, [r4, #20]
 8002974:	782b      	ldrb	r3, [r5, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d100      	bne.n	800297c <_svfiprintf_r+0x7c>
 800297a:	e0a5      	b.n	8002ac8 <_svfiprintf_r+0x1c8>
 800297c:	2201      	movs	r2, #1
 800297e:	2300      	movs	r3, #0
 8002980:	4252      	negs	r2, r2
 8002982:	6062      	str	r2, [r4, #4]
 8002984:	a904      	add	r1, sp, #16
 8002986:	3254      	adds	r2, #84	; 0x54
 8002988:	1852      	adds	r2, r2, r1
 800298a:	1c6e      	adds	r6, r5, #1
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	60e3      	str	r3, [r4, #12]
 8002990:	60a3      	str	r3, [r4, #8]
 8002992:	7013      	strb	r3, [r2, #0]
 8002994:	65a3      	str	r3, [r4, #88]	; 0x58
 8002996:	2205      	movs	r2, #5
 8002998:	7831      	ldrb	r1, [r6, #0]
 800299a:	4854      	ldr	r0, [pc, #336]	; (8002aec <_svfiprintf_r+0x1ec>)
 800299c:	f000 fa32 	bl	8002e04 <memchr>
 80029a0:	1c75      	adds	r5, r6, #1
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d11f      	bne.n	80029e6 <_svfiprintf_r+0xe6>
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	06d3      	lsls	r3, r2, #27
 80029aa:	d504      	bpl.n	80029b6 <_svfiprintf_r+0xb6>
 80029ac:	2353      	movs	r3, #83	; 0x53
 80029ae:	a904      	add	r1, sp, #16
 80029b0:	185b      	adds	r3, r3, r1
 80029b2:	2120      	movs	r1, #32
 80029b4:	7019      	strb	r1, [r3, #0]
 80029b6:	0713      	lsls	r3, r2, #28
 80029b8:	d504      	bpl.n	80029c4 <_svfiprintf_r+0xc4>
 80029ba:	2353      	movs	r3, #83	; 0x53
 80029bc:	a904      	add	r1, sp, #16
 80029be:	185b      	adds	r3, r3, r1
 80029c0:	212b      	movs	r1, #43	; 0x2b
 80029c2:	7019      	strb	r1, [r3, #0]
 80029c4:	7833      	ldrb	r3, [r6, #0]
 80029c6:	2b2a      	cmp	r3, #42	; 0x2a
 80029c8:	d016      	beq.n	80029f8 <_svfiprintf_r+0xf8>
 80029ca:	0035      	movs	r5, r6
 80029cc:	2100      	movs	r1, #0
 80029ce:	200a      	movs	r0, #10
 80029d0:	68e3      	ldr	r3, [r4, #12]
 80029d2:	782a      	ldrb	r2, [r5, #0]
 80029d4:	1c6e      	adds	r6, r5, #1
 80029d6:	3a30      	subs	r2, #48	; 0x30
 80029d8:	2a09      	cmp	r2, #9
 80029da:	d94e      	bls.n	8002a7a <_svfiprintf_r+0x17a>
 80029dc:	2900      	cmp	r1, #0
 80029de:	d111      	bne.n	8002a04 <_svfiprintf_r+0x104>
 80029e0:	e017      	b.n	8002a12 <_svfiprintf_r+0x112>
 80029e2:	3501      	adds	r5, #1
 80029e4:	e7b0      	b.n	8002948 <_svfiprintf_r+0x48>
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <_svfiprintf_r+0x1ec>)
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	1ac0      	subs	r0, r0, r3
 80029ec:	2301      	movs	r3, #1
 80029ee:	4083      	lsls	r3, r0
 80029f0:	4313      	orrs	r3, r2
 80029f2:	002e      	movs	r6, r5
 80029f4:	6023      	str	r3, [r4, #0]
 80029f6:	e7ce      	b.n	8002996 <_svfiprintf_r+0x96>
 80029f8:	9b07      	ldr	r3, [sp, #28]
 80029fa:	1d19      	adds	r1, r3, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	9107      	str	r1, [sp, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db01      	blt.n	8002a08 <_svfiprintf_r+0x108>
 8002a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a06:	e004      	b.n	8002a12 <_svfiprintf_r+0x112>
 8002a08:	425b      	negs	r3, r3
 8002a0a:	60e3      	str	r3, [r4, #12]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	782b      	ldrb	r3, [r5, #0]
 8002a14:	2b2e      	cmp	r3, #46	; 0x2e
 8002a16:	d10a      	bne.n	8002a2e <_svfiprintf_r+0x12e>
 8002a18:	786b      	ldrb	r3, [r5, #1]
 8002a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a1c:	d135      	bne.n	8002a8a <_svfiprintf_r+0x18a>
 8002a1e:	9b07      	ldr	r3, [sp, #28]
 8002a20:	3502      	adds	r5, #2
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	9207      	str	r2, [sp, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db2b      	blt.n	8002a84 <_svfiprintf_r+0x184>
 8002a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a2e:	4e30      	ldr	r6, [pc, #192]	; (8002af0 <_svfiprintf_r+0x1f0>)
 8002a30:	2203      	movs	r2, #3
 8002a32:	0030      	movs	r0, r6
 8002a34:	7829      	ldrb	r1, [r5, #0]
 8002a36:	f000 f9e5 	bl	8002e04 <memchr>
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d006      	beq.n	8002a4c <_svfiprintf_r+0x14c>
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	1b80      	subs	r0, r0, r6
 8002a42:	4083      	lsls	r3, r0
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	3501      	adds	r5, #1
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	7829      	ldrb	r1, [r5, #0]
 8002a4e:	2206      	movs	r2, #6
 8002a50:	4828      	ldr	r0, [pc, #160]	; (8002af4 <_svfiprintf_r+0x1f4>)
 8002a52:	1c6e      	adds	r6, r5, #1
 8002a54:	7621      	strb	r1, [r4, #24]
 8002a56:	f000 f9d5 	bl	8002e04 <memchr>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d03c      	beq.n	8002ad8 <_svfiprintf_r+0x1d8>
 8002a5e:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <_svfiprintf_r+0x1f8>)
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d125      	bne.n	8002ab0 <_svfiprintf_r+0x1b0>
 8002a64:	2207      	movs	r2, #7
 8002a66:	9b07      	ldr	r3, [sp, #28]
 8002a68:	3307      	adds	r3, #7
 8002a6a:	4393      	bics	r3, r2
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	9307      	str	r3, [sp, #28]
 8002a70:	6963      	ldr	r3, [r4, #20]
 8002a72:	9a04      	ldr	r2, [sp, #16]
 8002a74:	189b      	adds	r3, r3, r2
 8002a76:	6163      	str	r3, [r4, #20]
 8002a78:	e765      	b.n	8002946 <_svfiprintf_r+0x46>
 8002a7a:	4343      	muls	r3, r0
 8002a7c:	0035      	movs	r5, r6
 8002a7e:	2101      	movs	r1, #1
 8002a80:	189b      	adds	r3, r3, r2
 8002a82:	e7a6      	b.n	80029d2 <_svfiprintf_r+0xd2>
 8002a84:	2301      	movs	r3, #1
 8002a86:	425b      	negs	r3, r3
 8002a88:	e7d0      	b.n	8002a2c <_svfiprintf_r+0x12c>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	200a      	movs	r0, #10
 8002a8e:	001a      	movs	r2, r3
 8002a90:	3501      	adds	r5, #1
 8002a92:	6063      	str	r3, [r4, #4]
 8002a94:	7829      	ldrb	r1, [r5, #0]
 8002a96:	1c6e      	adds	r6, r5, #1
 8002a98:	3930      	subs	r1, #48	; 0x30
 8002a9a:	2909      	cmp	r1, #9
 8002a9c:	d903      	bls.n	8002aa6 <_svfiprintf_r+0x1a6>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0c5      	beq.n	8002a2e <_svfiprintf_r+0x12e>
 8002aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8002aa4:	e7c3      	b.n	8002a2e <_svfiprintf_r+0x12e>
 8002aa6:	4342      	muls	r2, r0
 8002aa8:	0035      	movs	r5, r6
 8002aaa:	2301      	movs	r3, #1
 8002aac:	1852      	adds	r2, r2, r1
 8002aae:	e7f1      	b.n	8002a94 <_svfiprintf_r+0x194>
 8002ab0:	ab07      	add	r3, sp, #28
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	003a      	movs	r2, r7
 8002ab6:	0021      	movs	r1, r4
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_svfiprintf_r+0x1fc>)
 8002aba:	9803      	ldr	r0, [sp, #12]
 8002abc:	e000      	b.n	8002ac0 <_svfiprintf_r+0x1c0>
 8002abe:	bf00      	nop
 8002ac0:	9004      	str	r0, [sp, #16]
 8002ac2:	9b04      	ldr	r3, [sp, #16]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d1d3      	bne.n	8002a70 <_svfiprintf_r+0x170>
 8002ac8:	89bb      	ldrh	r3, [r7, #12]
 8002aca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002acc:	065b      	lsls	r3, r3, #25
 8002ace:	d400      	bmi.n	8002ad2 <_svfiprintf_r+0x1d2>
 8002ad0:	e72d      	b.n	800292e <_svfiprintf_r+0x2e>
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	4240      	negs	r0, r0
 8002ad6:	e72a      	b.n	800292e <_svfiprintf_r+0x2e>
 8002ad8:	ab07      	add	r3, sp, #28
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	003a      	movs	r2, r7
 8002ade:	0021      	movs	r1, r4
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <_svfiprintf_r+0x1fc>)
 8002ae2:	9803      	ldr	r0, [sp, #12]
 8002ae4:	f000 f87c 	bl	8002be0 <_printf_i>
 8002ae8:	e7ea      	b.n	8002ac0 <_svfiprintf_r+0x1c0>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	08003148 	.word	0x08003148
 8002af0:	0800314e 	.word	0x0800314e
 8002af4:	08003152 	.word	0x08003152
 8002af8:	00000000 	.word	0x00000000
 8002afc:	0800283d 	.word	0x0800283d

08002b00 <_printf_common>:
 8002b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b02:	0015      	movs	r5, r2
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	688a      	ldr	r2, [r1, #8]
 8002b08:	690b      	ldr	r3, [r1, #16]
 8002b0a:	000c      	movs	r4, r1
 8002b0c:	9000      	str	r0, [sp, #0]
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	da00      	bge.n	8002b14 <_printf_common+0x14>
 8002b12:	0013      	movs	r3, r2
 8002b14:	0022      	movs	r2, r4
 8002b16:	602b      	str	r3, [r5, #0]
 8002b18:	3243      	adds	r2, #67	; 0x43
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	2a00      	cmp	r2, #0
 8002b1e:	d001      	beq.n	8002b24 <_printf_common+0x24>
 8002b20:	3301      	adds	r3, #1
 8002b22:	602b      	str	r3, [r5, #0]
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	069b      	lsls	r3, r3, #26
 8002b28:	d502      	bpl.n	8002b30 <_printf_common+0x30>
 8002b2a:	682b      	ldr	r3, [r5, #0]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	602b      	str	r3, [r5, #0]
 8002b30:	6822      	ldr	r2, [r4, #0]
 8002b32:	2306      	movs	r3, #6
 8002b34:	0017      	movs	r7, r2
 8002b36:	401f      	ands	r7, r3
 8002b38:	421a      	tst	r2, r3
 8002b3a:	d027      	beq.n	8002b8c <_printf_common+0x8c>
 8002b3c:	0023      	movs	r3, r4
 8002b3e:	3343      	adds	r3, #67	; 0x43
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	1e5a      	subs	r2, r3, #1
 8002b44:	4193      	sbcs	r3, r2
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	0692      	lsls	r2, r2, #26
 8002b4a:	d430      	bmi.n	8002bae <_printf_common+0xae>
 8002b4c:	0022      	movs	r2, r4
 8002b4e:	9901      	ldr	r1, [sp, #4]
 8002b50:	9800      	ldr	r0, [sp, #0]
 8002b52:	9e08      	ldr	r6, [sp, #32]
 8002b54:	3243      	adds	r2, #67	; 0x43
 8002b56:	47b0      	blx	r6
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	d025      	beq.n	8002ba8 <_printf_common+0xa8>
 8002b5c:	2306      	movs	r3, #6
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	682a      	ldr	r2, [r5, #0]
 8002b62:	68e1      	ldr	r1, [r4, #12]
 8002b64:	2500      	movs	r5, #0
 8002b66:	4003      	ands	r3, r0
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d103      	bne.n	8002b74 <_printf_common+0x74>
 8002b6c:	1a8d      	subs	r5, r1, r2
 8002b6e:	43eb      	mvns	r3, r5
 8002b70:	17db      	asrs	r3, r3, #31
 8002b72:	401d      	ands	r5, r3
 8002b74:	68a3      	ldr	r3, [r4, #8]
 8002b76:	6922      	ldr	r2, [r4, #16]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	dd01      	ble.n	8002b80 <_printf_common+0x80>
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	18ed      	adds	r5, r5, r3
 8002b80:	2700      	movs	r7, #0
 8002b82:	42bd      	cmp	r5, r7
 8002b84:	d120      	bne.n	8002bc8 <_printf_common+0xc8>
 8002b86:	2000      	movs	r0, #0
 8002b88:	e010      	b.n	8002bac <_printf_common+0xac>
 8002b8a:	3701      	adds	r7, #1
 8002b8c:	68e3      	ldr	r3, [r4, #12]
 8002b8e:	682a      	ldr	r2, [r5, #0]
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	42bb      	cmp	r3, r7
 8002b94:	ddd2      	ble.n	8002b3c <_printf_common+0x3c>
 8002b96:	0022      	movs	r2, r4
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9901      	ldr	r1, [sp, #4]
 8002b9c:	9800      	ldr	r0, [sp, #0]
 8002b9e:	9e08      	ldr	r6, [sp, #32]
 8002ba0:	3219      	adds	r2, #25
 8002ba2:	47b0      	blx	r6
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d1f0      	bne.n	8002b8a <_printf_common+0x8a>
 8002ba8:	2001      	movs	r0, #1
 8002baa:	4240      	negs	r0, r0
 8002bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bae:	2030      	movs	r0, #48	; 0x30
 8002bb0:	18e1      	adds	r1, r4, r3
 8002bb2:	3143      	adds	r1, #67	; 0x43
 8002bb4:	7008      	strb	r0, [r1, #0]
 8002bb6:	0021      	movs	r1, r4
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	3145      	adds	r1, #69	; 0x45
 8002bbc:	7809      	ldrb	r1, [r1, #0]
 8002bbe:	18a2      	adds	r2, r4, r2
 8002bc0:	3243      	adds	r2, #67	; 0x43
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	7011      	strb	r1, [r2, #0]
 8002bc6:	e7c1      	b.n	8002b4c <_printf_common+0x4c>
 8002bc8:	0022      	movs	r2, r4
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9901      	ldr	r1, [sp, #4]
 8002bce:	9800      	ldr	r0, [sp, #0]
 8002bd0:	9e08      	ldr	r6, [sp, #32]
 8002bd2:	321a      	adds	r2, #26
 8002bd4:	47b0      	blx	r6
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d0e6      	beq.n	8002ba8 <_printf_common+0xa8>
 8002bda:	3701      	adds	r7, #1
 8002bdc:	e7d1      	b.n	8002b82 <_printf_common+0x82>
	...

08002be0 <_printf_i>:
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	9206      	str	r2, [sp, #24]
 8002be6:	000a      	movs	r2, r1
 8002be8:	3243      	adds	r2, #67	; 0x43
 8002bea:	9307      	str	r3, [sp, #28]
 8002bec:	9005      	str	r0, [sp, #20]
 8002bee:	9204      	str	r2, [sp, #16]
 8002bf0:	7e0a      	ldrb	r2, [r1, #24]
 8002bf2:	000c      	movs	r4, r1
 8002bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002bf6:	2a78      	cmp	r2, #120	; 0x78
 8002bf8:	d807      	bhi.n	8002c0a <_printf_i+0x2a>
 8002bfa:	2a62      	cmp	r2, #98	; 0x62
 8002bfc:	d809      	bhi.n	8002c12 <_printf_i+0x32>
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d100      	bne.n	8002c04 <_printf_i+0x24>
 8002c02:	e0c1      	b.n	8002d88 <_printf_i+0x1a8>
 8002c04:	2a58      	cmp	r2, #88	; 0x58
 8002c06:	d100      	bne.n	8002c0a <_printf_i+0x2a>
 8002c08:	e08c      	b.n	8002d24 <_printf_i+0x144>
 8002c0a:	0026      	movs	r6, r4
 8002c0c:	3642      	adds	r6, #66	; 0x42
 8002c0e:	7032      	strb	r2, [r6, #0]
 8002c10:	e022      	b.n	8002c58 <_printf_i+0x78>
 8002c12:	0010      	movs	r0, r2
 8002c14:	3863      	subs	r0, #99	; 0x63
 8002c16:	2815      	cmp	r0, #21
 8002c18:	d8f7      	bhi.n	8002c0a <_printf_i+0x2a>
 8002c1a:	f7fd fa7d 	bl	8000118 <__gnu_thumb1_case_shi>
 8002c1e:	0016      	.short	0x0016
 8002c20:	fff6001f 	.word	0xfff6001f
 8002c24:	fff6fff6 	.word	0xfff6fff6
 8002c28:	001ffff6 	.word	0x001ffff6
 8002c2c:	fff6fff6 	.word	0xfff6fff6
 8002c30:	fff6fff6 	.word	0xfff6fff6
 8002c34:	003600a8 	.word	0x003600a8
 8002c38:	fff6009a 	.word	0xfff6009a
 8002c3c:	00b9fff6 	.word	0x00b9fff6
 8002c40:	0036fff6 	.word	0x0036fff6
 8002c44:	fff6fff6 	.word	0xfff6fff6
 8002c48:	009e      	.short	0x009e
 8002c4a:	0026      	movs	r6, r4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	3642      	adds	r6, #66	; 0x42
 8002c50:	1d11      	adds	r1, r2, #4
 8002c52:	6019      	str	r1, [r3, #0]
 8002c54:	6813      	ldr	r3, [r2, #0]
 8002c56:	7033      	strb	r3, [r6, #0]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0a7      	b.n	8002dac <_printf_i+0x1cc>
 8002c5c:	6808      	ldr	r0, [r1, #0]
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	1d0a      	adds	r2, r1, #4
 8002c62:	0605      	lsls	r5, r0, #24
 8002c64:	d50b      	bpl.n	8002c7e <_printf_i+0x9e>
 8002c66:	680d      	ldr	r5, [r1, #0]
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	da03      	bge.n	8002c76 <_printf_i+0x96>
 8002c6e:	232d      	movs	r3, #45	; 0x2d
 8002c70:	9a04      	ldr	r2, [sp, #16]
 8002c72:	426d      	negs	r5, r5
 8002c74:	7013      	strb	r3, [r2, #0]
 8002c76:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <_printf_i+0x21c>)
 8002c78:	270a      	movs	r7, #10
 8002c7a:	9303      	str	r3, [sp, #12]
 8002c7c:	e01b      	b.n	8002cb6 <_printf_i+0xd6>
 8002c7e:	680d      	ldr	r5, [r1, #0]
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	0641      	lsls	r1, r0, #25
 8002c84:	d5f1      	bpl.n	8002c6a <_printf_i+0x8a>
 8002c86:	b22d      	sxth	r5, r5
 8002c88:	e7ef      	b.n	8002c6a <_printf_i+0x8a>
 8002c8a:	680d      	ldr	r5, [r1, #0]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	1d08      	adds	r0, r1, #4
 8002c90:	6018      	str	r0, [r3, #0]
 8002c92:	062e      	lsls	r6, r5, #24
 8002c94:	d501      	bpl.n	8002c9a <_printf_i+0xba>
 8002c96:	680d      	ldr	r5, [r1, #0]
 8002c98:	e003      	b.n	8002ca2 <_printf_i+0xc2>
 8002c9a:	066d      	lsls	r5, r5, #25
 8002c9c:	d5fb      	bpl.n	8002c96 <_printf_i+0xb6>
 8002c9e:	680d      	ldr	r5, [r1, #0]
 8002ca0:	b2ad      	uxth	r5, r5
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <_printf_i+0x21c>)
 8002ca4:	2708      	movs	r7, #8
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	2a6f      	cmp	r2, #111	; 0x6f
 8002caa:	d000      	beq.n	8002cae <_printf_i+0xce>
 8002cac:	3702      	adds	r7, #2
 8002cae:	0023      	movs	r3, r4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	3343      	adds	r3, #67	; 0x43
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	6863      	ldr	r3, [r4, #4]
 8002cb8:	60a3      	str	r3, [r4, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db03      	blt.n	8002cc6 <_printf_i+0xe6>
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	6821      	ldr	r1, [r4, #0]
 8002cc2:	4391      	bics	r1, r2
 8002cc4:	6021      	str	r1, [r4, #0]
 8002cc6:	2d00      	cmp	r5, #0
 8002cc8:	d102      	bne.n	8002cd0 <_printf_i+0xf0>
 8002cca:	9e04      	ldr	r6, [sp, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <_printf_i+0x10a>
 8002cd0:	9e04      	ldr	r6, [sp, #16]
 8002cd2:	0028      	movs	r0, r5
 8002cd4:	0039      	movs	r1, r7
 8002cd6:	f7fd faaf 	bl	8000238 <__aeabi_uidivmod>
 8002cda:	9b03      	ldr	r3, [sp, #12]
 8002cdc:	3e01      	subs	r6, #1
 8002cde:	5c5b      	ldrb	r3, [r3, r1]
 8002ce0:	7033      	strb	r3, [r6, #0]
 8002ce2:	002b      	movs	r3, r5
 8002ce4:	0005      	movs	r5, r0
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	d9f3      	bls.n	8002cd2 <_printf_i+0xf2>
 8002cea:	2f08      	cmp	r7, #8
 8002cec:	d109      	bne.n	8002d02 <_printf_i+0x122>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	07db      	lsls	r3, r3, #31
 8002cf2:	d506      	bpl.n	8002d02 <_printf_i+0x122>
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	6922      	ldr	r2, [r4, #16]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	dc02      	bgt.n	8002d02 <_printf_i+0x122>
 8002cfc:	2330      	movs	r3, #48	; 0x30
 8002cfe:	3e01      	subs	r6, #1
 8002d00:	7033      	strb	r3, [r6, #0]
 8002d02:	9b04      	ldr	r3, [sp, #16]
 8002d04:	1b9b      	subs	r3, r3, r6
 8002d06:	6123      	str	r3, [r4, #16]
 8002d08:	9b07      	ldr	r3, [sp, #28]
 8002d0a:	0021      	movs	r1, r4
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	9805      	ldr	r0, [sp, #20]
 8002d10:	9b06      	ldr	r3, [sp, #24]
 8002d12:	aa09      	add	r2, sp, #36	; 0x24
 8002d14:	f7ff fef4 	bl	8002b00 <_printf_common>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d14c      	bne.n	8002db6 <_printf_i+0x1d6>
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	4240      	negs	r0, r0
 8002d20:	b00b      	add	sp, #44	; 0x2c
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	3145      	adds	r1, #69	; 0x45
 8002d26:	700a      	strb	r2, [r1, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <_printf_i+0x21c>)
 8002d2a:	9203      	str	r2, [sp, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	6821      	ldr	r1, [r4, #0]
 8002d30:	ca20      	ldmia	r2!, {r5}
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	0608      	lsls	r0, r1, #24
 8002d36:	d516      	bpl.n	8002d66 <_printf_i+0x186>
 8002d38:	07cb      	lsls	r3, r1, #31
 8002d3a:	d502      	bpl.n	8002d42 <_printf_i+0x162>
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	4319      	orrs	r1, r3
 8002d40:	6021      	str	r1, [r4, #0]
 8002d42:	2710      	movs	r7, #16
 8002d44:	2d00      	cmp	r5, #0
 8002d46:	d1b2      	bne.n	8002cae <_printf_i+0xce>
 8002d48:	2320      	movs	r3, #32
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	439a      	bics	r2, r3
 8002d4e:	6022      	str	r2, [r4, #0]
 8002d50:	e7ad      	b.n	8002cae <_printf_i+0xce>
 8002d52:	2220      	movs	r2, #32
 8002d54:	6809      	ldr	r1, [r1, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	6022      	str	r2, [r4, #0]
 8002d5a:	0022      	movs	r2, r4
 8002d5c:	2178      	movs	r1, #120	; 0x78
 8002d5e:	3245      	adds	r2, #69	; 0x45
 8002d60:	7011      	strb	r1, [r2, #0]
 8002d62:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <_printf_i+0x220>)
 8002d64:	e7e1      	b.n	8002d2a <_printf_i+0x14a>
 8002d66:	0648      	lsls	r0, r1, #25
 8002d68:	d5e6      	bpl.n	8002d38 <_printf_i+0x158>
 8002d6a:	b2ad      	uxth	r5, r5
 8002d6c:	e7e4      	b.n	8002d38 <_printf_i+0x158>
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	680d      	ldr	r5, [r1, #0]
 8002d72:	1d10      	adds	r0, r2, #4
 8002d74:	6949      	ldr	r1, [r1, #20]
 8002d76:	6018      	str	r0, [r3, #0]
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	062e      	lsls	r6, r5, #24
 8002d7c:	d501      	bpl.n	8002d82 <_printf_i+0x1a2>
 8002d7e:	6019      	str	r1, [r3, #0]
 8002d80:	e002      	b.n	8002d88 <_printf_i+0x1a8>
 8002d82:	066d      	lsls	r5, r5, #25
 8002d84:	d5fb      	bpl.n	8002d7e <_printf_i+0x19e>
 8002d86:	8019      	strh	r1, [r3, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9e04      	ldr	r6, [sp, #16]
 8002d8c:	6123      	str	r3, [r4, #16]
 8002d8e:	e7bb      	b.n	8002d08 <_printf_i+0x128>
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	1d11      	adds	r1, r2, #4
 8002d94:	6019      	str	r1, [r3, #0]
 8002d96:	6816      	ldr	r6, [r2, #0]
 8002d98:	2100      	movs	r1, #0
 8002d9a:	0030      	movs	r0, r6
 8002d9c:	6862      	ldr	r2, [r4, #4]
 8002d9e:	f000 f831 	bl	8002e04 <memchr>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d001      	beq.n	8002daa <_printf_i+0x1ca>
 8002da6:	1b80      	subs	r0, r0, r6
 8002da8:	6060      	str	r0, [r4, #4]
 8002daa:	6863      	ldr	r3, [r4, #4]
 8002dac:	6123      	str	r3, [r4, #16]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9a04      	ldr	r2, [sp, #16]
 8002db2:	7013      	strb	r3, [r2, #0]
 8002db4:	e7a8      	b.n	8002d08 <_printf_i+0x128>
 8002db6:	6923      	ldr	r3, [r4, #16]
 8002db8:	0032      	movs	r2, r6
 8002dba:	9906      	ldr	r1, [sp, #24]
 8002dbc:	9805      	ldr	r0, [sp, #20]
 8002dbe:	9d07      	ldr	r5, [sp, #28]
 8002dc0:	47a8      	blx	r5
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	d0aa      	beq.n	8002d1c <_printf_i+0x13c>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	079b      	lsls	r3, r3, #30
 8002dca:	d415      	bmi.n	8002df8 <_printf_i+0x218>
 8002dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dce:	68e0      	ldr	r0, [r4, #12]
 8002dd0:	4298      	cmp	r0, r3
 8002dd2:	daa5      	bge.n	8002d20 <_printf_i+0x140>
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	e7a3      	b.n	8002d20 <_printf_i+0x140>
 8002dd8:	0022      	movs	r2, r4
 8002dda:	2301      	movs	r3, #1
 8002ddc:	9906      	ldr	r1, [sp, #24]
 8002dde:	9805      	ldr	r0, [sp, #20]
 8002de0:	9e07      	ldr	r6, [sp, #28]
 8002de2:	3219      	adds	r2, #25
 8002de4:	47b0      	blx	r6
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	d098      	beq.n	8002d1c <_printf_i+0x13c>
 8002dea:	3501      	adds	r5, #1
 8002dec:	68e3      	ldr	r3, [r4, #12]
 8002dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	42ab      	cmp	r3, r5
 8002df4:	dcf0      	bgt.n	8002dd8 <_printf_i+0x1f8>
 8002df6:	e7e9      	b.n	8002dcc <_printf_i+0x1ec>
 8002df8:	2500      	movs	r5, #0
 8002dfa:	e7f7      	b.n	8002dec <_printf_i+0x20c>
 8002dfc:	08003159 	.word	0x08003159
 8002e00:	0800316a 	.word	0x0800316a

08002e04 <memchr>:
 8002e04:	b2c9      	uxtb	r1, r1
 8002e06:	1882      	adds	r2, r0, r2
 8002e08:	4290      	cmp	r0, r2
 8002e0a:	d101      	bne.n	8002e10 <memchr+0xc>
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	4770      	bx	lr
 8002e10:	7803      	ldrb	r3, [r0, #0]
 8002e12:	428b      	cmp	r3, r1
 8002e14:	d0fb      	beq.n	8002e0e <memchr+0xa>
 8002e16:	3001      	adds	r0, #1
 8002e18:	e7f6      	b.n	8002e08 <memchr+0x4>

08002e1a <memcpy>:
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d100      	bne.n	8002e24 <memcpy+0xa>
 8002e22:	bd10      	pop	{r4, pc}
 8002e24:	5ccc      	ldrb	r4, [r1, r3]
 8002e26:	54c4      	strb	r4, [r0, r3]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7f8      	b.n	8002e1e <memcpy+0x4>

08002e2c <memmove>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4288      	cmp	r0, r1
 8002e30:	d902      	bls.n	8002e38 <memmove+0xc>
 8002e32:	188b      	adds	r3, r1, r2
 8002e34:	4298      	cmp	r0, r3
 8002e36:	d303      	bcc.n	8002e40 <memmove+0x14>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e007      	b.n	8002e4c <memmove+0x20>
 8002e3c:	5c8b      	ldrb	r3, [r1, r2]
 8002e3e:	5483      	strb	r3, [r0, r2]
 8002e40:	3a01      	subs	r2, #1
 8002e42:	d2fb      	bcs.n	8002e3c <memmove+0x10>
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	5ccc      	ldrb	r4, [r1, r3]
 8002e48:	54c4      	strb	r4, [r0, r3]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1fa      	bne.n	8002e46 <memmove+0x1a>
 8002e50:	e7f8      	b.n	8002e44 <memmove+0x18>
	...

08002e54 <_free_r>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	0005      	movs	r5, r0
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	d010      	beq.n	8002e7e <_free_r+0x2a>
 8002e5c:	1f0c      	subs	r4, r1, #4
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da00      	bge.n	8002e66 <_free_r+0x12>
 8002e64:	18e4      	adds	r4, r4, r3
 8002e66:	0028      	movs	r0, r5
 8002e68:	f000 f918 	bl	800309c <__malloc_lock>
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <_free_r+0x90>)
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <_free_r+0x2c>
 8002e74:	6063      	str	r3, [r4, #4]
 8002e76:	6014      	str	r4, [r2, #0]
 8002e78:	0028      	movs	r0, r5
 8002e7a:	f000 f917 	bl	80030ac <__malloc_unlock>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	42a3      	cmp	r3, r4
 8002e82:	d908      	bls.n	8002e96 <_free_r+0x42>
 8002e84:	6821      	ldr	r1, [r4, #0]
 8002e86:	1860      	adds	r0, r4, r1
 8002e88:	4283      	cmp	r3, r0
 8002e8a:	d1f3      	bne.n	8002e74 <_free_r+0x20>
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	1841      	adds	r1, r0, r1
 8002e92:	6021      	str	r1, [r4, #0]
 8002e94:	e7ee      	b.n	8002e74 <_free_r+0x20>
 8002e96:	001a      	movs	r2, r3
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <_free_r+0x4e>
 8002e9e:	42a3      	cmp	r3, r4
 8002ea0:	d9f9      	bls.n	8002e96 <_free_r+0x42>
 8002ea2:	6811      	ldr	r1, [r2, #0]
 8002ea4:	1850      	adds	r0, r2, r1
 8002ea6:	42a0      	cmp	r0, r4
 8002ea8:	d10b      	bne.n	8002ec2 <_free_r+0x6e>
 8002eaa:	6820      	ldr	r0, [r4, #0]
 8002eac:	1809      	adds	r1, r1, r0
 8002eae:	1850      	adds	r0, r2, r1
 8002eb0:	6011      	str	r1, [r2, #0]
 8002eb2:	4283      	cmp	r3, r0
 8002eb4:	d1e0      	bne.n	8002e78 <_free_r+0x24>
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	1841      	adds	r1, r0, r1
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	6053      	str	r3, [r2, #4]
 8002ec0:	e7da      	b.n	8002e78 <_free_r+0x24>
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	d902      	bls.n	8002ecc <_free_r+0x78>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	e7d5      	b.n	8002e78 <_free_r+0x24>
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	1860      	adds	r0, r4, r1
 8002ed0:	4283      	cmp	r3, r0
 8002ed2:	d103      	bne.n	8002edc <_free_r+0x88>
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	1841      	adds	r1, r0, r1
 8002eda:	6021      	str	r1, [r4, #0]
 8002edc:	6063      	str	r3, [r4, #4]
 8002ede:	6054      	str	r4, [r2, #4]
 8002ee0:	e7ca      	b.n	8002e78 <_free_r+0x24>
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	2000013c 	.word	0x2000013c

08002ee8 <sbrk_aligned>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4e0f      	ldr	r6, [pc, #60]	; (8002f28 <sbrk_aligned+0x40>)
 8002eec:	000d      	movs	r5, r1
 8002eee:	6831      	ldr	r1, [r6, #0]
 8002ef0:	0004      	movs	r4, r0
 8002ef2:	2900      	cmp	r1, #0
 8002ef4:	d102      	bne.n	8002efc <sbrk_aligned+0x14>
 8002ef6:	f000 f8bf 	bl	8003078 <_sbrk_r>
 8002efa:	6030      	str	r0, [r6, #0]
 8002efc:	0029      	movs	r1, r5
 8002efe:	0020      	movs	r0, r4
 8002f00:	f000 f8ba 	bl	8003078 <_sbrk_r>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d00a      	beq.n	8002f1e <sbrk_aligned+0x36>
 8002f08:	2303      	movs	r3, #3
 8002f0a:	1cc5      	adds	r5, r0, #3
 8002f0c:	439d      	bics	r5, r3
 8002f0e:	42a8      	cmp	r0, r5
 8002f10:	d007      	beq.n	8002f22 <sbrk_aligned+0x3a>
 8002f12:	1a29      	subs	r1, r5, r0
 8002f14:	0020      	movs	r0, r4
 8002f16:	f000 f8af 	bl	8003078 <_sbrk_r>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d101      	bne.n	8002f22 <sbrk_aligned+0x3a>
 8002f1e:	2501      	movs	r5, #1
 8002f20:	426d      	negs	r5, r5
 8002f22:	0028      	movs	r0, r5
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	20000140 	.word	0x20000140

08002f2c <_malloc_r>:
 8002f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f2e:	2203      	movs	r2, #3
 8002f30:	1ccb      	adds	r3, r1, #3
 8002f32:	4393      	bics	r3, r2
 8002f34:	3308      	adds	r3, #8
 8002f36:	0006      	movs	r6, r0
 8002f38:	001f      	movs	r7, r3
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d232      	bcs.n	8002fa4 <_malloc_r+0x78>
 8002f3e:	270c      	movs	r7, #12
 8002f40:	42b9      	cmp	r1, r7
 8002f42:	d831      	bhi.n	8002fa8 <_malloc_r+0x7c>
 8002f44:	0030      	movs	r0, r6
 8002f46:	f000 f8a9 	bl	800309c <__malloc_lock>
 8002f4a:	4d32      	ldr	r5, [pc, #200]	; (8003014 <_malloc_r+0xe8>)
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	001c      	movs	r4, r3
 8002f50:	2c00      	cmp	r4, #0
 8002f52:	d12e      	bne.n	8002fb2 <_malloc_r+0x86>
 8002f54:	0039      	movs	r1, r7
 8002f56:	0030      	movs	r0, r6
 8002f58:	f7ff ffc6 	bl	8002ee8 <sbrk_aligned>
 8002f5c:	0004      	movs	r4, r0
 8002f5e:	1c43      	adds	r3, r0, #1
 8002f60:	d11e      	bne.n	8002fa0 <_malloc_r+0x74>
 8002f62:	682c      	ldr	r4, [r5, #0]
 8002f64:	0025      	movs	r5, r4
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	d14a      	bne.n	8003000 <_malloc_r+0xd4>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	0029      	movs	r1, r5
 8002f6e:	18e3      	adds	r3, r4, r3
 8002f70:	0030      	movs	r0, r6
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	f000 f880 	bl	8003078 <_sbrk_r>
 8002f78:	9b01      	ldr	r3, [sp, #4]
 8002f7a:	4283      	cmp	r3, r0
 8002f7c:	d143      	bne.n	8003006 <_malloc_r+0xda>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	3703      	adds	r7, #3
 8002f82:	1aff      	subs	r7, r7, r3
 8002f84:	2303      	movs	r3, #3
 8002f86:	439f      	bics	r7, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	2f0c      	cmp	r7, #12
 8002f8c:	d200      	bcs.n	8002f90 <_malloc_r+0x64>
 8002f8e:	270c      	movs	r7, #12
 8002f90:	0039      	movs	r1, r7
 8002f92:	0030      	movs	r0, r6
 8002f94:	f7ff ffa8 	bl	8002ee8 <sbrk_aligned>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d034      	beq.n	8003006 <_malloc_r+0xda>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	19df      	adds	r7, r3, r7
 8002fa0:	6027      	str	r7, [r4, #0]
 8002fa2:	e013      	b.n	8002fcc <_malloc_r+0xa0>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	dacb      	bge.n	8002f40 <_malloc_r+0x14>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	2500      	movs	r5, #0
 8002fac:	6033      	str	r3, [r6, #0]
 8002fae:	0028      	movs	r0, r5
 8002fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	1bd1      	subs	r1, r2, r7
 8002fb6:	d420      	bmi.n	8002ffa <_malloc_r+0xce>
 8002fb8:	290b      	cmp	r1, #11
 8002fba:	d917      	bls.n	8002fec <_malloc_r+0xc0>
 8002fbc:	19e2      	adds	r2, r4, r7
 8002fbe:	6027      	str	r7, [r4, #0]
 8002fc0:	42a3      	cmp	r3, r4
 8002fc2:	d111      	bne.n	8002fe8 <_malloc_r+0xbc>
 8002fc4:	602a      	str	r2, [r5, #0]
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	6053      	str	r3, [r2, #4]
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0025      	movs	r5, r4
 8002fd0:	f000 f86c 	bl	80030ac <__malloc_unlock>
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	350b      	adds	r5, #11
 8002fd8:	1d23      	adds	r3, r4, #4
 8002fda:	4395      	bics	r5, r2
 8002fdc:	1aea      	subs	r2, r5, r3
 8002fde:	429d      	cmp	r5, r3
 8002fe0:	d0e5      	beq.n	8002fae <_malloc_r+0x82>
 8002fe2:	1b5b      	subs	r3, r3, r5
 8002fe4:	50a3      	str	r3, [r4, r2]
 8002fe6:	e7e2      	b.n	8002fae <_malloc_r+0x82>
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	e7ec      	b.n	8002fc6 <_malloc_r+0x9a>
 8002fec:	6862      	ldr	r2, [r4, #4]
 8002fee:	42a3      	cmp	r3, r4
 8002ff0:	d101      	bne.n	8002ff6 <_malloc_r+0xca>
 8002ff2:	602a      	str	r2, [r5, #0]
 8002ff4:	e7ea      	b.n	8002fcc <_malloc_r+0xa0>
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	e7e8      	b.n	8002fcc <_malloc_r+0xa0>
 8002ffa:	0023      	movs	r3, r4
 8002ffc:	6864      	ldr	r4, [r4, #4]
 8002ffe:	e7a7      	b.n	8002f50 <_malloc_r+0x24>
 8003000:	002c      	movs	r4, r5
 8003002:	686d      	ldr	r5, [r5, #4]
 8003004:	e7af      	b.n	8002f66 <_malloc_r+0x3a>
 8003006:	230c      	movs	r3, #12
 8003008:	0030      	movs	r0, r6
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	f000 f84e 	bl	80030ac <__malloc_unlock>
 8003010:	e7cd      	b.n	8002fae <_malloc_r+0x82>
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	2000013c 	.word	0x2000013c

08003018 <_realloc_r>:
 8003018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800301a:	0007      	movs	r7, r0
 800301c:	000e      	movs	r6, r1
 800301e:	0014      	movs	r4, r2
 8003020:	2900      	cmp	r1, #0
 8003022:	d105      	bne.n	8003030 <_realloc_r+0x18>
 8003024:	0011      	movs	r1, r2
 8003026:	f7ff ff81 	bl	8002f2c <_malloc_r>
 800302a:	0005      	movs	r5, r0
 800302c:	0028      	movs	r0, r5
 800302e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003030:	2a00      	cmp	r2, #0
 8003032:	d103      	bne.n	800303c <_realloc_r+0x24>
 8003034:	f7ff ff0e 	bl	8002e54 <_free_r>
 8003038:	0025      	movs	r5, r4
 800303a:	e7f7      	b.n	800302c <_realloc_r+0x14>
 800303c:	f000 f83e 	bl	80030bc <_malloc_usable_size_r>
 8003040:	9001      	str	r0, [sp, #4]
 8003042:	4284      	cmp	r4, r0
 8003044:	d803      	bhi.n	800304e <_realloc_r+0x36>
 8003046:	0035      	movs	r5, r6
 8003048:	0843      	lsrs	r3, r0, #1
 800304a:	42a3      	cmp	r3, r4
 800304c:	d3ee      	bcc.n	800302c <_realloc_r+0x14>
 800304e:	0021      	movs	r1, r4
 8003050:	0038      	movs	r0, r7
 8003052:	f7ff ff6b 	bl	8002f2c <_malloc_r>
 8003056:	1e05      	subs	r5, r0, #0
 8003058:	d0e8      	beq.n	800302c <_realloc_r+0x14>
 800305a:	9b01      	ldr	r3, [sp, #4]
 800305c:	0022      	movs	r2, r4
 800305e:	429c      	cmp	r4, r3
 8003060:	d900      	bls.n	8003064 <_realloc_r+0x4c>
 8003062:	001a      	movs	r2, r3
 8003064:	0031      	movs	r1, r6
 8003066:	0028      	movs	r0, r5
 8003068:	f7ff fed7 	bl	8002e1a <memcpy>
 800306c:	0031      	movs	r1, r6
 800306e:	0038      	movs	r0, r7
 8003070:	f7ff fef0 	bl	8002e54 <_free_r>
 8003074:	e7da      	b.n	800302c <_realloc_r+0x14>
	...

08003078 <_sbrk_r>:
 8003078:	2300      	movs	r3, #0
 800307a:	b570      	push	{r4, r5, r6, lr}
 800307c:	4d06      	ldr	r5, [pc, #24]	; (8003098 <_sbrk_r+0x20>)
 800307e:	0004      	movs	r4, r0
 8003080:	0008      	movs	r0, r1
 8003082:	602b      	str	r3, [r5, #0]
 8003084:	f7fd fb54 	bl	8000730 <_sbrk>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d103      	bne.n	8003094 <_sbrk_r+0x1c>
 800308c:	682b      	ldr	r3, [r5, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d000      	beq.n	8003094 <_sbrk_r+0x1c>
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	20000144 	.word	0x20000144

0800309c <__malloc_lock>:
 800309c:	b510      	push	{r4, lr}
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <__malloc_lock+0xc>)
 80030a0:	f000 f814 	bl	80030cc <__retarget_lock_acquire_recursive>
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	20000148 	.word	0x20000148

080030ac <__malloc_unlock>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <__malloc_unlock+0xc>)
 80030b0:	f000 f80d 	bl	80030ce <__retarget_lock_release_recursive>
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000148 	.word	0x20000148

080030bc <_malloc_usable_size_r>:
 80030bc:	1f0b      	subs	r3, r1, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1f18      	subs	r0, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da01      	bge.n	80030ca <_malloc_usable_size_r+0xe>
 80030c6:	580b      	ldr	r3, [r1, r0]
 80030c8:	18c0      	adds	r0, r0, r3
 80030ca:	4770      	bx	lr

080030cc <__retarget_lock_acquire_recursive>:
 80030cc:	4770      	bx	lr

080030ce <__retarget_lock_release_recursive>:
 80030ce:	4770      	bx	lr

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
