
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08017a60  08017a60  00027a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017f40  08017f40  00027f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017f48  08017f48  00027f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017f4c  08017f4c  00027f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08017f50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000059a8  24000120  08018054  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005ac8  08018054  00035ac8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033be2  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004010c  00000000  00000000  0006e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003256c  00000000  00000000  000ae204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c02  00000000  00000000  000e0770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00275372  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0cc  00000000  00000000  002753c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017a48 	.word	0x08017a48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017a48 	.word	0x08017a48

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c8c 	.word	0x24000c8c

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f013 f8c6 	bl	80137a8 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e01e      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f013 f8bb 	bl	80137a8 <osEventFlagsSet>
}
 8000632:	e013      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d10c      	bne.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x56>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2108      	movs	r1, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f013 f8b0 	bl	80137a8 <osEventFlagsSet>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f013 f8aa 	bl	80137a8 <osEventFlagsSet>
}
 8000654:	e002      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		printf("Unknown Timer Interrupt\n");
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000658:	f016 fe46 	bl	80172e8 <puts>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000508 	.word	0x24000508
 8000668:	24000cac 	.word	0x24000cac
 800066c:	24000554 	.word	0x24000554
 8000670:	240005a0 	.word	0x240005a0
 8000674:	08017ae8 	.word	0x08017ae8

08000678 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	49f2      	ldr	r1, [pc, #968]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 8000684:	48f2      	ldr	r0, [pc, #968]	; (8000a50 <HAL_UART_RxCpltCallback+0x3d8>)
 8000686:	f010 f905 	bl	8010894 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800068a:	4bf0      	ldr	r3, [pc, #960]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	72fb      	strb	r3, [r7, #11]

	switch (key) {
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	2be0      	cmp	r3, #224	; 0xe0
 8000694:	f200 841e 	bhi.w	8000ed4 <HAL_UART_RxCpltCallback+0x85c>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <HAL_UART_RxCpltCallback+0x28>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	08000a39 	.word	0x08000a39
 80006a4:	08000a7d 	.word	0x08000a7d
 80006a8:	08000ae3 	.word	0x08000ae3
 80006ac:	08000b1d 	.word	0x08000b1d
 80006b0:	08000b55 	.word	0x08000b55
 80006b4:	08000b8f 	.word	0x08000b8f
 80006b8:	08000bcb 	.word	0x08000bcb
 80006bc:	08000c07 	.word	0x08000c07
 80006c0:	08000c41 	.word	0x08000c41
 80006c4:	08000c75 	.word	0x08000c75
 80006c8:	08000ca7 	.word	0x08000ca7
 80006cc:	08000cdf 	.word	0x08000cdf
 80006d0:	08000d0f 	.word	0x08000d0f
 80006d4:	08000def 	.word	0x08000def
 80006d8:	08000e57 	.word	0x08000e57
 80006dc:	08000e7f 	.word	0x08000e7f
 80006e0:	08000a25 	.word	0x08000a25
 80006e4:	08000a61 	.word	0x08000a61
 80006e8:	08000ac5 	.word	0x08000ac5
 80006ec:	08000b01 	.word	0x08000b01
 80006f0:	08000b39 	.word	0x08000b39
 80006f4:	08000b71 	.word	0x08000b71
 80006f8:	08000bad 	.word	0x08000bad
 80006fc:	08000be9 	.word	0x08000be9
 8000700:	08000c25 	.word	0x08000c25
 8000704:	08000c5d 	.word	0x08000c5d
 8000708:	08000c85 	.word	0x08000c85
 800070c:	08000cbd 	.word	0x08000cbd
 8000710:	08000cf5 	.word	0x08000cf5
 8000714:	08000dad 	.word	0x08000dad
 8000718:	08000e2f 	.word	0x08000e2f
 800071c:	08000ed5 	.word	0x08000ed5
 8000720:	08000ed5 	.word	0x08000ed5
 8000724:	08000ed5 	.word	0x08000ed5
 8000728:	08000ed5 	.word	0x08000ed5
 800072c:	08000ed5 	.word	0x08000ed5
 8000730:	08000ed5 	.word	0x08000ed5
 8000734:	08000ed5 	.word	0x08000ed5
 8000738:	08000ed5 	.word	0x08000ed5
 800073c:	08000ed5 	.word	0x08000ed5
 8000740:	08000ed5 	.word	0x08000ed5
 8000744:	08000ed5 	.word	0x08000ed5
 8000748:	08000ed5 	.word	0x08000ed5
 800074c:	08000ed5 	.word	0x08000ed5
 8000750:	08000ed5 	.word	0x08000ed5
 8000754:	08000ed5 	.word	0x08000ed5
 8000758:	08000ed5 	.word	0x08000ed5
 800075c:	08000ed5 	.word	0x08000ed5
 8000760:	08000ed5 	.word	0x08000ed5
 8000764:	08000ed5 	.word	0x08000ed5
 8000768:	08000ed5 	.word	0x08000ed5
 800076c:	08000ed5 	.word	0x08000ed5
 8000770:	08000ed5 	.word	0x08000ed5
 8000774:	08000ed5 	.word	0x08000ed5
 8000778:	08000ed5 	.word	0x08000ed5
 800077c:	08000ed5 	.word	0x08000ed5
 8000780:	08000ed5 	.word	0x08000ed5
 8000784:	08000ed5 	.word	0x08000ed5
 8000788:	08000ed5 	.word	0x08000ed5
 800078c:	08000ed5 	.word	0x08000ed5
 8000790:	08000ed5 	.word	0x08000ed5
 8000794:	08000ed5 	.word	0x08000ed5
 8000798:	08000ed5 	.word	0x08000ed5
 800079c:	08000ed5 	.word	0x08000ed5
 80007a0:	08000ed5 	.word	0x08000ed5
 80007a4:	08000ed5 	.word	0x08000ed5
 80007a8:	08000ed5 	.word	0x08000ed5
 80007ac:	08000ed5 	.word	0x08000ed5
 80007b0:	08000ed5 	.word	0x08000ed5
 80007b4:	08000ed5 	.word	0x08000ed5
 80007b8:	08000ed5 	.word	0x08000ed5
 80007bc:	08000ed5 	.word	0x08000ed5
 80007c0:	08000ed5 	.word	0x08000ed5
 80007c4:	08000ed5 	.word	0x08000ed5
 80007c8:	08000ed5 	.word	0x08000ed5
 80007cc:	08000ed5 	.word	0x08000ed5
 80007d0:	08000ed5 	.word	0x08000ed5
 80007d4:	08000ed5 	.word	0x08000ed5
 80007d8:	08000ed5 	.word	0x08000ed5
 80007dc:	08000ed5 	.word	0x08000ed5
 80007e0:	08000ed5 	.word	0x08000ed5
 80007e4:	08000ed5 	.word	0x08000ed5
 80007e8:	08000ed5 	.word	0x08000ed5
 80007ec:	08000ed5 	.word	0x08000ed5
 80007f0:	08000ed5 	.word	0x08000ed5
 80007f4:	08000ed5 	.word	0x08000ed5
 80007f8:	08000ed5 	.word	0x08000ed5
 80007fc:	08000ed5 	.word	0x08000ed5
 8000800:	08000ed5 	.word	0x08000ed5
 8000804:	08000ed5 	.word	0x08000ed5
 8000808:	08000ed5 	.word	0x08000ed5
 800080c:	08000ed5 	.word	0x08000ed5
 8000810:	08000ed5 	.word	0x08000ed5
 8000814:	08000ed5 	.word	0x08000ed5
 8000818:	08000ed5 	.word	0x08000ed5
 800081c:	08000ed5 	.word	0x08000ed5
 8000820:	08000ed5 	.word	0x08000ed5
 8000824:	08000ed5 	.word	0x08000ed5
 8000828:	08000ed5 	.word	0x08000ed5
 800082c:	08000ed5 	.word	0x08000ed5
 8000830:	08000ed5 	.word	0x08000ed5
 8000834:	08000ed5 	.word	0x08000ed5
 8000838:	08000ed5 	.word	0x08000ed5
 800083c:	08000ed5 	.word	0x08000ed5
 8000840:	08000ed5 	.word	0x08000ed5
 8000844:	08000ed5 	.word	0x08000ed5
 8000848:	08000ed5 	.word	0x08000ed5
 800084c:	08000ed5 	.word	0x08000ed5
 8000850:	08000ed5 	.word	0x08000ed5
 8000854:	08000ed5 	.word	0x08000ed5
 8000858:	08000ed5 	.word	0x08000ed5
 800085c:	08000ed5 	.word	0x08000ed5
 8000860:	08000ed5 	.word	0x08000ed5
 8000864:	08000ed5 	.word	0x08000ed5
 8000868:	08000ed5 	.word	0x08000ed5
 800086c:	08000ed5 	.word	0x08000ed5
 8000870:	08000ed5 	.word	0x08000ed5
 8000874:	08000ed5 	.word	0x08000ed5
 8000878:	08000ed5 	.word	0x08000ed5
 800087c:	08000ed5 	.word	0x08000ed5
 8000880:	08000ed5 	.word	0x08000ed5
 8000884:	08000ed5 	.word	0x08000ed5
 8000888:	08000ed5 	.word	0x08000ed5
 800088c:	08000ed5 	.word	0x08000ed5
 8000890:	08000ed5 	.word	0x08000ed5
 8000894:	08000ed5 	.word	0x08000ed5
 8000898:	08000ed5 	.word	0x08000ed5
 800089c:	08000ed5 	.word	0x08000ed5
 80008a0:	08000ed5 	.word	0x08000ed5
 80008a4:	08000ed5 	.word	0x08000ed5
 80008a8:	08000ed5 	.word	0x08000ed5
 80008ac:	08000ed5 	.word	0x08000ed5
 80008b0:	08000ed5 	.word	0x08000ed5
 80008b4:	08000ed5 	.word	0x08000ed5
 80008b8:	08000ed5 	.word	0x08000ed5
 80008bc:	08000ed5 	.word	0x08000ed5
 80008c0:	08000ed5 	.word	0x08000ed5
 80008c4:	08000ed5 	.word	0x08000ed5
 80008c8:	08000ed5 	.word	0x08000ed5
 80008cc:	08000ed5 	.word	0x08000ed5
 80008d0:	08000ed5 	.word	0x08000ed5
 80008d4:	08000ed5 	.word	0x08000ed5
 80008d8:	08000ed5 	.word	0x08000ed5
 80008dc:	08000ed5 	.word	0x08000ed5
 80008e0:	08000ed5 	.word	0x08000ed5
 80008e4:	08000ed5 	.word	0x08000ed5
 80008e8:	08000ed5 	.word	0x08000ed5
 80008ec:	08000ed5 	.word	0x08000ed5
 80008f0:	08000ed5 	.word	0x08000ed5
 80008f4:	08000ed5 	.word	0x08000ed5
 80008f8:	08000ed5 	.word	0x08000ed5
 80008fc:	08000ed5 	.word	0x08000ed5
 8000900:	08000ed5 	.word	0x08000ed5
 8000904:	08000ed5 	.word	0x08000ed5
 8000908:	08000ed5 	.word	0x08000ed5
 800090c:	08000ed5 	.word	0x08000ed5
 8000910:	08000ed5 	.word	0x08000ed5
 8000914:	08000ed5 	.word	0x08000ed5
 8000918:	08000ed5 	.word	0x08000ed5
 800091c:	08000ed5 	.word	0x08000ed5
 8000920:	08000ed5 	.word	0x08000ed5
 8000924:	08000ed5 	.word	0x08000ed5
 8000928:	08000ed5 	.word	0x08000ed5
 800092c:	08000ed5 	.word	0x08000ed5
 8000930:	08000ed5 	.word	0x08000ed5
 8000934:	08000ed5 	.word	0x08000ed5
 8000938:	08000ed5 	.word	0x08000ed5
 800093c:	08000ed5 	.word	0x08000ed5
 8000940:	08000ed5 	.word	0x08000ed5
 8000944:	08000ed5 	.word	0x08000ed5
 8000948:	08000ed5 	.word	0x08000ed5
 800094c:	08000ed5 	.word	0x08000ed5
 8000950:	08000ed5 	.word	0x08000ed5
 8000954:	08000ed5 	.word	0x08000ed5
 8000958:	08000ed5 	.word	0x08000ed5
 800095c:	08000eb7 	.word	0x08000eb7
 8000960:	08000ed5 	.word	0x08000ed5
 8000964:	08000ed5 	.word	0x08000ed5
 8000968:	08000ed5 	.word	0x08000ed5
 800096c:	08000ed5 	.word	0x08000ed5
 8000970:	08000ed5 	.word	0x08000ed5
 8000974:	08000ed5 	.word	0x08000ed5
 8000978:	08000ed5 	.word	0x08000ed5
 800097c:	08000ed5 	.word	0x08000ed5
 8000980:	08000ed5 	.word	0x08000ed5
 8000984:	08000ed5 	.word	0x08000ed5
 8000988:	08000ed5 	.word	0x08000ed5
 800098c:	08000ed5 	.word	0x08000ed5
 8000990:	08000ed5 	.word	0x08000ed5
 8000994:	08000ed5 	.word	0x08000ed5
 8000998:	08000ed5 	.word	0x08000ed5
 800099c:	08000ebd 	.word	0x08000ebd
 80009a0:	08000ed5 	.word	0x08000ed5
 80009a4:	08000ed5 	.word	0x08000ed5
 80009a8:	08000ed5 	.word	0x08000ed5
 80009ac:	08000ed5 	.word	0x08000ed5
 80009b0:	08000ed5 	.word	0x08000ed5
 80009b4:	08000ed5 	.word	0x08000ed5
 80009b8:	08000ed5 	.word	0x08000ed5
 80009bc:	08000ed5 	.word	0x08000ed5
 80009c0:	08000ed5 	.word	0x08000ed5
 80009c4:	08000ed5 	.word	0x08000ed5
 80009c8:	08000ed5 	.word	0x08000ed5
 80009cc:	08000ed5 	.word	0x08000ed5
 80009d0:	08000ed5 	.word	0x08000ed5
 80009d4:	08000ed5 	.word	0x08000ed5
 80009d8:	08000ed5 	.word	0x08000ed5
 80009dc:	08000ec9 	.word	0x08000ec9
 80009e0:	08000ea5 	.word	0x08000ea5
 80009e4:	08000ed5 	.word	0x08000ed5
 80009e8:	08000ed5 	.word	0x08000ed5
 80009ec:	08000ed5 	.word	0x08000ed5
 80009f0:	08000ed5 	.word	0x08000ed5
 80009f4:	08000ed5 	.word	0x08000ed5
 80009f8:	08000ed5 	.word	0x08000ed5
 80009fc:	08000ed5 	.word	0x08000ed5
 8000a00:	08000ed5 	.word	0x08000ed5
 8000a04:	08000ed5 	.word	0x08000ed5
 8000a08:	08000ed5 	.word	0x08000ed5
 8000a0c:	08000ed5 	.word	0x08000ed5
 8000a10:	08000ed5 	.word	0x08000ed5
 8000a14:	08000ed5 	.word	0x08000ed5
 8000a18:	08000ed5 	.word	0x08000ed5
 8000a1c:	08000ed5 	.word	0x08000ed5
 8000a20:	08000e93 	.word	0x08000e93
	case 0x10: {
		printf("SDN1 ON\n");
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a26:	f016 fc5f 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fe4b 	bl	80096cc <HAL_GPIO_WritePin>
		break;
 8000a36:	e258      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a3a:	f016 fc55 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fe41 	bl	80096cc <HAL_GPIO_WritePin>
		break;
 8000a4a:	e24e      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
 8000a4c:	24000cb0 	.word	0x24000cb0
 8000a50:	240005ec 	.word	0x240005ec
 8000a54:	08017b00 	.word	0x08017b00
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	08017b08 	.word	0x08017b08
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a60:	48ae      	ldr	r0, [pc, #696]	; (8000d1c <HAL_UART_RxCpltCallback+0x6a4>)
 8000a62:	f016 fc41 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000a66:	4bae      	ldr	r3, [pc, #696]	; (8000d20 <HAL_UART_RxCpltCallback+0x6a8>)
 8000a68:	2120      	movs	r1, #32
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 fe2d 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_2v5].is_enabled = 1;
 8000a72:	4bac      	ldr	r3, [pc, #688]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		break;
 8000a7a:	e236      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a7c:	48aa      	ldr	r0, [pc, #680]	; (8000d28 <HAL_UART_RxCpltCallback+0x6b0>)
 8000a7e:	f016 fc33 	bl	80172e8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8000a82:	2308      	movs	r3, #8
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	e019      	b.n	8000abc <HAL_UART_RxCpltCallback+0x444>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000a88:	4aa8      	ldr	r2, [pc, #672]	; (8000d2c <HAL_UART_RxCpltCallback+0x6b4>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a90:	4aa6      	ldr	r2, [pc, #664]	; (8000d2c <HAL_UART_RxCpltCallback+0x6b4>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f008 fe15 	bl	80096cc <HAL_GPIO_WritePin>
			rail_monitor[i].is_enabled = 0;
 8000aa2:	49a0      	ldr	r1, [pc, #640]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	440b      	add	r3, r1
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		for (int i = 8; i > 0; i--) {
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dce2      	bgt.n	8000a88 <HAL_UART_RxCpltCallback+0x410>
		}

		break;
 8000ac2:	e212      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ac4:	489a      	ldr	r0, [pc, #616]	; (8000d30 <HAL_UART_RxCpltCallback+0x6b8>)
 8000ac6:	f016 fc0f 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aca:	4b9a      	ldr	r3, [pc, #616]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fdfa 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_3v3].is_enabled = 1;
 8000ad8:	4b92      	ldr	r3, [pc, #584]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		break;
 8000ae0:	e203      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ae2:	4895      	ldr	r0, [pc, #596]	; (8000d38 <HAL_UART_RxCpltCallback+0x6c0>)
 8000ae4:	f016 fc00 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ae8:	4b92      	ldr	r3, [pc, #584]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	2200      	movs	r2, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f008 fdeb 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_3v3].is_enabled = 0;
 8000af6:	4b8b      	ldr	r3, [pc, #556]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		break;
 8000afe:	e1f4      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b00:	488e      	ldr	r0, [pc, #568]	; (8000d3c <HAL_UART_RxCpltCallback+0x6c4>)
 8000b02:	f016 fbf1 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b06:	4b8b      	ldr	r3, [pc, #556]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f008 fddd 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_5v].is_enabled = 1;
 8000b12:	4b84      	ldr	r3, [pc, #528]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		break;
 8000b1a:	e1e6      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b1c:	4888      	ldr	r0, [pc, #544]	; (8000d40 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b1e:	f016 fbe3 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b22:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	2200      	movs	r2, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f008 fdcf 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_5v].is_enabled = 0;
 8000b2e:	4b7d      	ldr	r3, [pc, #500]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		break;
 8000b36:	e1d8      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b38:	4882      	ldr	r0, [pc, #520]	; (8000d44 <HAL_UART_RxCpltCallback+0x6cc>)
 8000b3a:	f016 fbd5 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b3e:	4b7d      	ldr	r3, [pc, #500]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	2201      	movs	r2, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f008 fdc1 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n3v3].is_enabled = 1;
 8000b4a:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		break;
 8000b52:	e1ca      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b54:	487c      	ldr	r0, [pc, #496]	; (8000d48 <HAL_UART_RxCpltCallback+0x6d0>)
 8000b56:	f016 fbc7 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b5a:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f008 fdb3 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n3v3].is_enabled = 0;
 8000b66:	4b6f      	ldr	r3, [pc, #444]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		break;
 8000b6e:	e1bc      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b70:	4876      	ldr	r0, [pc, #472]	; (8000d4c <HAL_UART_RxCpltCallback+0x6d4>)
 8000b72:	f016 fbb9 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b76:	4b6f      	ldr	r3, [pc, #444]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 fda4 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n5v].is_enabled = 1;
 8000b84:	4b67      	ldr	r3, [pc, #412]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		break;
 8000b8c:	e1ad      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b8e:	4870      	ldr	r0, [pc, #448]	; (8000d50 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b90:	f016 fbaa 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b94:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f008 fd95 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n5v].is_enabled = 0;
 8000ba2:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		break;
 8000baa:	e19e      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000bac:	4869      	ldr	r0, [pc, #420]	; (8000d54 <HAL_UART_RxCpltCallback+0x6dc>)
 8000bae:	f016 fb9b 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000bb2:	4b60      	ldr	r3, [pc, #384]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 fd86 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_15v].is_enabled = 1;
 8000bc0:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		break;
 8000bc8:	e18f      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bca:	4863      	ldr	r0, [pc, #396]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bcc:	f016 fb8c 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bd0:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f008 fd77 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_15v].is_enabled = 0;
 8000bde:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		break;
 8000be6:	e180      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000be8:	485c      	ldr	r0, [pc, #368]	; (8000d5c <HAL_UART_RxCpltCallback+0x6e4>)
 8000bea:	f016 fb7d 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bee:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f008 fd68 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n200v].is_enabled = 1;
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		break;
 8000c04:	e171      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c06:	4856      	ldr	r0, [pc, #344]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c08:	f016 fb6e 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000c0c:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 fd59 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n200v].is_enabled = 0;
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		break;
 8000c22:	e162      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c24:	484f      	ldr	r0, [pc, #316]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000c26:	f016 fb5f 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <HAL_UART_RxCpltCallback+0x6a8>)
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 fd4b 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n800v].is_enabled = 1;
 8000c36:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		break;
 8000c3e:	e154      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c40:	4849      	ldr	r0, [pc, #292]	; (8000d68 <HAL_UART_RxCpltCallback+0x6f0>)
 8000c42:	f016 fb51 	bl	80172e8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <HAL_UART_RxCpltCallback+0x6a8>)
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f008 fd3d 	bl	80096cc <HAL_GPIO_WritePin>
		rail_monitor[RAIL_n800v].is_enabled = 0;
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		break;
 8000c5a:	e146      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c5c:	4843      	ldr	r0, [pc, #268]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c5e:	f016 fb43 	bl	80172e8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c62:	2300      	movs	r3, #0
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2320      	movs	r3, #32
 8000c68:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4841      	ldr	r0, [pc, #260]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000c6e:	f005 f991 	bl	8005f94 <HAL_DAC_Start_DMA>
		break;
 8000c72:	e13a      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c74:	4840      	ldr	r0, [pc, #256]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000c76:	f016 fb37 	bl	80172e8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	483d      	ldr	r0, [pc, #244]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000c7e:	f005 fa49 	bl	8006114 <HAL_DAC_Stop_DMA>
		break;
 8000c82:	e132      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c84:	483d      	ldr	r0, [pc, #244]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000c86:	f016 fb2f 	bl	80172e8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c8a:	210c      	movs	r1, #12
 8000c8c:	483c      	ldr	r0, [pc, #240]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000c8e:	f00e f921 	bl	800eed4 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2102      	movs	r1, #2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f012 fd85 	bl	80137a8 <osEventFlagsSet>
		ERPA_ON = 1;
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
		break;
 8000ca4:	e121      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000ca6:	4839      	ldr	r0, [pc, #228]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000ca8:	f016 fb1e 	bl	80172e8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cac:	210c      	movs	r1, #12
 8000cae:	4834      	ldr	r0, [pc, #208]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000cb0:	f00e fa6a 	bl	800f188 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cb4:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		break;
 8000cba:	e116      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cbc:	4834      	ldr	r0, [pc, #208]	; (8000d90 <HAL_UART_RxCpltCallback+0x718>)
 8000cbe:	f016 fb13 	bl	80172e8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4833      	ldr	r0, [pc, #204]	; (8000d94 <HAL_UART_RxCpltCallback+0x71c>)
 8000cc6:	f00e f905 	bl	800eed4 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f012 fd69 	bl	80137a8 <osEventFlagsSet>
		PMT_ON = 1;
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_UART_RxCpltCallback+0x720>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
		break;
 8000cdc:	e105      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000cde:	482f      	ldr	r0, [pc, #188]	; (8000d9c <HAL_UART_RxCpltCallback+0x724>)
 8000ce0:	f016 fb02 	bl	80172e8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	482b      	ldr	r0, [pc, #172]	; (8000d94 <HAL_UART_RxCpltCallback+0x71c>)
 8000ce8:	f00e fa4e 	bl	800f188 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <HAL_UART_RxCpltCallback+0x720>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
		break;
 8000cf2:	e0fa      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000cf4:	482a      	ldr	r0, [pc, #168]	; (8000da0 <HAL_UART_RxCpltCallback+0x728>)
 8000cf6:	f016 faf7 	bl	80172e8 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f012 fd51 	bl	80137a8 <osEventFlagsSet>
		HK_ON = 1;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_UART_RxCpltCallback+0x72c>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
		break;
 8000d0c:	e0ed      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d0e:	4826      	ldr	r0, [pc, #152]	; (8000da8 <HAL_UART_RxCpltCallback+0x730>)
 8000d10:	f016 faea 	bl	80172e8 <puts>
		HK_ON = 0;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_UART_RxCpltCallback+0x72c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
		break;
 8000d1a:	e0e6      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
 8000d1c:	08017b14 	.word	0x08017b14
 8000d20:	58020400 	.word	0x58020400
 8000d24:	24000bd8 	.word	0x24000bd8
 8000d28:	08017b20 	.word	0x08017b20
 8000d2c:	08017e54 	.word	0x08017e54
 8000d30:	08017b2c 	.word	0x08017b2c
 8000d34:	58020800 	.word	0x58020800
 8000d38:	08017b38 	.word	0x08017b38
 8000d3c:	08017b48 	.word	0x08017b48
 8000d40:	08017b54 	.word	0x08017b54
 8000d44:	08017b60 	.word	0x08017b60
 8000d48:	08017b6c 	.word	0x08017b6c
 8000d4c:	08017b7c 	.word	0x08017b7c
 8000d50:	08017b88 	.word	0x08017b88
 8000d54:	08017b94 	.word	0x08017b94
 8000d58:	08017ba0 	.word	0x08017ba0
 8000d5c:	08017bac 	.word	0x08017bac
 8000d60:	08017bbc 	.word	0x08017bbc
 8000d64:	08017bcc 	.word	0x08017bcc
 8000d68:	08017bd8 	.word	0x08017bd8
 8000d6c:	08017be8 	.word	0x08017be8
 8000d70:	2400000c 	.word	0x2400000c
 8000d74:	240002f4 	.word	0x240002f4
 8000d78:	08017bf8 	.word	0x08017bf8
 8000d7c:	08017c08 	.word	0x08017c08
 8000d80:	24000554 	.word	0x24000554
 8000d84:	24000cac 	.word	0x24000cac
 8000d88:	24000ca7 	.word	0x24000ca7
 8000d8c:	08017c10 	.word	0x08017c10
 8000d90:	08017c1c 	.word	0x08017c1c
 8000d94:	24000508 	.word	0x24000508
 8000d98:	24000ca6 	.word	0x24000ca6
 8000d9c:	08017c24 	.word	0x08017c24
 8000da0:	08017c2c 	.word	0x08017c2c
 8000da4:	24000ca8 	.word	0x24000ca8
 8000da8:	08017c34 	.word	0x08017c34
	}
	case 0x1D: {
		printf("Step Up\n");
 8000dac:	4851      	ldr	r0, [pc, #324]	; (8000ef4 <HAL_UART_RxCpltCallback+0x87c>)
 8000dae:	f016 fa9b 	bl	80172e8 <puts>
		if (step < 17) {
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b10      	cmp	r3, #16
 8000dba:	f200 808f 	bhi.w	8000edc <HAL_UART_RxCpltCallback+0x864>
			step += 2;
 8000dbe:	4b4e      	ldr	r3, [pc, #312]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000dca:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <HAL_UART_RxCpltCallback+0x884>)
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4848      	ldr	r0, [pc, #288]	; (8000f00 <HAL_UART_RxCpltCallback+0x888>)
 8000de0:	f005 fa3b 	bl	800625a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000de4:	2100      	movs	r1, #0
 8000de6:	4846      	ldr	r0, [pc, #280]	; (8000f00 <HAL_UART_RxCpltCallback+0x888>)
 8000de8:	f005 f87c 	bl	8005ee4 <HAL_DAC_Start>
		}
		break;
 8000dec:	e076      	b.n	8000edc <HAL_UART_RxCpltCallback+0x864>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000dee:	4845      	ldr	r0, [pc, #276]	; (8000f04 <HAL_UART_RxCpltCallback+0x88c>)
 8000df0:	f016 fa7a 	bl	80172e8 <puts>
		if (step > 3) {
 8000df4:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d970      	bls.n	8000ee0 <HAL_UART_RxCpltCallback+0x868>
			step -= 2;
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	3b02      	subs	r3, #2
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000e0a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_UART_RxCpltCallback+0x880>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_UART_RxCpltCallback+0x884>)
 8000e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4838      	ldr	r0, [pc, #224]	; (8000f00 <HAL_UART_RxCpltCallback+0x888>)
 8000e20:	f005 fa1b 	bl	800625a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e24:	2100      	movs	r1, #0
 8000e26:	4836      	ldr	r0, [pc, #216]	; (8000f00 <HAL_UART_RxCpltCallback+0x888>)
 8000e28:	f005 f85c 	bl	8005ee4 <HAL_DAC_Start>
		}
		break;
 8000e2c:	e058      	b.n	8000ee0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e2e:	4836      	ldr	r0, [pc, #216]	; (8000f08 <HAL_UART_RxCpltCallback+0x890>)
 8000e30:	f016 fa5a 	bl	80172e8 <puts>
		if (cadence <= 50000) {
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d851      	bhi.n	8000ee4 <HAL_UART_RxCpltCallback+0x86c>
			cadence *= 2;
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e48:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e54:	e046      	b.n	8000ee4 <HAL_UART_RxCpltCallback+0x86c>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e56:	482e      	ldr	r0, [pc, #184]	; (8000f10 <HAL_UART_RxCpltCallback+0x898>)
 8000e58:	f016 fa46 	bl	80172e8 <puts>
		if (cadence >= 6250) {
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d93f      	bls.n	8000ee8 <HAL_UART_RxCpltCallback+0x870>
			cadence /= 2;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e70:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_UART_RxCpltCallback+0x894>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e7c:	e034      	b.n	8000ee8 <HAL_UART_RxCpltCallback+0x870>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e7e:	4825      	ldr	r0, [pc, #148]	; (8000f14 <HAL_UART_RxCpltCallback+0x89c>)
 8000e80:	f016 fa32 	bl	80172e8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <HAL_UART_RxCpltCallback+0x8a0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2116      	movs	r1, #22
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f012 fc8c 	bl	80137a8 <osEventFlagsSet>
		break;
 8000e90:	e02b      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e92:	4822      	ldr	r0, [pc, #136]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000e94:	f016 fa28 	bl	80172e8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_UART_RxCpltCallback+0x8a8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f014 fa85 	bl	80153ac <xTaskResumeFromISR>
		break;
 8000ea2:	e022      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000ea4:	481f      	ldr	r0, [pc, #124]	; (8000f24 <HAL_UART_RxCpltCallback+0x8ac>)
 8000ea6:	f016 fa1f 	bl	80172e8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_UART_RxCpltCallback+0x8b0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f014 fa7c 	bl	80153ac <xTaskResumeFromISR>
		break;
 8000eb4:	e019      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0xAF: {
		sync();
 8000eb6:	f001 f9f9 	bl	80022ac <sync>
		break;
 8000eba:	e016      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0xBF: {
		xTaskResumeFromISR(Science_taskHandle);
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_UART_RxCpltCallback+0x8b4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f014 fa73 	bl	80153ac <xTaskResumeFromISR>
		break;
 8000ec6:	e010      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	case 0xCF: {
		xTaskResumeFromISR(Idle_taskHandle);
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f014 fa6d 	bl	80153ac <xTaskResumeFromISR>
		break;
 8000ed2:	e00a      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
	}
	default: {
		printf("Unknown Command\n");
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_UART_RxCpltCallback+0x8bc>)
 8000ed6:	f016 fa07 	bl	80172e8 <puts>
		break;
 8000eda:	e006      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
		break;
 8000edc:	bf00      	nop
 8000ede:	e004      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
		break;
 8000ee0:	bf00      	nop
 8000ee2:	e002      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
		break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <HAL_UART_RxCpltCallback+0x872>
		break;
 8000ee8:	bf00      	nop
	}
	}
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08017c3c 	.word	0x08017c3c
 8000ef8:	24000008 	.word	0x24000008
 8000efc:	2400000c 	.word	0x2400000c
 8000f00:	240002f4 	.word	0x240002f4
 8000f04:	08017c44 	.word	0x08017c44
 8000f08:	08017c50 	.word	0x08017c50
 8000f0c:	24000004 	.word	0x24000004
 8000f10:	08017c5c 	.word	0x08017c5c
 8000f14:	08017c68 	.word	0x08017c68
 8000f18:	24000cac 	.word	0x24000cac
 8000f1c:	08017c78 	.word	0x08017c78
 8000f20:	24000704 	.word	0x24000704
 8000f24:	08017c84 	.word	0x08017c84
 8000f28:	24000964 	.word	0x24000964
 8000f2c:	24000bd0 	.word	0x24000bd0
 8000f30:	24000bd4 	.word	0x24000bd4
 8000f34:	08017c90 	.word	0x08017c90

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f003 fa3e 	bl	80043bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f8c6 	bl	80010d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f44:	f000 f944 	bl	80011d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 feba 	bl	8001cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f000 fe80 	bl	8001c50 <MX_DMA_Init>
  MX_TIM3_Init();
 8000f50:	f000 fdc8 	bl	8001ae4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f54:	f000 fe14 	bl	8001b80 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f58:	f000 fb50 	bl	80015fc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f5c:	f000 fc46 	bl	80017ec <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f60:	f000 fd4a 	bl	80019f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f64:	f000 fc9a 	bl	800189c <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f68:	f000 fa84 	bl	8001474 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f960 	bl	8001230 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f70:	f000 fb12 	bl	8001598 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f74:	f000 fbe2 	bl	800173c <MX_SPI1_Init>
  MX_RTC_Init();
 8000f78:	f000 fb82 	bl	8001680 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f7c:	f012 fa9c 	bl	80134b8 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2108      	movs	r1, #8
 8000f84:	2080      	movs	r0, #128	; 0x80
 8000f86:	f012 fd0c 	bl	80139a2 <osMessageQueueNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a2f      	ldr	r2, [pc, #188]	; (800104c <main+0x114>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <main+0x118>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	482f      	ldr	r0, [pc, #188]	; (8001054 <main+0x11c>)
 8000f96:	f012 fad9 	bl	801354c <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <main+0x120>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000fa0:	4a2e      	ldr	r2, [pc, #184]	; (800105c <main+0x124>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	482e      	ldr	r0, [pc, #184]	; (8001060 <main+0x128>)
 8000fa6:	f012 fad1 	bl	801354c <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <main+0x12c>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000fb0:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <main+0x130>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	482d      	ldr	r0, [pc, #180]	; (800106c <main+0x134>)
 8000fb6:	f012 fac9 	bl	801354c <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <main+0x138>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000fc0:	4a2c      	ldr	r2, [pc, #176]	; (8001074 <main+0x13c>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	482c      	ldr	r0, [pc, #176]	; (8001078 <main+0x140>)
 8000fc6:	f012 fac1 	bl	801354c <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <main+0x144>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000fd0:	4a2b      	ldr	r2, [pc, #172]	; (8001080 <main+0x148>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	482b      	ldr	r0, [pc, #172]	; (8001084 <main+0x14c>)
 8000fd6:	f012 fab9 	bl	801354c <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <main+0x150>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	; (800108c <main+0x154>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	482a      	ldr	r0, [pc, #168]	; (8001090 <main+0x158>)
 8000fe6:	f012 fab1 	bl	801354c <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a29      	ldr	r2, [pc, #164]	; (8001094 <main+0x15c>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <main+0x160>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <main+0x164>)
 8000ff6:	f012 faa9 	bl	801354c <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <main+0x168>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <main+0x16c>)
 8001002:	2100      	movs	r1, #0
 8001004:	4828      	ldr	r0, [pc, #160]	; (80010a8 <main+0x170>)
 8001006:	f012 faa1 	bl	801354c <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <main+0x174>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <main+0x178>)
 8001012:	2100      	movs	r1, #0
 8001014:	4827      	ldr	r0, [pc, #156]	; (80010b4 <main+0x17c>)
 8001016:	f012 fa99 	bl	801354c <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <main+0x180>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <main+0x184>)
 8001022:	2100      	movs	r1, #0
 8001024:	4826      	ldr	r0, [pc, #152]	; (80010c0 <main+0x188>)
 8001026:	f012 fa91 	bl	801354c <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <main+0x18c>)
 800102e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001030:	2000      	movs	r0, #0
 8001032:	f012 fb79 	bl	8013728 <osEventFlagsNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <main+0x190>)
 800103a:	6013      	str	r3, [r2, #0]
	system_setup();
 800103c:	f001 fa02 	bl	8002444 <system_setup>
	printf("Starting kernal...\n");
 8001040:	4822      	ldr	r0, [pc, #136]	; (80010cc <main+0x194>)
 8001042:	f016 f951 	bl	80172e8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001046:	f012 fa5b 	bl	8013500 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800104a:	e7fe      	b.n	800104a <main+0x112>
 800104c:	24000c90 	.word	0x24000c90
 8001050:	08017cec 	.word	0x08017cec
 8001054:	08002ee9 	.word	0x08002ee9
 8001058:	240006f8 	.word	0x240006f8
 800105c:	08017d10 	.word	0x08017d10
 8001060:	08002f2d 	.word	0x08002f2d
 8001064:	240006fc 	.word	0x240006fc
 8001068:	08017d34 	.word	0x08017d34
 800106c:	08002f71 	.word	0x08002f71
 8001070:	24000700 	.word	0x24000700
 8001074:	08017d58 	.word	0x08017d58
 8001078:	08002fb5 	.word	0x08002fb5
 800107c:	24000704 	.word	0x24000704
 8001080:	08017d7c 	.word	0x08017d7c
 8001084:	08003039 	.word	0x08003039
 8001088:	24000964 	.word	0x24000964
 800108c:	08017da0 	.word	0x08017da0
 8001090:	080030bd 	.word	0x080030bd
 8001094:	24000bc4 	.word	0x24000bc4
 8001098:	08017dc4 	.word	0x08017dc4
 800109c:	08003181 	.word	0x08003181
 80010a0:	24000bc8 	.word	0x24000bc8
 80010a4:	08017de8 	.word	0x08017de8
 80010a8:	0800336d 	.word	0x0800336d
 80010ac:	24000bcc 	.word	0x24000bcc
 80010b0:	08017e0c 	.word	0x08017e0c
 80010b4:	080033a9 	.word	0x080033a9
 80010b8:	24000bd0 	.word	0x24000bd0
 80010bc:	08017e30 	.word	0x08017e30
 80010c0:	080034a9 	.word	0x080034a9
 80010c4:	24000bd4 	.word	0x24000bd4
 80010c8:	24000cac 	.word	0x24000cac
 80010cc:	08017ca0 	.word	0x08017ca0

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09c      	sub	sp, #112	; 0x70
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	224c      	movs	r2, #76	; 0x4c
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f015 ffac 	bl	801703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2220      	movs	r2, #32
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f015 ffa6 	bl	801703c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f009 f94d 	bl	800a390 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <SystemClock_Config+0xf8>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <SystemClock_Config+0xf8>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <SystemClock_Config+0xf8>)
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <SystemClock_Config+0xfc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001118:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <SystemClock_Config+0xfc>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <SystemClock_Config+0xfc>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800112c:	bf00      	nop
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <SystemClock_Config+0xfc>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113a:	d1f8      	bne.n	800112e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800113c:	2303      	movs	r3, #3
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001146:	2309      	movs	r3, #9
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	2340      	movs	r3, #64	; 0x40
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	2302      	movs	r3, #2
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001156:	2304      	movs	r3, #4
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800115a:	2320      	movs	r3, #32
 800115c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800115e:	2304      	movs	r3, #4
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001162:	2304      	movs	r3, #4
 8001164:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800116a:	2308      	movs	r3, #8
 800116c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800116e:	2300      	movs	r3, #0
 8001170:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4618      	mov	r0, r3
 800117c:	f009 f942 	bl	800a404 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001186:	f002 fa01 	bl	800358c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	233f      	movs	r3, #63	; 0x3f
 800118c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2101      	movs	r1, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 fd82 	bl	800acb8 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011ba:	f002 f9e7 	bl	800358c <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3770      	adds	r7, #112	; 0x70
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	58000400 	.word	0x58000400
 80011cc:	58024800 	.word	0x58024800

080011d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0b0      	sub	sp, #192	; 0xc0
 80011d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	22c0      	movs	r2, #192	; 0xc0
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f015 ff2d 	bl	801703c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80011f2:	2320      	movs	r3, #32
 80011f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80011f6:	2308      	movs	r3, #8
 80011f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4618      	mov	r0, r3
 8001218:	f00a f91c 	bl	800b454 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001222:	f002 f9b3 	bl	800358c <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	37c0      	adds	r7, #192	; 0xc0
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001254:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <MX_ADC1_Init+0x210>)
 8001256:	4a7b      	ldr	r2, [pc, #492]	; (8001444 <MX_ADC1_Init+0x214>)
 8001258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <MX_ADC1_Init+0x210>)
 800125c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001260:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001262:	4b77      	ldr	r3, [pc, #476]	; (8001440 <MX_ADC1_Init+0x210>)
 8001264:	2208      	movs	r2, #8
 8001266:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001268:	4b75      	ldr	r3, [pc, #468]	; (8001440 <MX_ADC1_Init+0x210>)
 800126a:	2201      	movs	r2, #1
 800126c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126e:	4b74      	ldr	r3, [pc, #464]	; (8001440 <MX_ADC1_Init+0x210>)
 8001270:	2204      	movs	r2, #4
 8001272:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001274:	4b72      	ldr	r3, [pc, #456]	; (8001440 <MX_ADC1_Init+0x210>)
 8001276:	2200      	movs	r2, #0
 8001278:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127a:	4b71      	ldr	r3, [pc, #452]	; (8001440 <MX_ADC1_Init+0x210>)
 800127c:	2201      	movs	r2, #1
 800127e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001280:	4b6f      	ldr	r3, [pc, #444]	; (8001440 <MX_ADC1_Init+0x210>)
 8001282:	220b      	movs	r2, #11
 8001284:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <MX_ADC1_Init+0x210>)
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <MX_ADC1_Init+0x210>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001292:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <MX_ADC1_Init+0x210>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <MX_ADC1_Init+0x210>)
 800129a:	2203      	movs	r2, #3
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800129e:	4b68      	ldr	r3, [pc, #416]	; (8001440 <MX_ADC1_Init+0x210>)
 80012a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012a6:	4b66      	ldr	r3, [pc, #408]	; (8001440 <MX_ADC1_Init+0x210>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012ac:	4b64      	ldr	r3, [pc, #400]	; (8001440 <MX_ADC1_Init+0x210>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b4:	4862      	ldr	r0, [pc, #392]	; (8001440 <MX_ADC1_Init+0x210>)
 80012b6:	f003 fb0d 	bl	80048d4 <HAL_ADC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012c0:	f002 f964 	bl	800358c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	485c      	ldr	r0, [pc, #368]	; (8001440 <MX_ADC1_Init+0x210>)
 80012d0:	f004 fc28 	bl	8005b24 <HAL_ADCEx_MultiModeConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012da:	f002 f957 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012de:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <MX_ADC1_Init+0x218>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e2:	2306      	movs	r3, #6
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80012e6:	2307      	movs	r3, #7
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f0:	2304      	movs	r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	484f      	ldr	r0, [pc, #316]	; (8001440 <MX_ADC1_Init+0x210>)
 8001302:	f003 fd6b 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800130c:	f002 f93e 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <MX_ADC1_Init+0x21c>)
 8001312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001314:	230c      	movs	r3, #12
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4848      	ldr	r0, [pc, #288]	; (8001440 <MX_ADC1_Init+0x210>)
 800131e:	f003 fd5d 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001328:	f002 f930 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <MX_ADC1_Init+0x220>)
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001330:	2312      	movs	r3, #18
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4841      	ldr	r0, [pc, #260]	; (8001440 <MX_ADC1_Init+0x210>)
 800133a:	f003 fd4f 	bl	8004ddc <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001344:	f002 f922 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001348:	4b42      	ldr	r3, [pc, #264]	; (8001454 <MX_ADC1_Init+0x224>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800134c:	2318      	movs	r3, #24
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	483a      	ldr	r0, [pc, #232]	; (8001440 <MX_ADC1_Init+0x210>)
 8001356:	f003 fd41 	bl	8004ddc <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001360:	f002 f914 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001364:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <MX_ADC1_Init+0x228>)
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <MX_ADC1_Init+0x210>)
 8001374:	f003 fd32 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800137e:	f002 f905 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <MX_ADC1_Init+0x22c>)
 8001384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001386:	f44f 7383 	mov.w	r3, #262	; 0x106
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <MX_ADC1_Init+0x210>)
 8001392:	f003 fd23 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800139c:	f002 f8f6 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <MX_ADC1_Init+0x230>)
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013a4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_ADC1_Init+0x210>)
 80013b0:	f003 fd14 	bl	8004ddc <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013ba:	f002 f8e7 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <MX_ADC1_Init+0x234>)
 80013c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013c2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_ADC1_Init+0x210>)
 80013ce:	f003 fd05 	bl	8004ddc <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013d8:	f002 f8d8 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_ADC1_Init+0x238>)
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013e0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <MX_ADC1_Init+0x210>)
 80013ec:	f003 fcf6 	bl	8004ddc <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80013f6:	f002 f8c9 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC1_Init+0x23c>)
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80013fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC1_Init+0x210>)
 800140a:	f003 fce7 	bl	8004ddc <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001414:	f002 f8ba 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_ADC1_Init+0x240>)
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800141c:	f240 2306 	movw	r3, #518	; 0x206
 8001420:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_ADC1_Init+0x210>)
 8001428:	f003 fcd8 	bl	8004ddc <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001432:	f002 f8ab 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2400013c 	.word	0x2400013c
 8001444:	40022000 	.word	0x40022000
 8001448:	0c900008 	.word	0x0c900008
 800144c:	10c00010 	.word	0x10c00010
 8001450:	14f00020 	.word	0x14f00020
 8001454:	1d500080 	.word	0x1d500080
 8001458:	21800100 	.word	0x21800100
 800145c:	25b00200 	.word	0x25b00200
 8001460:	2a000400 	.word	0x2a000400
 8001464:	2e300800 	.word	0x2e300800
 8001468:	3ac04000 	.word	0x3ac04000
 800146c:	3ef08000 	.word	0x3ef08000
 8001470:	47520000 	.word	0x47520000

08001474 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <MX_ADC3_Init+0x110>)
 800148e:	4a3e      	ldr	r2, [pc, #248]	; (8001588 <MX_ADC3_Init+0x114>)
 8001490:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001492:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <MX_ADC3_Init+0x110>)
 8001494:	2208      	movs	r2, #8
 8001496:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <MX_ADC3_Init+0x110>)
 800149a:	2201      	movs	r2, #1
 800149c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <MX_ADC3_Init+0x110>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <MX_ADC3_Init+0x110>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <MX_ADC3_Init+0x110>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <MX_ADC3_Init+0x110>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <MX_ADC3_Init+0x110>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <MX_ADC3_Init+0x110>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <MX_ADC3_Init+0x110>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_ADC3_Init+0x110>)
 80014ca:	2203      	movs	r2, #3
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <MX_ADC3_Init+0x110>)
 80014d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_ADC3_Init+0x110>)
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_ADC3_Init+0x110>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014e4:	4827      	ldr	r0, [pc, #156]	; (8001584 <MX_ADC3_Init+0x110>)
 80014e6:	f003 f9f5 	bl	80048d4 <HAL_ADC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80014f0:	f002 f84c 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_ADC3_Init+0x118>)
 80014f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f8:	2306      	movs	r3, #6
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80014fc:	2307      	movs	r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001500:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001504:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001506:	2304      	movs	r3, #4
 8001508:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	481b      	ldr	r0, [pc, #108]	; (8001584 <MX_ADC3_Init+0x110>)
 8001518:	f003 fc60 	bl	8004ddc <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001522:	f002 f833 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC3_Init+0x11c>)
 8001528:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800152a:	230c      	movs	r3, #12
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_ADC3_Init+0x110>)
 8001534:	f003 fc52 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800153e:	f002 f825 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001546:	2312      	movs	r3, #18
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <MX_ADC3_Init+0x110>)
 8001550:	f003 fc44 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800155a:	f002 f817 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <MX_ADC3_Init+0x120>)
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001562:	2318      	movs	r3, #24
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_ADC3_Init+0x110>)
 800156c:	f003 fc36 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001576:	f002 f809 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	240001a0 	.word	0x240001a0
 8001588:	58026000 	.word	0x58026000
 800158c:	cb840000 	.word	0xcb840000
 8001590:	cfb80000 	.word	0xcfb80000
 8001594:	04300002 	.word	0x04300002

08001598 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f015 fd49 	bl	801703c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_DAC1_Init+0x5c>)
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_DAC1_Init+0x60>)
 80015ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015b0:	4810      	ldr	r0, [pc, #64]	; (80015f4 <MX_DAC1_Init+0x5c>)
 80015b2:	f004 fc75 	bl	8005ea0 <HAL_DAC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015bc:	f001 ffe6 	bl	800358c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015c4:	230a      	movs	r3, #10
 80015c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_DAC1_Init+0x5c>)
 80015dc:	f004 fe90 	bl	8006300 <HAL_DAC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015e6:	f001 ffd1 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	240002f4 	.word	0x240002f4
 80015f8:	40007400 	.word	0x40007400

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_I2C1_Init+0x78>)
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <MX_I2C1_Init+0x7c>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_I2C1_Init+0x78>)
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_I2C1_Init+0x80>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_I2C1_Init+0x78>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_I2C1_Init+0x78>)
 8001614:	2201      	movs	r2, #1
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_I2C1_Init+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_I2C1_Init+0x78>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_I2C1_Init+0x78>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x78>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <MX_I2C1_Init+0x78>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001636:	480f      	ldr	r0, [pc, #60]	; (8001674 <MX_I2C1_Init+0x78>)
 8001638:	f008 f862 	bl	8009700 <HAL_I2C_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001642:	f001 ffa3 	bl	800358c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <MX_I2C1_Init+0x78>)
 800164a:	f008 fda9 	bl	800a1a0 <HAL_I2CEx_ConfigAnalogFilter>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001654:	f001 ff9a 	bl	800358c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <MX_I2C1_Init+0x78>)
 800165c:	f008 fdeb 	bl	800a236 <HAL_I2CEx_ConfigDigitalFilter>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f001 ff91 	bl	800358c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800166a:	2001      	movs	r0, #1
 800166c:	f008 fe30 	bl	800a2d0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	24000380 	.word	0x24000380
 8001678:	40005400 	.word	0x40005400
 800167c:	0020081f 	.word	0x0020081f

08001680 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_RTC_Init+0xb4>)
 800169a:	4a27      	ldr	r2, [pc, #156]	; (8001738 <MX_RTC_Init+0xb8>)
 800169c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <MX_RTC_Init+0xb4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <MX_RTC_Init+0xb4>)
 80016a6:	2263      	movs	r2, #99	; 0x63
 80016a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <MX_RTC_Init+0xb4>)
 80016ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80016b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_RTC_Init+0xb4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_RTC_Init+0xb4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_RTC_Init+0xb4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_RTC_Init+0xb4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ca:	481a      	ldr	r0, [pc, #104]	; (8001734 <MX_RTC_Init+0xb4>)
 80016cc:	f00c fbc0 	bl	800de50 <HAL_RTC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016d6:	f001 ff59 	bl	800358c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016da:	2300      	movs	r3, #0
 80016dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016de:	2300      	movs	r3, #0
 80016e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2201      	movs	r2, #1
 80016f2:	4619      	mov	r1, r3
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <MX_RTC_Init+0xb4>)
 80016f6:	f00c fc2d 	bl	800df54 <HAL_RTC_SetTime>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001700:	f001 ff44 	bl	800358c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001704:	2301      	movs	r3, #1
 8001706:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001708:	2301      	movs	r3, #1
 800170a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800170c:	2301      	movs	r3, #1
 800170e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001710:	2300      	movs	r3, #0
 8001712:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_RTC_Init+0xb4>)
 800171c:	f00c fd14 	bl	800e148 <HAL_RTC_SetDate>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001726:	f001 ff31 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	240003d4 	.word	0x240003d4
 8001738:	58004000 	.word	0x58004000

0800173c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001742:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <MX_SPI1_Init+0xac>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001748:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800174c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001750:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001754:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001758:	220f      	movs	r2, #15
 800175a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <MX_SPI1_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_SPI1_Init+0xa8>)
 800176a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800176e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001772:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_SPI1_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_SPI1_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_SPI1_Init+0xa8>)
 8001792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_SPI1_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_SPI1_Init+0xa8>)
 80017d0:	f00c fe60 	bl	800e494 <HAL_SPI_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017da:	f001 fed7 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	240003f8 	.word	0x240003f8
 80017e8:	40013000 	.word	0x40013000

080017ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <MX_SPI2_Init+0xa8>)
 80017f2:	4a29      	ldr	r2, [pc, #164]	; (8001898 <MX_SPI2_Init+0xac>)
 80017f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <MX_SPI2_Init+0xa8>)
 80017f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001800:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001804:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001808:	220f      	movs	r2, #15
 800180a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_SPI2_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_SPI2_Init+0xa8>)
 800181a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800181e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001822:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001826:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_SPI2_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_SPI2_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_SPI2_Init+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001850:	2200      	movs	r2, #0
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001856:	2200      	movs	r2, #0
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_SPI2_Init+0xa8>)
 800185c:	2200      	movs	r2, #0
 800185e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001862:	2200      	movs	r2, #0
 8001864:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_SPI2_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_SPI2_Init+0xa8>)
 8001880:	f00c fe08 	bl	800e494 <HAL_SPI_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800188a:	f001 fe7f 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24000480 	.word	0x24000480
 8001898:	40003800 	.word	0x40003800

0800189c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09a      	sub	sp, #104	; 0x68
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	222c      	movs	r2, #44	; 0x2c
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f015 fbb0 	bl	801703c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <MX_TIM1_Init+0x154>)
 80018de:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <MX_TIM1_Init+0x158>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80018e2:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <MX_TIM1_Init+0x154>)
 80018e4:	2231      	movs	r2, #49	; 0x31
 80018e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <MX_TIM1_Init+0x154>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <MX_TIM1_Init+0x154>)
 80018f0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80018f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <MX_TIM1_Init+0x154>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <MX_TIM1_Init+0x154>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <MX_TIM1_Init+0x154>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001908:	4839      	ldr	r0, [pc, #228]	; (80019f0 <MX_TIM1_Init+0x154>)
 800190a:	f00d fa14 	bl	800ed36 <HAL_TIM_Base_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001914:	f001 fe3a 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800191e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001922:	4619      	mov	r1, r3
 8001924:	4832      	ldr	r0, [pc, #200]	; (80019f0 <MX_TIM1_Init+0x154>)
 8001926:	f00d ff8f 	bl	800f848 <HAL_TIM_ConfigClockSource>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001930:	f001 fe2c 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001934:	482e      	ldr	r0, [pc, #184]	; (80019f0 <MX_TIM1_Init+0x154>)
 8001936:	f00d fd0b 	bl	800f350 <HAL_TIM_PWM_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001940:	f001 fe24 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001954:	4619      	mov	r1, r3
 8001956:	4826      	ldr	r0, [pc, #152]	; (80019f0 <MX_TIM1_Init+0x154>)
 8001958:	f00e fccc 	bl	80102f4 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001962:	f001 fe13 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800196a:	f240 13df 	movw	r3, #479	; 0x1df
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001970:	2300      	movs	r3, #0
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4818      	ldr	r0, [pc, #96]	; (80019f0 <MX_TIM1_Init+0x154>)
 800198e:	f00d fe47 	bl	800f620 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001998:	f001 fdf8 	bl	800358c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_TIM1_Init+0x154>)
 80019d2:	f00e fd1d 	bl	8010410 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80019dc:	f001 fdd6 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <MX_TIM1_Init+0x154>)
 80019e2:	f002 f963 	bl	8003cac <HAL_TIM_MspPostInit>

}
 80019e6:	bf00      	nop
 80019e8:	3768      	adds	r7, #104	; 0x68
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24000508 	.word	0x24000508
 80019f4:	40010000 	.word	0x40010000

080019f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]
 8001a26:	615a      	str	r2, [r3, #20]
 8001a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a34:	2231      	movs	r2, #49	; 0x31
 8001a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a40:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a52:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a54:	f00d f96f 	bl	800ed36 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a5e:	f001 fd95 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a70:	f00d feea 	bl	800f848 <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a7a:	f001 fd87 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a7e:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a80:	f00d fc66 	bl	800f350 <HAL_TIM_PWM_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a8a:	f001 fd7f 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4810      	ldr	r0, [pc, #64]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001a9e:	f00e fc29 	bl	80102f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001aa8:	f001 fd70 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aac:	2360      	movs	r3, #96	; 0x60
 8001aae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001abc:	463b      	mov	r3, r7
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001ac4:	f00d fdac 	bl	800f620 <HAL_TIM_PWM_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ace:	f001 fd5d 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM2_Init+0xe8>)
 8001ad4:	f002 f8ea 	bl	8003cac <HAL_TIM_MspPostInit>

}
 8001ad8:	bf00      	nop
 8001ada:	3738      	adds	r7, #56	; 0x38
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	24000554 	.word	0x24000554

08001ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <MX_TIM3_Init+0x98>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b0a:	2263      	movs	r2, #99	; 0x63
 8001b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b16:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b28:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b2a:	f00d f904 	bl	800ed36 <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b34:	f001 fd2a 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b46:	f00d fe7f 	bl	800f848 <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b50:	f001 fd1c 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b62:	f00e fbc7 	bl	80102f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b6c:	f001 fd0e 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	240005a0 	.word	0x240005a0
 8001b7c:	40000400 	.word	0x40000400

08001b80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001b86:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <MX_USART1_UART_Init+0xcc>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001b8c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc8:	481f      	ldr	r0, [pc, #124]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bca:	f00e fcbd 	bl	8010548 <HAL_UART_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bd4:	f001 fcda 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bdc:	f011 fb5d 	bl	801329a <HAL_UARTEx_SetTxFifoThreshold>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001be6:	f001 fcd1 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bea:	2100      	movs	r1, #0
 8001bec:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bee:	f011 fb92 	bl	8013316 <HAL_UARTEx_SetRxFifoThreshold>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf8:	f001 fcc8 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001bfe:	f011 fb13 	bl	8013228 <HAL_UARTEx_DisableFifoMode>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f001 fcc0 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c12:	f011 fb80 	bl	8013316 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c18:	f011 facb 	bl	80131b2 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c1e:	f011 fa95 	bl	801314c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c30:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <MX_USART1_UART_Init+0xc8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c40:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	240005ec 	.word	0x240005ec
 8001c4c:	40011000 	.word	0x40011000

08001c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <MX_DMA_Init+0x6c>)
 8001c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <MX_DMA_Init+0x6c>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_DMA_Init+0x6c>)
 8001c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2105      	movs	r1, #5
 8001c78:	200b      	movs	r0, #11
 8001c7a:	f004 f8e9 	bl	8005e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c7e:	200b      	movs	r0, #11
 8001c80:	f004 f900 	bl	8005e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2105      	movs	r1, #5
 8001c88:	200c      	movs	r0, #12
 8001c8a:	f004 f8e1 	bl	8005e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c8e:	200c      	movs	r0, #12
 8001c90:	f004 f8f8 	bl	8005e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	200d      	movs	r0, #13
 8001c9a:	f004 f8d9 	bl	8005e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c9e:	200d      	movs	r0, #13
 8001ca0:	f004 f8f0 	bl	8005e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2105      	movs	r1, #5
 8001ca8:	2010      	movs	r0, #16
 8001caa:	f004 f8d1 	bl	8005e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cae:	2010      	movs	r0, #16
 8001cb0:	f004 f8e8 	bl	8005e84 <HAL_NVIC_EnableIRQ>

}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58024400 	.word	0x58024400

08001cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	4a2b      	ldr	r2, [pc, #172]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <MX_GPIO_Init+0xe8>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d54:	4815      	ldr	r0, [pc, #84]	; (8001dac <MX_GPIO_Init+0xec>)
 8001d56:	f007 fcb9 	bl	80096cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2164      	movs	r1, #100	; 0x64
 8001d5e:	4814      	ldr	r0, [pc, #80]	; (8001db0 <MX_GPIO_Init+0xf0>)
 8001d60:	f007 fcb4 	bl	80096cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d64:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <MX_GPIO_Init+0xec>)
 8001d7e:	f007 fadd 	bl	800933c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d82:	2364      	movs	r3, #100	; 0x64
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_GPIO_Init+0xf0>)
 8001d9a:	f007 facf 	bl	800933c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58020800 	.word	0x58020800
 8001db0:	58020400 	.word	0x58020400

08001db4 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	f107 0208 	add.w	r2, r7, #8
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4817      	ldr	r0, [pc, #92]	; (8001e30 <poll_i2c_sensor+0x7c>)
 8001dd4:	f007 fd30 	bl	8009838 <HAL_I2C_Master_Transmit>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001de2:	4814      	ldr	r0, [pc, #80]	; (8001e34 <poll_i2c_sensor+0x80>)
 8001de4:	f015 fa80 	bl	80172e8 <puts>
 8001de8:	e01c      	b.n	8001e24 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	b299      	uxth	r1, r3
 8001dee:	f107 0208 	add.w	r2, r7, #8
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <poll_i2c_sensor+0x7c>)
 8001dfc:	f007 fe34 	bl	8009a68 <HAL_I2C_Master_Receive>
 8001e00:	4603      	mov	r3, r0
 8001e02:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e04:	7b7b      	ldrb	r3, [r7, #13]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e0a:	480b      	ldr	r0, [pc, #44]	; (8001e38 <poll_i2c_sensor+0x84>)
 8001e0c:	f015 fa6c 	bl	80172e8 <puts>
 8001e10:	e008      	b.n	8001e24 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e12:	7a3b      	ldrb	r3, [r7, #8]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e1c:	7a7a      	ldrb	r2, [r7, #9]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	10db      	asrs	r3, r3, #3
 8001e22:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	24000380 	.word	0x24000380
 8001e34:	08017cb4 	.word	0x08017cb4
 8001e38:	08017cc4 	.word	0x08017cc4

08001e3c <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e44:	f107 010c 	add.w	r1, r7, #12
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <receive_pmt_spi+0x44>)
 8001e4e:	f00c fc45 	bl	800e6dc <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e56:	7b7b      	ldrb	r3, [r7, #13]
 8001e58:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <receive_pmt_spi+0x44>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <receive_pmt_spi+0x44>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e68:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7bba      	ldrb	r2, [r7, #14]
 8001e6e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	701a      	strb	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	240003f8 	.word	0x240003f8

08001e84 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e8c:	f107 010c 	add.w	r1, r7, #12
 8001e90:	2364      	movs	r3, #100	; 0x64
 8001e92:	2201      	movs	r2, #1
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <receive_erpa_spi+0x44>)
 8001e96:	f00c fc21 	bl	800e6dc <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ea0:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <receive_erpa_spi+0x44>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <receive_erpa_spi+0x44>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb0:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7bba      	ldrb	r2, [r7, #14]
 8001eb6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	701a      	strb	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	24000480 	.word	0x24000480

08001ecc <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <receive_erpa_adc+0x20>)
 8001ed6:	885b      	ldrh	r3, [r3, #2]
 8001ed8:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	89fa      	ldrh	r2, [r7, #14]
 8001ede:	801a      	strh	r2, [r3, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	24000d00 	.word	0x24000d00

08001ef0 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001ef8:	2390      	movs	r3, #144	; 0x90
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff5a 	bl	8001db4 <poll_i2c_sensor>
 8001f00:	4603      	mov	r3, r0
 8001f02:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f04:	2394      	movs	r3, #148	; 0x94
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff54 	bl	8001db4 <poll_i2c_sensor>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f10:	2392      	movs	r3, #146	; 0x92
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff4e 	bl	8001db4 <poll_i2c_sensor>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f1c:	2396      	movs	r3, #150	; 0x96
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff48 	bl	8001db4 <poll_i2c_sensor>
 8001f24:	4603      	mov	r3, r0
 8001f26:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	89fa      	ldrh	r2, [r7, #14]
 8001f2c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3302      	adds	r3, #2
 8001f32:	89ba      	ldrh	r2, [r7, #12]
 8001f34:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	897a      	ldrh	r2, [r7, #10]
 8001f3c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3306      	adds	r3, #6
 8001f42:	893a      	ldrh	r2, [r7, #8]
 8001f44:	801a      	strh	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f5a:	8a9b      	ldrh	r3, [r3, #20]
 8001f5c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f60:	8a1b      	ldrh	r3, [r3, #16]
 8001f62:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f66:	899b      	ldrh	r3, [r3, #12]
 8001f68:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f6c:	8a5b      	ldrh	r3, [r3, #18]
 8001f6e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f78:	88db      	ldrh	r3, [r3, #6]
 8001f7a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f7e:	89db      	ldrh	r3, [r3, #14]
 8001f80:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f84:	891b      	ldrh	r3, [r3, #8]
 8001f86:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <receive_hk_adc1+0xa0>)
 8001f90:	895b      	ldrh	r3, [r3, #10]
 8001f92:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8bfa      	ldrh	r2, [r7, #30]
 8001f98:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	8bba      	ldrh	r2, [r7, #28]
 8001fa0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	8b7a      	ldrh	r2, [r7, #26]
 8001fa8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3306      	adds	r3, #6
 8001fae:	8b3a      	ldrh	r2, [r7, #24]
 8001fb0:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	8afa      	ldrh	r2, [r7, #22]
 8001fb8:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	330a      	adds	r3, #10
 8001fbe:	8aba      	ldrh	r2, [r7, #20]
 8001fc0:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	330c      	adds	r3, #12
 8001fc6:	8a7a      	ldrh	r2, [r7, #18]
 8001fc8:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	330e      	adds	r3, #14
 8001fce:	8a3a      	ldrh	r2, [r7, #16]
 8001fd0:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	89fa      	ldrh	r2, [r7, #14]
 8001fd8:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3312      	adds	r3, #18
 8001fde:	89ba      	ldrh	r2, [r7, #12]
 8001fe0:	801a      	strh	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	24000d00 	.word	0x24000d00

08001ff4 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <receive_hk_adc3+0x4c>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <receive_hk_adc3+0x4c>)
 8002004:	885b      	ldrh	r3, [r3, #2]
 8002006:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <receive_hk_adc3+0x4c>)
 800200a:	889b      	ldrh	r3, [r3, #4]
 800200c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <receive_hk_adc3+0x4c>)
 8002010:	88db      	ldrh	r3, [r3, #6]
 8002012:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	89fa      	ldrh	r2, [r7, #14]
 8002018:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3302      	adds	r3, #2
 800201e:	89ba      	ldrh	r2, [r7, #12]
 8002020:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	897a      	ldrh	r2, [r7, #10]
 8002028:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3306      	adds	r3, #6
 800202e:	893a      	ldrh	r2, [r7, #8]
 8002030:	801a      	strh	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	24000d20 	.word	0x24000d20

08002044 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <get_current_step+0xc0>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002056:	4293      	cmp	r3, r2
 8002058:	d04a      	beq.n	80020f0 <get_current_step+0xac>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	da48      	bge.n	80020f4 <get_current_step+0xb0>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002068:	4293      	cmp	r3, r2
 800206a:	d03f      	beq.n	80020ec <get_current_step+0xa8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002072:	4293      	cmp	r3, r2
 8002074:	dc3e      	bgt.n	80020f4 <get_current_step+0xb0>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f640 421f 	movw	r2, #3103	; 0xc1f
 800207c:	4293      	cmp	r3, r2
 800207e:	d033      	beq.n	80020e8 <get_current_step+0xa4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002086:	da35      	bge.n	80020f4 <get_current_step+0xb0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800208e:	4293      	cmp	r3, r2
 8002090:	d028      	beq.n	80020e4 <get_current_step+0xa0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002098:	4293      	cmp	r3, r2
 800209a:	dc2b      	bgt.n	80020f4 <get_current_step+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f240 7245 	movw	r2, #1861	; 0x745
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01c      	beq.n	80020e0 <get_current_step+0x9c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f240 7245 	movw	r2, #1861	; 0x745
 80020ac:	4293      	cmp	r3, r2
 80020ae:	dc21      	bgt.n	80020f4 <get_current_step+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d010      	beq.n	80020dc <get_current_step+0x98>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80020c0:	4293      	cmp	r3, r2
 80020c2:	dc17      	bgt.n	80020f4 <get_current_step+0xb0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <get_current_step+0x90>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80020d0:	d002      	beq.n	80020d8 <get_current_step+0x94>
 80020d2:	e00f      	b.n	80020f4 <get_current_step+0xb0>
	case 0:
		return 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e00e      	b.n	80020f6 <get_current_step+0xb2>
	case 620:
		return 1;
 80020d8:	2301      	movs	r3, #1
 80020da:	e00c      	b.n	80020f6 <get_current_step+0xb2>
	case 1241:
		return 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	e00a      	b.n	80020f6 <get_current_step+0xb2>
	case 1861:
		return 3;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e008      	b.n	80020f6 <get_current_step+0xb2>
	case 2482:
		return 4;
 80020e4:	2304      	movs	r3, #4
 80020e6:	e006      	b.n	80020f6 <get_current_step+0xb2>
	case 3103:
		return 5;
 80020e8:	2305      	movs	r3, #5
 80020ea:	e004      	b.n	80020f6 <get_current_step+0xb2>
	case 3723:
		return 6;
 80020ec:	2306      	movs	r3, #6
 80020ee:	e002      	b.n	80020f6 <get_current_step+0xb2>
	case 4095:
		return 7;
 80020f0:	2307      	movs	r3, #7
 80020f2:	e000      	b.n	80020f6 <get_current_step+0xb2>
	default:
		return -1;
 80020f4:	23ff      	movs	r3, #255	; 0xff
	}
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007400 	.word	0x40007400

08002108 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 800210c:	f000 f8f4 	bl	80022f8 <send_ACK>

	vTaskSuspendAll();
 8002110:	f013 fa24 	bl	801555c <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002114:	2101      	movs	r1, #1
 8002116:	2001      	movs	r0, #1
 8002118:	f008 f8fe 	bl	800a318 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 800211c:	f7fe ffd8 	bl	80010d0 <SystemClock_Config>
	xTaskResumeAll();
 8002120:	f013 fa2a 	bl	8015578 <xTaskResumeAll>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <RTC_SetTime>:

HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <RTC_SetTime+0x1a>
 800213e:	2302      	movs	r3, #2
 8002140:	e051      	b.n	80021e6 <RTC_SetTime+0xbe>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	22ca      	movs	r2, #202	; 0xca
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2253      	movs	r2, #83	; 0x53
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f00c f8ea 	bl	800e33c <RTC_EnterInitMode>
 8002168:	4603      	mov	r3, r0
 800216a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d129      	bne.n	80021c6 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f00c f94f 	bl	800e420 <RTC_ByteToBcd2>
 8002182:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8002184:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	4618      	mov	r0, r3
 800218c:	f00c f948 	bl	800e420 <RTC_ByteToBcd2>
 8002190:	4603      	mov	r3, r0
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	789b      	ldrb	r3, [r3, #2]
 800219a:	4618      	mov	r0, r3
 800219c:	f00c f940 	bl	800e420 <RTC_ByteToBcd2>
 80021a0:	4603      	mov	r3, r0
 80021a2:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	78db      	ldrb	r3, [r3, #3]
 80021aa:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	6939      	ldr	r1, [r7, #16]
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <RTC_SetTime+0xc8>)
 80021b8:	400b      	ands	r3, r1
 80021ba:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f00c f8f1 	bl	800e3a4 <RTC_ExitInitMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	22ff      	movs	r2, #255	; 0xff
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]

}
 80021e6:	4618      	mov	r0, r3
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	007f7f7f 	.word	0x007f7f7f

080021f4 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	789b      	ldrb	r3, [r3, #2]
 8002208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	78db      	ldrb	r3, [r3, #3]
 8002210:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	795b      	ldrb	r3, [r3, #5]
 8002220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	799b      	ldrb	r3, [r3, #6]
 8002228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3307      	adds	r3, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	b21a      	sxth	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3308      	adds	r3, #8
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b21b      	sxth	r3, r3
 8002242:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8002244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 800224c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002250:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8002254:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 800225c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002260:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002262:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002266:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8002268:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800226c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800226e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002270:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <calibrateRTC+0xb4>)
 800227c:	f00b ff64 	bl	800e148 <HAL_RTC_SetDate>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8002286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <calibrateRTC+0x9e>
		Error_Handler();
 800228e:	f001 f97d 	bl	800358c <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <calibrateRTC+0xb4>)
 800229c:	f7ff ff44 	bl	8002128 <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 80022a0:	bf00      	nop
 80022a2:	3730      	adds	r7, #48	; 0x30
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	240003d4 	.word	0x240003d4

080022ac <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	send_ACK();
 80022b2:	f000 f821 	bl	80022f8 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80022b6:	480e      	ldr	r0, [pc, #56]	; (80022f0 <sync+0x44>)
 80022b8:	f00e fbb8 	bl	8010a2c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	2209      	movs	r2, #9
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <sync+0x48>)
 80022c2:	480b      	ldr	r0, [pc, #44]	; (80022f0 <sync+0x44>)
 80022c4:	f00e fa1e 	bl	8010704 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <sync+0x48>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2bff      	cmp	r3, #255	; 0xff
 80022d2:	d1f3      	bne.n	80022bc <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <sync+0x48>)
 80022d6:	f7ff ff8d 	bl	80021f4 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	4905      	ldr	r1, [pc, #20]	; (80022f4 <sync+0x48>)
 80022de:	4804      	ldr	r0, [pc, #16]	; (80022f0 <sync+0x44>)
 80022e0:	f00e fad8 	bl	8010894 <HAL_UART_Receive_IT>

	send_ACK();
 80022e4:	f000 f808 	bl	80022f8 <send_ACK>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	240005ec 	.word	0x240005ec
 80022f4:	24000cb0 	.word	0x24000cb0

080022f8 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <send_ACK+0x1c>)
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002302:	2364      	movs	r3, #100	; 0x64
 8002304:	2201      	movs	r2, #1
 8002306:	4903      	ldr	r1, [pc, #12]	; (8002314 <send_ACK+0x1c>)
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <send_ACK+0x20>)
 800230a:	f00e f96d 	bl	80105e8 <HAL_UART_Transmit>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	24000d28 	.word	0x24000d28
 8002318:	240005ec 	.word	0x240005ec

0800231c <in_range>:
 * @param min The minimum value of the range (inclusive).
 * @param max The maximum value of the range (inclusive).
 *
 * @return int Returns 1 if the value is within the range, otherwise 0.
 */
int in_range(uint16_t raw, int min, int max) {
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	db05      	blt.n	800233e <in_range+0x22>
 8002332:	89fb      	ldrh	r3, [r7, #14]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	dc01      	bgt.n	800233e <in_range+0x22>
		return 1;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <in_range+0x24>
	}
	return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <error_protocol>:
 * This function samples the housekeeping data, creates an error packet with
 * the provided error tag, and places it in the message queue. It also includes
 * synchronization bytes in the packet. The function currently includes a TODO
 * for adding shutdown procedures.
 */
void error_protocol(VOLTAGE_RAIL_NAME failed_rail) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
	vTaskSuspend(HK_taskHandle);
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <error_protocol+0x84>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f012 ff7e 	bl	801525c <vTaskSuspend>
	vTaskSuspend(ERPA_taskHandle);
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <error_protocol+0x88>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f012 ff79 	bl	801525c <vTaskSuspend>
	vTaskSuspend(PMT_taskHandle);
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <error_protocol+0x8c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f012 ff74 	bl	801525c <vTaskSuspend>

	sample_hk();
 8002374:	f000 fc10 	bl	8002b98 <sample_hk>
	packet_t error_packet;
	uint8_t *buffer = (uint8_t*) malloc(
 8002378:	2003      	movs	r0, #3
 800237a:	f014 fe41 	bl	8017000 <malloc>
 800237e:	4603      	mov	r3, r0
 8002380:	61fb      	str	r3, [r7, #28]
	ERROR_PACKET_DATA_SIZE * sizeof(uint8_t));

	buffer[0] = ERROR_SYNC;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	22dd      	movs	r2, #221	; 0xdd
 8002386:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERROR_SYNC;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3301      	adds	r3, #1
 800238c:	22dd      	movs	r2, #221	; 0xdd
 800238e:	701a      	strb	r2, [r3, #0]
	buffer[2] = failed_rail;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	3302      	adds	r3, #2
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	701a      	strb	r2, [r3, #0]

	error_packet = create_packet(buffer, ERROR_PACKET_DATA_SIZE);
 8002398:	463b      	mov	r3, r7
 800239a:	2203      	movs	r2, #3
 800239c:	69f9      	ldr	r1, [r7, #28]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f82e 	bl	8002400 <create_packet>
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	463a      	mov	r2, r7
 80023aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ae:	e883 0003 	stmia.w	r3, {r0, r1}
	osMessageQueuePut(mid_MsgQueue, &error_packet, 0U, 0U);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <error_protocol+0x90>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	f107 0114 	add.w	r1, r7, #20
 80023ba:	2300      	movs	r3, #0
 80023bc:	2200      	movs	r2, #0
 80023be:	f011 fb63 	bl	8013a88 <osMessageQueuePut>

	free(buffer);
 80023c2:	69f8      	ldr	r0, [r7, #28]
 80023c4:	f014 fe24 	bl	8017010 <free>
	//vTaskSuspendAll();
	//TODO: Shutdown
}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	24000700 	.word	0x24000700
 80023d4:	240006fc 	.word	0x240006fc
 80023d8:	240006f8 	.word	0x240006f8
 80023dc:	24000c90 	.word	0x24000c90

080023e0 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_UART_TxCpltCallback+0x1c>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	24000000 	.word	0x24000000

08002400 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	4618      	mov	r0, r3
 8002412:	f014 fdf5 	bl	8017000 <malloc>
 8002416:	4603      	mov	r3, r0
 8002418:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f014 fdfd 	bl	8017020 <memcpy>
	packet.size = size;
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	82bb      	strh	r3, [r7, #20]
	return packet;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	461a      	mov	r2, r3
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002436:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8002448:	4bc2      	ldr	r3, [pc, #776]	; (8002754 <system_setup+0x310>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 800244e:	4bc1      	ldr	r3, [pc, #772]	; (8002754 <system_setup+0x310>)
 8002450:	2200      	movs	r2, #0
 8002452:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8002454:	4bbf      	ldr	r3, [pc, #764]	; (8002754 <system_setup+0x310>)
 8002456:	2201      	movs	r2, #1
 8002458:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 800245a:	4bbe      	ldr	r3, [pc, #760]	; (8002754 <system_setup+0x310>)
 800245c:	2200      	movs	r2, #0
 800245e:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002460:	4bbc      	ldr	r3, [pc, #752]	; (8002754 <system_setup+0x310>)
 8002462:	f242 7210 	movw	r2, #10000	; 0x2710
 8002466:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8002468:	4bba      	ldr	r3, [pc, #744]	; (8002754 <system_setup+0x310>)
 800246a:	2200      	movs	r2, #0
 800246c:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 800246e:	4bb9      	ldr	r3, [pc, #740]	; (8002754 <system_setup+0x310>)
 8002470:	2201      	movs	r2, #1
 8002472:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8002474:	4bb7      	ldr	r3, [pc, #732]	; (8002754 <system_setup+0x310>)
 8002476:	2200      	movs	r2, #0
 8002478:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 800247a:	4bb6      	ldr	r3, [pc, #728]	; (8002754 <system_setup+0x310>)
 800247c:	2201      	movs	r2, #1
 800247e:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8002480:	4bb4      	ldr	r3, [pc, #720]	; (8002754 <system_setup+0x310>)
 8002482:	2200      	movs	r2, #0
 8002484:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002486:	4bb3      	ldr	r3, [pc, #716]	; (8002754 <system_setup+0x310>)
 8002488:	f242 7210 	movw	r2, #10000	; 0x2710
 800248c:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 800248e:	4bb1      	ldr	r3, [pc, #708]	; (8002754 <system_setup+0x310>)
 8002490:	2200      	movs	r2, #0
 8002492:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8002494:	4baf      	ldr	r3, [pc, #700]	; (8002754 <system_setup+0x310>)
 8002496:	2202      	movs	r2, #2
 8002498:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 800249a:	4bae      	ldr	r3, [pc, #696]	; (8002754 <system_setup+0x310>)
 800249c:	2200      	movs	r2, #0
 800249e:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80024a0:	4bac      	ldr	r3, [pc, #688]	; (8002754 <system_setup+0x310>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80024a6:	4bab      	ldr	r3, [pc, #684]	; (8002754 <system_setup+0x310>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80024ac:	4ba9      	ldr	r3, [pc, #676]	; (8002754 <system_setup+0x310>)
 80024ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80024b2:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80024b4:	4ba7      	ldr	r3, [pc, #668]	; (8002754 <system_setup+0x310>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80024ba:	4ba6      	ldr	r3, [pc, #664]	; (8002754 <system_setup+0x310>)
 80024bc:	2203      	movs	r2, #3
 80024be:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80024c0:	4ba4      	ldr	r3, [pc, #656]	; (8002754 <system_setup+0x310>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80024c6:	4ba3      	ldr	r3, [pc, #652]	; (8002754 <system_setup+0x310>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80024ce:	4ba1      	ldr	r3, [pc, #644]	; (8002754 <system_setup+0x310>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80024d4:	4b9f      	ldr	r3, [pc, #636]	; (8002754 <system_setup+0x310>)
 80024d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80024da:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80024dc:	4b9d      	ldr	r3, [pc, #628]	; (8002754 <system_setup+0x310>)
 80024de:	2200      	movs	r2, #0
 80024e0:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80024e2:	4b9c      	ldr	r3, [pc, #624]	; (8002754 <system_setup+0x310>)
 80024e4:	2204      	movs	r2, #4
 80024e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80024ea:	4b9a      	ldr	r3, [pc, #616]	; (8002754 <system_setup+0x310>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80024f2:	4b98      	ldr	r3, [pc, #608]	; (8002754 <system_setup+0x310>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 80024fa:	4b96      	ldr	r3, [pc, #600]	; (8002754 <system_setup+0x310>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002500:	4b94      	ldr	r3, [pc, #592]	; (8002754 <system_setup+0x310>)
 8002502:	f242 7210 	movw	r2, #10000	; 0x2710
 8002506:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8002508:	4b92      	ldr	r3, [pc, #584]	; (8002754 <system_setup+0x310>)
 800250a:	2200      	movs	r2, #0
 800250c:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800250e:	4b91      	ldr	r3, [pc, #580]	; (8002754 <system_setup+0x310>)
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8002516:	4b8f      	ldr	r3, [pc, #572]	; (8002754 <system_setup+0x310>)
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <system_setup+0x310>)
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8002526:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <system_setup+0x310>)
 8002528:	2200      	movs	r2, #0
 800252a:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800252c:	4b89      	ldr	r3, [pc, #548]	; (8002754 <system_setup+0x310>)
 800252e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002532:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8002534:	4b87      	ldr	r3, [pc, #540]	; (8002754 <system_setup+0x310>)
 8002536:	2200      	movs	r2, #0
 8002538:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 800253a:	4b86      	ldr	r3, [pc, #536]	; (8002754 <system_setup+0x310>)
 800253c:	2206      	movs	r2, #6
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8002542:	4b84      	ldr	r3, [pc, #528]	; (8002754 <system_setup+0x310>)
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <system_setup+0x310>)
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8002552:	4b80      	ldr	r3, [pc, #512]	; (8002754 <system_setup+0x310>)
 8002554:	2200      	movs	r2, #0
 8002556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800255a:	4b7e      	ldr	r3, [pc, #504]	; (8002754 <system_setup+0x310>)
 800255c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002560:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8002564:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <system_setup+0x310>)
 8002566:	2200      	movs	r2, #0
 8002568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800256c:	4b79      	ldr	r3, [pc, #484]	; (8002754 <system_setup+0x310>)
 800256e:	2207      	movs	r2, #7
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8002574:	4b77      	ldr	r3, [pc, #476]	; (8002754 <system_setup+0x310>)
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 800257c:	4b75      	ldr	r3, [pc, #468]	; (8002754 <system_setup+0x310>)
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <system_setup+0x310>)
 8002586:	2200      	movs	r2, #0
 8002588:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800258c:	4b71      	ldr	r3, [pc, #452]	; (8002754 <system_setup+0x310>)
 800258e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002592:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8002596:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <system_setup+0x310>)
 8002598:	2200      	movs	r2, #0
 800259a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 800259e:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <system_setup+0x310>)
 80025a0:	2208      	movs	r2, #8
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80025a6:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <system_setup+0x310>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80025ae:	4b69      	ldr	r3, [pc, #420]	; (8002754 <system_setup+0x310>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <system_setup+0x310>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <system_setup+0x310>)
 80025c0:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80025c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80025c8:	4b62      	ldr	r3, [pc, #392]	; (8002754 <system_setup+0x310>)
 80025ca:	f640 3283 	movw	r2, #2947	; 0xb83
 80025ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80025d2:	4b60      	ldr	r3, [pc, #384]	; (8002754 <system_setup+0x310>)
 80025d4:	2209      	movs	r2, #9
 80025d6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80025da:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <system_setup+0x310>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <system_setup+0x310>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 80025ea:	4b5a      	ldr	r3, [pc, #360]	; (8002754 <system_setup+0x310>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <system_setup+0x310>)
 80025f4:	f640 7245 	movw	r2, #3909	; 0xf45
 80025f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <system_setup+0x310>)
 80025fe:	2200      	movs	r2, #0
 8002600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8002604:	4b53      	ldr	r3, [pc, #332]	; (8002754 <system_setup+0x310>)
 8002606:	220a      	movs	r2, #10
 8002608:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800260c:	4b51      	ldr	r3, [pc, #324]	; (8002754 <system_setup+0x310>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8002614:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <system_setup+0x310>)
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800261c:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <system_setup+0x310>)
 800261e:	2200      	movs	r2, #0
 8002620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <system_setup+0x310>)
 8002626:	f640 7245 	movw	r2, #3909	; 0xf45
 800262a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <system_setup+0x310>)
 8002630:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002634:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <system_setup+0x310>)
 800263a:	220b      	movs	r2, #11
 800263c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8002640:	4b44      	ldr	r3, [pc, #272]	; (8002754 <system_setup+0x310>)
 8002642:	2200      	movs	r2, #0
 8002644:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8002648:	4b42      	ldr	r3, [pc, #264]	; (8002754 <system_setup+0x310>)
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <system_setup+0x310>)
 8002652:	2200      	movs	r2, #0
 8002654:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8002658:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <system_setup+0x310>)
 800265a:	f640 72fb 	movw	r2, #4091	; 0xffb
 800265e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <system_setup+0x310>)
 8002664:	f640 6276 	movw	r2, #3702	; 0xe76
 8002668:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <system_setup+0x310>)
 800266e:	220c      	movs	r2, #12
 8002670:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8002674:	4b37      	ldr	r3, [pc, #220]	; (8002754 <system_setup+0x310>)
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <system_setup+0x310>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8002684:	4b33      	ldr	r3, [pc, #204]	; (8002754 <system_setup+0x310>)
 8002686:	2200      	movs	r2, #0
 8002688:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800268c:	4b31      	ldr	r3, [pc, #196]	; (8002754 <system_setup+0x310>)
 800268e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002692:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <system_setup+0x310>)
 8002698:	2200      	movs	r2, #0
 800269a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 800269e:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <system_setup+0x310>)
 80026a0:	220d      	movs	r2, #13
 80026a2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <system_setup+0x310>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <system_setup+0x310>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <system_setup+0x310>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <system_setup+0x310>)
 80026c0:	f640 7238 	movw	r2, #3896	; 0xf38
 80026c4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <system_setup+0x310>)
 80026ca:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80026ce:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <system_setup+0x310>)
 80026d4:	220e      	movs	r2, #14
 80026d6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <system_setup+0x310>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <system_setup+0x310>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <system_setup+0x310>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <system_setup+0x310>)
 80026f4:	f640 7245 	movw	r2, #3909	; 0xf45
 80026f8:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <system_setup+0x310>)
 80026fe:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002702:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <system_setup+0x310>)
 8002708:	220f      	movs	r2, #15
 800270a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <system_setup+0x310>)
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <system_setup+0x310>)
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <system_setup+0x310>)
 8002720:	2200      	movs	r2, #0
 8002722:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <system_setup+0x310>)
 8002728:	f241 0264 	movw	r2, #4196	; 0x1064
 800272c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <system_setup+0x310>)
 8002732:	2200      	movs	r2, #0
 8002734:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <system_setup+0x310>)
 800273a:	2210      	movs	r2, #16
 800273c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <system_setup+0x310>)
 8002742:	2200      	movs	r2, #0
 8002744:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <system_setup+0x310>)
 800274a:	2200      	movs	r2, #0
 800274c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002750:	e002      	b.n	8002758 <system_setup+0x314>
 8002752:	bf00      	nop
 8002754:	24000bd8 	.word	0x24000bd8
	rail_monitor[RAIL_n800v].data = 0;
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <system_setup+0x3dc>)
 800275a:	2200      	movs	r2, #0
 800275c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8002760:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <system_setup+0x3dc>)
 8002762:	f640 5208 	movw	r2, #3336	; 0xd08
 8002766:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <system_setup+0x3dc>)
 800276c:	f640 32ca 	movw	r2, #3018	; 0xbca
 8002770:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <system_setup+0x3dc>)
 8002776:	2211      	movs	r2, #17
 8002778:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <system_setup+0x3dc>)
 800277e:	2200      	movs	r2, #0
 8002780:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <system_setup+0x3dc>)
 8002786:	2201      	movs	r2, #1
 8002788:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <system_setup+0x3dc>)
 800278e:	2200      	movs	r2, #0
 8002790:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <system_setup+0x3dc>)
 8002796:	f242 7210 	movw	r2, #10000	; 0x2710
 800279a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <system_setup+0x3dc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80027a6:	2100      	movs	r1, #0
 80027a8:	481e      	ldr	r0, [pc, #120]	; (8002824 <system_setup+0x3e0>)
 80027aa:	f00c fb93 	bl	800eed4 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80027ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80027b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027c0:	4819      	ldr	r0, [pc, #100]	; (8002828 <system_setup+0x3e4>)
 80027c2:	f003 f94b 	bl	8005a5c <HAL_ADCEx_Calibration_Start>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <system_setup+0x38c>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80027cc:	f000 fede 	bl	800358c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80027d0:	220b      	movs	r2, #11
 80027d2:	4916      	ldr	r1, [pc, #88]	; (800282c <system_setup+0x3e8>)
 80027d4:	4814      	ldr	r0, [pc, #80]	; (8002828 <system_setup+0x3e4>)
 80027d6:	f002 fa1f 	bl	8004c18 <HAL_ADC_Start_DMA>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <system_setup+0x3a0>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80027e0:	f000 fed4 	bl	800358c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80027e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ec:	4810      	ldr	r0, [pc, #64]	; (8002830 <system_setup+0x3ec>)
 80027ee:	f003 f935 	bl	8005a5c <HAL_ADCEx_Calibration_Start>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <system_setup+0x3b8>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80027f8:	f000 fec8 	bl	800358c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80027fc:	2204      	movs	r2, #4
 80027fe:	490d      	ldr	r1, [pc, #52]	; (8002834 <system_setup+0x3f0>)
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <system_setup+0x3ec>)
 8002802:	f002 fa09 	bl	8004c18 <HAL_ADC_Start_DMA>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <system_setup+0x3cc>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800280c:	f000 febe 	bl	800358c <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002810:	2201      	movs	r2, #1
 8002812:	4909      	ldr	r1, [pc, #36]	; (8002838 <system_setup+0x3f4>)
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <system_setup+0x3f8>)
 8002816:	f00e f83d 	bl	8010894 <HAL_UART_Receive_IT>
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	24000bd8 	.word	0x24000bd8
 8002824:	240005a0 	.word	0x240005a0
 8002828:	2400013c 	.word	0x2400013c
 800282c:	24000d00 	.word	0x24000d00
 8002830:	240001a0 	.word	0x240001a0
 8002834:	24000d20 	.word	0x24000d20
 8002838:	24000cb0 	.word	0x24000cb0
 800283c:	240005ec 	.word	0x240005ec

08002840 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <get_uptime+0x88>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <get_uptime+0x8c>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <get_uptime+0x88>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	429a      	cmp	r2, r3
 8002860:	d005      	beq.n	800286e <get_uptime+0x2e>
		ms = uptime_millis;
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <get_uptime+0x88>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <get_uptime+0x8c>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002874:	fb03 f202 	mul.w	r2, r3, r2
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <get_uptime+0x8c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	3301      	adds	r3, #1
 800287e:	4914      	ldr	r1, [pc, #80]	; (80028d0 <get_uptime+0x90>)
 8002880:	fba1 1303 	umull	r1, r3, r1, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	6939      	ldr	r1, [r7, #16]
 8002888:	fbb1 f3f3 	udiv	r3, r1, r3
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	0e1b      	lsrs	r3, r3, #24
 8002894:	b2da      	uxtb	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0c1a      	lsrs	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3301      	adds	r3, #1
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	0a1a      	lsrs	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3302      	adds	r3, #2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3303      	adds	r3, #3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	24000c8c 	.word	0x24000c8c
 80028cc:	e000e010 	.word	0xe000e010
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	2200      	movs	r2, #0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4821      	ldr	r0, [pc, #132]	; (800296c <getTimestamp+0x98>)
 80028e6:	f00b fbd3 	bl	800e090 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	2200      	movs	r2, #0
 80028f0:	4619      	mov	r1, r3
 80028f2:	481e      	ldr	r0, [pc, #120]	; (800296c <getTimestamp+0x98>)
 80028f4:	f00b fcb0 	bl	800e258 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2264      	movs	r2, #100	; 0x64
 80028fc:	fb03 f202 	mul.w	r2, r3, r2
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <getTimestamp+0x9c>)
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3301      	adds	r3, #1
 8002910:	7b7a      	ldrb	r2, [r7, #13]
 8002912:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3302      	adds	r3, #2
 8002918:	7bba      	ldrb	r2, [r7, #14]
 800291a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3303      	adds	r3, #3
 8002920:	7c3a      	ldrb	r2, [r7, #16]
 8002922:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	7c7a      	ldrb	r2, [r7, #17]
 800292a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3305      	adds	r3, #5
 8002930:	7cba      	ldrb	r2, [r7, #18]
 8002932:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	0e1a      	lsrs	r2, r3, #24
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3306      	adds	r3, #6
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	0c1a      	lsrs	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3307      	adds	r3, #7
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	0a1a      	lsrs	r2, r3, #8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3308      	adds	r3, #8
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3309      	adds	r3, #9
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	240003d4 	.word	0x240003d4
 8002970:	000f4240 	.word	0x000f4240

08002974 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800297a:	bf00      	nop
 800297c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002980:	4833      	ldr	r0, [pc, #204]	; (8002a50 <sample_pmt+0xdc>)
 8002982:	f006 fe8b 	bl	800969c <HAL_GPIO_ReadPin>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f7      	bne.n	800297c <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800298c:	200a      	movs	r0, #10
 800298e:	f014 fb37 	bl	8017000 <malloc>
 8002992:	4603      	mov	r3, r0
 8002994:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002996:	2002      	movs	r0, #2
 8002998:	f014 fb32 	bl	8017000 <malloc>
 800299c:	4603      	mov	r3, r0
 800299e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80029a0:	2004      	movs	r0, #4
 80029a2:	f014 fb2d 	bl	8017000 <malloc>
 80029a6:	4603      	mov	r3, r0
 80029a8:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff ff48 	bl	8002840 <get_uptime>

	receive_pmt_spi(pmt_spi);
 80029b0:	6938      	ldr	r0, [r7, #16]
 80029b2:	f7ff fa43 	bl	8001e3c <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	22bb      	movs	r2, #187	; 0xbb
 80029ba:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	22bb      	movs	r2, #187	; 0xbb
 80029c2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <sample_pmt+0xe0>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3302      	adds	r3, #2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <sample_pmt+0xe0>)
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3303      	adds	r3, #3
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3304      	adds	r3, #4
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3305      	adds	r3, #5
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	7852      	ldrb	r2, [r2, #1]
 80029f2:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3306      	adds	r3, #6
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3307      	adds	r3, #7
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	7852      	ldrb	r2, [r2, #1]
 8002a06:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	7892      	ldrb	r2, [r2, #2]
 8002a10:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3309      	adds	r3, #9
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	78d2      	ldrb	r2, [r2, #3]
 8002a1a:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	220a      	movs	r2, #10
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fcec 	bl	8002400 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <sample_pmt+0xe4>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	1d39      	adds	r1, r7, #4
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2200      	movs	r2, #0
 8002a32:	f011 f829 	bl	8013a88 <osMessageQueuePut>
	free(buffer);
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f014 faea 	bl	8017010 <free>
	free(pmt_spi);
 8002a3c:	6938      	ldr	r0, [r7, #16]
 8002a3e:	f014 fae7 	bl	8017010 <free>
	free(uptime);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f014 fae4 	bl	8017010 <free>
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	58020000 	.word	0x58020000
 8002a54:	24000c9c 	.word	0x24000c9c
 8002a58:	24000c90 	.word	0x24000c90

08002a5c <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002a62:	bf00      	nop
 8002a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a68:	4848      	ldr	r0, [pc, #288]	; (8002b8c <sample_erpa+0x130>)
 8002a6a:	f006 fe17 	bl	800969c <HAL_GPIO_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f7      	bne.n	8002a64 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002a74:	200e      	movs	r0, #14
 8002a76:	f014 fac3 	bl	8017000 <malloc>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f014 fabe 	bl	8017000 <malloc>
 8002a84:	4603      	mov	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f014 fab9 	bl	8017000 <malloc>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002a92:	2004      	movs	r0, #4
 8002a94:	f014 fab4 	bl	8017000 <malloc>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002a9c:	23ff      	movs	r3, #255	; 0xff
 8002a9e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002aa0:	6938      	ldr	r0, [r7, #16]
 8002aa2:	f7ff fecd 	bl	8002840 <get_uptime>
	sweep_step = get_current_step();
 8002aa6:	f7ff facd 	bl	8002044 <get_current_step>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 8002aae:	69b8      	ldr	r0, [r7, #24]
 8002ab0:	f7ff f9e8 	bl	8001e84 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7ff fa09 	bl	8001ecc <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	22aa      	movs	r2, #170	; 0xaa
 8002abe:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	22aa      	movs	r2, #170	; 0xaa
 8002ac6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002ac8:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <sample_erpa+0x134>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0c1a      	lsrs	r2, r3, #16
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <sample_erpa+0x134>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0a1a      	lsrs	r2, r3, #8
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	3303      	adds	r3, #3
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <sample_erpa+0x134>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3304      	adds	r3, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3305      	adds	r3, #5
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3306      	adds	r3, #6
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3307      	adds	r3, #7
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	3308      	adds	r3, #8
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3309      	adds	r3, #9
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	7852      	ldrb	r2, [r2, #1]
 8002b26:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	330a      	adds	r3, #10
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	330b      	adds	r3, #11
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	7852      	ldrb	r2, [r2, #1]
 8002b3a:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	7892      	ldrb	r2, [r2, #2]
 8002b44:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	330d      	adds	r3, #13
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	78d2      	ldrb	r2, [r2, #3]
 8002b4e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	220e      	movs	r2, #14
 8002b54:	69f9      	ldr	r1, [r7, #28]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fc52 	bl	8002400 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <sample_erpa+0x138>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	1d39      	adds	r1, r7, #4
 8002b62:	2300      	movs	r3, #0
 8002b64:	2200      	movs	r2, #0
 8002b66:	f010 ff8f 	bl	8013a88 <osMessageQueuePut>
	free(buffer);
 8002b6a:	69f8      	ldr	r0, [r7, #28]
 8002b6c:	f014 fa50 	bl	8017010 <free>
	free(erpa_spi);
 8002b70:	69b8      	ldr	r0, [r7, #24]
 8002b72:	f014 fa4d 	bl	8017010 <free>
	free(erpa_adc);
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f014 fa4a 	bl	8017010 <free>
	free(uptime);
 8002b7c:	6938      	ldr	r0, [r7, #16]
 8002b7e:	f014 fa47 	bl	8017010 <free>
}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	58020400 	.word	0x58020400
 8002b90:	24000ca0 	.word	0x24000ca0
 8002b94:	24000c90 	.word	0x24000c90

08002b98 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002b9e:	2036      	movs	r0, #54	; 0x36
 8002ba0:	f014 fa2e 	bl	8017000 <malloc>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002ba8:	200a      	movs	r0, #10
 8002baa:	f014 fa29 	bl	8017000 <malloc>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002bb2:	2004      	movs	r0, #4
 8002bb4:	f014 fa24 	bl	8017000 <malloc>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fe3f 	bl	8002840 <get_uptime>
	getTimestamp(timestamp);
 8002bc2:	6938      	ldr	r0, [r7, #16]
 8002bc4:	f7ff fe86 	bl	80028d4 <getTimestamp>

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	22cc      	movs	r2, #204	; 0xcc
 8002bcc:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	22cc      	movs	r2, #204	; 0xcc
 8002bd4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002bd6:	4ba7      	ldr	r3, [pc, #668]	; (8002e74 <sample_hk+0x2dc>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3302      	adds	r3, #2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002be6:	4ba3      	ldr	r3, [pc, #652]	; (8002e74 <sample_hk+0x2dc>)
 8002be8:	881a      	ldrh	r2, [r3, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3303      	adds	r3, #3
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002bf2:	4ba1      	ldr	r3, [pc, #644]	; (8002e78 <sample_hk+0x2e0>)
 8002bf4:	889b      	ldrh	r3, [r3, #4]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002c02:	4b9d      	ldr	r3, [pc, #628]	; (8002e78 <sample_hk+0x2e0>)
 8002c04:	889a      	ldrh	r2, [r3, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002c0e:	4b9a      	ldr	r3, [pc, #616]	; (8002e78 <sample_hk+0x2e0>)
 8002c10:	89db      	ldrh	r3, [r3, #14]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3306      	adds	r3, #6
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002c1e:	4b96      	ldr	r3, [pc, #600]	; (8002e78 <sample_hk+0x2e0>)
 8002c20:	89da      	ldrh	r2, [r3, #14]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3307      	adds	r3, #7
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002c2a:	4b93      	ldr	r3, [pc, #588]	; (8002e78 <sample_hk+0x2e0>)
 8002c2c:	8b1b      	ldrh	r3, [r3, #24]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3308      	adds	r3, #8
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002c3a:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <sample_hk+0x2e0>)
 8002c3c:	8b1a      	ldrh	r2, [r3, #24]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3309      	adds	r3, #9
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002c46:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <sample_hk+0x2e0>)
 8002c48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	330a      	adds	r3, #10
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002c56:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <sample_hk+0x2e0>)
 8002c58:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	330b      	adds	r3, #11
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002c62:	4b85      	ldr	r3, [pc, #532]	; (8002e78 <sample_hk+0x2e0>)
 8002c64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <sample_hk+0x2e0>)
 8002c74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	330d      	adds	r3, #13
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002c7e:	4b7e      	ldr	r3, [pc, #504]	; (8002e78 <sample_hk+0x2e0>)
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	330e      	adds	r3, #14
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <sample_hk+0x2e0>)
 8002c90:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	330f      	adds	r3, #15
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002c9a:	4b77      	ldr	r3, [pc, #476]	; (8002e78 <sample_hk+0x2e0>)
 8002c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3310      	adds	r3, #16
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002cac:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <sample_hk+0x2e0>)
 8002cae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3311      	adds	r3, #17
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <sample_hk+0x2e0>)
 8002cbc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3312      	adds	r3, #18
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <sample_hk+0x2e0>)
 8002cce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3313      	adds	r3, #19
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002cda:	4b67      	ldr	r3, [pc, #412]	; (8002e78 <sample_hk+0x2e0>)
 8002cdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <sample_hk+0x2e0>)
 8002cee:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3315      	adds	r3, #21
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <sample_hk+0x2e0>)
 8002cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3316      	adds	r3, #22
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <sample_hk+0x2e0>)
 8002d0e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3317      	adds	r3, #23
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <sample_hk+0x2e0>)
 8002d1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3318      	adds	r3, #24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002d2c:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <sample_hk+0x2e0>)
 8002d2e:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3319      	adds	r3, #25
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002d3a:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <sample_hk+0x2e0>)
 8002d3c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	331a      	adds	r3, #26
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002d4c:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <sample_hk+0x2e0>)
 8002d4e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	331b      	adds	r3, #27
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <sample_hk+0x2e0>)
 8002d5c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	331c      	adds	r3, #28
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8002d6c:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <sample_hk+0x2e0>)
 8002d6e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	331d      	adds	r3, #29
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <sample_hk+0x2e0>)
 8002d7c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	331e      	adds	r3, #30
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <sample_hk+0x2e0>)
 8002d8e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	331f      	adds	r3, #31
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <sample_hk+0x2e0>)
 8002d9c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3320      	adds	r3, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <sample_hk+0x2e0>)
 8002dae:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3321      	adds	r3, #33	; 0x21
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <sample_hk+0x2e0>)
 8002dbc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3322      	adds	r3, #34	; 0x22
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <sample_hk+0x2e0>)
 8002dce:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3323      	adds	r3, #35	; 0x23
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <sample_hk+0x2e0>)
 8002ddc:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3324      	adds	r3, #36	; 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <sample_hk+0x2e0>)
 8002dee:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3325      	adds	r3, #37	; 0x25
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <sample_hk+0x2e0>)
 8002dfc:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3326      	adds	r3, #38	; 0x26
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <sample_hk+0x2e0>)
 8002e0e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3327      	adds	r3, #39	; 0x27
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3328      	adds	r3, #40	; 0x28
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3329      	adds	r3, #41	; 0x29
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	7852      	ldrb	r2, [r2, #1]
 8002e2c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	332a      	adds	r3, #42	; 0x2a
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	7892      	ldrb	r2, [r2, #2]
 8002e36:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	332b      	adds	r3, #43	; 0x2b
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	78d2      	ldrb	r2, [r2, #3]
 8002e40:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	332c      	adds	r3, #44	; 0x2c
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	7912      	ldrb	r2, [r2, #4]
 8002e4a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	332d      	adds	r3, #45	; 0x2d
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	7952      	ldrb	r2, [r2, #5]
 8002e54:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	332e      	adds	r3, #46	; 0x2e
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	7992      	ldrb	r2, [r2, #6]
 8002e5e:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	332f      	adds	r3, #47	; 0x2f
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	79d2      	ldrb	r2, [r2, #7]
 8002e68:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3330      	adds	r3, #48	; 0x30
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	7a12      	ldrb	r2, [r2, #8]
 8002e72:	e003      	b.n	8002e7c <sample_hk+0x2e4>
 8002e74:	24000ca4 	.word	0x24000ca4
 8002e78:	24000bd8 	.word	0x24000bd8
 8002e7c:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3331      	adds	r3, #49	; 0x31
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	7a52      	ldrb	r2, [r2, #9]
 8002e86:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3332      	adds	r3, #50	; 0x32
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3333      	adds	r3, #51	; 0x33
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	7852      	ldrb	r2, [r2, #1]
 8002e9a:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3334      	adds	r3, #52	; 0x34
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	7892      	ldrb	r2, [r2, #2]
 8002ea4:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	3335      	adds	r3, #53	; 0x35
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	78d2      	ldrb	r2, [r2, #3]
 8002eae:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	2236      	movs	r2, #54	; 0x36
 8002eb4:	6979      	ldr	r1, [r7, #20]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff faa2 	bl	8002400 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <sample_hk+0x34c>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	1d39      	adds	r1, r7, #4
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f010 fddf 	bl	8013a88 <osMessageQueuePut>

	free(buffer);
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f014 f8a0 	bl	8017010 <free>
	free(timestamp);
 8002ed0:	6938      	ldr	r0, [r7, #16]
 8002ed2:	f014 f89d 	bl	8017010 <free>
	free(uptime);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f014 f89a 	bl	8017010 <free>
}
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	24000c90 	.word	0x24000c90

08002ee8 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <PMT_init+0x38>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2101      	movs	r1, #1
 8002efc:	f010 fceb 	bl	80138d6 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <PMT_init+0x3c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <PMT_init+0x32>
			sample_pmt();
 8002f0a:	f7ff fd33 	bl	8002974 <sample_pmt>
			pmt_seq++;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <PMT_init+0x40>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <PMT_init+0x40>)
 8002f18:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002f1a:	f010 fba9 	bl	8013670 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002f1e:	e7e7      	b.n	8002ef0 <PMT_init+0x8>
 8002f20:	24000cac 	.word	0x24000cac
 8002f24:	24000ca6 	.word	0x24000ca6
 8002f28:	24000c9c 	.word	0x24000c9c

08002f2c <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <ERPA_init+0x38>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2102      	movs	r1, #2
 8002f40:	f010 fcc9 	bl	80138d6 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <ERPA_init+0x3c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <ERPA_init+0x30>
			sample_erpa();
 8002f4e:	f7ff fd85 	bl	8002a5c <sample_erpa>
			erpa_seq++;
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <ERPA_init+0x40>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <ERPA_init+0x40>)
 8002f5a:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002f5c:	f010 fb88 	bl	8013670 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002f60:	e7e8      	b.n	8002f34 <ERPA_init+0x8>
 8002f62:	bf00      	nop
 8002f64:	24000cac 	.word	0x24000cac
 8002f68:	24000ca7 	.word	0x24000ca7
 8002f6c:	24000ca0 	.word	0x24000ca0

08002f70 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HK_init+0x38>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f80:	2200      	movs	r2, #0
 8002f82:	2104      	movs	r1, #4
 8002f84:	f010 fca7 	bl	80138d6 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HK_init+0x3c>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HK_init+0x32>
			sample_hk();
 8002f92:	f7ff fe01 	bl	8002b98 <sample_hk>
			hk_seq++;
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HK_init+0x40>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HK_init+0x40>)
 8002fa0:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002fa2:	f010 fb65 	bl	8013670 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002fa6:	e7e7      	b.n	8002f78 <HK_init+0x8>
 8002fa8:	24000cac 	.word	0x24000cac
 8002fac:	24000ca8 	.word	0x24000ca8
 8002fb0:	24000ca4 	.word	0x24000ca4

08002fb4 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <GPIO_on_init+0x78>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f010 fb75 	bl	80136b0 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e012      	b.n	8002ff2 <GPIO_on_init+0x3e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <GPIO_on_init+0x7c>)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <GPIO_on_init+0x7c>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	889b      	ldrh	r3, [r3, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f006 fb73 	bl	80096cc <HAL_GPIO_WritePin>
			osDelay(100);
 8002fe6:	2064      	movs	r0, #100	; 0x64
 8002fe8:	f010 fb83 	bl	80136f2 <osDelay>
		for (int i = 0; i < 7; i++) {
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	dde9      	ble.n	8002fcc <GPIO_on_init+0x18>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	e00c      	b.n	8003018 <GPIO_on_init+0x64>
			rail_monitor[i].is_enabled = 1;
 8002ffe:	490d      	ldr	r1, [pc, #52]	; (8003034 <GPIO_on_init+0x80>)
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	440b      	add	r3, r1
 800300c:	3302      	adds	r3, #2
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3301      	adds	r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b0d      	cmp	r3, #13
 800301c:	ddef      	ble.n	8002ffe <GPIO_on_init+0x4a>
		}

		osThreadSuspend(GPIO_on_taskHandle);
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <GPIO_on_init+0x78>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f010 fb44 	bl	80136b0 <osThreadSuspend>
		for (int i = 0; i < 7; i++) {
 8003028:	e7cd      	b.n	8002fc6 <GPIO_on_init+0x12>
 800302a:	bf00      	nop
 800302c:	24000704 	.word	0x24000704
 8003030:	08017e54 	.word	0x08017e54
 8003034:	24000bd8 	.word	0x24000bd8

08003038 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <GPIO_off_init+0x78>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f010 fb33 	bl	80136b0 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800304a:	230d      	movs	r3, #13
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e00c      	b.n	800306a <GPIO_off_init+0x32>
			rail_monitor[i].is_enabled = 0;
 8003050:	4918      	ldr	r1, [pc, #96]	; (80030b4 <GPIO_off_init+0x7c>)
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	3302      	adds	r3, #2
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b01      	subs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b07      	cmp	r3, #7
 800306e:	dcef      	bgt.n	8003050 <GPIO_off_init+0x18>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8003070:	2306      	movs	r3, #6
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	e012      	b.n	800309c <GPIO_off_init+0x64>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <GPIO_off_init+0x80>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <GPIO_off_init+0x80>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	889b      	ldrh	r3, [r3, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	4619      	mov	r1, r3
 800308c:	f006 fb1e 	bl	80096cc <HAL_GPIO_WritePin>
			osDelay(100);
 8003090:	2064      	movs	r0, #100	; 0x64
 8003092:	f010 fb2e 	bl	80136f2 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3b01      	subs	r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	dae9      	bge.n	8003076 <GPIO_off_init+0x3e>
		}




		osThreadSuspend(GPIO_off_taskHandle);
 80030a2:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <GPIO_off_init+0x78>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f010 fb02 	bl	80136b0 <osThreadSuspend>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80030ac:	e7cd      	b.n	800304a <GPIO_off_init+0x12>
 80030ae:	bf00      	nop
 80030b0:	24000964 	.word	0x24000964
 80030b4:	24000bd8 	.word	0x24000bd8
 80030b8:	08017e54 	.word	0x08017e54

080030bc <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <UART_TX_init+0xb0>)
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d4:	2200      	movs	r2, #0
 80030d6:	4926      	ldr	r1, [pc, #152]	; (8003170 <UART_TX_init+0xb4>)
 80030d8:	f010 fd36 	bl	8013b48 <osMessageQueueGet>
 80030dc:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d121      	bne.n	8003128 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <UART_TX_init+0xb4>)
 80030e6:	889b      	ldrh	r3, [r3, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d219      	bcs.n	8003128 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <UART_TX_init+0xb8>)
 80030f8:	4413      	add	r3, r2
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <UART_TX_init+0xb4>)
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <UART_TX_init+0xb4>)
 8003100:	8892      	ldrh	r2, [r2, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	f013 ff8c 	bl	8017020 <memcpy>
					free(msg.array);
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <UART_TX_init+0xb4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f013 ff7f 	bl	8017010 <free>
					total_size += msg.size;
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <UART_TX_init+0xb4>)
 8003114:	889b      	ldrh	r3, [r3, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f240 32b1 	movw	r2, #945	; 0x3b1
 8003124:	4293      	cmp	r3, r2
 8003126:	d808      	bhi.n	800313a <UART_TX_init+0x7e>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <UART_TX_init+0xb0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f010 fd69 	bl	8013c04 <osMessageQueueGetCount>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1c9      	bne.n	80030cc <UART_TX_init+0x10>
 8003138:	e000      	b.n	800313c <UART_TX_init+0x80>
						break;
 800313a:	bf00      	nop

		if (total_size > 0) {
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <UART_TX_init+0xa8>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	490a      	ldr	r1, [pc, #40]	; (8003174 <UART_TX_init+0xb8>)
 800314a:	480b      	ldr	r0, [pc, #44]	; (8003178 <UART_TX_init+0xbc>)
 800314c:	f00d fbee 	bl	801092c <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8003150:	e001      	b.n	8003156 <UART_TX_init+0x9a>
				osThreadYield();
 8003152:	f010 fa8d 	bl	8013670 <osThreadYield>
			while (tx_flag == 0) {
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <UART_TX_init+0xc0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f9      	beq.n	8003152 <UART_TX_init+0x96>
			}

			// Reset the flag
			tx_flag = 0;
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <UART_TX_init+0xc0>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8003164:	f010 fa84 	bl	8013670 <osThreadYield>
		total_size = 0;
 8003168:	e7ae      	b.n	80030c8 <UART_TX_init+0xc>
 800316a:	bf00      	nop
 800316c:	24000c90 	.word	0x24000c90
 8003170:	24000c94 	.word	0x24000c94
 8003174:	24000d2c 	.word	0x24000d2c
 8003178:	240005ec 	.word	0x240005ec
 800317c:	24000000 	.word	0x24000000

08003180 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8003188:	4b76      	ldr	r3, [pc, #472]	; (8003364 <Voltage_Monitor_init+0x1e4>)
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003190:	2200      	movs	r2, #0
 8003192:	2108      	movs	r1, #8
 8003194:	f010 fb9f 	bl	80138d6 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8003198:	2014      	movs	r0, #20
 800319a:	f013 ff31 	bl	8017000 <malloc>
 800319e:	4603      	mov	r3, r0
 80031a0:	613b      	str	r3, [r7, #16]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 80031a2:	2008      	movs	r0, #8
 80031a4:	f013 ff2c 	bl	8017000 <malloc>
 80031a8:	4603      	mov	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]
		int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80031ac:	2008      	movs	r0, #8
 80031ae:	f013 ff27 	bl	8017000 <malloc>
 80031b2:	4603      	mov	r3, r0
 80031b4:	60bb      	str	r3, [r7, #8]

		receive_hk_i2c(hk_i2c);
 80031b6:	68b8      	ldr	r0, [r7, #8]
 80031b8:	f7fe fe9a 	bl	8001ef0 <receive_hk_i2c>
		receive_hk_adc1(hk_adc1);
 80031bc:	6938      	ldr	r0, [r7, #16]
 80031be:	f7fe fec7 	bl	8001f50 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7fe ff16 	bl	8001ff4 <receive_hk_adc3>

		rail_monitor[RAIL_vsense].data = hk_adc3[1];
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	885a      	ldrh	r2, [r3, #2]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80031ce:	809a      	strh	r2, [r3, #4]
		rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	4b64      	ldr	r3, [pc, #400]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80031d6:	81da      	strh	r2, [r3, #14]
		rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80031e2:	831a      	strh	r2, [r3, #24]
		rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3302      	adds	r3, #2
 80031e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80031f0:	845a      	strh	r2, [r3, #34]	; 0x22
		rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3304      	adds	r3, #4
 80031f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80031fe:	859a      	strh	r2, [r3, #44]	; 0x2c
		rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3306      	adds	r3, #6
 8003204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003208:	b29a      	uxth	r2, r3
 800320a:	4b57      	ldr	r3, [pc, #348]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800320c:	86da      	strh	r2, [r3, #54]	; 0x36
		rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	4b55      	ldr	r3, [pc, #340]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	885a      	ldrh	r2, [r3, #2]
 800321c:	4b52      	ldr	r3, [pc, #328]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800321e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	889a      	ldrh	r2, [r3, #4]
 8003226:	4b50      	ldr	r3, [pc, #320]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003228:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		rail_monitor[RAIL_3v3].data = hk_adc3[3];
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88da      	ldrh	r2, [r3, #6]
 8003230:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		rail_monitor[RAIL_5v].data = hk_adc1[6];
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	899a      	ldrh	r2, [r3, #12]
 800323a:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800323c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	88da      	ldrh	r2, [r3, #6]
 8003244:	4b48      	ldr	r3, [pc, #288]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003246:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		rail_monitor[RAIL_n5v].data = hk_adc3[2];
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	889a      	ldrh	r2, [r3, #4]
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003250:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		rail_monitor[RAIL_15v].data = hk_adc1[7];
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	89da      	ldrh	r2, [r3, #14]
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800325a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		rail_monitor[RAIL_5vref].data = hk_adc1[8];
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	8a1a      	ldrh	r2, [r3, #16]
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003264:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		rail_monitor[RAIL_n200v].data = hk_adc1[4];
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	891a      	ldrh	r2, [r3, #8]
 800326c:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800326e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		rail_monitor[RAIL_n800v].data = hk_adc1[5];
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	895a      	ldrh	r2, [r3, #10]
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003278:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	8a5a      	ldrh	r2, [r3, #18]
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003282:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e05b      	b.n	8003344 <Voltage_Monitor_init+0x1c4>
			if (rail_monitor[i].is_enabled){
 800328c:	4936      	ldr	r1, [pc, #216]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	3302      	adds	r3, #2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04d      	beq.n	800333e <Voltage_Monitor_init+0x1be>
				// If current rail is not in range...
				if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 80032a2:	4931      	ldr	r1, [pc, #196]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	3304      	adds	r3, #4
 80032b2:	8818      	ldrh	r0, [r3, #0]
 80032b4:	492c      	ldr	r1, [pc, #176]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	440b      	add	r3, r1
 80032c2:	3308      	adds	r3, #8
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	461c      	mov	r4, r3
 80032c8:	4927      	ldr	r1, [pc, #156]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	440b      	add	r3, r1
 80032d6:	3306      	adds	r3, #6
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	4621      	mov	r1, r4
 80032de:	f7ff f81d 	bl	800231c <in_range>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12a      	bne.n	800333e <Voltage_Monitor_init+0x1be>
					// Increase that rails error count
					rail_monitor[i].error_count++;
 80032e8:	491f      	ldr	r1, [pc, #124]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	440b      	add	r3, r1
 80032f6:	3301      	adds	r3, #1
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2d8      	uxtb	r0, r3
 80032fe:	491a      	ldr	r1, [pc, #104]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	440b      	add	r3, r1
 800330c:	3301      	adds	r3, #1
 800330e:	4602      	mov	r2, r0
 8003310:	701a      	strb	r2, [r3, #0]
					// If that rails' error count is at 3, proceed with error protocol for that rail
					if (rail_monitor[i].error_count == 3) {
 8003312:	4915      	ldr	r1, [pc, #84]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	440b      	add	r3, r1
 8003320:	3301      	adds	r3, #1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d10a      	bne.n	800333e <Voltage_Monitor_init+0x1be>
						error_protocol(rail_monitor[i].name);
 8003328:	490f      	ldr	r1, [pc, #60]	; (8003368 <Voltage_Monitor_init+0x1e8>)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	440b      	add	r3, r1
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f807 	bl	800234c <error_protocol>
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b11      	cmp	r3, #17
 8003348:	dda0      	ble.n	800328c <Voltage_Monitor_init+0x10c>

#ifdef FLIGHT_MODE

#endif

		free(hk_adc1);
 800334a:	6938      	ldr	r0, [r7, #16]
 800334c:	f013 fe60 	bl	8017010 <free>
		free(hk_adc3);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f013 fe5d 	bl	8017010 <free>
		free(hk_i2c);
 8003356:	68b8      	ldr	r0, [r7, #8]
 8003358:	f013 fe5a 	bl	8017010 <free>

		osThreadYield();
 800335c:	f010 f988 	bl	8013670 <osThreadYield>
	for (;;) {
 8003360:	e712      	b.n	8003188 <Voltage_Monitor_init+0x8>
 8003362:	bf00      	nop
 8003364:	24000cac 	.word	0x24000cac
 8003368:	24000bd8 	.word	0x24000bd8

0800336c <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <FLAG_init+0x38>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f010 fa8b 	bl	8013894 <osEventFlagsGet>
 800337e:	4603      	mov	r3, r0
 8003380:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0316 	and.w	r3, r3, #22
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <FLAG_init+0x38>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2116      	movs	r1, #22
 8003392:	4618      	mov	r0, r3
 8003394:	f010 fa4c 	bl	8013830 <osEventFlagsClear>
			enter_stop();
 8003398:	f7fe feb6 	bl	8002108 <enter_stop>
		}
		osDelay(1);
 800339c:	2001      	movs	r0, #1
 800339e:	f010 f9a8 	bl	80136f2 <osDelay>
	for (;;) {
 80033a2:	e7e7      	b.n	8003374 <FLAG_init+0x8>
 80033a4:	24000cac 	.word	0x24000cac

080033a8 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
	osThreadSuspend(Science_taskHandle);
 80033b0:	4b32      	ldr	r3, [pc, #200]	; (800347c <Science_init+0xd4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f010 f97b 	bl	80136b0 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e012      	b.n	80033e6 <Science_init+0x3e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80033c0:	4a2f      	ldr	r2, [pc, #188]	; (8003480 <Science_init+0xd8>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <Science_init+0xd8>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	889b      	ldrh	r3, [r3, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4619      	mov	r1, r3
 80033d6:	f006 f979 	bl	80096cc <HAL_GPIO_WritePin>
			osDelay(200);
 80033da:	20c8      	movs	r0, #200	; 0xc8
 80033dc:	f010 f989 	bl	80136f2 <osDelay>
		for (int i = 0; i < 9; i++) {
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	dde9      	ble.n	80033c0 <Science_init+0x18>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80033ec:	2308      	movs	r3, #8
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	e00c      	b.n	800340c <Science_init+0x64>
			rail_monitor[i].is_enabled = 1;
 80033f2:	4924      	ldr	r1, [pc, #144]	; (8003484 <Science_init+0xdc>)
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	440b      	add	r3, r1
 8003400:	3302      	adds	r3, #2
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b10      	cmp	r3, #16
 8003410:	ddef      	ble.n	80033f2 <Science_init+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003412:	b672      	cpsid	i
}
 8003414:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8003416:	2300      	movs	r3, #0
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2320      	movs	r3, #32
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <Science_init+0xe0>)
 800341e:	2100      	movs	r1, #0
 8003420:	481a      	ldr	r0, [pc, #104]	; (800348c <Science_init+0xe4>)
 8003422:	f002 fdb7 	bl	8005f94 <HAL_DAC_Start_DMA>
		HK_ON = 1;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <Science_init+0xe8>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 800342c:	210c      	movs	r1, #12
 800342e:	4819      	ldr	r0, [pc, #100]	; (8003494 <Science_init+0xec>)
 8003430:	f00b fd50 	bl	800eed4 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8003434:	4b18      	ldr	r3, [pc, #96]	; (8003498 <Science_init+0xf0>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 800343a:	2100      	movs	r1, #0
 800343c:	4817      	ldr	r0, [pc, #92]	; (800349c <Science_init+0xf4>)
 800343e:	f00b fd49 	bl	800eed4 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <Science_init+0xf8>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]

		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <Science_init+0xfc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2104      	movs	r1, #4
 800344e:	4618      	mov	r0, r3
 8003450:	f010 f9aa 	bl	80137a8 <osEventFlagsSet>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <Science_init+0xfc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f010 f9a4 	bl	80137a8 <osEventFlagsSet>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <Science_init+0xfc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f010 f99e 	bl	80137a8 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 800346c:	b662      	cpsie	i
}
 800346e:	bf00      	nop

		__enable_irq();

		osThreadSuspend(Science_taskHandle);
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <Science_init+0xd4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f010 f91b 	bl	80136b0 <osThreadSuspend>
		for (int i = 0; i < 9; i++) {
 800347a:	e79e      	b.n	80033ba <Science_init+0x12>
 800347c:	24000bd0 	.word	0x24000bd0
 8003480:	08017e54 	.word	0x08017e54
 8003484:	24000bd8 	.word	0x24000bd8
 8003488:	2400000c 	.word	0x2400000c
 800348c:	240002f4 	.word	0x240002f4
 8003490:	24000ca8 	.word	0x24000ca8
 8003494:	24000554 	.word	0x24000554
 8003498:	24000ca7 	.word	0x24000ca7
 800349c:	24000508 	.word	0x24000508
 80034a0:	24000ca6 	.word	0x24000ca6
 80034a4:	24000cac 	.word	0x24000cac

080034a8 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
	osThreadSuspend(Idle_taskHandle);
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <Idle_init+0xa0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f010 f8fb 	bl	80136b0 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80034ba:	2100      	movs	r1, #0
 80034bc:	4823      	ldr	r0, [pc, #140]	; (800354c <Idle_init+0xa4>)
 80034be:	f00b fe63 	bl	800f188 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <Idle_init+0xa8>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80034c8:	210c      	movs	r1, #12
 80034ca:	4822      	ldr	r0, [pc, #136]	; (8003554 <Idle_init+0xac>)
 80034cc:	f00b fe5c 	bl	800f188 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <Idle_init+0xb0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
		HK_ON = 0;
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <Idle_init+0xb4>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80034dc:	2064      	movs	r0, #100	; 0x64
 80034de:	f010 f908 	bl	80136f2 <osDelay>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80034e2:	2310      	movs	r3, #16
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00c      	b.n	8003502 <Idle_init+0x5a>
			rail_monitor[i].is_enabled = 0;
 80034e8:	491d      	ldr	r1, [pc, #116]	; (8003560 <Idle_init+0xb8>)
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	440b      	add	r3, r1
 80034f6:	3302      	adds	r3, #2
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b07      	cmp	r3, #7
 8003506:	dcef      	bgt.n	80034e8 <Idle_init+0x40>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8003508:	2308      	movs	r3, #8
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	e012      	b.n	8003534 <Idle_init+0x8c>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <Idle_init+0xbc>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003516:	4a13      	ldr	r2, [pc, #76]	; (8003564 <Idle_init+0xbc>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	889b      	ldrh	r3, [r3, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	4619      	mov	r1, r3
 8003524:	f006 f8d2 	bl	80096cc <HAL_GPIO_WritePin>
			osDelay(200);
 8003528:	20c8      	movs	r0, #200	; 0xc8
 800352a:	f010 f8e2 	bl	80136f2 <osDelay>
		for (int i = 8; i >= 0; i--) {
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3b01      	subs	r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dae9      	bge.n	800350e <Idle_init+0x66>
		}

		osThreadSuspend(Idle_taskHandle);
 800353a:	4b03      	ldr	r3, [pc, #12]	; (8003548 <Idle_init+0xa0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f010 f8b6 	bl	80136b0 <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003544:	e7b9      	b.n	80034ba <Idle_init+0x12>
 8003546:	bf00      	nop
 8003548:	24000bd4 	.word	0x24000bd4
 800354c:	24000508 	.word	0x24000508
 8003550:	24000ca6 	.word	0x24000ca6
 8003554:	24000554 	.word	0x24000554
 8003558:	24000ca7 	.word	0x24000ca7
 800355c:	24000ca8 	.word	0x24000ca8
 8003560:	24000bd8 	.word	0x24000bd8
 8003564:	08017e54 	.word	0x08017e54

08003568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800357a:	f000 ff5b 	bl	8004434 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40001000 	.word	0x40001000

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003590:	b672      	cpsid	i
}
 8003592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003594:	e7fe      	b.n	8003594 <Error_Handler+0x8>
	...

08003598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_MspInit+0x38>)
 80035a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_MspInit+0x38>)
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_MspInit+0x38>)
 80035b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035bc:	2200      	movs	r2, #0
 80035be:	210f      	movs	r1, #15
 80035c0:	f06f 0001 	mvn.w	r0, #1
 80035c4:	f002 fc44 	bl	8005e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58024400 	.word	0x58024400

080035d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7b      	ldr	r2, [pc, #492]	; (80037e0 <HAL_ADC_MspInit+0x20c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 8091 	bne.w	800371a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035f8:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 80035fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035fe:	4a79      	ldr	r2, [pc, #484]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003608:	4b76      	ldr	r3, [pc, #472]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 800360a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003616:	4b73      	ldr	r3, [pc, #460]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361c:	4a71      	ldr	r2, [pc, #452]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003626:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	4b6b      	ldr	r3, [pc, #428]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363a:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003644:	4b67      	ldr	r3, [pc, #412]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003652:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003658:	4a62      	ldr	r2, [pc, #392]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003662:	4b60      	ldr	r3, [pc, #384]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003670:	2333      	movs	r3, #51	; 0x33
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003674:	2303      	movs	r3, #3
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800367c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003680:	4619      	mov	r1, r3
 8003682:	4859      	ldr	r0, [pc, #356]	; (80037e8 <HAL_ADC_MspInit+0x214>)
 8003684:	f005 fe5a 	bl	800933c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003688:	23ce      	movs	r3, #206	; 0xce
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368c:	2303      	movs	r3, #3
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003698:	4619      	mov	r1, r3
 800369a:	4854      	ldr	r0, [pc, #336]	; (80037ec <HAL_ADC_MspInit+0x218>)
 800369c:	f005 fe4e 	bl	800933c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036a0:	2303      	movs	r3, #3
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a4:	2303      	movs	r3, #3
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b0:	4619      	mov	r1, r3
 80036b2:	484f      	ldr	r0, [pc, #316]	; (80037f0 <HAL_ADC_MspInit+0x21c>)
 80036b4:	f005 fe42 	bl	800933c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036ba:	4a4f      	ldr	r2, [pc, #316]	; (80037f8 <HAL_ADC_MspInit+0x224>)
 80036bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80036be:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036c0:	2209      	movs	r2, #9
 80036c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ca:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036d0:	4b48      	ldr	r3, [pc, #288]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036e0:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036fc:	483d      	ldr	r0, [pc, #244]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 80036fe:	f002 ffd5 	bl	80066ac <HAL_DMA_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003708:	f7ff ff40 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a39      	ldr	r2, [pc, #228]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 8003710:	64da      	str	r2, [r3, #76]	; 0x4c
 8003712:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <HAL_ADC_MspInit+0x220>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003718:	e05e      	b.n	80037d8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a37      	ldr	r2, [pc, #220]	; (80037fc <HAL_ADC_MspInit+0x228>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d159      	bne.n	80037d8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372a:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 800372c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003748:	4a26      	ldr	r2, [pc, #152]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_ADC_MspInit+0x210>)
 8003754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003760:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003764:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003768:	f000 fe90 	bl	800448c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800376c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003770:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003774:	f000 fe8a 	bl	800448c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 800377a:	4a22      	ldr	r2, [pc, #136]	; (8003804 <HAL_ADC_MspInit+0x230>)
 800377c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 8003780:	2273      	movs	r2, #115	; 0x73
 8003782:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 8003792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003796:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 800379a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800379e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037a6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80037bc:	4810      	ldr	r0, [pc, #64]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037be:	f002 ff75 	bl	80066ac <HAL_DMA_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80037c8:	f7ff fee0 	bl	800358c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037d2:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <HAL_ADC_MspInit+0x22c>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80037d8:	bf00      	nop
 80037da:	3738      	adds	r7, #56	; 0x38
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40022000 	.word	0x40022000
 80037e4:	58024400 	.word	0x58024400
 80037e8:	58020800 	.word	0x58020800
 80037ec:	58020000 	.word	0x58020000
 80037f0:	58020400 	.word	0x58020400
 80037f4:	24000204 	.word	0x24000204
 80037f8:	40020010 	.word	0x40020010
 80037fc:	58026000 	.word	0x58026000
 8003800:	2400027c 	.word	0x2400027c
 8003804:	40020028 	.word	0x40020028

08003808 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a34      	ldr	r2, [pc, #208]	; (80038f8 <HAL_DAC_MspInit+0xf0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d161      	bne.n	80038ee <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800382a:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_DAC_MspInit+0xf4>)
 800382c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003830:	4a32      	ldr	r2, [pc, #200]	; (80038fc <HAL_DAC_MspInit+0xf4>)
 8003832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800383a:	4b30      	ldr	r3, [pc, #192]	; (80038fc <HAL_DAC_MspInit+0xf4>)
 800383c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_DAC_MspInit+0xf4>)
 800384a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <HAL_DAC_MspInit+0xf4>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_DAC_MspInit+0xf4>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003866:	2310      	movs	r3, #16
 8003868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800386a:	2303      	movs	r3, #3
 800386c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	f107 0314 	add.w	r3, r7, #20
 8003876:	4619      	mov	r1, r3
 8003878:	4821      	ldr	r0, [pc, #132]	; (8003900 <HAL_DAC_MspInit+0xf8>)
 800387a:	f005 fd5f 	bl	800933c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <HAL_DAC_MspInit+0x100>)
 8003882:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 8003886:	2243      	movs	r2, #67	; 0x43
 8003888:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 8003898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800389e:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038be:	2200      	movs	r2, #0
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80038c2:	4810      	ldr	r0, [pc, #64]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038c4:	f002 fef2 	bl	80066ac <HAL_DMA_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80038ce:	f7ff fe5d 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <HAL_DAC_MspInit+0xfc>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2105      	movs	r1, #5
 80038e2:	2036      	movs	r0, #54	; 0x36
 80038e4:	f002 fab4 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038e8:	2036      	movs	r0, #54	; 0x36
 80038ea:	f002 facb 	bl	8005e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40007400 	.word	0x40007400
 80038fc:	58024400 	.word	0x58024400
 8003900:	58020000 	.word	0x58020000
 8003904:	24000308 	.word	0x24000308
 8003908:	40020088 	.word	0x40020088

0800390c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b0ba      	sub	sp, #232	; 0xe8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	22c0      	movs	r2, #192	; 0xc0
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f013 fb85 	bl	801703c <memset>
  if(hi2c->Instance==I2C1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d146      	bne.n	80039ca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800393c:	f04f 0208 	mov.w	r2, #8
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f007 fd7e 	bl	800b454 <HAL_RCCEx_PeriphCLKConfig>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800395e:	f7ff fe15 	bl	800358c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 8003964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003968:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 8003974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003988:	2312      	movs	r3, #18
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399a:	2304      	movs	r3, #4
 800399c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039a4:	4619      	mov	r1, r3
 80039a6:	480d      	ldr	r0, [pc, #52]	; (80039dc <HAL_I2C_MspInit+0xd0>)
 80039a8:	f005 fcc8 	bl	800933c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 80039ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 80039b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 80039be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039ca:	bf00      	nop
 80039cc:	37e8      	adds	r7, #232	; 0xe8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40005400 	.word	0x40005400
 80039d8:	58024400 	.word	0x58024400
 80039dc:	58020400 	.word	0x58020400

080039e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0b2      	sub	sp, #200	; 0xc8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	22c0      	movs	r2, #192	; 0xc0
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f013 fb23 	bl	801703c <memset>
  if(hrtc->Instance==RTC)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <HAL_RTC_MspInit+0x5c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d118      	bne.n	8003a32 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RTC_MspInit+0x60>)
 8003a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a12:	f107 0308 	add.w	r3, r7, #8
 8003a16:	4618      	mov	r0, r3
 8003a18:	f007 fd1c 	bl	800b454 <HAL_RCCEx_PeriphCLKConfig>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003a22:	f7ff fdb3 	bl	800358c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RTC_MspInit+0x64>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <HAL_RTC_MspInit+0x64>)
 8003a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a32:	bf00      	nop
 8003a34:	37c8      	adds	r7, #200	; 0xc8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	58004000 	.word	0x58004000
 8003a40:	00019300 	.word	0x00019300
 8003a44:	58024400 	.word	0x58024400

08003a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0bc      	sub	sp, #240	; 0xf0
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a60:	f107 0318 	add.w	r3, r7, #24
 8003a64:	22c0      	movs	r2, #192	; 0xc0
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f013 fae7 	bl	801703c <memset>
  if(hspi->Instance==SPI1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4c      	ldr	r2, [pc, #304]	; (8003ba4 <HAL_SPI_MspInit+0x15c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d145      	bne.n	8003b04 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a88:	f107 0318 	add.w	r3, r7, #24
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f007 fce1 	bl	800b454 <HAL_RCCEx_PeriphCLKConfig>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003a98:	f7ff fd78 	bl	800358c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa2:	4a41      	ldr	r2, [pc, #260]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003aac:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac0:	4a39      	ldr	r2, [pc, #228]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003ac2:	f043 0302 	orr.w	r3, r3, #2
 8003ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003ad8:	2318      	movs	r3, #24
 8003ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003af0:	2305      	movs	r3, #5
 8003af2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003afa:	4619      	mov	r1, r3
 8003afc:	482b      	ldr	r0, [pc, #172]	; (8003bac <HAL_SPI_MspInit+0x164>)
 8003afe:	f005 fc1d 	bl	800933c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b02:	e04a      	b.n	8003b9a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_SPI_MspInit+0x168>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d145      	bne.n	8003b9a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b1e:	f107 0318 	add.w	r3, r7, #24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f007 fc96 	bl	800b454 <HAL_RCCEx_PeriphCLKConfig>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8003b2e:	f7ff fd2d 	bl	800358c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b38:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_SPI_MspInit+0x160>)
 8003b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003b6e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b88:	2305      	movs	r3, #5
 8003b8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b92:	4619      	mov	r1, r3
 8003b94:	4805      	ldr	r0, [pc, #20]	; (8003bac <HAL_SPI_MspInit+0x164>)
 8003b96:	f005 fbd1 	bl	800933c <HAL_GPIO_Init>
}
 8003b9a:	bf00      	nop
 8003b9c:	37f0      	adds	r7, #240	; 0xf0
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40013000 	.word	0x40013000
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	58020400 	.word	0x58020400
 8003bb0:	40003800 	.word	0x40003800

08003bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a37      	ldr	r2, [pc, #220]	; (8003ca0 <HAL_TIM_Base_MspInit+0xec>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d12f      	bne.n	8003c26 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bcc:	4a35      	ldr	r2, [pc, #212]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003be4:	2200      	movs	r2, #0
 8003be6:	2105      	movs	r1, #5
 8003be8:	2018      	movs	r0, #24
 8003bea:	f002 f931 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003bee:	2018      	movs	r0, #24
 8003bf0:	f002 f948 	bl	8005e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2105      	movs	r1, #5
 8003bf8:	2019      	movs	r0, #25
 8003bfa:	f002 f929 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003bfe:	2019      	movs	r0, #25
 8003c00:	f002 f940 	bl	8005e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003c04:	2200      	movs	r2, #0
 8003c06:	2105      	movs	r1, #5
 8003c08:	201a      	movs	r0, #26
 8003c0a:	f002 f921 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003c0e:	201a      	movs	r0, #26
 8003c10:	f002 f938 	bl	8005e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003c14:	2200      	movs	r2, #0
 8003c16:	2105      	movs	r1, #5
 8003c18:	201b      	movs	r0, #27
 8003c1a:	f002 f919 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003c1e:	201b      	movs	r0, #27
 8003c20:	f002 f930 	bl	8005e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c24:	e038      	b.n	8003c98 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d117      	bne.n	8003c60 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c36:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c40:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2105      	movs	r1, #5
 8003c52:	201c      	movs	r0, #28
 8003c54:	f002 f8fc 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c58:	201c      	movs	r0, #28
 8003c5a:	f002 f913 	bl	8005e84 <HAL_NVIC_EnableIRQ>
}
 8003c5e:	e01b      	b.n	8003c98 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_TIM_Base_MspInit+0xf4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d116      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c70:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf0>)
 8003c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2105      	movs	r1, #5
 8003c8c:	201d      	movs	r0, #29
 8003c8e:	f002 f8df 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c92:	201d      	movs	r0, #29
 8003c94:	f002 f8f6 	bl	8005e84 <HAL_NVIC_EnableIRQ>
}
 8003c98:	bf00      	nop
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	40000400 	.word	0x40000400

08003cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <HAL_TIM_MspPostInit+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d120      	bne.n	8003d10 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd4:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	4619      	mov	r1, r3
 8003d08:	4818      	ldr	r0, [pc, #96]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003d0a:	f005 fb17 	bl	800933c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d0e:	e024      	b.n	8003d5a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d11f      	bne.n	8003d5a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d20:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4619      	mov	r1, r3
 8003d54:	4806      	ldr	r0, [pc, #24]	; (8003d70 <HAL_TIM_MspPostInit+0xc4>)
 8003d56:	f005 faf1 	bl	800933c <HAL_GPIO_Init>
}
 8003d5a:	bf00      	nop
 8003d5c:	3728      	adds	r7, #40	; 0x28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	58020000 	.word	0x58020000
 8003d70:	58020400 	.word	0x58020400

08003d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0ba      	sub	sp, #232	; 0xe8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d8c:	f107 0310 	add.w	r3, r7, #16
 8003d90:	22c0      	movs	r2, #192	; 0xc0
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f013 f951 	bl	801703c <memset>
  if(huart->Instance==USART1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a41      	ldr	r2, [pc, #260]	; (8003ea4 <HAL_UART_MspInit+0x130>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d17b      	bne.n	8003e9c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003da4:	f04f 0201 	mov.w	r2, #1
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003db0:	2318      	movs	r3, #24
 8003db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f007 fb4a 	bl	800b454 <HAL_RCCEx_PeriphCLKConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003dc6:	f7ff fbe1 	bl	800358c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dca:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_UART_MspInit+0x134>)
 8003dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <HAL_UART_MspInit+0x134>)
 8003dd2:	f043 0310 	orr.w	r3, r3, #16
 8003dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003dda:	4b33      	ldr	r3, [pc, #204]	; (8003ea8 <HAL_UART_MspInit+0x134>)
 8003ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de8:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <HAL_UART_MspInit+0x134>)
 8003dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dee:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <HAL_UART_MspInit+0x134>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_UART_MspInit+0x134>)
 8003dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e20:	2307      	movs	r3, #7
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	481f      	ldr	r0, [pc, #124]	; (8003eac <HAL_UART_MspInit+0x138>)
 8003e2e:	f005 fa85 	bl	800933c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_UART_MspInit+0x140>)
 8003e36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e3a:	222a      	movs	r2, #42	; 0x2a
 8003e3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e3e:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e40:	2240      	movs	r2, #64	; 0x40
 8003e42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e70:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e72:	f002 fc1b 	bl	80066ac <HAL_DMA_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003e7c:	f7ff fb86 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_UART_MspInit+0x13c>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2105      	movs	r1, #5
 8003e90:	2025      	movs	r0, #37	; 0x25
 8003e92:	f001 ffdd 	bl	8005e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e96:	2025      	movs	r0, #37	; 0x25
 8003e98:	f001 fff4 	bl	8005e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e9c:	bf00      	nop
 8003e9e:	37e8      	adds	r7, #232	; 0xe8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	58020000 	.word	0x58020000
 8003eb0:	24000680 	.word	0x24000680
 8003eb4:	40020040 	.word	0x40020040

08003eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b090      	sub	sp, #64	; 0x40
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d827      	bhi.n	8003f16 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	2036      	movs	r0, #54	; 0x36
 8003ecc:	f001 ffc0 	bl	8005e50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ed0:	2036      	movs	r0, #54	; 0x36
 8003ed2:	f001 ffd7 	bl	8005e84 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <HAL_InitTick+0xc4>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003edc:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_InitTick+0xc8>)
 8003ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_InitTick+0xc8>)
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003eec:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_InitTick+0xc8>)
 8003eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003efa:	f107 0210 	add.w	r2, r7, #16
 8003efe:	f107 0314 	add.w	r3, r7, #20
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f007 fa63 	bl	800b3d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_InitTick+0x6a>
 8003f14:	e001      	b.n	8003f1a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e02b      	b.n	8003f72 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f007 fa2d 	bl	800b378 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003f20:	e004      	b.n	8003f2c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f22:	f007 fa29 	bl	800b378 <HAL_RCC_GetPCLK1Freq>
 8003f26:	4603      	mov	r3, r0
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_InitTick+0xcc>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	0c9b      	lsrs	r3, r3, #18
 8003f36:	3b01      	subs	r3, #1
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f3c:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <HAL_InitTick+0xd4>)
 8003f3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003f5a:	480b      	ldr	r0, [pc, #44]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f5c:	f00a feeb 	bl	800ed36 <HAL_TIM_Base_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003f66:	4808      	ldr	r0, [pc, #32]	; (8003f88 <HAL_InitTick+0xd0>)
 8003f68:	f00a ff3c 	bl	800ede4 <HAL_TIM_Base_Start_IT>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	e000      	b.n	8003f72 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3740      	adds	r7, #64	; 0x40
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	24000094 	.word	0x24000094
 8003f80:	58024400 	.word	0x58024400
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	24001114 	.word	0x24001114
 8003f8c:	40001000 	.word	0x40001000

08003f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003f94:	e7fe      	b.n	8003f94 <NMI_Handler+0x4>

08003f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f9a:	e7fe      	b.n	8003f9a <HardFault_Handler+0x4>

08003f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fa0:	e7fe      	b.n	8003fa0 <MemManage_Handler+0x4>

08003fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <BusFault_Handler+0x4>

08003fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <UsageFault_Handler+0x4>

08003fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <DMA1_Stream0_IRQHandler+0x10>)
 8003fc2:	f003 fe9d 	bl	8007d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	24000204 	.word	0x24000204

08003fd0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <DMA1_Stream1_IRQHandler+0x10>)
 8003fd6:	f003 fe93 	bl	8007d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2400027c 	.word	0x2400027c

08003fe4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <DMA1_Stream2_IRQHandler+0x10>)
 8003fea:	f003 fe89 	bl	8007d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	24000680 	.word	0x24000680

08003ff8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <DMA1_Stream5_IRQHandler+0x10>)
 8003ffe:	f003 fe7f 	bl	8007d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	24000308 	.word	0x24000308

0800400c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <TIM1_BRK_IRQHandler+0x10>)
 8004012:	f00b f9fe 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24000508 	.word	0x24000508

08004020 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <TIM1_UP_IRQHandler+0x10>)
 8004026:	f00b f9f4 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	24000508 	.word	0x24000508

08004034 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <TIM1_TRG_COM_IRQHandler+0x10>)
 800403a:	f00b f9ea 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	24000508 	.word	0x24000508

08004048 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <TIM1_CC_IRQHandler+0x10>)
 800404e:	f00b f9e0 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	24000508 	.word	0x24000508

0800405c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <TIM2_IRQHandler+0x10>)
 8004062:	f00b f9d6 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	24000554 	.word	0x24000554

08004070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <TIM3_IRQHandler+0x10>)
 8004076:	f00b f9cc 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	240005a0 	.word	0x240005a0

08004084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <USART1_IRQHandler+0x10>)
 800408a:	f00c fd85 	bl	8010b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	240005ec 	.word	0x240005ec

08004098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <TIM6_DAC_IRQHandler+0x20>)
 800409e:	791b      	ldrb	r3, [r3, #4]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80040a6:	4804      	ldr	r0, [pc, #16]	; (80040b8 <TIM6_DAC_IRQHandler+0x20>)
 80040a8:	f002 f881 	bl	80061ae <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80040ac:	4803      	ldr	r0, [pc, #12]	; (80040bc <TIM6_DAC_IRQHandler+0x24>)
 80040ae:	f00b f9b0 	bl	800f412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	240002f4 	.word	0x240002f4
 80040bc:	24001114 	.word	0x24001114

080040c0 <ITM_SendChar>:
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <ITM_SendChar+0x48>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a0e      	ldr	r2, [pc, #56]	; (8004108 <ITM_SendChar+0x48>)
 80040d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <ITM_SendChar+0x4c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a0c      	ldr	r2, [pc, #48]	; (800410c <ITM_SendChar+0x4c>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	bf00      	nop
 80040e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f8      	beq.n	80040e4 <ITM_SendChar+0x24>
 80040f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	e000edfc 	.word	0xe000edfc
 800410c:	e0000e00 	.word	0xe0000e00

08004110 <_read>:
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e00a      	b.n	8004138 <_read+0x28>
 8004122:	f3af 8000 	nop.w
 8004126:	4601      	mov	r1, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	60ba      	str	r2, [r7, #8]
 800412e:	b2ca      	uxtb	r2, r1
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	dbf0      	blt.n	8004122 <_read+0x12>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_write>:
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	e009      	b.n	8004170 <_write+0x26>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	60ba      	str	r2, [r7, #8]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ffab 	bl	80040c0 <ITM_SendChar>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	dbf1      	blt.n	800415c <_write+0x12>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_close>:
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <_fstat>:
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	2300      	movs	r3, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <_isatty>:
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	2301      	movs	r3, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_lseek>:
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	2300      	movs	r3, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <_sbrk>:
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <_sbrk+0x5c>)
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <_sbrk+0x60>)
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <_sbrk+0x22>
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <_sbrk+0x64>)
 800420a:	4a12      	ldr	r2, [pc, #72]	; (8004254 <_sbrk+0x68>)
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <_sbrk+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d207      	bcs.n	800422c <_sbrk+0x40>
 800421c:	f012 fec6 	bl	8016fac <__errno>
 8004220:	4603      	mov	r3, r0
 8004222:	220c      	movs	r2, #12
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422a:	e009      	b.n	8004240 <_sbrk+0x54>
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <_sbrk+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <_sbrk+0x64>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	24080000 	.word	0x24080000
 800424c:	00000400 	.word	0x00000400
 8004250:	24001160 	.word	0x24001160
 8004254:	24005ac8 	.word	0x24005ac8

08004258 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800425c:	4b37      	ldr	r3, [pc, #220]	; (800433c <SystemInit+0xe4>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	4a36      	ldr	r2, [pc, #216]	; (800433c <SystemInit+0xe4>)
 8004264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <SystemInit+0xe8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	2b06      	cmp	r3, #6
 8004276:	d807      	bhi.n	8004288 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <SystemInit+0xe8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 030f 	bic.w	r3, r3, #15
 8004280:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <SystemInit+0xe8>)
 8004282:	f043 0307 	orr.w	r3, r3, #7
 8004286:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <SystemInit+0xec>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <SystemInit+0xec>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004294:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <SystemInit+0xec>)
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800429a:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <SystemInit+0xec>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4929      	ldr	r1, [pc, #164]	; (8004344 <SystemInit+0xec>)
 80042a0:	4b29      	ldr	r3, [pc, #164]	; (8004348 <SystemInit+0xf0>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80042a6:	4b26      	ldr	r3, [pc, #152]	; (8004340 <SystemInit+0xe8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <SystemInit+0xe8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 030f 	bic.w	r3, r3, #15
 80042ba:	4a21      	ldr	r2, [pc, #132]	; (8004340 <SystemInit+0xe8>)
 80042bc:	f043 0307 	orr.w	r3, r3, #7
 80042c0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <SystemInit+0xec>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <SystemInit+0xec>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <SystemInit+0xec>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <SystemInit+0xec>)
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <SystemInit+0xf4>)
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80042da:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <SystemInit+0xec>)
 80042dc:	4a1c      	ldr	r2, [pc, #112]	; (8004350 <SystemInit+0xf8>)
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80042e0:	4b18      	ldr	r3, [pc, #96]	; (8004344 <SystemInit+0xec>)
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <SystemInit+0xfc>)
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80042e6:	4b17      	ldr	r3, [pc, #92]	; (8004344 <SystemInit+0xec>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80042ec:	4b15      	ldr	r3, [pc, #84]	; (8004344 <SystemInit+0xec>)
 80042ee:	4a19      	ldr	r2, [pc, #100]	; (8004354 <SystemInit+0xfc>)
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <SystemInit+0xec>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80042f8:	4b12      	ldr	r3, [pc, #72]	; (8004344 <SystemInit+0xec>)
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <SystemInit+0xfc>)
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <SystemInit+0xec>)
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <SystemInit+0xec>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <SystemInit+0xec>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <SystemInit+0xec>)
 8004312:	2200      	movs	r2, #0
 8004314:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <SystemInit+0x100>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <SystemInit+0x104>)
 800431c:	4013      	ands	r3, r2
 800431e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004322:	d202      	bcs.n	800432a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <SystemInit+0x108>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <SystemInit+0x10c>)
 800432c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004330:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00
 8004340:	52002000 	.word	0x52002000
 8004344:	58024400 	.word	0x58024400
 8004348:	eaf6ed7f 	.word	0xeaf6ed7f
 800434c:	02020200 	.word	0x02020200
 8004350:	01ff0000 	.word	0x01ff0000
 8004354:	01010280 	.word	0x01010280
 8004358:	5c001000 	.word	0x5c001000
 800435c:	ffff0000 	.word	0xffff0000
 8004360:	51008108 	.word	0x51008108
 8004364:	52004000 	.word	0x52004000

08004368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800436c:	f7ff ff74 	bl	8004258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004370:	480c      	ldr	r0, [pc, #48]	; (80043a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004372:	490d      	ldr	r1, [pc, #52]	; (80043a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004378:	e002      	b.n	8004380 <LoopCopyDataInit>

0800437a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800437a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800437c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800437e:	3304      	adds	r3, #4

08004380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004384:	d3f9      	bcc.n	800437a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004388:	4c0a      	ldr	r4, [pc, #40]	; (80043b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800438a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800438c:	e001      	b.n	8004392 <LoopFillZerobss>

0800438e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800438e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004390:	3204      	adds	r2, #4

08004392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004394:	d3fb      	bcc.n	800438e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004396:	f012 fe0f 	bl	8016fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800439a:	f7fc fdcd 	bl	8000f38 <main>
  bx  lr
 800439e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80043a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80043a8:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 80043ac:	08017f50 	.word	0x08017f50
  ldr r2, =_sbss
 80043b0:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80043b4:	24005ac8 	.word	0x24005ac8

080043b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b8:	e7fe      	b.n	80043b8 <ADC3_IRQHandler>
	...

080043bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c2:	2003      	movs	r0, #3
 80043c4:	f001 fd39 	bl	8005e3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043c8:	f006 fe2c 	bl	800b024 <HAL_RCC_GetSysClockFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <HAL_Init+0x68>)
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	4913      	ldr	r1, [pc, #76]	; (8004428 <HAL_Init+0x6c>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
 80043e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_Init+0x68>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <HAL_Init+0x6c>)
 80043f0:	5cd3      	ldrb	r3, [r2, r3]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	4a0b      	ldr	r2, [pc, #44]	; (800442c <HAL_Init+0x70>)
 80043fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004400:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_Init+0x74>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004406:	2005      	movs	r0, #5
 8004408:	f7ff fd56 	bl	8003eb8 <HAL_InitTick>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e002      	b.n	800441c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004416:	f7ff f8bf 	bl	8003598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	58024400 	.word	0x58024400
 8004428:	08017e9c 	.word	0x08017e9c
 800442c:	24000090 	.word	0x24000090
 8004430:	2400008c 	.word	0x2400008c

08004434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_IncTick+0x20>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_IncTick+0x24>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4413      	add	r3, r2
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <HAL_IncTick+0x24>)
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	24000098 	.word	0x24000098
 8004458:	24001164 	.word	0x24001164

0800445c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return uwTick;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_GetTick+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	24001164 	.word	0x24001164

08004474 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_GetREVID+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0c1b      	lsrs	r3, r3, #16
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	5c001000 	.word	0x5c001000

0800448c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	43db      	mvns	r3, r3
 800449e:	401a      	ands	r2, r3
 80044a0:	4904      	ldr	r1, [pc, #16]	; (80044b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	58000400 	.word	0x58000400

080044b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3360      	adds	r3, #96	; 0x60
 8004532:	461a      	mov	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	431a      	orrs	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	611a      	str	r2, [r3, #16]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004592:	b480      	push	{r7}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3360      	adds	r3, #96	; 0x60
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	601a      	str	r2, [r3, #0]
  }
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b087      	sub	sp, #28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3330      	adds	r3, #48	; 0x30
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	4413      	add	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	211f      	movs	r1, #31
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	401a      	ands	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0e9b      	lsrs	r3, r3, #26
 8004626:	f003 011f 	and.w	r1, r3, #31
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	431a      	orrs	r2, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f023 0203 	bic.w	r2, r3, #3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3314      	adds	r3, #20
 800467c:	461a      	mov	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	0e5b      	lsrs	r3, r3, #25
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	4413      	add	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	0d1b      	lsrs	r3, r3, #20
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2107      	movs	r1, #7
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	401a      	ands	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	fa01 f303 	lsl.w	r3, r1, r3
 80046b0:	431a      	orrs	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046dc:	43db      	mvns	r3, r3
 80046de:	401a      	ands	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f003 0318 	and.w	r3, r3, #24
 80046e6:	4908      	ldr	r1, [pc, #32]	; (8004708 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046e8:	40d9      	lsrs	r1, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	400b      	ands	r3, r1
 80046ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	000fffff 	.word	0x000fffff

0800470c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 031f 	and.w	r3, r3, #31
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004736:	4013      	ands	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6093      	str	r3, [r2, #8]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	5fffffc0 	.word	0x5fffffc0

0800474c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800475c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004760:	d101      	bne.n	8004766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <LL_ADC_EnableInternalRegulator+0x24>)
 8004782:	4013      	ands	r3, r2
 8004784:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	6fffffc0 	.word	0x6fffffc0

0800479c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b0:	d101      	bne.n	80047b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <LL_ADC_Enable+0x24>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	7fffffc0 	.word	0x7fffffc0

080047ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <LL_ADC_Disable+0x24>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	f043 0202 	orr.w	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	7fffffc0 	.word	0x7fffffc0

08004814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <LL_ADC_IsEnabled+0x18>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <LL_ADC_IsEnabled+0x1a>
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d101      	bne.n	8004852 <LL_ADC_IsDisableOngoing+0x18>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <LL_ADC_IsDisableOngoing+0x1a>
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <LL_ADC_REG_StartConversion+0x24>)
 800486e:	4013      	ands	r3, r2
 8004870:	f043 0204 	orr.w	r2, r3, #4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	7fffffc0 	.word	0x7fffffc0

08004888 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d101      	bne.n	80048a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d101      	bne.n	80048c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e18f      	b.n	8004c0e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fe fe69 	bl	80035d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff19 	bl	800474c <LL_ADC_IsDeepPowerDownEnabled>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff feff 	bl	8004728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff34 	bl	800479c <LL_ADC_IsInternalRegulatorEnabled>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d114      	bne.n	8004964 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff18 	bl	8004774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004944:	4b87      	ldr	r3, [pc, #540]	; (8004b64 <HAL_ADC_Init+0x290>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	4a87      	ldr	r2, [pc, #540]	; (8004b68 <HAL_ADC_Init+0x294>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	3301      	adds	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004956:	e002      	b.n	800495e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3b01      	subs	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f9      	bne.n	8004958 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff17 	bl	800479c <LL_ADC_IsInternalRegulatorEnabled>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10d      	bne.n	8004990 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f043 0210 	orr.w	r2, r3, #16
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f043 0201 	orr.w	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff77 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 800499a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 8129 	bne.w	8004bfc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f040 8125 	bne.w	8004bfc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049ba:	f043 0202 	orr.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff ff24 	bl	8004814 <LL_ADC_IsEnabled>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d136      	bne.n	8004a40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a65      	ldr	r2, [pc, #404]	; (8004b6c <HAL_ADC_Init+0x298>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_ADC_Init+0x112>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a63      	ldr	r2, [pc, #396]	; (8004b70 <HAL_ADC_Init+0x29c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10e      	bne.n	8004a04 <HAL_ADC_Init+0x130>
 80049e6:	4861      	ldr	r0, [pc, #388]	; (8004b6c <HAL_ADC_Init+0x298>)
 80049e8:	f7ff ff14 	bl	8004814 <LL_ADC_IsEnabled>
 80049ec:	4604      	mov	r4, r0
 80049ee:	4860      	ldr	r0, [pc, #384]	; (8004b70 <HAL_ADC_Init+0x29c>)
 80049f0:	f7ff ff10 	bl	8004814 <LL_ADC_IsEnabled>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4323      	orrs	r3, r4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e008      	b.n	8004a16 <HAL_ADC_Init+0x142>
 8004a04:	485b      	ldr	r0, [pc, #364]	; (8004b74 <HAL_ADC_Init+0x2a0>)
 8004a06:	f7ff ff05 	bl	8004814 <LL_ADC_IsEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a53      	ldr	r2, [pc, #332]	; (8004b6c <HAL_ADC_Init+0x298>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_ADC_Init+0x15a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a51      	ldr	r2, [pc, #324]	; (8004b70 <HAL_ADC_Init+0x29c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADC_Init+0x15e>
 8004a2e:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_ADC_Init+0x2a4>)
 8004a30:	e000      	b.n	8004a34 <HAL_ADC_Init+0x160>
 8004a32:	4a52      	ldr	r2, [pc, #328]	; (8004b7c <HAL_ADC_Init+0x2a8>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f7ff fd3c 	bl	80044b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004a40:	f7ff fd18 	bl	8004474 <HAL_GetREVID>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d914      	bls.n	8004a78 <HAL_ADC_Init+0x1a4>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d110      	bne.n	8004a78 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7d5b      	ldrb	r3, [r3, #21]
 8004a5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	7f1b      	ldrb	r3, [r3, #28]
 8004a6c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a6e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a70:	f043 030c 	orr.w	r3, r3, #12
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	e00d      	b.n	8004a94 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7d5b      	ldrb	r3, [r3, #21]
 8004a7c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a82:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a88:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7f1b      	ldrb	r3, [r3, #28]
 8004a8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7f1b      	ldrb	r3, [r3, #28]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d106      	bne.n	8004aaa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	045b      	lsls	r3, r3, #17
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_ADC_Init+0x2ac>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fed2 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004ae4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fedf 	bl	80048ae <LL_ADC_INJ_IsConversionOngoing>
 8004af0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d15f      	bne.n	8004bb8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d15c      	bne.n	8004bb8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7d1b      	ldrb	r3, [r3, #20]
 8004b02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <HAL_ADC_Init+0x2b0>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	69b9      	ldr	r1, [r7, #24]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d130      	bne.n	8004b8c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0411      	lsls	r1, r2, #16
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b46:	4311      	orrs	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b52:	430a      	orrs	r2, r1
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	611a      	str	r2, [r3, #16]
 8004b60:	e01c      	b.n	8004b9c <HAL_ADC_Init+0x2c8>
 8004b62:	bf00      	nop
 8004b64:	2400008c 	.word	0x2400008c
 8004b68:	053e2d63 	.word	0x053e2d63
 8004b6c:	40022000 	.word	0x40022000
 8004b70:	40022100 	.word	0x40022100
 8004b74:	58026000 	.word	0x58026000
 8004b78:	40022300 	.word	0x40022300
 8004b7c:	58026300 	.word	0x58026300
 8004b80:	fff0c003 	.word	0xfff0c003
 8004b84:	ffffbffc 	.word	0xffffbffc
 8004b88:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fdec 	bl	8005790 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f023 010f 	bic.w	r1, r3, #15
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd8:	e007      	b.n	8004bea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 020f 	bic.w	r2, r2, #15
 8004be8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
 8004bfa:	e007      	b.n	8004c0c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f043 0210 	orr.w	r2, r3, #16
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3724      	adds	r7, #36	; 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}
 8004c16:	bf00      	nop

08004c18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a55      	ldr	r2, [pc, #340]	; (8004d80 <HAL_ADC_Start_DMA+0x168>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_ADC_Start_DMA+0x20>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a54      	ldr	r2, [pc, #336]	; (8004d84 <HAL_ADC_Start_DMA+0x16c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_ADC_Start_DMA+0x24>
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_ADC_Start_DMA+0x170>)
 8004c3a:	e000      	b.n	8004c3e <HAL_ADC_Start_DMA+0x26>
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_ADC_Start_DMA+0x174>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fd64 	bl	800470c <LL_ADC_GetMultimode>
 8004c44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fe1c 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 808c 	bne.w	8004d70 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_Start_DMA+0x4e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e087      	b.n	8004d76 <HAL_ADC_Start_DMA+0x15e>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d002      	beq.n	8004c80 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b09      	cmp	r3, #9
 8004c7e:	d170      	bne.n	8004d62 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fc07 	bl	8005494 <ADC_Enable>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d163      	bne.n	8004d58 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c94:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <HAL_ADC_Start_DMA+0x178>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <HAL_ADC_Start_DMA+0x16c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d002      	beq.n	8004cb0 <HAL_ADC_Start_DMA+0x98>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	e000      	b.n	8004cb2 <HAL_ADC_Start_DMA+0x9a>
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <HAL_ADC_Start_DMA+0x168>)
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d002      	beq.n	8004cc0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	f023 0206 	bic.w	r2, r3, #6
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ce4:	e002      	b.n	8004cec <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	4a28      	ldr	r2, [pc, #160]	; (8004d94 <HAL_ADC_Start_DMA+0x17c>)
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <HAL_ADC_Start_DMA+0x180>)
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_ADC_Start_DMA+0x184>)
 8004d02:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	221c      	movs	r2, #28
 8004d0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0210 	orr.w	r2, r2, #16
 8004d22:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7ff fc89 	bl	8004646 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3340      	adds	r3, #64	; 0x40
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f002 f80e 	bl	8006d64 <HAL_DMA_Start_IT>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fd85 	bl	8004860 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004d56:	e00d      	b.n	8004d74 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004d60:	e008      	b.n	8004d74 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d6e:	e001      	b.n	8004d74 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
 8004d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40022000 	.word	0x40022000
 8004d84:	40022100 	.word	0x40022100
 8004d88:	40022300 	.word	0x40022300
 8004d8c:	58026300 	.word	0x58026300
 8004d90:	fffff0fe 	.word	0xfffff0fe
 8004d94:	08005667 	.word	0x08005667
 8004d98:	0800573f 	.word	0x0800573f
 8004d9c:	0800575b 	.word	0x0800575b

08004da0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b0a1      	sub	sp, #132	; 0x84
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a65      	ldr	r2, [pc, #404]	; (8004f8c <HAL_ADC_ConfigChannel+0x1b0>)
 8004df6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x2a>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e32e      	b.n	8005464 <HAL_ADC_ConfigChannel+0x688>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fd38 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f040 8313 	bne.w	8005446 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	db2c      	blt.n	8004e82 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d108      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x6a>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	2201      	movs	r2, #1
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	e016      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x98>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e56:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e003      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e64:	fab3 f383 	clz	r3, r3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2201      	movs	r2, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	69d1      	ldr	r1, [r2, #28]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f7ff fbad 	bl	80045ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fcf5 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004e9e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fd02 	bl	80048ae <LL_ADC_INJ_IsConversionOngoing>
 8004eaa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 80b8 	bne.w	8005024 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 80b4 	bne.w	8005024 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f7ff fbcf 	bl	800466c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <HAL_ADC_ConfigChannel+0x1b4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eda:	d10b      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x118>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	e01d      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x154>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x13e>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	e00a      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x154>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d02c      	beq.n	8004f94 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6919      	ldr	r1, [r3, #16]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f48:	f7ff faea 	bl	8004520 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6919      	ldr	r1, [r3, #16]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	7e5b      	ldrb	r3, [r3, #25]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x186>
 8004f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f60:	e000      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x188>
 8004f62:	2300      	movs	r3, #0
 8004f64:	461a      	mov	r2, r3
 8004f66:	f7ff fb14 	bl	8004592 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6919      	ldr	r1, [r3, #16]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	7e1b      	ldrb	r3, [r3, #24]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x1a4>
 8004f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f7e:	e000      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x1a6>
 8004f80:	2300      	movs	r3, #0
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7ff faec 	bl	8004560 <LL_ADC_SetDataRightShift>
 8004f88:	e04c      	b.n	8005024 <HAL_ADC_ConfigChannel+0x248>
 8004f8a:	bf00      	nop
 8004f8c:	47ff0000 	.word	0x47ff0000
 8004f90:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	069b      	lsls	r3, r3, #26
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d107      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	069b      	lsls	r3, r3, #26
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fda:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	069b      	lsls	r3, r3, #26
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d107      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ffe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	069b      	lsls	r3, r3, #26
 8005010:	429a      	cmp	r2, r3
 8005012:	d107      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005022:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fbf3 	bl	8004814 <LL_ADC_IsEnabled>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 8211 	bne.w	8005458 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	461a      	mov	r2, r3
 8005044:	f7ff fb3e 	bl	80046c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4aa1      	ldr	r2, [pc, #644]	; (80052d4 <HAL_ADC_ConfigChannel+0x4f8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f040 812e 	bne.w	80052b0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_ADC_ConfigChannel+0x2a0>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	0e9b      	lsrs	r3, r3, #26
 800506a:	3301      	adds	r3, #1
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2b09      	cmp	r3, #9
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e019      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x2d4>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005084:	fa93 f3a3 	rbit	r3, r3
 8005088:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800508a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800508e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8005094:	2320      	movs	r3, #32
 8005096:	e003      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8005098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	bf94      	ite	ls
 80050aa:	2301      	movls	r3, #1
 80050ac:	2300      	movhi	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d079      	beq.n	80051a8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x2f4>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e9b      	lsrs	r3, r3, #26
 80050c6:	3301      	adds	r3, #1
 80050c8:	069b      	lsls	r3, r3, #26
 80050ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ce:	e015      	b.n	80050fc <HAL_ADC_ConfigChannel+0x320>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80050de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80050e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80050ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	069b      	lsls	r3, r3, #26
 80050f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_ADC_ConfigChannel+0x340>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0e9b      	lsrs	r3, r3, #26
 800510e:	3301      	adds	r3, #1
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2101      	movs	r1, #1
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	e017      	b.n	800514c <HAL_ADC_ConfigChannel+0x370>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800512a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8005134:	2320      	movs	r3, #32
 8005136:	e003      	b.n	8005140 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8005138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	3301      	adds	r3, #1
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2101      	movs	r1, #1
 8005148:	fa01 f303 	lsl.w	r3, r1, r3
 800514c:	ea42 0103 	orr.w	r1, r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x396>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	0e9b      	lsrs	r3, r3, #26
 8005162:	3301      	adds	r3, #1
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	4613      	mov	r3, r2
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	4413      	add	r3, r2
 800516e:	051b      	lsls	r3, r3, #20
 8005170:	e018      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x3c8>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800518a:	2320      	movs	r3, #32
 800518c:	e003      	b.n	8005196 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	3301      	adds	r3, #1
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a4:	430b      	orrs	r3, r1
 80051a6:	e07e      	b.n	80052a6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x3e8>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0e9b      	lsrs	r3, r3, #26
 80051ba:	3301      	adds	r3, #1
 80051bc:	069b      	lsls	r3, r3, #26
 80051be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051c2:	e015      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x414>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80051dc:	2320      	movs	r3, #32
 80051de:	e003      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	069b      	lsls	r3, r3, #26
 80051ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x434>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	3301      	adds	r3, #1
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	e017      	b.n	8005240 <HAL_ADC_ConfigChannel+0x464>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	61bb      	str	r3, [r7, #24]
  return result;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8005228:	2320      	movs	r3, #32
 800522a:	e003      	b.n	8005234 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10d      	bne.n	800526c <HAL_ADC_ConfigChannel+0x490>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	f003 021f 	and.w	r2, r3, #31
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	3b1e      	subs	r3, #30
 8005264:	051b      	lsls	r3, r3, #20
 8005266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800526a:	e01b      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x4c8>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	60fb      	str	r3, [r7, #12]
  return result;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005284:	2320      	movs	r3, #32
 8005286:	e003      	b.n	8005290 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	3301      	adds	r3, #1
 8005292:	f003 021f 	and.w	r2, r3, #31
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	3b1e      	subs	r3, #30
 800529e:	051b      	lsls	r3, r3, #20
 80052a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052a4:	430b      	orrs	r3, r1
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	4619      	mov	r1, r3
 80052ac:	f7ff f9de 	bl	800466c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f280 80cf 	bge.w	8005458 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a06      	ldr	r2, [pc, #24]	; (80052d8 <HAL_ADC_ConfigChannel+0x4fc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_ADC_ConfigChannel+0x4f2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a04      	ldr	r2, [pc, #16]	; (80052dc <HAL_ADC_ConfigChannel+0x500>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10a      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x508>
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <HAL_ADC_ConfigChannel+0x504>)
 80052d0:	e009      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x50a>
 80052d2:	bf00      	nop
 80052d4:	47ff0000 	.word	0x47ff0000
 80052d8:	40022000 	.word	0x40022000
 80052dc:	40022100 	.word	0x40022100
 80052e0:	40022300 	.word	0x40022300
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <HAL_ADC_ConfigChannel+0x690>)
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff f90c 	bl	8004504 <LL_ADC_GetCommonPathInternalCh>
 80052ec:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a5f      	ldr	r2, [pc, #380]	; (8005470 <HAL_ADC_ConfigChannel+0x694>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_ADC_ConfigChannel+0x526>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_ADC_ConfigChannel+0x698>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10e      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x544>
 8005302:	485b      	ldr	r0, [pc, #364]	; (8005470 <HAL_ADC_ConfigChannel+0x694>)
 8005304:	f7ff fa86 	bl	8004814 <LL_ADC_IsEnabled>
 8005308:	4604      	mov	r4, r0
 800530a:	485a      	ldr	r0, [pc, #360]	; (8005474 <HAL_ADC_ConfigChannel+0x698>)
 800530c:	f7ff fa82 	bl	8004814 <LL_ADC_IsEnabled>
 8005310:	4603      	mov	r3, r0
 8005312:	4323      	orrs	r3, r4
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e008      	b.n	8005332 <HAL_ADC_ConfigChannel+0x556>
 8005320:	4855      	ldr	r0, [pc, #340]	; (8005478 <HAL_ADC_ConfigChannel+0x69c>)
 8005322:	f7ff fa77 	bl	8004814 <LL_ADC_IsEnabled>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d07d      	beq.n	8005432 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a50      	ldr	r2, [pc, #320]	; (800547c <HAL_ADC_ConfigChannel+0x6a0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d130      	bne.n	80053a2 <HAL_ADC_ConfigChannel+0x5c6>
 8005340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d12b      	bne.n	80053a2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a4a      	ldr	r2, [pc, #296]	; (8005478 <HAL_ADC_ConfigChannel+0x69c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	f040 8081 	bne.w	8005458 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a45      	ldr	r2, [pc, #276]	; (8005470 <HAL_ADC_ConfigChannel+0x694>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_ADC_ConfigChannel+0x58e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a43      	ldr	r2, [pc, #268]	; (8005474 <HAL_ADC_ConfigChannel+0x698>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d101      	bne.n	800536e <HAL_ADC_ConfigChannel+0x592>
 800536a:	4a45      	ldr	r2, [pc, #276]	; (8005480 <HAL_ADC_ConfigChannel+0x6a4>)
 800536c:	e000      	b.n	8005370 <HAL_ADC_ConfigChannel+0x594>
 800536e:	4a3f      	ldr	r2, [pc, #252]	; (800546c <HAL_ADC_ConfigChannel+0x690>)
 8005370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7ff f8b0 	bl	80044de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800537e:	4b41      	ldr	r3, [pc, #260]	; (8005484 <HAL_ADC_ConfigChannel+0x6a8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	4a40      	ldr	r2, [pc, #256]	; (8005488 <HAL_ADC_ConfigChannel+0x6ac>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	099b      	lsrs	r3, r3, #6
 800538c:	3301      	adds	r3, #1
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005392:	e002      	b.n	800539a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	3b01      	subs	r3, #1
 8005398:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f9      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053a0:	e05a      	b.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a39      	ldr	r2, [pc, #228]	; (800548c <HAL_ADC_ConfigChannel+0x6b0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d11e      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x60e>
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d119      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a2f      	ldr	r2, [pc, #188]	; (8005478 <HAL_ADC_ConfigChannel+0x69c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d14b      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	; (8005470 <HAL_ADC_ConfigChannel+0x694>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_ADC_ConfigChannel+0x5f8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a29      	ldr	r2, [pc, #164]	; (8005474 <HAL_ADC_ConfigChannel+0x698>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x5fc>
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <HAL_ADC_ConfigChannel+0x6a4>)
 80053d6:	e000      	b.n	80053da <HAL_ADC_ConfigChannel+0x5fe>
 80053d8:	4a24      	ldr	r2, [pc, #144]	; (800546c <HAL_ADC_ConfigChannel+0x690>)
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7ff f87b 	bl	80044de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053e8:	e036      	b.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a28      	ldr	r2, [pc, #160]	; (8005490 <HAL_ADC_ConfigChannel+0x6b4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d131      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
 80053f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d12c      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <HAL_ADC_ConfigChannel+0x69c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d127      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_ADC_ConfigChannel+0x694>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_ADC_ConfigChannel+0x640>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a17      	ldr	r2, [pc, #92]	; (8005474 <HAL_ADC_ConfigChannel+0x698>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d101      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x644>
 800541c:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_ADC_ConfigChannel+0x6a4>)
 800541e:	e000      	b.n	8005422 <HAL_ADC_ConfigChannel+0x646>
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <HAL_ADC_ConfigChannel+0x690>)
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7ff f857 	bl	80044de <LL_ADC_SetCommonPathInternalCh>
 8005430:	e012      	b.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005444:	e008      	b.n	8005458 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005460:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005464:	4618      	mov	r0, r3
 8005466:	3784      	adds	r7, #132	; 0x84
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}
 800546c:	58026300 	.word	0x58026300
 8005470:	40022000 	.word	0x40022000
 8005474:	40022100 	.word	0x40022100
 8005478:	58026000 	.word	0x58026000
 800547c:	cb840000 	.word	0xcb840000
 8005480:	40022300 	.word	0x40022300
 8005484:	2400008c 	.word	0x2400008c
 8005488:	053e2d63 	.word	0x053e2d63
 800548c:	c7520000 	.word	0xc7520000
 8005490:	cfb80000 	.word	0xcfb80000

08005494 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff f9b7 	bl	8004814 <LL_ADC_IsEnabled>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d16e      	bne.n	800558a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4b38      	ldr	r3, [pc, #224]	; (8005594 <ADC_Enable+0x100>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f043 0210 	orr.w	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	f043 0201 	orr.w	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e05a      	b.n	800558c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff f972 	bl	80047c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80054e0:	f7fe ffbc 	bl	800445c <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2b      	ldr	r2, [pc, #172]	; (8005598 <ADC_Enable+0x104>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <ADC_Enable+0x66>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a29      	ldr	r2, [pc, #164]	; (800559c <ADC_Enable+0x108>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <ADC_Enable+0x6a>
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <ADC_Enable+0x10c>)
 80054fc:	e000      	b.n	8005500 <ADC_Enable+0x6c>
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <ADC_Enable+0x110>)
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff f903 	bl	800470c <LL_ADC_GetMultimode>
 8005506:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a23      	ldr	r2, [pc, #140]	; (800559c <ADC_Enable+0x108>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d002      	beq.n	8005518 <ADC_Enable+0x84>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	e000      	b.n	800551a <ADC_Enable+0x86>
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <ADC_Enable+0x104>)
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	4293      	cmp	r3, r2
 8005520:	d02c      	beq.n	800557c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d130      	bne.n	800558a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005528:	e028      	b.n	800557c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff f970 	bl	8004814 <LL_ADC_IsEnabled>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d104      	bne.n	8005544 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff f940 	bl	80047c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005544:	f7fe ff8a 	bl	800445c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d914      	bls.n	800557c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d00d      	beq.n	800557c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f043 0210 	orr.w	r2, r3, #16
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	f043 0201 	orr.w	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e007      	b.n	800558c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d1cf      	bne.n	800552a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	8000003f 	.word	0x8000003f
 8005598:	40022000 	.word	0x40022000
 800559c:	40022100 	.word	0x40022100
 80055a0:	40022300 	.word	0x40022300
 80055a4:	58026300 	.word	0x58026300

080055a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff f940 	bl	800483a <LL_ADC_IsDisableOngoing>
 80055ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f927 	bl	8004814 <LL_ADC_IsEnabled>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d047      	beq.n	800565c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d144      	bne.n	800565c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030d 	and.w	r3, r3, #13
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d10c      	bne.n	80055fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff f901 	bl	80047ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2203      	movs	r2, #3
 80055f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055f2:	f7fe ff33 	bl	800445c <HAL_GetTick>
 80055f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055f8:	e029      	b.n	800564e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f043 0210 	orr.w	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	f043 0201 	orr.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e023      	b.n	800565e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005616:	f7fe ff21 	bl	800445c <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d914      	bls.n	800564e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f043 0210 	orr.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	f043 0201 	orr.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e007      	b.n	800565e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1dc      	bne.n	8005616 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800567c:	2b00      	cmp	r3, #0
 800567e:	d14b      	bne.n	8005718 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d021      	beq.n	80056de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe ff92 	bl	80045c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d032      	beq.n	8005710 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d12b      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11f      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f043 0201 	orr.w	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54
 80056dc:	e018      	b.n	8005710 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d111      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	f043 0201 	orr.w	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fb45 	bl	8004da0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005716:	e00e      	b.n	8005736 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fb4f 	bl	8004dc8 <HAL_ADC_ErrorCallback>
}
 800572a:	e004      	b.n	8005736 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fb31 	bl	8004db4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005778:	f043 0204 	orr.w	r2, r3, #4
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fb21 	bl	8004dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a7a      	ldr	r2, [pc, #488]	; (8005988 <ADC_ConfigureBoostMode+0x1f8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <ADC_ConfigureBoostMode+0x1c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a79      	ldr	r2, [pc, #484]	; (800598c <ADC_ConfigureBoostMode+0x1fc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <ADC_ConfigureBoostMode+0x30>
 80057ac:	4b78      	ldr	r3, [pc, #480]	; (8005990 <ADC_ConfigureBoostMode+0x200>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e008      	b.n	80057d2 <ADC_ConfigureBoostMode+0x42>
 80057c0:	4b74      	ldr	r3, [pc, #464]	; (8005994 <ADC_ConfigureBoostMode+0x204>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01c      	beq.n	8005810 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80057d6:	f005 fd9f 	bl	800b318 <HAL_RCC_GetHCLKFreq>
 80057da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057e4:	d010      	beq.n	8005808 <ADC_ConfigureBoostMode+0x78>
 80057e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057ea:	d873      	bhi.n	80058d4 <ADC_ConfigureBoostMode+0x144>
 80057ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f0:	d002      	beq.n	80057f8 <ADC_ConfigureBoostMode+0x68>
 80057f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f6:	d16d      	bne.n	80058d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	60fb      	str	r3, [r7, #12]
        break;
 8005806:	e068      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	60fb      	str	r3, [r7, #12]
        break;
 800580e:	e064      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005810:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005814:	f04f 0100 	mov.w	r1, #0
 8005818:	f007 f826 	bl	800c868 <HAL_RCCEx_GetPeriphCLKFreq>
 800581c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005826:	d051      	beq.n	80058cc <ADC_ConfigureBoostMode+0x13c>
 8005828:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800582c:	d854      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 800582e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005832:	d047      	beq.n	80058c4 <ADC_ConfigureBoostMode+0x134>
 8005834:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005838:	d84e      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 800583a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800583e:	d03d      	beq.n	80058bc <ADC_ConfigureBoostMode+0x12c>
 8005840:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005844:	d848      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 8005846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800584a:	d033      	beq.n	80058b4 <ADC_ConfigureBoostMode+0x124>
 800584c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005850:	d842      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 8005852:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005856:	d029      	beq.n	80058ac <ADC_ConfigureBoostMode+0x11c>
 8005858:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800585c:	d83c      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 800585e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005862:	d01a      	beq.n	800589a <ADC_ConfigureBoostMode+0x10a>
 8005864:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005868:	d836      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 800586a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800586e:	d014      	beq.n	800589a <ADC_ConfigureBoostMode+0x10a>
 8005870:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005874:	d830      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 8005876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800587a:	d00e      	beq.n	800589a <ADC_ConfigureBoostMode+0x10a>
 800587c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005880:	d82a      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 8005882:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005886:	d008      	beq.n	800589a <ADC_ConfigureBoostMode+0x10a>
 8005888:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800588c:	d824      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x148>
 800588e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005892:	d002      	beq.n	800589a <ADC_ConfigureBoostMode+0x10a>
 8005894:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005898:	d11e      	bne.n	80058d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	0c9b      	lsrs	r3, r3, #18
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	60fb      	str	r3, [r7, #12]
        break;
 80058aa:	e016      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	60fb      	str	r3, [r7, #12]
        break;
 80058b2:	e012      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	60fb      	str	r3, [r7, #12]
        break;
 80058ba:	e00e      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	099b      	lsrs	r3, r3, #6
 80058c0:	60fb      	str	r3, [r7, #12]
        break;
 80058c2:	e00a      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
        break;
 80058ca:	e006      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	60fb      	str	r3, [r7, #12]
        break;
 80058d2:	e002      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
        break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80058d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80058da:	f7fe fdcb 	bl	8004474 <HAL_GetREVID>
 80058de:	4603      	mov	r3, r0
 80058e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d815      	bhi.n	8005914 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <ADC_ConfigureBoostMode+0x208>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d908      	bls.n	8005902 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005900:	e03e      	b.n	8005980 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005910:	609a      	str	r2, [r3, #8]
}
 8005912:	e035      	b.n	8005980 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a1f      	ldr	r2, [pc, #124]	; (800599c <ADC_ConfigureBoostMode+0x20c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d808      	bhi.n	8005934 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005930:	609a      	str	r2, [r3, #8]
}
 8005932:	e025      	b.n	8005980 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <ADC_ConfigureBoostMode+0x210>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d80a      	bhi.n	8005952 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	e016      	b.n	8005980 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <ADC_ConfigureBoostMode+0x214>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d80a      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596c:	609a      	str	r2, [r3, #8]
}
 800596e:	e007      	b.n	8005980 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40022000 	.word	0x40022000
 800598c:	40022100 	.word	0x40022100
 8005990:	40022300 	.word	0x40022300
 8005994:	58026300 	.word	0x58026300
 8005998:	01312d00 	.word	0x01312d00
 800599c:	005f5e10 	.word	0x005f5e10
 80059a0:	00bebc20 	.word	0x00bebc20
 80059a4:	017d7840 	.word	0x017d7840

080059a8 <LL_ADC_IsEnabled>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <LL_ADC_IsEnabled+0x18>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <LL_ADC_IsEnabled+0x1a>
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <LL_ADC_StartCalibration>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <LL_ADC_StartCalibration+0x38>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059f0:	430a      	orrs	r2, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	3ffeffc0 	.word	0x3ffeffc0

08005a0c <LL_ADC_IsCalibrationOnGoing>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a20:	d101      	bne.n	8005a26 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_ADC_REG_IsConversionOngoing>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d101      	bne.n	8005a4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_ADCEx_Calibration_Start+0x1e>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e04c      	b.n	8005b14 <HAL_ADCEx_Calibration_Start+0xb8>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff fd90 	bl	80055a8 <ADC_Disable>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d135      	bne.n	8005afe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a96:	4b21      	ldr	r3, [pc, #132]	; (8005b1c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	f043 0202 	orr.w	r2, r3, #2
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff ff90 	bl	80059d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ab0:	e014      	b.n	8005adc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d30d      	bcc.n	8005adc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	f023 0312 	bic.w	r3, r3, #18
 8005ac8:	f043 0210 	orr.w	r2, r3, #16
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e01b      	b.n	8005b14 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff93 	bl	8005a0c <LL_ADC_IsCalibrationOnGoing>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e2      	bne.n	8005ab2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	f023 0303 	bic.w	r3, r3, #3
 8005af4:	f043 0201 	orr.w	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
 8005afc:	e005      	b.n	8005b0a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	f043 0210 	orr.w	r2, r3, #16
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	ffffeefd 	.word	0xffffeefd
 8005b20:	25c3f800 	.word	0x25c3f800

08005b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b09f      	sub	sp, #124	; 0x7c
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0be      	b.n	8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d102      	bne.n	8005b62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b5c:	4b5b      	ldr	r3, [pc, #364]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	e001      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e09d      	b.n	8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ff54 	bl	8005a34 <LL_ADC_REG_IsConversionOngoing>
 8005b8c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ff4e 	bl	8005a34 <LL_ADC_REG_IsConversionOngoing>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d17f      	bne.n	8005c9e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d17c      	bne.n	8005c9e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a47      	ldr	r2, [pc, #284]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a46      	ldr	r2, [pc, #280]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005bb8:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bba:	e000      	b.n	8005bbe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005bbc:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bbe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d039      	beq.n	8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a3a      	ldr	r2, [pc, #232]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a38      	ldr	r2, [pc, #224]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10e      	bne.n	8005c0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005bee:	4836      	ldr	r0, [pc, #216]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005bf0:	f7ff feda 	bl	80059a8 <LL_ADC_IsEnabled>
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4835      	ldr	r0, [pc, #212]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bf8:	f7ff fed6 	bl	80059a8 <LL_ADC_IsEnabled>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	4323      	orrs	r3, r4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	e008      	b.n	8005c1e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005c0c:	4832      	ldr	r0, [pc, #200]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005c0e:	f7ff fecb 	bl	80059a8 <LL_ADC_IsEnabled>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d047      	beq.n	8005cb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	6892      	ldr	r2, [r2, #8]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	431a      	orrs	r2, r3
 8005c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c38:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c3a:	e03a      	b.n	8005cb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10e      	bne.n	8005c7a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005c5c:	481a      	ldr	r0, [pc, #104]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005c5e:	f7ff fea3 	bl	80059a8 <LL_ADC_IsEnabled>
 8005c62:	4604      	mov	r4, r0
 8005c64:	4819      	ldr	r0, [pc, #100]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005c66:	f7ff fe9f 	bl	80059a8 <LL_ADC_IsEnabled>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4323      	orrs	r3, r4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	e008      	b.n	8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005c7a:	4817      	ldr	r0, [pc, #92]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005c7c:	f7ff fe94 	bl	80059a8 <LL_ADC_IsEnabled>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c9a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c9c:	e009      	b.n	8005cb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005cb0:	e000      	b.n	8005cb4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cb2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005cbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	377c      	adds	r7, #124	; 0x7c
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd90      	pop	{r4, r7, pc}
 8005cc8:	40022000 	.word	0x40022000
 8005ccc:	40022100 	.word	0x40022100
 8005cd0:	40022300 	.word	0x40022300
 8005cd4:	58026300 	.word	0x58026300
 8005cd8:	58026000 	.word	0x58026000
 8005cdc:	fffff0e0 	.word	0xfffff0e0

08005ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <__NVIC_SetPriorityGrouping+0x40>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <__NVIC_SetPriorityGrouping+0x44>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d0e:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <__NVIC_SetPriorityGrouping+0x40>)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	60d3      	str	r3, [r2, #12]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	e000ed00 	.word	0xe000ed00
 8005d24:	05fa0000 	.word	0x05fa0000

08005d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <__NVIC_GetPriorityGrouping+0x18>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0307 	and.w	r3, r3, #7
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000ed00 	.word	0xe000ed00

08005d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	db0b      	blt.n	8005d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	f003 021f 	and.w	r2, r3, #31
 8005d5c:	4907      	ldr	r1, [pc, #28]	; (8005d7c <__NVIC_EnableIRQ+0x38>)
 8005d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2001      	movs	r0, #1
 8005d66:	fa00 f202 	lsl.w	r2, r0, r2
 8005d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	e000e100 	.word	0xe000e100

08005d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db0a      	blt.n	8005daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	490c      	ldr	r1, [pc, #48]	; (8005dcc <__NVIC_SetPriority+0x4c>)
 8005d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	440b      	add	r3, r1
 8005da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005da8:	e00a      	b.n	8005dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4908      	ldr	r1, [pc, #32]	; (8005dd0 <__NVIC_SetPriority+0x50>)
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	3b04      	subs	r3, #4
 8005db8:	0112      	lsls	r2, r2, #4
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	761a      	strb	r2, [r3, #24]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	e000e100 	.word	0xe000e100
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f1c3 0307 	rsb	r3, r3, #7
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	bf28      	it	cs
 8005df2:	2304      	movcs	r3, #4
 8005df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d902      	bls.n	8005e04 <NVIC_EncodePriority+0x30>
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3b03      	subs	r3, #3
 8005e02:	e000      	b.n	8005e06 <NVIC_EncodePriority+0x32>
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43da      	mvns	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	401a      	ands	r2, r3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	fa01 f303 	lsl.w	r3, r1, r3
 8005e26:	43d9      	mvns	r1, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e2c:	4313      	orrs	r3, r2
         );
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3724      	adds	r7, #36	; 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ff4c 	bl	8005ce0 <__NVIC_SetPriorityGrouping>
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e5e:	f7ff ff63 	bl	8005d28 <__NVIC_GetPriorityGrouping>
 8005e62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	6978      	ldr	r0, [r7, #20]
 8005e6a:	f7ff ffb3 	bl	8005dd4 <NVIC_EncodePriority>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff ff82 	bl	8005d80 <__NVIC_SetPriority>
}
 8005e7c:	bf00      	nop
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff ff56 	bl	8005d44 <__NVIC_EnableIRQ>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e014      	b.n	8005edc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	791b      	ldrb	r3, [r3, #4]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fd fca0 	bl	8003808 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e046      	b.n	8005f86 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	795b      	ldrb	r3, [r3, #5]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_DAC_Start+0x20>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e040      	b.n	8005f86 <HAL_DAC_Start+0xa2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d11d      	bne.n	8005f78 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	e014      	b.n	8005f78 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2102      	movs	r1, #2
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d107      	bne.n	8005f78 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0202 	orr.w	r2, r2, #2
 8005f76:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0a2      	b.n	80060f2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	795b      	ldrb	r3, [r3, #5]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_DAC_Start_DMA+0x24>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e09c      	b.n	80060f2 <HAL_DAC_Start_DMA+0x15e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d129      	bne.n	800601e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a4b      	ldr	r2, [pc, #300]	; (80060fc <HAL_DAC_Start_DMA+0x168>)
 8005fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	4a4a      	ldr	r2, [pc, #296]	; (8006100 <HAL_DAC_Start_DMA+0x16c>)
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	4a49      	ldr	r2, [pc, #292]	; (8006104 <HAL_DAC_Start_DMA+0x170>)
 8005fe0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ff0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_DAC_Start_DMA+0x6c>
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d005      	beq.n	800600a <HAL_DAC_Start_DMA+0x76>
 8005ffe:	e009      	b.n	8006014 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	613b      	str	r3, [r7, #16]
        break;
 8006008:	e033      	b.n	8006072 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	613b      	str	r3, [r7, #16]
        break;
 8006012:	e02e      	b.n	8006072 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3310      	adds	r3, #16
 800601a:	613b      	str	r3, [r7, #16]
        break;
 800601c:	e029      	b.n	8006072 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4a39      	ldr	r2, [pc, #228]	; (8006108 <HAL_DAC_Start_DMA+0x174>)
 8006024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	4a38      	ldr	r2, [pc, #224]	; (800610c <HAL_DAC_Start_DMA+0x178>)
 800602c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	4a37      	ldr	r2, [pc, #220]	; (8006110 <HAL_DAC_Start_DMA+0x17c>)
 8006034:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_DAC_Start_DMA+0xc0>
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	2b04      	cmp	r3, #4
 8006050:	d005      	beq.n	800605e <HAL_DAC_Start_DMA+0xca>
 8006052:	e009      	b.n	8006068 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3314      	adds	r3, #20
 800605a:	613b      	str	r3, [r7, #16]
        break;
 800605c:	e009      	b.n	8006072 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3318      	adds	r3, #24
 8006064:	613b      	str	r3, [r7, #16]
        break;
 8006066:	e004      	b.n	8006072 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	331c      	adds	r3, #28
 800606e:	613b      	str	r3, [r7, #16]
        break;
 8006070:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d111      	bne.n	800609c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006086:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6898      	ldr	r0, [r3, #8]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	f000 fe67 	bl	8006d64 <HAL_DMA_Start_IT>
 8006096:	4603      	mov	r3, r0
 8006098:	75fb      	strb	r3, [r7, #23]
 800609a:	e010      	b.n	80060be <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80060aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68d8      	ldr	r0, [r3, #12]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	f000 fe55 	bl	8006d64 <HAL_DMA_Start_IT>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10c      	bne.n	80060e4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2201      	movs	r2, #1
 80060d8:	409a      	lsls	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e005      	b.n	80060f0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f043 0204 	orr.w	r2, r3, #4
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	08006585 	.word	0x08006585
 8006100:	080065a7 	.word	0x080065a7
 8006104:	080065c3 	.word	0x080065c3
 8006108:	08006641 	.word	0x08006641
 800610c:	08006663 	.word	0x08006663
 8006110:	0800667f 	.word	0x0800667f

08006114 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e03e      	b.n	80061a6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6819      	ldr	r1, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43da      	mvns	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	400a      	ands	r2, r1
 8006144:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6819      	ldr	r1, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2201      	movs	r2, #1
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43da      	mvns	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	400a      	ands	r2, r1
 8006160:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10d      	bne.n	8006184 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f863 	bl	8007238 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e00c      	b.n	800619e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f855 	bl	8007238 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800619c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01d      	beq.n	800620c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d018      	beq.n	800620c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006204:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f86f 	bl	80062ea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01d      	beq.n	8006252 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d018      	beq.n	8006252 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2204      	movs	r2, #4
 8006224:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f043 0202 	orr.w	r2, r3, #2
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800623a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800624a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9ed 	bl	800662c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800625a:	b480      	push	{r7}
 800625c:	b087      	sub	sp, #28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e015      	b.n	80062a2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4413      	add	r3, r2
 8006288:	3308      	adds	r3, #8
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e004      	b.n	8006298 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4413      	add	r3, r2
 8006294:	3314      	adds	r3, #20
 8006296:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	461a      	mov	r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_DAC_ConfigChannel+0x1e>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e12a      	b.n	8006578 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	795b      	ldrb	r3, [r3, #5]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_DAC_ConfigChannel+0x2e>
 800632a:	2302      	movs	r3, #2
 800632c:	e124      	b.n	8006578 <HAL_DAC_ConfigChannel+0x278>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2202      	movs	r2, #2
 8006338:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b04      	cmp	r3, #4
 8006340:	d17a      	bne.n	8006438 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006342:	f7fe f88b 	bl	800445c <HAL_GetTick>
 8006346:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d13d      	bne.n	80063ca <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800634e:	e018      	b.n	8006382 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006350:	f7fe f884 	bl	800445c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d911      	bls.n	8006382 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006364:	4b86      	ldr	r3, [pc, #536]	; (8006580 <HAL_DAC_ConfigChannel+0x280>)
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f043 0208 	orr.w	r2, r3, #8
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2203      	movs	r2, #3
 800637c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e0fa      	b.n	8006578 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006388:	4b7d      	ldr	r3, [pc, #500]	; (8006580 <HAL_DAC_ConfigChannel+0x280>)
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1df      	bne.n	8006350 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	6992      	ldr	r2, [r2, #24]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
 800639a:	e020      	b.n	80063de <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800639c:	f7fe f85e 	bl	800445c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d90f      	bls.n	80063ca <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da0a      	bge.n	80063ca <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f043 0208 	orr.w	r2, r3, #8
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2203      	movs	r2, #3
 80063c4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e0d6      	b.n	8006578 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dbe3      	blt.n	800639c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	6992      	ldr	r2, [r2, #24]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	ea02 0103 	and.w	r1, r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	409a      	lsls	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	21ff      	movs	r1, #255	; 0xff
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	43db      	mvns	r3, r3
 8006420:	ea02 0103 	and.w	r1, r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	409a      	lsls	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d11d      	bne.n	800647c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	221f      	movs	r2, #31
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2207      	movs	r2, #7
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	43db      	mvns	r3, r3
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	4013      	ands	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d102      	bne.n	80064a6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
 80064a4:	e00f      	b.n	80064c6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d102      	bne.n	80064b4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80064ae:	2301      	movs	r3, #1
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
 80064b2:	e008      	b.n	80064c6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80064bc:	2301      	movs	r3, #1
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
 80064c0:	e001      	b.n	80064c6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43da      	mvns	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	400a      	ands	r2, r1
 800650c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4013      	ands	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4313      	orrs	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	22c0      	movs	r2, #192	; 0xc0
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43da      	mvns	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	400a      	ands	r2, r1
 8006566:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	; 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20008000 	.word	0x20008000

08006584 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff fe8b 	bl	80062ae <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	711a      	strb	r2, [r3, #4]
}
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fe84 	bl	80062c2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f043 0204 	orr.w	r2, r3, #4
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fe7a 	bl	80062d6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	711a      	strb	r2, [r3, #4]
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff ffce 	bl	80065f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	711a      	strb	r2, [r3, #4]
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff ffc7 	bl	8006604 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f043 0204 	orr.w	r2, r3, #4
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ffbd 	bl	8006618 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	711a      	strb	r2, [r3, #4]
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80066b4:	f7fd fed2 	bl	800445c <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e316      	b.n	8006cf2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a66      	ldr	r2, [pc, #408]	; (8006864 <HAL_DMA_Init+0x1b8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d04a      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a65      	ldr	r2, [pc, #404]	; (8006868 <HAL_DMA_Init+0x1bc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d045      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a63      	ldr	r2, [pc, #396]	; (800686c <HAL_DMA_Init+0x1c0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d040      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a62      	ldr	r2, [pc, #392]	; (8006870 <HAL_DMA_Init+0x1c4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d03b      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a60      	ldr	r2, [pc, #384]	; (8006874 <HAL_DMA_Init+0x1c8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d036      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a5f      	ldr	r2, [pc, #380]	; (8006878 <HAL_DMA_Init+0x1cc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d031      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a5d      	ldr	r2, [pc, #372]	; (800687c <HAL_DMA_Init+0x1d0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02c      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a5c      	ldr	r2, [pc, #368]	; (8006880 <HAL_DMA_Init+0x1d4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d027      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a5a      	ldr	r2, [pc, #360]	; (8006884 <HAL_DMA_Init+0x1d8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d022      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a59      	ldr	r2, [pc, #356]	; (8006888 <HAL_DMA_Init+0x1dc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d01d      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a57      	ldr	r2, [pc, #348]	; (800688c <HAL_DMA_Init+0x1e0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a56      	ldr	r2, [pc, #344]	; (8006890 <HAL_DMA_Init+0x1e4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a54      	ldr	r2, [pc, #336]	; (8006894 <HAL_DMA_Init+0x1e8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a53      	ldr	r2, [pc, #332]	; (8006898 <HAL_DMA_Init+0x1ec>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a51      	ldr	r2, [pc, #324]	; (800689c <HAL_DMA_Init+0x1f0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_DMA_Init+0xb8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a50      	ldr	r2, [pc, #320]	; (80068a0 <HAL_DMA_Init+0x1f4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d101      	bne.n	8006768 <HAL_DMA_Init+0xbc>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_DMA_Init+0xbe>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 813b 	beq.w	80069e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a37      	ldr	r2, [pc, #220]	; (8006864 <HAL_DMA_Init+0x1b8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d04a      	beq.n	8006820 <HAL_DMA_Init+0x174>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a36      	ldr	r2, [pc, #216]	; (8006868 <HAL_DMA_Init+0x1bc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d045      	beq.n	8006820 <HAL_DMA_Init+0x174>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a34      	ldr	r2, [pc, #208]	; (800686c <HAL_DMA_Init+0x1c0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d040      	beq.n	8006820 <HAL_DMA_Init+0x174>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a33      	ldr	r2, [pc, #204]	; (8006870 <HAL_DMA_Init+0x1c4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d03b      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a31      	ldr	r2, [pc, #196]	; (8006874 <HAL_DMA_Init+0x1c8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d036      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a30      	ldr	r2, [pc, #192]	; (8006878 <HAL_DMA_Init+0x1cc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d031      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a2e      	ldr	r2, [pc, #184]	; (800687c <HAL_DMA_Init+0x1d0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d02c      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a2d      	ldr	r2, [pc, #180]	; (8006880 <HAL_DMA_Init+0x1d4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d027      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a2b      	ldr	r2, [pc, #172]	; (8006884 <HAL_DMA_Init+0x1d8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d022      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2a      	ldr	r2, [pc, #168]	; (8006888 <HAL_DMA_Init+0x1dc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01d      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a28      	ldr	r2, [pc, #160]	; (800688c <HAL_DMA_Init+0x1e0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d018      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a27      	ldr	r2, [pc, #156]	; (8006890 <HAL_DMA_Init+0x1e4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <HAL_DMA_Init+0x174>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a25      	ldr	r2, [pc, #148]	; (8006894 <HAL_DMA_Init+0x1e8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_DMA_Init+0x174>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a24      	ldr	r2, [pc, #144]	; (8006898 <HAL_DMA_Init+0x1ec>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d009      	beq.n	8006820 <HAL_DMA_Init+0x174>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a22      	ldr	r2, [pc, #136]	; (800689c <HAL_DMA_Init+0x1f0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_DMA_Init+0x174>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a21      	ldr	r2, [pc, #132]	; (80068a0 <HAL_DMA_Init+0x1f4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <HAL_DMA_Init+0x186>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e007      	b.n	8006842 <HAL_DMA_Init+0x196>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006842:	e02f      	b.n	80068a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006844:	f7fd fe0a 	bl	800445c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b05      	cmp	r3, #5
 8006850:	d928      	bls.n	80068a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2203      	movs	r2, #3
 800685c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e246      	b.n	8006cf2 <HAL_DMA_Init+0x646>
 8006864:	40020010 	.word	0x40020010
 8006868:	40020028 	.word	0x40020028
 800686c:	40020040 	.word	0x40020040
 8006870:	40020058 	.word	0x40020058
 8006874:	40020070 	.word	0x40020070
 8006878:	40020088 	.word	0x40020088
 800687c:	400200a0 	.word	0x400200a0
 8006880:	400200b8 	.word	0x400200b8
 8006884:	40020410 	.word	0x40020410
 8006888:	40020428 	.word	0x40020428
 800688c:	40020440 	.word	0x40020440
 8006890:	40020458 	.word	0x40020458
 8006894:	40020470 	.word	0x40020470
 8006898:	40020488 	.word	0x40020488
 800689c:	400204a0 	.word	0x400204a0
 80068a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1c8      	bne.n	8006844 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4b83      	ldr	r3, [pc, #524]	; (8006acc <HAL_DMA_Init+0x420>)
 80068be:	4013      	ands	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80068ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d107      	bne.n	8006908 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	4313      	orrs	r3, r2
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006908:	4b71      	ldr	r3, [pc, #452]	; (8006ad0 <HAL_DMA_Init+0x424>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b71      	ldr	r3, [pc, #452]	; (8006ad4 <HAL_DMA_Init+0x428>)
 800690e:	4013      	ands	r3, r2
 8006910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006914:	d328      	bcc.n	8006968 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b28      	cmp	r3, #40	; 0x28
 800691c:	d903      	bls.n	8006926 <HAL_DMA_Init+0x27a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b2e      	cmp	r3, #46	; 0x2e
 8006924:	d917      	bls.n	8006956 <HAL_DMA_Init+0x2aa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b3e      	cmp	r3, #62	; 0x3e
 800692c:	d903      	bls.n	8006936 <HAL_DMA_Init+0x28a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b42      	cmp	r3, #66	; 0x42
 8006934:	d90f      	bls.n	8006956 <HAL_DMA_Init+0x2aa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b46      	cmp	r3, #70	; 0x46
 800693c:	d903      	bls.n	8006946 <HAL_DMA_Init+0x29a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b48      	cmp	r3, #72	; 0x48
 8006944:	d907      	bls.n	8006956 <HAL_DMA_Init+0x2aa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b4e      	cmp	r3, #78	; 0x4e
 800694c:	d905      	bls.n	800695a <HAL_DMA_Init+0x2ae>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b52      	cmp	r3, #82	; 0x52
 8006954:	d801      	bhi.n	800695a <HAL_DMA_Init+0x2ae>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <HAL_DMA_Init+0x2b0>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006966:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b04      	cmp	r3, #4
 8006990:	d117      	bne.n	80069c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 fb3f 	bl	8009028 <DMA_CheckFifoParam>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e197      	b.n	8006cf2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 fa7a 	bl	8008ec4 <DMA_CalcBaseAndBitshift>
 80069d0:	4603      	mov	r3, r0
 80069d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	223f      	movs	r2, #63	; 0x3f
 80069de:	409a      	lsls	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	609a      	str	r2, [r3, #8]
 80069e4:	e0cd      	b.n	8006b82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a3b      	ldr	r2, [pc, #236]	; (8006ad8 <HAL_DMA_Init+0x42c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d022      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a39      	ldr	r2, [pc, #228]	; (8006adc <HAL_DMA_Init+0x430>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01d      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a38      	ldr	r2, [pc, #224]	; (8006ae0 <HAL_DMA_Init+0x434>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d018      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a36      	ldr	r2, [pc, #216]	; (8006ae4 <HAL_DMA_Init+0x438>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a35      	ldr	r2, [pc, #212]	; (8006ae8 <HAL_DMA_Init+0x43c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00e      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a33      	ldr	r2, [pc, #204]	; (8006aec <HAL_DMA_Init+0x440>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <HAL_DMA_Init+0x444>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_DMA_Init+0x38a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a30      	ldr	r2, [pc, #192]	; (8006af4 <HAL_DMA_Init+0x448>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d101      	bne.n	8006a3a <HAL_DMA_Init+0x38e>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <HAL_DMA_Init+0x390>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8097 	beq.w	8006b70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a24      	ldr	r2, [pc, #144]	; (8006ad8 <HAL_DMA_Init+0x42c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d021      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a22      	ldr	r2, [pc, #136]	; (8006adc <HAL_DMA_Init+0x430>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01c      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	; (8006ae0 <HAL_DMA_Init+0x434>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d017      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <HAL_DMA_Init+0x438>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d012      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_DMA_Init+0x43c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00d      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_DMA_Init+0x440>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d008      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <HAL_DMA_Init+0x444>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <HAL_DMA_Init+0x3e4>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <HAL_DMA_Init+0x448>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_DMA_Init+0x44c>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d020      	beq.n	8006afc <HAL_DMA_Init+0x450>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d102      	bne.n	8006ac8 <HAL_DMA_Init+0x41c>
 8006ac2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ac6:	e01a      	b.n	8006afe <HAL_DMA_Init+0x452>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e018      	b.n	8006afe <HAL_DMA_Init+0x452>
 8006acc:	fe10803f 	.word	0xfe10803f
 8006ad0:	5c001000 	.word	0x5c001000
 8006ad4:	ffff0000 	.word	0xffff0000
 8006ad8:	58025408 	.word	0x58025408
 8006adc:	5802541c 	.word	0x5802541c
 8006ae0:	58025430 	.word	0x58025430
 8006ae4:	58025444 	.word	0x58025444
 8006ae8:	58025458 	.word	0x58025458
 8006aec:	5802546c 	.word	0x5802546c
 8006af0:	58025480 	.word	0x58025480
 8006af4:	58025494 	.word	0x58025494
 8006af8:	fffe000f 	.word	0xfffe000f
 8006afc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68d2      	ldr	r2, [r2, #12]
 8006b02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006b2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b6e      	ldr	r3, [pc, #440]	; (8006cfc <HAL_DMA_Init+0x650>)
 8006b44:	4413      	add	r3, r2
 8006b46:	4a6e      	ldr	r2, [pc, #440]	; (8006d00 <HAL_DMA_Init+0x654>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	009a      	lsls	r2, r3, #2
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f002 f9b5 	bl	8008ec4 <DMA_CalcBaseAndBitshift>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	2201      	movs	r2, #1
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	605a      	str	r2, [r3, #4]
 8006b6e:	e008      	b.n	8006b82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e0b7      	b.n	8006cf2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a5f      	ldr	r2, [pc, #380]	; (8006d04 <HAL_DMA_Init+0x658>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d072      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5d      	ldr	r2, [pc, #372]	; (8006d08 <HAL_DMA_Init+0x65c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d06d      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a5c      	ldr	r2, [pc, #368]	; (8006d0c <HAL_DMA_Init+0x660>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d068      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a5a      	ldr	r2, [pc, #360]	; (8006d10 <HAL_DMA_Init+0x664>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d063      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a59      	ldr	r2, [pc, #356]	; (8006d14 <HAL_DMA_Init+0x668>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d05e      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a57      	ldr	r2, [pc, #348]	; (8006d18 <HAL_DMA_Init+0x66c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d059      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a56      	ldr	r2, [pc, #344]	; (8006d1c <HAL_DMA_Init+0x670>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d054      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a54      	ldr	r2, [pc, #336]	; (8006d20 <HAL_DMA_Init+0x674>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d04f      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a53      	ldr	r2, [pc, #332]	; (8006d24 <HAL_DMA_Init+0x678>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d04a      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a51      	ldr	r2, [pc, #324]	; (8006d28 <HAL_DMA_Init+0x67c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d045      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a50      	ldr	r2, [pc, #320]	; (8006d2c <HAL_DMA_Init+0x680>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d040      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a4e      	ldr	r2, [pc, #312]	; (8006d30 <HAL_DMA_Init+0x684>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d03b      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4d      	ldr	r2, [pc, #308]	; (8006d34 <HAL_DMA_Init+0x688>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d036      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a4b      	ldr	r2, [pc, #300]	; (8006d38 <HAL_DMA_Init+0x68c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d031      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a4a      	ldr	r2, [pc, #296]	; (8006d3c <HAL_DMA_Init+0x690>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d02c      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a48      	ldr	r2, [pc, #288]	; (8006d40 <HAL_DMA_Init+0x694>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d027      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a47      	ldr	r2, [pc, #284]	; (8006d44 <HAL_DMA_Init+0x698>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d022      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a45      	ldr	r2, [pc, #276]	; (8006d48 <HAL_DMA_Init+0x69c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01d      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a44      	ldr	r2, [pc, #272]	; (8006d4c <HAL_DMA_Init+0x6a0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d018      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a42      	ldr	r2, [pc, #264]	; (8006d50 <HAL_DMA_Init+0x6a4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a41      	ldr	r2, [pc, #260]	; (8006d54 <HAL_DMA_Init+0x6a8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a3f      	ldr	r2, [pc, #252]	; (8006d58 <HAL_DMA_Init+0x6ac>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a3e      	ldr	r2, [pc, #248]	; (8006d5c <HAL_DMA_Init+0x6b0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_DMA_Init+0x5c6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3c      	ldr	r2, [pc, #240]	; (8006d60 <HAL_DMA_Init+0x6b4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d101      	bne.n	8006c76 <HAL_DMA_Init+0x5ca>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <HAL_DMA_Init+0x5cc>
 8006c76:	2300      	movs	r3, #0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d032      	beq.n	8006ce2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f002 fa4f 	bl	8009120 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d102      	bne.n	8006c90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ca4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d010      	beq.n	8006cd0 <HAL_DMA_Init+0x624>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d80c      	bhi.n	8006cd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 facc 	bl	8009254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	e008      	b.n	8006ce2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	a7fdabf8 	.word	0xa7fdabf8
 8006d00:	cccccccd 	.word	0xcccccccd
 8006d04:	40020010 	.word	0x40020010
 8006d08:	40020028 	.word	0x40020028
 8006d0c:	40020040 	.word	0x40020040
 8006d10:	40020058 	.word	0x40020058
 8006d14:	40020070 	.word	0x40020070
 8006d18:	40020088 	.word	0x40020088
 8006d1c:	400200a0 	.word	0x400200a0
 8006d20:	400200b8 	.word	0x400200b8
 8006d24:	40020410 	.word	0x40020410
 8006d28:	40020428 	.word	0x40020428
 8006d2c:	40020440 	.word	0x40020440
 8006d30:	40020458 	.word	0x40020458
 8006d34:	40020470 	.word	0x40020470
 8006d38:	40020488 	.word	0x40020488
 8006d3c:	400204a0 	.word	0x400204a0
 8006d40:	400204b8 	.word	0x400204b8
 8006d44:	58025408 	.word	0x58025408
 8006d48:	5802541c 	.word	0x5802541c
 8006d4c:	58025430 	.word	0x58025430
 8006d50:	58025444 	.word	0x58025444
 8006d54:	58025458 	.word	0x58025458
 8006d58:	5802546c 	.word	0x5802546c
 8006d5c:	58025480 	.word	0x58025480
 8006d60:	58025494 	.word	0x58025494

08006d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e226      	b.n	80071ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_DMA_Start_IT+0x2a>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e21f      	b.n	80071ce <HAL_DMA_Start_IT+0x46a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 820a 	bne.w	80071b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a68      	ldr	r2, [pc, #416]	; (8006f58 <HAL_DMA_Start_IT+0x1f4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d04a      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a66      	ldr	r2, [pc, #408]	; (8006f5c <HAL_DMA_Start_IT+0x1f8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d045      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a65      	ldr	r2, [pc, #404]	; (8006f60 <HAL_DMA_Start_IT+0x1fc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d040      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a63      	ldr	r2, [pc, #396]	; (8006f64 <HAL_DMA_Start_IT+0x200>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d03b      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a62      	ldr	r2, [pc, #392]	; (8006f68 <HAL_DMA_Start_IT+0x204>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d036      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a60      	ldr	r2, [pc, #384]	; (8006f6c <HAL_DMA_Start_IT+0x208>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d031      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a5f      	ldr	r2, [pc, #380]	; (8006f70 <HAL_DMA_Start_IT+0x20c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d02c      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a5d      	ldr	r2, [pc, #372]	; (8006f74 <HAL_DMA_Start_IT+0x210>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d027      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a5c      	ldr	r2, [pc, #368]	; (8006f78 <HAL_DMA_Start_IT+0x214>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d022      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a5a      	ldr	r2, [pc, #360]	; (8006f7c <HAL_DMA_Start_IT+0x218>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01d      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a59      	ldr	r2, [pc, #356]	; (8006f80 <HAL_DMA_Start_IT+0x21c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d018      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a57      	ldr	r2, [pc, #348]	; (8006f84 <HAL_DMA_Start_IT+0x220>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d013      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a56      	ldr	r2, [pc, #344]	; (8006f88 <HAL_DMA_Start_IT+0x224>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00e      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a54      	ldr	r2, [pc, #336]	; (8006f8c <HAL_DMA_Start_IT+0x228>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a53      	ldr	r2, [pc, #332]	; (8006f90 <HAL_DMA_Start_IT+0x22c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a51      	ldr	r2, [pc, #324]	; (8006f94 <HAL_DMA_Start_IT+0x230>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d108      	bne.n	8006e64 <HAL_DMA_Start_IT+0x100>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e007      	b.n	8006e74 <HAL_DMA_Start_IT+0x110>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0201 	bic.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f001 fe76 	bl	8008b6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a34      	ldr	r2, [pc, #208]	; (8006f58 <HAL_DMA_Start_IT+0x1f4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d04a      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a33      	ldr	r2, [pc, #204]	; (8006f5c <HAL_DMA_Start_IT+0x1f8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d045      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <HAL_DMA_Start_IT+0x1fc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d040      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a30      	ldr	r2, [pc, #192]	; (8006f64 <HAL_DMA_Start_IT+0x200>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d03b      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <HAL_DMA_Start_IT+0x204>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d036      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_DMA_Start_IT+0x208>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d031      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2b      	ldr	r2, [pc, #172]	; (8006f70 <HAL_DMA_Start_IT+0x20c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d02c      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <HAL_DMA_Start_IT+0x210>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d027      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a28      	ldr	r2, [pc, #160]	; (8006f78 <HAL_DMA_Start_IT+0x214>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d022      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a27      	ldr	r2, [pc, #156]	; (8006f7c <HAL_DMA_Start_IT+0x218>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d01d      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a25      	ldr	r2, [pc, #148]	; (8006f80 <HAL_DMA_Start_IT+0x21c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d018      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a24      	ldr	r2, [pc, #144]	; (8006f84 <HAL_DMA_Start_IT+0x220>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d013      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <HAL_DMA_Start_IT+0x224>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00e      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <HAL_DMA_Start_IT+0x228>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d009      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <HAL_DMA_Start_IT+0x22c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d004      	beq.n	8006f20 <HAL_DMA_Start_IT+0x1bc>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_DMA_Start_IT+0x230>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d101      	bne.n	8006f24 <HAL_DMA_Start_IT+0x1c0>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <HAL_DMA_Start_IT+0x1c2>
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d036      	beq.n	8006f98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f023 021e 	bic.w	r2, r3, #30
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0216 	orr.w	r2, r2, #22
 8006f3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03e      	beq.n	8006fc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0208 	orr.w	r2, r2, #8
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e035      	b.n	8006fc4 <HAL_DMA_Start_IT+0x260>
 8006f58:	40020010 	.word	0x40020010
 8006f5c:	40020028 	.word	0x40020028
 8006f60:	40020040 	.word	0x40020040
 8006f64:	40020058 	.word	0x40020058
 8006f68:	40020070 	.word	0x40020070
 8006f6c:	40020088 	.word	0x40020088
 8006f70:	400200a0 	.word	0x400200a0
 8006f74:	400200b8 	.word	0x400200b8
 8006f78:	40020410 	.word	0x40020410
 8006f7c:	40020428 	.word	0x40020428
 8006f80:	40020440 	.word	0x40020440
 8006f84:	40020458 	.word	0x40020458
 8006f88:	40020470 	.word	0x40020470
 8006f8c:	40020488 	.word	0x40020488
 8006f90:	400204a0 	.word	0x400204a0
 8006f94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f023 020e 	bic.w	r2, r3, #14
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 020a 	orr.w	r2, r2, #10
 8006faa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0204 	orr.w	r2, r2, #4
 8006fc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a83      	ldr	r2, [pc, #524]	; (80071d8 <HAL_DMA_Start_IT+0x474>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d072      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a82      	ldr	r2, [pc, #520]	; (80071dc <HAL_DMA_Start_IT+0x478>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d06d      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a80      	ldr	r2, [pc, #512]	; (80071e0 <HAL_DMA_Start_IT+0x47c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d068      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7f      	ldr	r2, [pc, #508]	; (80071e4 <HAL_DMA_Start_IT+0x480>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d063      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a7d      	ldr	r2, [pc, #500]	; (80071e8 <HAL_DMA_Start_IT+0x484>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d05e      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7c      	ldr	r2, [pc, #496]	; (80071ec <HAL_DMA_Start_IT+0x488>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d059      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7a      	ldr	r2, [pc, #488]	; (80071f0 <HAL_DMA_Start_IT+0x48c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d054      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a79      	ldr	r2, [pc, #484]	; (80071f4 <HAL_DMA_Start_IT+0x490>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d04f      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a77      	ldr	r2, [pc, #476]	; (80071f8 <HAL_DMA_Start_IT+0x494>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d04a      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a76      	ldr	r2, [pc, #472]	; (80071fc <HAL_DMA_Start_IT+0x498>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d045      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a74      	ldr	r2, [pc, #464]	; (8007200 <HAL_DMA_Start_IT+0x49c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d040      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a73      	ldr	r2, [pc, #460]	; (8007204 <HAL_DMA_Start_IT+0x4a0>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d03b      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a71      	ldr	r2, [pc, #452]	; (8007208 <HAL_DMA_Start_IT+0x4a4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d036      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a70      	ldr	r2, [pc, #448]	; (800720c <HAL_DMA_Start_IT+0x4a8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d031      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a6e      	ldr	r2, [pc, #440]	; (8007210 <HAL_DMA_Start_IT+0x4ac>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d02c      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a6d      	ldr	r2, [pc, #436]	; (8007214 <HAL_DMA_Start_IT+0x4b0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d027      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a6b      	ldr	r2, [pc, #428]	; (8007218 <HAL_DMA_Start_IT+0x4b4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d022      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6a      	ldr	r2, [pc, #424]	; (800721c <HAL_DMA_Start_IT+0x4b8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01d      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a68      	ldr	r2, [pc, #416]	; (8007220 <HAL_DMA_Start_IT+0x4bc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d018      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a67      	ldr	r2, [pc, #412]	; (8007224 <HAL_DMA_Start_IT+0x4c0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a65      	ldr	r2, [pc, #404]	; (8007228 <HAL_DMA_Start_IT+0x4c4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a64      	ldr	r2, [pc, #400]	; (800722c <HAL_DMA_Start_IT+0x4c8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a62      	ldr	r2, [pc, #392]	; (8007230 <HAL_DMA_Start_IT+0x4cc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_DMA_Start_IT+0x350>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a61      	ldr	r2, [pc, #388]	; (8007234 <HAL_DMA_Start_IT+0x4d0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d101      	bne.n	80070b8 <HAL_DMA_Start_IT+0x354>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <HAL_DMA_Start_IT+0x356>
 80070b8:	2300      	movs	r3, #0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01a      	beq.n	80070f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a37      	ldr	r2, [pc, #220]	; (80071d8 <HAL_DMA_Start_IT+0x474>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d04a      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a36      	ldr	r2, [pc, #216]	; (80071dc <HAL_DMA_Start_IT+0x478>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d045      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a34      	ldr	r2, [pc, #208]	; (80071e0 <HAL_DMA_Start_IT+0x47c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d040      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a33      	ldr	r2, [pc, #204]	; (80071e4 <HAL_DMA_Start_IT+0x480>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d03b      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a31      	ldr	r2, [pc, #196]	; (80071e8 <HAL_DMA_Start_IT+0x484>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d036      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a30      	ldr	r2, [pc, #192]	; (80071ec <HAL_DMA_Start_IT+0x488>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d031      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2e      	ldr	r2, [pc, #184]	; (80071f0 <HAL_DMA_Start_IT+0x48c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d02c      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <HAL_DMA_Start_IT+0x490>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d027      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2b      	ldr	r2, [pc, #172]	; (80071f8 <HAL_DMA_Start_IT+0x494>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d022      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <HAL_DMA_Start_IT+0x498>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d01d      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a28      	ldr	r2, [pc, #160]	; (8007200 <HAL_DMA_Start_IT+0x49c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d018      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <HAL_DMA_Start_IT+0x4a0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_DMA_Start_IT+0x4a4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00e      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a24      	ldr	r2, [pc, #144]	; (800720c <HAL_DMA_Start_IT+0x4a8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a22      	ldr	r2, [pc, #136]	; (8007210 <HAL_DMA_Start_IT+0x4ac>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_DMA_Start_IT+0x430>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <HAL_DMA_Start_IT+0x4b0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d108      	bne.n	80071a6 <HAL_DMA_Start_IT+0x442>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e012      	b.n	80071cc <HAL_DMA_Start_IT+0x468>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0201 	orr.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	e009      	b.n	80071cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40020010 	.word	0x40020010
 80071dc:	40020028 	.word	0x40020028
 80071e0:	40020040 	.word	0x40020040
 80071e4:	40020058 	.word	0x40020058
 80071e8:	40020070 	.word	0x40020070
 80071ec:	40020088 	.word	0x40020088
 80071f0:	400200a0 	.word	0x400200a0
 80071f4:	400200b8 	.word	0x400200b8
 80071f8:	40020410 	.word	0x40020410
 80071fc:	40020428 	.word	0x40020428
 8007200:	40020440 	.word	0x40020440
 8007204:	40020458 	.word	0x40020458
 8007208:	40020470 	.word	0x40020470
 800720c:	40020488 	.word	0x40020488
 8007210:	400204a0 	.word	0x400204a0
 8007214:	400204b8 	.word	0x400204b8
 8007218:	58025408 	.word	0x58025408
 800721c:	5802541c 	.word	0x5802541c
 8007220:	58025430 	.word	0x58025430
 8007224:	58025444 	.word	0x58025444
 8007228:	58025458 	.word	0x58025458
 800722c:	5802546c 	.word	0x5802546c
 8007230:	58025480 	.word	0x58025480
 8007234:	58025494 	.word	0x58025494

08007238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007240:	f7fd f90c 	bl	800445c <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e2dc      	b.n	800780a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d008      	beq.n	800726e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e2cd      	b.n	800780a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a76      	ldr	r2, [pc, #472]	; (800744c <HAL_DMA_Abort+0x214>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d04a      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a74      	ldr	r2, [pc, #464]	; (8007450 <HAL_DMA_Abort+0x218>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d045      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a73      	ldr	r2, [pc, #460]	; (8007454 <HAL_DMA_Abort+0x21c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d040      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a71      	ldr	r2, [pc, #452]	; (8007458 <HAL_DMA_Abort+0x220>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d03b      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a70      	ldr	r2, [pc, #448]	; (800745c <HAL_DMA_Abort+0x224>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d036      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6e      	ldr	r2, [pc, #440]	; (8007460 <HAL_DMA_Abort+0x228>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d031      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6d      	ldr	r2, [pc, #436]	; (8007464 <HAL_DMA_Abort+0x22c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d02c      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6b      	ldr	r2, [pc, #428]	; (8007468 <HAL_DMA_Abort+0x230>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d027      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6a      	ldr	r2, [pc, #424]	; (800746c <HAL_DMA_Abort+0x234>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a68      	ldr	r2, [pc, #416]	; (8007470 <HAL_DMA_Abort+0x238>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a67      	ldr	r2, [pc, #412]	; (8007474 <HAL_DMA_Abort+0x23c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d018      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a65      	ldr	r2, [pc, #404]	; (8007478 <HAL_DMA_Abort+0x240>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a64      	ldr	r2, [pc, #400]	; (800747c <HAL_DMA_Abort+0x244>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a62      	ldr	r2, [pc, #392]	; (8007480 <HAL_DMA_Abort+0x248>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a61      	ldr	r2, [pc, #388]	; (8007484 <HAL_DMA_Abort+0x24c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <HAL_DMA_Abort+0xd6>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5f      	ldr	r2, [pc, #380]	; (8007488 <HAL_DMA_Abort+0x250>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d101      	bne.n	8007312 <HAL_DMA_Abort+0xda>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <HAL_DMA_Abort+0xdc>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 021e 	bic.w	r2, r2, #30
 8007326:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695a      	ldr	r2, [r3, #20]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007336:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e00a      	b.n	8007356 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 020e 	bic.w	r2, r2, #14
 800734e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a3c      	ldr	r2, [pc, #240]	; (800744c <HAL_DMA_Abort+0x214>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d072      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a3a      	ldr	r2, [pc, #232]	; (8007450 <HAL_DMA_Abort+0x218>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d06d      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a39      	ldr	r2, [pc, #228]	; (8007454 <HAL_DMA_Abort+0x21c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d068      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a37      	ldr	r2, [pc, #220]	; (8007458 <HAL_DMA_Abort+0x220>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d063      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a36      	ldr	r2, [pc, #216]	; (800745c <HAL_DMA_Abort+0x224>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d05e      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a34      	ldr	r2, [pc, #208]	; (8007460 <HAL_DMA_Abort+0x228>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d059      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a33      	ldr	r2, [pc, #204]	; (8007464 <HAL_DMA_Abort+0x22c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d054      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a31      	ldr	r2, [pc, #196]	; (8007468 <HAL_DMA_Abort+0x230>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d04f      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a30      	ldr	r2, [pc, #192]	; (800746c <HAL_DMA_Abort+0x234>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d04a      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2e      	ldr	r2, [pc, #184]	; (8007470 <HAL_DMA_Abort+0x238>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d045      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <HAL_DMA_Abort+0x23c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d040      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2b      	ldr	r2, [pc, #172]	; (8007478 <HAL_DMA_Abort+0x240>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d03b      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2a      	ldr	r2, [pc, #168]	; (800747c <HAL_DMA_Abort+0x244>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d036      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a28      	ldr	r2, [pc, #160]	; (8007480 <HAL_DMA_Abort+0x248>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d031      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a27      	ldr	r2, [pc, #156]	; (8007484 <HAL_DMA_Abort+0x24c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d02c      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a25      	ldr	r2, [pc, #148]	; (8007488 <HAL_DMA_Abort+0x250>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d027      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a24      	ldr	r2, [pc, #144]	; (800748c <HAL_DMA_Abort+0x254>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d022      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a22      	ldr	r2, [pc, #136]	; (8007490 <HAL_DMA_Abort+0x258>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d01d      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a21      	ldr	r2, [pc, #132]	; (8007494 <HAL_DMA_Abort+0x25c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d018      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <HAL_DMA_Abort+0x260>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d013      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1e      	ldr	r2, [pc, #120]	; (800749c <HAL_DMA_Abort+0x264>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00e      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1c      	ldr	r2, [pc, #112]	; (80074a0 <HAL_DMA_Abort+0x268>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d009      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1b      	ldr	r2, [pc, #108]	; (80074a4 <HAL_DMA_Abort+0x26c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d004      	beq.n	8007446 <HAL_DMA_Abort+0x20e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <HAL_DMA_Abort+0x270>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d132      	bne.n	80074ac <HAL_DMA_Abort+0x274>
 8007446:	2301      	movs	r3, #1
 8007448:	e031      	b.n	80074ae <HAL_DMA_Abort+0x276>
 800744a:	bf00      	nop
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	58025408 	.word	0x58025408
 8007490:	5802541c 	.word	0x5802541c
 8007494:	58025430 	.word	0x58025430
 8007498:	58025444 	.word	0x58025444
 800749c:	58025458 	.word	0x58025458
 80074a0:	5802546c 	.word	0x5802546c
 80074a4:	58025480 	.word	0x58025480
 80074a8:	58025494 	.word	0x58025494
 80074ac:	2300      	movs	r3, #0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a6d      	ldr	r2, [pc, #436]	; (800767c <HAL_DMA_Abort+0x444>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d04a      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a6b      	ldr	r2, [pc, #428]	; (8007680 <HAL_DMA_Abort+0x448>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d045      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a6a      	ldr	r2, [pc, #424]	; (8007684 <HAL_DMA_Abort+0x44c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d040      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a68      	ldr	r2, [pc, #416]	; (8007688 <HAL_DMA_Abort+0x450>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d03b      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a67      	ldr	r2, [pc, #412]	; (800768c <HAL_DMA_Abort+0x454>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d036      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a65      	ldr	r2, [pc, #404]	; (8007690 <HAL_DMA_Abort+0x458>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d031      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a64      	ldr	r2, [pc, #400]	; (8007694 <HAL_DMA_Abort+0x45c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d02c      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a62      	ldr	r2, [pc, #392]	; (8007698 <HAL_DMA_Abort+0x460>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d027      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a61      	ldr	r2, [pc, #388]	; (800769c <HAL_DMA_Abort+0x464>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d022      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a5f      	ldr	r2, [pc, #380]	; (80076a0 <HAL_DMA_Abort+0x468>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d01d      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a5e      	ldr	r2, [pc, #376]	; (80076a4 <HAL_DMA_Abort+0x46c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d018      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a5c      	ldr	r2, [pc, #368]	; (80076a8 <HAL_DMA_Abort+0x470>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a5b      	ldr	r2, [pc, #364]	; (80076ac <HAL_DMA_Abort+0x474>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00e      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a59      	ldr	r2, [pc, #356]	; (80076b0 <HAL_DMA_Abort+0x478>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d009      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a58      	ldr	r2, [pc, #352]	; (80076b4 <HAL_DMA_Abort+0x47c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d004      	beq.n	8007562 <HAL_DMA_Abort+0x32a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a56      	ldr	r2, [pc, #344]	; (80076b8 <HAL_DMA_Abort+0x480>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d108      	bne.n	8007574 <HAL_DMA_Abort+0x33c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e007      	b.n	8007584 <HAL_DMA_Abort+0x34c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007584:	e013      	b.n	80075ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007586:	f7fc ff69 	bl	800445c <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b05      	cmp	r3, #5
 8007592:	d90c      	bls.n	80075ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2203      	movs	r2, #3
 800759e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e12d      	b.n	800780a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e5      	bne.n	8007586 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a2f      	ldr	r2, [pc, #188]	; (800767c <HAL_DMA_Abort+0x444>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d04a      	beq.n	800765a <HAL_DMA_Abort+0x422>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2d      	ldr	r2, [pc, #180]	; (8007680 <HAL_DMA_Abort+0x448>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d045      	beq.n	800765a <HAL_DMA_Abort+0x422>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a2c      	ldr	r2, [pc, #176]	; (8007684 <HAL_DMA_Abort+0x44c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d040      	beq.n	800765a <HAL_DMA_Abort+0x422>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2a      	ldr	r2, [pc, #168]	; (8007688 <HAL_DMA_Abort+0x450>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d03b      	beq.n	800765a <HAL_DMA_Abort+0x422>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a29      	ldr	r2, [pc, #164]	; (800768c <HAL_DMA_Abort+0x454>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d036      	beq.n	800765a <HAL_DMA_Abort+0x422>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a27      	ldr	r2, [pc, #156]	; (8007690 <HAL_DMA_Abort+0x458>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d031      	beq.n	800765a <HAL_DMA_Abort+0x422>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a26      	ldr	r2, [pc, #152]	; (8007694 <HAL_DMA_Abort+0x45c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d02c      	beq.n	800765a <HAL_DMA_Abort+0x422>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a24      	ldr	r2, [pc, #144]	; (8007698 <HAL_DMA_Abort+0x460>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d027      	beq.n	800765a <HAL_DMA_Abort+0x422>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a23      	ldr	r2, [pc, #140]	; (800769c <HAL_DMA_Abort+0x464>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_DMA_Abort+0x422>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <HAL_DMA_Abort+0x468>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01d      	beq.n	800765a <HAL_DMA_Abort+0x422>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a20      	ldr	r2, [pc, #128]	; (80076a4 <HAL_DMA_Abort+0x46c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_DMA_Abort+0x422>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1e      	ldr	r2, [pc, #120]	; (80076a8 <HAL_DMA_Abort+0x470>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_DMA_Abort+0x422>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_DMA_Abort+0x474>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_DMA_Abort+0x422>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <HAL_DMA_Abort+0x478>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_DMA_Abort+0x422>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_DMA_Abort+0x47c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_DMA_Abort+0x422>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <HAL_DMA_Abort+0x480>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <HAL_DMA_Abort+0x426>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <HAL_DMA_Abort+0x428>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d02b      	beq.n	80076bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007668:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	223f      	movs	r2, #63	; 0x3f
 8007674:	409a      	lsls	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	609a      	str	r2, [r3, #8]
 800767a:	e02a      	b.n	80076d2 <HAL_DMA_Abort+0x49a>
 800767c:	40020010 	.word	0x40020010
 8007680:	40020028 	.word	0x40020028
 8007684:	40020040 	.word	0x40020040
 8007688:	40020058 	.word	0x40020058
 800768c:	40020070 	.word	0x40020070
 8007690:	40020088 	.word	0x40020088
 8007694:	400200a0 	.word	0x400200a0
 8007698:	400200b8 	.word	0x400200b8
 800769c:	40020410 	.word	0x40020410
 80076a0:	40020428 	.word	0x40020428
 80076a4:	40020440 	.word	0x40020440
 80076a8:	40020458 	.word	0x40020458
 80076ac:	40020470 	.word	0x40020470
 80076b0:	40020488 	.word	0x40020488
 80076b4:	400204a0 	.word	0x400204a0
 80076b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	2201      	movs	r2, #1
 80076cc:	409a      	lsls	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a4f      	ldr	r2, [pc, #316]	; (8007814 <HAL_DMA_Abort+0x5dc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d072      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a4d      	ldr	r2, [pc, #308]	; (8007818 <HAL_DMA_Abort+0x5e0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d06d      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a4c      	ldr	r2, [pc, #304]	; (800781c <HAL_DMA_Abort+0x5e4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d068      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a4a      	ldr	r2, [pc, #296]	; (8007820 <HAL_DMA_Abort+0x5e8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d063      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a49      	ldr	r2, [pc, #292]	; (8007824 <HAL_DMA_Abort+0x5ec>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d05e      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a47      	ldr	r2, [pc, #284]	; (8007828 <HAL_DMA_Abort+0x5f0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d059      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a46      	ldr	r2, [pc, #280]	; (800782c <HAL_DMA_Abort+0x5f4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d054      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a44      	ldr	r2, [pc, #272]	; (8007830 <HAL_DMA_Abort+0x5f8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d04f      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a43      	ldr	r2, [pc, #268]	; (8007834 <HAL_DMA_Abort+0x5fc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d04a      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a41      	ldr	r2, [pc, #260]	; (8007838 <HAL_DMA_Abort+0x600>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d045      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a40      	ldr	r2, [pc, #256]	; (800783c <HAL_DMA_Abort+0x604>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d040      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a3e      	ldr	r2, [pc, #248]	; (8007840 <HAL_DMA_Abort+0x608>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d03b      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a3d      	ldr	r2, [pc, #244]	; (8007844 <HAL_DMA_Abort+0x60c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d036      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a3b      	ldr	r2, [pc, #236]	; (8007848 <HAL_DMA_Abort+0x610>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d031      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a3a      	ldr	r2, [pc, #232]	; (800784c <HAL_DMA_Abort+0x614>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d02c      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a38      	ldr	r2, [pc, #224]	; (8007850 <HAL_DMA_Abort+0x618>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d027      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a37      	ldr	r2, [pc, #220]	; (8007854 <HAL_DMA_Abort+0x61c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d022      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a35      	ldr	r2, [pc, #212]	; (8007858 <HAL_DMA_Abort+0x620>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01d      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a34      	ldr	r2, [pc, #208]	; (800785c <HAL_DMA_Abort+0x624>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d018      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a32      	ldr	r2, [pc, #200]	; (8007860 <HAL_DMA_Abort+0x628>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a31      	ldr	r2, [pc, #196]	; (8007864 <HAL_DMA_Abort+0x62c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00e      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <HAL_DMA_Abort+0x630>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2e      	ldr	r2, [pc, #184]	; (800786c <HAL_DMA_Abort+0x634>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d004      	beq.n	80077c2 <HAL_DMA_Abort+0x58a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2c      	ldr	r2, [pc, #176]	; (8007870 <HAL_DMA_Abort+0x638>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d101      	bne.n	80077c6 <HAL_DMA_Abort+0x58e>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <HAL_DMA_Abort+0x590>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40020010 	.word	0x40020010
 8007818:	40020028 	.word	0x40020028
 800781c:	40020040 	.word	0x40020040
 8007820:	40020058 	.word	0x40020058
 8007824:	40020070 	.word	0x40020070
 8007828:	40020088 	.word	0x40020088
 800782c:	400200a0 	.word	0x400200a0
 8007830:	400200b8 	.word	0x400200b8
 8007834:	40020410 	.word	0x40020410
 8007838:	40020428 	.word	0x40020428
 800783c:	40020440 	.word	0x40020440
 8007840:	40020458 	.word	0x40020458
 8007844:	40020470 	.word	0x40020470
 8007848:	40020488 	.word	0x40020488
 800784c:	400204a0 	.word	0x400204a0
 8007850:	400204b8 	.word	0x400204b8
 8007854:	58025408 	.word	0x58025408
 8007858:	5802541c 	.word	0x5802541c
 800785c:	58025430 	.word	0x58025430
 8007860:	58025444 	.word	0x58025444
 8007864:	58025458 	.word	0x58025458
 8007868:	5802546c 	.word	0x5802546c
 800786c:	58025480 	.word	0x58025480
 8007870:	58025494 	.word	0x58025494

08007874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e237      	b.n	8007cf6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d004      	beq.n	800789c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e22c      	b.n	8007cf6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a5c      	ldr	r2, [pc, #368]	; (8007a14 <HAL_DMA_Abort_IT+0x1a0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d04a      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a5b      	ldr	r2, [pc, #364]	; (8007a18 <HAL_DMA_Abort_IT+0x1a4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d045      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a59      	ldr	r2, [pc, #356]	; (8007a1c <HAL_DMA_Abort_IT+0x1a8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d040      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a58      	ldr	r2, [pc, #352]	; (8007a20 <HAL_DMA_Abort_IT+0x1ac>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d03b      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a56      	ldr	r2, [pc, #344]	; (8007a24 <HAL_DMA_Abort_IT+0x1b0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d036      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a55      	ldr	r2, [pc, #340]	; (8007a28 <HAL_DMA_Abort_IT+0x1b4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d031      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a53      	ldr	r2, [pc, #332]	; (8007a2c <HAL_DMA_Abort_IT+0x1b8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d02c      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a52      	ldr	r2, [pc, #328]	; (8007a30 <HAL_DMA_Abort_IT+0x1bc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d027      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a50      	ldr	r2, [pc, #320]	; (8007a34 <HAL_DMA_Abort_IT+0x1c0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d022      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a4f      	ldr	r2, [pc, #316]	; (8007a38 <HAL_DMA_Abort_IT+0x1c4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d01d      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a4d      	ldr	r2, [pc, #308]	; (8007a3c <HAL_DMA_Abort_IT+0x1c8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d018      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a4c      	ldr	r2, [pc, #304]	; (8007a40 <HAL_DMA_Abort_IT+0x1cc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a4a      	ldr	r2, [pc, #296]	; (8007a44 <HAL_DMA_Abort_IT+0x1d0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a49      	ldr	r2, [pc, #292]	; (8007a48 <HAL_DMA_Abort_IT+0x1d4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a47      	ldr	r2, [pc, #284]	; (8007a4c <HAL_DMA_Abort_IT+0x1d8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_DMA_Abort_IT+0xc8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a46      	ldr	r2, [pc, #280]	; (8007a50 <HAL_DMA_Abort_IT+0x1dc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d101      	bne.n	8007940 <HAL_DMA_Abort_IT+0xcc>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <HAL_DMA_Abort_IT+0xce>
 8007940:	2300      	movs	r3, #0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8086 	beq.w	8007a54 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2204      	movs	r2, #4
 800794c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a2f      	ldr	r2, [pc, #188]	; (8007a14 <HAL_DMA_Abort_IT+0x1a0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d04a      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a2e      	ldr	r2, [pc, #184]	; (8007a18 <HAL_DMA_Abort_IT+0x1a4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d045      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a2c      	ldr	r2, [pc, #176]	; (8007a1c <HAL_DMA_Abort_IT+0x1a8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d040      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a2b      	ldr	r2, [pc, #172]	; (8007a20 <HAL_DMA_Abort_IT+0x1ac>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d03b      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a29      	ldr	r2, [pc, #164]	; (8007a24 <HAL_DMA_Abort_IT+0x1b0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d036      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a28      	ldr	r2, [pc, #160]	; (8007a28 <HAL_DMA_Abort_IT+0x1b4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d031      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a26      	ldr	r2, [pc, #152]	; (8007a2c <HAL_DMA_Abort_IT+0x1b8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d02c      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a25      	ldr	r2, [pc, #148]	; (8007a30 <HAL_DMA_Abort_IT+0x1bc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d027      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a23      	ldr	r2, [pc, #140]	; (8007a34 <HAL_DMA_Abort_IT+0x1c0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d022      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a22      	ldr	r2, [pc, #136]	; (8007a38 <HAL_DMA_Abort_IT+0x1c4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d01d      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <HAL_DMA_Abort_IT+0x1c8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d018      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <HAL_DMA_Abort_IT+0x1cc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d013      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <HAL_DMA_Abort_IT+0x1d0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00e      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <HAL_DMA_Abort_IT+0x1d4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d009      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1a      	ldr	r2, [pc, #104]	; (8007a4c <HAL_DMA_Abort_IT+0x1d8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x17c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a19      	ldr	r2, [pc, #100]	; (8007a50 <HAL_DMA_Abort_IT+0x1dc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d108      	bne.n	8007a02 <HAL_DMA_Abort_IT+0x18e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e178      	b.n	8007cf4 <HAL_DMA_Abort_IT+0x480>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e16f      	b.n	8007cf4 <HAL_DMA_Abort_IT+0x480>
 8007a14:	40020010 	.word	0x40020010
 8007a18:	40020028 	.word	0x40020028
 8007a1c:	40020040 	.word	0x40020040
 8007a20:	40020058 	.word	0x40020058
 8007a24:	40020070 	.word	0x40020070
 8007a28:	40020088 	.word	0x40020088
 8007a2c:	400200a0 	.word	0x400200a0
 8007a30:	400200b8 	.word	0x400200b8
 8007a34:	40020410 	.word	0x40020410
 8007a38:	40020428 	.word	0x40020428
 8007a3c:	40020440 	.word	0x40020440
 8007a40:	40020458 	.word	0x40020458
 8007a44:	40020470 	.word	0x40020470
 8007a48:	40020488 	.word	0x40020488
 8007a4c:	400204a0 	.word	0x400204a0
 8007a50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 020e 	bic.w	r2, r2, #14
 8007a62:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a6c      	ldr	r2, [pc, #432]	; (8007c1c <HAL_DMA_Abort_IT+0x3a8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d04a      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a6b      	ldr	r2, [pc, #428]	; (8007c20 <HAL_DMA_Abort_IT+0x3ac>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d045      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a69      	ldr	r2, [pc, #420]	; (8007c24 <HAL_DMA_Abort_IT+0x3b0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d040      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a68      	ldr	r2, [pc, #416]	; (8007c28 <HAL_DMA_Abort_IT+0x3b4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d03b      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a66      	ldr	r2, [pc, #408]	; (8007c2c <HAL_DMA_Abort_IT+0x3b8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d036      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a65      	ldr	r2, [pc, #404]	; (8007c30 <HAL_DMA_Abort_IT+0x3bc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d031      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a63      	ldr	r2, [pc, #396]	; (8007c34 <HAL_DMA_Abort_IT+0x3c0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d02c      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a62      	ldr	r2, [pc, #392]	; (8007c38 <HAL_DMA_Abort_IT+0x3c4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d027      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a60      	ldr	r2, [pc, #384]	; (8007c3c <HAL_DMA_Abort_IT+0x3c8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d022      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a5f      	ldr	r2, [pc, #380]	; (8007c40 <HAL_DMA_Abort_IT+0x3cc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d01d      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a5d      	ldr	r2, [pc, #372]	; (8007c44 <HAL_DMA_Abort_IT+0x3d0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d018      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a5c      	ldr	r2, [pc, #368]	; (8007c48 <HAL_DMA_Abort_IT+0x3d4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d013      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a5a      	ldr	r2, [pc, #360]	; (8007c4c <HAL_DMA_Abort_IT+0x3d8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00e      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a59      	ldr	r2, [pc, #356]	; (8007c50 <HAL_DMA_Abort_IT+0x3dc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d009      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a57      	ldr	r2, [pc, #348]	; (8007c54 <HAL_DMA_Abort_IT+0x3e0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d004      	beq.n	8007b04 <HAL_DMA_Abort_IT+0x290>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a56      	ldr	r2, [pc, #344]	; (8007c58 <HAL_DMA_Abort_IT+0x3e4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d108      	bne.n	8007b16 <HAL_DMA_Abort_IT+0x2a2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e007      	b.n	8007b26 <HAL_DMA_Abort_IT+0x2b2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0201 	bic.w	r2, r2, #1
 8007b24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a3c      	ldr	r2, [pc, #240]	; (8007c1c <HAL_DMA_Abort_IT+0x3a8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d072      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a3a      	ldr	r2, [pc, #232]	; (8007c20 <HAL_DMA_Abort_IT+0x3ac>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d06d      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a39      	ldr	r2, [pc, #228]	; (8007c24 <HAL_DMA_Abort_IT+0x3b0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d068      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a37      	ldr	r2, [pc, #220]	; (8007c28 <HAL_DMA_Abort_IT+0x3b4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d063      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a36      	ldr	r2, [pc, #216]	; (8007c2c <HAL_DMA_Abort_IT+0x3b8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d05e      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a34      	ldr	r2, [pc, #208]	; (8007c30 <HAL_DMA_Abort_IT+0x3bc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d059      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a33      	ldr	r2, [pc, #204]	; (8007c34 <HAL_DMA_Abort_IT+0x3c0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d054      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a31      	ldr	r2, [pc, #196]	; (8007c38 <HAL_DMA_Abort_IT+0x3c4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d04f      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a30      	ldr	r2, [pc, #192]	; (8007c3c <HAL_DMA_Abort_IT+0x3c8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d04a      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a2e      	ldr	r2, [pc, #184]	; (8007c40 <HAL_DMA_Abort_IT+0x3cc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d045      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a2d      	ldr	r2, [pc, #180]	; (8007c44 <HAL_DMA_Abort_IT+0x3d0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d040      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a2b      	ldr	r2, [pc, #172]	; (8007c48 <HAL_DMA_Abort_IT+0x3d4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d03b      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <HAL_DMA_Abort_IT+0x3d8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d036      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a28      	ldr	r2, [pc, #160]	; (8007c50 <HAL_DMA_Abort_IT+0x3dc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d031      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a27      	ldr	r2, [pc, #156]	; (8007c54 <HAL_DMA_Abort_IT+0x3e0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d02c      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a25      	ldr	r2, [pc, #148]	; (8007c58 <HAL_DMA_Abort_IT+0x3e4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d027      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <HAL_DMA_Abort_IT+0x3e8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a22      	ldr	r2, [pc, #136]	; (8007c60 <HAL_DMA_Abort_IT+0x3ec>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d01d      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <HAL_DMA_Abort_IT+0x3f0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d018      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1f      	ldr	r2, [pc, #124]	; (8007c68 <HAL_DMA_Abort_IT+0x3f4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1e      	ldr	r2, [pc, #120]	; (8007c6c <HAL_DMA_Abort_IT+0x3f8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00e      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <HAL_DMA_Abort_IT+0x3fc>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a1b      	ldr	r2, [pc, #108]	; (8007c74 <HAL_DMA_Abort_IT+0x400>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_DMA_Abort_IT+0x3a2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a19      	ldr	r2, [pc, #100]	; (8007c78 <HAL_DMA_Abort_IT+0x404>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d132      	bne.n	8007c7c <HAL_DMA_Abort_IT+0x408>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e031      	b.n	8007c7e <HAL_DMA_Abort_IT+0x40a>
 8007c1a:	bf00      	nop
 8007c1c:	40020010 	.word	0x40020010
 8007c20:	40020028 	.word	0x40020028
 8007c24:	40020040 	.word	0x40020040
 8007c28:	40020058 	.word	0x40020058
 8007c2c:	40020070 	.word	0x40020070
 8007c30:	40020088 	.word	0x40020088
 8007c34:	400200a0 	.word	0x400200a0
 8007c38:	400200b8 	.word	0x400200b8
 8007c3c:	40020410 	.word	0x40020410
 8007c40:	40020428 	.word	0x40020428
 8007c44:	40020440 	.word	0x40020440
 8007c48:	40020458 	.word	0x40020458
 8007c4c:	40020470 	.word	0x40020470
 8007c50:	40020488 	.word	0x40020488
 8007c54:	400204a0 	.word	0x400204a0
 8007c58:	400204b8 	.word	0x400204b8
 8007c5c:	58025408 	.word	0x58025408
 8007c60:	5802541c 	.word	0x5802541c
 8007c64:	58025430 	.word	0x58025430
 8007c68:	58025444 	.word	0x58025444
 8007c6c:	58025458 	.word	0x58025458
 8007c70:	5802546c 	.word	0x5802546c
 8007c74:	58025480 	.word	0x58025480
 8007c78:	58025494 	.word	0x58025494
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d028      	beq.n	8007cd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop

08007d00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d0c:	4b67      	ldr	r3, [pc, #412]	; (8007eac <HAL_DMA_IRQHandler+0x1ac>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a67      	ldr	r2, [pc, #412]	; (8007eb0 <HAL_DMA_IRQHandler+0x1b0>)
 8007d12:	fba2 2303 	umull	r2, r3, r2, r3
 8007d16:	0a9b      	lsrs	r3, r3, #10
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a5f      	ldr	r2, [pc, #380]	; (8007eb4 <HAL_DMA_IRQHandler+0x1b4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d04a      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a5d      	ldr	r2, [pc, #372]	; (8007eb8 <HAL_DMA_IRQHandler+0x1b8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d045      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a5c      	ldr	r2, [pc, #368]	; (8007ebc <HAL_DMA_IRQHandler+0x1bc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d040      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a5a      	ldr	r2, [pc, #360]	; (8007ec0 <HAL_DMA_IRQHandler+0x1c0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d03b      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a59      	ldr	r2, [pc, #356]	; (8007ec4 <HAL_DMA_IRQHandler+0x1c4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d036      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a57      	ldr	r2, [pc, #348]	; (8007ec8 <HAL_DMA_IRQHandler+0x1c8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d031      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a56      	ldr	r2, [pc, #344]	; (8007ecc <HAL_DMA_IRQHandler+0x1cc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d02c      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a54      	ldr	r2, [pc, #336]	; (8007ed0 <HAL_DMA_IRQHandler+0x1d0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d027      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a53      	ldr	r2, [pc, #332]	; (8007ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d022      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a51      	ldr	r2, [pc, #324]	; (8007ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01d      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a50      	ldr	r2, [pc, #320]	; (8007edc <HAL_DMA_IRQHandler+0x1dc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d018      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a4e      	ldr	r2, [pc, #312]	; (8007ee0 <HAL_DMA_IRQHandler+0x1e0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a4d      	ldr	r2, [pc, #308]	; (8007ee4 <HAL_DMA_IRQHandler+0x1e4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00e      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a4b      	ldr	r2, [pc, #300]	; (8007ee8 <HAL_DMA_IRQHandler+0x1e8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a4a      	ldr	r2, [pc, #296]	; (8007eec <HAL_DMA_IRQHandler+0x1ec>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d004      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xd2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a48      	ldr	r2, [pc, #288]	; (8007ef0 <HAL_DMA_IRQHandler+0x1f0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d101      	bne.n	8007dd6 <HAL_DMA_IRQHandler+0xd6>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <HAL_DMA_IRQHandler+0xd8>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 842b 	beq.w	8008634 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	2208      	movs	r2, #8
 8007de8:	409a      	lsls	r2, r3
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80a2 	beq.w	8007f38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2e      	ldr	r2, [pc, #184]	; (8007eb4 <HAL_DMA_IRQHandler+0x1b4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d04a      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a2d      	ldr	r2, [pc, #180]	; (8007eb8 <HAL_DMA_IRQHandler+0x1b8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d045      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a2b      	ldr	r2, [pc, #172]	; (8007ebc <HAL_DMA_IRQHandler+0x1bc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d040      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <HAL_DMA_IRQHandler+0x1c0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d03b      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a28      	ldr	r2, [pc, #160]	; (8007ec4 <HAL_DMA_IRQHandler+0x1c4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d036      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <HAL_DMA_IRQHandler+0x1c8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d031      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a25      	ldr	r2, [pc, #148]	; (8007ecc <HAL_DMA_IRQHandler+0x1cc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d02c      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <HAL_DMA_IRQHandler+0x1d0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d027      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a22      	ldr	r2, [pc, #136]	; (8007ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d022      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a21      	ldr	r2, [pc, #132]	; (8007ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d01d      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a1f      	ldr	r2, [pc, #124]	; (8007edc <HAL_DMA_IRQHandler+0x1dc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d018      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <HAL_DMA_IRQHandler+0x1e0>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d013      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_DMA_IRQHandler+0x1e4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00e      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_DMA_IRQHandler+0x1e8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d009      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a19      	ldr	r2, [pc, #100]	; (8007eec <HAL_DMA_IRQHandler+0x1ec>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d004      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x194>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_DMA_IRQHandler+0x1f0>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d12f      	bne.n	8007ef4 <HAL_DMA_IRQHandler+0x1f4>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bf14      	ite	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	2300      	moveq	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	e02e      	b.n	8007f08 <HAL_DMA_IRQHandler+0x208>
 8007eaa:	bf00      	nop
 8007eac:	2400008c 	.word	0x2400008c
 8007eb0:	1b4e81b5 	.word	0x1b4e81b5
 8007eb4:	40020010 	.word	0x40020010
 8007eb8:	40020028 	.word	0x40020028
 8007ebc:	40020040 	.word	0x40020040
 8007ec0:	40020058 	.word	0x40020058
 8007ec4:	40020070 	.word	0x40020070
 8007ec8:	40020088 	.word	0x40020088
 8007ecc:	400200a0 	.word	0x400200a0
 8007ed0:	400200b8 	.word	0x400200b8
 8007ed4:	40020410 	.word	0x40020410
 8007ed8:	40020428 	.word	0x40020428
 8007edc:	40020440 	.word	0x40020440
 8007ee0:	40020458 	.word	0x40020458
 8007ee4:	40020470 	.word	0x40020470
 8007ee8:	40020488 	.word	0x40020488
 8007eec:	400204a0 	.word	0x400204a0
 8007ef0:	400204b8 	.word	0x400204b8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bf14      	ite	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	2300      	moveq	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d015      	beq.n	8007f38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0204 	bic.w	r2, r2, #4
 8007f1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2208      	movs	r2, #8
 8007f26:	409a      	lsls	r2, r3
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	f043 0201 	orr.w	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3c:	f003 031f 	and.w	r3, r3, #31
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	fa22 f303 	lsr.w	r3, r2, r3
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d06e      	beq.n	800802c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a69      	ldr	r2, [pc, #420]	; (80080f8 <HAL_DMA_IRQHandler+0x3f8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d04a      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a67      	ldr	r2, [pc, #412]	; (80080fc <HAL_DMA_IRQHandler+0x3fc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d045      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a66      	ldr	r2, [pc, #408]	; (8008100 <HAL_DMA_IRQHandler+0x400>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d040      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a64      	ldr	r2, [pc, #400]	; (8008104 <HAL_DMA_IRQHandler+0x404>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d03b      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a63      	ldr	r2, [pc, #396]	; (8008108 <HAL_DMA_IRQHandler+0x408>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d036      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a61      	ldr	r2, [pc, #388]	; (800810c <HAL_DMA_IRQHandler+0x40c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d031      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a60      	ldr	r2, [pc, #384]	; (8008110 <HAL_DMA_IRQHandler+0x410>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d02c      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a5e      	ldr	r2, [pc, #376]	; (8008114 <HAL_DMA_IRQHandler+0x414>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d027      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a5d      	ldr	r2, [pc, #372]	; (8008118 <HAL_DMA_IRQHandler+0x418>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d022      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a5b      	ldr	r2, [pc, #364]	; (800811c <HAL_DMA_IRQHandler+0x41c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d01d      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a5a      	ldr	r2, [pc, #360]	; (8008120 <HAL_DMA_IRQHandler+0x420>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d018      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a58      	ldr	r2, [pc, #352]	; (8008124 <HAL_DMA_IRQHandler+0x424>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a57      	ldr	r2, [pc, #348]	; (8008128 <HAL_DMA_IRQHandler+0x428>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00e      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a55      	ldr	r2, [pc, #340]	; (800812c <HAL_DMA_IRQHandler+0x42c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d009      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a54      	ldr	r2, [pc, #336]	; (8008130 <HAL_DMA_IRQHandler+0x430>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d004      	beq.n	8007fee <HAL_DMA_IRQHandler+0x2ee>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a52      	ldr	r2, [pc, #328]	; (8008134 <HAL_DMA_IRQHandler+0x434>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d10a      	bne.n	8008004 <HAL_DMA_IRQHandler+0x304>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	e003      	b.n	800800c <HAL_DMA_IRQHandler+0x30c>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008014:	f003 031f 	and.w	r3, r3, #31
 8008018:	2201      	movs	r2, #1
 800801a:	409a      	lsls	r2, r3
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008024:	f043 0202 	orr.w	r2, r3, #2
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	2204      	movs	r2, #4
 8008036:	409a      	lsls	r2, r3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 808f 	beq.w	8008160 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a2c      	ldr	r2, [pc, #176]	; (80080f8 <HAL_DMA_IRQHandler+0x3f8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d04a      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a2a      	ldr	r2, [pc, #168]	; (80080fc <HAL_DMA_IRQHandler+0x3fc>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d045      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a29      	ldr	r2, [pc, #164]	; (8008100 <HAL_DMA_IRQHandler+0x400>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d040      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a27      	ldr	r2, [pc, #156]	; (8008104 <HAL_DMA_IRQHandler+0x404>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d03b      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a26      	ldr	r2, [pc, #152]	; (8008108 <HAL_DMA_IRQHandler+0x408>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d036      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a24      	ldr	r2, [pc, #144]	; (800810c <HAL_DMA_IRQHandler+0x40c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d031      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a23      	ldr	r2, [pc, #140]	; (8008110 <HAL_DMA_IRQHandler+0x410>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d02c      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a21      	ldr	r2, [pc, #132]	; (8008114 <HAL_DMA_IRQHandler+0x414>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d027      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a20      	ldr	r2, [pc, #128]	; (8008118 <HAL_DMA_IRQHandler+0x418>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d022      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1e      	ldr	r2, [pc, #120]	; (800811c <HAL_DMA_IRQHandler+0x41c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01d      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1d      	ldr	r2, [pc, #116]	; (8008120 <HAL_DMA_IRQHandler+0x420>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d018      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1b      	ldr	r2, [pc, #108]	; (8008124 <HAL_DMA_IRQHandler+0x424>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d013      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1a      	ldr	r2, [pc, #104]	; (8008128 <HAL_DMA_IRQHandler+0x428>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00e      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	; (800812c <HAL_DMA_IRQHandler+0x42c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d009      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a17      	ldr	r2, [pc, #92]	; (8008130 <HAL_DMA_IRQHandler+0x430>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d004      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x3e2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a15      	ldr	r2, [pc, #84]	; (8008134 <HAL_DMA_IRQHandler+0x434>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d12a      	bne.n	8008138 <HAL_DMA_IRQHandler+0x438>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf14      	ite	ne
 80080f0:	2301      	movne	r3, #1
 80080f2:	2300      	moveq	r3, #0
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	e023      	b.n	8008140 <HAL_DMA_IRQHandler+0x440>
 80080f8:	40020010 	.word	0x40020010
 80080fc:	40020028 	.word	0x40020028
 8008100:	40020040 	.word	0x40020040
 8008104:	40020058 	.word	0x40020058
 8008108:	40020070 	.word	0x40020070
 800810c:	40020088 	.word	0x40020088
 8008110:	400200a0 	.word	0x400200a0
 8008114:	400200b8 	.word	0x400200b8
 8008118:	40020410 	.word	0x40020410
 800811c:	40020428 	.word	0x40020428
 8008120:	40020440 	.word	0x40020440
 8008124:	40020458 	.word	0x40020458
 8008128:	40020470 	.word	0x40020470
 800812c:	40020488 	.word	0x40020488
 8008130:	400204a0 	.word	0x400204a0
 8008134:	400204b8 	.word	0x400204b8
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	2204      	movs	r2, #4
 800814e:	409a      	lsls	r2, r3
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008158:	f043 0204 	orr.w	r2, r3, #4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2210      	movs	r2, #16
 800816a:	409a      	lsls	r2, r3
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80a6 	beq.w	80082c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a85      	ldr	r2, [pc, #532]	; (8008390 <HAL_DMA_IRQHandler+0x690>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d04a      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a83      	ldr	r2, [pc, #524]	; (8008394 <HAL_DMA_IRQHandler+0x694>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d045      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a82      	ldr	r2, [pc, #520]	; (8008398 <HAL_DMA_IRQHandler+0x698>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d040      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a80      	ldr	r2, [pc, #512]	; (800839c <HAL_DMA_IRQHandler+0x69c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d03b      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a7f      	ldr	r2, [pc, #508]	; (80083a0 <HAL_DMA_IRQHandler+0x6a0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d036      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a7d      	ldr	r2, [pc, #500]	; (80083a4 <HAL_DMA_IRQHandler+0x6a4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d031      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a7c      	ldr	r2, [pc, #496]	; (80083a8 <HAL_DMA_IRQHandler+0x6a8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d02c      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a7a      	ldr	r2, [pc, #488]	; (80083ac <HAL_DMA_IRQHandler+0x6ac>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d027      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a79      	ldr	r2, [pc, #484]	; (80083b0 <HAL_DMA_IRQHandler+0x6b0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d022      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a77      	ldr	r2, [pc, #476]	; (80083b4 <HAL_DMA_IRQHandler+0x6b4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d01d      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a76      	ldr	r2, [pc, #472]	; (80083b8 <HAL_DMA_IRQHandler+0x6b8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d018      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a74      	ldr	r2, [pc, #464]	; (80083bc <HAL_DMA_IRQHandler+0x6bc>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d013      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a73      	ldr	r2, [pc, #460]	; (80083c0 <HAL_DMA_IRQHandler+0x6c0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00e      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a71      	ldr	r2, [pc, #452]	; (80083c4 <HAL_DMA_IRQHandler+0x6c4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d009      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a70      	ldr	r2, [pc, #448]	; (80083c8 <HAL_DMA_IRQHandler+0x6c8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d004      	beq.n	8008216 <HAL_DMA_IRQHandler+0x516>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a6e      	ldr	r2, [pc, #440]	; (80083cc <HAL_DMA_IRQHandler+0x6cc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10a      	bne.n	800822c <HAL_DMA_IRQHandler+0x52c>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e009      	b.n	8008240 <HAL_DMA_IRQHandler+0x540>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	bf14      	ite	ne
 800823a:	2301      	movne	r3, #1
 800823c:	2300      	moveq	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d03e      	beq.n	80082c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2210      	movs	r2, #16
 800824e:	409a      	lsls	r2, r3
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d018      	beq.n	8008294 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d108      	bne.n	8008282 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d024      	beq.n	80082c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
 8008280:	e01f      	b.n	80082c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01b      	beq.n	80082c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
 8008292:	e016      	b.n	80082c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0208 	bic.w	r2, r2, #8
 80082b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	2220      	movs	r2, #32
 80082cc:	409a      	lsls	r2, r3
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	4013      	ands	r3, r2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 8110 	beq.w	80084f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a2c      	ldr	r2, [pc, #176]	; (8008390 <HAL_DMA_IRQHandler+0x690>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d04a      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2b      	ldr	r2, [pc, #172]	; (8008394 <HAL_DMA_IRQHandler+0x694>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d045      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a29      	ldr	r2, [pc, #164]	; (8008398 <HAL_DMA_IRQHandler+0x698>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d040      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a28      	ldr	r2, [pc, #160]	; (800839c <HAL_DMA_IRQHandler+0x69c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03b      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <HAL_DMA_IRQHandler+0x6a0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d036      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a25      	ldr	r2, [pc, #148]	; (80083a4 <HAL_DMA_IRQHandler+0x6a4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d031      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a23      	ldr	r2, [pc, #140]	; (80083a8 <HAL_DMA_IRQHandler+0x6a8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d02c      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a22      	ldr	r2, [pc, #136]	; (80083ac <HAL_DMA_IRQHandler+0x6ac>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d027      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a20      	ldr	r2, [pc, #128]	; (80083b0 <HAL_DMA_IRQHandler+0x6b0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d022      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1f      	ldr	r2, [pc, #124]	; (80083b4 <HAL_DMA_IRQHandler+0x6b4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01d      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1d      	ldr	r2, [pc, #116]	; (80083b8 <HAL_DMA_IRQHandler+0x6b8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1c      	ldr	r2, [pc, #112]	; (80083bc <HAL_DMA_IRQHandler+0x6bc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1a      	ldr	r2, [pc, #104]	; (80083c0 <HAL_DMA_IRQHandler+0x6c0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a19      	ldr	r2, [pc, #100]	; (80083c4 <HAL_DMA_IRQHandler+0x6c4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <HAL_DMA_IRQHandler+0x6c8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_DMA_IRQHandler+0x678>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a16      	ldr	r2, [pc, #88]	; (80083cc <HAL_DMA_IRQHandler+0x6cc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d12b      	bne.n	80083d0 <HAL_DMA_IRQHandler+0x6d0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf14      	ite	ne
 8008386:	2301      	movne	r3, #1
 8008388:	2300      	moveq	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	e02a      	b.n	80083e4 <HAL_DMA_IRQHandler+0x6e4>
 800838e:	bf00      	nop
 8008390:	40020010 	.word	0x40020010
 8008394:	40020028 	.word	0x40020028
 8008398:	40020040 	.word	0x40020040
 800839c:	40020058 	.word	0x40020058
 80083a0:	40020070 	.word	0x40020070
 80083a4:	40020088 	.word	0x40020088
 80083a8:	400200a0 	.word	0x400200a0
 80083ac:	400200b8 	.word	0x400200b8
 80083b0:	40020410 	.word	0x40020410
 80083b4:	40020428 	.word	0x40020428
 80083b8:	40020440 	.word	0x40020440
 80083bc:	40020458 	.word	0x40020458
 80083c0:	40020470 	.word	0x40020470
 80083c4:	40020488 	.word	0x40020488
 80083c8:	400204a0 	.word	0x400204a0
 80083cc:	400204b8 	.word	0x400204b8
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bf14      	ite	ne
 80083de:	2301      	movne	r3, #1
 80083e0:	2300      	moveq	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8087 	beq.w	80084f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2220      	movs	r2, #32
 80083f4:	409a      	lsls	r2, r3
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b04      	cmp	r3, #4
 8008404:	d139      	bne.n	800847a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0216 	bic.w	r2, r2, #22
 8008414:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695a      	ldr	r2, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008424:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <HAL_DMA_IRQHandler+0x736>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0208 	bic.w	r2, r2, #8
 8008444:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844a:	f003 031f 	and.w	r3, r3, #31
 800844e:	223f      	movs	r2, #63	; 0x3f
 8008450:	409a      	lsls	r2, r3
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 834a 	beq.w	8008b04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
          }
          return;
 8008478:	e344      	b.n	8008b04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d018      	beq.n	80084ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d108      	bne.n	80084a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	2b00      	cmp	r3, #0
 800849c:	d02c      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	e027      	b.n	80084f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d023      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
 80084b8:	e01e      	b.n	80084f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10f      	bne.n	80084e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0210 	bic.w	r2, r2, #16
 80084d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8306 	beq.w	8008b0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8088 	beq.w	8008620 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a7a      	ldr	r2, [pc, #488]	; (8008708 <HAL_DMA_IRQHandler+0xa08>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d04a      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a79      	ldr	r2, [pc, #484]	; (800870c <HAL_DMA_IRQHandler+0xa0c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d045      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a77      	ldr	r2, [pc, #476]	; (8008710 <HAL_DMA_IRQHandler+0xa10>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d040      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a76      	ldr	r2, [pc, #472]	; (8008714 <HAL_DMA_IRQHandler+0xa14>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d03b      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a74      	ldr	r2, [pc, #464]	; (8008718 <HAL_DMA_IRQHandler+0xa18>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d036      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a73      	ldr	r2, [pc, #460]	; (800871c <HAL_DMA_IRQHandler+0xa1c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d031      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a71      	ldr	r2, [pc, #452]	; (8008720 <HAL_DMA_IRQHandler+0xa20>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d02c      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a70      	ldr	r2, [pc, #448]	; (8008724 <HAL_DMA_IRQHandler+0xa24>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d027      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a6e      	ldr	r2, [pc, #440]	; (8008728 <HAL_DMA_IRQHandler+0xa28>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d022      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a6d      	ldr	r2, [pc, #436]	; (800872c <HAL_DMA_IRQHandler+0xa2c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01d      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a6b      	ldr	r2, [pc, #428]	; (8008730 <HAL_DMA_IRQHandler+0xa30>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d018      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a6a      	ldr	r2, [pc, #424]	; (8008734 <HAL_DMA_IRQHandler+0xa34>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d013      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a68      	ldr	r2, [pc, #416]	; (8008738 <HAL_DMA_IRQHandler+0xa38>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00e      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a67      	ldr	r2, [pc, #412]	; (800873c <HAL_DMA_IRQHandler+0xa3c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d009      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a65      	ldr	r2, [pc, #404]	; (8008740 <HAL_DMA_IRQHandler+0xa40>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d004      	beq.n	80085b8 <HAL_DMA_IRQHandler+0x8b8>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a64      	ldr	r2, [pc, #400]	; (8008744 <HAL_DMA_IRQHandler+0xa44>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d108      	bne.n	80085ca <HAL_DMA_IRQHandler+0x8ca>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0201 	bic.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e007      	b.n	80085da <HAL_DMA_IRQHandler+0x8da>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0201 	bic.w	r2, r2, #1
 80085d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d307      	bcc.n	80085f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f2      	bne.n	80085da <HAL_DMA_IRQHandler+0x8da>
 80085f4:	e000      	b.n	80085f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80085f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d004      	beq.n	8008610 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800860e:	e003      	b.n	8008618 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8272 	beq.w	8008b0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
 8008632:	e26c      	b.n	8008b0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a43      	ldr	r2, [pc, #268]	; (8008748 <HAL_DMA_IRQHandler+0xa48>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d022      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a42      	ldr	r2, [pc, #264]	; (800874c <HAL_DMA_IRQHandler+0xa4c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d01d      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a40      	ldr	r2, [pc, #256]	; (8008750 <HAL_DMA_IRQHandler+0xa50>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d018      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a3f      	ldr	r2, [pc, #252]	; (8008754 <HAL_DMA_IRQHandler+0xa54>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d013      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a3d      	ldr	r2, [pc, #244]	; (8008758 <HAL_DMA_IRQHandler+0xa58>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00e      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a3c      	ldr	r2, [pc, #240]	; (800875c <HAL_DMA_IRQHandler+0xa5c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d009      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a3a      	ldr	r2, [pc, #232]	; (8008760 <HAL_DMA_IRQHandler+0xa60>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <HAL_DMA_IRQHandler+0x984>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a39      	ldr	r2, [pc, #228]	; (8008764 <HAL_DMA_IRQHandler+0xa64>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d101      	bne.n	8008688 <HAL_DMA_IRQHandler+0x988>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <HAL_DMA_IRQHandler+0x98a>
 8008688:	2300      	movs	r3, #0
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 823f 	beq.w	8008b0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	2204      	movs	r2, #4
 80086a2:	409a      	lsls	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80cd 	beq.w	8008848 <HAL_DMA_IRQHandler+0xb48>
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80c7 	beq.w	8008848 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	2204      	movs	r2, #4
 80086c4:	409a      	lsls	r2, r3
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d049      	beq.n	8008768 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d109      	bne.n	80086f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 8210 	beq.w	8008b08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086f0:	e20a      	b.n	8008b08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 8206 	beq.w	8008b08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008704:	e200      	b.n	8008b08 <HAL_DMA_IRQHandler+0xe08>
 8008706:	bf00      	nop
 8008708:	40020010 	.word	0x40020010
 800870c:	40020028 	.word	0x40020028
 8008710:	40020040 	.word	0x40020040
 8008714:	40020058 	.word	0x40020058
 8008718:	40020070 	.word	0x40020070
 800871c:	40020088 	.word	0x40020088
 8008720:	400200a0 	.word	0x400200a0
 8008724:	400200b8 	.word	0x400200b8
 8008728:	40020410 	.word	0x40020410
 800872c:	40020428 	.word	0x40020428
 8008730:	40020440 	.word	0x40020440
 8008734:	40020458 	.word	0x40020458
 8008738:	40020470 	.word	0x40020470
 800873c:	40020488 	.word	0x40020488
 8008740:	400204a0 	.word	0x400204a0
 8008744:	400204b8 	.word	0x400204b8
 8008748:	58025408 	.word	0x58025408
 800874c:	5802541c 	.word	0x5802541c
 8008750:	58025430 	.word	0x58025430
 8008754:	58025444 	.word	0x58025444
 8008758:	58025458 	.word	0x58025458
 800875c:	5802546c 	.word	0x5802546c
 8008760:	58025480 	.word	0x58025480
 8008764:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d160      	bne.n	8008834 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a7f      	ldr	r2, [pc, #508]	; (8008974 <HAL_DMA_IRQHandler+0xc74>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d04a      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a7d      	ldr	r2, [pc, #500]	; (8008978 <HAL_DMA_IRQHandler+0xc78>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d045      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a7c      	ldr	r2, [pc, #496]	; (800897c <HAL_DMA_IRQHandler+0xc7c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d040      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a7a      	ldr	r2, [pc, #488]	; (8008980 <HAL_DMA_IRQHandler+0xc80>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d03b      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a79      	ldr	r2, [pc, #484]	; (8008984 <HAL_DMA_IRQHandler+0xc84>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d036      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a77      	ldr	r2, [pc, #476]	; (8008988 <HAL_DMA_IRQHandler+0xc88>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d031      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a76      	ldr	r2, [pc, #472]	; (800898c <HAL_DMA_IRQHandler+0xc8c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d02c      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a74      	ldr	r2, [pc, #464]	; (8008990 <HAL_DMA_IRQHandler+0xc90>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d027      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a73      	ldr	r2, [pc, #460]	; (8008994 <HAL_DMA_IRQHandler+0xc94>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d022      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a71      	ldr	r2, [pc, #452]	; (8008998 <HAL_DMA_IRQHandler+0xc98>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d01d      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a70      	ldr	r2, [pc, #448]	; (800899c <HAL_DMA_IRQHandler+0xc9c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d018      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a6e      	ldr	r2, [pc, #440]	; (80089a0 <HAL_DMA_IRQHandler+0xca0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a6d      	ldr	r2, [pc, #436]	; (80089a4 <HAL_DMA_IRQHandler+0xca4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a6b      	ldr	r2, [pc, #428]	; (80089a8 <HAL_DMA_IRQHandler+0xca8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a6a      	ldr	r2, [pc, #424]	; (80089ac <HAL_DMA_IRQHandler+0xcac>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <HAL_DMA_IRQHandler+0xb12>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a68      	ldr	r2, [pc, #416]	; (80089b0 <HAL_DMA_IRQHandler+0xcb0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d108      	bne.n	8008824 <HAL_DMA_IRQHandler+0xb24>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0208 	bic.w	r2, r2, #8
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e007      	b.n	8008834 <HAL_DMA_IRQHandler+0xb34>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0204 	bic.w	r2, r2, #4
 8008832:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 8165 	beq.w	8008b08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008846:	e15f      	b.n	8008b08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	2202      	movs	r2, #2
 8008852:	409a      	lsls	r2, r3
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	4013      	ands	r3, r2
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80c5 	beq.w	80089e8 <HAL_DMA_IRQHandler+0xce8>
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 80bf 	beq.w	80089e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886e:	f003 031f 	and.w	r3, r3, #31
 8008872:	2202      	movs	r2, #2
 8008874:	409a      	lsls	r2, r3
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d018      	beq.n	80088b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 813a 	beq.w	8008b0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088a0:	e134      	b.n	8008b0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 8130 	beq.w	8008b0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088b4:	e12a      	b.n	8008b0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 8089 	bne.w	80089d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a2b      	ldr	r2, [pc, #172]	; (8008974 <HAL_DMA_IRQHandler+0xc74>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d04a      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a29      	ldr	r2, [pc, #164]	; (8008978 <HAL_DMA_IRQHandler+0xc78>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d045      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a28      	ldr	r2, [pc, #160]	; (800897c <HAL_DMA_IRQHandler+0xc7c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d040      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a26      	ldr	r2, [pc, #152]	; (8008980 <HAL_DMA_IRQHandler+0xc80>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d03b      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a25      	ldr	r2, [pc, #148]	; (8008984 <HAL_DMA_IRQHandler+0xc84>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d036      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a23      	ldr	r2, [pc, #140]	; (8008988 <HAL_DMA_IRQHandler+0xc88>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d031      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a22      	ldr	r2, [pc, #136]	; (800898c <HAL_DMA_IRQHandler+0xc8c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d02c      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a20      	ldr	r2, [pc, #128]	; (8008990 <HAL_DMA_IRQHandler+0xc90>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d027      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <HAL_DMA_IRQHandler+0xc94>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d022      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <HAL_DMA_IRQHandler+0xc98>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01d      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1c      	ldr	r2, [pc, #112]	; (800899c <HAL_DMA_IRQHandler+0xc9c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d018      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1a      	ldr	r2, [pc, #104]	; (80089a0 <HAL_DMA_IRQHandler+0xca0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d013      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a19      	ldr	r2, [pc, #100]	; (80089a4 <HAL_DMA_IRQHandler+0xca4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00e      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <HAL_DMA_IRQHandler+0xca8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d009      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a16      	ldr	r2, [pc, #88]	; (80089ac <HAL_DMA_IRQHandler+0xcac>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d004      	beq.n	8008962 <HAL_DMA_IRQHandler+0xc62>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a14      	ldr	r2, [pc, #80]	; (80089b0 <HAL_DMA_IRQHandler+0xcb0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d128      	bne.n	80089b4 <HAL_DMA_IRQHandler+0xcb4>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0214 	bic.w	r2, r2, #20
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e027      	b.n	80089c4 <HAL_DMA_IRQHandler+0xcc4>
 8008974:	40020010 	.word	0x40020010
 8008978:	40020028 	.word	0x40020028
 800897c:	40020040 	.word	0x40020040
 8008980:	40020058 	.word	0x40020058
 8008984:	40020070 	.word	0x40020070
 8008988:	40020088 	.word	0x40020088
 800898c:	400200a0 	.word	0x400200a0
 8008990:	400200b8 	.word	0x400200b8
 8008994:	40020410 	.word	0x40020410
 8008998:	40020428 	.word	0x40020428
 800899c:	40020440 	.word	0x40020440
 80089a0:	40020458 	.word	0x40020458
 80089a4:	40020470 	.word	0x40020470
 80089a8:	40020488 	.word	0x40020488
 80089ac:	400204a0 	.word	0x400204a0
 80089b0:	400204b8 	.word	0x400204b8
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 020a 	bic.w	r2, r2, #10
 80089c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8097 	beq.w	8008b0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089e6:	e091      	b.n	8008b0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ec:	f003 031f 	and.w	r3, r3, #31
 80089f0:	2208      	movs	r2, #8
 80089f2:	409a      	lsls	r2, r3
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	4013      	ands	r3, r2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8088 	beq.w	8008b0e <HAL_DMA_IRQHandler+0xe0e>
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8082 	beq.w	8008b0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a41      	ldr	r2, [pc, #260]	; (8008b14 <HAL_DMA_IRQHandler+0xe14>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d04a      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a3f      	ldr	r2, [pc, #252]	; (8008b18 <HAL_DMA_IRQHandler+0xe18>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d045      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a3e      	ldr	r2, [pc, #248]	; (8008b1c <HAL_DMA_IRQHandler+0xe1c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d040      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a3c      	ldr	r2, [pc, #240]	; (8008b20 <HAL_DMA_IRQHandler+0xe20>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d03b      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a3b      	ldr	r2, [pc, #236]	; (8008b24 <HAL_DMA_IRQHandler+0xe24>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d036      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a39      	ldr	r2, [pc, #228]	; (8008b28 <HAL_DMA_IRQHandler+0xe28>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d031      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a38      	ldr	r2, [pc, #224]	; (8008b2c <HAL_DMA_IRQHandler+0xe2c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d02c      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a36      	ldr	r2, [pc, #216]	; (8008b30 <HAL_DMA_IRQHandler+0xe30>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d027      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a35      	ldr	r2, [pc, #212]	; (8008b34 <HAL_DMA_IRQHandler+0xe34>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d022      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a33      	ldr	r2, [pc, #204]	; (8008b38 <HAL_DMA_IRQHandler+0xe38>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d01d      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a32      	ldr	r2, [pc, #200]	; (8008b3c <HAL_DMA_IRQHandler+0xe3c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d018      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a30      	ldr	r2, [pc, #192]	; (8008b40 <HAL_DMA_IRQHandler+0xe40>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d013      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a2f      	ldr	r2, [pc, #188]	; (8008b44 <HAL_DMA_IRQHandler+0xe44>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00e      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a2d      	ldr	r2, [pc, #180]	; (8008b48 <HAL_DMA_IRQHandler+0xe48>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a2c      	ldr	r2, [pc, #176]	; (8008b4c <HAL_DMA_IRQHandler+0xe4c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_DMA_IRQHandler+0xdaa>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a2a      	ldr	r2, [pc, #168]	; (8008b50 <HAL_DMA_IRQHandler+0xe50>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d108      	bne.n	8008abc <HAL_DMA_IRQHandler+0xdbc>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 021c 	bic.w	r2, r2, #28
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	e007      	b.n	8008acc <HAL_DMA_IRQHandler+0xdcc>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 020e 	bic.w	r2, r2, #14
 8008aca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	409a      	lsls	r2, r3
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	e004      	b.n	8008b0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008b04:	bf00      	nop
 8008b06:	e002      	b.n	8008b0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b08:	bf00      	nop
 8008b0a:	e000      	b.n	8008b0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b0e:	3728      	adds	r7, #40	; 0x28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	40020010 	.word	0x40020010
 8008b18:	40020028 	.word	0x40020028
 8008b1c:	40020040 	.word	0x40020040
 8008b20:	40020058 	.word	0x40020058
 8008b24:	40020070 	.word	0x40020070
 8008b28:	40020088 	.word	0x40020088
 8008b2c:	400200a0 	.word	0x400200a0
 8008b30:	400200b8 	.word	0x400200b8
 8008b34:	40020410 	.word	0x40020410
 8008b38:	40020428 	.word	0x40020428
 8008b3c:	40020440 	.word	0x40020440
 8008b40:	40020458 	.word	0x40020458
 8008b44:	40020470 	.word	0x40020470
 8008b48:	40020488 	.word	0x40020488
 8008b4c:	400204a0 	.word	0x400204a0
 8008b50:	400204b8 	.word	0x400204b8

08008b54 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a7f      	ldr	r2, [pc, #508]	; (8008d88 <DMA_SetConfig+0x21c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d072      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a7d      	ldr	r2, [pc, #500]	; (8008d8c <DMA_SetConfig+0x220>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d06d      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a7c      	ldr	r2, [pc, #496]	; (8008d90 <DMA_SetConfig+0x224>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d068      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a7a      	ldr	r2, [pc, #488]	; (8008d94 <DMA_SetConfig+0x228>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d063      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a79      	ldr	r2, [pc, #484]	; (8008d98 <DMA_SetConfig+0x22c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d05e      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a77      	ldr	r2, [pc, #476]	; (8008d9c <DMA_SetConfig+0x230>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d059      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a76      	ldr	r2, [pc, #472]	; (8008da0 <DMA_SetConfig+0x234>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d054      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a74      	ldr	r2, [pc, #464]	; (8008da4 <DMA_SetConfig+0x238>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d04f      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a73      	ldr	r2, [pc, #460]	; (8008da8 <DMA_SetConfig+0x23c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d04a      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a71      	ldr	r2, [pc, #452]	; (8008dac <DMA_SetConfig+0x240>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d045      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a70      	ldr	r2, [pc, #448]	; (8008db0 <DMA_SetConfig+0x244>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d040      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a6e      	ldr	r2, [pc, #440]	; (8008db4 <DMA_SetConfig+0x248>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d03b      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a6d      	ldr	r2, [pc, #436]	; (8008db8 <DMA_SetConfig+0x24c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d036      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a6b      	ldr	r2, [pc, #428]	; (8008dbc <DMA_SetConfig+0x250>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d031      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6a      	ldr	r2, [pc, #424]	; (8008dc0 <DMA_SetConfig+0x254>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d02c      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a68      	ldr	r2, [pc, #416]	; (8008dc4 <DMA_SetConfig+0x258>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d027      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a67      	ldr	r2, [pc, #412]	; (8008dc8 <DMA_SetConfig+0x25c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d022      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a65      	ldr	r2, [pc, #404]	; (8008dcc <DMA_SetConfig+0x260>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01d      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a64      	ldr	r2, [pc, #400]	; (8008dd0 <DMA_SetConfig+0x264>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a62      	ldr	r2, [pc, #392]	; (8008dd4 <DMA_SetConfig+0x268>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a61      	ldr	r2, [pc, #388]	; (8008dd8 <DMA_SetConfig+0x26c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a5f      	ldr	r2, [pc, #380]	; (8008ddc <DMA_SetConfig+0x270>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a5e      	ldr	r2, [pc, #376]	; (8008de0 <DMA_SetConfig+0x274>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <DMA_SetConfig+0x10a>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a5c      	ldr	r2, [pc, #368]	; (8008de4 <DMA_SetConfig+0x278>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d101      	bne.n	8008c7a <DMA_SetConfig+0x10e>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <DMA_SetConfig+0x110>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00d      	beq.n	8008c9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d004      	beq.n	8008c9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a39      	ldr	r2, [pc, #228]	; (8008d88 <DMA_SetConfig+0x21c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d04a      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a38      	ldr	r2, [pc, #224]	; (8008d8c <DMA_SetConfig+0x220>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d045      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a36      	ldr	r2, [pc, #216]	; (8008d90 <DMA_SetConfig+0x224>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d040      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a35      	ldr	r2, [pc, #212]	; (8008d94 <DMA_SetConfig+0x228>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d03b      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a33      	ldr	r2, [pc, #204]	; (8008d98 <DMA_SetConfig+0x22c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d036      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a32      	ldr	r2, [pc, #200]	; (8008d9c <DMA_SetConfig+0x230>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d031      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a30      	ldr	r2, [pc, #192]	; (8008da0 <DMA_SetConfig+0x234>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d02c      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a2f      	ldr	r2, [pc, #188]	; (8008da4 <DMA_SetConfig+0x238>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d027      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a2d      	ldr	r2, [pc, #180]	; (8008da8 <DMA_SetConfig+0x23c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d022      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a2c      	ldr	r2, [pc, #176]	; (8008dac <DMA_SetConfig+0x240>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d01d      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a2a      	ldr	r2, [pc, #168]	; (8008db0 <DMA_SetConfig+0x244>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d018      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a29      	ldr	r2, [pc, #164]	; (8008db4 <DMA_SetConfig+0x248>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d013      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a27      	ldr	r2, [pc, #156]	; (8008db8 <DMA_SetConfig+0x24c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00e      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a26      	ldr	r2, [pc, #152]	; (8008dbc <DMA_SetConfig+0x250>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d009      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a24      	ldr	r2, [pc, #144]	; (8008dc0 <DMA_SetConfig+0x254>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <DMA_SetConfig+0x1d0>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a23      	ldr	r2, [pc, #140]	; (8008dc4 <DMA_SetConfig+0x258>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d101      	bne.n	8008d40 <DMA_SetConfig+0x1d4>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <DMA_SetConfig+0x1d6>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d059      	beq.n	8008dfa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	223f      	movs	r2, #63	; 0x3f
 8008d50:	409a      	lsls	r2, r3
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b40      	cmp	r3, #64	; 0x40
 8008d74:	d138      	bne.n	8008de8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d86:	e086      	b.n	8008e96 <DMA_SetConfig+0x32a>
 8008d88:	40020010 	.word	0x40020010
 8008d8c:	40020028 	.word	0x40020028
 8008d90:	40020040 	.word	0x40020040
 8008d94:	40020058 	.word	0x40020058
 8008d98:	40020070 	.word	0x40020070
 8008d9c:	40020088 	.word	0x40020088
 8008da0:	400200a0 	.word	0x400200a0
 8008da4:	400200b8 	.word	0x400200b8
 8008da8:	40020410 	.word	0x40020410
 8008dac:	40020428 	.word	0x40020428
 8008db0:	40020440 	.word	0x40020440
 8008db4:	40020458 	.word	0x40020458
 8008db8:	40020470 	.word	0x40020470
 8008dbc:	40020488 	.word	0x40020488
 8008dc0:	400204a0 	.word	0x400204a0
 8008dc4:	400204b8 	.word	0x400204b8
 8008dc8:	58025408 	.word	0x58025408
 8008dcc:	5802541c 	.word	0x5802541c
 8008dd0:	58025430 	.word	0x58025430
 8008dd4:	58025444 	.word	0x58025444
 8008dd8:	58025458 	.word	0x58025458
 8008ddc:	5802546c 	.word	0x5802546c
 8008de0:	58025480 	.word	0x58025480
 8008de4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	60da      	str	r2, [r3, #12]
}
 8008df8:	e04d      	b.n	8008e96 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a29      	ldr	r2, [pc, #164]	; (8008ea4 <DMA_SetConfig+0x338>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d022      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a27      	ldr	r2, [pc, #156]	; (8008ea8 <DMA_SetConfig+0x33c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01d      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a26      	ldr	r2, [pc, #152]	; (8008eac <DMA_SetConfig+0x340>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d018      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a24      	ldr	r2, [pc, #144]	; (8008eb0 <DMA_SetConfig+0x344>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a23      	ldr	r2, [pc, #140]	; (8008eb4 <DMA_SetConfig+0x348>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00e      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <DMA_SetConfig+0x34c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d009      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <DMA_SetConfig+0x350>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <DMA_SetConfig+0x2de>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <DMA_SetConfig+0x354>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d101      	bne.n	8008e4e <DMA_SetConfig+0x2e2>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <DMA_SetConfig+0x2e4>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d020      	beq.n	8008e96 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	409a      	lsls	r2, r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b40      	cmp	r3, #64	; 0x40
 8008e72:	d108      	bne.n	8008e86 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	60da      	str	r2, [r3, #12]
}
 8008e84:	e007      	b.n	8008e96 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	60da      	str	r2, [r3, #12]
}
 8008e96:	bf00      	nop
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	58025408 	.word	0x58025408
 8008ea8:	5802541c 	.word	0x5802541c
 8008eac:	58025430 	.word	0x58025430
 8008eb0:	58025444 	.word	0x58025444
 8008eb4:	58025458 	.word	0x58025458
 8008eb8:	5802546c 	.word	0x5802546c
 8008ebc:	58025480 	.word	0x58025480
 8008ec0:	58025494 	.word	0x58025494

08008ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a42      	ldr	r2, [pc, #264]	; (8008fdc <DMA_CalcBaseAndBitshift+0x118>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d04a      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <DMA_CalcBaseAndBitshift+0x11c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d045      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a3f      	ldr	r2, [pc, #252]	; (8008fe4 <DMA_CalcBaseAndBitshift+0x120>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d040      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a3e      	ldr	r2, [pc, #248]	; (8008fe8 <DMA_CalcBaseAndBitshift+0x124>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d03b      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a3c      	ldr	r2, [pc, #240]	; (8008fec <DMA_CalcBaseAndBitshift+0x128>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d036      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a3b      	ldr	r2, [pc, #236]	; (8008ff0 <DMA_CalcBaseAndBitshift+0x12c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d031      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a39      	ldr	r2, [pc, #228]	; (8008ff4 <DMA_CalcBaseAndBitshift+0x130>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d02c      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a38      	ldr	r2, [pc, #224]	; (8008ff8 <DMA_CalcBaseAndBitshift+0x134>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d027      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a36      	ldr	r2, [pc, #216]	; (8008ffc <DMA_CalcBaseAndBitshift+0x138>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d022      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a35      	ldr	r2, [pc, #212]	; (8009000 <DMA_CalcBaseAndBitshift+0x13c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d01d      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a33      	ldr	r2, [pc, #204]	; (8009004 <DMA_CalcBaseAndBitshift+0x140>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d018      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a32      	ldr	r2, [pc, #200]	; (8009008 <DMA_CalcBaseAndBitshift+0x144>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d013      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a30      	ldr	r2, [pc, #192]	; (800900c <DMA_CalcBaseAndBitshift+0x148>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00e      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a2f      	ldr	r2, [pc, #188]	; (8009010 <DMA_CalcBaseAndBitshift+0x14c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d009      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2d      	ldr	r2, [pc, #180]	; (8009014 <DMA_CalcBaseAndBitshift+0x150>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <DMA_CalcBaseAndBitshift+0xa8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2c      	ldr	r2, [pc, #176]	; (8009018 <DMA_CalcBaseAndBitshift+0x154>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d101      	bne.n	8008f70 <DMA_CalcBaseAndBitshift+0xac>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <DMA_CalcBaseAndBitshift+0xae>
 8008f70:	2300      	movs	r3, #0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d024      	beq.n	8008fc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	3b10      	subs	r3, #16
 8008f7e:	4a27      	ldr	r2, [pc, #156]	; (800901c <DMA_CalcBaseAndBitshift+0x158>)
 8008f80:	fba2 2303 	umull	r2, r3, r2, r3
 8008f84:	091b      	lsrs	r3, r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	4a24      	ldr	r2, [pc, #144]	; (8009020 <DMA_CalcBaseAndBitshift+0x15c>)
 8008f90:	5cd3      	ldrb	r3, [r2, r3]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d908      	bls.n	8008fb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	4b1f      	ldr	r3, [pc, #124]	; (8009024 <DMA_CalcBaseAndBitshift+0x160>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	659a      	str	r2, [r3, #88]	; 0x58
 8008fae:	e00d      	b.n	8008fcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4b1b      	ldr	r3, [pc, #108]	; (8009024 <DMA_CalcBaseAndBitshift+0x160>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8008fbe:	e005      	b.n	8008fcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	40020010 	.word	0x40020010
 8008fe0:	40020028 	.word	0x40020028
 8008fe4:	40020040 	.word	0x40020040
 8008fe8:	40020058 	.word	0x40020058
 8008fec:	40020070 	.word	0x40020070
 8008ff0:	40020088 	.word	0x40020088
 8008ff4:	400200a0 	.word	0x400200a0
 8008ff8:	400200b8 	.word	0x400200b8
 8008ffc:	40020410 	.word	0x40020410
 8009000:	40020428 	.word	0x40020428
 8009004:	40020440 	.word	0x40020440
 8009008:	40020458 	.word	0x40020458
 800900c:	40020470 	.word	0x40020470
 8009010:	40020488 	.word	0x40020488
 8009014:	400204a0 	.word	0x400204a0
 8009018:	400204b8 	.word	0x400204b8
 800901c:	aaaaaaab 	.word	0xaaaaaaab
 8009020:	08017eac 	.word	0x08017eac
 8009024:	fffffc00 	.word	0xfffffc00

08009028 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d120      	bne.n	800907e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	2b03      	cmp	r3, #3
 8009042:	d858      	bhi.n	80090f6 <DMA_CheckFifoParam+0xce>
 8009044:	a201      	add	r2, pc, #4	; (adr r2, 800904c <DMA_CheckFifoParam+0x24>)
 8009046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904a:	bf00      	nop
 800904c:	0800905d 	.word	0x0800905d
 8009050:	0800906f 	.word	0x0800906f
 8009054:	0800905d 	.word	0x0800905d
 8009058:	080090f7 	.word	0x080090f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d048      	beq.n	80090fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800906c:	e045      	b.n	80090fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009076:	d142      	bne.n	80090fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800907c:	e03f      	b.n	80090fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009086:	d123      	bne.n	80090d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	2b03      	cmp	r3, #3
 800908e:	d838      	bhi.n	8009102 <DMA_CheckFifoParam+0xda>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <DMA_CheckFifoParam+0x70>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090a9 	.word	0x080090a9
 800909c:	080090af 	.word	0x080090af
 80090a0:	080090a9 	.word	0x080090a9
 80090a4:	080090c1 	.word	0x080090c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
        break;
 80090ac:	e030      	b.n	8009110 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d025      	beq.n	8009106 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090be:	e022      	b.n	8009106 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090c8:	d11f      	bne.n	800910a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090ce:	e01c      	b.n	800910a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d902      	bls.n	80090de <DMA_CheckFifoParam+0xb6>
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d003      	beq.n	80090e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80090dc:	e018      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]
        break;
 80090e2:	e015      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00e      	beq.n	800910e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
    break;
 80090f4:	e00b      	b.n	800910e <DMA_CheckFifoParam+0xe6>
        break;
 80090f6:	bf00      	nop
 80090f8:	e00a      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        break;
 80090fa:	bf00      	nop
 80090fc:	e008      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        break;
 80090fe:	bf00      	nop
 8009100:	e006      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        break;
 8009102:	bf00      	nop
 8009104:	e004      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        break;
 8009106:	bf00      	nop
 8009108:	e002      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
        break;
 800910a:	bf00      	nop
 800910c:	e000      	b.n	8009110 <DMA_CheckFifoParam+0xe8>
    break;
 800910e:	bf00      	nop
    }
  }

  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop

08009120 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a38      	ldr	r2, [pc, #224]	; (8009214 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d022      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a36      	ldr	r2, [pc, #216]	; (8009218 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d01d      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a35      	ldr	r2, [pc, #212]	; (800921c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d018      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a33      	ldr	r2, [pc, #204]	; (8009220 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a32      	ldr	r2, [pc, #200]	; (8009224 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00e      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a30      	ldr	r2, [pc, #192]	; (8009228 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d009      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a2f      	ldr	r2, [pc, #188]	; (800922c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d004      	beq.n	800917e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a2d      	ldr	r2, [pc, #180]	; (8009230 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d101      	bne.n	8009182 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01a      	beq.n	80091be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	3b08      	subs	r3, #8
 8009190:	4a28      	ldr	r2, [pc, #160]	; (8009234 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	091b      	lsrs	r3, r3, #4
 8009198:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4b26      	ldr	r3, [pc, #152]	; (8009238 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	461a      	mov	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a24      	ldr	r2, [pc, #144]	; (800923c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80091ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f003 031f 	and.w	r3, r3, #31
 80091b4:	2201      	movs	r2, #1
 80091b6:	409a      	lsls	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80091bc:	e024      	b.n	8009208 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	3b10      	subs	r3, #16
 80091c6:	4a1e      	ldr	r2, [pc, #120]	; (8009240 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80091c8:	fba2 2303 	umull	r2, r3, r2, r3
 80091cc:	091b      	lsrs	r3, r3, #4
 80091ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4a1c      	ldr	r2, [pc, #112]	; (8009244 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d806      	bhi.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4a1b      	ldr	r2, [pc, #108]	; (8009248 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d902      	bls.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3308      	adds	r3, #8
 80091e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4b18      	ldr	r3, [pc, #96]	; (800924c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a16      	ldr	r2, [pc, #88]	; (8009250 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80091f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f003 031f 	and.w	r3, r3, #31
 8009200:	2201      	movs	r2, #1
 8009202:	409a      	lsls	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009208:	bf00      	nop
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	58025408 	.word	0x58025408
 8009218:	5802541c 	.word	0x5802541c
 800921c:	58025430 	.word	0x58025430
 8009220:	58025444 	.word	0x58025444
 8009224:	58025458 	.word	0x58025458
 8009228:	5802546c 	.word	0x5802546c
 800922c:	58025480 	.word	0x58025480
 8009230:	58025494 	.word	0x58025494
 8009234:	cccccccd 	.word	0xcccccccd
 8009238:	16009600 	.word	0x16009600
 800923c:	58025880 	.word	0x58025880
 8009240:	aaaaaaab 	.word	0xaaaaaaab
 8009244:	400204b8 	.word	0x400204b8
 8009248:	4002040f 	.word	0x4002040f
 800924c:	10008200 	.word	0x10008200
 8009250:	40020880 	.word	0x40020880

08009254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d04a      	beq.n	8009300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b08      	cmp	r3, #8
 800926e:	d847      	bhi.n	8009300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a25      	ldr	r2, [pc, #148]	; (800930c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d022      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a24      	ldr	r2, [pc, #144]	; (8009310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d01d      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a22      	ldr	r2, [pc, #136]	; (8009314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d018      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a21      	ldr	r2, [pc, #132]	; (8009318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d013      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1f      	ldr	r2, [pc, #124]	; (800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00e      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1e      	ldr	r2, [pc, #120]	; (8009320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d009      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a1c      	ldr	r2, [pc, #112]	; (8009324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d004      	beq.n	80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a1b      	ldr	r2, [pc, #108]	; (8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d101      	bne.n	80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e000      	b.n	80092c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80092c4:	2300      	movs	r3, #0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4b17      	ldr	r3, [pc, #92]	; (800932c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	461a      	mov	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a15      	ldr	r2, [pc, #84]	; (8009330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80092dc:	671a      	str	r2, [r3, #112]	; 0x70
 80092de:	e009      	b.n	80092f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4b14      	ldr	r3, [pc, #80]	; (8009334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	461a      	mov	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a11      	ldr	r2, [pc, #68]	; (8009338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80092f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	2201      	movs	r2, #1
 80092fa:	409a      	lsls	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009300:	bf00      	nop
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	58025408 	.word	0x58025408
 8009310:	5802541c 	.word	0x5802541c
 8009314:	58025430 	.word	0x58025430
 8009318:	58025444 	.word	0x58025444
 800931c:	58025458 	.word	0x58025458
 8009320:	5802546c 	.word	0x5802546c
 8009324:	58025480 	.word	0x58025480
 8009328:	58025494 	.word	0x58025494
 800932c:	1600963f 	.word	0x1600963f
 8009330:	58025940 	.word	0x58025940
 8009334:	1000823f 	.word	0x1000823f
 8009338:	40020940 	.word	0x40020940

0800933c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800933c:	b480      	push	{r7}
 800933e:	b089      	sub	sp, #36	; 0x24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800934a:	4b89      	ldr	r3, [pc, #548]	; (8009570 <HAL_GPIO_Init+0x234>)
 800934c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800934e:	e194      	b.n	800967a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	2101      	movs	r1, #1
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	fa01 f303 	lsl.w	r3, r1, r3
 800935c:	4013      	ands	r3, r2
 800935e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 8186 	beq.w	8009674 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d005      	beq.n	8009380 <HAL_GPIO_Init+0x44>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f003 0303 	and.w	r3, r3, #3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d130      	bne.n	80093e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	2203      	movs	r2, #3
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	43db      	mvns	r3, r3
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	4013      	ands	r3, r2
 8009396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80093b6:	2201      	movs	r2, #1
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	fa02 f303 	lsl.w	r3, r2, r3
 80093be:	43db      	mvns	r3, r3
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	4013      	ands	r3, r2
 80093c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	091b      	lsrs	r3, r3, #4
 80093cc:	f003 0201 	and.w	r2, r3, #1
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	4313      	orrs	r3, r2
 80093da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d017      	beq.n	800941e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	2203      	movs	r2, #3
 80093fa:	fa02 f303 	lsl.w	r3, r2, r3
 80093fe:	43db      	mvns	r3, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	4013      	ands	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4313      	orrs	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d123      	bne.n	8009472 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	08da      	lsrs	r2, r3, #3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3208      	adds	r2, #8
 8009432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f003 0307 	and.w	r3, r3, #7
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	220f      	movs	r2, #15
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	43db      	mvns	r3, r3
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	4013      	ands	r3, r2
 800944c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	f003 0307 	and.w	r3, r3, #7
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	fa02 f303 	lsl.w	r3, r2, r3
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	4313      	orrs	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	08da      	lsrs	r2, r3, #3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3208      	adds	r2, #8
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	2203      	movs	r2, #3
 800947e:	fa02 f303 	lsl.w	r3, r2, r3
 8009482:	43db      	mvns	r3, r3
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	4013      	ands	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f003 0203 	and.w	r2, r3, #3
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4313      	orrs	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 80e0 	beq.w	8009674 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094b4:	4b2f      	ldr	r3, [pc, #188]	; (8009574 <HAL_GPIO_Init+0x238>)
 80094b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094ba:	4a2e      	ldr	r2, [pc, #184]	; (8009574 <HAL_GPIO_Init+0x238>)
 80094bc:	f043 0302 	orr.w	r3, r3, #2
 80094c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80094c4:	4b2b      	ldr	r3, [pc, #172]	; (8009574 <HAL_GPIO_Init+0x238>)
 80094c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80094d2:	4a29      	ldr	r2, [pc, #164]	; (8009578 <HAL_GPIO_Init+0x23c>)
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	089b      	lsrs	r3, r3, #2
 80094d8:	3302      	adds	r3, #2
 80094da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	220f      	movs	r2, #15
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	43db      	mvns	r3, r3
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	4013      	ands	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a20      	ldr	r2, [pc, #128]	; (800957c <HAL_GPIO_Init+0x240>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d052      	beq.n	80095a4 <HAL_GPIO_Init+0x268>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a1f      	ldr	r2, [pc, #124]	; (8009580 <HAL_GPIO_Init+0x244>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d031      	beq.n	800956a <HAL_GPIO_Init+0x22e>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a1e      	ldr	r2, [pc, #120]	; (8009584 <HAL_GPIO_Init+0x248>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d02b      	beq.n	8009566 <HAL_GPIO_Init+0x22a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a1d      	ldr	r2, [pc, #116]	; (8009588 <HAL_GPIO_Init+0x24c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d025      	beq.n	8009562 <HAL_GPIO_Init+0x226>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a1c      	ldr	r2, [pc, #112]	; (800958c <HAL_GPIO_Init+0x250>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d01f      	beq.n	800955e <HAL_GPIO_Init+0x222>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a1b      	ldr	r2, [pc, #108]	; (8009590 <HAL_GPIO_Init+0x254>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d019      	beq.n	800955a <HAL_GPIO_Init+0x21e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a1a      	ldr	r2, [pc, #104]	; (8009594 <HAL_GPIO_Init+0x258>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d013      	beq.n	8009556 <HAL_GPIO_Init+0x21a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a19      	ldr	r2, [pc, #100]	; (8009598 <HAL_GPIO_Init+0x25c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00d      	beq.n	8009552 <HAL_GPIO_Init+0x216>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a18      	ldr	r2, [pc, #96]	; (800959c <HAL_GPIO_Init+0x260>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d007      	beq.n	800954e <HAL_GPIO_Init+0x212>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <HAL_GPIO_Init+0x264>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d101      	bne.n	800954a <HAL_GPIO_Init+0x20e>
 8009546:	2309      	movs	r3, #9
 8009548:	e02d      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 800954a:	230a      	movs	r3, #10
 800954c:	e02b      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 800954e:	2308      	movs	r3, #8
 8009550:	e029      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 8009552:	2307      	movs	r3, #7
 8009554:	e027      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 8009556:	2306      	movs	r3, #6
 8009558:	e025      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 800955a:	2305      	movs	r3, #5
 800955c:	e023      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 800955e:	2304      	movs	r3, #4
 8009560:	e021      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 8009562:	2303      	movs	r3, #3
 8009564:	e01f      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 8009566:	2302      	movs	r3, #2
 8009568:	e01d      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 800956a:	2301      	movs	r3, #1
 800956c:	e01b      	b.n	80095a6 <HAL_GPIO_Init+0x26a>
 800956e:	bf00      	nop
 8009570:	58000080 	.word	0x58000080
 8009574:	58024400 	.word	0x58024400
 8009578:	58000400 	.word	0x58000400
 800957c:	58020000 	.word	0x58020000
 8009580:	58020400 	.word	0x58020400
 8009584:	58020800 	.word	0x58020800
 8009588:	58020c00 	.word	0x58020c00
 800958c:	58021000 	.word	0x58021000
 8009590:	58021400 	.word	0x58021400
 8009594:	58021800 	.word	0x58021800
 8009598:	58021c00 	.word	0x58021c00
 800959c:	58022000 	.word	0x58022000
 80095a0:	58022400 	.word	0x58022400
 80095a4:	2300      	movs	r3, #0
 80095a6:	69fa      	ldr	r2, [r7, #28]
 80095a8:	f002 0203 	and.w	r2, r2, #3
 80095ac:	0092      	lsls	r2, r2, #2
 80095ae:	4093      	lsls	r3, r2
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095b6:	4938      	ldr	r1, [pc, #224]	; (8009698 <HAL_GPIO_Init+0x35c>)
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	089b      	lsrs	r3, r3, #2
 80095bc:	3302      	adds	r3, #2
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80095c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	43db      	mvns	r3, r3
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	4013      	ands	r3, r2
 80095d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80095ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80095f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	43db      	mvns	r3, r3
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	4013      	ands	r3, r2
 8009602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	43db      	mvns	r3, r3
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	4013      	ands	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	43db      	mvns	r3, r3
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	4013      	ands	r3, r2
 8009658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	3301      	adds	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	f47f ae63 	bne.w	8009350 <HAL_GPIO_Init+0x14>
  }
}
 800968a:	bf00      	nop
 800968c:	bf00      	nop
 800968e:	3724      	adds	r7, #36	; 0x24
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	58000400 	.word	0x58000400

0800969c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	887b      	ldrh	r3, [r7, #2]
 80096ae:	4013      	ands	r3, r2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80096b4:	2301      	movs	r3, #1
 80096b6:	73fb      	strb	r3, [r7, #15]
 80096b8:	e001      	b.n	80096be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80096be:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	807b      	strh	r3, [r7, #2]
 80096d8:	4613      	mov	r3, r2
 80096da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096dc:	787b      	ldrb	r3, [r7, #1]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096e2:	887a      	ldrh	r2, [r7, #2]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80096e8:	e003      	b.n	80096f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80096ea:	887b      	ldrh	r3, [r7, #2]
 80096ec:	041a      	lsls	r2, r3, #16
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	619a      	str	r2, [r3, #24]
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
	...

08009700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e08b      	b.n	800982a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7fa f8f0 	bl	800390c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2224      	movs	r2, #36	; 0x24
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0201 	bic.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009750:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009760:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d107      	bne.n	800977a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009776:	609a      	str	r2, [r3, #8]
 8009778:	e006      	b.n	8009788 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009786:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d108      	bne.n	80097a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	e007      	b.n	80097b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6859      	ldr	r1, [r3, #4]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <HAL_I2C_Init+0x134>)
 80097be:	430b      	orrs	r3, r1
 80097c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69d9      	ldr	r1, [r3, #28]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a1a      	ldr	r2, [r3, #32]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	02008000 	.word	0x02008000

08009838 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af02      	add	r7, sp, #8
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	461a      	mov	r2, r3
 8009844:	460b      	mov	r3, r1
 8009846:	817b      	strh	r3, [r7, #10]
 8009848:	4613      	mov	r3, r2
 800984a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b20      	cmp	r3, #32
 8009856:	f040 80fd 	bne.w	8009a54 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009860:	2b01      	cmp	r3, #1
 8009862:	d101      	bne.n	8009868 <HAL_I2C_Master_Transmit+0x30>
 8009864:	2302      	movs	r3, #2
 8009866:	e0f6      	b.n	8009a56 <HAL_I2C_Master_Transmit+0x21e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009870:	f7fa fdf4 	bl	800445c <HAL_GetTick>
 8009874:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	2319      	movs	r3, #25
 800987c:	2201      	movs	r2, #1
 800987e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 fa0a 	bl	8009c9c <I2C_WaitOnFlagUntilTimeout>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e0e1      	b.n	8009a56 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2221      	movs	r2, #33	; 0x21
 8009896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2210      	movs	r2, #16
 800989e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	893a      	ldrh	r2, [r7, #8]
 80098b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2bff      	cmp	r3, #255	; 0xff
 80098c2:	d906      	bls.n	80098d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	22ff      	movs	r2, #255	; 0xff
 80098c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80098ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e007      	b.n	80098e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80098dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d024      	beq.n	8009934 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	781a      	ldrb	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009904:	b29b      	uxth	r3, r3
 8009906:	3b01      	subs	r3, #1
 8009908:	b29a      	uxth	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991e:	b2db      	uxtb	r3, r3
 8009920:	3301      	adds	r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	8979      	ldrh	r1, [r7, #10]
 8009926:	4b4e      	ldr	r3, [pc, #312]	; (8009a60 <HAL_I2C_Master_Transmit+0x228>)
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 fc05 	bl	800a13c <I2C_TransferConfig>
 8009932:	e066      	b.n	8009a02 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009938:	b2da      	uxtb	r2, r3
 800993a:	8979      	ldrh	r1, [r7, #10]
 800993c:	4b48      	ldr	r3, [pc, #288]	; (8009a60 <HAL_I2C_Master_Transmit+0x228>)
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 fbfa 	bl	800a13c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009948:	e05b      	b.n	8009a02 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	6a39      	ldr	r1, [r7, #32]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 f9fd 	bl	8009d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e07b      	b.n	8009a56 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	781a      	ldrb	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009978:	b29b      	uxth	r3, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	b29a      	uxth	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009986:	3b01      	subs	r3, #1
 8009988:	b29a      	uxth	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009992:	b29b      	uxth	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d034      	beq.n	8009a02 <HAL_I2C_Master_Transmit+0x1ca>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999c:	2b00      	cmp	r3, #0
 800999e:	d130      	bne.n	8009a02 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	2200      	movs	r2, #0
 80099a8:	2180      	movs	r1, #128	; 0x80
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f976 	bl	8009c9c <I2C_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e04d      	b.n	8009a56 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2bff      	cmp	r3, #255	; 0xff
 80099c2:	d90e      	bls.n	80099e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	22ff      	movs	r2, #255	; 0xff
 80099c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	8979      	ldrh	r1, [r7, #10]
 80099d2:	2300      	movs	r3, #0
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fbae 	bl	800a13c <I2C_TransferConfig>
 80099e0:	e00f      	b.n	8009a02 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	8979      	ldrh	r1, [r7, #10]
 80099f4:	2300      	movs	r3, #0
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fb9d 	bl	800a13c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d19e      	bne.n	800994a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	6a39      	ldr	r1, [r7, #32]
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 f9e3 	bl	8009ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e01a      	b.n	8009a56 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2220      	movs	r2, #32
 8009a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6859      	ldr	r1, [r3, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <HAL_I2C_Master_Transmit+0x22c>)
 8009a34:	400b      	ands	r3, r1
 8009a36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e000      	b.n	8009a56 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009a54:	2302      	movs	r3, #2
  }
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	80002000 	.word	0x80002000
 8009a64:	fe00e800 	.word	0xfe00e800

08009a68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af02      	add	r7, sp, #8
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	461a      	mov	r2, r3
 8009a74:	460b      	mov	r3, r1
 8009a76:	817b      	strh	r3, [r7, #10]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	f040 80db 	bne.w	8009c40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d101      	bne.n	8009a98 <HAL_I2C_Master_Receive+0x30>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e0d4      	b.n	8009c42 <HAL_I2C_Master_Receive+0x1da>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009aa0:	f7fa fcdc 	bl	800445c <HAL_GetTick>
 8009aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	2319      	movs	r3, #25
 8009aac:	2201      	movs	r2, #1
 8009aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f8f2 	bl	8009c9c <I2C_WaitOnFlagUntilTimeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e0bf      	b.n	8009c42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2222      	movs	r2, #34	; 0x22
 8009ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2210      	movs	r2, #16
 8009ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	893a      	ldrh	r2, [r7, #8]
 8009ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	2bff      	cmp	r3, #255	; 0xff
 8009af2:	d90e      	bls.n	8009b12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	22ff      	movs	r2, #255	; 0xff
 8009af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	8979      	ldrh	r1, [r7, #10]
 8009b02:	4b52      	ldr	r3, [pc, #328]	; (8009c4c <HAL_I2C_Master_Receive+0x1e4>)
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fb16 	bl	800a13c <I2C_TransferConfig>
 8009b10:	e06d      	b.n	8009bee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	8979      	ldrh	r1, [r7, #10]
 8009b24:	4b49      	ldr	r3, [pc, #292]	; (8009c4c <HAL_I2C_Master_Receive+0x1e4>)
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 fb05 	bl	800a13c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009b32:	e05c      	b.n	8009bee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	6a39      	ldr	r1, [r7, #32]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f993 	bl	8009e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e07c      	b.n	8009c42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b64:	3b01      	subs	r3, #1
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d034      	beq.n	8009bee <HAL_I2C_Master_Receive+0x186>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d130      	bne.n	8009bee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2200      	movs	r2, #0
 8009b94:	2180      	movs	r1, #128	; 0x80
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 f880 	bl	8009c9c <I2C_WaitOnFlagUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e04d      	b.n	8009c42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2bff      	cmp	r3, #255	; 0xff
 8009bae:	d90e      	bls.n	8009bce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	22ff      	movs	r2, #255	; 0xff
 8009bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	8979      	ldrh	r1, [r7, #10]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 fab8 	bl	800a13c <I2C_TransferConfig>
 8009bcc:	e00f      	b.n	8009bee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	8979      	ldrh	r1, [r7, #10]
 8009be0:	2300      	movs	r3, #0
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 faa7 	bl	800a13c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d19d      	bne.n	8009b34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	6a39      	ldr	r1, [r7, #32]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f8ed 	bl	8009ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e01a      	b.n	8009c42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2220      	movs	r2, #32
 8009c12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6859      	ldr	r1, [r3, #4]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	4b0c      	ldr	r3, [pc, #48]	; (8009c50 <HAL_I2C_Master_Receive+0x1e8>)
 8009c20:	400b      	ands	r3, r1
 8009c22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e000      	b.n	8009c42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009c40:	2302      	movs	r3, #2
  }
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	80002400 	.word	0x80002400
 8009c50:	fe00e800 	.word	0xfe00e800

08009c54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d103      	bne.n	8009c72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d007      	beq.n	8009c90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0201 	orr.w	r2, r2, #1
 8009c8e:	619a      	str	r2, [r3, #24]
  }
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cac:	e03b      	b.n	8009d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cae:	69ba      	ldr	r2, [r7, #24]
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f962 	bl	8009f7c <I2C_IsErrorOccurred>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e041      	b.n	8009d46 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cc8:	d02d      	beq.n	8009d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cca:	f7fa fbc7 	bl	800445c <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d302      	bcc.n	8009ce0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d122      	bne.n	8009d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	4013      	ands	r3, r2
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	bf0c      	ite	eq
 8009cf0:	2301      	moveq	r3, #1
 8009cf2:	2300      	movne	r3, #0
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d113      	bne.n	8009d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	f043 0220 	orr.w	r2, r3, #32
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e00f      	b.n	8009d46 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	699a      	ldr	r2, [r3, #24]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	bf0c      	ite	eq
 8009d36:	2301      	moveq	r3, #1
 8009d38:	2300      	movne	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d0b4      	beq.n	8009cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d5a:	e033      	b.n	8009dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f90b 	bl	8009f7c <I2C_IsErrorOccurred>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e031      	b.n	8009dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d76:	d025      	beq.n	8009dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d78:	f7fa fb70 	bl	800445c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d302      	bcc.n	8009d8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d11a      	bne.n	8009dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d013      	beq.n	8009dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	f043 0220 	orr.w	r2, r3, #32
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e007      	b.n	8009dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d1c4      	bne.n	8009d5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009de8:	e02f      	b.n	8009e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f8c4 	bl	8009f7c <I2C_IsErrorOccurred>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e02d      	b.n	8009e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dfe:	f7fa fb2d 	bl	800445c <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d302      	bcc.n	8009e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d11a      	bne.n	8009e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d013      	beq.n	8009e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e26:	f043 0220 	orr.w	r2, r3, #32
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e007      	b.n	8009e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	f003 0320 	and.w	r3, r3, #32
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d1c8      	bne.n	8009dea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e74:	e071      	b.n	8009f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f87e 	bl	8009f7c <I2C_IsErrorOccurred>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d13b      	bne.n	8009f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d138      	bne.n	8009f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d105      	bne.n	8009eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b10      	cmp	r3, #16
 8009ec4:	d121      	bne.n	8009f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2210      	movs	r2, #16
 8009ecc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2204      	movs	r2, #4
 8009ed2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6859      	ldr	r1, [r3, #4]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009ee8:	400b      	ands	r3, r1
 8009eea:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	75fb      	strb	r3, [r7, #23]
 8009f08:	e002      	b.n	8009f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009f10:	f7fa faa4 	bl	800445c <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d302      	bcc.n	8009f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d119      	bne.n	8009f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d116      	bne.n	8009f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d00f      	beq.n	8009f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3e:	f043 0220 	orr.w	r2, r3, #32
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d002      	beq.n	8009f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d083      	beq.n	8009e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	fe00e800 	.word	0xfe00e800

08009f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	; 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d068      	beq.n	800a07a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2210      	movs	r2, #16
 8009fae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009fb0:	e049      	b.n	800a046 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb8:	d045      	beq.n	800a046 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009fba:	f7fa fa4f 	bl	800445c <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d302      	bcc.n	8009fd0 <I2C_IsErrorOccurred+0x54>
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d13a      	bne.n	800a046 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ff2:	d121      	bne.n	800a038 <I2C_IsErrorOccurred+0xbc>
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ffa:	d01d      	beq.n	800a038 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009ffc:	7cfb      	ldrb	r3, [r7, #19]
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d01a      	beq.n	800a038 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a010:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a012:	f7fa fa23 	bl	800445c <HAL_GetTick>
 800a016:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a018:	e00e      	b.n	800a038 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a01a:	f7fa fa1f 	bl	800445c <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b19      	cmp	r3, #25
 800a026:	d907      	bls.n	800a038 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	f043 0320 	orr.w	r3, r3, #32
 800a02e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a036:	e006      	b.n	800a046 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	f003 0320 	and.w	r3, r3, #32
 800a042:	2b20      	cmp	r3, #32
 800a044:	d1e9      	bne.n	800a01a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f003 0320 	and.w	r3, r3, #32
 800a050:	2b20      	cmp	r3, #32
 800a052:	d003      	beq.n	800a05c <I2C_IsErrorOccurred+0xe0>
 800a054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0aa      	beq.n	8009fb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a060:	2b00      	cmp	r3, #0
 800a062:	d103      	bne.n	800a06c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2220      	movs	r2, #32
 800a06a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	f043 0304 	orr.w	r3, r3, #4
 800a072:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	f043 0301 	orr.w	r3, r3, #1
 800a092:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a09c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	f043 0308 	orr.w	r3, r3, #8
 800a0b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f043 0302 	orr.w	r3, r3, #2
 800a0d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d01c      	beq.n	800a12a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff fdaf 	bl	8009c54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6859      	ldr	r1, [r3, #4]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <I2C_IsErrorOccurred+0x1bc>)
 800a102:	400b      	ands	r3, r1
 800a104:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	431a      	orrs	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3728      	adds	r7, #40	; 0x28
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	fe00e800 	.word	0xfe00e800

0800a13c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	607b      	str	r3, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	817b      	strh	r3, [r7, #10]
 800a14a:	4613      	mov	r3, r2
 800a14c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a14e:	897b      	ldrh	r3, [r7, #10]
 800a150:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a154:	7a7b      	ldrb	r3, [r7, #9]
 800a156:	041b      	lsls	r3, r3, #16
 800a158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a15c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	4313      	orrs	r3, r2
 800a166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a16a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	0d5b      	lsrs	r3, r3, #21
 800a176:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a17a:	4b08      	ldr	r3, [pc, #32]	; (800a19c <I2C_TransferConfig+0x60>)
 800a17c:	430b      	orrs	r3, r1
 800a17e:	43db      	mvns	r3, r3
 800a180:	ea02 0103 	and.w	r1, r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a18e:	bf00      	nop
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	03ff63ff 	.word	0x03ff63ff

0800a1a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d138      	bne.n	800a228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e032      	b.n	800a22a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2224      	movs	r2, #36	; 0x24
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f022 0201 	bic.w	r2, r2, #1
 800a1e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6819      	ldr	r1, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0201 	orr.w	r2, r2, #1
 800a212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2220      	movs	r2, #32
 800a218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a228:	2302      	movs	r3, #2
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a236:	b480      	push	{r7}
 800a238:	b085      	sub	sp, #20
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b20      	cmp	r3, #32
 800a24a:	d139      	bne.n	800a2c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a256:	2302      	movs	r3, #2
 800a258:	e033      	b.n	800a2c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2224      	movs	r2, #36	; 0x24
 800a266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0201 	bic.w	r2, r2, #1
 800a278:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a288:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f042 0201 	orr.w	r2, r2, #1
 800a2aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	e000      	b.n	800a2c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a2c0:	2302      	movs	r3, #2
  }
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2d8:	4b0d      	ldr	r3, [pc, #52]	; (800a310 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a2da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2de:	4a0c      	ldr	r2, [pc, #48]	; (800a310 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a2e0:	f043 0302 	orr.w	r3, r3, #2
 800a2e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a2e8:	4b09      	ldr	r3, [pc, #36]	; (800a310 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a2ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	4906      	ldr	r1, [pc, #24]	; (800a314 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	604b      	str	r3, [r1, #4]
}
 800a302:	bf00      	nop
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	58024400 	.word	0x58024400
 800a314:	58000400 	.word	0x58000400

0800a318 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800a324:	4b18      	ldr	r3, [pc, #96]	; (800a388 <HAL_PWR_EnterSTOPMode+0x70>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f023 0201 	bic.w	r2, r3, #1
 800a32c:	4916      	ldr	r1, [pc, #88]	; (800a388 <HAL_PWR_EnterSTOPMode+0x70>)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4313      	orrs	r3, r2
 800a332:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800a334:	4b14      	ldr	r3, [pc, #80]	; (800a388 <HAL_PWR_EnterSTOPMode+0x70>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	4a13      	ldr	r2, [pc, #76]	; (800a388 <HAL_PWR_EnterSTOPMode+0x70>)
 800a33a:	f023 0305 	bic.w	r3, r3, #5
 800a33e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800a340:	4b11      	ldr	r3, [pc, #68]	; (800a388 <HAL_PWR_EnterSTOPMode+0x70>)
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	4a10      	ldr	r2, [pc, #64]	; (800a388 <HAL_PWR_EnterSTOPMode+0x70>)
 800a346:	f023 0302 	bic.w	r3, r3, #2
 800a34a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <HAL_PWR_EnterSTOPMode+0x74>)
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	4a0e      	ldr	r2, [pc, #56]	; (800a38c <HAL_PWR_EnterSTOPMode+0x74>)
 800a352:	f043 0304 	orr.w	r3, r3, #4
 800a356:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a358:	f3bf 8f4f 	dsb	sy
}
 800a35c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a35e:	f3bf 8f6f 	isb	sy
}
 800a362:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800a36a:	bf30      	wfi
 800a36c:	e000      	b.n	800a370 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800a36e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a370:	4b06      	ldr	r3, [pc, #24]	; (800a38c <HAL_PWR_EnterSTOPMode+0x74>)
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	4a05      	ldr	r2, [pc, #20]	; (800a38c <HAL_PWR_EnterSTOPMode+0x74>)
 800a376:	f023 0304 	bic.w	r3, r3, #4
 800a37a:	6113      	str	r3, [r2, #16]
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	58024800 	.word	0x58024800
 800a38c:	e000ed00 	.word	0xe000ed00

0800a390 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a398:	4b19      	ldr	r3, [pc, #100]	; (800a400 <HAL_PWREx_ConfigSupply+0x70>)
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d00a      	beq.n	800a3ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a3a4:	4b16      	ldr	r3, [pc, #88]	; (800a400 <HAL_PWREx_ConfigSupply+0x70>)
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f003 0307 	and.w	r3, r3, #7
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d001      	beq.n	800a3b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e01f      	b.n	800a3f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e01d      	b.n	800a3f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a3ba:	4b11      	ldr	r3, [pc, #68]	; (800a400 <HAL_PWREx_ConfigSupply+0x70>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f023 0207 	bic.w	r2, r3, #7
 800a3c2:	490f      	ldr	r1, [pc, #60]	; (800a400 <HAL_PWREx_ConfigSupply+0x70>)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a3ca:	f7fa f847 	bl	800445c <HAL_GetTick>
 800a3ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3d0:	e009      	b.n	800a3e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a3d2:	f7fa f843 	bl	800445c <HAL_GetTick>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3e0:	d901      	bls.n	800a3e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e007      	b.n	800a3f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3e6:	4b06      	ldr	r3, [pc, #24]	; (800a400 <HAL_PWREx_ConfigSupply+0x70>)
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f2:	d1ee      	bne.n	800a3d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	58024800 	.word	0x58024800

0800a404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08c      	sub	sp, #48	; 0x30
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d102      	bne.n	800a418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	f000 bc48 	b.w	800aca8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8088 	beq.w	800a536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a426:	4b99      	ldr	r3, [pc, #612]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a430:	4b96      	ldr	r3, [pc, #600]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a434:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	2b10      	cmp	r3, #16
 800a43a:	d007      	beq.n	800a44c <HAL_RCC_OscConfig+0x48>
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	2b18      	cmp	r3, #24
 800a440:	d111      	bne.n	800a466 <HAL_RCC_OscConfig+0x62>
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d10c      	bne.n	800a466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a44c:	4b8f      	ldr	r3, [pc, #572]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d06d      	beq.n	800a534 <HAL_RCC_OscConfig+0x130>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d169      	bne.n	800a534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	f000 bc21 	b.w	800aca8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a46e:	d106      	bne.n	800a47e <HAL_RCC_OscConfig+0x7a>
 800a470:	4b86      	ldr	r3, [pc, #536]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a85      	ldr	r2, [pc, #532]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	e02e      	b.n	800a4dc <HAL_RCC_OscConfig+0xd8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10c      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x9c>
 800a486:	4b81      	ldr	r3, [pc, #516]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a80      	ldr	r2, [pc, #512]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a48c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	4b7e      	ldr	r3, [pc, #504]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a7d      	ldr	r2, [pc, #500]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	e01d      	b.n	800a4dc <HAL_RCC_OscConfig+0xd8>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4a8:	d10c      	bne.n	800a4c4 <HAL_RCC_OscConfig+0xc0>
 800a4aa:	4b78      	ldr	r3, [pc, #480]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a77      	ldr	r2, [pc, #476]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	4b75      	ldr	r3, [pc, #468]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a74      	ldr	r2, [pc, #464]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	e00b      	b.n	800a4dc <HAL_RCC_OscConfig+0xd8>
 800a4c4:	4b71      	ldr	r3, [pc, #452]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a70      	ldr	r2, [pc, #448]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	4b6e      	ldr	r3, [pc, #440]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a6d      	ldr	r2, [pc, #436]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a4d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d013      	beq.n	800a50c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4e4:	f7f9 ffba 	bl	800445c <HAL_GetTick>
 800a4e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4ea:	e008      	b.n	800a4fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4ec:	f7f9 ffb6 	bl	800445c <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	2b64      	cmp	r3, #100	; 0x64
 800a4f8:	d901      	bls.n	800a4fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e3d4      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4fe:	4b63      	ldr	r3, [pc, #396]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0f0      	beq.n	800a4ec <HAL_RCC_OscConfig+0xe8>
 800a50a:	e014      	b.n	800a536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50c:	f7f9 ffa6 	bl	800445c <HAL_GetTick>
 800a510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a512:	e008      	b.n	800a526 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a514:	f7f9 ffa2 	bl	800445c <HAL_GetTick>
 800a518:	4602      	mov	r2, r0
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2b64      	cmp	r3, #100	; 0x64
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e3c0      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a526:	4b59      	ldr	r3, [pc, #356]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1f0      	bne.n	800a514 <HAL_RCC_OscConfig+0x110>
 800a532:	e000      	b.n	800a536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 80ca 	beq.w	800a6d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a544:	4b51      	ldr	r3, [pc, #324]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a54c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a54e:	4b4f      	ldr	r3, [pc, #316]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a552:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <HAL_RCC_OscConfig+0x166>
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	2b18      	cmp	r3, #24
 800a55e:	d156      	bne.n	800a60e <HAL_RCC_OscConfig+0x20a>
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d151      	bne.n	800a60e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a56a:	4b48      	ldr	r3, [pc, #288]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <HAL_RCC_OscConfig+0x17e>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e392      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a582:	4b42      	ldr	r3, [pc, #264]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f023 0219 	bic.w	r2, r3, #25
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	493f      	ldr	r1, [pc, #252]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a590:	4313      	orrs	r3, r2
 800a592:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7f9 ff62 	bl	800445c <HAL_GetTick>
 800a598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a59c:	f7f9 ff5e 	bl	800445c <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e37c      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5ae:	4b37      	ldr	r3, [pc, #220]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0304 	and.w	r3, r3, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0f0      	beq.n	800a59c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ba:	f7f9 ff5b 	bl	8004474 <HAL_GetREVID>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d817      	bhi.n	800a5f8 <HAL_RCC_OscConfig+0x1f4>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	2b40      	cmp	r3, #64	; 0x40
 800a5ce:	d108      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x1de>
 800a5d0:	4b2e      	ldr	r3, [pc, #184]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a5d8:	4a2c      	ldr	r2, [pc, #176]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a5da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5e0:	e07a      	b.n	800a6d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5e2:	4b2a      	ldr	r3, [pc, #168]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	031b      	lsls	r3, r3, #12
 800a5f0:	4926      	ldr	r1, [pc, #152]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5f6:	e06f      	b.n	800a6d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5f8:	4b24      	ldr	r3, [pc, #144]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	061b      	lsls	r3, r3, #24
 800a606:	4921      	ldr	r1, [pc, #132]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a60c:	e064      	b.n	800a6d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d047      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a616:	4b1d      	ldr	r3, [pc, #116]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f023 0219 	bic.w	r2, r3, #25
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	491a      	ldr	r1, [pc, #104]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a624:	4313      	orrs	r3, r2
 800a626:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a628:	f7f9 ff18 	bl	800445c <HAL_GetTick>
 800a62c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a630:	f7f9 ff14 	bl	800445c <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e332      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a642:	4b12      	ldr	r3, [pc, #72]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0f0      	beq.n	800a630 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a64e:	f7f9 ff11 	bl	8004474 <HAL_GetREVID>
 800a652:	4603      	mov	r3, r0
 800a654:	f241 0203 	movw	r2, #4099	; 0x1003
 800a658:	4293      	cmp	r3, r2
 800a65a:	d819      	bhi.n	800a690 <HAL_RCC_OscConfig+0x28c>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	2b40      	cmp	r3, #64	; 0x40
 800a662:	d108      	bne.n	800a676 <HAL_RCC_OscConfig+0x272>
 800a664:	4b09      	ldr	r3, [pc, #36]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a66c:	4a07      	ldr	r2, [pc, #28]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a66e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a672:	6053      	str	r3, [r2, #4]
 800a674:	e030      	b.n	800a6d8 <HAL_RCC_OscConfig+0x2d4>
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	031b      	lsls	r3, r3, #12
 800a684:	4901      	ldr	r1, [pc, #4]	; (800a68c <HAL_RCC_OscConfig+0x288>)
 800a686:	4313      	orrs	r3, r2
 800a688:	604b      	str	r3, [r1, #4]
 800a68a:	e025      	b.n	800a6d8 <HAL_RCC_OscConfig+0x2d4>
 800a68c:	58024400 	.word	0x58024400
 800a690:	4b9a      	ldr	r3, [pc, #616]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	061b      	lsls	r3, r3, #24
 800a69e:	4997      	ldr	r1, [pc, #604]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	604b      	str	r3, [r1, #4]
 800a6a4:	e018      	b.n	800a6d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6a6:	4b95      	ldr	r3, [pc, #596]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a94      	ldr	r2, [pc, #592]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b2:	f7f9 fed3 	bl	800445c <HAL_GetTick>
 800a6b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6b8:	e008      	b.n	800a6cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6ba:	f7f9 fecf 	bl	800445c <HAL_GetTick>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d901      	bls.n	800a6cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e2ed      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6cc:	4b8b      	ldr	r3, [pc, #556]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1f0      	bne.n	800a6ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 80a9 	beq.w	800a838 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6e6:	4b85      	ldr	r3, [pc, #532]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6f0:	4b82      	ldr	r3, [pc, #520]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d007      	beq.n	800a70c <HAL_RCC_OscConfig+0x308>
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b18      	cmp	r3, #24
 800a700:	d13a      	bne.n	800a778 <HAL_RCC_OscConfig+0x374>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d135      	bne.n	800a778 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a70c:	4b7b      	ldr	r3, [pc, #492]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <HAL_RCC_OscConfig+0x320>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	2b80      	cmp	r3, #128	; 0x80
 800a71e:	d001      	beq.n	800a724 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e2c1      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a724:	f7f9 fea6 	bl	8004474 <HAL_GetREVID>
 800a728:	4603      	mov	r3, r0
 800a72a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a72e:	4293      	cmp	r3, r2
 800a730:	d817      	bhi.n	800a762 <HAL_RCC_OscConfig+0x35e>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	2b20      	cmp	r3, #32
 800a738:	d108      	bne.n	800a74c <HAL_RCC_OscConfig+0x348>
 800a73a:	4b70      	ldr	r3, [pc, #448]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a742:	4a6e      	ldr	r2, [pc, #440]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a748:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a74a:	e075      	b.n	800a838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a74c:	4b6b      	ldr	r3, [pc, #428]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	069b      	lsls	r3, r3, #26
 800a75a:	4968      	ldr	r1, [pc, #416]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a760:	e06a      	b.n	800a838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a762:	4b66      	ldr	r3, [pc, #408]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	061b      	lsls	r3, r3, #24
 800a770:	4962      	ldr	r1, [pc, #392]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a772:	4313      	orrs	r3, r2
 800a774:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a776:	e05f      	b.n	800a838 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d042      	beq.n	800a806 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a780:	4b5e      	ldr	r3, [pc, #376]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a5d      	ldr	r2, [pc, #372]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a78c:	f7f9 fe66 	bl	800445c <HAL_GetTick>
 800a790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a792:	e008      	b.n	800a7a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a794:	f7f9 fe62 	bl	800445c <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d901      	bls.n	800a7a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e280      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7a6:	4b55      	ldr	r3, [pc, #340]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0f0      	beq.n	800a794 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a7b2:	f7f9 fe5f 	bl	8004474 <HAL_GetREVID>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d817      	bhi.n	800a7f0 <HAL_RCC_OscConfig+0x3ec>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d108      	bne.n	800a7da <HAL_RCC_OscConfig+0x3d6>
 800a7c8:	4b4c      	ldr	r3, [pc, #304]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a7d0:	4a4a      	ldr	r2, [pc, #296]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a7d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7d6:	6053      	str	r3, [r2, #4]
 800a7d8:	e02e      	b.n	800a838 <HAL_RCC_OscConfig+0x434>
 800a7da:	4b48      	ldr	r3, [pc, #288]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	069b      	lsls	r3, r3, #26
 800a7e8:	4944      	ldr	r1, [pc, #272]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	604b      	str	r3, [r1, #4]
 800a7ee:	e023      	b.n	800a838 <HAL_RCC_OscConfig+0x434>
 800a7f0:	4b42      	ldr	r3, [pc, #264]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	061b      	lsls	r3, r3, #24
 800a7fe:	493f      	ldr	r1, [pc, #252]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a800:	4313      	orrs	r3, r2
 800a802:	60cb      	str	r3, [r1, #12]
 800a804:	e018      	b.n	800a838 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a806:	4b3d      	ldr	r3, [pc, #244]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a3c      	ldr	r2, [pc, #240]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a80c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a812:	f7f9 fe23 	bl	800445c <HAL_GetTick>
 800a816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a818:	e008      	b.n	800a82c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a81a:	f7f9 fe1f 	bl	800445c <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e23d      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a82c:	4b33      	ldr	r3, [pc, #204]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f0      	bne.n	800a81a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b00      	cmp	r3, #0
 800a842:	d036      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d019      	beq.n	800a880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a84c:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a850:	4a2a      	ldr	r2, [pc, #168]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a852:	f043 0301 	orr.w	r3, r3, #1
 800a856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a858:	f7f9 fe00 	bl	800445c <HAL_GetTick>
 800a85c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a860:	f7f9 fdfc 	bl	800445c <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e21a      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a872:	4b22      	ldr	r3, [pc, #136]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0f0      	beq.n	800a860 <HAL_RCC_OscConfig+0x45c>
 800a87e:	e018      	b.n	800a8b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a880:	4b1e      	ldr	r3, [pc, #120]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a884:	4a1d      	ldr	r2, [pc, #116]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a886:	f023 0301 	bic.w	r3, r3, #1
 800a88a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88c:	f7f9 fde6 	bl	800445c <HAL_GetTick>
 800a890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a892:	e008      	b.n	800a8a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a894:	f7f9 fde2 	bl	800445c <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d901      	bls.n	800a8a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e200      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8aa:	f003 0302 	and.w	r3, r3, #2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f0      	bne.n	800a894 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d039      	beq.n	800a932 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d01c      	beq.n	800a900 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a8c6:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a0c      	ldr	r2, [pc, #48]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a8cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8d2:	f7f9 fdc3 	bl	800445c <HAL_GetTick>
 800a8d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8d8:	e008      	b.n	800a8ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8da:	f7f9 fdbf 	bl	800445c <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e1dd      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8ec:	4b03      	ldr	r3, [pc, #12]	; (800a8fc <HAL_RCC_OscConfig+0x4f8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0f0      	beq.n	800a8da <HAL_RCC_OscConfig+0x4d6>
 800a8f8:	e01b      	b.n	800a932 <HAL_RCC_OscConfig+0x52e>
 800a8fa:	bf00      	nop
 800a8fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a900:	4b9b      	ldr	r3, [pc, #620]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a9a      	ldr	r2, [pc, #616]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a90a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a90c:	f7f9 fda6 	bl	800445c <HAL_GetTick>
 800a910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a912:	e008      	b.n	800a926 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a914:	f7f9 fda2 	bl	800445c <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d901      	bls.n	800a926 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e1c0      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a926:	4b92      	ldr	r3, [pc, #584]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f0      	bne.n	800a914 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 8081 	beq.w	800aa42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a940:	4b8c      	ldr	r3, [pc, #560]	; (800ab74 <HAL_RCC_OscConfig+0x770>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a8b      	ldr	r2, [pc, #556]	; (800ab74 <HAL_RCC_OscConfig+0x770>)
 800a946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a94a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a94c:	f7f9 fd86 	bl	800445c <HAL_GetTick>
 800a950:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a954:	f7f9 fd82 	bl	800445c <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b64      	cmp	r3, #100	; 0x64
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e1a0      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a966:	4b83      	ldr	r3, [pc, #524]	; (800ab74 <HAL_RCC_OscConfig+0x770>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f0      	beq.n	800a954 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d106      	bne.n	800a988 <HAL_RCC_OscConfig+0x584>
 800a97a:	4b7d      	ldr	r3, [pc, #500]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97e:	4a7c      	ldr	r2, [pc, #496]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a980:	f043 0301 	orr.w	r3, r3, #1
 800a984:	6713      	str	r3, [r2, #112]	; 0x70
 800a986:	e02d      	b.n	800a9e4 <HAL_RCC_OscConfig+0x5e0>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10c      	bne.n	800a9aa <HAL_RCC_OscConfig+0x5a6>
 800a990:	4b77      	ldr	r3, [pc, #476]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a994:	4a76      	ldr	r2, [pc, #472]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a996:	f023 0301 	bic.w	r3, r3, #1
 800a99a:	6713      	str	r3, [r2, #112]	; 0x70
 800a99c:	4b74      	ldr	r3, [pc, #464]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a0:	4a73      	ldr	r2, [pc, #460]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9a2:	f023 0304 	bic.w	r3, r3, #4
 800a9a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a9a8:	e01c      	b.n	800a9e4 <HAL_RCC_OscConfig+0x5e0>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2b05      	cmp	r3, #5
 800a9b0:	d10c      	bne.n	800a9cc <HAL_RCC_OscConfig+0x5c8>
 800a9b2:	4b6f      	ldr	r3, [pc, #444]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	4a6e      	ldr	r2, [pc, #440]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9b8:	f043 0304 	orr.w	r3, r3, #4
 800a9bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a9be:	4b6c      	ldr	r3, [pc, #432]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c2:	4a6b      	ldr	r2, [pc, #428]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a9ca:	e00b      	b.n	800a9e4 <HAL_RCC_OscConfig+0x5e0>
 800a9cc:	4b68      	ldr	r3, [pc, #416]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d0:	4a67      	ldr	r2, [pc, #412]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9d2:	f023 0301 	bic.w	r3, r3, #1
 800a9d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a9d8:	4b65      	ldr	r3, [pc, #404]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9dc:	4a64      	ldr	r2, [pc, #400]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800a9de:	f023 0304 	bic.w	r3, r3, #4
 800a9e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d015      	beq.n	800aa18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ec:	f7f9 fd36 	bl	800445c <HAL_GetTick>
 800a9f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9f2:	e00a      	b.n	800aa0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9f4:	f7f9 fd32 	bl	800445c <HAL_GetTick>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d901      	bls.n	800aa0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e14e      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa0a:	4b59      	ldr	r3, [pc, #356]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0ee      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x5f0>
 800aa16:	e014      	b.n	800aa42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa18:	f7f9 fd20 	bl	800445c <HAL_GetTick>
 800aa1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa1e:	e00a      	b.n	800aa36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa20:	f7f9 fd1c 	bl	800445c <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d901      	bls.n	800aa36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e138      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa36:	4b4e      	ldr	r3, [pc, #312]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1ee      	bne.n	800aa20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 812d 	beq.w	800aca6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa4c:	4b48      	ldr	r3, [pc, #288]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa54:	2b18      	cmp	r3, #24
 800aa56:	f000 80bd 	beq.w	800abd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	f040 809e 	bne.w	800aba0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa64:	4b42      	ldr	r3, [pc, #264]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a41      	ldr	r2, [pc, #260]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa70:	f7f9 fcf4 	bl	800445c <HAL_GetTick>
 800aa74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa76:	e008      	b.n	800aa8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa78:	f7f9 fcf0 	bl	800445c <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d901      	bls.n	800aa8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e10e      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa8a:	4b39      	ldr	r3, [pc, #228]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1f0      	bne.n	800aa78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa96:	4b36      	ldr	r3, [pc, #216]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aa98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa9a:	4b37      	ldr	r3, [pc, #220]	; (800ab78 <HAL_RCC_OscConfig+0x774>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aaa6:	0112      	lsls	r2, r2, #4
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	4931      	ldr	r1, [pc, #196]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aaac:	4313      	orrs	r3, r2
 800aaae:	628b      	str	r3, [r1, #40]	; 0x28
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab4:	3b01      	subs	r3, #1
 800aab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabe:	3b01      	subs	r3, #1
 800aac0:	025b      	lsls	r3, r3, #9
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	3b01      	subs	r3, #1
 800aacc:	041b      	lsls	r3, r3, #16
 800aace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aad2:	431a      	orrs	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad8:	3b01      	subs	r3, #1
 800aada:	061b      	lsls	r3, r3, #24
 800aadc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aae0:	4923      	ldr	r1, [pc, #140]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aae6:	4b22      	ldr	r3, [pc, #136]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	4a21      	ldr	r2, [pc, #132]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aaec:	f023 0301 	bic.w	r3, r3, #1
 800aaf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aaf2:	4b1f      	ldr	r3, [pc, #124]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800aaf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaf6:	4b21      	ldr	r3, [pc, #132]	; (800ab7c <HAL_RCC_OscConfig+0x778>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aafe:	00d2      	lsls	r2, r2, #3
 800ab00:	491b      	ldr	r1, [pc, #108]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ab06:	4b1a      	ldr	r3, [pc, #104]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	f023 020c 	bic.w	r2, r3, #12
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	4917      	ldr	r1, [pc, #92]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	f023 0202 	bic.w	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab24:	4912      	ldr	r1, [pc, #72]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ab2a:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	4a10      	ldr	r2, [pc, #64]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab36:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	4a0d      	ldr	r2, [pc, #52]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ab42:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	4a0a      	ldr	r2, [pc, #40]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	4a07      	ldr	r2, [pc, #28]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab54:	f043 0301 	orr.w	r3, r3, #1
 800ab58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a04      	ldr	r2, [pc, #16]	; (800ab70 <HAL_RCC_OscConfig+0x76c>)
 800ab60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab66:	f7f9 fc79 	bl	800445c <HAL_GetTick>
 800ab6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab6c:	e011      	b.n	800ab92 <HAL_RCC_OscConfig+0x78e>
 800ab6e:	bf00      	nop
 800ab70:	58024400 	.word	0x58024400
 800ab74:	58024800 	.word	0x58024800
 800ab78:	fffffc0c 	.word	0xfffffc0c
 800ab7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab80:	f7f9 fc6c 	bl	800445c <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e08a      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab92:	4b47      	ldr	r3, [pc, #284]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCC_OscConfig+0x77c>
 800ab9e:	e082      	b.n	800aca6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aba0:	4b43      	ldr	r3, [pc, #268]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a42      	ldr	r2, [pc, #264]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800aba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abac:	f7f9 fc56 	bl	800445c <HAL_GetTick>
 800abb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abb2:	e008      	b.n	800abc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abb4:	f7f9 fc52 	bl	800445c <HAL_GetTick>
 800abb8:	4602      	mov	r2, r0
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d901      	bls.n	800abc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e070      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abc6:	4b3a      	ldr	r3, [pc, #232]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f0      	bne.n	800abb4 <HAL_RCC_OscConfig+0x7b0>
 800abd2:	e068      	b.n	800aca6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800abd4:	4b36      	ldr	r3, [pc, #216]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800abd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800abda:	4b35      	ldr	r3, [pc, #212]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d031      	beq.n	800ac4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f003 0203 	and.w	r2, r3, #3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d12a      	bne.n	800ac4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	091b      	lsrs	r3, r3, #4
 800abfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d122      	bne.n	800ac4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d11a      	bne.n	800ac4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	0a5b      	lsrs	r3, r3, #9
 800ac1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d111      	bne.n	800ac4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0c1b      	lsrs	r3, r3, #16
 800ac2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d108      	bne.n	800ac4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	0e1b      	lsrs	r3, r3, #24
 800ac3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d001      	beq.n	800ac50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e02b      	b.n	800aca8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ac50:	4b17      	ldr	r3, [pc, #92]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ac52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac54:	08db      	lsrs	r3, r3, #3
 800ac56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d01f      	beq.n	800aca6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ac66:	4b12      	ldr	r3, [pc, #72]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	4a11      	ldr	r2, [pc, #68]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ac6c:	f023 0301 	bic.w	r3, r3, #1
 800ac70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac72:	f7f9 fbf3 	bl	800445c <HAL_GetTick>
 800ac76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ac78:	bf00      	nop
 800ac7a:	f7f9 fbef 	bl	800445c <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d0f9      	beq.n	800ac7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac86:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ac88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac8a:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <HAL_RCC_OscConfig+0x8b0>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac92:	00d2      	lsls	r2, r2, #3
 800ac94:	4906      	ldr	r1, [pc, #24]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac9a:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	4a04      	ldr	r2, [pc, #16]	; (800acb0 <HAL_RCC_OscConfig+0x8ac>)
 800aca0:	f043 0301 	orr.w	r3, r3, #1
 800aca4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3730      	adds	r7, #48	; 0x30
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	58024400 	.word	0x58024400
 800acb4:	ffff0007 	.word	0xffff0007

0800acb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e19c      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800accc:	4b8a      	ldr	r3, [pc, #552]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 030f 	and.w	r3, r3, #15
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d910      	bls.n	800acfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acda:	4b87      	ldr	r3, [pc, #540]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f023 020f 	bic.w	r2, r3, #15
 800ace2:	4985      	ldr	r1, [pc, #532]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acea:	4b83      	ldr	r3, [pc, #524]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e184      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d010      	beq.n	800ad2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	4b7b      	ldr	r3, [pc, #492]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d908      	bls.n	800ad2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad18:	4b78      	ldr	r3, [pc, #480]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	4975      	ldr	r1, [pc, #468]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 0308 	and.w	r3, r3, #8
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d010      	beq.n	800ad58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	695a      	ldr	r2, [r3, #20]
 800ad3a:	4b70      	ldr	r3, [pc, #448]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d908      	bls.n	800ad58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad46:	4b6d      	ldr	r3, [pc, #436]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	496a      	ldr	r1, [pc, #424]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0310 	and.w	r3, r3, #16
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d010      	beq.n	800ad86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	699a      	ldr	r2, [r3, #24]
 800ad68:	4b64      	ldr	r3, [pc, #400]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d908      	bls.n	800ad86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad74:	4b61      	ldr	r3, [pc, #388]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	495e      	ldr	r1, [pc, #376]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0320 	and.w	r3, r3, #32
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d010      	beq.n	800adb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	69da      	ldr	r2, [r3, #28]
 800ad96:	4b59      	ldr	r3, [pc, #356]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d908      	bls.n	800adb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ada2:	4b56      	ldr	r3, [pc, #344]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	4953      	ldr	r1, [pc, #332]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d010      	beq.n	800ade2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	4b4d      	ldr	r3, [pc, #308]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	f003 030f 	and.w	r3, r3, #15
 800adcc:	429a      	cmp	r2, r3
 800adce:	d908      	bls.n	800ade2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800add0:	4b4a      	ldr	r3, [pc, #296]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f023 020f 	bic.w	r2, r3, #15
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	4947      	ldr	r1, [pc, #284]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d055      	beq.n	800ae9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800adee:	4b43      	ldr	r3, [pc, #268]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4940      	ldr	r1, [pc, #256]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d107      	bne.n	800ae18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae08:	4b3c      	ldr	r3, [pc, #240]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d121      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e0f6      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d107      	bne.n	800ae30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae20:	4b36      	ldr	r3, [pc, #216]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d115      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e0ea      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d107      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae38:	4b30      	ldr	r3, [pc, #192]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d109      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e0de      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae48:	4b2c      	ldr	r3, [pc, #176]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e0d6      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae58:	4b28      	ldr	r3, [pc, #160]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	f023 0207 	bic.w	r2, r3, #7
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4925      	ldr	r1, [pc, #148]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae6a:	f7f9 faf7 	bl	800445c <HAL_GetTick>
 800ae6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae70:	e00a      	b.n	800ae88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae72:	f7f9 faf3 	bl	800445c <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d901      	bls.n	800ae88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e0be      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae88:	4b1c      	ldr	r3, [pc, #112]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d1eb      	bne.n	800ae72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d010      	beq.n	800aec8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d208      	bcs.n	800aec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aeb6:	4b11      	ldr	r3, [pc, #68]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	f023 020f 	bic.w	r2, r3, #15
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	490e      	ldr	r1, [pc, #56]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800aec4:	4313      	orrs	r3, r2
 800aec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aec8:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d214      	bcs.n	800af00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f023 020f 	bic.w	r2, r3, #15
 800aede:	4906      	ldr	r1, [pc, #24]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aee6:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 030f 	and.w	r3, r3, #15
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d005      	beq.n	800af00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e086      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
 800aef8:	52002000 	.word	0x52002000
 800aefc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d010      	beq.n	800af2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	691a      	ldr	r2, [r3, #16]
 800af10:	4b3f      	ldr	r3, [pc, #252]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af18:	429a      	cmp	r2, r3
 800af1a:	d208      	bcs.n	800af2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af1c:	4b3c      	ldr	r3, [pc, #240]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	4939      	ldr	r1, [pc, #228]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0308 	and.w	r3, r3, #8
 800af36:	2b00      	cmp	r3, #0
 800af38:	d010      	beq.n	800af5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	4b34      	ldr	r3, [pc, #208]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af46:	429a      	cmp	r2, r3
 800af48:	d208      	bcs.n	800af5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af4a:	4b31      	ldr	r3, [pc, #196]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	492e      	ldr	r1, [pc, #184]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0310 	and.w	r3, r3, #16
 800af64:	2b00      	cmp	r3, #0
 800af66:	d010      	beq.n	800af8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699a      	ldr	r2, [r3, #24]
 800af6c:	4b28      	ldr	r3, [pc, #160]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af74:	429a      	cmp	r2, r3
 800af76:	d208      	bcs.n	800af8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af78:	4b25      	ldr	r3, [pc, #148]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	4922      	ldr	r1, [pc, #136]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af86:	4313      	orrs	r3, r2
 800af88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b00      	cmp	r3, #0
 800af94:	d010      	beq.n	800afb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	69da      	ldr	r2, [r3, #28]
 800af9a:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d208      	bcs.n	800afb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	4917      	ldr	r1, [pc, #92]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800afb8:	f000 f834 	bl	800b024 <HAL_RCC_GetSysClockFreq>
 800afbc:	4602      	mov	r2, r0
 800afbe:	4b14      	ldr	r3, [pc, #80]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	0a1b      	lsrs	r3, r3, #8
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	4912      	ldr	r1, [pc, #72]	; (800b014 <HAL_RCC_ClockConfig+0x35c>)
 800afca:	5ccb      	ldrb	r3, [r1, r3]
 800afcc:	f003 031f 	and.w	r3, r3, #31
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
 800afd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afd6:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	f003 030f 	and.w	r3, r3, #15
 800afde:	4a0d      	ldr	r2, [pc, #52]	; (800b014 <HAL_RCC_ClockConfig+0x35c>)
 800afe0:	5cd3      	ldrb	r3, [r2, r3]
 800afe2:	f003 031f 	and.w	r3, r3, #31
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	fa22 f303 	lsr.w	r3, r2, r3
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <HAL_RCC_ClockConfig+0x360>)
 800afee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <HAL_RCC_ClockConfig+0x364>)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <HAL_RCC_ClockConfig+0x368>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4618      	mov	r0, r3
 800affc:	f7f8 ff5c 	bl	8003eb8 <HAL_InitTick>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400
 800b014:	08017e9c 	.word	0x08017e9c
 800b018:	24000090 	.word	0x24000090
 800b01c:	2400008c 	.word	0x2400008c
 800b020:	24000094 	.word	0x24000094

0800b024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b024:	b480      	push	{r7}
 800b026:	b089      	sub	sp, #36	; 0x24
 800b028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b02a:	4bb3      	ldr	r3, [pc, #716]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b032:	2b18      	cmp	r3, #24
 800b034:	f200 8155 	bhi.w	800b2e2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b038:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03e:	bf00      	nop
 800b040:	0800b0a5 	.word	0x0800b0a5
 800b044:	0800b2e3 	.word	0x0800b2e3
 800b048:	0800b2e3 	.word	0x0800b2e3
 800b04c:	0800b2e3 	.word	0x0800b2e3
 800b050:	0800b2e3 	.word	0x0800b2e3
 800b054:	0800b2e3 	.word	0x0800b2e3
 800b058:	0800b2e3 	.word	0x0800b2e3
 800b05c:	0800b2e3 	.word	0x0800b2e3
 800b060:	0800b0cb 	.word	0x0800b0cb
 800b064:	0800b2e3 	.word	0x0800b2e3
 800b068:	0800b2e3 	.word	0x0800b2e3
 800b06c:	0800b2e3 	.word	0x0800b2e3
 800b070:	0800b2e3 	.word	0x0800b2e3
 800b074:	0800b2e3 	.word	0x0800b2e3
 800b078:	0800b2e3 	.word	0x0800b2e3
 800b07c:	0800b2e3 	.word	0x0800b2e3
 800b080:	0800b0d1 	.word	0x0800b0d1
 800b084:	0800b2e3 	.word	0x0800b2e3
 800b088:	0800b2e3 	.word	0x0800b2e3
 800b08c:	0800b2e3 	.word	0x0800b2e3
 800b090:	0800b2e3 	.word	0x0800b2e3
 800b094:	0800b2e3 	.word	0x0800b2e3
 800b098:	0800b2e3 	.word	0x0800b2e3
 800b09c:	0800b2e3 	.word	0x0800b2e3
 800b0a0:	0800b0d7 	.word	0x0800b0d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0a4:	4b94      	ldr	r3, [pc, #592]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0320 	and.w	r3, r3, #32
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d009      	beq.n	800b0c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0b0:	4b91      	ldr	r3, [pc, #580]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	08db      	lsrs	r3, r3, #3
 800b0b6:	f003 0303 	and.w	r3, r3, #3
 800b0ba:	4a90      	ldr	r2, [pc, #576]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b0c2:	e111      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b0c4:	4b8d      	ldr	r3, [pc, #564]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0c6:	61bb      	str	r3, [r7, #24]
      break;
 800b0c8:	e10e      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b0ca:	4b8d      	ldr	r3, [pc, #564]	; (800b300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b0cc:	61bb      	str	r3, [r7, #24]
      break;
 800b0ce:	e10b      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b0d0:	4b8c      	ldr	r3, [pc, #560]	; (800b304 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b0d2:	61bb      	str	r3, [r7, #24]
      break;
 800b0d4:	e108      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0d6:	4b88      	ldr	r3, [pc, #544]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b0e0:	4b85      	ldr	r3, [pc, #532]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e4:	091b      	lsrs	r3, r3, #4
 800b0e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b0ec:	4b82      	ldr	r3, [pc, #520]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b0f6:	4b80      	ldr	r3, [pc, #512]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	08db      	lsrs	r3, r3, #3
 800b0fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	fb02 f303 	mul.w	r3, r2, r3
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 80e1 	beq.w	800b2dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	f000 8083 	beq.w	800b228 <HAL_RCC_GetSysClockFreq+0x204>
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b02      	cmp	r3, #2
 800b126:	f200 80a1 	bhi.w	800b26c <HAL_RCC_GetSysClockFreq+0x248>
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <HAL_RCC_GetSysClockFreq+0x114>
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d056      	beq.n	800b1e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b136:	e099      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b138:	4b6f      	ldr	r3, [pc, #444]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0320 	and.w	r3, r3, #32
 800b140:	2b00      	cmp	r3, #0
 800b142:	d02d      	beq.n	800b1a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b144:	4b6c      	ldr	r3, [pc, #432]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	08db      	lsrs	r3, r3, #3
 800b14a:	f003 0303 	and.w	r3, r3, #3
 800b14e:	4a6b      	ldr	r2, [pc, #428]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
 800b154:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	ee07 3a90 	vmov	s15, r3
 800b15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16e:	4b62      	ldr	r3, [pc, #392]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b182:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b19e:	e087      	b.n	800b2b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	ee07 3a90 	vmov	s15, r3
 800b1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b30c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b2:	4b51      	ldr	r3, [pc, #324]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1e2:	e065      	b.n	800b2b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b310 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f6:	4b40      	ldr	r3, [pc, #256]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fe:	ee07 3a90 	vmov	s15, r3
 800b202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b206:	ed97 6a02 	vldr	s12, [r7, #8]
 800b20a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b226:	e043      	b.n	800b2b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b314 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23a:	4b2f      	ldr	r3, [pc, #188]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b24e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b26a:	e021      	b.n	800b2b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b276:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b310 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27e:	4b1e      	ldr	r3, [pc, #120]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b292:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b2b0:	4b11      	ldr	r3, [pc, #68]	; (800b2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b2c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2d4:	ee17 3a90 	vmov	r3, s15
 800b2d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b2da:	e005      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	61bb      	str	r3, [r7, #24]
      break;
 800b2e0:	e002      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b2e2:	4b07      	ldr	r3, [pc, #28]	; (800b300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2e4:	61bb      	str	r3, [r7, #24]
      break;
 800b2e6:	bf00      	nop
  }

  return sysclockfreq;
 800b2e8:	69bb      	ldr	r3, [r7, #24]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3724      	adds	r7, #36	; 0x24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	58024400 	.word	0x58024400
 800b2fc:	03d09000 	.word	0x03d09000
 800b300:	003d0900 	.word	0x003d0900
 800b304:	017d7840 	.word	0x017d7840
 800b308:	46000000 	.word	0x46000000
 800b30c:	4c742400 	.word	0x4c742400
 800b310:	4a742400 	.word	0x4a742400
 800b314:	4bbebc20 	.word	0x4bbebc20

0800b318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b31e:	f7ff fe81 	bl	800b024 <HAL_RCC_GetSysClockFreq>
 800b322:	4602      	mov	r2, r0
 800b324:	4b10      	ldr	r3, [pc, #64]	; (800b368 <HAL_RCC_GetHCLKFreq+0x50>)
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	0a1b      	lsrs	r3, r3, #8
 800b32a:	f003 030f 	and.w	r3, r3, #15
 800b32e:	490f      	ldr	r1, [pc, #60]	; (800b36c <HAL_RCC_GetHCLKFreq+0x54>)
 800b330:	5ccb      	ldrb	r3, [r1, r3]
 800b332:	f003 031f 	and.w	r3, r3, #31
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b33c:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <HAL_RCC_GetHCLKFreq+0x50>)
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	f003 030f 	and.w	r3, r3, #15
 800b344:	4a09      	ldr	r2, [pc, #36]	; (800b36c <HAL_RCC_GetHCLKFreq+0x54>)
 800b346:	5cd3      	ldrb	r3, [r2, r3]
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	fa22 f303 	lsr.w	r3, r2, r3
 800b352:	4a07      	ldr	r2, [pc, #28]	; (800b370 <HAL_RCC_GetHCLKFreq+0x58>)
 800b354:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b356:	4a07      	ldr	r2, [pc, #28]	; (800b374 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b35c:	4b04      	ldr	r3, [pc, #16]	; (800b370 <HAL_RCC_GetHCLKFreq+0x58>)
 800b35e:	681b      	ldr	r3, [r3, #0]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	58024400 	.word	0x58024400
 800b36c:	08017e9c 	.word	0x08017e9c
 800b370:	24000090 	.word	0x24000090
 800b374:	2400008c 	.word	0x2400008c

0800b378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b37c:	f7ff ffcc 	bl	800b318 <HAL_RCC_GetHCLKFreq>
 800b380:	4602      	mov	r2, r0
 800b382:	4b06      	ldr	r3, [pc, #24]	; (800b39c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	091b      	lsrs	r3, r3, #4
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	4904      	ldr	r1, [pc, #16]	; (800b3a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b38e:	5ccb      	ldrb	r3, [r1, r3]
 800b390:	f003 031f 	and.w	r3, r3, #31
 800b394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b398:	4618      	mov	r0, r3
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	08017e9c 	.word	0x08017e9c

0800b3a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b3a8:	f7ff ffb6 	bl	800b318 <HAL_RCC_GetHCLKFreq>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	0a1b      	lsrs	r3, r3, #8
 800b3b4:	f003 0307 	and.w	r3, r3, #7
 800b3b8:	4904      	ldr	r1, [pc, #16]	; (800b3cc <HAL_RCC_GetPCLK2Freq+0x28>)
 800b3ba:	5ccb      	ldrb	r3, [r1, r3]
 800b3bc:	f003 031f 	and.w	r3, r3, #31
 800b3c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	58024400 	.word	0x58024400
 800b3cc:	08017e9c 	.word	0x08017e9c

0800b3d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	223f      	movs	r2, #63	; 0x3f
 800b3de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b3e0:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	f003 0207 	and.w	r2, r3, #7
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b3ec:	4b17      	ldr	r3, [pc, #92]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b3f8:	4b14      	ldr	r3, [pc, #80]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f003 020f 	and.w	r2, r3, #15
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b404:	4b11      	ldr	r3, [pc, #68]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b410:	4b0e      	ldr	r3, [pc, #56]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b41c:	4b0b      	ldr	r3, [pc, #44]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b428:	4b08      	ldr	r3, [pc, #32]	; (800b44c <HAL_RCC_GetClockConfig+0x7c>)
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <HAL_RCC_GetClockConfig+0x80>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 020f 	and.w	r2, r3, #15
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	601a      	str	r2, [r3, #0]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	58024400 	.word	0x58024400
 800b450:	52002000 	.word	0x52002000

0800b454 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b458:	b0ca      	sub	sp, #296	; 0x128
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b460:	2300      	movs	r3, #0
 800b462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b466:	2300      	movs	r3, #0
 800b468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b478:	2500      	movs	r5, #0
 800b47a:	ea54 0305 	orrs.w	r3, r4, r5
 800b47e:	d049      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b486:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b48a:	d02f      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b48c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b490:	d828      	bhi.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b496:	d01a      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b49c:	d822      	bhi.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b4a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4a6:	d007      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b4a8:	e01c      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4aa:	4bb8      	ldr	r3, [pc, #736]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	4ab7      	ldr	r2, [pc, #732]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4b6:	e01a      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4bc:	3308      	adds	r3, #8
 800b4be:	2102      	movs	r1, #2
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f002 fb61 	bl	800db88 <RCCEx_PLL2_Config>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4cc:	e00f      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d2:	3328      	adds	r3, #40	; 0x28
 800b4d4:	2102      	movs	r1, #2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f002 fc08 	bl	800dcec <RCCEx_PLL3_Config>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4e2:	e004      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4ea:	e000      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10a      	bne.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b4f6:	4ba5      	ldr	r3, [pc, #660]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b504:	4aa1      	ldr	r2, [pc, #644]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b506:	430b      	orrs	r3, r1
 800b508:	6513      	str	r3, [r2, #80]	; 0x50
 800b50a:	e003      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b520:	f04f 0900 	mov.w	r9, #0
 800b524:	ea58 0309 	orrs.w	r3, r8, r9
 800b528:	d047      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b530:	2b04      	cmp	r3, #4
 800b532:	d82a      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b534:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b551 	.word	0x0800b551
 800b540:	0800b55f 	.word	0x0800b55f
 800b544:	0800b575 	.word	0x0800b575
 800b548:	0800b593 	.word	0x0800b593
 800b54c:	0800b593 	.word	0x0800b593
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b550:	4b8e      	ldr	r3, [pc, #568]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b554:	4a8d      	ldr	r2, [pc, #564]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b55c:	e01a      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b562:	3308      	adds	r3, #8
 800b564:	2100      	movs	r1, #0
 800b566:	4618      	mov	r0, r3
 800b568:	f002 fb0e 	bl	800db88 <RCCEx_PLL2_Config>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b572:	e00f      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b578:	3328      	adds	r3, #40	; 0x28
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fbb5 	bl	800dcec <RCCEx_PLL3_Config>
 800b582:	4603      	mov	r3, r0
 800b584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b588:	e004      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b590:	e000      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10a      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b59c:	4b7b      	ldr	r3, [pc, #492]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a0:	f023 0107 	bic.w	r1, r3, #7
 800b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5aa:	4a78      	ldr	r2, [pc, #480]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	6513      	str	r3, [r2, #80]	; 0x50
 800b5b0:	e003      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b5c6:	f04f 0b00 	mov.w	fp, #0
 800b5ca:	ea5a 030b 	orrs.w	r3, sl, fp
 800b5ce:	d04c      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5da:	d030      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e0:	d829      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b5e2:	2bc0      	cmp	r3, #192	; 0xc0
 800b5e4:	d02d      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b5e6:	2bc0      	cmp	r3, #192	; 0xc0
 800b5e8:	d825      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b5ea:	2b80      	cmp	r3, #128	; 0x80
 800b5ec:	d018      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b5ee:	2b80      	cmp	r3, #128	; 0x80
 800b5f0:	d821      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b5f6:	2b40      	cmp	r3, #64	; 0x40
 800b5f8:	d007      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b5fa:	e01c      	b.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5fc:	4b63      	ldr	r3, [pc, #396]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4a62      	ldr	r2, [pc, #392]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b608:	e01c      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3308      	adds	r3, #8
 800b610:	2100      	movs	r1, #0
 800b612:	4618      	mov	r0, r3
 800b614:	f002 fab8 	bl	800db88 <RCCEx_PLL2_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b61e:	e011      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b624:	3328      	adds	r3, #40	; 0x28
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f002 fb5f 	bl	800dcec <RCCEx_PLL3_Config>
 800b62e:	4603      	mov	r3, r0
 800b630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b634:	e006      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b63c:	e002      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b63e:	bf00      	nop
 800b640:	e000      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b642:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b64c:	4b4f      	ldr	r3, [pc, #316]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b650:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b65a:	4a4c      	ldr	r2, [pc, #304]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b65c:	430b      	orrs	r3, r1
 800b65e:	6513      	str	r3, [r2, #80]	; 0x50
 800b660:	e003      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b676:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b67a:	2300      	movs	r3, #0
 800b67c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b680:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b684:	460b      	mov	r3, r1
 800b686:	4313      	orrs	r3, r2
 800b688:	d053      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b696:	d035      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b69c:	d82e      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b69e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6a2:	d031      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b6a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6a8:	d828      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b6aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ae:	d01a      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b6b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6b4:	d822      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b6ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6be:	d007      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b6c0:	e01c      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c2:	4b32      	ldr	r3, [pc, #200]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	4a31      	ldr	r2, [pc, #196]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6ce:	e01c      	b.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d4:	3308      	adds	r3, #8
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f002 fa55 	bl	800db88 <RCCEx_PLL2_Config>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b6e4:	e011      	b.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ea:	3328      	adds	r3, #40	; 0x28
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f002 fafc 	bl	800dcec <RCCEx_PLL3_Config>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6fa:	e006      	b.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b702:	e002      	b.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b704:	bf00      	nop
 800b706:	e000      	b.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b70a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10b      	bne.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b712:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b716:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b722:	4a1a      	ldr	r2, [pc, #104]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b724:	430b      	orrs	r3, r1
 800b726:	6593      	str	r3, [r2, #88]	; 0x58
 800b728:	e003      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b72e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b73e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b742:	2300      	movs	r3, #0
 800b744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b748:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b74c:	460b      	mov	r3, r1
 800b74e:	4313      	orrs	r3, r2
 800b750:	d056      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b75a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b75e:	d038      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b764:	d831      	bhi.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b76a:	d034      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b76c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b770:	d82b      	bhi.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b776:	d01d      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b77c:	d825      	bhi.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d006      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b786:	d00a      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b788:	e01f      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b78a:	bf00      	nop
 800b78c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b790:	4ba2      	ldr	r3, [pc, #648]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	4aa1      	ldr	r2, [pc, #644]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b79a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b79c:	e01c      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 f9ee 	bl	800db88 <RCCEx_PLL2_Config>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b7b2:	e011      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b8:	3328      	adds	r3, #40	; 0x28
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f002 fa95 	bl	800dcec <RCCEx_PLL3_Config>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7c8:	e006      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7d0:	e002      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b7d2:	bf00      	nop
 800b7d4:	e000      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b7d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10b      	bne.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b7e0:	4b8e      	ldr	r3, [pc, #568]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b7f0:	4a8a      	ldr	r2, [pc, #552]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7f2:	430b      	orrs	r3, r1
 800b7f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b7f6:	e003      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b80c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b810:	2300      	movs	r3, #0
 800b812:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b816:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b81a:	460b      	mov	r3, r1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d03a      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b826:	2b30      	cmp	r3, #48	; 0x30
 800b828:	d01f      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b82a:	2b30      	cmp	r3, #48	; 0x30
 800b82c:	d819      	bhi.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b82e:	2b20      	cmp	r3, #32
 800b830:	d00c      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b832:	2b20      	cmp	r3, #32
 800b834:	d815      	bhi.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b836:	2b00      	cmp	r3, #0
 800b838:	d019      	beq.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b83a:	2b10      	cmp	r3, #16
 800b83c:	d111      	bne.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b83e:	4b77      	ldr	r3, [pc, #476]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b842:	4a76      	ldr	r2, [pc, #472]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b84a:	e011      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b850:	3308      	adds	r3, #8
 800b852:	2102      	movs	r1, #2
 800b854:	4618      	mov	r0, r3
 800b856:	f002 f997 	bl	800db88 <RCCEx_PLL2_Config>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b860:	e006      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b868:	e002      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b86a:	bf00      	nop
 800b86c:	e000      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b86e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b878:	4b68      	ldr	r3, [pc, #416]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b886:	4a65      	ldr	r2, [pc, #404]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b888:	430b      	orrs	r3, r1
 800b88a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b88c:	e003      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b8a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	d051      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8c0:	d035      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b8c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8c6:	d82e      	bhi.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b8c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8cc:	d031      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b8ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8d2:	d828      	bhi.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b8d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d8:	d01a      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b8da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8de:	d822      	bhi.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e8:	d007      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b8ea:	e01c      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ec:	4b4b      	ldr	r3, [pc, #300]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	4a4a      	ldr	r2, [pc, #296]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8f8:	e01c      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fe:	3308      	adds	r3, #8
 800b900:	2100      	movs	r1, #0
 800b902:	4618      	mov	r0, r3
 800b904:	f002 f940 	bl	800db88 <RCCEx_PLL2_Config>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b90e:	e011      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b914:	3328      	adds	r3, #40	; 0x28
 800b916:	2100      	movs	r1, #0
 800b918:	4618      	mov	r0, r3
 800b91a:	f002 f9e7 	bl	800dcec <RCCEx_PLL3_Config>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b924:	e006      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b92c:	e002      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b92e:	bf00      	nop
 800b930:	e000      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b932:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b93c:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b940:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b94a:	4a34      	ldr	r2, [pc, #208]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b94c:	430b      	orrs	r3, r1
 800b94e:	6513      	str	r3, [r2, #80]	; 0x50
 800b950:	e003      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b96a:	2300      	movs	r3, #0
 800b96c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b970:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b974:	460b      	mov	r3, r1
 800b976:	4313      	orrs	r3, r2
 800b978:	d056      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b984:	d033      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b98a:	d82c      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b98c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b990:	d02f      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b996:	d826      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b998:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b99c:	d02b      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b99e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9a2:	d820      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b9a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9a8:	d012      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ae:	d81a      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d022      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b8:	d115      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9be:	3308      	adds	r3, #8
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f002 f8e0 	bl	800db88 <RCCEx_PLL2_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b9ce:	e015      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	3328      	adds	r3, #40	; 0x28
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f002 f987 	bl	800dcec <RCCEx_PLL3_Config>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b9e4:	e00a      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ec:	e006      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9ee:	bf00      	nop
 800b9f0:	e004      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9f2:	bf00      	nop
 800b9f4:	e002      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9f6:	bf00      	nop
 800b9f8:	e000      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10d      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba08:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ba0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba12:	4a02      	ldr	r2, [pc, #8]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba14:	430b      	orrs	r3, r1
 800ba16:	6513      	str	r3, [r2, #80]	; 0x50
 800ba18:	e006      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ba1a:	bf00      	nop
 800ba1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ba34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4313      	orrs	r3, r2
 800ba46:	d055      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ba48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba54:	d033      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ba56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba5a:	d82c      	bhi.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba60:	d02f      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ba62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba66:	d826      	bhi.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba6c:	d02b      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ba6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba72:	d820      	bhi.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba78:	d012      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ba7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba7e:	d81a      	bhi.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d022      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ba84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba88:	d115      	bne.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8e:	3308      	adds	r3, #8
 800ba90:	2101      	movs	r1, #1
 800ba92:	4618      	mov	r0, r3
 800ba94:	f002 f878 	bl	800db88 <RCCEx_PLL2_Config>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba9e:	e015      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa4:	3328      	adds	r3, #40	; 0x28
 800baa6:	2101      	movs	r1, #1
 800baa8:	4618      	mov	r0, r3
 800baaa:	f002 f91f 	bl	800dcec <RCCEx_PLL3_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bab4:	e00a      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800babc:	e006      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800babe:	bf00      	nop
 800bac0:	e004      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800baca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bacc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10b      	bne.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bad4:	4ba3      	ldr	r3, [pc, #652]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bae4:	4a9f      	ldr	r2, [pc, #636]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bae6:	430b      	orrs	r3, r1
 800bae8:	6593      	str	r3, [r2, #88]	; 0x58
 800baea:	e003      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800baf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bb00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb04:	2300      	movs	r3, #0
 800bb06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	d037      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bb14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb1e:	d00e      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb24:	d816      	bhi.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d018      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800bb2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb2e:	d111      	bne.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb30:	4b8c      	ldr	r3, [pc, #560]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb34:	4a8b      	ldr	r2, [pc, #556]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb3c:	e00f      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	3308      	adds	r3, #8
 800bb44:	2101      	movs	r1, #1
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 f81e 	bl	800db88 <RCCEx_PLL2_Config>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb52:	e004      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb5a:	e000      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800bb5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb66:	4b7f      	ldr	r3, [pc, #508]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb74:	4a7b      	ldr	r2, [pc, #492]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb76:	430b      	orrs	r3, r1
 800bb78:	6513      	str	r3, [r2, #80]	; 0x50
 800bb7a:	e003      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bb90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb94:	2300      	movs	r3, #0
 800bb96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bb9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4313      	orrs	r3, r2
 800bba2:	d039      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d81c      	bhi.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bbf1 	.word	0x0800bbf1
 800bbb8:	0800bbc5 	.word	0x0800bbc5
 800bbbc:	0800bbd3 	.word	0x0800bbd3
 800bbc0:	0800bbf1 	.word	0x0800bbf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbc4:	4b67      	ldr	r3, [pc, #412]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc8:	4a66      	ldr	r2, [pc, #408]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bbd0:	e00f      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	2102      	movs	r1, #2
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f001 ffd4 	bl	800db88 <RCCEx_PLL2_Config>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bbe6:	e004      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbee:	e000      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800bbf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10a      	bne.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bbfa:	4b5a      	ldr	r3, [pc, #360]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfe:	f023 0103 	bic.w	r1, r3, #3
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc08:	4a56      	ldr	r2, [pc, #344]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc0a:	430b      	orrs	r3, r1
 800bc0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc0e:	e003      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bc24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bc32:	460b      	mov	r3, r1
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f000 809f 	beq.w	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc3a:	4b4b      	ldr	r3, [pc, #300]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a4a      	ldr	r2, [pc, #296]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc46:	f7f8 fc09 	bl	800445c <HAL_GetTick>
 800bc4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc4e:	e00b      	b.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc50:	f7f8 fc04 	bl	800445c <HAL_GetTick>
 800bc54:	4602      	mov	r2, r0
 800bc56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b64      	cmp	r3, #100	; 0x64
 800bc5e:	d903      	bls.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc66:	e005      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc68:	4b3f      	ldr	r3, [pc, #252]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0ed      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bc74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d179      	bne.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc7c:	4b39      	ldr	r3, [pc, #228]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc88:	4053      	eors	r3, r2
 800bc8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d015      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc92:	4b34      	ldr	r3, [pc, #208]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc9e:	4b31      	ldr	r3, [pc, #196]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca2:	4a30      	ldr	r2, [pc, #192]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bca8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bcaa:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcae:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bcb6:	4a2b      	ldr	r2, [pc, #172]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bcbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcca:	d118      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bccc:	f7f8 fbc6 	bl	800445c <HAL_GetTick>
 800bcd0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcd4:	e00d      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcd6:	f7f8 fbc1 	bl	800445c <HAL_GetTick>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	f241 3388 	movw	r3, #5000	; 0x1388
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d903      	bls.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bcf0:	e005      	b.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d0eb      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d129      	bne.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd16:	d10e      	bne.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bd18:	4b12      	ldr	r3, [pc, #72]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bd20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd28:	091a      	lsrs	r2, r3, #4
 800bd2a:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	4a0d      	ldr	r2, [pc, #52]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd30:	430b      	orrs	r3, r1
 800bd32:	6113      	str	r3, [r2, #16]
 800bd34:	e005      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	4a0a      	ldr	r2, [pc, #40]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd40:	6113      	str	r3, [r2, #16]
 800bd42:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd44:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bd46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd52:	4a04      	ldr	r2, [pc, #16]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd54:	430b      	orrs	r3, r1
 800bd56:	6713      	str	r3, [r2, #112]	; 0x70
 800bd58:	e00e      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bd62:	e009      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bd64:	58024400 	.word	0x58024400
 800bd68:	58024800 	.word	0x58024800
 800bd6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f002 0301 	and.w	r3, r2, #1
 800bd84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd92:	460b      	mov	r3, r1
 800bd94:	4313      	orrs	r3, r2
 800bd96:	f000 8089 	beq.w	800beac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda0:	2b28      	cmp	r3, #40	; 0x28
 800bda2:	d86b      	bhi.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800be85 	.word	0x0800be85
 800bdb0:	0800be7d 	.word	0x0800be7d
 800bdb4:	0800be7d 	.word	0x0800be7d
 800bdb8:	0800be7d 	.word	0x0800be7d
 800bdbc:	0800be7d 	.word	0x0800be7d
 800bdc0:	0800be7d 	.word	0x0800be7d
 800bdc4:	0800be7d 	.word	0x0800be7d
 800bdc8:	0800be7d 	.word	0x0800be7d
 800bdcc:	0800be51 	.word	0x0800be51
 800bdd0:	0800be7d 	.word	0x0800be7d
 800bdd4:	0800be7d 	.word	0x0800be7d
 800bdd8:	0800be7d 	.word	0x0800be7d
 800bddc:	0800be7d 	.word	0x0800be7d
 800bde0:	0800be7d 	.word	0x0800be7d
 800bde4:	0800be7d 	.word	0x0800be7d
 800bde8:	0800be7d 	.word	0x0800be7d
 800bdec:	0800be67 	.word	0x0800be67
 800bdf0:	0800be7d 	.word	0x0800be7d
 800bdf4:	0800be7d 	.word	0x0800be7d
 800bdf8:	0800be7d 	.word	0x0800be7d
 800bdfc:	0800be7d 	.word	0x0800be7d
 800be00:	0800be7d 	.word	0x0800be7d
 800be04:	0800be7d 	.word	0x0800be7d
 800be08:	0800be7d 	.word	0x0800be7d
 800be0c:	0800be85 	.word	0x0800be85
 800be10:	0800be7d 	.word	0x0800be7d
 800be14:	0800be7d 	.word	0x0800be7d
 800be18:	0800be7d 	.word	0x0800be7d
 800be1c:	0800be7d 	.word	0x0800be7d
 800be20:	0800be7d 	.word	0x0800be7d
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be7d 	.word	0x0800be7d
 800be2c:	0800be85 	.word	0x0800be85
 800be30:	0800be7d 	.word	0x0800be7d
 800be34:	0800be7d 	.word	0x0800be7d
 800be38:	0800be7d 	.word	0x0800be7d
 800be3c:	0800be7d 	.word	0x0800be7d
 800be40:	0800be7d 	.word	0x0800be7d
 800be44:	0800be7d 	.word	0x0800be7d
 800be48:	0800be7d 	.word	0x0800be7d
 800be4c:	0800be85 	.word	0x0800be85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be54:	3308      	adds	r3, #8
 800be56:	2101      	movs	r1, #1
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 fe95 	bl	800db88 <RCCEx_PLL2_Config>
 800be5e:	4603      	mov	r3, r0
 800be60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be64:	e00f      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6a:	3328      	adds	r3, #40	; 0x28
 800be6c:	2101      	movs	r1, #1
 800be6e:	4618      	mov	r0, r3
 800be70:	f001 ff3c 	bl	800dcec <RCCEx_PLL3_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be7a:	e004      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be82:	e000      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800be84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be8e:	4bbf      	ldr	r3, [pc, #764]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be92:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800be96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9c:	4abb      	ldr	r2, [pc, #748]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be9e:	430b      	orrs	r3, r1
 800bea0:	6553      	str	r3, [r2, #84]	; 0x54
 800bea2:	e003      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800beac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f002 0302 	and.w	r3, r2, #2
 800beb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bebc:	2300      	movs	r3, #0
 800bebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bec2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bec6:	460b      	mov	r3, r1
 800bec8:	4313      	orrs	r3, r2
 800beca:	d041      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800becc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bed2:	2b05      	cmp	r3, #5
 800bed4:	d824      	bhi.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bed6:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bf29 	.word	0x0800bf29
 800bee0:	0800bef5 	.word	0x0800bef5
 800bee4:	0800bf0b 	.word	0x0800bf0b
 800bee8:	0800bf29 	.word	0x0800bf29
 800beec:	0800bf29 	.word	0x0800bf29
 800bef0:	0800bf29 	.word	0x0800bf29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef8:	3308      	adds	r3, #8
 800befa:	2101      	movs	r1, #1
 800befc:	4618      	mov	r0, r3
 800befe:	f001 fe43 	bl	800db88 <RCCEx_PLL2_Config>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf08:	e00f      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0e:	3328      	adds	r3, #40	; 0x28
 800bf10:	2101      	movs	r1, #1
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 feea 	bl	800dcec <RCCEx_PLL3_Config>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf1e:	e004      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf26:	e000      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bf28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10a      	bne.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bf32:	4b96      	ldr	r3, [pc, #600]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf36:	f023 0107 	bic.w	r1, r3, #7
 800bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf40:	4a92      	ldr	r2, [pc, #584]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf42:	430b      	orrs	r3, r1
 800bf44:	6553      	str	r3, [r2, #84]	; 0x54
 800bf46:	e003      	b.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	f002 0304 	and.w	r3, r2, #4
 800bf5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf60:	2300      	movs	r3, #0
 800bf62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	d044      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf78:	2b05      	cmp	r3, #5
 800bf7a:	d825      	bhi.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bfd1 	.word	0x0800bfd1
 800bf88:	0800bf9d 	.word	0x0800bf9d
 800bf8c:	0800bfb3 	.word	0x0800bfb3
 800bf90:	0800bfd1 	.word	0x0800bfd1
 800bf94:	0800bfd1 	.word	0x0800bfd1
 800bf98:	0800bfd1 	.word	0x0800bfd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 fdef 	bl	800db88 <RCCEx_PLL2_Config>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bfb0:	e00f      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb6:	3328      	adds	r3, #40	; 0x28
 800bfb8:	2101      	movs	r1, #1
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f001 fe96 	bl	800dcec <RCCEx_PLL3_Config>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bfc6:	e004      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfce:	e000      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bfd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10b      	bne.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bfda:	4b6c      	ldr	r3, [pc, #432]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bfdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfde:	f023 0107 	bic.w	r1, r3, #7
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfea:	4a68      	ldr	r2, [pc, #416]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bfec:	430b      	orrs	r3, r1
 800bfee:	6593      	str	r3, [r2, #88]	; 0x58
 800bff0:	e003      	b.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	f002 0320 	and.w	r3, r2, #32
 800c006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c00a:	2300      	movs	r3, #0
 800c00c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c014:	460b      	mov	r3, r1
 800c016:	4313      	orrs	r3, r2
 800c018:	d055      	beq.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c026:	d033      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c02c:	d82c      	bhi.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c032:	d02f      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c038:	d826      	bhi.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c03a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c03e:	d02b      	beq.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c040:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c044:	d820      	bhi.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c04a:	d012      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c050:	d81a      	bhi.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d022      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c05a:	d115      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c060:	3308      	adds	r3, #8
 800c062:	2100      	movs	r1, #0
 800c064:	4618      	mov	r0, r3
 800c066:	f001 fd8f 	bl	800db88 <RCCEx_PLL2_Config>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c070:	e015      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c076:	3328      	adds	r3, #40	; 0x28
 800c078:	2102      	movs	r1, #2
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 fe36 	bl	800dcec <RCCEx_PLL3_Config>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c086:	e00a      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c08e:	e006      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c090:	bf00      	nop
 800c092:	e004      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c094:	bf00      	nop
 800c096:	e002      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c098:	bf00      	nop
 800c09a:	e000      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c09c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c09e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10b      	bne.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0a6:	4b39      	ldr	r3, [pc, #228]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b6:	4a35      	ldr	r2, [pc, #212]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c0b8:	430b      	orrs	r3, r1
 800c0ba:	6553      	str	r3, [r2, #84]	; 0x54
 800c0bc:	e003      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c0d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c0dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	d058      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0f2:	d033      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c0f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0f8:	d82c      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d02f      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c104:	d826      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c106:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c10a:	d02b      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c10c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c110:	d820      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c116:	d012      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c11c:	d81a      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d022      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c126:	d115      	bne.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12c:	3308      	adds	r3, #8
 800c12e:	2100      	movs	r1, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f001 fd29 	bl	800db88 <RCCEx_PLL2_Config>
 800c136:	4603      	mov	r3, r0
 800c138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c13c:	e015      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c142:	3328      	adds	r3, #40	; 0x28
 800c144:	2102      	movs	r1, #2
 800c146:	4618      	mov	r0, r3
 800c148:	f001 fdd0 	bl	800dcec <RCCEx_PLL3_Config>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c152:	e00a      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c15a:	e006      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c15c:	bf00      	nop
 800c15e:	e004      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c160:	bf00      	nop
 800c162:	e002      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c164:	bf00      	nop
 800c166:	e000      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c16a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10e      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c172:	4b06      	ldr	r3, [pc, #24]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c176:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c182:	4a02      	ldr	r2, [pc, #8]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c184:	430b      	orrs	r3, r1
 800c186:	6593      	str	r3, [r2, #88]	; 0x58
 800c188:	e006      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c18a:	bf00      	nop
 800c18c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c1a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	d055      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c1c4:	d033      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c1c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c1ca:	d82c      	bhi.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1d0:	d02f      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1d6:	d826      	bhi.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c1dc:	d02b      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c1de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c1e2:	d820      	bhi.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1e8:	d012      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c1ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1ee:	d81a      	bhi.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d022      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c1f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1f8:	d115      	bne.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fe:	3308      	adds	r3, #8
 800c200:	2100      	movs	r1, #0
 800c202:	4618      	mov	r0, r3
 800c204:	f001 fcc0 	bl	800db88 <RCCEx_PLL2_Config>
 800c208:	4603      	mov	r3, r0
 800c20a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c20e:	e015      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	3328      	adds	r3, #40	; 0x28
 800c216:	2102      	movs	r1, #2
 800c218:	4618      	mov	r0, r3
 800c21a:	f001 fd67 	bl	800dcec <RCCEx_PLL3_Config>
 800c21e:	4603      	mov	r3, r0
 800c220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c224:	e00a      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c22c:	e006      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c22e:	bf00      	nop
 800c230:	e004      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c232:	bf00      	nop
 800c234:	e002      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c236:	bf00      	nop
 800c238:	e000      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c23a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c23c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10b      	bne.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c244:	4ba1      	ldr	r3, [pc, #644]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c248:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c250:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c254:	4a9d      	ldr	r2, [pc, #628]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c256:	430b      	orrs	r3, r1
 800c258:	6593      	str	r3, [r2, #88]	; 0x58
 800c25a:	e003      	b.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c25c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	f002 0308 	and.w	r3, r2, #8
 800c270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c274:	2300      	movs	r3, #0
 800c276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c27a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c27e:	460b      	mov	r3, r1
 800c280:	4313      	orrs	r3, r2
 800c282:	d01e      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c290:	d10c      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c296:	3328      	adds	r3, #40	; 0x28
 800c298:	2102      	movs	r1, #2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f001 fd26 	bl	800dcec <RCCEx_PLL3_Config>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c2ac:	4b87      	ldr	r3, [pc, #540]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2bc:	4a83      	ldr	r2, [pc, #524]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f002 0310 	and.w	r3, r2, #16
 800c2ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	d01e      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ee:	d10c      	bne.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f4:	3328      	adds	r3, #40	; 0x28
 800c2f6:	2102      	movs	r1, #2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 fcf7 	bl	800dcec <RCCEx_PLL3_Config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c30a:	4b70      	ldr	r3, [pc, #448]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c31a:	4a6c      	ldr	r2, [pc, #432]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c31c:	430b      	orrs	r3, r1
 800c31e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c32c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c330:	2300      	movs	r3, #0
 800c332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c336:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c33a:	460b      	mov	r3, r1
 800c33c:	4313      	orrs	r3, r2
 800c33e:	d03e      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c34c:	d022      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c34e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c352:	d81b      	bhi.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c354:	2b00      	cmp	r3, #0
 800c356:	d003      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35c:	d00b      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c35e:	e015      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c364:	3308      	adds	r3, #8
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 fc0d 	bl	800db88 <RCCEx_PLL2_Config>
 800c36e:	4603      	mov	r3, r0
 800c370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c374:	e00f      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37a:	3328      	adds	r3, #40	; 0x28
 800c37c:	2102      	movs	r1, #2
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 fcb4 	bl	800dcec <RCCEx_PLL3_Config>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c38a:	e004      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c392:	e000      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c394:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10b      	bne.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c39e:	4b4b      	ldr	r3, [pc, #300]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3ae:	4a47      	ldr	r2, [pc, #284]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3b0:	430b      	orrs	r3, r1
 800c3b2:	6593      	str	r3, [r2, #88]	; 0x58
 800c3b4:	e003      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c3ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	d03b      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3e6:	d01f      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c3e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3ec:	d818      	bhi.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c3ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3f2:	d003      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c3f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3f8:	d007      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c3fa:	e011      	b.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3fc:	4b33      	ldr	r3, [pc, #204]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	4a32      	ldr	r2, [pc, #200]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c408:	e00f      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c40e:	3328      	adds	r3, #40	; 0x28
 800c410:	2101      	movs	r1, #1
 800c412:	4618      	mov	r0, r3
 800c414:	f001 fc6a 	bl	800dcec <RCCEx_PLL3_Config>
 800c418:	4603      	mov	r3, r0
 800c41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c41e:	e004      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c426:	e000      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10b      	bne.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c432:	4b26      	ldr	r3, [pc, #152]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c436:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c442:	4a22      	ldr	r2, [pc, #136]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c444:	430b      	orrs	r3, r1
 800c446:	6553      	str	r3, [r2, #84]	; 0x54
 800c448:	e003      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c44a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c44e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c45e:	673b      	str	r3, [r7, #112]	; 0x70
 800c460:	2300      	movs	r3, #0
 800c462:	677b      	str	r3, [r7, #116]	; 0x74
 800c464:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c468:	460b      	mov	r3, r1
 800c46a:	4313      	orrs	r3, r2
 800c46c:	d034      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c47c:	d007      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c47e:	e011      	b.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c480:	4b12      	ldr	r3, [pc, #72]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c484:	4a11      	ldr	r2, [pc, #68]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c48a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c48c:	e00e      	b.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c492:	3308      	adds	r3, #8
 800c494:	2102      	movs	r1, #2
 800c496:	4618      	mov	r0, r3
 800c498:	f001 fb76 	bl	800db88 <RCCEx_PLL2_Config>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c4a2:	e003      	b.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c4aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10d      	bne.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c4b4:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c2:	4a02      	ldr	r2, [pc, #8]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c4c4:	430b      	orrs	r3, r1
 800c4c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c4c8:	e006      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c4ca:	bf00      	nop
 800c4cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c4e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	d00c      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4f8:	3328      	adds	r3, #40	; 0x28
 800c4fa:	2102      	movs	r1, #2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fbf5 	bl	800dcec <RCCEx_PLL3_Config>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c51a:	663b      	str	r3, [r7, #96]	; 0x60
 800c51c:	2300      	movs	r3, #0
 800c51e:	667b      	str	r3, [r7, #100]	; 0x64
 800c520:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c524:	460b      	mov	r3, r1
 800c526:	4313      	orrs	r3, r2
 800c528:	d038      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c536:	d018      	beq.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c53c:	d811      	bhi.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c542:	d014      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c548:	d80b      	bhi.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d011      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c552:	d106      	bne.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c554:	4bc3      	ldr	r3, [pc, #780]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c558:	4ac2      	ldr	r2, [pc, #776]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c55a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c55e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c560:	e008      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c568:	e004      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c56a:	bf00      	nop
 800c56c:	e002      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c56e:	bf00      	nop
 800c570:	e000      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c572:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10b      	bne.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c57c:	4bb9      	ldr	r3, [pc, #740]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c580:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c58c:	4ab5      	ldr	r2, [pc, #724]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c58e:	430b      	orrs	r3, r1
 800c590:	6553      	str	r3, [r2, #84]	; 0x54
 800c592:	e003      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c5a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	d009      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c5b8:	4baa      	ldr	r3, [pc, #680]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5c6:	4aa7      	ldr	r2, [pc, #668]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c5d8:	653b      	str	r3, [r7, #80]	; 0x50
 800c5da:	2300      	movs	r3, #0
 800c5dc:	657b      	str	r3, [r7, #84]	; 0x54
 800c5de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	d00a      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c5e8:	4b9e      	ldr	r3, [pc, #632]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c5f8:	4a9a      	ldr	r2, [pc, #616]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c60a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c60c:	2300      	movs	r3, #0
 800c60e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c610:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c614:	460b      	mov	r3, r1
 800c616:	4313      	orrs	r3, r2
 800c618:	d009      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c61a:	4b92      	ldr	r3, [pc, #584]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c61e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c628:	4a8e      	ldr	r2, [pc, #568]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c62a:	430b      	orrs	r3, r1
 800c62c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c63a:	643b      	str	r3, [r7, #64]	; 0x40
 800c63c:	2300      	movs	r3, #0
 800c63e:	647b      	str	r3, [r7, #68]	; 0x44
 800c640:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c644:	460b      	mov	r3, r1
 800c646:	4313      	orrs	r3, r2
 800c648:	d00e      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c64a:	4b86      	ldr	r3, [pc, #536]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	4a85      	ldr	r2, [pc, #532]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c650:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c654:	6113      	str	r3, [r2, #16]
 800c656:	4b83      	ldr	r3, [pc, #524]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c658:	6919      	ldr	r1, [r3, #16]
 800c65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c65e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c662:	4a80      	ldr	r2, [pc, #512]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c664:	430b      	orrs	r3, r1
 800c666:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c674:	63bb      	str	r3, [r7, #56]	; 0x38
 800c676:	2300      	movs	r3, #0
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c67a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c67e:	460b      	mov	r3, r1
 800c680:	4313      	orrs	r3, r2
 800c682:	d009      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c684:	4b77      	ldr	r3, [pc, #476]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c688:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	4a74      	ldr	r2, [pc, #464]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c694:	430b      	orrs	r3, r1
 800c696:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c6a4:	633b      	str	r3, [r7, #48]	; 0x30
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	d00a      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c6b4:	4b6b      	ldr	r3, [pc, #428]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6c4:	4a67      	ldr	r2, [pc, #412]	; (800c864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c6c6:	430b      	orrs	r3, r1
 800c6c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	d011      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f001 fa4a 	bl	800db88 <RCCEx_PLL2_Config>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	2100      	movs	r1, #0
 800c714:	6239      	str	r1, [r7, #32]
 800c716:	f003 0302 	and.w	r3, r3, #2
 800c71a:	627b      	str	r3, [r7, #36]	; 0x24
 800c71c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c720:	460b      	mov	r3, r1
 800c722:	4313      	orrs	r3, r2
 800c724:	d011      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c72a:	3308      	adds	r3, #8
 800c72c:	2101      	movs	r1, #1
 800c72e:	4618      	mov	r0, r3
 800c730:	f001 fa2a 	bl	800db88 <RCCEx_PLL2_Config>
 800c734:	4603      	mov	r3, r0
 800c736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c73a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c752:	2100      	movs	r1, #0
 800c754:	61b9      	str	r1, [r7, #24]
 800c756:	f003 0304 	and.w	r3, r3, #4
 800c75a:	61fb      	str	r3, [r7, #28]
 800c75c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c760:	460b      	mov	r3, r1
 800c762:	4313      	orrs	r3, r2
 800c764:	d011      	beq.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c76a:	3308      	adds	r3, #8
 800c76c:	2102      	movs	r1, #2
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 fa0a 	bl	800db88 <RCCEx_PLL2_Config>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c77a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	2100      	movs	r1, #0
 800c794:	6139      	str	r1, [r7, #16]
 800c796:	f003 0308 	and.w	r3, r3, #8
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	d011      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7aa:	3328      	adds	r3, #40	; 0x28
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f001 fa9c 	bl	800dcec <RCCEx_PLL3_Config>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c7ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d003      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	f003 0310 	and.w	r3, r3, #16
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	d011      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ea:	3328      	adds	r3, #40	; 0x28
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f001 fa7c 	bl	800dcec <RCCEx_PLL3_Config>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c7fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	2100      	movs	r1, #0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	f003 0320 	and.w	r3, r3, #32
 800c81a:	607b      	str	r3, [r7, #4]
 800c81c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c820:	460b      	mov	r3, r1
 800c822:	4313      	orrs	r3, r2
 800c824:	d011      	beq.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c82a:	3328      	adds	r3, #40	; 0x28
 800c82c:	2102      	movs	r1, #2
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 fa5c 	bl	800dcec <RCCEx_PLL3_Config>
 800c834:	4603      	mov	r3, r0
 800c836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c83a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c84a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	e000      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
}
 800c858:	4618      	mov	r0, r3
 800c85a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c85e:	46bd      	mov	sp, r7
 800c860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c864:	58024400 	.word	0x58024400

0800c868 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b090      	sub	sp, #64	; 0x40
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c872:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c876:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c87a:	430b      	orrs	r3, r1
 800c87c:	f040 8094 	bne.w	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c880:	4b9e      	ldr	r3, [pc, #632]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	f003 0307 	and.w	r3, r3, #7
 800c888:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	2b04      	cmp	r3, #4
 800c88e:	f200 8087 	bhi.w	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c892:	a201      	add	r2, pc, #4	; (adr r2, 800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8ad 	.word	0x0800c8ad
 800c89c:	0800c8d5 	.word	0x0800c8d5
 800c8a0:	0800c8fd 	.word	0x0800c8fd
 800c8a4:	0800c999 	.word	0x0800c999
 800c8a8:	0800c925 	.word	0x0800c925
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8ac:	4b93      	ldr	r3, [pc, #588]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8b8:	d108      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 f810 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c8:	f000 bd45 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d0:	f000 bd41 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8d4:	4b89      	ldr	r3, [pc, #548]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8e0:	d108      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8e2:	f107 0318 	add.w	r3, r7, #24
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 fd54 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f0:	f000 bd31 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f8:	f000 bd2d 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8fc:	4b7f      	ldr	r3, [pc, #508]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c908:	d108      	bne.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c90a:	f107 030c 	add.w	r3, r7, #12
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 fe94 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c918:	f000 bd1d 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c920:	f000 bd19 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c924:	4b75      	ldr	r3, [pc, #468]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c92c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c92e:	4b73      	ldr	r3, [pc, #460]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	2b04      	cmp	r3, #4
 800c938:	d10c      	bne.n	800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d109      	bne.n	800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c940:	4b6e      	ldr	r3, [pc, #440]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	08db      	lsrs	r3, r3, #3
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	4a6d      	ldr	r2, [pc, #436]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c94c:	fa22 f303 	lsr.w	r3, r2, r3
 800c950:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c952:	e01f      	b.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c954:	4b69      	ldr	r3, [pc, #420]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c960:	d106      	bne.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c968:	d102      	bne.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c96a:	4b66      	ldr	r3, [pc, #408]	; (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c96e:	e011      	b.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c970:	4b62      	ldr	r3, [pc, #392]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c97c:	d106      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c984:	d102      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c986:	4b60      	ldr	r3, [pc, #384]	; (800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c98a:	e003      	b.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c990:	f000 bce1 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c994:	f000 bcdf 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c998:	4b5c      	ldr	r3, [pc, #368]	; (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99c:	f000 bcdb 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a4:	f000 bcd7 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c9b0:	430b      	orrs	r3, r1
 800c9b2:	f040 80ad 	bne.w	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c9b6:	4b51      	ldr	r3, [pc, #324]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c9be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c6:	d056      	beq.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ce:	f200 8090 	bhi.w	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	2bc0      	cmp	r3, #192	; 0xc0
 800c9d6:	f000 8088 	beq.w	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	2bc0      	cmp	r3, #192	; 0xc0
 800c9de:	f200 8088 	bhi.w	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	2b80      	cmp	r3, #128	; 0x80
 800c9e6:	d032      	beq.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2b80      	cmp	r3, #128	; 0x80
 800c9ec:	f200 8081 	bhi.w	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d003      	beq.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	2b40      	cmp	r3, #64	; 0x40
 800c9fa:	d014      	beq.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c9fc:	e079      	b.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9fe:	4b3f      	ldr	r3, [pc, #252]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca0a:	d108      	bne.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 ff67 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca1a:	f000 bc9c 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca22:	f000 bc98 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca26:	4b35      	ldr	r3, [pc, #212]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca32:	d108      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca34:	f107 0318 	add.w	r3, r7, #24
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 fcab 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca42:	f000 bc88 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca4a:	f000 bc84 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca4e:	4b2b      	ldr	r3, [pc, #172]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca5a:	d108      	bne.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca5c:	f107 030c 	add.w	r3, r7, #12
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fdeb 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca6a:	f000 bc74 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca72:	f000 bc70 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca76:	4b21      	ldr	r3, [pc, #132]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca80:	4b1e      	ldr	r3, [pc, #120]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d10c      	bne.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d109      	bne.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca92:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	08db      	lsrs	r3, r3, #3
 800ca98:	f003 0303 	and.w	r3, r3, #3
 800ca9c:	4a18      	ldr	r2, [pc, #96]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca9e:	fa22 f303 	lsr.w	r3, r2, r3
 800caa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caa4:	e01f      	b.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800caa6:	4b15      	ldr	r3, [pc, #84]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab2:	d106      	bne.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800cab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caba:	d102      	bne.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cabc:	4b11      	ldr	r3, [pc, #68]	; (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cac0:	e011      	b.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cac2:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cace:	d106      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800cad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad6:	d102      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cad8:	4b0b      	ldr	r3, [pc, #44]	; (800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cadc:	e003      	b.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cae2:	f000 bc38 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cae6:	f000 bc36 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800caea:	4b08      	ldr	r3, [pc, #32]	; (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caee:	f000 bc32 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf6:	f000 bc2e 	b.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cafa:	bf00      	nop
 800cafc:	58024400 	.word	0x58024400
 800cb00:	03d09000 	.word	0x03d09000
 800cb04:	003d0900 	.word	0x003d0900
 800cb08:	017d7840 	.word	0x017d7840
 800cb0c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb14:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	f040 809c 	bne.w	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cb1e:	4b9e      	ldr	r3, [pc, #632]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cb26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb2e:	d054      	beq.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb36:	f200 808b 	bhi.w	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb40:	f000 8083 	beq.w	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb4a:	f200 8081 	bhi.w	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb54:	d02f      	beq.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb5c:	d878      	bhi.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d004      	beq.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb6a:	d012      	beq.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cb6c:	e070      	b.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb6e:	4b8a      	ldr	r3, [pc, #552]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb7a:	d107      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 feaf 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb8a:	e3e4      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb90:	e3e1      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb92:	4b81      	ldr	r3, [pc, #516]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb9e:	d107      	bne.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cba0:	f107 0318 	add.w	r3, r7, #24
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 fbf5 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbae:	e3d2      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb4:	e3cf      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbb6:	4b78      	ldr	r3, [pc, #480]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbc2:	d107      	bne.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbc4:	f107 030c 	add.w	r3, r7, #12
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fd37 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd2:	e3c0      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd8:	e3bd      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbda:	4b6f      	ldr	r3, [pc, #444]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbe2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbe4:	4b6c      	ldr	r3, [pc, #432]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0304 	and.w	r3, r3, #4
 800cbec:	2b04      	cmp	r3, #4
 800cbee:	d10c      	bne.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d109      	bne.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbf6:	4b68      	ldr	r3, [pc, #416]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	08db      	lsrs	r3, r3, #3
 800cbfc:	f003 0303 	and.w	r3, r3, #3
 800cc00:	4a66      	ldr	r2, [pc, #408]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cc02:	fa22 f303 	lsr.w	r3, r2, r3
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc08:	e01e      	b.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc0a:	4b63      	ldr	r3, [pc, #396]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc16:	d106      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc1e:	d102      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc20:	4b5f      	ldr	r3, [pc, #380]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc24:	e010      	b.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc26:	4b5c      	ldr	r3, [pc, #368]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc32:	d106      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800cc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc3a:	d102      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc3c:	4b59      	ldr	r3, [pc, #356]	; (800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc40:	e002      	b.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc46:	e386      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc48:	e385      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc4a:	4b57      	ldr	r3, [pc, #348]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4e:	e382      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc54:	e37f      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc5a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	f040 80a7 	bne.w	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc64:	4b4c      	ldr	r3, [pc, #304]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc68:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cc6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc74:	d055      	beq.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc7c:	f200 8096 	bhi.w	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc86:	f000 8084 	beq.w	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc90:	f200 808c 	bhi.w	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc9a:	d030      	beq.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cca2:	f200 8083 	bhi.w	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d004      	beq.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ccb2:	d012      	beq.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ccb4:	e07a      	b.n	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccb6:	4b38      	ldr	r3, [pc, #224]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccc2:	d107      	bne.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fe0b 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccd2:	e340      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd8:	e33d      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccda:	4b2f      	ldr	r3, [pc, #188]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cce6:	d107      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cce8:	f107 0318 	add.w	r3, r7, #24
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fb51 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf6:	e32e      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccfc:	e32b      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccfe:	4b26      	ldr	r3, [pc, #152]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd0a:	d107      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd0c:	f107 030c 	add.w	r3, r7, #12
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 fc93 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd1a:	e31c      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd20:	e319      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd22:	4b1d      	ldr	r3, [pc, #116]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd2a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd2c:	4b1a      	ldr	r3, [pc, #104]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0304 	and.w	r3, r3, #4
 800cd34:	2b04      	cmp	r3, #4
 800cd36:	d10c      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d109      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd3e:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	08db      	lsrs	r3, r3, #3
 800cd44:	f003 0303 	and.w	r3, r3, #3
 800cd48:	4a14      	ldr	r2, [pc, #80]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cd4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd50:	e01e      	b.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd52:	4b11      	ldr	r3, [pc, #68]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd5e:	d106      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd66:	d102      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd68:	4b0d      	ldr	r3, [pc, #52]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd6c:	e010      	b.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd7a:	d106      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd82:	d102      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd84:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd88:	e002      	b.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd8e:	e2e2      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd90:	e2e1      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd96:	e2de      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd98:	58024400 	.word	0x58024400
 800cd9c:	03d09000 	.word	0x03d09000
 800cda0:	003d0900 	.word	0x003d0900
 800cda4:	017d7840 	.word	0x017d7840
 800cda8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb0:	e2d1      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cdb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdb6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cdba:	430b      	orrs	r3, r1
 800cdbc:	f040 809c 	bne.w	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cdc0:	4b93      	ldr	r3, [pc, #588]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cdc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdd0:	d054      	beq.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdd8:	f200 808b 	bhi.w	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cde2:	f000 8083 	beq.w	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdec:	f200 8081 	bhi.w	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdf6:	d02f      	beq.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdfe:	d878      	bhi.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d004      	beq.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce0c:	d012      	beq.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ce0e:	e070      	b.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce10:	4b7f      	ldr	r3, [pc, #508]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce1c:	d107      	bne.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 fd5e 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce2c:	e293      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce32:	e290      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce34:	4b76      	ldr	r3, [pc, #472]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce40:	d107      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce42:	f107 0318 	add.w	r3, r7, #24
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 faa4 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce50:	e281      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce56:	e27e      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce58:	4b6d      	ldr	r3, [pc, #436]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce64:	d107      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce66:	f107 030c 	add.w	r3, r7, #12
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f000 fbe6 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce74:	e26f      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce7a:	e26c      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce7c:	4b64      	ldr	r3, [pc, #400]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce86:	4b62      	ldr	r3, [pc, #392]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 0304 	and.w	r3, r3, #4
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d10c      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d109      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce98:	4b5d      	ldr	r3, [pc, #372]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	08db      	lsrs	r3, r3, #3
 800ce9e:	f003 0303 	and.w	r3, r3, #3
 800cea2:	4a5c      	ldr	r2, [pc, #368]	; (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cea4:	fa22 f303 	lsr.w	r3, r2, r3
 800cea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceaa:	e01e      	b.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ceac:	4b58      	ldr	r3, [pc, #352]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceb8:	d106      	bne.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ceba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cec0:	d102      	bne.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cec2:	4b55      	ldr	r3, [pc, #340]	; (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cec6:	e010      	b.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cec8:	4b51      	ldr	r3, [pc, #324]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ced0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ced4:	d106      	bne.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cedc:	d102      	bne.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cede:	4b4f      	ldr	r3, [pc, #316]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee2:	e002      	b.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cee8:	e235      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ceea:	e234      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ceec:	4b4c      	ldr	r3, [pc, #304]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef0:	e231      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef6:	e22e      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cf00:	430b      	orrs	r3, r1
 800cf02:	f040 808f 	bne.w	800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cf06:	4b42      	ldr	r3, [pc, #264]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf0a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cf0e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf16:	d06b      	beq.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf1e:	d874      	bhi.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf26:	d056      	beq.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf2e:	d86c      	bhi.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf36:	d03b      	beq.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf3e:	d864      	bhi.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf46:	d021      	beq.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf4e:	d85c      	bhi.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d004      	beq.n	800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf5c:	d004      	beq.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cf5e:	e054      	b.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf60:	f7fe fa0a 	bl	800b378 <HAL_RCC_GetPCLK1Freq>
 800cf64:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf66:	e1f6      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf68:	4b29      	ldr	r3, [pc, #164]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf74:	d107      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf76:	f107 0318 	add.w	r3, r7, #24
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 fa0a 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf84:	e1e7      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf8a:	e1e4      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf8c:	4b20      	ldr	r3, [pc, #128]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf98:	d107      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf9a:	f107 030c 	add.w	r3, r7, #12
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 fb4c 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa8:	e1d5      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfae:	e1d2      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cfb0:	4b17      	ldr	r3, [pc, #92]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b04      	cmp	r3, #4
 800cfba:	d109      	bne.n	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfbc:	4b14      	ldr	r3, [pc, #80]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	08db      	lsrs	r3, r3, #3
 800cfc2:	f003 0303 	and.w	r3, r3, #3
 800cfc6:	4a13      	ldr	r2, [pc, #76]	; (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfce:	e1c2      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd4:	e1bf      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cfd6:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe2:	d102      	bne.n	800cfea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfe8:	e1b5      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfee:	e1b2      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cff0:	4b07      	ldr	r3, [pc, #28]	; (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cffc:	d102      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d002:	e1a8      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d008:	e1a5      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d00e:	e1a2      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d010:	58024400 	.word	0x58024400
 800d014:	03d09000 	.word	0x03d09000
 800d018:	003d0900 	.word	0x003d0900
 800d01c:	017d7840 	.word	0x017d7840
 800d020:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d028:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d02c:	430b      	orrs	r3, r1
 800d02e:	d173      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d030:	4b9c      	ldr	r3, [pc, #624]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d038:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d040:	d02f      	beq.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d048:	d863      	bhi.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d004      	beq.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d056:	d012      	beq.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800d058:	e05b      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d05a:	4b92      	ldr	r3, [pc, #584]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d066:	d107      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d068:	f107 0318 	add.w	r3, r7, #24
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 f991 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d076:	e16e      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d07c:	e16b      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d07e:	4b89      	ldr	r3, [pc, #548]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d08a:	d107      	bne.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d08c:	f107 030c 	add.w	r3, r7, #12
 800d090:	4618      	mov	r0, r3
 800d092:	f000 fad3 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d09a:	e15c      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a0:	e159      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d0a2:	4b80      	ldr	r3, [pc, #512]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0ac:	4b7d      	ldr	r3, [pc, #500]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d10c      	bne.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800d0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d109      	bne.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0be:	4b79      	ldr	r3, [pc, #484]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	08db      	lsrs	r3, r3, #3
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	4a77      	ldr	r2, [pc, #476]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0d0:	e01e      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0d2:	4b74      	ldr	r3, [pc, #464]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0de:	d106      	bne.n	800d0ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800d0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0e6:	d102      	bne.n	800d0ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0e8:	4b70      	ldr	r3, [pc, #448]	; (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0ec:	e010      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0ee:	4b6d      	ldr	r3, [pc, #436]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0fa:	d106      	bne.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800d0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d102:	d102      	bne.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d104:	4b6a      	ldr	r3, [pc, #424]	; (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d108:	e002      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d10e:	e122      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d110:	e121      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d116:	e11e      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d11c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d120:	430b      	orrs	r3, r1
 800d122:	d133      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d124:	4b5f      	ldr	r3, [pc, #380]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d12c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d13a:	d012      	beq.n	800d162 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800d13c:	e023      	b.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d13e:	4b59      	ldr	r3, [pc, #356]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d14a:	d107      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d14c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fbc7 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d15a:	e0fc      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d15c:	2300      	movs	r3, #0
 800d15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d160:	e0f9      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d162:	4b50      	ldr	r3, [pc, #320]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d16a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d16e:	d107      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d170:	f107 0318 	add.w	r3, r7, #24
 800d174:	4618      	mov	r0, r3
 800d176:	f000 f90d 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d17e:	e0ea      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d184:	e0e7      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d18a:	e0e4      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d190:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d194:	430b      	orrs	r3, r1
 800d196:	f040 808d 	bne.w	800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d19a:	4b42      	ldr	r3, [pc, #264]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d19e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d1a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1aa:	d06b      	beq.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1b2:	d874      	bhi.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ba:	d056      	beq.n	800d26a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1c2:	d86c      	bhi.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d1ca:	d03b      	beq.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d1d2:	d864      	bhi.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1da:	d021      	beq.n	800d220 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1e2:	d85c      	bhi.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d004      	beq.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1f0:	d004      	beq.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800d1f2:	e054      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d1f4:	f000 f8b8 	bl	800d368 <HAL_RCCEx_GetD3PCLK1Freq>
 800d1f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1fa:	e0ac      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1fc:	4b29      	ldr	r3, [pc, #164]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d208:	d107      	bne.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d20a:	f107 0318 	add.w	r3, r7, #24
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 f8c0 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d218:	e09d      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d21e:	e09a      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d220:	4b20      	ldr	r3, [pc, #128]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d22c:	d107      	bne.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d22e:	f107 030c 	add.w	r3, r7, #12
 800d232:	4618      	mov	r0, r3
 800d234:	f000 fa02 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d23c:	e08b      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d242:	e088      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d244:	4b17      	ldr	r3, [pc, #92]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 0304 	and.w	r3, r3, #4
 800d24c:	2b04      	cmp	r3, #4
 800d24e:	d109      	bne.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d250:	4b14      	ldr	r3, [pc, #80]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	08db      	lsrs	r3, r3, #3
 800d256:	f003 0303 	and.w	r3, r3, #3
 800d25a:	4a13      	ldr	r2, [pc, #76]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d25c:	fa22 f303 	lsr.w	r3, r2, r3
 800d260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d262:	e078      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d268:	e075      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d26a:	4b0e      	ldr	r3, [pc, #56]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d276:	d102      	bne.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d278:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d27c:	e06b      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d27e:	2300      	movs	r3, #0
 800d280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d282:	e068      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d284:	4b07      	ldr	r3, [pc, #28]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d28c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d290:	d102      	bne.n	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d292:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d296:	e05e      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d29c:	e05b      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a2:	e058      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d2a4:	58024400 	.word	0x58024400
 800d2a8:	03d09000 	.word	0x03d09000
 800d2ac:	003d0900 	.word	0x003d0900
 800d2b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d2b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d2bc:	430b      	orrs	r3, r1
 800d2be:	d148      	bne.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d2c0:	4b27      	ldr	r3, [pc, #156]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d2c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2d0:	d02a      	beq.n	800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2d8:	d838      	bhi.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d004      	beq.n	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2e6:	d00d      	beq.n	800d304 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d2e8:	e030      	b.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d2ea:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2f6:	d102      	bne.n	800d2fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d2f8:	4b1a      	ldr	r3, [pc, #104]	; (800d364 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2fc:	e02b      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d302:	e028      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d304:	4b16      	ldr	r3, [pc, #88]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d30c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d310:	d107      	bne.n	800d322 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fae4 	bl	800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d320:	e019      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d326:	e016      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d328:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d334:	d107      	bne.n	800d346 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d336:	f107 0318 	add.w	r3, r7, #24
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 f82a 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d344:	e007      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d34a:	e004      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d350:	e001      	b.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3740      	adds	r7, #64	; 0x40
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	58024400 	.word	0x58024400
 800d364:	017d7840 	.word	0x017d7840

0800d368 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d36c:	f7fd ffd4 	bl	800b318 <HAL_RCC_GetHCLKFreq>
 800d370:	4602      	mov	r2, r0
 800d372:	4b06      	ldr	r3, [pc, #24]	; (800d38c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	091b      	lsrs	r3, r3, #4
 800d378:	f003 0307 	and.w	r3, r3, #7
 800d37c:	4904      	ldr	r1, [pc, #16]	; (800d390 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d37e:	5ccb      	ldrb	r3, [r1, r3]
 800d380:	f003 031f 	and.w	r3, r3, #31
 800d384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d388:	4618      	mov	r0, r3
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	58024400 	.word	0x58024400
 800d390:	08017e9c 	.word	0x08017e9c

0800d394 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d394:	b480      	push	{r7}
 800d396:	b089      	sub	sp, #36	; 0x24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d39c:	4ba1      	ldr	r3, [pc, #644]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a0:	f003 0303 	and.w	r3, r3, #3
 800d3a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d3a6:	4b9f      	ldr	r3, [pc, #636]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3aa:	0b1b      	lsrs	r3, r3, #12
 800d3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d3b2:	4b9c      	ldr	r3, [pc, #624]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b6:	091b      	lsrs	r3, r3, #4
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d3be:	4b99      	ldr	r3, [pc, #612]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c2:	08db      	lsrs	r3, r3, #3
 800d3c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	fb02 f303 	mul.w	r3, r2, r3
 800d3ce:	ee07 3a90 	vmov	s15, r3
 800d3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 8111 	beq.w	800d604 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	f000 8083 	beq.w	800d4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	f200 80a1 	bhi.w	800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d003      	beq.n	800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d056      	beq.n	800d4ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d3fe:	e099      	b.n	800d534 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d400:	4b88      	ldr	r3, [pc, #544]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 0320 	and.w	r3, r3, #32
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d02d      	beq.n	800d468 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d40c:	4b85      	ldr	r3, [pc, #532]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	08db      	lsrs	r3, r3, #3
 800d412:	f003 0303 	and.w	r3, r3, #3
 800d416:	4a84      	ldr	r2, [pc, #528]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d418:	fa22 f303 	lsr.w	r3, r2, r3
 800d41c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	ee07 3a90 	vmov	s15, r3
 800d424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	ee07 3a90 	vmov	s15, r3
 800d42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d436:	4b7b      	ldr	r3, [pc, #492]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43e:	ee07 3a90 	vmov	s15, r3
 800d442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d446:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d466:	e087      	b.n	800d578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	ee07 3a90 	vmov	s15, r3
 800d46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d472:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d630 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47a:	4b6a      	ldr	r3, [pc, #424]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d48e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4aa:	e065      	b.n	800d578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4be:	4b59      	ldr	r3, [pc, #356]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c6:	ee07 3a90 	vmov	s15, r3
 800d4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ee:	e043      	b.n	800d578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d502:	4b48      	ldr	r3, [pc, #288]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d512:	ed97 6a03 	vldr	s12, [r7, #12]
 800d516:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d52e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d532:	e021      	b.n	800d578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d53e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d546:	4b37      	ldr	r3, [pc, #220]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54e:	ee07 3a90 	vmov	s15, r3
 800d552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d556:	ed97 6a03 	vldr	s12, [r7, #12]
 800d55a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d576:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d578:	4b2a      	ldr	r3, [pc, #168]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57c:	0a5b      	lsrs	r3, r3, #9
 800d57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d582:	ee07 3a90 	vmov	s15, r3
 800d586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d58e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d592:	edd7 6a07 	vldr	s13, [r7, #28]
 800d596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d59a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d59e:	ee17 2a90 	vmov	r2, s15
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d5a6:	4b1f      	ldr	r3, [pc, #124]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5aa:	0c1b      	lsrs	r3, r3, #16
 800d5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b0:	ee07 3a90 	vmov	s15, r3
 800d5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5cc:	ee17 2a90 	vmov	r2, s15
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d5d4:	4b13      	ldr	r3, [pc, #76]	; (800d624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d8:	0e1b      	lsrs	r3, r3, #24
 800d5da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5de:	ee07 3a90 	vmov	s15, r3
 800d5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5fa:	ee17 2a90 	vmov	r2, s15
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d602:	e008      	b.n	800d616 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	609a      	str	r2, [r3, #8]
}
 800d616:	bf00      	nop
 800d618:	3724      	adds	r7, #36	; 0x24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	58024400 	.word	0x58024400
 800d628:	03d09000 	.word	0x03d09000
 800d62c:	46000000 	.word	0x46000000
 800d630:	4c742400 	.word	0x4c742400
 800d634:	4a742400 	.word	0x4a742400
 800d638:	4bbebc20 	.word	0x4bbebc20

0800d63c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b089      	sub	sp, #36	; 0x24
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d644:	4ba1      	ldr	r3, [pc, #644]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d648:	f003 0303 	and.w	r3, r3, #3
 800d64c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d64e:	4b9f      	ldr	r3, [pc, #636]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d652:	0d1b      	lsrs	r3, r3, #20
 800d654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d658:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d65a:	4b9c      	ldr	r3, [pc, #624]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65e:	0a1b      	lsrs	r3, r3, #8
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d666:	4b99      	ldr	r3, [pc, #612]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d66a:	08db      	lsrs	r3, r3, #3
 800d66c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	fb02 f303 	mul.w	r3, r2, r3
 800d676:	ee07 3a90 	vmov	s15, r3
 800d67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 8111 	beq.w	800d8ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	f000 8083 	beq.w	800d798 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b02      	cmp	r3, #2
 800d696:	f200 80a1 	bhi.w	800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d056      	beq.n	800d754 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d6a6:	e099      	b.n	800d7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6a8:	4b88      	ldr	r3, [pc, #544]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 0320 	and.w	r3, r3, #32
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d02d      	beq.n	800d710 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6b4:	4b85      	ldr	r3, [pc, #532]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	08db      	lsrs	r3, r3, #3
 800d6ba:	f003 0303 	and.w	r3, r3, #3
 800d6be:	4a84      	ldr	r2, [pc, #528]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	ee07 3a90 	vmov	s15, r3
 800d6cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	ee07 3a90 	vmov	s15, r3
 800d6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6de:	4b7b      	ldr	r3, [pc, #492]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d70a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d70e:	e087      	b.n	800d820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d722:	4b6a      	ldr	r3, [pc, #424]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d72a:	ee07 3a90 	vmov	s15, r3
 800d72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d732:	ed97 6a03 	vldr	s12, [r7, #12]
 800d736:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d752:	e065      	b.n	800d820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	ee07 3a90 	vmov	s15, r3
 800d75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d75e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d766:	4b59      	ldr	r3, [pc, #356]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d776:	ed97 6a03 	vldr	s12, [r7, #12]
 800d77a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d796:	e043      	b.n	800d820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	ee07 3a90 	vmov	s15, r3
 800d79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7aa:	4b48      	ldr	r3, [pc, #288]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7da:	e021      	b.n	800d820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ee:	4b37      	ldr	r3, [pc, #220]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f6:	ee07 3a90 	vmov	s15, r3
 800d7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d802:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d81a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d81e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d820:	4b2a      	ldr	r3, [pc, #168]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d824:	0a5b      	lsrs	r3, r3, #9
 800d826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d83a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d83e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d846:	ee17 2a90 	vmov	r2, s15
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d84e:	4b1f      	ldr	r3, [pc, #124]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d852:	0c1b      	lsrs	r3, r3, #16
 800d854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d858:	ee07 3a90 	vmov	s15, r3
 800d85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d864:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d868:	edd7 6a07 	vldr	s13, [r7, #28]
 800d86c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d874:	ee17 2a90 	vmov	r2, s15
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d87c:	4b13      	ldr	r3, [pc, #76]	; (800d8cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d880:	0e1b      	lsrs	r3, r3, #24
 800d882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d892:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d896:	edd7 6a07 	vldr	s13, [r7, #28]
 800d89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a2:	ee17 2a90 	vmov	r2, s15
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d8aa:	e008      	b.n	800d8be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	609a      	str	r2, [r3, #8]
}
 800d8be:	bf00      	nop
 800d8c0:	3724      	adds	r7, #36	; 0x24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	58024400 	.word	0x58024400
 800d8d0:	03d09000 	.word	0x03d09000
 800d8d4:	46000000 	.word	0x46000000
 800d8d8:	4c742400 	.word	0x4c742400
 800d8dc:	4a742400 	.word	0x4a742400
 800d8e0:	4bbebc20 	.word	0x4bbebc20

0800d8e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b089      	sub	sp, #36	; 0x24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8ec:	4ba0      	ldr	r3, [pc, #640]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f0:	f003 0303 	and.w	r3, r3, #3
 800d8f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d8f6:	4b9e      	ldr	r3, [pc, #632]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fa:	091b      	lsrs	r3, r3, #4
 800d8fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d900:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d902:	4b9b      	ldr	r3, [pc, #620]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d90c:	4b98      	ldr	r3, [pc, #608]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d910:	08db      	lsrs	r3, r3, #3
 800d912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	fb02 f303 	mul.w	r3, r2, r3
 800d91c:	ee07 3a90 	vmov	s15, r3
 800d920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d924:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 8111 	beq.w	800db52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	2b02      	cmp	r3, #2
 800d934:	f000 8083 	beq.w	800da3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	f200 80a1 	bhi.w	800da82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d003      	beq.n	800d94e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d056      	beq.n	800d9fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d94c:	e099      	b.n	800da82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d94e:	4b88      	ldr	r3, [pc, #544]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0320 	and.w	r3, r3, #32
 800d956:	2b00      	cmp	r3, #0
 800d958:	d02d      	beq.n	800d9b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d95a:	4b85      	ldr	r3, [pc, #532]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	08db      	lsrs	r3, r3, #3
 800d960:	f003 0303 	and.w	r3, r3, #3
 800d964:	4a83      	ldr	r2, [pc, #524]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d966:	fa22 f303 	lsr.w	r3, r2, r3
 800d96a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	ee07 3a90 	vmov	s15, r3
 800d97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d984:	4b7a      	ldr	r3, [pc, #488]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98c:	ee07 3a90 	vmov	s15, r3
 800d990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d994:	ed97 6a03 	vldr	s12, [r7, #12]
 800d998:	eddf 5a77 	vldr	s11, [pc, #476]	; 800db78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d99c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9b4:	e087      	b.n	800dac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	ee07 3a90 	vmov	s15, r3
 800d9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9c8:	4b69      	ldr	r3, [pc, #420]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d0:	ee07 3a90 	vmov	s15, r3
 800d9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800db78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9f8:	e065      	b.n	800dac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	ee07 3a90 	vmov	s15, r3
 800da00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800db80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800da08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da0c:	4b58      	ldr	r3, [pc, #352]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da14:	ee07 3a90 	vmov	s15, r3
 800da18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da20:	eddf 5a55 	vldr	s11, [pc, #340]	; 800db78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da3c:	e043      	b.n	800dac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	ee07 3a90 	vmov	s15, r3
 800da44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800db84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800da4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da50:	4b47      	ldr	r3, [pc, #284]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da58:	ee07 3a90 	vmov	s15, r3
 800da5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da60:	ed97 6a03 	vldr	s12, [r7, #12]
 800da64:	eddf 5a44 	vldr	s11, [pc, #272]	; 800db78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da80:	e021      	b.n	800dac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	ee07 3a90 	vmov	s15, r3
 800da88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da94:	4b36      	ldr	r3, [pc, #216]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da9c:	ee07 3a90 	vmov	s15, r3
 800daa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daa4:	ed97 6a03 	vldr	s12, [r7, #12]
 800daa8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800db78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800daac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dabc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dac0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dac4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dac6:	4b2a      	ldr	r3, [pc, #168]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daca:	0a5b      	lsrs	r3, r3, #9
 800dacc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad0:	ee07 3a90 	vmov	s15, r3
 800dad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dad8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dadc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dae0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daec:	ee17 2a90 	vmov	r2, s15
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800daf4:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf8:	0c1b      	lsrs	r3, r3, #16
 800dafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dafe:	ee07 3a90 	vmov	s15, r3
 800db02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1a:	ee17 2a90 	vmov	r2, s15
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800db22:	4b13      	ldr	r3, [pc, #76]	; (800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db26:	0e1b      	lsrs	r3, r3, #24
 800db28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db2c:	ee07 3a90 	vmov	s15, r3
 800db30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800db40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db48:	ee17 2a90 	vmov	r2, s15
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800db50:	e008      	b.n	800db64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	609a      	str	r2, [r3, #8]
}
 800db64:	bf00      	nop
 800db66:	3724      	adds	r7, #36	; 0x24
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	58024400 	.word	0x58024400
 800db74:	03d09000 	.word	0x03d09000
 800db78:	46000000 	.word	0x46000000
 800db7c:	4c742400 	.word	0x4c742400
 800db80:	4a742400 	.word	0x4a742400
 800db84:	4bbebc20 	.word	0x4bbebc20

0800db88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db96:	4b53      	ldr	r3, [pc, #332]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800db98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db9a:	f003 0303 	and.w	r3, r3, #3
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d101      	bne.n	800dba6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e099      	b.n	800dcda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dba6:	4b4f      	ldr	r3, [pc, #316]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a4e      	ldr	r2, [pc, #312]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dbac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dbb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbb2:	f7f6 fc53 	bl	800445c <HAL_GetTick>
 800dbb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbb8:	e008      	b.n	800dbcc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbba:	f7f6 fc4f 	bl	800445c <HAL_GetTick>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d901      	bls.n	800dbcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	e086      	b.n	800dcda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbcc:	4b45      	ldr	r3, [pc, #276]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1f0      	bne.n	800dbba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dbd8:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	031b      	lsls	r3, r3, #12
 800dbe6:	493f      	ldr	r1, [pc, #252]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	628b      	str	r3, [r1, #40]	; 0x28
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	025b      	lsls	r3, r3, #9
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	431a      	orrs	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	041b      	lsls	r3, r3, #16
 800dc0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	061b      	lsls	r3, r3, #24
 800dc18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc1c:	4931      	ldr	r1, [pc, #196]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dc22:	4b30      	ldr	r3, [pc, #192]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	695b      	ldr	r3, [r3, #20]
 800dc2e:	492d      	ldr	r1, [pc, #180]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc30:	4313      	orrs	r3, r2
 800dc32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dc34:	4b2b      	ldr	r3, [pc, #172]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	f023 0220 	bic.w	r2, r3, #32
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	699b      	ldr	r3, [r3, #24]
 800dc40:	4928      	ldr	r1, [pc, #160]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc42:	4313      	orrs	r3, r2
 800dc44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dc46:	4b27      	ldr	r3, [pc, #156]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	4a26      	ldr	r2, [pc, #152]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc4c:	f023 0310 	bic.w	r3, r3, #16
 800dc50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dc52:	4b24      	ldr	r3, [pc, #144]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc56:	4b24      	ldr	r3, [pc, #144]	; (800dce8 <RCCEx_PLL2_Config+0x160>)
 800dc58:	4013      	ands	r3, r2
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	69d2      	ldr	r2, [r2, #28]
 800dc5e:	00d2      	lsls	r2, r2, #3
 800dc60:	4920      	ldr	r1, [pc, #128]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dc66:	4b1f      	ldr	r3, [pc, #124]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6a:	4a1e      	ldr	r2, [pc, #120]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc6c:	f043 0310 	orr.w	r3, r3, #16
 800dc70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d106      	bne.n	800dc86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc78:	4b1a      	ldr	r3, [pc, #104]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7c:	4a19      	ldr	r2, [pc, #100]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc84:	e00f      	b.n	800dca6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d106      	bne.n	800dc9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc8c:	4b15      	ldr	r3, [pc, #84]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc90:	4a14      	ldr	r2, [pc, #80]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc98:	e005      	b.n	800dca6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc9a:	4b12      	ldr	r3, [pc, #72]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9e:	4a11      	ldr	r2, [pc, #68]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dca6:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a0e      	ldr	r2, [pc, #56]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dcac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcb2:	f7f6 fbd3 	bl	800445c <HAL_GetTick>
 800dcb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcb8:	e008      	b.n	800dccc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcba:	f7f6 fbcf 	bl	800445c <HAL_GetTick>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	1ad3      	subs	r3, r2, r3
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d901      	bls.n	800dccc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e006      	b.n	800dcda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dccc:	4b05      	ldr	r3, [pc, #20]	; (800dce4 <RCCEx_PLL2_Config+0x15c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d0f0      	beq.n	800dcba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	58024400 	.word	0x58024400
 800dce8:	ffff0007 	.word	0xffff0007

0800dcec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dcfa:	4b53      	ldr	r3, [pc, #332]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfe:	f003 0303 	and.w	r3, r3, #3
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d101      	bne.n	800dd0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e099      	b.n	800de3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dd0a:	4b4f      	ldr	r3, [pc, #316]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a4e      	ldr	r2, [pc, #312]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd16:	f7f6 fba1 	bl	800445c <HAL_GetTick>
 800dd1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd1c:	e008      	b.n	800dd30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd1e:	f7f6 fb9d 	bl	800445c <HAL_GetTick>
 800dd22:	4602      	mov	r2, r0
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d901      	bls.n	800dd30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dd2c:	2303      	movs	r3, #3
 800dd2e:	e086      	b.n	800de3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd30:	4b45      	ldr	r3, [pc, #276]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1f0      	bne.n	800dd1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dd3c:	4b42      	ldr	r3, [pc, #264]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	051b      	lsls	r3, r3, #20
 800dd4a:	493f      	ldr	r1, [pc, #252]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	628b      	str	r3, [r1, #40]	; 0x28
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	3b01      	subs	r3, #1
 800dd56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	025b      	lsls	r3, r3, #9
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	041b      	lsls	r3, r3, #16
 800dd6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd72:	431a      	orrs	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	061b      	lsls	r3, r3, #24
 800dd7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd80:	4931      	ldr	r1, [pc, #196]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd86:	4b30      	ldr	r3, [pc, #192]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	492d      	ldr	r1, [pc, #180]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd94:	4313      	orrs	r3, r2
 800dd96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd98:	4b2b      	ldr	r3, [pc, #172]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	4928      	ldr	r1, [pc, #160]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dda6:	4313      	orrs	r3, r2
 800dda8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ddaa:	4b27      	ldr	r3, [pc, #156]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddae:	4a26      	ldr	r2, [pc, #152]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ddb6:	4b24      	ldr	r3, [pc, #144]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddba:	4b24      	ldr	r3, [pc, #144]	; (800de4c <RCCEx_PLL3_Config+0x160>)
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	69d2      	ldr	r2, [r2, #28]
 800ddc2:	00d2      	lsls	r2, r2, #3
 800ddc4:	4920      	ldr	r1, [pc, #128]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ddca:	4b1f      	ldr	r3, [pc, #124]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddce:	4a1e      	ldr	r2, [pc, #120]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d106      	bne.n	800ddea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dddc:	4b1a      	ldr	r3, [pc, #104]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde0:	4a19      	ldr	r2, [pc, #100]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800dde2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dde6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dde8:	e00f      	b.n	800de0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d106      	bne.n	800ddfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ddf0:	4b15      	ldr	r3, [pc, #84]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	4a14      	ldr	r2, [pc, #80]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800ddf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ddfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddfc:	e005      	b.n	800de0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ddfe:	4b12      	ldr	r3, [pc, #72]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800de00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de02:	4a11      	ldr	r2, [pc, #68]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800de04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800de0a:	4b0f      	ldr	r3, [pc, #60]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a0e      	ldr	r2, [pc, #56]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800de10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de16:	f7f6 fb21 	bl	800445c <HAL_GetTick>
 800de1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de1c:	e008      	b.n	800de30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de1e:	f7f6 fb1d 	bl	800445c <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d901      	bls.n	800de30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e006      	b.n	800de3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de30:	4b05      	ldr	r3, [pc, #20]	; (800de48 <RCCEx_PLL3_Config+0x15c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d0f0      	beq.n	800de1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	58024400 	.word	0x58024400
 800de4c:	ffff0007 	.word	0xffff0007

0800de50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d071      	beq.n	800df46 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7f5 fdb2 	bl	80039e0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2202      	movs	r2, #2
 800de80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	f003 0310 	and.w	r3, r3, #16
 800de8e:	2b10      	cmp	r3, #16
 800de90:	d050      	beq.n	800df34 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	22ca      	movs	r2, #202	; 0xca
 800de98:	625a      	str	r2, [r3, #36]	; 0x24
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2253      	movs	r2, #83	; 0x53
 800dea0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fa4a 	bl	800e33c <RTC_EnterInitMode>
 800dea8:	4603      	mov	r3, r0
 800deaa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d124      	bne.n	800defc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6899      	ldr	r1, [r3, #8]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	4b24      	ldr	r3, [pc, #144]	; (800df50 <HAL_RTC_Init+0x100>)
 800debe:	400b      	ands	r3, r1
 800dec0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	6899      	ldr	r1, [r3, #8]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	431a      	orrs	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	431a      	orrs	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	430a      	orrs	r2, r1
 800dede:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	0419      	lsls	r1, r3, #16
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	68da      	ldr	r2, [r3, #12]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	430a      	orrs	r2, r1
 800def0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fa56 	bl	800e3a4 <RTC_ExitInitMode>
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d113      	bne.n	800df2a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f022 0203 	bic.w	r2, r2, #3
 800df10:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	69da      	ldr	r2, [r3, #28]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	695b      	ldr	r3, [r3, #20]
 800df20:	431a      	orrs	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	430a      	orrs	r2, r1
 800df28:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	22ff      	movs	r2, #255	; 0xff
 800df30:	625a      	str	r2, [r3, #36]	; 0x24
 800df32:	e001      	b.n	800df38 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d103      	bne.n	800df46 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2201      	movs	r2, #1
 800df42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800df46:	7bfb      	ldrb	r3, [r7, #15]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	ff8fffbf 	.word	0xff8fffbf

0800df54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800df54:	b590      	push	{r4, r7, lr}
 800df56:	b087      	sub	sp, #28
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df66:	2b01      	cmp	r3, #1
 800df68:	d101      	bne.n	800df6e <HAL_RTC_SetTime+0x1a>
 800df6a:	2302      	movs	r3, #2
 800df6c:	e089      	b.n	800e082 <HAL_RTC_SetTime+0x12e>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2202      	movs	r2, #2
 800df7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	22ca      	movs	r2, #202	; 0xca
 800df84:	625a      	str	r2, [r3, #36]	; 0x24
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2253      	movs	r2, #83	; 0x53
 800df8c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f000 f9d4 	bl	800e33c <RTC_EnterInitMode>
 800df94:	4603      	mov	r3, r0
 800df96:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800df98:	7cfb      	ldrb	r3, [r7, #19]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d161      	bne.n	800e062 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d126      	bne.n	800dff2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d102      	bne.n	800dfb8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 fa2f 	bl	800e420 <RTC_ByteToBcd2>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	785b      	ldrb	r3, [r3, #1]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 fa28 	bl	800e420 <RTC_ByteToBcd2>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfd4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	789b      	ldrb	r3, [r3, #2]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 fa20 	bl	800e420 <RTC_ByteToBcd2>
 800dfe0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfe2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	78db      	ldrb	r3, [r3, #3]
 800dfea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfec:	4313      	orrs	r3, r2
 800dfee:	617b      	str	r3, [r7, #20]
 800dff0:	e018      	b.n	800e024 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d102      	bne.n	800e006 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	2200      	movs	r2, #0
 800e004:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e012:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e018:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	78db      	ldrb	r3, [r3, #3]
 800e01e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e020:	4313      	orrs	r3, r2
 800e022:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	6979      	ldr	r1, [r7, #20]
 800e02a:	4b18      	ldr	r3, [pc, #96]	; (800e08c <HAL_RTC_SetTime+0x138>)
 800e02c:	400b      	ands	r3, r1
 800e02e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	689a      	ldr	r2, [r3, #8]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e03e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6899      	ldr	r1, [r3, #8]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	68da      	ldr	r2, [r3, #12]
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	431a      	orrs	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	430a      	orrs	r2, r1
 800e056:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f000 f9a3 	bl	800e3a4 <RTC_ExitInitMode>
 800e05e:	4603      	mov	r3, r0
 800e060:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	22ff      	movs	r2, #255	; 0xff
 800e068:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e06a:	7cfb      	ldrb	r3, [r7, #19]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d103      	bne.n	800e078 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e080:	7cfb      	ldrb	r3, [r7, #19]
}
 800e082:	4618      	mov	r0, r3
 800e084:	371c      	adds	r7, #28
 800e086:	46bd      	mov	sp, r7
 800e088:	bd90      	pop	{r4, r7, pc}
 800e08a:	bf00      	nop
 800e08c:	007f7f7f 	.word	0x007f7f7f

0800e090 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	4b22      	ldr	r3, [pc, #136]	; (800e144 <HAL_RTC_GetTime+0xb4>)
 800e0bc:	4013      	ands	r3, r2
 800e0be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	0c1b      	lsrs	r3, r3, #16
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	0a1b      	lsrs	r3, r3, #8
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	0d9b      	lsrs	r3, r3, #22
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d11a      	bne.n	800e13a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	4618      	mov	r0, r3
 800e10a:	f000 f9a9 	bl	800e460 <RTC_Bcd2ToByte>
 800e10e:	4603      	mov	r3, r0
 800e110:	461a      	mov	r2, r3
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	785b      	ldrb	r3, [r3, #1]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f000 f9a0 	bl	800e460 <RTC_Bcd2ToByte>
 800e120:	4603      	mov	r3, r0
 800e122:	461a      	mov	r2, r3
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	789b      	ldrb	r3, [r3, #2]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f000 f997 	bl	800e460 <RTC_Bcd2ToByte>
 800e132:	4603      	mov	r3, r0
 800e134:	461a      	mov	r2, r3
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	007f7f7f 	.word	0x007f7f7f

0800e148 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e148:	b590      	push	{r4, r7, lr}
 800e14a:	b087      	sub	sp, #28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d101      	bne.n	800e162 <HAL_RTC_SetDate+0x1a>
 800e15e:	2302      	movs	r3, #2
 800e160:	e073      	b.n	800e24a <HAL_RTC_SetDate+0x102>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2201      	movs	r2, #1
 800e166:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2202      	movs	r2, #2
 800e16e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10e      	bne.n	800e196 <HAL_RTC_SetDate+0x4e>
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	f003 0310 	and.w	r3, r3, #16
 800e180:	2b00      	cmp	r3, #0
 800e182:	d008      	beq.n	800e196 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	785b      	ldrb	r3, [r3, #1]
 800e188:	f023 0310 	bic.w	r3, r3, #16
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	330a      	adds	r3, #10
 800e190:	b2da      	uxtb	r2, r3
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d11c      	bne.n	800e1d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	78db      	ldrb	r3, [r3, #3]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f000 f93d 	bl	800e420 <RTC_ByteToBcd2>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	785b      	ldrb	r3, [r3, #1]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 f936 	bl	800e420 <RTC_ByteToBcd2>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e1b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	789b      	ldrb	r3, [r3, #2]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 f92e 	bl	800e420 <RTC_ByteToBcd2>
 800e1c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e1c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	617b      	str	r3, [r7, #20]
 800e1d4:	e00e      	b.n	800e1f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	78db      	ldrb	r3, [r3, #3]
 800e1da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	785b      	ldrb	r3, [r3, #1]
 800e1e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e1e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e1e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	22ca      	movs	r2, #202	; 0xca
 800e1fa:	625a      	str	r2, [r3, #36]	; 0x24
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2253      	movs	r2, #83	; 0x53
 800e202:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f000 f899 	bl	800e33c <RTC_EnterInitMode>
 800e20a:	4603      	mov	r3, r0
 800e20c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e20e:	7cfb      	ldrb	r3, [r7, #19]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10a      	bne.n	800e22a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	6979      	ldr	r1, [r7, #20]
 800e21a:	4b0e      	ldr	r3, [pc, #56]	; (800e254 <HAL_RTC_SetDate+0x10c>)
 800e21c:	400b      	ands	r3, r1
 800e21e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 f8bf 	bl	800e3a4 <RTC_ExitInitMode>
 800e226:	4603      	mov	r3, r0
 800e228:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	22ff      	movs	r2, #255	; 0xff
 800e230:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e232:	7cfb      	ldrb	r3, [r7, #19]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d103      	bne.n	800e240 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e248:	7cfb      	ldrb	r3, [r7, #19]


}
 800e24a:	4618      	mov	r0, r3
 800e24c:	371c      	adds	r7, #28
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd90      	pop	{r4, r7, pc}
 800e252:	bf00      	nop
 800e254:	00ffff3f 	.word	0x00ffff3f

0800e258 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	4b21      	ldr	r3, [pc, #132]	; (800e2f0 <HAL_RTC_GetDate+0x98>)
 800e26c:	4013      	ands	r3, r2
 800e26e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	b2da      	uxtb	r2, r3
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	0a1b      	lsrs	r3, r3, #8
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	f003 031f 	and.w	r3, r3, #31
 800e284:	b2da      	uxtb	r2, r3
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e292:	b2da      	uxtb	r2, r3
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	0b5b      	lsrs	r3, r3, #13
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	f003 0307 	and.w	r3, r3, #7
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d11a      	bne.n	800e2e4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	78db      	ldrb	r3, [r3, #3]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 f8d4 	bl	800e460 <RTC_Bcd2ToByte>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	785b      	ldrb	r3, [r3, #1]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 f8cb 	bl	800e460 <RTC_Bcd2ToByte>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	789b      	ldrb	r3, [r3, #2]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f000 f8c2 	bl	800e460 <RTC_Bcd2ToByte>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	461a      	mov	r2, r3
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	00ffff3f 	.word	0x00ffff3f

0800e2f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a0d      	ldr	r2, [pc, #52]	; (800e338 <HAL_RTC_WaitForSynchro+0x44>)
 800e302:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e304:	f7f6 f8aa 	bl	800445c <HAL_GetTick>
 800e308:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e30a:	e009      	b.n	800e320 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e30c:	f7f6 f8a6 	bl	800445c <HAL_GetTick>
 800e310:	4602      	mov	r2, r0
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e31a:	d901      	bls.n	800e320 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e31c:	2303      	movs	r3, #3
 800e31e:	e007      	b.n	800e330 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	f003 0320 	and.w	r3, r3, #32
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0ee      	beq.n	800e30c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	0003ff5f 	.word	0x0003ff5f

0800e33c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e352:	2b00      	cmp	r3, #0
 800e354:	d120      	bne.n	800e398 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e35e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e360:	f7f6 f87c 	bl	800445c <HAL_GetTick>
 800e364:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e366:	e00d      	b.n	800e384 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e368:	f7f6 f878 	bl	800445c <HAL_GetTick>
 800e36c:	4602      	mov	r2, r0
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e376:	d905      	bls.n	800e384 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e378:	2303      	movs	r3, #3
 800e37a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2203      	movs	r2, #3
 800e380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <RTC_EnterInitMode+0x5c>
 800e392:	7bfb      	ldrb	r3, [r7, #15]
 800e394:	2b03      	cmp	r3, #3
 800e396:	d1e7      	bne.n	800e368 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e398:	7bfb      	ldrb	r3, [r7, #15]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
	...

0800e3a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e3b0:	4b1a      	ldr	r3, [pc, #104]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	4a19      	ldr	r2, [pc, #100]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e3b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3ba:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e3bc:	4b17      	ldr	r3, [pc, #92]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	f003 0320 	and.w	r3, r3, #32
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10c      	bne.n	800e3e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7ff ff93 	bl	800e2f4 <HAL_RTC_WaitForSynchro>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d01e      	beq.n	800e412 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2203      	movs	r2, #3
 800e3d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	73fb      	strb	r3, [r7, #15]
 800e3e0:	e017      	b.n	800e412 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e3e2:	4b0e      	ldr	r3, [pc, #56]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	4a0d      	ldr	r2, [pc, #52]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e3e8:	f023 0320 	bic.w	r3, r3, #32
 800e3ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff ff80 	bl	800e2f4 <HAL_RTC_WaitForSynchro>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d005      	beq.n	800e406 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2203      	movs	r2, #3
 800e3fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e402:	2303      	movs	r3, #3
 800e404:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e406:	4b05      	ldr	r3, [pc, #20]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	4a04      	ldr	r2, [pc, #16]	; (800e41c <RTC_ExitInitMode+0x78>)
 800e40c:	f043 0320 	orr.w	r3, r3, #32
 800e410:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e412:	7bfb      	ldrb	r3, [r7, #15]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	58004000 	.word	0x58004000

0800e420 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e42a:	2300      	movs	r3, #0
 800e42c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e432:	e005      	b.n	800e440 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3301      	adds	r3, #1
 800e438:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e43a:	7afb      	ldrb	r3, [r7, #11]
 800e43c:	3b0a      	subs	r3, #10
 800e43e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e440:	7afb      	ldrb	r3, [r7, #11]
 800e442:	2b09      	cmp	r3, #9
 800e444:	d8f6      	bhi.n	800e434 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	011b      	lsls	r3, r3, #4
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	7afb      	ldrb	r3, [r7, #11]
 800e450:	4313      	orrs	r3, r2
 800e452:	b2db      	uxtb	r3, r3
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	4603      	mov	r3, r0
 800e468:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	091b      	lsrs	r3, r3, #4
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	461a      	mov	r2, r3
 800e472:	0092      	lsls	r2, r2, #2
 800e474:	4413      	add	r3, r2
 800e476:	005b      	lsls	r3, r3, #1
 800e478:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e47a:	79fb      	ldrb	r3, [r7, #7]
 800e47c:	f003 030f 	and.w	r3, r3, #15
 800e480:	b2da      	uxtb	r2, r3
 800e482:	7bfb      	ldrb	r3, [r7, #15]
 800e484:	4413      	add	r3, r2
 800e486:	b2db      	uxtb	r3, r3
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3714      	adds	r7, #20
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e10f      	b.n	800e6c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a87      	ldr	r2, [pc, #540]	; (800e6d0 <HAL_SPI_Init+0x23c>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d00f      	beq.n	800e4d6 <HAL_SPI_Init+0x42>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a86      	ldr	r2, [pc, #536]	; (800e6d4 <HAL_SPI_Init+0x240>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d00a      	beq.n	800e4d6 <HAL_SPI_Init+0x42>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a84      	ldr	r2, [pc, #528]	; (800e6d8 <HAL_SPI_Init+0x244>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d005      	beq.n	800e4d6 <HAL_SPI_Init+0x42>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	2b0f      	cmp	r3, #15
 800e4d0:	d901      	bls.n	800e4d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e0f7      	b.n	800e6c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fc12 	bl	800ed00 <SPI_GetPacketSize>
 800e4dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a7b      	ldr	r2, [pc, #492]	; (800e6d0 <HAL_SPI_Init+0x23c>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d00c      	beq.n	800e502 <HAL_SPI_Init+0x6e>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a79      	ldr	r2, [pc, #484]	; (800e6d4 <HAL_SPI_Init+0x240>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d007      	beq.n	800e502 <HAL_SPI_Init+0x6e>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a78      	ldr	r2, [pc, #480]	; (800e6d8 <HAL_SPI_Init+0x244>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d002      	beq.n	800e502 <HAL_SPI_Init+0x6e>
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b08      	cmp	r3, #8
 800e500:	d811      	bhi.n	800e526 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e506:	4a72      	ldr	r2, [pc, #456]	; (800e6d0 <HAL_SPI_Init+0x23c>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d009      	beq.n	800e520 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a70      	ldr	r2, [pc, #448]	; (800e6d4 <HAL_SPI_Init+0x240>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d004      	beq.n	800e520 <HAL_SPI_Init+0x8c>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a6f      	ldr	r2, [pc, #444]	; (800e6d8 <HAL_SPI_Init+0x244>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d104      	bne.n	800e52a <HAL_SPI_Init+0x96>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b10      	cmp	r3, #16
 800e524:	d901      	bls.n	800e52a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	e0cd      	b.n	800e6c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	d106      	bne.n	800e544 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7f5 fa82 	bl	8003a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2202      	movs	r2, #2
 800e548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f022 0201 	bic.w	r2, r2, #1
 800e55a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e566:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	699b      	ldr	r3, [r3, #24]
 800e56c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e570:	d119      	bne.n	800e5a6 <HAL_SPI_Init+0x112>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e57a:	d103      	bne.n	800e584 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e580:	2b00      	cmp	r3, #0
 800e582:	d008      	beq.n	800e596 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10c      	bne.n	800e5a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e594:	d107      	bne.n	800e5a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e5a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00f      	beq.n	800e5d2 <HAL_SPI_Init+0x13e>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	2b06      	cmp	r3, #6
 800e5b8:	d90b      	bls.n	800e5d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	430a      	orrs	r2, r1
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	e007      	b.n	800e5e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e5e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	69da      	ldr	r2, [r3, #28]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	431a      	orrs	r2, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f4:	ea42 0103 	orr.w	r1, r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	430a      	orrs	r2, r1
 800e602:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60c:	431a      	orrs	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e612:	431a      	orrs	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	699b      	ldr	r3, [r3, #24]
 800e618:	431a      	orrs	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	431a      	orrs	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	695b      	ldr	r3, [r3, #20]
 800e624:	431a      	orrs	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a1b      	ldr	r3, [r3, #32]
 800e62a:	431a      	orrs	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	431a      	orrs	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e636:	431a      	orrs	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	431a      	orrs	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e642:	ea42 0103 	orr.w	r1, r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	430a      	orrs	r2, r1
 800e650:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d113      	bne.n	800e682 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e66c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e680:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f022 0201 	bic.w	r2, r2, #1
 800e690:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00a      	beq.n	800e6b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	40013000 	.word	0x40013000
 800e6d4:	40003800 	.word	0x40003800
 800e6d8:	40003c00 	.word	0x40003c00

0800e6dc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f0:	095b      	lsrs	r3, r3, #5
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3330      	adds	r3, #48	; 0x30
 800e6fe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e700:	f7f5 feac 	bl	800445c <HAL_GetTick>
 800e704:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d001      	beq.n	800e716 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e712:	2302      	movs	r3, #2
 800e714:	e250      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <HAL_SPI_Receive+0x46>
 800e71c:	88fb      	ldrh	r3, [r7, #6]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d101      	bne.n	800e726 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e722:	2301      	movs	r3, #1
 800e724:	e248      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d101      	bne.n	800e734 <HAL_SPI_Receive+0x58>
 800e730:	2302      	movs	r3, #2
 800e732:	e241      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2204      	movs	r2, #4
 800e740:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2200      	movs	r2, #0
 800e748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	88fa      	ldrh	r2, [r7, #6]
 800e756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	88fa      	ldrh	r2, [r7, #6]
 800e75e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e78c:	d108      	bne.n	800e7a0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	e009      	b.n	800e7b4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e7b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	4b95      	ldr	r3, [pc, #596]	; (800ea10 <HAL_SPI_Receive+0x334>)
 800e7bc:	4013      	ands	r3, r2
 800e7be:	88f9      	ldrh	r1, [r7, #6]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	6812      	ldr	r2, [r2, #0]
 800e7c4:	430b      	orrs	r3, r1
 800e7c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f042 0201 	orr.w	r2, r2, #1
 800e7d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e7e0:	d107      	bne.n	800e7f2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	2b0f      	cmp	r3, #15
 800e7f8:	d96c      	bls.n	800e8d4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e7fa:	e064      	b.n	800e8c6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	f003 0301 	and.w	r3, r3, #1
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d114      	bne.n	800e83c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e81a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e81c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e822:	1d1a      	adds	r2, r3, #4
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e82e:	b29b      	uxth	r3, r3
 800e830:	3b01      	subs	r3, #1
 800e832:	b29a      	uxth	r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e83a:	e044      	b.n	800e8c6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e842:	b29b      	uxth	r3, r3
 800e844:	8bfa      	ldrh	r2, [r7, #30]
 800e846:	429a      	cmp	r2, r3
 800e848:	d919      	bls.n	800e87e <HAL_SPI_Receive+0x1a2>
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e850:	2b00      	cmp	r3, #0
 800e852:	d014      	beq.n	800e87e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e85c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e85e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e864:	1d1a      	adds	r2, r3, #4
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e870:	b29b      	uxth	r3, r3
 800e872:	3b01      	subs	r3, #1
 800e874:	b29a      	uxth	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e87c:	e023      	b.n	800e8c6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e87e:	f7f5 fded 	bl	800445c <HAL_GetTick>
 800e882:	4602      	mov	r2, r0
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d803      	bhi.n	800e896 <HAL_SPI_Receive+0x1ba>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e894:	d102      	bne.n	800e89c <HAL_SPI_Receive+0x1c0>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d114      	bne.n	800e8c6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f000 f98f 	bl	800ebc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	e178      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d194      	bne.n	800e7fc <HAL_SPI_Receive+0x120>
 800e8d2:	e15e      	b.n	800eb92 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	2b07      	cmp	r3, #7
 800e8da:	f240 8153 	bls.w	800eb84 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e8de:	e08f      	b.n	800ea00 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d114      	bne.n	800e920 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	8812      	ldrh	r2, [r2, #0]
 800e8fe:	b292      	uxth	r2, r2
 800e900:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e906:	1c9a      	adds	r2, r3, #2
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e912:	b29b      	uxth	r3, r3
 800e914:	3b01      	subs	r3, #1
 800e916:	b29a      	uxth	r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e91e:	e06f      	b.n	800ea00 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e926:	b29b      	uxth	r3, r3
 800e928:	8bfa      	ldrh	r2, [r7, #30]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d924      	bls.n	800e978 <HAL_SPI_Receive+0x29c>
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d01f      	beq.n	800e978 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e93c:	69ba      	ldr	r2, [r7, #24]
 800e93e:	8812      	ldrh	r2, [r2, #0]
 800e940:	b292      	uxth	r2, r2
 800e942:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e948:	1c9a      	adds	r2, r3, #2
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e952:	69ba      	ldr	r2, [r7, #24]
 800e954:	8812      	ldrh	r2, [r2, #0]
 800e956:	b292      	uxth	r2, r2
 800e958:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e95e:	1c9a      	adds	r2, r3, #2
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	3b02      	subs	r3, #2
 800e96e:	b29a      	uxth	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e976:	e043      	b.n	800ea00 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e97e:	b29b      	uxth	r3, r3
 800e980:	2b01      	cmp	r3, #1
 800e982:	d119      	bne.n	800e9b8 <HAL_SPI_Receive+0x2dc>
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d014      	beq.n	800e9b8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e992:	69ba      	ldr	r2, [r7, #24]
 800e994:	8812      	ldrh	r2, [r2, #0]
 800e996:	b292      	uxth	r2, r2
 800e998:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e99e:	1c9a      	adds	r2, r3, #2
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e9b6:	e023      	b.n	800ea00 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9b8:	f7f5 fd50 	bl	800445c <HAL_GetTick>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d803      	bhi.n	800e9d0 <HAL_SPI_Receive+0x2f4>
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ce:	d102      	bne.n	800e9d6 <HAL_SPI_Receive+0x2fa>
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d114      	bne.n	800ea00 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f000 f8f2 	bl	800ebc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e9fc:	2303      	movs	r3, #3
 800e9fe:	e0db      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f47f af69 	bne.w	800e8e0 <HAL_SPI_Receive+0x204>
 800ea0e:	e0c0      	b.n	800eb92 <HAL_SPI_Receive+0x4b6>
 800ea10:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d117      	bne.n	800ea5a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea36:	7812      	ldrb	r2, [r2, #0]
 800ea38:	b2d2      	uxtb	r2, r2
 800ea3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ea58:	e094      	b.n	800eb84 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	8bfa      	ldrh	r2, [r7, #30]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d946      	bls.n	800eaf6 <HAL_SPI_Receive+0x41a>
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d041      	beq.n	800eaf6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea7e:	7812      	ldrb	r2, [r2, #0]
 800ea80:	b2d2      	uxtb	r2, r2
 800ea82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea88:	1c5a      	adds	r2, r3, #1
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea9a:	7812      	ldrb	r2, [r2, #0]
 800ea9c:	b2d2      	uxtb	r2, r2
 800ea9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eab6:	7812      	ldrb	r2, [r2, #0]
 800eab8:	b2d2      	uxtb	r2, r2
 800eaba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	b2d2      	uxtb	r2, r2
 800ead6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	3b04      	subs	r3, #4
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eaf4:	e046      	b.n	800eb84 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	d81c      	bhi.n	800eb3c <HAL_SPI_Receive+0x460>
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d017      	beq.n	800eb3c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb18:	7812      	ldrb	r2, [r2, #0]
 800eb1a:	b2d2      	uxtb	r2, r2
 800eb1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	3b01      	subs	r3, #1
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eb3a:	e023      	b.n	800eb84 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb3c:	f7f5 fc8e 	bl	800445c <HAL_GetTick>
 800eb40:	4602      	mov	r2, r0
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d803      	bhi.n	800eb54 <HAL_SPI_Receive+0x478>
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb52:	d102      	bne.n	800eb5a <HAL_SPI_Receive+0x47e>
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d114      	bne.n	800eb84 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f000 f830 	bl	800ebc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e019      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f47f af41 	bne.w	800ea14 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f000 f814 	bl	800ebc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e000      	b.n	800ebb8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ebb6:	2300      	movs	r3, #0
  }
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3720      	adds	r7, #32
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	695b      	ldr	r3, [r3, #20]
 800ebce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	699a      	ldr	r2, [r3, #24]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f042 0208 	orr.w	r2, r2, #8
 800ebde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	699a      	ldr	r2, [r3, #24]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f042 0210 	orr.w	r2, r2, #16
 800ebee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f022 0201 	bic.w	r2, r2, #1
 800ebfe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	6919      	ldr	r1, [r3, #16]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	4b3c      	ldr	r3, [pc, #240]	; (800ecfc <SPI_CloseTransfer+0x13c>)
 800ec0c:	400b      	ands	r3, r1
 800ec0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	689a      	ldr	r2, [r3, #8]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ec1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	2b04      	cmp	r3, #4
 800ec2a:	d014      	beq.n	800ec56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f003 0320 	and.w	r3, r3, #32
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00f      	beq.n	800ec56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	699a      	ldr	r2, [r3, #24]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f042 0220 	orr.w	r2, r2, #32
 800ec54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	2b03      	cmp	r3, #3
 800ec60:	d014      	beq.n	800ec8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00f      	beq.n	800ec8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec72:	f043 0204 	orr.w	r2, r3, #4
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	699a      	ldr	r2, [r3, #24]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00f      	beq.n	800ecb6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec9c:	f043 0201 	orr.w	r2, r3, #1
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	699a      	ldr	r2, [r3, #24]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ecb4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00f      	beq.n	800ece0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecc6:	f043 0208 	orr.w	r2, r3, #8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	699a      	ldr	r2, [r3, #24]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ecde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ecf0:	bf00      	nop
 800ecf2:	3714      	adds	r7, #20
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	fffffc90 	.word	0xfffffc90

0800ed00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed0c:	095b      	lsrs	r3, r3, #5
 800ed0e:	3301      	adds	r3, #1
 800ed10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	3301      	adds	r3, #1
 800ed18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	3307      	adds	r3, #7
 800ed1e:	08db      	lsrs	r3, r3, #3
 800ed20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	fb02 f303 	mul.w	r3, r2, r3
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr

0800ed36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b082      	sub	sp, #8
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed44:	2301      	movs	r3, #1
 800ed46:	e049      	b.n	800eddc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d106      	bne.n	800ed62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7f4 ff29 	bl	8003bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2202      	movs	r2, #2
 800ed66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3304      	adds	r3, #4
 800ed72:	4619      	mov	r1, r3
 800ed74:	4610      	mov	r0, r2
 800ed76:	f000 fe7d 	bl	800fa74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2201      	movs	r2, #1
 800ed86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2201      	movs	r2, #1
 800ed96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2201      	movs	r2, #1
 800eda6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2201      	movs	r2, #1
 800edae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2201      	movs	r2, #1
 800edc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2201      	movs	r2, #1
 800edce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edda:	2300      	movs	r3, #0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d001      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	e054      	b.n	800eea6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2202      	movs	r2, #2
 800ee00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68da      	ldr	r2, [r3, #12]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f042 0201 	orr.w	r2, r2, #1
 800ee12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a26      	ldr	r2, [pc, #152]	; (800eeb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d022      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee26:	d01d      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a22      	ldr	r2, [pc, #136]	; (800eeb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d018      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a21      	ldr	r2, [pc, #132]	; (800eebc <HAL_TIM_Base_Start_IT+0xd8>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d013      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a1f      	ldr	r2, [pc, #124]	; (800eec0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d00e      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a1e      	ldr	r2, [pc, #120]	; (800eec4 <HAL_TIM_Base_Start_IT+0xe0>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d009      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a1c      	ldr	r2, [pc, #112]	; (800eec8 <HAL_TIM_Base_Start_IT+0xe4>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d004      	beq.n	800ee64 <HAL_TIM_Base_Start_IT+0x80>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4a1b      	ldr	r2, [pc, #108]	; (800eecc <HAL_TIM_Base_Start_IT+0xe8>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d115      	bne.n	800ee90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	689a      	ldr	r2, [r3, #8]
 800ee6a:	4b19      	ldr	r3, [pc, #100]	; (800eed0 <HAL_TIM_Base_Start_IT+0xec>)
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2b06      	cmp	r3, #6
 800ee74:	d015      	beq.n	800eea2 <HAL_TIM_Base_Start_IT+0xbe>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee7c:	d011      	beq.n	800eea2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f042 0201 	orr.w	r2, r2, #1
 800ee8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee8e:	e008      	b.n	800eea2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f042 0201 	orr.w	r2, r2, #1
 800ee9e:	601a      	str	r2, [r3, #0]
 800eea0:	e000      	b.n	800eea4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3714      	adds	r7, #20
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	40010000 	.word	0x40010000
 800eeb8:	40000400 	.word	0x40000400
 800eebc:	40000800 	.word	0x40000800
 800eec0:	40000c00 	.word	0x40000c00
 800eec4:	40010400 	.word	0x40010400
 800eec8:	40001800 	.word	0x40001800
 800eecc:	40014000 	.word	0x40014000
 800eed0:	00010007 	.word	0x00010007

0800eed4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d109      	bne.n	800eefc <HAL_TIM_OC_Start_IT+0x28>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	bf14      	ite	ne
 800eef4:	2301      	movne	r3, #1
 800eef6:	2300      	moveq	r3, #0
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	e03c      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0xa2>
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2b04      	cmp	r3, #4
 800ef00:	d109      	bne.n	800ef16 <HAL_TIM_OC_Start_IT+0x42>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	bf14      	ite	ne
 800ef0e:	2301      	movne	r3, #1
 800ef10:	2300      	moveq	r3, #0
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	e02f      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0xa2>
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	d109      	bne.n	800ef30 <HAL_TIM_OC_Start_IT+0x5c>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	bf14      	ite	ne
 800ef28:	2301      	movne	r3, #1
 800ef2a:	2300      	moveq	r3, #0
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	e022      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0xa2>
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2b0c      	cmp	r3, #12
 800ef34:	d109      	bne.n	800ef4a <HAL_TIM_OC_Start_IT+0x76>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	bf14      	ite	ne
 800ef42:	2301      	movne	r3, #1
 800ef44:	2300      	moveq	r3, #0
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	e015      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0xa2>
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	2b10      	cmp	r3, #16
 800ef4e:	d109      	bne.n	800ef64 <HAL_TIM_OC_Start_IT+0x90>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	bf14      	ite	ne
 800ef5c:	2301      	movne	r3, #1
 800ef5e:	2300      	moveq	r3, #0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	e008      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0xa2>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	bf14      	ite	ne
 800ef70:	2301      	movne	r3, #1
 800ef72:	2300      	moveq	r3, #0
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e0ec      	b.n	800f158 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <HAL_TIM_OC_Start_IT+0xba>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2202      	movs	r2, #2
 800ef88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef8c:	e023      	b.n	800efd6 <HAL_TIM_OC_Start_IT+0x102>
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	d104      	bne.n	800ef9e <HAL_TIM_OC_Start_IT+0xca>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2202      	movs	r2, #2
 800ef98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef9c:	e01b      	b.n	800efd6 <HAL_TIM_OC_Start_IT+0x102>
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	2b08      	cmp	r3, #8
 800efa2:	d104      	bne.n	800efae <HAL_TIM_OC_Start_IT+0xda>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2202      	movs	r2, #2
 800efa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800efac:	e013      	b.n	800efd6 <HAL_TIM_OC_Start_IT+0x102>
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b0c      	cmp	r3, #12
 800efb2:	d104      	bne.n	800efbe <HAL_TIM_OC_Start_IT+0xea>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2202      	movs	r2, #2
 800efb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800efbc:	e00b      	b.n	800efd6 <HAL_TIM_OC_Start_IT+0x102>
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	2b10      	cmp	r3, #16
 800efc2:	d104      	bne.n	800efce <HAL_TIM_OC_Start_IT+0xfa>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2202      	movs	r2, #2
 800efc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800efcc:	e003      	b.n	800efd6 <HAL_TIM_OC_Start_IT+0x102>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2202      	movs	r2, #2
 800efd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b0c      	cmp	r3, #12
 800efda:	d841      	bhi.n	800f060 <HAL_TIM_OC_Start_IT+0x18c>
 800efdc:	a201      	add	r2, pc, #4	; (adr r2, 800efe4 <HAL_TIM_OC_Start_IT+0x110>)
 800efde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe2:	bf00      	nop
 800efe4:	0800f019 	.word	0x0800f019
 800efe8:	0800f061 	.word	0x0800f061
 800efec:	0800f061 	.word	0x0800f061
 800eff0:	0800f061 	.word	0x0800f061
 800eff4:	0800f02b 	.word	0x0800f02b
 800eff8:	0800f061 	.word	0x0800f061
 800effc:	0800f061 	.word	0x0800f061
 800f000:	0800f061 	.word	0x0800f061
 800f004:	0800f03d 	.word	0x0800f03d
 800f008:	0800f061 	.word	0x0800f061
 800f00c:	0800f061 	.word	0x0800f061
 800f010:	0800f061 	.word	0x0800f061
 800f014:	0800f04f 	.word	0x0800f04f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	68da      	ldr	r2, [r3, #12]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f042 0202 	orr.w	r2, r2, #2
 800f026:	60da      	str	r2, [r3, #12]
      break;
 800f028:	e01d      	b.n	800f066 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68da      	ldr	r2, [r3, #12]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f042 0204 	orr.w	r2, r2, #4
 800f038:	60da      	str	r2, [r3, #12]
      break;
 800f03a:	e014      	b.n	800f066 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	68da      	ldr	r2, [r3, #12]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f042 0208 	orr.w	r2, r2, #8
 800f04a:	60da      	str	r2, [r3, #12]
      break;
 800f04c:	e00b      	b.n	800f066 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f042 0210 	orr.w	r2, r2, #16
 800f05c:	60da      	str	r2, [r3, #12]
      break;
 800f05e:	e002      	b.n	800f066 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800f060:	2301      	movs	r3, #1
 800f062:	73fb      	strb	r3, [r7, #15]
      break;
 800f064:	bf00      	nop
  }

  if (status == HAL_OK)
 800f066:	7bfb      	ldrb	r3, [r7, #15]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d174      	bne.n	800f156 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2201      	movs	r2, #1
 800f072:	6839      	ldr	r1, [r7, #0]
 800f074:	4618      	mov	r0, r3
 800f076:	f001 f917 	bl	80102a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4a38      	ldr	r2, [pc, #224]	; (800f160 <HAL_TIM_OC_Start_IT+0x28c>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d013      	beq.n	800f0ac <HAL_TIM_OC_Start_IT+0x1d8>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a36      	ldr	r2, [pc, #216]	; (800f164 <HAL_TIM_OC_Start_IT+0x290>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d00e      	beq.n	800f0ac <HAL_TIM_OC_Start_IT+0x1d8>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4a35      	ldr	r2, [pc, #212]	; (800f168 <HAL_TIM_OC_Start_IT+0x294>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d009      	beq.n	800f0ac <HAL_TIM_OC_Start_IT+0x1d8>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a33      	ldr	r2, [pc, #204]	; (800f16c <HAL_TIM_OC_Start_IT+0x298>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d004      	beq.n	800f0ac <HAL_TIM_OC_Start_IT+0x1d8>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a32      	ldr	r2, [pc, #200]	; (800f170 <HAL_TIM_OC_Start_IT+0x29c>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d101      	bne.n	800f0b0 <HAL_TIM_OC_Start_IT+0x1dc>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e000      	b.n	800f0b2 <HAL_TIM_OC_Start_IT+0x1de>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d007      	beq.n	800f0c6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f0c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a25      	ldr	r2, [pc, #148]	; (800f160 <HAL_TIM_OC_Start_IT+0x28c>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d022      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0d8:	d01d      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4a25      	ldr	r2, [pc, #148]	; (800f174 <HAL_TIM_OC_Start_IT+0x2a0>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d018      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a23      	ldr	r2, [pc, #140]	; (800f178 <HAL_TIM_OC_Start_IT+0x2a4>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d013      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4a22      	ldr	r2, [pc, #136]	; (800f17c <HAL_TIM_OC_Start_IT+0x2a8>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d00e      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a19      	ldr	r2, [pc, #100]	; (800f164 <HAL_TIM_OC_Start_IT+0x290>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d009      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a1e      	ldr	r2, [pc, #120]	; (800f180 <HAL_TIM_OC_Start_IT+0x2ac>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d004      	beq.n	800f116 <HAL_TIM_OC_Start_IT+0x242>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a15      	ldr	r2, [pc, #84]	; (800f168 <HAL_TIM_OC_Start_IT+0x294>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d115      	bne.n	800f142 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	689a      	ldr	r2, [r3, #8]
 800f11c:	4b19      	ldr	r3, [pc, #100]	; (800f184 <HAL_TIM_OC_Start_IT+0x2b0>)
 800f11e:	4013      	ands	r3, r2
 800f120:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2b06      	cmp	r3, #6
 800f126:	d015      	beq.n	800f154 <HAL_TIM_OC_Start_IT+0x280>
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f12e:	d011      	beq.n	800f154 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f042 0201 	orr.w	r2, r2, #1
 800f13e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f140:	e008      	b.n	800f154 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f042 0201 	orr.w	r2, r2, #1
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	e000      	b.n	800f156 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f154:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	40010000 	.word	0x40010000
 800f164:	40010400 	.word	0x40010400
 800f168:	40014000 	.word	0x40014000
 800f16c:	40014400 	.word	0x40014400
 800f170:	40014800 	.word	0x40014800
 800f174:	40000400 	.word	0x40000400
 800f178:	40000800 	.word	0x40000800
 800f17c:	40000c00 	.word	0x40000c00
 800f180:	40001800 	.word	0x40001800
 800f184:	00010007 	.word	0x00010007

0800f188 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	2b0c      	cmp	r3, #12
 800f19a:	d841      	bhi.n	800f220 <HAL_TIM_OC_Stop_IT+0x98>
 800f19c:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <HAL_TIM_OC_Stop_IT+0x1c>)
 800f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a2:	bf00      	nop
 800f1a4:	0800f1d9 	.word	0x0800f1d9
 800f1a8:	0800f221 	.word	0x0800f221
 800f1ac:	0800f221 	.word	0x0800f221
 800f1b0:	0800f221 	.word	0x0800f221
 800f1b4:	0800f1eb 	.word	0x0800f1eb
 800f1b8:	0800f221 	.word	0x0800f221
 800f1bc:	0800f221 	.word	0x0800f221
 800f1c0:	0800f221 	.word	0x0800f221
 800f1c4:	0800f1fd 	.word	0x0800f1fd
 800f1c8:	0800f221 	.word	0x0800f221
 800f1cc:	0800f221 	.word	0x0800f221
 800f1d0:	0800f221 	.word	0x0800f221
 800f1d4:	0800f20f 	.word	0x0800f20f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68da      	ldr	r2, [r3, #12]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f022 0202 	bic.w	r2, r2, #2
 800f1e6:	60da      	str	r2, [r3, #12]
      break;
 800f1e8:	e01d      	b.n	800f226 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68da      	ldr	r2, [r3, #12]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f022 0204 	bic.w	r2, r2, #4
 800f1f8:	60da      	str	r2, [r3, #12]
      break;
 800f1fa:	e014      	b.n	800f226 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	68da      	ldr	r2, [r3, #12]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f022 0208 	bic.w	r2, r2, #8
 800f20a:	60da      	str	r2, [r3, #12]
      break;
 800f20c:	e00b      	b.n	800f226 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68da      	ldr	r2, [r3, #12]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f022 0210 	bic.w	r2, r2, #16
 800f21c:	60da      	str	r2, [r3, #12]
      break;
 800f21e:	e002      	b.n	800f226 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f220:	2301      	movs	r3, #1
 800f222:	73fb      	strb	r3, [r7, #15]
      break;
 800f224:	bf00      	nop
  }

  if (status == HAL_OK)
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f040 8081 	bne.w	800f330 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2200      	movs	r2, #0
 800f234:	6839      	ldr	r1, [r7, #0]
 800f236:	4618      	mov	r0, r3
 800f238:	f001 f836 	bl	80102a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a3e      	ldr	r2, [pc, #248]	; (800f33c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d013      	beq.n	800f26e <HAL_TIM_OC_Stop_IT+0xe6>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a3d      	ldr	r2, [pc, #244]	; (800f340 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d00e      	beq.n	800f26e <HAL_TIM_OC_Stop_IT+0xe6>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a3b      	ldr	r2, [pc, #236]	; (800f344 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d009      	beq.n	800f26e <HAL_TIM_OC_Stop_IT+0xe6>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a3a      	ldr	r2, [pc, #232]	; (800f348 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d004      	beq.n	800f26e <HAL_TIM_OC_Stop_IT+0xe6>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4a38      	ldr	r2, [pc, #224]	; (800f34c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d101      	bne.n	800f272 <HAL_TIM_OC_Stop_IT+0xea>
 800f26e:	2301      	movs	r3, #1
 800f270:	e000      	b.n	800f274 <HAL_TIM_OC_Stop_IT+0xec>
 800f272:	2300      	movs	r3, #0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d017      	beq.n	800f2a8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6a1a      	ldr	r2, [r3, #32]
 800f27e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f282:	4013      	ands	r3, r2
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10f      	bne.n	800f2a8 <HAL_TIM_OC_Stop_IT+0x120>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6a1a      	ldr	r2, [r3, #32]
 800f28e:	f240 4344 	movw	r3, #1092	; 0x444
 800f292:	4013      	ands	r3, r2
 800f294:	2b00      	cmp	r3, #0
 800f296:	d107      	bne.n	800f2a8 <HAL_TIM_OC_Stop_IT+0x120>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f2a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6a1a      	ldr	r2, [r3, #32]
 800f2ae:	f241 1311 	movw	r3, #4369	; 0x1111
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10f      	bne.n	800f2d8 <HAL_TIM_OC_Stop_IT+0x150>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	6a1a      	ldr	r2, [r3, #32]
 800f2be:	f240 4344 	movw	r3, #1092	; 0x444
 800f2c2:	4013      	ands	r3, r2
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d107      	bne.n	800f2d8 <HAL_TIM_OC_Stop_IT+0x150>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f022 0201 	bic.w	r2, r2, #1
 800f2d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d104      	bne.n	800f2e8 <HAL_TIM_OC_Stop_IT+0x160>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2e6:	e023      	b.n	800f330 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b04      	cmp	r3, #4
 800f2ec:	d104      	bne.n	800f2f8 <HAL_TIM_OC_Stop_IT+0x170>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2f6:	e01b      	b.n	800f330 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	2b08      	cmp	r3, #8
 800f2fc:	d104      	bne.n	800f308 <HAL_TIM_OC_Stop_IT+0x180>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2201      	movs	r2, #1
 800f302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f306:	e013      	b.n	800f330 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	2b0c      	cmp	r3, #12
 800f30c:	d104      	bne.n	800f318 <HAL_TIM_OC_Stop_IT+0x190>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f316:	e00b      	b.n	800f330 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	2b10      	cmp	r3, #16
 800f31c:	d104      	bne.n	800f328 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2201      	movs	r2, #1
 800f322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f326:	e003      	b.n	800f330 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f330:	7bfb      	ldrb	r3, [r7, #15]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	40010000 	.word	0x40010000
 800f340:	40010400 	.word	0x40010400
 800f344:	40014000 	.word	0x40014000
 800f348:	40014400 	.word	0x40014400
 800f34c:	40014800 	.word	0x40014800

0800f350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d101      	bne.n	800f362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f35e:	2301      	movs	r3, #1
 800f360:	e049      	b.n	800f3f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d106      	bne.n	800f37c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 f841 	bl	800f3fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2202      	movs	r2, #2
 800f380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	3304      	adds	r3, #4
 800f38c:	4619      	mov	r1, r3
 800f38e:	4610      	mov	r0, r2
 800f390:	f000 fb70 	bl	800fa74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f3fe:	b480      	push	{r7}
 800f400:	b083      	sub	sp, #12
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f406:	bf00      	nop
 800f408:	370c      	adds	r7, #12
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b084      	sub	sp, #16
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	f003 0302 	and.w	r3, r3, #2
 800f430:	2b00      	cmp	r3, #0
 800f432:	d020      	beq.n	800f476 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f003 0302 	and.w	r3, r3, #2
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d01b      	beq.n	800f476 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f06f 0202 	mvn.w	r2, #2
 800f446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2201      	movs	r2, #1
 800f44c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	699b      	ldr	r3, [r3, #24]
 800f454:	f003 0303 	and.w	r3, r3, #3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d003      	beq.n	800f464 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 faeb 	bl	800fa38 <HAL_TIM_IC_CaptureCallback>
 800f462:	e005      	b.n	800f470 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7f1 f8cb 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 faee 	bl	800fa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	f003 0304 	and.w	r3, r3, #4
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d020      	beq.n	800f4c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f003 0304 	and.w	r3, r3, #4
 800f486:	2b00      	cmp	r3, #0
 800f488:	d01b      	beq.n	800f4c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f06f 0204 	mvn.w	r2, #4
 800f492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2202      	movs	r2, #2
 800f498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	699b      	ldr	r3, [r3, #24]
 800f4a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d003      	beq.n	800f4b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 fac5 	bl	800fa38 <HAL_TIM_IC_CaptureCallback>
 800f4ae:	e005      	b.n	800f4bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7f1 f8a5 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fac8 	bl	800fa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	f003 0308 	and.w	r3, r3, #8
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d020      	beq.n	800f50e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f003 0308 	and.w	r3, r3, #8
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d01b      	beq.n	800f50e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f06f 0208 	mvn.w	r2, #8
 800f4de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2204      	movs	r2, #4
 800f4e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	f003 0303 	and.w	r3, r3, #3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d003      	beq.n	800f4fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 fa9f 	bl	800fa38 <HAL_TIM_IC_CaptureCallback>
 800f4fa:	e005      	b.n	800f508 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f1 f87f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 faa2 	bl	800fa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	f003 0310 	and.w	r3, r3, #16
 800f514:	2b00      	cmp	r3, #0
 800f516:	d020      	beq.n	800f55a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f003 0310 	and.w	r3, r3, #16
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d01b      	beq.n	800f55a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f06f 0210 	mvn.w	r2, #16
 800f52a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2208      	movs	r2, #8
 800f530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	69db      	ldr	r3, [r3, #28]
 800f538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fa79 	bl	800fa38 <HAL_TIM_IC_CaptureCallback>
 800f546:	e005      	b.n	800f554 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f7f1 f859 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 fa7c 	bl	800fa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00c      	beq.n	800f57e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f06f 0201 	mvn.w	r2, #1
 800f576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7f3 fff5 	bl	8003568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f584:	2b00      	cmp	r3, #0
 800f586:	d104      	bne.n	800f592 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00c      	beq.n	800f5ac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d007      	beq.n	800f5ac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 ffba 	bl	8010520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00c      	beq.n	800f5d0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d007      	beq.n	800f5d0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 ffb2 	bl	8010534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00c      	beq.n	800f5f4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 fa36 	bl	800fa60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	f003 0320 	and.w	r3, r3, #32
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00c      	beq.n	800f618 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f003 0320 	and.w	r3, r3, #32
 800f604:	2b00      	cmp	r3, #0
 800f606:	d007      	beq.n	800f618 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f06f 0220 	mvn.w	r2, #32
 800f610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 ff7a 	bl	801050c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f618:	bf00      	nop
 800f61a:	3710      	adds	r7, #16
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b086      	sub	sp, #24
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f636:	2b01      	cmp	r3, #1
 800f638:	d101      	bne.n	800f63e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f63a:	2302      	movs	r3, #2
 800f63c:	e0ff      	b.n	800f83e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2201      	movs	r2, #1
 800f642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b14      	cmp	r3, #20
 800f64a:	f200 80f0 	bhi.w	800f82e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f64e:	a201      	add	r2, pc, #4	; (adr r2, 800f654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f654:	0800f6a9 	.word	0x0800f6a9
 800f658:	0800f82f 	.word	0x0800f82f
 800f65c:	0800f82f 	.word	0x0800f82f
 800f660:	0800f82f 	.word	0x0800f82f
 800f664:	0800f6e9 	.word	0x0800f6e9
 800f668:	0800f82f 	.word	0x0800f82f
 800f66c:	0800f82f 	.word	0x0800f82f
 800f670:	0800f82f 	.word	0x0800f82f
 800f674:	0800f72b 	.word	0x0800f72b
 800f678:	0800f82f 	.word	0x0800f82f
 800f67c:	0800f82f 	.word	0x0800f82f
 800f680:	0800f82f 	.word	0x0800f82f
 800f684:	0800f76b 	.word	0x0800f76b
 800f688:	0800f82f 	.word	0x0800f82f
 800f68c:	0800f82f 	.word	0x0800f82f
 800f690:	0800f82f 	.word	0x0800f82f
 800f694:	0800f7ad 	.word	0x0800f7ad
 800f698:	0800f82f 	.word	0x0800f82f
 800f69c:	0800f82f 	.word	0x0800f82f
 800f6a0:	0800f82f 	.word	0x0800f82f
 800f6a4:	0800f7ed 	.word	0x0800f7ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68b9      	ldr	r1, [r7, #8]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 fa86 	bl	800fbc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	699a      	ldr	r2, [r3, #24]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f042 0208 	orr.w	r2, r2, #8
 800f6c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	699a      	ldr	r2, [r3, #24]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f022 0204 	bic.w	r2, r2, #4
 800f6d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	6999      	ldr	r1, [r3, #24]
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	691a      	ldr	r2, [r3, #16]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	430a      	orrs	r2, r1
 800f6e4:	619a      	str	r2, [r3, #24]
      break;
 800f6e6:	e0a5      	b.n	800f834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68b9      	ldr	r1, [r7, #8]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 faf6 	bl	800fce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	699a      	ldr	r2, [r3, #24]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	699a      	ldr	r2, [r3, #24]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	6999      	ldr	r1, [r3, #24]
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	021a      	lsls	r2, r3, #8
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	430a      	orrs	r2, r1
 800f726:	619a      	str	r2, [r3, #24]
      break;
 800f728:	e084      	b.n	800f834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	68b9      	ldr	r1, [r7, #8]
 800f730:	4618      	mov	r0, r3
 800f732:	f000 fb5f 	bl	800fdf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	69da      	ldr	r2, [r3, #28]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f042 0208 	orr.w	r2, r2, #8
 800f744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	69da      	ldr	r2, [r3, #28]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0204 	bic.w	r2, r2, #4
 800f754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	69d9      	ldr	r1, [r3, #28]
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	691a      	ldr	r2, [r3, #16]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	61da      	str	r2, [r3, #28]
      break;
 800f768:	e064      	b.n	800f834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68b9      	ldr	r1, [r7, #8]
 800f770:	4618      	mov	r0, r3
 800f772:	f000 fbc7 	bl	800ff04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	69da      	ldr	r2, [r3, #28]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	69da      	ldr	r2, [r3, #28]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	69d9      	ldr	r1, [r3, #28]
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	691b      	ldr	r3, [r3, #16]
 800f7a0:	021a      	lsls	r2, r3, #8
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	61da      	str	r2, [r3, #28]
      break;
 800f7aa:	e043      	b.n	800f834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	68b9      	ldr	r1, [r7, #8]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f000 fc10 	bl	800ffd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f042 0208 	orr.w	r2, r2, #8
 800f7c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f022 0204 	bic.w	r2, r2, #4
 800f7d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	691a      	ldr	r2, [r3, #16]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	430a      	orrs	r2, r1
 800f7e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f7ea:	e023      	b.n	800f834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	68b9      	ldr	r1, [r7, #8]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 fc54 	bl	80100a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	021a      	lsls	r2, r3, #8
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	430a      	orrs	r2, r1
 800f82a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f82c:	e002      	b.n	800f834 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	75fb      	strb	r3, [r7, #23]
      break;
 800f832:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2200      	movs	r2, #0
 800f838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3718      	adds	r7, #24
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop

0800f848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f852:	2300      	movs	r3, #0
 800f854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d101      	bne.n	800f864 <HAL_TIM_ConfigClockSource+0x1c>
 800f860:	2302      	movs	r3, #2
 800f862:	e0dc      	b.n	800fa1e <HAL_TIM_ConfigClockSource+0x1d6>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2202      	movs	r2, #2
 800f870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	4b6a      	ldr	r3, [pc, #424]	; (800fa28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f880:	4013      	ands	r3, r2
 800f882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f88a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a64      	ldr	r2, [pc, #400]	; (800fa2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	f000 80a9 	beq.w	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8a0:	4a62      	ldr	r2, [pc, #392]	; (800fa2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	f200 80ae 	bhi.w	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8a8:	4a61      	ldr	r2, [pc, #388]	; (800fa30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	f000 80a1 	beq.w	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8b0:	4a5f      	ldr	r2, [pc, #380]	; (800fa30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	f200 80a6 	bhi.w	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8b8:	4a5e      	ldr	r2, [pc, #376]	; (800fa34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	f000 8099 	beq.w	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8c0:	4a5c      	ldr	r2, [pc, #368]	; (800fa34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	f200 809e 	bhi.w	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f8cc:	f000 8091 	beq.w	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f8d4:	f200 8096 	bhi.w	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8dc:	f000 8089 	beq.w	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8e4:	f200 808e 	bhi.w	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8ec:	d03e      	beq.n	800f96c <HAL_TIM_ConfigClockSource+0x124>
 800f8ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8f2:	f200 8087 	bhi.w	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8fa:	f000 8086 	beq.w	800fa0a <HAL_TIM_ConfigClockSource+0x1c2>
 800f8fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f902:	d87f      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f904:	2b70      	cmp	r3, #112	; 0x70
 800f906:	d01a      	beq.n	800f93e <HAL_TIM_ConfigClockSource+0xf6>
 800f908:	2b70      	cmp	r3, #112	; 0x70
 800f90a:	d87b      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f90c:	2b60      	cmp	r3, #96	; 0x60
 800f90e:	d050      	beq.n	800f9b2 <HAL_TIM_ConfigClockSource+0x16a>
 800f910:	2b60      	cmp	r3, #96	; 0x60
 800f912:	d877      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f914:	2b50      	cmp	r3, #80	; 0x50
 800f916:	d03c      	beq.n	800f992 <HAL_TIM_ConfigClockSource+0x14a>
 800f918:	2b50      	cmp	r3, #80	; 0x50
 800f91a:	d873      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f91c:	2b40      	cmp	r3, #64	; 0x40
 800f91e:	d058      	beq.n	800f9d2 <HAL_TIM_ConfigClockSource+0x18a>
 800f920:	2b40      	cmp	r3, #64	; 0x40
 800f922:	d86f      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f924:	2b30      	cmp	r3, #48	; 0x30
 800f926:	d064      	beq.n	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f928:	2b30      	cmp	r3, #48	; 0x30
 800f92a:	d86b      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f92c:	2b20      	cmp	r3, #32
 800f92e:	d060      	beq.n	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f930:	2b20      	cmp	r3, #32
 800f932:	d867      	bhi.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
 800f934:	2b00      	cmp	r3, #0
 800f936:	d05c      	beq.n	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f938:	2b10      	cmp	r3, #16
 800f93a:	d05a      	beq.n	800f9f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f93c:	e062      	b.n	800fa04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6818      	ldr	r0, [r3, #0]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	6899      	ldr	r1, [r3, #8]
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	f000 fc8b 	bl	8010268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	609a      	str	r2, [r3, #8]
      break;
 800f96a:	e04f      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6818      	ldr	r0, [r3, #0]
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	6899      	ldr	r1, [r3, #8]
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	f000 fc74 	bl	8010268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	689a      	ldr	r2, [r3, #8]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f98e:	609a      	str	r2, [r3, #8]
      break;
 800f990:	e03c      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6818      	ldr	r0, [r3, #0]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	6859      	ldr	r1, [r3, #4]
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	f000 fbe4 	bl	801016c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2150      	movs	r1, #80	; 0x50
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f000 fc3e 	bl	801022c <TIM_ITRx_SetConfig>
      break;
 800f9b0:	e02c      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	6859      	ldr	r1, [r3, #4]
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	f000 fc03 	bl	80101ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2160      	movs	r1, #96	; 0x60
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f000 fc2e 	bl	801022c <TIM_ITRx_SetConfig>
      break;
 800f9d0:	e01c      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6818      	ldr	r0, [r3, #0]
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	6859      	ldr	r1, [r3, #4]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f000 fbc4 	bl	801016c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2140      	movs	r1, #64	; 0x40
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f000 fc1e 	bl	801022c <TIM_ITRx_SetConfig>
      break;
 800f9f0:	e00c      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f000 fc15 	bl	801022c <TIM_ITRx_SetConfig>
      break;
 800fa02:	e003      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	73fb      	strb	r3, [r7, #15]
      break;
 800fa08:	e000      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800fa0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	ffceff88 	.word	0xffceff88
 800fa2c:	00100040 	.word	0x00100040
 800fa30:	00100030 	.word	0x00100030
 800fa34:	00100020 	.word	0x00100020

0800fa38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a46      	ldr	r2, [pc, #280]	; (800fba0 <TIM_Base_SetConfig+0x12c>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d013      	beq.n	800fab4 <TIM_Base_SetConfig+0x40>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa92:	d00f      	beq.n	800fab4 <TIM_Base_SetConfig+0x40>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a43      	ldr	r2, [pc, #268]	; (800fba4 <TIM_Base_SetConfig+0x130>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d00b      	beq.n	800fab4 <TIM_Base_SetConfig+0x40>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4a42      	ldr	r2, [pc, #264]	; (800fba8 <TIM_Base_SetConfig+0x134>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d007      	beq.n	800fab4 <TIM_Base_SetConfig+0x40>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4a41      	ldr	r2, [pc, #260]	; (800fbac <TIM_Base_SetConfig+0x138>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d003      	beq.n	800fab4 <TIM_Base_SetConfig+0x40>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a40      	ldr	r2, [pc, #256]	; (800fbb0 <TIM_Base_SetConfig+0x13c>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d108      	bne.n	800fac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	4313      	orrs	r3, r2
 800fac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a35      	ldr	r2, [pc, #212]	; (800fba0 <TIM_Base_SetConfig+0x12c>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d01f      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fad4:	d01b      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a32      	ldr	r2, [pc, #200]	; (800fba4 <TIM_Base_SetConfig+0x130>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d017      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a31      	ldr	r2, [pc, #196]	; (800fba8 <TIM_Base_SetConfig+0x134>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d013      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a30      	ldr	r2, [pc, #192]	; (800fbac <TIM_Base_SetConfig+0x138>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d00f      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a2f      	ldr	r2, [pc, #188]	; (800fbb0 <TIM_Base_SetConfig+0x13c>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d00b      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a2e      	ldr	r2, [pc, #184]	; (800fbb4 <TIM_Base_SetConfig+0x140>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d007      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4a2d      	ldr	r2, [pc, #180]	; (800fbb8 <TIM_Base_SetConfig+0x144>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d003      	beq.n	800fb0e <TIM_Base_SetConfig+0x9a>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4a2c      	ldr	r2, [pc, #176]	; (800fbbc <TIM_Base_SetConfig+0x148>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d108      	bne.n	800fb20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	695b      	ldr	r3, [r3, #20]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	689a      	ldr	r2, [r3, #8]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a16      	ldr	r2, [pc, #88]	; (800fba0 <TIM_Base_SetConfig+0x12c>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d00f      	beq.n	800fb6c <TIM_Base_SetConfig+0xf8>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a18      	ldr	r2, [pc, #96]	; (800fbb0 <TIM_Base_SetConfig+0x13c>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d00b      	beq.n	800fb6c <TIM_Base_SetConfig+0xf8>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a17      	ldr	r2, [pc, #92]	; (800fbb4 <TIM_Base_SetConfig+0x140>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d007      	beq.n	800fb6c <TIM_Base_SetConfig+0xf8>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a16      	ldr	r2, [pc, #88]	; (800fbb8 <TIM_Base_SetConfig+0x144>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d003      	beq.n	800fb6c <TIM_Base_SetConfig+0xf8>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a15      	ldr	r2, [pc, #84]	; (800fbbc <TIM_Base_SetConfig+0x148>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d103      	bne.n	800fb74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	691a      	ldr	r2, [r3, #16]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	f003 0301 	and.w	r3, r3, #1
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d105      	bne.n	800fb92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	f023 0201 	bic.w	r2, r3, #1
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	611a      	str	r2, [r3, #16]
  }
}
 800fb92:	bf00      	nop
 800fb94:	3714      	adds	r7, #20
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	40010000 	.word	0x40010000
 800fba4:	40000400 	.word	0x40000400
 800fba8:	40000800 	.word	0x40000800
 800fbac:	40000c00 	.word	0x40000c00
 800fbb0:	40010400 	.word	0x40010400
 800fbb4:	40014000 	.word	0x40014000
 800fbb8:	40014400 	.word	0x40014400
 800fbbc:	40014800 	.word	0x40014800

0800fbc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b087      	sub	sp, #28
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6a1b      	ldr	r3, [r3, #32]
 800fbce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a1b      	ldr	r3, [r3, #32]
 800fbd4:	f023 0201 	bic.w	r2, r3, #1
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	699b      	ldr	r3, [r3, #24]
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	4b37      	ldr	r3, [pc, #220]	; (800fcc8 <TIM_OC1_SetConfig+0x108>)
 800fbec:	4013      	ands	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f023 0303 	bic.w	r3, r3, #3
 800fbf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f023 0302 	bic.w	r3, r3, #2
 800fc08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	4313      	orrs	r3, r2
 800fc12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a2d      	ldr	r2, [pc, #180]	; (800fccc <TIM_OC1_SetConfig+0x10c>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d00f      	beq.n	800fc3c <TIM_OC1_SetConfig+0x7c>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a2c      	ldr	r2, [pc, #176]	; (800fcd0 <TIM_OC1_SetConfig+0x110>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d00b      	beq.n	800fc3c <TIM_OC1_SetConfig+0x7c>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a2b      	ldr	r2, [pc, #172]	; (800fcd4 <TIM_OC1_SetConfig+0x114>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d007      	beq.n	800fc3c <TIM_OC1_SetConfig+0x7c>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a2a      	ldr	r2, [pc, #168]	; (800fcd8 <TIM_OC1_SetConfig+0x118>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d003      	beq.n	800fc3c <TIM_OC1_SetConfig+0x7c>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a29      	ldr	r2, [pc, #164]	; (800fcdc <TIM_OC1_SetConfig+0x11c>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d10c      	bne.n	800fc56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f023 0308 	bic.w	r3, r3, #8
 800fc42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	f023 0304 	bic.w	r3, r3, #4
 800fc54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4a1c      	ldr	r2, [pc, #112]	; (800fccc <TIM_OC1_SetConfig+0x10c>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d00f      	beq.n	800fc7e <TIM_OC1_SetConfig+0xbe>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4a1b      	ldr	r2, [pc, #108]	; (800fcd0 <TIM_OC1_SetConfig+0x110>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d00b      	beq.n	800fc7e <TIM_OC1_SetConfig+0xbe>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4a1a      	ldr	r2, [pc, #104]	; (800fcd4 <TIM_OC1_SetConfig+0x114>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d007      	beq.n	800fc7e <TIM_OC1_SetConfig+0xbe>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a19      	ldr	r2, [pc, #100]	; (800fcd8 <TIM_OC1_SetConfig+0x118>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d003      	beq.n	800fc7e <TIM_OC1_SetConfig+0xbe>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a18      	ldr	r2, [pc, #96]	; (800fcdc <TIM_OC1_SetConfig+0x11c>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d111      	bne.n	800fca2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	695b      	ldr	r3, [r3, #20]
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	699b      	ldr	r3, [r3, #24]
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	693a      	ldr	r2, [r7, #16]
 800fca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	685a      	ldr	r2, [r3, #4]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	697a      	ldr	r2, [r7, #20]
 800fcba:	621a      	str	r2, [r3, #32]
}
 800fcbc:	bf00      	nop
 800fcbe:	371c      	adds	r7, #28
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	fffeff8f 	.word	0xfffeff8f
 800fccc:	40010000 	.word	0x40010000
 800fcd0:	40010400 	.word	0x40010400
 800fcd4:	40014000 	.word	0x40014000
 800fcd8:	40014400 	.word	0x40014400
 800fcdc:	40014800 	.word	0x40014800

0800fce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a1b      	ldr	r3, [r3, #32]
 800fcf4:	f023 0210 	bic.w	r2, r3, #16
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	4b34      	ldr	r3, [pc, #208]	; (800fddc <TIM_OC2_SetConfig+0xfc>)
 800fd0c:	4013      	ands	r3, r2
 800fd0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	021b      	lsls	r3, r3, #8
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	4313      	orrs	r3, r2
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f023 0320 	bic.w	r3, r3, #32
 800fd2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	011b      	lsls	r3, r3, #4
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a29      	ldr	r2, [pc, #164]	; (800fde0 <TIM_OC2_SetConfig+0x100>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d003      	beq.n	800fd48 <TIM_OC2_SetConfig+0x68>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a28      	ldr	r2, [pc, #160]	; (800fde4 <TIM_OC2_SetConfig+0x104>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d10d      	bne.n	800fd64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	011b      	lsls	r3, r3, #4
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a1e      	ldr	r2, [pc, #120]	; (800fde0 <TIM_OC2_SetConfig+0x100>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d00f      	beq.n	800fd8c <TIM_OC2_SetConfig+0xac>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a1d      	ldr	r2, [pc, #116]	; (800fde4 <TIM_OC2_SetConfig+0x104>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d00b      	beq.n	800fd8c <TIM_OC2_SetConfig+0xac>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a1c      	ldr	r2, [pc, #112]	; (800fde8 <TIM_OC2_SetConfig+0x108>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d007      	beq.n	800fd8c <TIM_OC2_SetConfig+0xac>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a1b      	ldr	r2, [pc, #108]	; (800fdec <TIM_OC2_SetConfig+0x10c>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d003      	beq.n	800fd8c <TIM_OC2_SetConfig+0xac>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a1a      	ldr	r2, [pc, #104]	; (800fdf0 <TIM_OC2_SetConfig+0x110>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d113      	bne.n	800fdb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	695b      	ldr	r3, [r3, #20]
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	693a      	ldr	r2, [r7, #16]
 800fda4:	4313      	orrs	r3, r2
 800fda6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	699b      	ldr	r3, [r3, #24]
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	693a      	ldr	r2, [r7, #16]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	693a      	ldr	r2, [r7, #16]
 800fdb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	685a      	ldr	r2, [r3, #4]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	697a      	ldr	r2, [r7, #20]
 800fdcc:	621a      	str	r2, [r3, #32]
}
 800fdce:	bf00      	nop
 800fdd0:	371c      	adds	r7, #28
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	feff8fff 	.word	0xfeff8fff
 800fde0:	40010000 	.word	0x40010000
 800fde4:	40010400 	.word	0x40010400
 800fde8:	40014000 	.word	0x40014000
 800fdec:	40014400 	.word	0x40014400
 800fdf0:	40014800 	.word	0x40014800

0800fdf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b087      	sub	sp, #28
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a1b      	ldr	r3, [r3, #32]
 800fe02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6a1b      	ldr	r3, [r3, #32]
 800fe08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	69db      	ldr	r3, [r3, #28]
 800fe1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	4b33      	ldr	r3, [pc, #204]	; (800feec <TIM_OC3_SetConfig+0xf8>)
 800fe20:	4013      	ands	r3, r2
 800fe22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	021b      	lsls	r3, r3, #8
 800fe44:	697a      	ldr	r2, [r7, #20]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4a28      	ldr	r2, [pc, #160]	; (800fef0 <TIM_OC3_SetConfig+0xfc>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d003      	beq.n	800fe5a <TIM_OC3_SetConfig+0x66>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a27      	ldr	r2, [pc, #156]	; (800fef4 <TIM_OC3_SetConfig+0x100>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d10d      	bne.n	800fe76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	021b      	lsls	r3, r3, #8
 800fe68:	697a      	ldr	r2, [r7, #20]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4a1d      	ldr	r2, [pc, #116]	; (800fef0 <TIM_OC3_SetConfig+0xfc>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d00f      	beq.n	800fe9e <TIM_OC3_SetConfig+0xaa>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	4a1c      	ldr	r2, [pc, #112]	; (800fef4 <TIM_OC3_SetConfig+0x100>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d00b      	beq.n	800fe9e <TIM_OC3_SetConfig+0xaa>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4a1b      	ldr	r2, [pc, #108]	; (800fef8 <TIM_OC3_SetConfig+0x104>)
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d007      	beq.n	800fe9e <TIM_OC3_SetConfig+0xaa>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4a1a      	ldr	r2, [pc, #104]	; (800fefc <TIM_OC3_SetConfig+0x108>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d003      	beq.n	800fe9e <TIM_OC3_SetConfig+0xaa>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4a19      	ldr	r2, [pc, #100]	; (800ff00 <TIM_OC3_SetConfig+0x10c>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d113      	bne.n	800fec6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800feac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	695b      	ldr	r3, [r3, #20]
 800feb2:	011b      	lsls	r3, r3, #4
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	011b      	lsls	r3, r3, #4
 800fec0:	693a      	ldr	r2, [r7, #16]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	693a      	ldr	r2, [r7, #16]
 800feca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	685a      	ldr	r2, [r3, #4]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	697a      	ldr	r2, [r7, #20]
 800fede:	621a      	str	r2, [r3, #32]
}
 800fee0:	bf00      	nop
 800fee2:	371c      	adds	r7, #28
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	fffeff8f 	.word	0xfffeff8f
 800fef0:	40010000 	.word	0x40010000
 800fef4:	40010400 	.word	0x40010400
 800fef8:	40014000 	.word	0x40014000
 800fefc:	40014400 	.word	0x40014400
 800ff00:	40014800 	.word	0x40014800

0800ff04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b087      	sub	sp, #28
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6a1b      	ldr	r3, [r3, #32]
 800ff18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	69db      	ldr	r3, [r3, #28]
 800ff2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	4b24      	ldr	r3, [pc, #144]	; (800ffc0 <TIM_OC4_SetConfig+0xbc>)
 800ff30:	4013      	ands	r3, r2
 800ff32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	021b      	lsls	r3, r3, #8
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	4313      	orrs	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	031b      	lsls	r3, r3, #12
 800ff56:	693a      	ldr	r2, [r7, #16]
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a19      	ldr	r2, [pc, #100]	; (800ffc4 <TIM_OC4_SetConfig+0xc0>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d00f      	beq.n	800ff84 <TIM_OC4_SetConfig+0x80>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a18      	ldr	r2, [pc, #96]	; (800ffc8 <TIM_OC4_SetConfig+0xc4>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d00b      	beq.n	800ff84 <TIM_OC4_SetConfig+0x80>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4a17      	ldr	r2, [pc, #92]	; (800ffcc <TIM_OC4_SetConfig+0xc8>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d007      	beq.n	800ff84 <TIM_OC4_SetConfig+0x80>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4a16      	ldr	r2, [pc, #88]	; (800ffd0 <TIM_OC4_SetConfig+0xcc>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d003      	beq.n	800ff84 <TIM_OC4_SetConfig+0x80>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4a15      	ldr	r2, [pc, #84]	; (800ffd4 <TIM_OC4_SetConfig+0xd0>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d109      	bne.n	800ff98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	695b      	ldr	r3, [r3, #20]
 800ff90:	019b      	lsls	r3, r3, #6
 800ff92:	697a      	ldr	r2, [r7, #20]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	697a      	ldr	r2, [r7, #20]
 800ff9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	621a      	str	r2, [r3, #32]
}
 800ffb2:	bf00      	nop
 800ffb4:	371c      	adds	r7, #28
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	feff8fff 	.word	0xfeff8fff
 800ffc4:	40010000 	.word	0x40010000
 800ffc8:	40010400 	.word	0x40010400
 800ffcc:	40014000 	.word	0x40014000
 800ffd0:	40014400 	.word	0x40014400
 800ffd4:	40014800 	.word	0x40014800

0800ffd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b087      	sub	sp, #28
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a1b      	ldr	r3, [r3, #32]
 800ffe6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a1b      	ldr	r3, [r3, #32]
 800ffec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	4b21      	ldr	r3, [pc, #132]	; (8010088 <TIM_OC5_SetConfig+0xb0>)
 8010004:	4013      	ands	r3, r2
 8010006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68fa      	ldr	r2, [r7, #12]
 801000e:	4313      	orrs	r3, r2
 8010010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	041b      	lsls	r3, r3, #16
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	4313      	orrs	r3, r2
 8010024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4a18      	ldr	r2, [pc, #96]	; (801008c <TIM_OC5_SetConfig+0xb4>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d00f      	beq.n	801004e <TIM_OC5_SetConfig+0x76>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4a17      	ldr	r2, [pc, #92]	; (8010090 <TIM_OC5_SetConfig+0xb8>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d00b      	beq.n	801004e <TIM_OC5_SetConfig+0x76>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4a16      	ldr	r2, [pc, #88]	; (8010094 <TIM_OC5_SetConfig+0xbc>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d007      	beq.n	801004e <TIM_OC5_SetConfig+0x76>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4a15      	ldr	r2, [pc, #84]	; (8010098 <TIM_OC5_SetConfig+0xc0>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d003      	beq.n	801004e <TIM_OC5_SetConfig+0x76>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a14      	ldr	r2, [pc, #80]	; (801009c <TIM_OC5_SetConfig+0xc4>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d109      	bne.n	8010062 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	695b      	ldr	r3, [r3, #20]
 801005a:	021b      	lsls	r3, r3, #8
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	4313      	orrs	r3, r2
 8010060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	697a      	ldr	r2, [r7, #20]
 8010066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	68fa      	ldr	r2, [r7, #12]
 801006c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	685a      	ldr	r2, [r3, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	693a      	ldr	r2, [r7, #16]
 801007a:	621a      	str	r2, [r3, #32]
}
 801007c:	bf00      	nop
 801007e:	371c      	adds	r7, #28
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	fffeff8f 	.word	0xfffeff8f
 801008c:	40010000 	.word	0x40010000
 8010090:	40010400 	.word	0x40010400
 8010094:	40014000 	.word	0x40014000
 8010098:	40014400 	.word	0x40014400
 801009c:	40014800 	.word	0x40014800

080100a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b087      	sub	sp, #28
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a1b      	ldr	r3, [r3, #32]
 80100ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a1b      	ldr	r3, [r3, #32]
 80100b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	4b22      	ldr	r3, [pc, #136]	; (8010154 <TIM_OC6_SetConfig+0xb4>)
 80100cc:	4013      	ands	r3, r2
 80100ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	021b      	lsls	r3, r3, #8
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	4313      	orrs	r3, r2
 80100da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	051b      	lsls	r3, r3, #20
 80100ea:	693a      	ldr	r2, [r7, #16]
 80100ec:	4313      	orrs	r3, r2
 80100ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4a19      	ldr	r2, [pc, #100]	; (8010158 <TIM_OC6_SetConfig+0xb8>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d00f      	beq.n	8010118 <TIM_OC6_SetConfig+0x78>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a18      	ldr	r2, [pc, #96]	; (801015c <TIM_OC6_SetConfig+0xbc>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d00b      	beq.n	8010118 <TIM_OC6_SetConfig+0x78>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a17      	ldr	r2, [pc, #92]	; (8010160 <TIM_OC6_SetConfig+0xc0>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d007      	beq.n	8010118 <TIM_OC6_SetConfig+0x78>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a16      	ldr	r2, [pc, #88]	; (8010164 <TIM_OC6_SetConfig+0xc4>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d003      	beq.n	8010118 <TIM_OC6_SetConfig+0x78>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a15      	ldr	r2, [pc, #84]	; (8010168 <TIM_OC6_SetConfig+0xc8>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d109      	bne.n	801012c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801011e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	695b      	ldr	r3, [r3, #20]
 8010124:	029b      	lsls	r3, r3, #10
 8010126:	697a      	ldr	r2, [r7, #20]
 8010128:	4313      	orrs	r3, r2
 801012a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	697a      	ldr	r2, [r7, #20]
 8010130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	621a      	str	r2, [r3, #32]
}
 8010146:	bf00      	nop
 8010148:	371c      	adds	r7, #28
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	feff8fff 	.word	0xfeff8fff
 8010158:	40010000 	.word	0x40010000
 801015c:	40010400 	.word	0x40010400
 8010160:	40014000 	.word	0x40014000
 8010164:	40014400 	.word	0x40014400
 8010168:	40014800 	.word	0x40014800

0801016c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801016c:	b480      	push	{r7}
 801016e:	b087      	sub	sp, #28
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6a1b      	ldr	r3, [r3, #32]
 801017c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6a1b      	ldr	r3, [r3, #32]
 8010182:	f023 0201 	bic.w	r2, r3, #1
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	699b      	ldr	r3, [r3, #24]
 801018e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	011b      	lsls	r3, r3, #4
 801019c:	693a      	ldr	r2, [r7, #16]
 801019e:	4313      	orrs	r3, r2
 80101a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	f023 030a 	bic.w	r3, r3, #10
 80101a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80101aa:	697a      	ldr	r2, [r7, #20]
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	621a      	str	r2, [r3, #32]
}
 80101be:	bf00      	nop
 80101c0:	371c      	adds	r7, #28
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80101ca:	b480      	push	{r7}
 80101cc:	b087      	sub	sp, #28
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	60f8      	str	r0, [r7, #12]
 80101d2:	60b9      	str	r1, [r7, #8]
 80101d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6a1b      	ldr	r3, [r3, #32]
 80101da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6a1b      	ldr	r3, [r3, #32]
 80101e0:	f023 0210 	bic.w	r2, r3, #16
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	699b      	ldr	r3, [r3, #24]
 80101ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80101f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	031b      	lsls	r3, r3, #12
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	4313      	orrs	r3, r2
 80101fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	011b      	lsls	r3, r3, #4
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	4313      	orrs	r3, r2
 8010210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	697a      	ldr	r2, [r7, #20]
 801021c:	621a      	str	r2, [r3, #32]
}
 801021e:	bf00      	nop
 8010220:	371c      	adds	r7, #28
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr
	...

0801022c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	689b      	ldr	r3, [r3, #8]
 801023a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	4b09      	ldr	r3, [pc, #36]	; (8010264 <TIM_ITRx_SetConfig+0x38>)
 8010240:	4013      	ands	r3, r2
 8010242:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010244:	683a      	ldr	r2, [r7, #0]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	4313      	orrs	r3, r2
 801024a:	f043 0307 	orr.w	r3, r3, #7
 801024e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	609a      	str	r2, [r3, #8]
}
 8010256:	bf00      	nop
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	ffcfff8f 	.word	0xffcfff8f

08010268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010268:	b480      	push	{r7}
 801026a:	b087      	sub	sp, #28
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	021a      	lsls	r2, r3, #8
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	431a      	orrs	r2, r3
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	4313      	orrs	r3, r2
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	4313      	orrs	r3, r2
 8010294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	697a      	ldr	r2, [r7, #20]
 801029a:	609a      	str	r2, [r3, #8]
}
 801029c:	bf00      	nop
 801029e:	371c      	adds	r7, #28
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b087      	sub	sp, #28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	f003 031f 	and.w	r3, r3, #31
 80102ba:	2201      	movs	r2, #1
 80102bc:	fa02 f303 	lsl.w	r3, r2, r3
 80102c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6a1a      	ldr	r2, [r3, #32]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	43db      	mvns	r3, r3
 80102ca:	401a      	ands	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6a1a      	ldr	r2, [r3, #32]
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	f003 031f 	and.w	r3, r3, #31
 80102da:	6879      	ldr	r1, [r7, #4]
 80102dc:	fa01 f303 	lsl.w	r3, r1, r3
 80102e0:	431a      	orrs	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	621a      	str	r2, [r3, #32]
}
 80102e6:	bf00      	nop
 80102e8:	371c      	adds	r7, #28
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
	...

080102f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010304:	2b01      	cmp	r3, #1
 8010306:	d101      	bne.n	801030c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010308:	2302      	movs	r3, #2
 801030a:	e06d      	b.n	80103e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2202      	movs	r2, #2
 8010318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	689b      	ldr	r3, [r3, #8]
 801032a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4a30      	ldr	r2, [pc, #192]	; (80103f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d004      	beq.n	8010340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a2f      	ldr	r2, [pc, #188]	; (80103f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d108      	bne.n	8010352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	4313      	orrs	r3, r2
 8010350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	68fa      	ldr	r2, [r7, #12]
 8010360:	4313      	orrs	r3, r2
 8010362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a20      	ldr	r2, [pc, #128]	; (80103f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d022      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801037e:	d01d      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a1d      	ldr	r2, [pc, #116]	; (80103fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d018      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a1c      	ldr	r2, [pc, #112]	; (8010400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d013      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a1a      	ldr	r2, [pc, #104]	; (8010404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d00e      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4a15      	ldr	r2, [pc, #84]	; (80103f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d009      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a16      	ldr	r2, [pc, #88]	; (8010408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d004      	beq.n	80103bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a15      	ldr	r2, [pc, #84]	; (801040c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d10c      	bne.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	68ba      	ldr	r2, [r7, #8]
 80103ca:	4313      	orrs	r3, r2
 80103cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68ba      	ldr	r2, [r7, #8]
 80103d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2201      	movs	r2, #1
 80103da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3714      	adds	r7, #20
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	40010000 	.word	0x40010000
 80103f8:	40010400 	.word	0x40010400
 80103fc:	40000400 	.word	0x40000400
 8010400:	40000800 	.word	0x40000800
 8010404:	40000c00 	.word	0x40000c00
 8010408:	40001800 	.word	0x40001800
 801040c:	40014000 	.word	0x40014000

08010410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801041a:	2300      	movs	r3, #0
 801041c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010424:	2b01      	cmp	r3, #1
 8010426:	d101      	bne.n	801042c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010428:	2302      	movs	r3, #2
 801042a:	e065      	b.n	80104f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2201      	movs	r2, #1
 8010430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	68db      	ldr	r3, [r3, #12]
 801043e:	4313      	orrs	r3, r2
 8010440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	4313      	orrs	r3, r2
 801044e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	4313      	orrs	r3, r2
 801045c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4313      	orrs	r3, r2
 801046a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	691b      	ldr	r3, [r3, #16]
 8010476:	4313      	orrs	r3, r2
 8010478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	695b      	ldr	r3, [r3, #20]
 8010484:	4313      	orrs	r3, r2
 8010486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010492:	4313      	orrs	r3, r2
 8010494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	699b      	ldr	r3, [r3, #24]
 80104a0:	041b      	lsls	r3, r3, #16
 80104a2:	4313      	orrs	r3, r2
 80104a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4a16      	ldr	r2, [pc, #88]	; (8010504 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d004      	beq.n	80104ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a14      	ldr	r2, [pc, #80]	; (8010508 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d115      	bne.n	80104e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c4:	051b      	lsls	r3, r3, #20
 80104c6:	4313      	orrs	r3, r2
 80104c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	69db      	ldr	r3, [r3, #28]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	6a1b      	ldr	r3, [r3, #32]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3714      	adds	r7, #20
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr
 8010504:	40010000 	.word	0x40010000
 8010508:	40010400 	.word	0x40010400

0801050c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010514:	bf00      	nop
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010528:	bf00      	nop
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801053c:	bf00      	nop
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr

08010548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d101      	bne.n	801055a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	e042      	b.n	80105e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010560:	2b00      	cmp	r3, #0
 8010562:	d106      	bne.n	8010572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7f3 fc01 	bl	8003d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2224      	movs	r2, #36	; 0x24
 8010576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f022 0201 	bic.w	r2, r2, #1
 8010588:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801058e:	2b00      	cmp	r3, #0
 8010590:	d002      	beq.n	8010598 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f001 fc42 	bl	8011e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f000 fed7 	bl	801134c <UART_SetConfig>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d101      	bne.n	80105a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80105a4:	2301      	movs	r3, #1
 80105a6:	e01b      	b.n	80105e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80105b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	689a      	ldr	r2, [r3, #8]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80105c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f042 0201 	orr.w	r2, r2, #1
 80105d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f001 fcc1 	bl	8011f60 <UART_CheckIdleState>
 80105de:	4603      	mov	r3, r0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08a      	sub	sp, #40	; 0x28
 80105ec:	af02      	add	r7, sp, #8
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	603b      	str	r3, [r7, #0]
 80105f4:	4613      	mov	r3, r2
 80105f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105fe:	2b20      	cmp	r3, #32
 8010600:	d17b      	bne.n	80106fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d002      	beq.n	801060e <HAL_UART_Transmit+0x26>
 8010608:	88fb      	ldrh	r3, [r7, #6]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d101      	bne.n	8010612 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801060e:	2301      	movs	r3, #1
 8010610:	e074      	b.n	80106fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2200      	movs	r2, #0
 8010616:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2221      	movs	r2, #33	; 0x21
 801061e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010622:	f7f3 ff1b 	bl	800445c <HAL_GetTick>
 8010626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	88fa      	ldrh	r2, [r7, #6]
 801062c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	88fa      	ldrh	r2, [r7, #6]
 8010634:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010640:	d108      	bne.n	8010654 <HAL_UART_Transmit+0x6c>
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d104      	bne.n	8010654 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801064a:	2300      	movs	r3, #0
 801064c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	61bb      	str	r3, [r7, #24]
 8010652:	e003      	b.n	801065c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010658:	2300      	movs	r3, #0
 801065a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801065c:	e030      	b.n	80106c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	2200      	movs	r2, #0
 8010666:	2180      	movs	r1, #128	; 0x80
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f001 fd23 	bl	80120b4 <UART_WaitOnFlagUntilTimeout>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d005      	beq.n	8010680 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2220      	movs	r2, #32
 8010678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801067c:	2303      	movs	r3, #3
 801067e:	e03d      	b.n	80106fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d10b      	bne.n	801069e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	461a      	mov	r2, r3
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010694:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	3302      	adds	r3, #2
 801069a:	61bb      	str	r3, [r7, #24]
 801069c:	e007      	b.n	80106ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	781a      	ldrb	r2, [r3, #0]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	3301      	adds	r3, #1
 80106ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	3b01      	subs	r3, #1
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1c8      	bne.n	801065e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	2200      	movs	r2, #0
 80106d4:	2140      	movs	r1, #64	; 0x40
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f001 fcec 	bl	80120b4 <UART_WaitOnFlagUntilTimeout>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d005      	beq.n	80106ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2220      	movs	r2, #32
 80106e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80106ea:	2303      	movs	r3, #3
 80106ec:	e006      	b.n	80106fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2220      	movs	r2, #32
 80106f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80106f6:	2300      	movs	r3, #0
 80106f8:	e000      	b.n	80106fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80106fa:	2302      	movs	r3, #2
  }
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3720      	adds	r7, #32
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b08a      	sub	sp, #40	; 0x28
 8010708:	af02      	add	r7, sp, #8
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	603b      	str	r3, [r7, #0]
 8010710:	4613      	mov	r3, r2
 8010712:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801071a:	2b20      	cmp	r3, #32
 801071c:	f040 80b5 	bne.w	801088a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d002      	beq.n	801072c <HAL_UART_Receive+0x28>
 8010726:	88fb      	ldrh	r3, [r7, #6]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d101      	bne.n	8010730 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801072c:	2301      	movs	r3, #1
 801072e:	e0ad      	b.n	801088c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2200      	movs	r2, #0
 8010734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2222      	movs	r2, #34	; 0x22
 801073c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2200      	movs	r2, #0
 8010744:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010746:	f7f3 fe89 	bl	800445c <HAL_GetTick>
 801074a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	88fa      	ldrh	r2, [r7, #6]
 8010750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	88fa      	ldrh	r2, [r7, #6]
 8010758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010764:	d10e      	bne.n	8010784 <HAL_UART_Receive+0x80>
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	691b      	ldr	r3, [r3, #16]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d105      	bne.n	801077a <HAL_UART_Receive+0x76>
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010778:	e02d      	b.n	80107d6 <HAL_UART_Receive+0xd2>
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	22ff      	movs	r2, #255	; 0xff
 801077e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010782:	e028      	b.n	80107d6 <HAL_UART_Receive+0xd2>
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10d      	bne.n	80107a8 <HAL_UART_Receive+0xa4>
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	691b      	ldr	r3, [r3, #16]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d104      	bne.n	801079e <HAL_UART_Receive+0x9a>
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	22ff      	movs	r2, #255	; 0xff
 8010798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801079c:	e01b      	b.n	80107d6 <HAL_UART_Receive+0xd2>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	227f      	movs	r2, #127	; 0x7f
 80107a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107a6:	e016      	b.n	80107d6 <HAL_UART_Receive+0xd2>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107b0:	d10d      	bne.n	80107ce <HAL_UART_Receive+0xca>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d104      	bne.n	80107c4 <HAL_UART_Receive+0xc0>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	227f      	movs	r2, #127	; 0x7f
 80107be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107c2:	e008      	b.n	80107d6 <HAL_UART_Receive+0xd2>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	223f      	movs	r2, #63	; 0x3f
 80107c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107cc:	e003      	b.n	80107d6 <HAL_UART_Receive+0xd2>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	689b      	ldr	r3, [r3, #8]
 80107e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107e6:	d108      	bne.n	80107fa <HAL_UART_Receive+0xf6>
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d104      	bne.n	80107fa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80107f0:	2300      	movs	r3, #0
 80107f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	61bb      	str	r3, [r7, #24]
 80107f8:	e003      	b.n	8010802 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80107fe:	2300      	movs	r3, #0
 8010800:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010802:	e036      	b.n	8010872 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2200      	movs	r2, #0
 801080c:	2120      	movs	r1, #32
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f001 fc50 	bl	80120b4 <UART_WaitOnFlagUntilTimeout>
 8010814:	4603      	mov	r3, r0
 8010816:	2b00      	cmp	r3, #0
 8010818:	d005      	beq.n	8010826 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2220      	movs	r2, #32
 801081e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010822:	2303      	movs	r3, #3
 8010824:	e032      	b.n	801088c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10c      	bne.n	8010846 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010832:	b29a      	uxth	r2, r3
 8010834:	8a7b      	ldrh	r3, [r7, #18]
 8010836:	4013      	ands	r3, r2
 8010838:	b29a      	uxth	r2, r3
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	3302      	adds	r3, #2
 8010842:	61bb      	str	r3, [r7, #24]
 8010844:	e00c      	b.n	8010860 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084c:	b2da      	uxtb	r2, r3
 801084e:	8a7b      	ldrh	r3, [r7, #18]
 8010850:	b2db      	uxtb	r3, r3
 8010852:	4013      	ands	r3, r2
 8010854:	b2da      	uxtb	r2, r3
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	3301      	adds	r3, #1
 801085e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010866:	b29b      	uxth	r3, r3
 8010868:	3b01      	subs	r3, #1
 801086a:	b29a      	uxth	r2, r3
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010878:	b29b      	uxth	r3, r3
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1c2      	bne.n	8010804 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2220      	movs	r2, #32
 8010882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010886:	2300      	movs	r3, #0
 8010888:	e000      	b.n	801088c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801088a:	2302      	movs	r3, #2
  }
}
 801088c:	4618      	mov	r0, r3
 801088e:	3720      	adds	r7, #32
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b08a      	sub	sp, #40	; 0x28
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	4613      	mov	r3, r2
 80108a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108a8:	2b20      	cmp	r3, #32
 80108aa:	d137      	bne.n	801091c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <HAL_UART_Receive_IT+0x24>
 80108b2:	88fb      	ldrh	r3, [r7, #6]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d101      	bne.n	80108bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	e030      	b.n	801091e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2200      	movs	r2, #0
 80108c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a18      	ldr	r2, [pc, #96]	; (8010928 <HAL_UART_Receive_IT+0x94>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d01f      	beq.n	801090c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d018      	beq.n	801090c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	e853 3f00 	ldrex	r3, [r3]
 80108e6:	613b      	str	r3, [r7, #16]
   return(result);
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80108ee:	627b      	str	r3, [r7, #36]	; 0x24
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	461a      	mov	r2, r3
 80108f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f8:	623b      	str	r3, [r7, #32]
 80108fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fc:	69f9      	ldr	r1, [r7, #28]
 80108fe:	6a3a      	ldr	r2, [r7, #32]
 8010900:	e841 2300 	strex	r3, r2, [r1]
 8010904:	61bb      	str	r3, [r7, #24]
   return(result);
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1e6      	bne.n	80108da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801090c:	88fb      	ldrh	r3, [r7, #6]
 801090e:	461a      	mov	r2, r3
 8010910:	68b9      	ldr	r1, [r7, #8]
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f001 fc3c 	bl	8012190 <UART_Start_Receive_IT>
 8010918:	4603      	mov	r3, r0
 801091a:	e000      	b.n	801091e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801091c:	2302      	movs	r3, #2
  }
}
 801091e:	4618      	mov	r0, r3
 8010920:	3728      	adds	r7, #40	; 0x28
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	58000c00 	.word	0x58000c00

0801092c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08a      	sub	sp, #40	; 0x28
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	4613      	mov	r3, r2
 8010938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010940:	2b20      	cmp	r3, #32
 8010942:	d167      	bne.n	8010a14 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <HAL_UART_Transmit_DMA+0x24>
 801094a:	88fb      	ldrh	r3, [r7, #6]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010950:	2301      	movs	r3, #1
 8010952:	e060      	b.n	8010a16 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	88fa      	ldrh	r2, [r7, #6]
 801095e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	88fa      	ldrh	r2, [r7, #6]
 8010966:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2200      	movs	r2, #0
 801096e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2221      	movs	r2, #33	; 0x21
 8010976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801097e:	2b00      	cmp	r3, #0
 8010980:	d028      	beq.n	80109d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010986:	4a26      	ldr	r2, [pc, #152]	; (8010a20 <HAL_UART_Transmit_DMA+0xf4>)
 8010988:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801098e:	4a25      	ldr	r2, [pc, #148]	; (8010a24 <HAL_UART_Transmit_DMA+0xf8>)
 8010990:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010996:	4a24      	ldr	r2, [pc, #144]	; (8010a28 <HAL_UART_Transmit_DMA+0xfc>)
 8010998:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801099e:	2200      	movs	r2, #0
 80109a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109aa:	4619      	mov	r1, r3
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3328      	adds	r3, #40	; 0x28
 80109b2:	461a      	mov	r2, r3
 80109b4:	88fb      	ldrh	r3, [r7, #6]
 80109b6:	f7f6 f9d5 	bl	8006d64 <HAL_DMA_Start_IT>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d009      	beq.n	80109d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2210      	movs	r2, #16
 80109c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2220      	movs	r2, #32
 80109cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80109d0:	2301      	movs	r3, #1
 80109d2:	e020      	b.n	8010a16 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2240      	movs	r2, #64	; 0x40
 80109da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3308      	adds	r3, #8
 80109e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	e853 3f00 	ldrex	r3, [r3]
 80109ea:	613b      	str	r3, [r7, #16]
   return(result);
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3308      	adds	r3, #8
 80109fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109fc:	623a      	str	r2, [r7, #32]
 80109fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a00:	69f9      	ldr	r1, [r7, #28]
 8010a02:	6a3a      	ldr	r2, [r7, #32]
 8010a04:	e841 2300 	strex	r3, r2, [r1]
 8010a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d1e5      	bne.n	80109dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	e000      	b.n	8010a16 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010a14:	2302      	movs	r3, #2
  }
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3728      	adds	r7, #40	; 0x28
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	08012525 	.word	0x08012525
 8010a24:	080125bb 	.word	0x080125bb
 8010a28:	080125d7 	.word	0x080125d7

08010a2c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b09a      	sub	sp, #104	; 0x68
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a3c:	e853 3f00 	ldrex	r3, [r3]
 8010a40:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a48:	667b      	str	r3, [r7, #100]	; 0x64
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a52:	657b      	str	r3, [r7, #84]	; 0x54
 8010a54:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a5a:	e841 2300 	strex	r3, r2, [r1]
 8010a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1e6      	bne.n	8010a34 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3308      	adds	r3, #8
 8010a6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a70:	e853 3f00 	ldrex	r3, [r3]
 8010a74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a78:	4b46      	ldr	r3, [pc, #280]	; (8010b94 <HAL_UART_AbortReceive+0x168>)
 8010a7a:	4013      	ands	r3, r2
 8010a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3308      	adds	r3, #8
 8010a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a86:	643a      	str	r2, [r7, #64]	; 0x40
 8010a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a8e:	e841 2300 	strex	r3, r2, [r1]
 8010a92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1e5      	bne.n	8010a66 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d118      	bne.n	8010ad4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa8:	6a3b      	ldr	r3, [r7, #32]
 8010aaa:	e853 3f00 	ldrex	r3, [r3]
 8010aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	f023 0310 	bic.w	r3, r3, #16
 8010ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	461a      	mov	r2, r3
 8010abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ac2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ac8:	e841 2300 	strex	r3, r2, [r1]
 8010acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1e6      	bne.n	8010aa2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ade:	2b40      	cmp	r3, #64	; 0x40
 8010ae0:	d13b      	bne.n	8010b5a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	3308      	adds	r3, #8
 8010ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	e853 3f00 	ldrex	r3, [r3]
 8010af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3308      	adds	r3, #8
 8010b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b02:	61ba      	str	r2, [r7, #24]
 8010b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b06:	6979      	ldr	r1, [r7, #20]
 8010b08:	69ba      	ldr	r2, [r7, #24]
 8010b0a:	e841 2300 	strex	r3, r2, [r1]
 8010b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1e5      	bne.n	8010ae2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d01c      	beq.n	8010b5a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b26:	2200      	movs	r2, #0
 8010b28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7f6 fb81 	bl	8007238 <HAL_DMA_Abort>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d00e      	beq.n	8010b5a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7f8 f806 	bl	8008b54 <HAL_DMA_GetError>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b20      	cmp	r3, #32
 8010b4c:	d105      	bne.n	8010b5a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2210      	movs	r2, #16
 8010b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010b56:	2303      	movs	r3, #3
 8010b58:	e017      	b.n	8010b8a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	220f      	movs	r2, #15
 8010b68:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	699a      	ldr	r2, [r3, #24]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f042 0208 	orr.w	r2, r2, #8
 8010b78:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2220      	movs	r2, #32
 8010b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2200      	movs	r2, #0
 8010b86:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3768      	adds	r7, #104	; 0x68
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	effffffe 	.word	0xeffffffe

08010b98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b0ba      	sub	sp, #232	; 0xe8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	69db      	ldr	r3, [r3, #28]
 8010ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010bbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010bc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8010bc6:	4013      	ands	r3, r2
 8010bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d11b      	bne.n	8010c0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bd8:	f003 0320 	and.w	r3, r3, #32
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d015      	beq.n	8010c0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010be4:	f003 0320 	and.w	r3, r3, #32
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d105      	bne.n	8010bf8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d009      	beq.n	8010c0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f000 8377 	beq.w	80112f0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	4798      	blx	r3
      }
      return;
 8010c0a:	e371      	b.n	80112f0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f000 8123 	beq.w	8010e5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010c16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c1a:	4b8d      	ldr	r3, [pc, #564]	; (8010e50 <HAL_UART_IRQHandler+0x2b8>)
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d106      	bne.n	8010c30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010c26:	4b8b      	ldr	r3, [pc, #556]	; (8010e54 <HAL_UART_IRQHandler+0x2bc>)
 8010c28:	4013      	ands	r3, r2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f000 8116 	beq.w	8010e5c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d011      	beq.n	8010c60 <HAL_UART_IRQHandler+0xc8>
 8010c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00b      	beq.n	8010c60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c56:	f043 0201 	orr.w	r2, r3, #1
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c64:	f003 0302 	and.w	r3, r3, #2
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d011      	beq.n	8010c90 <HAL_UART_IRQHandler+0xf8>
 8010c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c70:	f003 0301 	and.w	r3, r3, #1
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d00b      	beq.n	8010c90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2202      	movs	r2, #2
 8010c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c86:	f043 0204 	orr.w	r2, r3, #4
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c94:	f003 0304 	and.w	r3, r3, #4
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d011      	beq.n	8010cc0 <HAL_UART_IRQHandler+0x128>
 8010c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ca0:	f003 0301 	and.w	r3, r3, #1
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d00b      	beq.n	8010cc0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2204      	movs	r2, #4
 8010cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cb6:	f043 0202 	orr.w	r2, r3, #2
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cc4:	f003 0308 	and.w	r3, r3, #8
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d017      	beq.n	8010cfc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cd0:	f003 0320 	and.w	r3, r3, #32
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d105      	bne.n	8010ce4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010cd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010cdc:	4b5c      	ldr	r3, [pc, #368]	; (8010e50 <HAL_UART_IRQHandler+0x2b8>)
 8010cde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d00b      	beq.n	8010cfc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2208      	movs	r2, #8
 8010cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cf2:	f043 0208 	orr.w	r2, r3, #8
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d012      	beq.n	8010d2e <HAL_UART_IRQHandler+0x196>
 8010d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d00c      	beq.n	8010d2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d24:	f043 0220 	orr.w	r2, r3, #32
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 82dd 	beq.w	80112f4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d3e:	f003 0320 	and.w	r3, r3, #32
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d013      	beq.n	8010d6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d4a:	f003 0320 	and.w	r3, r3, #32
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d105      	bne.n	8010d5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d007      	beq.n	8010d6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d003      	beq.n	8010d6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	689b      	ldr	r3, [r3, #8]
 8010d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d82:	2b40      	cmp	r3, #64	; 0x40
 8010d84:	d005      	beq.n	8010d92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d054      	beq.n	8010e3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f001 fb60 	bl	8012458 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	689b      	ldr	r3, [r3, #8]
 8010d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010da2:	2b40      	cmp	r3, #64	; 0x40
 8010da4:	d146      	bne.n	8010e34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	3308      	adds	r3, #8
 8010dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010db4:	e853 3f00 	ldrex	r3, [r3]
 8010db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3308      	adds	r3, #8
 8010dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010de2:	e841 2300 	strex	r3, r2, [r1]
 8010de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1d9      	bne.n	8010da6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d017      	beq.n	8010e2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e02:	4a15      	ldr	r2, [pc, #84]	; (8010e58 <HAL_UART_IRQHandler+0x2c0>)
 8010e04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7f6 fd31 	bl	8007874 <HAL_DMA_Abort_IT>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d019      	beq.n	8010e4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010e26:	4610      	mov	r0, r2
 8010e28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e2a:	e00f      	b.n	8010e4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fa77 	bl	8011320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e32:	e00b      	b.n	8010e4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f000 fa73 	bl	8011320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e3a:	e007      	b.n	8010e4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 fa6f 	bl	8011320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010e4a:	e253      	b.n	80112f4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e4c:	bf00      	nop
    return;
 8010e4e:	e251      	b.n	80112f4 <HAL_UART_IRQHandler+0x75c>
 8010e50:	10000001 	.word	0x10000001
 8010e54:	04000120 	.word	0x04000120
 8010e58:	08012657 	.word	0x08012657

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	f040 81e7 	bne.w	8011234 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e6a:	f003 0310 	and.w	r3, r3, #16
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 81e0 	beq.w	8011234 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e78:	f003 0310 	and.w	r3, r3, #16
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f000 81d9 	beq.w	8011234 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2210      	movs	r2, #16
 8010e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	689b      	ldr	r3, [r3, #8]
 8010e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e94:	2b40      	cmp	r3, #64	; 0x40
 8010e96:	f040 8151 	bne.w	801113c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4a96      	ldr	r2, [pc, #600]	; (80110fc <HAL_UART_IRQHandler+0x564>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d068      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a93      	ldr	r2, [pc, #588]	; (8011100 <HAL_UART_IRQHandler+0x568>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d061      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a91      	ldr	r2, [pc, #580]	; (8011104 <HAL_UART_IRQHandler+0x56c>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d05a      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a8e      	ldr	r2, [pc, #568]	; (8011108 <HAL_UART_IRQHandler+0x570>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d053      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a8c      	ldr	r2, [pc, #560]	; (801110c <HAL_UART_IRQHandler+0x574>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d04c      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a89      	ldr	r2, [pc, #548]	; (8011110 <HAL_UART_IRQHandler+0x578>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d045      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a87      	ldr	r2, [pc, #540]	; (8011114 <HAL_UART_IRQHandler+0x57c>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d03e      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4a84      	ldr	r2, [pc, #528]	; (8011118 <HAL_UART_IRQHandler+0x580>)
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d037      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a82      	ldr	r2, [pc, #520]	; (801111c <HAL_UART_IRQHandler+0x584>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d030      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a7f      	ldr	r2, [pc, #508]	; (8011120 <HAL_UART_IRQHandler+0x588>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d029      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4a7d      	ldr	r2, [pc, #500]	; (8011124 <HAL_UART_IRQHandler+0x58c>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d022      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a7a      	ldr	r2, [pc, #488]	; (8011128 <HAL_UART_IRQHandler+0x590>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d01b      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4a78      	ldr	r2, [pc, #480]	; (801112c <HAL_UART_IRQHandler+0x594>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d014      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a75      	ldr	r2, [pc, #468]	; (8011130 <HAL_UART_IRQHandler+0x598>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d00d      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4a73      	ldr	r2, [pc, #460]	; (8011134 <HAL_UART_IRQHandler+0x59c>)
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d006      	beq.n	8010f7a <HAL_UART_IRQHandler+0x3e2>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4a70      	ldr	r2, [pc, #448]	; (8011138 <HAL_UART_IRQHandler+0x5a0>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d106      	bne.n	8010f88 <HAL_UART_IRQHandler+0x3f0>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	e005      	b.n	8010f94 <HAL_UART_IRQHandler+0x3fc>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 81ab 	beq.w	80112f8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010fac:	429a      	cmp	r2, r3
 8010fae:	f080 81a3 	bcs.w	80112f8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fc2:	69db      	ldr	r3, [r3, #28]
 8010fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fc8:	f000 8087 	beq.w	80110da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fd8:	e853 3f00 	ldrex	r3, [r3]
 8010fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010ffa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011006:	e841 2300 	strex	r3, r2, [r1]
 801100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801100e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1da      	bne.n	8010fcc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3308      	adds	r3, #8
 801101c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801101e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011020:	e853 3f00 	ldrex	r3, [r3]
 8011024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011028:	f023 0301 	bic.w	r3, r3, #1
 801102c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	3308      	adds	r3, #8
 8011036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801103a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801103e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011046:	e841 2300 	strex	r3, r2, [r1]
 801104a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801104c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1e1      	bne.n	8011016 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3308      	adds	r3, #8
 8011058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801105c:	e853 3f00 	ldrex	r3, [r3]
 8011060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	3308      	adds	r3, #8
 8011072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801107a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801107c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801107e:	e841 2300 	strex	r3, r2, [r1]
 8011082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1e3      	bne.n	8011052 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2220      	movs	r2, #32
 801108e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801109e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a0:	e853 3f00 	ldrex	r3, [r3]
 80110a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80110a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110a8:	f023 0310 	bic.w	r3, r3, #16
 80110ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	461a      	mov	r2, r3
 80110b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80110ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80110bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80110c2:	e841 2300 	strex	r3, r2, [r1]
 80110c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80110c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d1e4      	bne.n	8011098 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f6 f8af 	bl	8007238 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2202      	movs	r2, #2
 80110de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	1ad3      	subs	r3, r2, r3
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	4619      	mov	r1, r3
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 f91d 	bl	8011334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110fa:	e0fd      	b.n	80112f8 <HAL_UART_IRQHandler+0x760>
 80110fc:	40020010 	.word	0x40020010
 8011100:	40020028 	.word	0x40020028
 8011104:	40020040 	.word	0x40020040
 8011108:	40020058 	.word	0x40020058
 801110c:	40020070 	.word	0x40020070
 8011110:	40020088 	.word	0x40020088
 8011114:	400200a0 	.word	0x400200a0
 8011118:	400200b8 	.word	0x400200b8
 801111c:	40020410 	.word	0x40020410
 8011120:	40020428 	.word	0x40020428
 8011124:	40020440 	.word	0x40020440
 8011128:	40020458 	.word	0x40020458
 801112c:	40020470 	.word	0x40020470
 8011130:	40020488 	.word	0x40020488
 8011134:	400204a0 	.word	0x400204a0
 8011138:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011148:	b29b      	uxth	r3, r3
 801114a:	1ad3      	subs	r3, r2, r3
 801114c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011156:	b29b      	uxth	r3, r3
 8011158:	2b00      	cmp	r3, #0
 801115a:	f000 80cf 	beq.w	80112fc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801115e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011162:	2b00      	cmp	r3, #0
 8011164:	f000 80ca 	beq.w	80112fc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011170:	e853 3f00 	ldrex	r3, [r3]
 8011174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801117c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801118a:	647b      	str	r3, [r7, #68]	; 0x44
 801118c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011192:	e841 2300 	strex	r3, r2, [r1]
 8011196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1e4      	bne.n	8011168 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	3308      	adds	r3, #8
 80111a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a8:	e853 3f00 	ldrex	r3, [r3]
 80111ac:	623b      	str	r3, [r7, #32]
   return(result);
 80111ae:	6a3a      	ldr	r2, [r7, #32]
 80111b0:	4b55      	ldr	r3, [pc, #340]	; (8011308 <HAL_UART_IRQHandler+0x770>)
 80111b2:	4013      	ands	r3, r2
 80111b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	3308      	adds	r3, #8
 80111be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80111c2:	633a      	str	r2, [r7, #48]	; 0x30
 80111c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ca:	e841 2300 	strex	r3, r2, [r1]
 80111ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80111d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1e3      	bne.n	801119e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2220      	movs	r2, #32
 80111da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2200      	movs	r2, #0
 80111e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	e853 3f00 	ldrex	r3, [r3]
 80111f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 0310 	bic.w	r3, r3, #16
 80111fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801120c:	61fb      	str	r3, [r7, #28]
 801120e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011210:	69b9      	ldr	r1, [r7, #24]
 8011212:	69fa      	ldr	r2, [r7, #28]
 8011214:	e841 2300 	strex	r3, r2, [r1]
 8011218:	617b      	str	r3, [r7, #20]
   return(result);
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1e4      	bne.n	80111ea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2202      	movs	r2, #2
 8011224:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801122a:	4619      	mov	r1, r3
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f000 f881 	bl	8011334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011232:	e063      	b.n	80112fc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00e      	beq.n	801125e <HAL_UART_IRQHandler+0x6c6>
 8011240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011248:	2b00      	cmp	r3, #0
 801124a:	d008      	beq.n	801125e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f001 ff5a 	bl	8013110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801125c:	e051      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801125e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011266:	2b00      	cmp	r3, #0
 8011268:	d014      	beq.n	8011294 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801126a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011272:	2b00      	cmp	r3, #0
 8011274:	d105      	bne.n	8011282 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801127a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801127e:	2b00      	cmp	r3, #0
 8011280:	d008      	beq.n	8011294 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011286:	2b00      	cmp	r3, #0
 8011288:	d03a      	beq.n	8011300 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	4798      	blx	r3
    }
    return;
 8011292:	e035      	b.n	8011300 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801129c:	2b00      	cmp	r3, #0
 801129e:	d009      	beq.n	80112b4 <HAL_UART_IRQHandler+0x71c>
 80112a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d003      	beq.n	80112b4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f001 f9e8 	bl	8012682 <UART_EndTransmit_IT>
    return;
 80112b2:	e026      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80112b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d009      	beq.n	80112d4 <HAL_UART_IRQHandler+0x73c>
 80112c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d003      	beq.n	80112d4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f001 ff33 	bl	8013138 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112d2:	e016      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80112d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d010      	beq.n	8011302 <HAL_UART_IRQHandler+0x76a>
 80112e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	da0c      	bge.n	8011302 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f001 ff1b 	bl	8013124 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112ee:	e008      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
      return;
 80112f0:	bf00      	nop
 80112f2:	e006      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
    return;
 80112f4:	bf00      	nop
 80112f6:	e004      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
      return;
 80112f8:	bf00      	nop
 80112fa:	e002      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
      return;
 80112fc:	bf00      	nop
 80112fe:	e000      	b.n	8011302 <HAL_UART_IRQHandler+0x76a>
    return;
 8011300:	bf00      	nop
  }
}
 8011302:	37e8      	adds	r7, #232	; 0xe8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	effffffe 	.word	0xeffffffe

0801130c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011314:	bf00      	nop
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011328:	bf00      	nop
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011334:	b480      	push	{r7}
 8011336:	b083      	sub	sp, #12
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	460b      	mov	r3, r1
 801133e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011340:	bf00      	nop
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr

0801134c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801134c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011350:	b092      	sub	sp, #72	; 0x48
 8011352:	af00      	add	r7, sp, #0
 8011354:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011356:	2300      	movs	r3, #0
 8011358:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	689a      	ldr	r2, [r3, #8]
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	691b      	ldr	r3, [r3, #16]
 8011364:	431a      	orrs	r2, r3
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	695b      	ldr	r3, [r3, #20]
 801136a:	431a      	orrs	r2, r3
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	69db      	ldr	r3, [r3, #28]
 8011370:	4313      	orrs	r3, r2
 8011372:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	4bbe      	ldr	r3, [pc, #760]	; (8011674 <UART_SetConfig+0x328>)
 801137c:	4013      	ands	r3, r2
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011384:	430b      	orrs	r3, r1
 8011386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	68da      	ldr	r2, [r3, #12]
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	430a      	orrs	r2, r1
 801139c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4ab3      	ldr	r2, [pc, #716]	; (8011678 <UART_SetConfig+0x32c>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d004      	beq.n	80113b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	6a1b      	ldr	r3, [r3, #32]
 80113b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113b4:	4313      	orrs	r3, r2
 80113b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	689a      	ldr	r2, [r3, #8]
 80113be:	4baf      	ldr	r3, [pc, #700]	; (801167c <UART_SetConfig+0x330>)
 80113c0:	4013      	ands	r3, r2
 80113c2:	697a      	ldr	r2, [r7, #20]
 80113c4:	6812      	ldr	r2, [r2, #0]
 80113c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113c8:	430b      	orrs	r3, r1
 80113ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d2:	f023 010f 	bic.w	r1, r3, #15
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	430a      	orrs	r2, r1
 80113e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	4aa6      	ldr	r2, [pc, #664]	; (8011680 <UART_SetConfig+0x334>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d177      	bne.n	80114dc <UART_SetConfig+0x190>
 80113ec:	4ba5      	ldr	r3, [pc, #660]	; (8011684 <UART_SetConfig+0x338>)
 80113ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113f4:	2b28      	cmp	r3, #40	; 0x28
 80113f6:	d86d      	bhi.n	80114d4 <UART_SetConfig+0x188>
 80113f8:	a201      	add	r2, pc, #4	; (adr r2, 8011400 <UART_SetConfig+0xb4>)
 80113fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113fe:	bf00      	nop
 8011400:	080114a5 	.word	0x080114a5
 8011404:	080114d5 	.word	0x080114d5
 8011408:	080114d5 	.word	0x080114d5
 801140c:	080114d5 	.word	0x080114d5
 8011410:	080114d5 	.word	0x080114d5
 8011414:	080114d5 	.word	0x080114d5
 8011418:	080114d5 	.word	0x080114d5
 801141c:	080114d5 	.word	0x080114d5
 8011420:	080114ad 	.word	0x080114ad
 8011424:	080114d5 	.word	0x080114d5
 8011428:	080114d5 	.word	0x080114d5
 801142c:	080114d5 	.word	0x080114d5
 8011430:	080114d5 	.word	0x080114d5
 8011434:	080114d5 	.word	0x080114d5
 8011438:	080114d5 	.word	0x080114d5
 801143c:	080114d5 	.word	0x080114d5
 8011440:	080114b5 	.word	0x080114b5
 8011444:	080114d5 	.word	0x080114d5
 8011448:	080114d5 	.word	0x080114d5
 801144c:	080114d5 	.word	0x080114d5
 8011450:	080114d5 	.word	0x080114d5
 8011454:	080114d5 	.word	0x080114d5
 8011458:	080114d5 	.word	0x080114d5
 801145c:	080114d5 	.word	0x080114d5
 8011460:	080114bd 	.word	0x080114bd
 8011464:	080114d5 	.word	0x080114d5
 8011468:	080114d5 	.word	0x080114d5
 801146c:	080114d5 	.word	0x080114d5
 8011470:	080114d5 	.word	0x080114d5
 8011474:	080114d5 	.word	0x080114d5
 8011478:	080114d5 	.word	0x080114d5
 801147c:	080114d5 	.word	0x080114d5
 8011480:	080114c5 	.word	0x080114c5
 8011484:	080114d5 	.word	0x080114d5
 8011488:	080114d5 	.word	0x080114d5
 801148c:	080114d5 	.word	0x080114d5
 8011490:	080114d5 	.word	0x080114d5
 8011494:	080114d5 	.word	0x080114d5
 8011498:	080114d5 	.word	0x080114d5
 801149c:	080114d5 	.word	0x080114d5
 80114a0:	080114cd 	.word	0x080114cd
 80114a4:	2301      	movs	r3, #1
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114aa:	e222      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114ac:	2304      	movs	r3, #4
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b2:	e21e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114b4:	2308      	movs	r3, #8
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e21a      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114bc:	2310      	movs	r3, #16
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e216      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114c4:	2320      	movs	r3, #32
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ca:	e212      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114cc:	2340      	movs	r3, #64	; 0x40
 80114ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114d2:	e20e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114d4:	2380      	movs	r3, #128	; 0x80
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e20a      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4a69      	ldr	r2, [pc, #420]	; (8011688 <UART_SetConfig+0x33c>)
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d130      	bne.n	8011548 <UART_SetConfig+0x1fc>
 80114e6:	4b67      	ldr	r3, [pc, #412]	; (8011684 <UART_SetConfig+0x338>)
 80114e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ea:	f003 0307 	and.w	r3, r3, #7
 80114ee:	2b05      	cmp	r3, #5
 80114f0:	d826      	bhi.n	8011540 <UART_SetConfig+0x1f4>
 80114f2:	a201      	add	r2, pc, #4	; (adr r2, 80114f8 <UART_SetConfig+0x1ac>)
 80114f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f8:	08011511 	.word	0x08011511
 80114fc:	08011519 	.word	0x08011519
 8011500:	08011521 	.word	0x08011521
 8011504:	08011529 	.word	0x08011529
 8011508:	08011531 	.word	0x08011531
 801150c:	08011539 	.word	0x08011539
 8011510:	2300      	movs	r3, #0
 8011512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011516:	e1ec      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011518:	2304      	movs	r3, #4
 801151a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151e:	e1e8      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011520:	2308      	movs	r3, #8
 8011522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011526:	e1e4      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011528:	2310      	movs	r3, #16
 801152a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152e:	e1e0      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011530:	2320      	movs	r3, #32
 8011532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011536:	e1dc      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011538:	2340      	movs	r3, #64	; 0x40
 801153a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153e:	e1d8      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011540:	2380      	movs	r3, #128	; 0x80
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e1d4      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4a4f      	ldr	r2, [pc, #316]	; (801168c <UART_SetConfig+0x340>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d130      	bne.n	80115b4 <UART_SetConfig+0x268>
 8011552:	4b4c      	ldr	r3, [pc, #304]	; (8011684 <UART_SetConfig+0x338>)
 8011554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011556:	f003 0307 	and.w	r3, r3, #7
 801155a:	2b05      	cmp	r3, #5
 801155c:	d826      	bhi.n	80115ac <UART_SetConfig+0x260>
 801155e:	a201      	add	r2, pc, #4	; (adr r2, 8011564 <UART_SetConfig+0x218>)
 8011560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011564:	0801157d 	.word	0x0801157d
 8011568:	08011585 	.word	0x08011585
 801156c:	0801158d 	.word	0x0801158d
 8011570:	08011595 	.word	0x08011595
 8011574:	0801159d 	.word	0x0801159d
 8011578:	080115a5 	.word	0x080115a5
 801157c:	2300      	movs	r3, #0
 801157e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011582:	e1b6      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011584:	2304      	movs	r3, #4
 8011586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158a:	e1b2      	b.n	80118f2 <UART_SetConfig+0x5a6>
 801158c:	2308      	movs	r3, #8
 801158e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011592:	e1ae      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011594:	2310      	movs	r3, #16
 8011596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801159a:	e1aa      	b.n	80118f2 <UART_SetConfig+0x5a6>
 801159c:	2320      	movs	r3, #32
 801159e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a2:	e1a6      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80115a4:	2340      	movs	r3, #64	; 0x40
 80115a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115aa:	e1a2      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80115ac:	2380      	movs	r3, #128	; 0x80
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e19e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a35      	ldr	r2, [pc, #212]	; (8011690 <UART_SetConfig+0x344>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d130      	bne.n	8011620 <UART_SetConfig+0x2d4>
 80115be:	4b31      	ldr	r3, [pc, #196]	; (8011684 <UART_SetConfig+0x338>)
 80115c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115c2:	f003 0307 	and.w	r3, r3, #7
 80115c6:	2b05      	cmp	r3, #5
 80115c8:	d826      	bhi.n	8011618 <UART_SetConfig+0x2cc>
 80115ca:	a201      	add	r2, pc, #4	; (adr r2, 80115d0 <UART_SetConfig+0x284>)
 80115cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d0:	080115e9 	.word	0x080115e9
 80115d4:	080115f1 	.word	0x080115f1
 80115d8:	080115f9 	.word	0x080115f9
 80115dc:	08011601 	.word	0x08011601
 80115e0:	08011609 	.word	0x08011609
 80115e4:	08011611 	.word	0x08011611
 80115e8:	2300      	movs	r3, #0
 80115ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ee:	e180      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80115f0:	2304      	movs	r3, #4
 80115f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f6:	e17c      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80115f8:	2308      	movs	r3, #8
 80115fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fe:	e178      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011600:	2310      	movs	r3, #16
 8011602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011606:	e174      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011608:	2320      	movs	r3, #32
 801160a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160e:	e170      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011610:	2340      	movs	r3, #64	; 0x40
 8011612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011616:	e16c      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011618:	2380      	movs	r3, #128	; 0x80
 801161a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161e:	e168      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4a1b      	ldr	r2, [pc, #108]	; (8011694 <UART_SetConfig+0x348>)
 8011626:	4293      	cmp	r3, r2
 8011628:	d142      	bne.n	80116b0 <UART_SetConfig+0x364>
 801162a:	4b16      	ldr	r3, [pc, #88]	; (8011684 <UART_SetConfig+0x338>)
 801162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801162e:	f003 0307 	and.w	r3, r3, #7
 8011632:	2b05      	cmp	r3, #5
 8011634:	d838      	bhi.n	80116a8 <UART_SetConfig+0x35c>
 8011636:	a201      	add	r2, pc, #4	; (adr r2, 801163c <UART_SetConfig+0x2f0>)
 8011638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163c:	08011655 	.word	0x08011655
 8011640:	0801165d 	.word	0x0801165d
 8011644:	08011665 	.word	0x08011665
 8011648:	0801166d 	.word	0x0801166d
 801164c:	08011699 	.word	0x08011699
 8011650:	080116a1 	.word	0x080116a1
 8011654:	2300      	movs	r3, #0
 8011656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801165a:	e14a      	b.n	80118f2 <UART_SetConfig+0x5a6>
 801165c:	2304      	movs	r3, #4
 801165e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011662:	e146      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011664:	2308      	movs	r3, #8
 8011666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166a:	e142      	b.n	80118f2 <UART_SetConfig+0x5a6>
 801166c:	2310      	movs	r3, #16
 801166e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011672:	e13e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011674:	cfff69f3 	.word	0xcfff69f3
 8011678:	58000c00 	.word	0x58000c00
 801167c:	11fff4ff 	.word	0x11fff4ff
 8011680:	40011000 	.word	0x40011000
 8011684:	58024400 	.word	0x58024400
 8011688:	40004400 	.word	0x40004400
 801168c:	40004800 	.word	0x40004800
 8011690:	40004c00 	.word	0x40004c00
 8011694:	40005000 	.word	0x40005000
 8011698:	2320      	movs	r3, #32
 801169a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169e:	e128      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80116a0:	2340      	movs	r3, #64	; 0x40
 80116a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a6:	e124      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80116a8:	2380      	movs	r3, #128	; 0x80
 80116aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ae:	e120      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4acb      	ldr	r2, [pc, #812]	; (80119e4 <UART_SetConfig+0x698>)
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d176      	bne.n	80117a8 <UART_SetConfig+0x45c>
 80116ba:	4bcb      	ldr	r3, [pc, #812]	; (80119e8 <UART_SetConfig+0x69c>)
 80116bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80116c2:	2b28      	cmp	r3, #40	; 0x28
 80116c4:	d86c      	bhi.n	80117a0 <UART_SetConfig+0x454>
 80116c6:	a201      	add	r2, pc, #4	; (adr r2, 80116cc <UART_SetConfig+0x380>)
 80116c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116cc:	08011771 	.word	0x08011771
 80116d0:	080117a1 	.word	0x080117a1
 80116d4:	080117a1 	.word	0x080117a1
 80116d8:	080117a1 	.word	0x080117a1
 80116dc:	080117a1 	.word	0x080117a1
 80116e0:	080117a1 	.word	0x080117a1
 80116e4:	080117a1 	.word	0x080117a1
 80116e8:	080117a1 	.word	0x080117a1
 80116ec:	08011779 	.word	0x08011779
 80116f0:	080117a1 	.word	0x080117a1
 80116f4:	080117a1 	.word	0x080117a1
 80116f8:	080117a1 	.word	0x080117a1
 80116fc:	080117a1 	.word	0x080117a1
 8011700:	080117a1 	.word	0x080117a1
 8011704:	080117a1 	.word	0x080117a1
 8011708:	080117a1 	.word	0x080117a1
 801170c:	08011781 	.word	0x08011781
 8011710:	080117a1 	.word	0x080117a1
 8011714:	080117a1 	.word	0x080117a1
 8011718:	080117a1 	.word	0x080117a1
 801171c:	080117a1 	.word	0x080117a1
 8011720:	080117a1 	.word	0x080117a1
 8011724:	080117a1 	.word	0x080117a1
 8011728:	080117a1 	.word	0x080117a1
 801172c:	08011789 	.word	0x08011789
 8011730:	080117a1 	.word	0x080117a1
 8011734:	080117a1 	.word	0x080117a1
 8011738:	080117a1 	.word	0x080117a1
 801173c:	080117a1 	.word	0x080117a1
 8011740:	080117a1 	.word	0x080117a1
 8011744:	080117a1 	.word	0x080117a1
 8011748:	080117a1 	.word	0x080117a1
 801174c:	08011791 	.word	0x08011791
 8011750:	080117a1 	.word	0x080117a1
 8011754:	080117a1 	.word	0x080117a1
 8011758:	080117a1 	.word	0x080117a1
 801175c:	080117a1 	.word	0x080117a1
 8011760:	080117a1 	.word	0x080117a1
 8011764:	080117a1 	.word	0x080117a1
 8011768:	080117a1 	.word	0x080117a1
 801176c:	08011799 	.word	0x08011799
 8011770:	2301      	movs	r3, #1
 8011772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011776:	e0bc      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011778:	2304      	movs	r3, #4
 801177a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177e:	e0b8      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011780:	2308      	movs	r3, #8
 8011782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011786:	e0b4      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011788:	2310      	movs	r3, #16
 801178a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178e:	e0b0      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011790:	2320      	movs	r3, #32
 8011792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011796:	e0ac      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011798:	2340      	movs	r3, #64	; 0x40
 801179a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801179e:	e0a8      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80117a0:	2380      	movs	r3, #128	; 0x80
 80117a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117a6:	e0a4      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a8f      	ldr	r2, [pc, #572]	; (80119ec <UART_SetConfig+0x6a0>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d130      	bne.n	8011814 <UART_SetConfig+0x4c8>
 80117b2:	4b8d      	ldr	r3, [pc, #564]	; (80119e8 <UART_SetConfig+0x69c>)
 80117b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117b6:	f003 0307 	and.w	r3, r3, #7
 80117ba:	2b05      	cmp	r3, #5
 80117bc:	d826      	bhi.n	801180c <UART_SetConfig+0x4c0>
 80117be:	a201      	add	r2, pc, #4	; (adr r2, 80117c4 <UART_SetConfig+0x478>)
 80117c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c4:	080117dd 	.word	0x080117dd
 80117c8:	080117e5 	.word	0x080117e5
 80117cc:	080117ed 	.word	0x080117ed
 80117d0:	080117f5 	.word	0x080117f5
 80117d4:	080117fd 	.word	0x080117fd
 80117d8:	08011805 	.word	0x08011805
 80117dc:	2300      	movs	r3, #0
 80117de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117e2:	e086      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80117e4:	2304      	movs	r3, #4
 80117e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ea:	e082      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80117ec:	2308      	movs	r3, #8
 80117ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f2:	e07e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80117f4:	2310      	movs	r3, #16
 80117f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fa:	e07a      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80117fc:	2320      	movs	r3, #32
 80117fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011802:	e076      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011804:	2340      	movs	r3, #64	; 0x40
 8011806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801180a:	e072      	b.n	80118f2 <UART_SetConfig+0x5a6>
 801180c:	2380      	movs	r3, #128	; 0x80
 801180e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011812:	e06e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4a75      	ldr	r2, [pc, #468]	; (80119f0 <UART_SetConfig+0x6a4>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d130      	bne.n	8011880 <UART_SetConfig+0x534>
 801181e:	4b72      	ldr	r3, [pc, #456]	; (80119e8 <UART_SetConfig+0x69c>)
 8011820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011822:	f003 0307 	and.w	r3, r3, #7
 8011826:	2b05      	cmp	r3, #5
 8011828:	d826      	bhi.n	8011878 <UART_SetConfig+0x52c>
 801182a:	a201      	add	r2, pc, #4	; (adr r2, 8011830 <UART_SetConfig+0x4e4>)
 801182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011830:	08011849 	.word	0x08011849
 8011834:	08011851 	.word	0x08011851
 8011838:	08011859 	.word	0x08011859
 801183c:	08011861 	.word	0x08011861
 8011840:	08011869 	.word	0x08011869
 8011844:	08011871 	.word	0x08011871
 8011848:	2300      	movs	r3, #0
 801184a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801184e:	e050      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011850:	2304      	movs	r3, #4
 8011852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011856:	e04c      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011858:	2308      	movs	r3, #8
 801185a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185e:	e048      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011860:	2310      	movs	r3, #16
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011866:	e044      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011868:	2320      	movs	r3, #32
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186e:	e040      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011870:	2340      	movs	r3, #64	; 0x40
 8011872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011876:	e03c      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011878:	2380      	movs	r3, #128	; 0x80
 801187a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187e:	e038      	b.n	80118f2 <UART_SetConfig+0x5a6>
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a5b      	ldr	r2, [pc, #364]	; (80119f4 <UART_SetConfig+0x6a8>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d130      	bne.n	80118ec <UART_SetConfig+0x5a0>
 801188a:	4b57      	ldr	r3, [pc, #348]	; (80119e8 <UART_SetConfig+0x69c>)
 801188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801188e:	f003 0307 	and.w	r3, r3, #7
 8011892:	2b05      	cmp	r3, #5
 8011894:	d826      	bhi.n	80118e4 <UART_SetConfig+0x598>
 8011896:	a201      	add	r2, pc, #4	; (adr r2, 801189c <UART_SetConfig+0x550>)
 8011898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801189c:	080118b5 	.word	0x080118b5
 80118a0:	080118bd 	.word	0x080118bd
 80118a4:	080118c5 	.word	0x080118c5
 80118a8:	080118cd 	.word	0x080118cd
 80118ac:	080118d5 	.word	0x080118d5
 80118b0:	080118dd 	.word	0x080118dd
 80118b4:	2302      	movs	r3, #2
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ba:	e01a      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118bc:	2304      	movs	r3, #4
 80118be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c2:	e016      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118c4:	2308      	movs	r3, #8
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ca:	e012      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118cc:	2310      	movs	r3, #16
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d2:	e00e      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118d4:	2320      	movs	r3, #32
 80118d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118da:	e00a      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118dc:	2340      	movs	r3, #64	; 0x40
 80118de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118e2:	e006      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118e4:	2380      	movs	r3, #128	; 0x80
 80118e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ea:	e002      	b.n	80118f2 <UART_SetConfig+0x5a6>
 80118ec:	2380      	movs	r3, #128	; 0x80
 80118ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4a3f      	ldr	r2, [pc, #252]	; (80119f4 <UART_SetConfig+0x6a8>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	f040 80f8 	bne.w	8011aee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80118fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011902:	2b20      	cmp	r3, #32
 8011904:	dc46      	bgt.n	8011994 <UART_SetConfig+0x648>
 8011906:	2b02      	cmp	r3, #2
 8011908:	f2c0 8082 	blt.w	8011a10 <UART_SetConfig+0x6c4>
 801190c:	3b02      	subs	r3, #2
 801190e:	2b1e      	cmp	r3, #30
 8011910:	d87e      	bhi.n	8011a10 <UART_SetConfig+0x6c4>
 8011912:	a201      	add	r2, pc, #4	; (adr r2, 8011918 <UART_SetConfig+0x5cc>)
 8011914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011918:	0801199b 	.word	0x0801199b
 801191c:	08011a11 	.word	0x08011a11
 8011920:	080119a3 	.word	0x080119a3
 8011924:	08011a11 	.word	0x08011a11
 8011928:	08011a11 	.word	0x08011a11
 801192c:	08011a11 	.word	0x08011a11
 8011930:	080119b3 	.word	0x080119b3
 8011934:	08011a11 	.word	0x08011a11
 8011938:	08011a11 	.word	0x08011a11
 801193c:	08011a11 	.word	0x08011a11
 8011940:	08011a11 	.word	0x08011a11
 8011944:	08011a11 	.word	0x08011a11
 8011948:	08011a11 	.word	0x08011a11
 801194c:	08011a11 	.word	0x08011a11
 8011950:	080119c3 	.word	0x080119c3
 8011954:	08011a11 	.word	0x08011a11
 8011958:	08011a11 	.word	0x08011a11
 801195c:	08011a11 	.word	0x08011a11
 8011960:	08011a11 	.word	0x08011a11
 8011964:	08011a11 	.word	0x08011a11
 8011968:	08011a11 	.word	0x08011a11
 801196c:	08011a11 	.word	0x08011a11
 8011970:	08011a11 	.word	0x08011a11
 8011974:	08011a11 	.word	0x08011a11
 8011978:	08011a11 	.word	0x08011a11
 801197c:	08011a11 	.word	0x08011a11
 8011980:	08011a11 	.word	0x08011a11
 8011984:	08011a11 	.word	0x08011a11
 8011988:	08011a11 	.word	0x08011a11
 801198c:	08011a11 	.word	0x08011a11
 8011990:	08011a03 	.word	0x08011a03
 8011994:	2b40      	cmp	r3, #64	; 0x40
 8011996:	d037      	beq.n	8011a08 <UART_SetConfig+0x6bc>
 8011998:	e03a      	b.n	8011a10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801199a:	f7fb fce5 	bl	800d368 <HAL_RCCEx_GetD3PCLK1Freq>
 801199e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119a0:	e03c      	b.n	8011a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fb fcf4 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119b0:	e034      	b.n	8011a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119b2:	f107 0318 	add.w	r3, r7, #24
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7fb fe40 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119c0:	e02c      	b.n	8011a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119c2:	4b09      	ldr	r3, [pc, #36]	; (80119e8 <UART_SetConfig+0x69c>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f003 0320 	and.w	r3, r3, #32
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d016      	beq.n	80119fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119ce:	4b06      	ldr	r3, [pc, #24]	; (80119e8 <UART_SetConfig+0x69c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	08db      	lsrs	r3, r3, #3
 80119d4:	f003 0303 	and.w	r3, r3, #3
 80119d8:	4a07      	ldr	r2, [pc, #28]	; (80119f8 <UART_SetConfig+0x6ac>)
 80119da:	fa22 f303 	lsr.w	r3, r2, r3
 80119de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119e0:	e01c      	b.n	8011a1c <UART_SetConfig+0x6d0>
 80119e2:	bf00      	nop
 80119e4:	40011400 	.word	0x40011400
 80119e8:	58024400 	.word	0x58024400
 80119ec:	40007800 	.word	0x40007800
 80119f0:	40007c00 	.word	0x40007c00
 80119f4:	58000c00 	.word	0x58000c00
 80119f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80119fc:	4b9d      	ldr	r3, [pc, #628]	; (8011c74 <UART_SetConfig+0x928>)
 80119fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a00:	e00c      	b.n	8011a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a02:	4b9d      	ldr	r3, [pc, #628]	; (8011c78 <UART_SetConfig+0x92c>)
 8011a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a06:	e009      	b.n	8011a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a0e:	e005      	b.n	8011a1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011a10:	2300      	movs	r3, #0
 8011a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011a14:	2301      	movs	r3, #1
 8011a16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011a1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f000 81de 	beq.w	8011de0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a28:	4a94      	ldr	r2, [pc, #592]	; (8011c7c <UART_SetConfig+0x930>)
 8011a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	685a      	ldr	r2, [r3, #4]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	4413      	add	r3, r2
 8011a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d305      	bcc.n	8011a54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d903      	bls.n	8011a5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011a54:	2301      	movs	r3, #1
 8011a56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a5a:	e1c1      	b.n	8011de0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a5e:	2200      	movs	r2, #0
 8011a60:	60bb      	str	r3, [r7, #8]
 8011a62:	60fa      	str	r2, [r7, #12]
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a68:	4a84      	ldr	r2, [pc, #528]	; (8011c7c <UART_SetConfig+0x930>)
 8011a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	2200      	movs	r2, #0
 8011a72:	603b      	str	r3, [r7, #0]
 8011a74:	607a      	str	r2, [r7, #4]
 8011a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a7e:	f7ee fc2f 	bl	80002e0 <__aeabi_uldivmod>
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	4610      	mov	r0, r2
 8011a88:	4619      	mov	r1, r3
 8011a8a:	f04f 0200 	mov.w	r2, #0
 8011a8e:	f04f 0300 	mov.w	r3, #0
 8011a92:	020b      	lsls	r3, r1, #8
 8011a94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a98:	0202      	lsls	r2, r0, #8
 8011a9a:	6979      	ldr	r1, [r7, #20]
 8011a9c:	6849      	ldr	r1, [r1, #4]
 8011a9e:	0849      	lsrs	r1, r1, #1
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	eb12 0804 	adds.w	r8, r2, r4
 8011aaa:	eb43 0905 	adc.w	r9, r3, r5
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	469a      	mov	sl, r3
 8011ab6:	4693      	mov	fp, r2
 8011ab8:	4652      	mov	r2, sl
 8011aba:	465b      	mov	r3, fp
 8011abc:	4640      	mov	r0, r8
 8011abe:	4649      	mov	r1, r9
 8011ac0:	f7ee fc0e 	bl	80002e0 <__aeabi_uldivmod>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	4613      	mov	r3, r2
 8011aca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ad2:	d308      	bcc.n	8011ae6 <UART_SetConfig+0x79a>
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ada:	d204      	bcs.n	8011ae6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ae2:	60da      	str	r2, [r3, #12]
 8011ae4:	e17c      	b.n	8011de0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011aec:	e178      	b.n	8011de0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	69db      	ldr	r3, [r3, #28]
 8011af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011af6:	f040 80c5 	bne.w	8011c84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011afa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011afe:	2b20      	cmp	r3, #32
 8011b00:	dc48      	bgt.n	8011b94 <UART_SetConfig+0x848>
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	db7b      	blt.n	8011bfe <UART_SetConfig+0x8b2>
 8011b06:	2b20      	cmp	r3, #32
 8011b08:	d879      	bhi.n	8011bfe <UART_SetConfig+0x8b2>
 8011b0a:	a201      	add	r2, pc, #4	; (adr r2, 8011b10 <UART_SetConfig+0x7c4>)
 8011b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b10:	08011b9b 	.word	0x08011b9b
 8011b14:	08011ba3 	.word	0x08011ba3
 8011b18:	08011bff 	.word	0x08011bff
 8011b1c:	08011bff 	.word	0x08011bff
 8011b20:	08011bab 	.word	0x08011bab
 8011b24:	08011bff 	.word	0x08011bff
 8011b28:	08011bff 	.word	0x08011bff
 8011b2c:	08011bff 	.word	0x08011bff
 8011b30:	08011bbb 	.word	0x08011bbb
 8011b34:	08011bff 	.word	0x08011bff
 8011b38:	08011bff 	.word	0x08011bff
 8011b3c:	08011bff 	.word	0x08011bff
 8011b40:	08011bff 	.word	0x08011bff
 8011b44:	08011bff 	.word	0x08011bff
 8011b48:	08011bff 	.word	0x08011bff
 8011b4c:	08011bff 	.word	0x08011bff
 8011b50:	08011bcb 	.word	0x08011bcb
 8011b54:	08011bff 	.word	0x08011bff
 8011b58:	08011bff 	.word	0x08011bff
 8011b5c:	08011bff 	.word	0x08011bff
 8011b60:	08011bff 	.word	0x08011bff
 8011b64:	08011bff 	.word	0x08011bff
 8011b68:	08011bff 	.word	0x08011bff
 8011b6c:	08011bff 	.word	0x08011bff
 8011b70:	08011bff 	.word	0x08011bff
 8011b74:	08011bff 	.word	0x08011bff
 8011b78:	08011bff 	.word	0x08011bff
 8011b7c:	08011bff 	.word	0x08011bff
 8011b80:	08011bff 	.word	0x08011bff
 8011b84:	08011bff 	.word	0x08011bff
 8011b88:	08011bff 	.word	0x08011bff
 8011b8c:	08011bff 	.word	0x08011bff
 8011b90:	08011bf1 	.word	0x08011bf1
 8011b94:	2b40      	cmp	r3, #64	; 0x40
 8011b96:	d02e      	beq.n	8011bf6 <UART_SetConfig+0x8aa>
 8011b98:	e031      	b.n	8011bfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b9a:	f7f9 fbed 	bl	800b378 <HAL_RCC_GetPCLK1Freq>
 8011b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ba0:	e033      	b.n	8011c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011ba2:	f7f9 fbff 	bl	800b3a4 <HAL_RCC_GetPCLK2Freq>
 8011ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ba8:	e02f      	b.n	8011c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fb fbf0 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bb8:	e027      	b.n	8011c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bba:	f107 0318 	add.w	r3, r7, #24
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fb fd3c 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bc8:	e01f      	b.n	8011c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011bca:	4b2d      	ldr	r3, [pc, #180]	; (8011c80 <UART_SetConfig+0x934>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f003 0320 	and.w	r3, r3, #32
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d009      	beq.n	8011bea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011bd6:	4b2a      	ldr	r3, [pc, #168]	; (8011c80 <UART_SetConfig+0x934>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	08db      	lsrs	r3, r3, #3
 8011bdc:	f003 0303 	and.w	r3, r3, #3
 8011be0:	4a24      	ldr	r2, [pc, #144]	; (8011c74 <UART_SetConfig+0x928>)
 8011be2:	fa22 f303 	lsr.w	r3, r2, r3
 8011be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011be8:	e00f      	b.n	8011c0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011bea:	4b22      	ldr	r3, [pc, #136]	; (8011c74 <UART_SetConfig+0x928>)
 8011bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bee:	e00c      	b.n	8011c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011bf0:	4b21      	ldr	r3, [pc, #132]	; (8011c78 <UART_SetConfig+0x92c>)
 8011bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bf4:	e009      	b.n	8011c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bfc:	e005      	b.n	8011c0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c02:	2301      	movs	r3, #1
 8011c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f000 80e7 	beq.w	8011de0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c16:	4a19      	ldr	r2, [pc, #100]	; (8011c7c <UART_SetConfig+0x930>)
 8011c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c24:	005a      	lsls	r2, r3, #1
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	085b      	lsrs	r3, r3, #1
 8011c2c:	441a      	add	r2, r3
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	2b0f      	cmp	r3, #15
 8011c3c:	d916      	bls.n	8011c6c <UART_SetConfig+0x920>
 8011c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c44:	d212      	bcs.n	8011c6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	f023 030f 	bic.w	r3, r3, #15
 8011c4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c52:	085b      	lsrs	r3, r3, #1
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	f003 0307 	and.w	r3, r3, #7
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011c68:	60da      	str	r2, [r3, #12]
 8011c6a:	e0b9      	b.n	8011de0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c72:	e0b5      	b.n	8011de0 <UART_SetConfig+0xa94>
 8011c74:	03d09000 	.word	0x03d09000
 8011c78:	003d0900 	.word	0x003d0900
 8011c7c:	08017eb4 	.word	0x08017eb4
 8011c80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c88:	2b20      	cmp	r3, #32
 8011c8a:	dc49      	bgt.n	8011d20 <UART_SetConfig+0x9d4>
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	db7c      	blt.n	8011d8a <UART_SetConfig+0xa3e>
 8011c90:	2b20      	cmp	r3, #32
 8011c92:	d87a      	bhi.n	8011d8a <UART_SetConfig+0xa3e>
 8011c94:	a201      	add	r2, pc, #4	; (adr r2, 8011c9c <UART_SetConfig+0x950>)
 8011c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c9a:	bf00      	nop
 8011c9c:	08011d27 	.word	0x08011d27
 8011ca0:	08011d2f 	.word	0x08011d2f
 8011ca4:	08011d8b 	.word	0x08011d8b
 8011ca8:	08011d8b 	.word	0x08011d8b
 8011cac:	08011d37 	.word	0x08011d37
 8011cb0:	08011d8b 	.word	0x08011d8b
 8011cb4:	08011d8b 	.word	0x08011d8b
 8011cb8:	08011d8b 	.word	0x08011d8b
 8011cbc:	08011d47 	.word	0x08011d47
 8011cc0:	08011d8b 	.word	0x08011d8b
 8011cc4:	08011d8b 	.word	0x08011d8b
 8011cc8:	08011d8b 	.word	0x08011d8b
 8011ccc:	08011d8b 	.word	0x08011d8b
 8011cd0:	08011d8b 	.word	0x08011d8b
 8011cd4:	08011d8b 	.word	0x08011d8b
 8011cd8:	08011d8b 	.word	0x08011d8b
 8011cdc:	08011d57 	.word	0x08011d57
 8011ce0:	08011d8b 	.word	0x08011d8b
 8011ce4:	08011d8b 	.word	0x08011d8b
 8011ce8:	08011d8b 	.word	0x08011d8b
 8011cec:	08011d8b 	.word	0x08011d8b
 8011cf0:	08011d8b 	.word	0x08011d8b
 8011cf4:	08011d8b 	.word	0x08011d8b
 8011cf8:	08011d8b 	.word	0x08011d8b
 8011cfc:	08011d8b 	.word	0x08011d8b
 8011d00:	08011d8b 	.word	0x08011d8b
 8011d04:	08011d8b 	.word	0x08011d8b
 8011d08:	08011d8b 	.word	0x08011d8b
 8011d0c:	08011d8b 	.word	0x08011d8b
 8011d10:	08011d8b 	.word	0x08011d8b
 8011d14:	08011d8b 	.word	0x08011d8b
 8011d18:	08011d8b 	.word	0x08011d8b
 8011d1c:	08011d7d 	.word	0x08011d7d
 8011d20:	2b40      	cmp	r3, #64	; 0x40
 8011d22:	d02e      	beq.n	8011d82 <UART_SetConfig+0xa36>
 8011d24:	e031      	b.n	8011d8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d26:	f7f9 fb27 	bl	800b378 <HAL_RCC_GetPCLK1Freq>
 8011d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d2c:	e033      	b.n	8011d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d2e:	f7f9 fb39 	bl	800b3a4 <HAL_RCC_GetPCLK2Freq>
 8011d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d34:	e02f      	b.n	8011d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fb fb2a 	bl	800d394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d44:	e027      	b.n	8011d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d46:	f107 0318 	add.w	r3, r7, #24
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fb fc76 	bl	800d63c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d54:	e01f      	b.n	8011d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d56:	4b2d      	ldr	r3, [pc, #180]	; (8011e0c <UART_SetConfig+0xac0>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f003 0320 	and.w	r3, r3, #32
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d009      	beq.n	8011d76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d62:	4b2a      	ldr	r3, [pc, #168]	; (8011e0c <UART_SetConfig+0xac0>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	08db      	lsrs	r3, r3, #3
 8011d68:	f003 0303 	and.w	r3, r3, #3
 8011d6c:	4a28      	ldr	r2, [pc, #160]	; (8011e10 <UART_SetConfig+0xac4>)
 8011d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8011d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d74:	e00f      	b.n	8011d96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011d76:	4b26      	ldr	r3, [pc, #152]	; (8011e10 <UART_SetConfig+0xac4>)
 8011d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d7a:	e00c      	b.n	8011d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d7c:	4b25      	ldr	r3, [pc, #148]	; (8011e14 <UART_SetConfig+0xac8>)
 8011d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d80:	e009      	b.n	8011d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d88:	e005      	b.n	8011d96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d94:	bf00      	nop
    }

    if (pclk != 0U)
 8011d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d021      	beq.n	8011de0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011da0:	4a1d      	ldr	r2, [pc, #116]	; (8011e18 <UART_SetConfig+0xacc>)
 8011da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011da6:	461a      	mov	r2, r3
 8011da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011daa:	fbb3 f2f2 	udiv	r2, r3, r2
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	085b      	lsrs	r3, r3, #1
 8011db4:	441a      	add	r2, r3
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dbe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	2b0f      	cmp	r3, #15
 8011dc4:	d909      	bls.n	8011dda <UART_SetConfig+0xa8e>
 8011dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011dcc:	d205      	bcs.n	8011dda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	60da      	str	r2, [r3, #12]
 8011dd8:	e002      	b.n	8011de0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	2201      	movs	r2, #1
 8011de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	2200      	movs	r2, #0
 8011df4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011dfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3748      	adds	r7, #72	; 0x48
 8011e04:	46bd      	mov	sp, r7
 8011e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e0a:	bf00      	nop
 8011e0c:	58024400 	.word	0x58024400
 8011e10:	03d09000 	.word	0x03d09000
 8011e14:	003d0900 	.word	0x003d0900
 8011e18:	08017eb4 	.word	0x08017eb4

08011e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e28:	f003 0308 	and.w	r3, r3, #8
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00a      	beq.n	8011e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	430a      	orrs	r2, r1
 8011e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d00a      	beq.n	8011e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	430a      	orrs	r2, r1
 8011e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e6c:	f003 0302 	and.w	r3, r3, #2
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d00a      	beq.n	8011e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	430a      	orrs	r2, r1
 8011e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e8e:	f003 0304 	and.w	r3, r3, #4
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00a      	beq.n	8011eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	430a      	orrs	r2, r1
 8011eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb0:	f003 0310 	and.w	r3, r3, #16
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00a      	beq.n	8011ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	430a      	orrs	r2, r1
 8011ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ed2:	f003 0320 	and.w	r3, r3, #32
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d00a      	beq.n	8011ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	430a      	orrs	r2, r1
 8011eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d01a      	beq.n	8011f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	430a      	orrs	r2, r1
 8011f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f1a:	d10a      	bne.n	8011f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	430a      	orrs	r2, r1
 8011f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00a      	beq.n	8011f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	430a      	orrs	r2, r1
 8011f52:	605a      	str	r2, [r3, #4]
  }
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b098      	sub	sp, #96	; 0x60
 8011f64:	af02      	add	r7, sp, #8
 8011f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f70:	f7f2 fa74 	bl	800445c <HAL_GetTick>
 8011f74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f003 0308 	and.w	r3, r3, #8
 8011f80:	2b08      	cmp	r3, #8
 8011f82:	d12f      	bne.n	8011fe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f88e 	bl	80120b4 <UART_WaitOnFlagUntilTimeout>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d022      	beq.n	8011fe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa6:	e853 3f00 	ldrex	r3, [r3]
 8011faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	461a      	mov	r2, r3
 8011fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8011fbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fc4:	e841 2300 	strex	r3, r2, [r1]
 8011fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1e6      	bne.n	8011f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2220      	movs	r2, #32
 8011fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011fe0:	2303      	movs	r3, #3
 8011fe2:	e063      	b.n	80120ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f003 0304 	and.w	r3, r3, #4
 8011fee:	2b04      	cmp	r3, #4
 8011ff0:	d149      	bne.n	8012086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 f857 	bl	80120b4 <UART_WaitOnFlagUntilTimeout>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d03c      	beq.n	8012086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012014:	e853 3f00 	ldrex	r3, [r3]
 8012018:	623b      	str	r3, [r7, #32]
   return(result);
 801201a:	6a3b      	ldr	r3, [r7, #32]
 801201c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	461a      	mov	r2, r3
 8012028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801202a:	633b      	str	r3, [r7, #48]	; 0x30
 801202c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012032:	e841 2300 	strex	r3, r2, [r1]
 8012036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203a:	2b00      	cmp	r3, #0
 801203c:	d1e6      	bne.n	801200c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	3308      	adds	r3, #8
 8012044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	e853 3f00 	ldrex	r3, [r3]
 801204c:	60fb      	str	r3, [r7, #12]
   return(result);
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f023 0301 	bic.w	r3, r3, #1
 8012054:	64bb      	str	r3, [r7, #72]	; 0x48
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	3308      	adds	r3, #8
 801205c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801205e:	61fa      	str	r2, [r7, #28]
 8012060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012062:	69b9      	ldr	r1, [r7, #24]
 8012064:	69fa      	ldr	r2, [r7, #28]
 8012066:	e841 2300 	strex	r3, r2, [r1]
 801206a:	617b      	str	r3, [r7, #20]
   return(result);
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d1e5      	bne.n	801203e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2220      	movs	r2, #32
 8012076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012082:	2303      	movs	r3, #3
 8012084:	e012      	b.n	80120ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2220      	movs	r2, #32
 801208a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2220      	movs	r2, #32
 8012092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3758      	adds	r7, #88	; 0x58
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	603b      	str	r3, [r7, #0]
 80120c0:	4613      	mov	r3, r2
 80120c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120c4:	e04f      	b.n	8012166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120cc:	d04b      	beq.n	8012166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80120ce:	f7f2 f9c5 	bl	800445c <HAL_GetTick>
 80120d2:	4602      	mov	r2, r0
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	69ba      	ldr	r2, [r7, #24]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d302      	bcc.n	80120e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d101      	bne.n	80120e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80120e4:	2303      	movs	r3, #3
 80120e6:	e04e      	b.n	8012186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f003 0304 	and.w	r3, r3, #4
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d037      	beq.n	8012166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	2b80      	cmp	r3, #128	; 0x80
 80120fa:	d034      	beq.n	8012166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	2b40      	cmp	r3, #64	; 0x40
 8012100:	d031      	beq.n	8012166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	69db      	ldr	r3, [r3, #28]
 8012108:	f003 0308 	and.w	r3, r3, #8
 801210c:	2b08      	cmp	r3, #8
 801210e:	d110      	bne.n	8012132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2208      	movs	r2, #8
 8012116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f000 f99d 	bl	8012458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2208      	movs	r2, #8
 8012122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801212e:	2301      	movs	r3, #1
 8012130:	e029      	b.n	8012186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	69db      	ldr	r3, [r3, #28]
 8012138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801213c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012140:	d111      	bne.n	8012166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801214a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f000 f983 	bl	8012458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2220      	movs	r2, #32
 8012156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012162:	2303      	movs	r3, #3
 8012164:	e00f      	b.n	8012186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	69da      	ldr	r2, [r3, #28]
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	4013      	ands	r3, r2
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	429a      	cmp	r2, r3
 8012174:	bf0c      	ite	eq
 8012176:	2301      	moveq	r3, #1
 8012178:	2300      	movne	r3, #0
 801217a:	b2db      	uxtb	r3, r3
 801217c:	461a      	mov	r2, r3
 801217e:	79fb      	ldrb	r3, [r7, #7]
 8012180:	429a      	cmp	r2, r3
 8012182:	d0a0      	beq.n	80120c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	3710      	adds	r7, #16
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
	...

08012190 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012190:	b480      	push	{r7}
 8012192:	b0a3      	sub	sp, #140	; 0x8c
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	4613      	mov	r3, r2
 801219c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	88fa      	ldrh	r2, [r7, #6]
 80121a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	88fa      	ldrh	r2, [r7, #6]
 80121b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2200      	movs	r2, #0
 80121b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	689b      	ldr	r3, [r3, #8]
 80121be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121c2:	d10e      	bne.n	80121e2 <UART_Start_Receive_IT+0x52>
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d105      	bne.n	80121d8 <UART_Start_Receive_IT+0x48>
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80121d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121d6:	e02d      	b.n	8012234 <UART_Start_Receive_IT+0xa4>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	22ff      	movs	r2, #255	; 0xff
 80121dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121e0:	e028      	b.n	8012234 <UART_Start_Receive_IT+0xa4>
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d10d      	bne.n	8012206 <UART_Start_Receive_IT+0x76>
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	691b      	ldr	r3, [r3, #16]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d104      	bne.n	80121fc <UART_Start_Receive_IT+0x6c>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	22ff      	movs	r2, #255	; 0xff
 80121f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121fa:	e01b      	b.n	8012234 <UART_Start_Receive_IT+0xa4>
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	227f      	movs	r2, #127	; 0x7f
 8012200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012204:	e016      	b.n	8012234 <UART_Start_Receive_IT+0xa4>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801220e:	d10d      	bne.n	801222c <UART_Start_Receive_IT+0x9c>
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	691b      	ldr	r3, [r3, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d104      	bne.n	8012222 <UART_Start_Receive_IT+0x92>
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	227f      	movs	r2, #127	; 0x7f
 801221c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012220:	e008      	b.n	8012234 <UART_Start_Receive_IT+0xa4>
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	223f      	movs	r2, #63	; 0x3f
 8012226:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801222a:	e003      	b.n	8012234 <UART_Start_Receive_IT+0xa4>
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2200      	movs	r2, #0
 8012230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2222      	movs	r2, #34	; 0x22
 8012240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	3308      	adds	r3, #8
 801224a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801224c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801224e:	e853 3f00 	ldrex	r3, [r3]
 8012252:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012256:	f043 0301 	orr.w	r3, r3, #1
 801225a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	3308      	adds	r3, #8
 8012264:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012268:	673a      	str	r2, [r7, #112]	; 0x70
 801226a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801226c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801226e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012270:	e841 2300 	strex	r3, r2, [r1]
 8012274:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8012276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1e3      	bne.n	8012244 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012284:	d14f      	bne.n	8012326 <UART_Start_Receive_IT+0x196>
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801228c:	88fa      	ldrh	r2, [r7, #6]
 801228e:	429a      	cmp	r2, r3
 8012290:	d349      	bcc.n	8012326 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	689b      	ldr	r3, [r3, #8]
 8012296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801229a:	d107      	bne.n	80122ac <UART_Start_Receive_IT+0x11c>
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	691b      	ldr	r3, [r3, #16]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d103      	bne.n	80122ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	4a47      	ldr	r2, [pc, #284]	; (80123c4 <UART_Start_Receive_IT+0x234>)
 80122a8:	675a      	str	r2, [r3, #116]	; 0x74
 80122aa:	e002      	b.n	80122b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	4a46      	ldr	r2, [pc, #280]	; (80123c8 <UART_Start_Receive_IT+0x238>)
 80122b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	691b      	ldr	r3, [r3, #16]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d01a      	beq.n	80122f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122c2:	e853 3f00 	ldrex	r3, [r3]
 80122c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80122ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	461a      	mov	r2, r3
 80122d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80122dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80122de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80122e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80122e4:	e841 2300 	strex	r3, r2, [r1]
 80122e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80122ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d1e4      	bne.n	80122ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	3308      	adds	r3, #8
 80122f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fa:	e853 3f00 	ldrex	r3, [r3]
 80122fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	3308      	adds	r3, #8
 801230e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012310:	64ba      	str	r2, [r7, #72]	; 0x48
 8012312:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012314:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012318:	e841 2300 	strex	r3, r2, [r1]
 801231c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1e5      	bne.n	80122f0 <UART_Start_Receive_IT+0x160>
 8012324:	e046      	b.n	80123b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	689b      	ldr	r3, [r3, #8]
 801232a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801232e:	d107      	bne.n	8012340 <UART_Start_Receive_IT+0x1b0>
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	691b      	ldr	r3, [r3, #16]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d103      	bne.n	8012340 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	4a24      	ldr	r2, [pc, #144]	; (80123cc <UART_Start_Receive_IT+0x23c>)
 801233c:	675a      	str	r2, [r3, #116]	; 0x74
 801233e:	e002      	b.n	8012346 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4a23      	ldr	r2, [pc, #140]	; (80123d0 <UART_Start_Receive_IT+0x240>)
 8012344:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	691b      	ldr	r3, [r3, #16]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d019      	beq.n	8012382 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	e853 3f00 	ldrex	r3, [r3]
 801235a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012362:	677b      	str	r3, [r7, #116]	; 0x74
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	461a      	mov	r2, r3
 801236a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801236c:	637b      	str	r3, [r7, #52]	; 0x34
 801236e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012374:	e841 2300 	strex	r3, r2, [r1]
 8012378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1e6      	bne.n	801234e <UART_Start_Receive_IT+0x1be>
 8012380:	e018      	b.n	80123b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	e853 3f00 	ldrex	r3, [r3]
 801238e:	613b      	str	r3, [r7, #16]
   return(result);
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	f043 0320 	orr.w	r3, r3, #32
 8012396:	67bb      	str	r3, [r7, #120]	; 0x78
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	461a      	mov	r2, r3
 801239e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123a0:	623b      	str	r3, [r7, #32]
 80123a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a4:	69f9      	ldr	r1, [r7, #28]
 80123a6:	6a3a      	ldr	r2, [r7, #32]
 80123a8:	e841 2300 	strex	r3, r2, [r1]
 80123ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d1e6      	bne.n	8012382 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	378c      	adds	r7, #140	; 0x8c
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr
 80123c2:	bf00      	nop
 80123c4:	08012da9 	.word	0x08012da9
 80123c8:	08012a49 	.word	0x08012a49
 80123cc:	08012891 	.word	0x08012891
 80123d0:	080126d9 	.word	0x080126d9

080123d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b08f      	sub	sp, #60	; 0x3c
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123e2:	6a3b      	ldr	r3, [r7, #32]
 80123e4:	e853 3f00 	ldrex	r3, [r3]
 80123e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80123f0:	637b      	str	r3, [r7, #52]	; 0x34
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	461a      	mov	r2, r3
 80123f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123fc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012402:	e841 2300 	strex	r3, r2, [r1]
 8012406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240a:	2b00      	cmp	r3, #0
 801240c:	d1e6      	bne.n	80123dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	3308      	adds	r3, #8
 8012414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	e853 3f00 	ldrex	r3, [r3]
 801241c:	60bb      	str	r3, [r7, #8]
   return(result);
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012424:	633b      	str	r3, [r7, #48]	; 0x30
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	3308      	adds	r3, #8
 801242c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801242e:	61ba      	str	r2, [r7, #24]
 8012430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012432:	6979      	ldr	r1, [r7, #20]
 8012434:	69ba      	ldr	r2, [r7, #24]
 8012436:	e841 2300 	strex	r3, r2, [r1]
 801243a:	613b      	str	r3, [r7, #16]
   return(result);
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1e5      	bne.n	801240e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2220      	movs	r2, #32
 8012446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801244a:	bf00      	nop
 801244c:	373c      	adds	r7, #60	; 0x3c
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
	...

08012458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012458:	b480      	push	{r7}
 801245a:	b095      	sub	sp, #84	; 0x54
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012468:	e853 3f00 	ldrex	r3, [r3]
 801246c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	461a      	mov	r2, r3
 801247c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801247e:	643b      	str	r3, [r7, #64]	; 0x40
 8012480:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012486:	e841 2300 	strex	r3, r2, [r1]
 801248a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248e:	2b00      	cmp	r3, #0
 8012490:	d1e6      	bne.n	8012460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3308      	adds	r3, #8
 8012498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801249a:	6a3b      	ldr	r3, [r7, #32]
 801249c:	e853 3f00 	ldrex	r3, [r3]
 80124a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80124a2:	69fa      	ldr	r2, [r7, #28]
 80124a4:	4b1e      	ldr	r3, [pc, #120]	; (8012520 <UART_EndRxTransfer+0xc8>)
 80124a6:	4013      	ands	r3, r2
 80124a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	3308      	adds	r3, #8
 80124b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80124b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124ba:	e841 2300 	strex	r3, r2, [r1]
 80124be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80124c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d1e5      	bne.n	8012492 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d118      	bne.n	8012500 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	e853 3f00 	ldrex	r3, [r3]
 80124da:	60bb      	str	r3, [r7, #8]
   return(result);
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	f023 0310 	bic.w	r3, r3, #16
 80124e2:	647b      	str	r3, [r7, #68]	; 0x44
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	461a      	mov	r2, r3
 80124ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124ec:	61bb      	str	r3, [r7, #24]
 80124ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f0:	6979      	ldr	r1, [r7, #20]
 80124f2:	69ba      	ldr	r2, [r7, #24]
 80124f4:	e841 2300 	strex	r3, r2, [r1]
 80124f8:	613b      	str	r3, [r7, #16]
   return(result);
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1e6      	bne.n	80124ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2220      	movs	r2, #32
 8012504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012514:	bf00      	nop
 8012516:	3754      	adds	r7, #84	; 0x54
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr
 8012520:	effffffe 	.word	0xeffffffe

08012524 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b090      	sub	sp, #64	; 0x40
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012530:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801253a:	d037      	beq.n	80125ac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801253c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801253e:	2200      	movs	r2, #0
 8012540:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	3308      	adds	r3, #8
 801254a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254e:	e853 3f00 	ldrex	r3, [r3]
 8012552:	623b      	str	r3, [r7, #32]
   return(result);
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801255a:	63bb      	str	r3, [r7, #56]	; 0x38
 801255c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	3308      	adds	r3, #8
 8012562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012564:	633a      	str	r2, [r7, #48]	; 0x30
 8012566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801256a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801256c:	e841 2300 	strex	r3, r2, [r1]
 8012570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1e5      	bne.n	8012544 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	e853 3f00 	ldrex	r3, [r3]
 8012584:	60fb      	str	r3, [r7, #12]
   return(result);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801258c:	637b      	str	r3, [r7, #52]	; 0x34
 801258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	461a      	mov	r2, r3
 8012594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012596:	61fb      	str	r3, [r7, #28]
 8012598:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801259a:	69b9      	ldr	r1, [r7, #24]
 801259c:	69fa      	ldr	r2, [r7, #28]
 801259e:	e841 2300 	strex	r3, r2, [r1]
 80125a2:	617b      	str	r3, [r7, #20]
   return(result);
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1e6      	bne.n	8012578 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80125aa:	e002      	b.n	80125b2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80125ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80125ae:	f7ef ff17 	bl	80023e0 <HAL_UART_TxCpltCallback>
}
 80125b2:	bf00      	nop
 80125b4:	3740      	adds	r7, #64	; 0x40
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}

080125ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b084      	sub	sp, #16
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7fe fe9f 	bl	801130c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80125ce:	bf00      	nop
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b086      	sub	sp, #24
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	689b      	ldr	r3, [r3, #8]
 80125fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125fe:	2b80      	cmp	r3, #128	; 0x80
 8012600:	d109      	bne.n	8012616 <UART_DMAError+0x40>
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	2b21      	cmp	r3, #33	; 0x21
 8012606:	d106      	bne.n	8012616 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2200      	movs	r2, #0
 801260c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012610:	6978      	ldr	r0, [r7, #20]
 8012612:	f7ff fedf 	bl	80123d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	689b      	ldr	r3, [r3, #8]
 801261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012620:	2b40      	cmp	r3, #64	; 0x40
 8012622:	d109      	bne.n	8012638 <UART_DMAError+0x62>
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2b22      	cmp	r3, #34	; 0x22
 8012628:	d106      	bne.n	8012638 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	2200      	movs	r2, #0
 801262e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012632:	6978      	ldr	r0, [r7, #20]
 8012634:	f7ff ff10 	bl	8012458 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801263e:	f043 0210 	orr.w	r2, r3, #16
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012648:	6978      	ldr	r0, [r7, #20]
 801264a:	f7fe fe69 	bl	8011320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801264e:	bf00      	nop
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012656:	b580      	push	{r7, lr}
 8012658:	b084      	sub	sp, #16
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012662:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2200      	movs	r2, #0
 8012668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2200      	movs	r2, #0
 8012670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f7fe fe53 	bl	8011320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801267a:	bf00      	nop
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b088      	sub	sp, #32
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	e853 3f00 	ldrex	r3, [r3]
 8012696:	60bb      	str	r3, [r7, #8]
   return(result);
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801269e:	61fb      	str	r3, [r7, #28]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	461a      	mov	r2, r3
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	61bb      	str	r3, [r7, #24]
 80126aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126ac:	6979      	ldr	r1, [r7, #20]
 80126ae:	69ba      	ldr	r2, [r7, #24]
 80126b0:	e841 2300 	strex	r3, r2, [r1]
 80126b4:	613b      	str	r3, [r7, #16]
   return(result);
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1e6      	bne.n	801268a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2220      	movs	r2, #32
 80126c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f7ef fe88 	bl	80023e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126d0:	bf00      	nop
 80126d2:	3720      	adds	r7, #32
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b09c      	sub	sp, #112	; 0x70
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126f0:	2b22      	cmp	r3, #34	; 0x22
 80126f2:	f040 80be 	bne.w	8012872 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012704:	b2d9      	uxtb	r1, r3
 8012706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801270a:	b2da      	uxtb	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012710:	400a      	ands	r2, r1
 8012712:	b2d2      	uxtb	r2, r2
 8012714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801271a:	1c5a      	adds	r2, r3, #1
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012726:	b29b      	uxth	r3, r3
 8012728:	3b01      	subs	r3, #1
 801272a:	b29a      	uxth	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012738:	b29b      	uxth	r3, r3
 801273a:	2b00      	cmp	r3, #0
 801273c:	f040 80a1 	bne.w	8012882 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012748:	e853 3f00 	ldrex	r3, [r3]
 801274c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012754:	66bb      	str	r3, [r7, #104]	; 0x68
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	461a      	mov	r2, r3
 801275c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801275e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012760:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012766:	e841 2300 	strex	r3, r2, [r1]
 801276a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801276c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801276e:	2b00      	cmp	r3, #0
 8012770:	d1e6      	bne.n	8012740 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	3308      	adds	r3, #8
 8012778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	e853 3f00 	ldrex	r3, [r3]
 8012780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012784:	f023 0301 	bic.w	r3, r3, #1
 8012788:	667b      	str	r3, [r7, #100]	; 0x64
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	3308      	adds	r3, #8
 8012790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012792:	647a      	str	r2, [r7, #68]	; 0x44
 8012794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801279a:	e841 2300 	strex	r3, r2, [r1]
 801279e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80127a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d1e5      	bne.n	8012772 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2220      	movs	r2, #32
 80127aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2200      	movs	r2, #0
 80127b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4a33      	ldr	r2, [pc, #204]	; (801288c <UART_RxISR_8BIT+0x1b4>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d01f      	beq.n	8012804 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d018      	beq.n	8012804 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127da:	e853 3f00 	ldrex	r3, [r3]
 80127de:	623b      	str	r3, [r7, #32]
   return(result);
 80127e0:	6a3b      	ldr	r3, [r7, #32]
 80127e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80127e6:	663b      	str	r3, [r7, #96]	; 0x60
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	461a      	mov	r2, r3
 80127ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127f0:	633b      	str	r3, [r7, #48]	; 0x30
 80127f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127f8:	e841 2300 	strex	r3, r2, [r1]
 80127fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80127fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1e6      	bne.n	80127d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012808:	2b01      	cmp	r3, #1
 801280a:	d12e      	bne.n	801286a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2200      	movs	r2, #0
 8012810:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	e853 3f00 	ldrex	r3, [r3]
 801281e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f023 0310 	bic.w	r3, r3, #16
 8012826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	461a      	mov	r2, r3
 801282e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012830:	61fb      	str	r3, [r7, #28]
 8012832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012834:	69b9      	ldr	r1, [r7, #24]
 8012836:	69fa      	ldr	r2, [r7, #28]
 8012838:	e841 2300 	strex	r3, r2, [r1]
 801283c:	617b      	str	r3, [r7, #20]
   return(result);
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d1e6      	bne.n	8012812 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	69db      	ldr	r3, [r3, #28]
 801284a:	f003 0310 	and.w	r3, r3, #16
 801284e:	2b10      	cmp	r3, #16
 8012850:	d103      	bne.n	801285a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2210      	movs	r2, #16
 8012858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7fe fd66 	bl	8011334 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012868:	e00b      	b.n	8012882 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f7ed ff04 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 8012870:	e007      	b.n	8012882 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	699a      	ldr	r2, [r3, #24]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	f042 0208 	orr.w	r2, r2, #8
 8012880:	619a      	str	r2, [r3, #24]
}
 8012882:	bf00      	nop
 8012884:	3770      	adds	r7, #112	; 0x70
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	58000c00 	.word	0x58000c00

08012890 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b09c      	sub	sp, #112	; 0x70
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801289e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128a8:	2b22      	cmp	r3, #34	; 0x22
 80128aa:	f040 80be 	bne.w	8012a2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80128be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80128c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80128c6:	4013      	ands	r3, r2
 80128c8:	b29a      	uxth	r2, r3
 80128ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80128cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128d2:	1c9a      	adds	r2, r3, #2
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128de:	b29b      	uxth	r3, r3
 80128e0:	3b01      	subs	r3, #1
 80128e2:	b29a      	uxth	r2, r3
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	f040 80a1 	bne.w	8012a3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012900:	e853 3f00 	ldrex	r3, [r3]
 8012904:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801290c:	667b      	str	r3, [r7, #100]	; 0x64
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	461a      	mov	r2, r3
 8012914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012916:	657b      	str	r3, [r7, #84]	; 0x54
 8012918:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801291a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801291c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801291e:	e841 2300 	strex	r3, r2, [r1]
 8012922:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012926:	2b00      	cmp	r3, #0
 8012928:	d1e6      	bne.n	80128f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	3308      	adds	r3, #8
 8012930:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012934:	e853 3f00 	ldrex	r3, [r3]
 8012938:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	f023 0301 	bic.w	r3, r3, #1
 8012940:	663b      	str	r3, [r7, #96]	; 0x60
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	3308      	adds	r3, #8
 8012948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801294a:	643a      	str	r2, [r7, #64]	; 0x40
 801294c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012952:	e841 2300 	strex	r3, r2, [r1]
 8012956:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1e5      	bne.n	801292a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2220      	movs	r2, #32
 8012962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2200      	movs	r2, #0
 801296a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2200      	movs	r2, #0
 8012970:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4a33      	ldr	r2, [pc, #204]	; (8012a44 <UART_RxISR_16BIT+0x1b4>)
 8012978:	4293      	cmp	r3, r2
 801297a:	d01f      	beq.n	80129bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012986:	2b00      	cmp	r3, #0
 8012988:	d018      	beq.n	80129bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012990:	6a3b      	ldr	r3, [r7, #32]
 8012992:	e853 3f00 	ldrex	r3, [r3]
 8012996:	61fb      	str	r3, [r7, #28]
   return(result);
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801299e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	461a      	mov	r2, r3
 80129a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129b0:	e841 2300 	strex	r3, r2, [r1]
 80129b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80129b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d1e6      	bne.n	801298a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	d12e      	bne.n	8012a22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2200      	movs	r2, #0
 80129c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	e853 3f00 	ldrex	r3, [r3]
 80129d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	f023 0310 	bic.w	r3, r3, #16
 80129de:	65bb      	str	r3, [r7, #88]	; 0x58
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	461a      	mov	r2, r3
 80129e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129e8:	61bb      	str	r3, [r7, #24]
 80129ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ec:	6979      	ldr	r1, [r7, #20]
 80129ee:	69ba      	ldr	r2, [r7, #24]
 80129f0:	e841 2300 	strex	r3, r2, [r1]
 80129f4:	613b      	str	r3, [r7, #16]
   return(result);
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d1e6      	bne.n	80129ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	69db      	ldr	r3, [r3, #28]
 8012a02:	f003 0310 	and.w	r3, r3, #16
 8012a06:	2b10      	cmp	r3, #16
 8012a08:	d103      	bne.n	8012a12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	2210      	movs	r2, #16
 8012a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a18:	4619      	mov	r1, r3
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f7fe fc8a 	bl	8011334 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a20:	e00b      	b.n	8012a3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7ed fe28 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 8012a28:	e007      	b.n	8012a3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	699a      	ldr	r2, [r3, #24]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f042 0208 	orr.w	r2, r2, #8
 8012a38:	619a      	str	r2, [r3, #24]
}
 8012a3a:	bf00      	nop
 8012a3c:	3770      	adds	r7, #112	; 0x70
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	58000c00 	.word	0x58000c00

08012a48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b0ac      	sub	sp, #176	; 0xb0
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	69db      	ldr	r3, [r3, #28]
 8012a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	689b      	ldr	r3, [r3, #8]
 8012a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a7e:	2b22      	cmp	r3, #34	; 0x22
 8012a80:	f040 8180 	bne.w	8012d84 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a8a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a8e:	e123      	b.n	8012cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a96:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012a9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012a9e:	b2d9      	uxtb	r1, r3
 8012aa0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012aa4:	b2da      	uxtb	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aaa:	400a      	ands	r2, r1
 8012aac:	b2d2      	uxtb	r2, r2
 8012aae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ab4:	1c5a      	adds	r2, r3, #1
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	69db      	ldr	r3, [r3, #28]
 8012ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ada:	f003 0307 	and.w	r3, r3, #7
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d053      	beq.n	8012b8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ae6:	f003 0301 	and.w	r3, r3, #1
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d011      	beq.n	8012b12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d00b      	beq.n	8012b12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2201      	movs	r2, #1
 8012b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b08:	f043 0201 	orr.w	r2, r3, #1
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b16:	f003 0302 	and.w	r3, r3, #2
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d011      	beq.n	8012b42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d00b      	beq.n	8012b42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2202      	movs	r2, #2
 8012b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b38:	f043 0204 	orr.w	r2, r3, #4
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b46:	f003 0304 	and.w	r3, r3, #4
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d011      	beq.n	8012b72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b52:	f003 0301 	and.w	r3, r3, #1
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d00b      	beq.n	8012b72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2204      	movs	r2, #4
 8012b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b68:	f043 0202 	orr.w	r2, r3, #2
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d006      	beq.n	8012b8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7fe fbcf 	bl	8011320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2200      	movs	r2, #0
 8012b86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f040 80a0 	bne.w	8012cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ba0:	e853 3f00 	ldrex	r3, [r3]
 8012ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	461a      	mov	r2, r3
 8012bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012bbc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bbe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012bc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012bc2:	e841 2300 	strex	r3, r2, [r1]
 8012bc6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d1e4      	bne.n	8012b98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	3308      	adds	r3, #8
 8012bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012bd8:	e853 3f00 	ldrex	r3, [r3]
 8012bdc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012be0:	4b6e      	ldr	r3, [pc, #440]	; (8012d9c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012be2:	4013      	ands	r3, r2
 8012be4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	3308      	adds	r3, #8
 8012bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012bf2:	66ba      	str	r2, [r7, #104]	; 0x68
 8012bf4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012bf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012bfa:	e841 2300 	strex	r3, r2, [r1]
 8012bfe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d1e3      	bne.n	8012bce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2220      	movs	r2, #32
 8012c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2200      	movs	r2, #0
 8012c12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4a60      	ldr	r2, [pc, #384]	; (8012da0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d021      	beq.n	8012c68 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d01a      	beq.n	8012c68 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c3a:	e853 3f00 	ldrex	r3, [r3]
 8012c3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	461a      	mov	r2, r3
 8012c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c54:	657b      	str	r3, [r7, #84]	; 0x54
 8012c56:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012c5c:	e841 2300 	strex	r3, r2, [r1]
 8012c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d1e4      	bne.n	8012c32 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d130      	bne.n	8012cd2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c7e:	e853 3f00 	ldrex	r3, [r3]
 8012c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c86:	f023 0310 	bic.w	r3, r3, #16
 8012c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	461a      	mov	r2, r3
 8012c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c98:	643b      	str	r3, [r7, #64]	; 0x40
 8012c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ca0:	e841 2300 	strex	r3, r2, [r1]
 8012ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d1e4      	bne.n	8012c76 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	69db      	ldr	r3, [r3, #28]
 8012cb2:	f003 0310 	and.w	r3, r3, #16
 8012cb6:	2b10      	cmp	r3, #16
 8012cb8:	d103      	bne.n	8012cc2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2210      	movs	r2, #16
 8012cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012cc8:	4619      	mov	r1, r3
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7fe fb32 	bl	8011334 <HAL_UARTEx_RxEventCallback>
 8012cd0:	e002      	b.n	8012cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7ed fcd0 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012cd8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d006      	beq.n	8012cee <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ce4:	f003 0320 	and.w	r3, r3, #32
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f47f aed1 	bne.w	8012a90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cf4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d049      	beq.n	8012d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d242      	bcs.n	8012d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	3308      	adds	r3, #8
 8012d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d16:	6a3b      	ldr	r3, [r7, #32]
 8012d18:	e853 3f00 	ldrex	r3, [r3]
 8012d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	3308      	adds	r3, #8
 8012d2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012d34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d3a:	e841 2300 	strex	r3, r2, [r1]
 8012d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d1e3      	bne.n	8012d0e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	4a16      	ldr	r2, [pc, #88]	; (8012da4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012d4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	e853 3f00 	ldrex	r3, [r3]
 8012d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	f043 0320 	orr.w	r3, r3, #32
 8012d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d6e:	61bb      	str	r3, [r7, #24]
 8012d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d72:	6979      	ldr	r1, [r7, #20]
 8012d74:	69ba      	ldr	r2, [r7, #24]
 8012d76:	e841 2300 	strex	r3, r2, [r1]
 8012d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d1e4      	bne.n	8012d4c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d82:	e007      	b.n	8012d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	699a      	ldr	r2, [r3, #24]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f042 0208 	orr.w	r2, r2, #8
 8012d92:	619a      	str	r2, [r3, #24]
}
 8012d94:	bf00      	nop
 8012d96:	37b0      	adds	r7, #176	; 0xb0
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	effffffe 	.word	0xeffffffe
 8012da0:	58000c00 	.word	0x58000c00
 8012da4:	080126d9 	.word	0x080126d9

08012da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b0ae      	sub	sp, #184	; 0xb8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012db6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	69db      	ldr	r3, [r3, #28]
 8012dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012dde:	2b22      	cmp	r3, #34	; 0x22
 8012de0:	f040 8184 	bne.w	80130ec <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012dea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012dee:	e127      	b.n	8013040 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012df6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012e02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012e06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012e0a:	4013      	ands	r3, r2
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e18:	1c9a      	adds	r2, r3, #2
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	3b01      	subs	r3, #1
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	69db      	ldr	r3, [r3, #28]
 8012e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e3e:	f003 0307 	and.w	r3, r3, #7
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d053      	beq.n	8012eee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e4a:	f003 0301 	and.w	r3, r3, #1
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d011      	beq.n	8012e76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00b      	beq.n	8012e76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2201      	movs	r2, #1
 8012e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e6c:	f043 0201 	orr.w	r2, r3, #1
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e7a:	f003 0302 	and.w	r3, r3, #2
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d011      	beq.n	8012ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e86:	f003 0301 	and.w	r3, r3, #1
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d00b      	beq.n	8012ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2202      	movs	r2, #2
 8012e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e9c:	f043 0204 	orr.w	r2, r3, #4
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012eaa:	f003 0304 	and.w	r3, r3, #4
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d011      	beq.n	8012ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012eb6:	f003 0301 	and.w	r3, r3, #1
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00b      	beq.n	8012ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2204      	movs	r2, #4
 8012ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ecc:	f043 0202 	orr.w	r2, r3, #2
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d006      	beq.n	8012eee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7fe fa1d 	bl	8011320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f040 80a2 	bne.w	8013040 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f04:	e853 3f00 	ldrex	r3, [r3]
 8012f08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	461a      	mov	r2, r3
 8012f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012f22:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f2a:	e841 2300 	strex	r3, r2, [r1]
 8012f2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1e2      	bne.n	8012efc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	3308      	adds	r3, #8
 8012f3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f40:	e853 3f00 	ldrex	r3, [r3]
 8012f44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012f46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f48:	4b6e      	ldr	r3, [pc, #440]	; (8013104 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012f4a:	4013      	ands	r3, r2
 8012f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	3308      	adds	r3, #8
 8012f56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012f60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012f62:	e841 2300 	strex	r3, r2, [r1]
 8012f66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d1e3      	bne.n	8012f36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2220      	movs	r2, #32
 8012f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4a60      	ldr	r2, [pc, #384]	; (8013108 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	d021      	beq.n	8012fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d01a      	beq.n	8012fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fa2:	e853 3f00 	ldrex	r3, [r3]
 8012fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8012fbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fc4:	e841 2300 	strex	r3, r2, [r1]
 8012fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d1e4      	bne.n	8012f9a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d130      	bne.n	801303a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	e853 3f00 	ldrex	r3, [r3]
 8012fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fee:	f023 0310 	bic.w	r3, r3, #16
 8012ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013000:	647b      	str	r3, [r7, #68]	; 0x44
 8013002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013008:	e841 2300 	strex	r3, r2, [r1]
 801300c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013010:	2b00      	cmp	r3, #0
 8013012:	d1e4      	bne.n	8012fde <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	69db      	ldr	r3, [r3, #28]
 801301a:	f003 0310 	and.w	r3, r3, #16
 801301e:	2b10      	cmp	r3, #16
 8013020:	d103      	bne.n	801302a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	2210      	movs	r2, #16
 8013028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013030:	4619      	mov	r1, r3
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f7fe f97e 	bl	8011334 <HAL_UARTEx_RxEventCallback>
 8013038:	e002      	b.n	8013040 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f7ed fb1c 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013040:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8013044:	2b00      	cmp	r3, #0
 8013046:	d006      	beq.n	8013056 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8013048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801304c:	f003 0320 	and.w	r3, r3, #32
 8013050:	2b00      	cmp	r3, #0
 8013052:	f47f aecd 	bne.w	8012df0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801305c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013060:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013064:	2b00      	cmp	r3, #0
 8013066:	d049      	beq.n	80130fc <UART_RxISR_16BIT_FIFOEN+0x354>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801306e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8013072:	429a      	cmp	r2, r3
 8013074:	d242      	bcs.n	80130fc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	3308      	adds	r3, #8
 801307c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013080:	e853 3f00 	ldrex	r3, [r3]
 8013084:	623b      	str	r3, [r7, #32]
   return(result);
 8013086:	6a3b      	ldr	r3, [r7, #32]
 8013088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	3308      	adds	r3, #8
 8013096:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801309a:	633a      	str	r2, [r7, #48]	; 0x30
 801309c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801309e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130a2:	e841 2300 	strex	r3, r2, [r1]
 80130a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80130a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1e3      	bne.n	8013076 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	4a16      	ldr	r2, [pc, #88]	; (801310c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80130b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	e853 3f00 	ldrex	r3, [r3]
 80130c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f043 0320 	orr.w	r3, r3, #32
 80130c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	461a      	mov	r2, r3
 80130d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80130d6:	61fb      	str	r3, [r7, #28]
 80130d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130da:	69b9      	ldr	r1, [r7, #24]
 80130dc:	69fa      	ldr	r2, [r7, #28]
 80130de:	e841 2300 	strex	r3, r2, [r1]
 80130e2:	617b      	str	r3, [r7, #20]
   return(result);
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1e4      	bne.n	80130b4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80130ea:	e007      	b.n	80130fc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	699a      	ldr	r2, [r3, #24]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f042 0208 	orr.w	r2, r2, #8
 80130fa:	619a      	str	r2, [r3, #24]
}
 80130fc:	bf00      	nop
 80130fe:	37b8      	adds	r7, #184	; 0xb8
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	effffffe 	.word	0xeffffffe
 8013108:	58000c00 	.word	0x58000c00
 801310c:	08012891 	.word	0x08012891

08013110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013118:	bf00      	nop
 801311a:	370c      	adds	r7, #12
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr

08013124 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801312c:	bf00      	nop
 801312e:	370c      	adds	r7, #12
 8013130:	46bd      	mov	sp, r7
 8013132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013136:	4770      	bx	lr

08013138 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013138:	b480      	push	{r7}
 801313a:	b083      	sub	sp, #12
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013140:	bf00      	nop
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 801314c:	b480      	push	{r7}
 801314e:	b089      	sub	sp, #36	; 0x24
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801315a:	2b01      	cmp	r3, #1
 801315c:	d101      	bne.n	8013162 <HAL_UARTEx_EnableStopMode+0x16>
 801315e:	2302      	movs	r3, #2
 8013160:	e021      	b.n	80131a6 <HAL_UARTEx_EnableStopMode+0x5a>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2201      	movs	r2, #1
 8013166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	e853 3f00 	ldrex	r3, [r3]
 8013176:	60bb      	str	r3, [r7, #8]
   return(result);
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	f043 0302 	orr.w	r3, r3, #2
 801317e:	61fb      	str	r3, [r7, #28]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	461a      	mov	r2, r3
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	61bb      	str	r3, [r7, #24]
 801318a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801318c:	6979      	ldr	r1, [r7, #20]
 801318e:	69ba      	ldr	r2, [r7, #24]
 8013190:	e841 2300 	strex	r3, r2, [r1]
 8013194:	613b      	str	r3, [r7, #16]
   return(result);
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1e6      	bne.n	801316a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2200      	movs	r2, #0
 80131a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3724      	adds	r7, #36	; 0x24
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr

080131b2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d101      	bne.n	80131c8 <HAL_UARTEx_EnableFifoMode+0x16>
 80131c4:	2302      	movs	r3, #2
 80131c6:	e02b      	b.n	8013220 <HAL_UARTEx_EnableFifoMode+0x6e>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2201      	movs	r2, #1
 80131cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2224      	movs	r2, #36	; 0x24
 80131d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f022 0201 	bic.w	r2, r2, #1
 80131ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80131fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 f8c3 	bl	8013394 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2220      	movs	r2, #32
 8013212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801321e:	2300      	movs	r3, #0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013228:	b480      	push	{r7}
 801322a:	b085      	sub	sp, #20
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013236:	2b01      	cmp	r3, #1
 8013238:	d101      	bne.n	801323e <HAL_UARTEx_DisableFifoMode+0x16>
 801323a:	2302      	movs	r3, #2
 801323c:	e027      	b.n	801328e <HAL_UARTEx_DisableFifoMode+0x66>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2201      	movs	r2, #1
 8013242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2224      	movs	r2, #36	; 0x24
 801324a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f022 0201 	bic.w	r2, r2, #1
 8013264:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801326c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2200      	movs	r2, #0
 8013272:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2220      	movs	r2, #32
 8013280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2200      	movs	r2, #0
 8013288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3714      	adds	r7, #20
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b084      	sub	sp, #16
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
 80132a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d101      	bne.n	80132b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80132ae:	2302      	movs	r3, #2
 80132b0:	e02d      	b.n	801330e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2201      	movs	r2, #1
 80132b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2224      	movs	r2, #36	; 0x24
 80132be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f022 0201 	bic.w	r2, r2, #1
 80132d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	683a      	ldr	r2, [r7, #0]
 80132ea:	430a      	orrs	r2, r1
 80132ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f000 f850 	bl	8013394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2220      	movs	r2, #32
 8013300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2200      	movs	r2, #0
 8013308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	b084      	sub	sp, #16
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
 801331e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013326:	2b01      	cmp	r3, #1
 8013328:	d101      	bne.n	801332e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801332a:	2302      	movs	r3, #2
 801332c:	e02d      	b.n	801338a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2201      	movs	r2, #1
 8013332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2224      	movs	r2, #36	; 0x24
 801333a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	681a      	ldr	r2, [r3, #0]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	f022 0201 	bic.w	r2, r2, #1
 8013354:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	689b      	ldr	r3, [r3, #8]
 801335c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	683a      	ldr	r2, [r7, #0]
 8013366:	430a      	orrs	r2, r1
 8013368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f000 f812 	bl	8013394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	68fa      	ldr	r2, [r7, #12]
 8013376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2220      	movs	r2, #32
 801337c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2200      	movs	r2, #0
 8013384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013388:	2300      	movs	r3, #0
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
	...

08013394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013394:	b480      	push	{r7}
 8013396:	b085      	sub	sp, #20
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d108      	bne.n	80133b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2201      	movs	r2, #1
 80133a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2201      	movs	r2, #1
 80133b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80133b4:	e031      	b.n	801341a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80133b6:	2310      	movs	r3, #16
 80133b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80133ba:	2310      	movs	r3, #16
 80133bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	0e5b      	lsrs	r3, r3, #25
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	f003 0307 	and.w	r3, r3, #7
 80133cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	0f5b      	lsrs	r3, r3, #29
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	f003 0307 	and.w	r3, r3, #7
 80133dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80133de:	7bbb      	ldrb	r3, [r7, #14]
 80133e0:	7b3a      	ldrb	r2, [r7, #12]
 80133e2:	4911      	ldr	r1, [pc, #68]	; (8013428 <UARTEx_SetNbDataToProcess+0x94>)
 80133e4:	5c8a      	ldrb	r2, [r1, r2]
 80133e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80133ea:	7b3a      	ldrb	r2, [r7, #12]
 80133ec:	490f      	ldr	r1, [pc, #60]	; (801342c <UARTEx_SetNbDataToProcess+0x98>)
 80133ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80133f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80133fc:	7bfb      	ldrb	r3, [r7, #15]
 80133fe:	7b7a      	ldrb	r2, [r7, #13]
 8013400:	4909      	ldr	r1, [pc, #36]	; (8013428 <UARTEx_SetNbDataToProcess+0x94>)
 8013402:	5c8a      	ldrb	r2, [r1, r2]
 8013404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013408:	7b7a      	ldrb	r2, [r7, #13]
 801340a:	4908      	ldr	r1, [pc, #32]	; (801342c <UARTEx_SetNbDataToProcess+0x98>)
 801340c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801340e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013412:	b29a      	uxth	r2, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801341a:	bf00      	nop
 801341c:	3714      	adds	r7, #20
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop
 8013428:	08017ecc 	.word	0x08017ecc
 801342c:	08017ed4 	.word	0x08017ed4

08013430 <__NVIC_SetPriority>:
{
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
 8013436:	4603      	mov	r3, r0
 8013438:	6039      	str	r1, [r7, #0]
 801343a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801343c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013440:	2b00      	cmp	r3, #0
 8013442:	db0a      	blt.n	801345a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	b2da      	uxtb	r2, r3
 8013448:	490c      	ldr	r1, [pc, #48]	; (801347c <__NVIC_SetPriority+0x4c>)
 801344a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801344e:	0112      	lsls	r2, r2, #4
 8013450:	b2d2      	uxtb	r2, r2
 8013452:	440b      	add	r3, r1
 8013454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013458:	e00a      	b.n	8013470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	b2da      	uxtb	r2, r3
 801345e:	4908      	ldr	r1, [pc, #32]	; (8013480 <__NVIC_SetPriority+0x50>)
 8013460:	88fb      	ldrh	r3, [r7, #6]
 8013462:	f003 030f 	and.w	r3, r3, #15
 8013466:	3b04      	subs	r3, #4
 8013468:	0112      	lsls	r2, r2, #4
 801346a:	b2d2      	uxtb	r2, r2
 801346c:	440b      	add	r3, r1
 801346e:	761a      	strb	r2, [r3, #24]
}
 8013470:	bf00      	nop
 8013472:	370c      	adds	r7, #12
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr
 801347c:	e000e100 	.word	0xe000e100
 8013480:	e000ed00 	.word	0xe000ed00

08013484 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013484:	b580      	push	{r7, lr}
 8013486:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013488:	4b05      	ldr	r3, [pc, #20]	; (80134a0 <SysTick_Handler+0x1c>)
 801348a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801348c:	f002 fcee 	bl	8015e6c <xTaskGetSchedulerState>
 8013490:	4603      	mov	r3, r0
 8013492:	2b01      	cmp	r3, #1
 8013494:	d001      	beq.n	801349a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013496:	f003 fb0f 	bl	8016ab8 <xPortSysTickHandler>
  }
}
 801349a:	bf00      	nop
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	e000e010 	.word	0xe000e010

080134a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80134a4:	b580      	push	{r7, lr}
 80134a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80134a8:	2100      	movs	r1, #0
 80134aa:	f06f 0004 	mvn.w	r0, #4
 80134ae:	f7ff ffbf 	bl	8013430 <__NVIC_SetPriority>
#endif
}
 80134b2:	bf00      	nop
 80134b4:	bd80      	pop	{r7, pc}
	...

080134b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80134b8:	b480      	push	{r7}
 80134ba:	b083      	sub	sp, #12
 80134bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134be:	f3ef 8305 	mrs	r3, IPSR
 80134c2:	603b      	str	r3, [r7, #0]
  return(result);
 80134c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d003      	beq.n	80134d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80134ca:	f06f 0305 	mvn.w	r3, #5
 80134ce:	607b      	str	r3, [r7, #4]
 80134d0:	e00c      	b.n	80134ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80134d2:	4b0a      	ldr	r3, [pc, #40]	; (80134fc <osKernelInitialize+0x44>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d105      	bne.n	80134e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80134da:	4b08      	ldr	r3, [pc, #32]	; (80134fc <osKernelInitialize+0x44>)
 80134dc:	2201      	movs	r2, #1
 80134de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80134e0:	2300      	movs	r3, #0
 80134e2:	607b      	str	r3, [r7, #4]
 80134e4:	e002      	b.n	80134ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80134e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80134ec:	687b      	ldr	r3, [r7, #4]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	370c      	adds	r7, #12
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr
 80134fa:	bf00      	nop
 80134fc:	24001168 	.word	0x24001168

08013500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013506:	f3ef 8305 	mrs	r3, IPSR
 801350a:	603b      	str	r3, [r7, #0]
  return(result);
 801350c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801350e:	2b00      	cmp	r3, #0
 8013510:	d003      	beq.n	801351a <osKernelStart+0x1a>
    stat = osErrorISR;
 8013512:	f06f 0305 	mvn.w	r3, #5
 8013516:	607b      	str	r3, [r7, #4]
 8013518:	e010      	b.n	801353c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801351a:	4b0b      	ldr	r3, [pc, #44]	; (8013548 <osKernelStart+0x48>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b01      	cmp	r3, #1
 8013520:	d109      	bne.n	8013536 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013522:	f7ff ffbf 	bl	80134a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013526:	4b08      	ldr	r3, [pc, #32]	; (8013548 <osKernelStart+0x48>)
 8013528:	2202      	movs	r2, #2
 801352a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801352c:	f001 ffb0 	bl	8015490 <vTaskStartScheduler>
      stat = osOK;
 8013530:	2300      	movs	r3, #0
 8013532:	607b      	str	r3, [r7, #4]
 8013534:	e002      	b.n	801353c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801353a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801353c:	687b      	ldr	r3, [r7, #4]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	24001168 	.word	0x24001168

0801354c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801354c:	b580      	push	{r7, lr}
 801354e:	b08e      	sub	sp, #56	; 0x38
 8013550:	af04      	add	r7, sp, #16
 8013552:	60f8      	str	r0, [r7, #12]
 8013554:	60b9      	str	r1, [r7, #8]
 8013556:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013558:	2300      	movs	r3, #0
 801355a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801355c:	f3ef 8305 	mrs	r3, IPSR
 8013560:	617b      	str	r3, [r7, #20]
  return(result);
 8013562:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013564:	2b00      	cmp	r3, #0
 8013566:	d17e      	bne.n	8013666 <osThreadNew+0x11a>
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d07b      	beq.n	8013666 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801356e:	2380      	movs	r3, #128	; 0x80
 8013570:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013572:	2318      	movs	r3, #24
 8013574:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013576:	2300      	movs	r3, #0
 8013578:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801357a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801357e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d045      	beq.n	8013612 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d002      	beq.n	8013594 <osThreadNew+0x48>
        name = attr->name;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	699b      	ldr	r3, [r3, #24]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d002      	beq.n	80135a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d008      	beq.n	80135ba <osThreadNew+0x6e>
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	2b38      	cmp	r3, #56	; 0x38
 80135ac:	d805      	bhi.n	80135ba <osThreadNew+0x6e>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	f003 0301 	and.w	r3, r3, #1
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d001      	beq.n	80135be <osThreadNew+0x72>
        return (NULL);
 80135ba:	2300      	movs	r3, #0
 80135bc:	e054      	b.n	8013668 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	695b      	ldr	r3, [r3, #20]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d003      	beq.n	80135ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	695b      	ldr	r3, [r3, #20]
 80135ca:	089b      	lsrs	r3, r3, #2
 80135cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d00e      	beq.n	80135f4 <osThreadNew+0xa8>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	2b5b      	cmp	r3, #91	; 0x5b
 80135dc:	d90a      	bls.n	80135f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d006      	beq.n	80135f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	695b      	ldr	r3, [r3, #20]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d002      	beq.n	80135f4 <osThreadNew+0xa8>
        mem = 1;
 80135ee:	2301      	movs	r3, #1
 80135f0:	61bb      	str	r3, [r7, #24]
 80135f2:	e010      	b.n	8013616 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	689b      	ldr	r3, [r3, #8]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d10c      	bne.n	8013616 <osThreadNew+0xca>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d108      	bne.n	8013616 <osThreadNew+0xca>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d104      	bne.n	8013616 <osThreadNew+0xca>
          mem = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	61bb      	str	r3, [r7, #24]
 8013610:	e001      	b.n	8013616 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013612:	2300      	movs	r3, #0
 8013614:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	2b01      	cmp	r3, #1
 801361a:	d110      	bne.n	801363e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013624:	9202      	str	r2, [sp, #8]
 8013626:	9301      	str	r3, [sp, #4]
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	6a3a      	ldr	r2, [r7, #32]
 8013630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	f001 fc3c 	bl	8014eb0 <xTaskCreateStatic>
 8013638:	4603      	mov	r3, r0
 801363a:	613b      	str	r3, [r7, #16]
 801363c:	e013      	b.n	8013666 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801363e:	69bb      	ldr	r3, [r7, #24]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d110      	bne.n	8013666 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013644:	6a3b      	ldr	r3, [r7, #32]
 8013646:	b29a      	uxth	r2, r3
 8013648:	f107 0310 	add.w	r3, r7, #16
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	f001 fc87 	bl	8014f6a <xTaskCreate>
 801365c:	4603      	mov	r3, r0
 801365e:	2b01      	cmp	r3, #1
 8013660:	d001      	beq.n	8013666 <osThreadNew+0x11a>
            hTask = NULL;
 8013662:	2300      	movs	r3, #0
 8013664:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013666:	693b      	ldr	r3, [r7, #16]
}
 8013668:	4618      	mov	r0, r3
 801366a:	3728      	adds	r7, #40	; 0x28
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013676:	f3ef 8305 	mrs	r3, IPSR
 801367a:	603b      	str	r3, [r7, #0]
  return(result);
 801367c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801367e:	2b00      	cmp	r3, #0
 8013680:	d003      	beq.n	801368a <osThreadYield+0x1a>
    stat = osErrorISR;
 8013682:	f06f 0305 	mvn.w	r3, #5
 8013686:	607b      	str	r3, [r7, #4]
 8013688:	e009      	b.n	801369e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801368a:	2300      	movs	r3, #0
 801368c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801368e:	4b07      	ldr	r3, [pc, #28]	; (80136ac <osThreadYield+0x3c>)
 8013690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013694:	601a      	str	r2, [r3, #0]
 8013696:	f3bf 8f4f 	dsb	sy
 801369a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801369e:	687b      	ldr	r3, [r7, #4]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	370c      	adds	r7, #12
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr
 80136ac:	e000ed04 	.word	0xe000ed04

080136b0 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b086      	sub	sp, #24
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136bc:	f3ef 8305 	mrs	r3, IPSR
 80136c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80136c2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d003      	beq.n	80136d0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80136c8:	f06f 0305 	mvn.w	r3, #5
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	e00b      	b.n	80136e8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d103      	bne.n	80136de <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80136d6:	f06f 0303 	mvn.w	r3, #3
 80136da:	617b      	str	r3, [r7, #20]
 80136dc:	e004      	b.n	80136e8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80136de:	2300      	movs	r3, #0
 80136e0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80136e2:	6938      	ldr	r0, [r7, #16]
 80136e4:	f001 fdba 	bl	801525c <vTaskSuspend>
  }

  return (stat);
 80136e8:	697b      	ldr	r3, [r7, #20]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3718      	adds	r7, #24
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b084      	sub	sp, #16
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136fa:	f3ef 8305 	mrs	r3, IPSR
 80136fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8013700:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013702:	2b00      	cmp	r3, #0
 8013704:	d003      	beq.n	801370e <osDelay+0x1c>
    stat = osErrorISR;
 8013706:	f06f 0305 	mvn.w	r3, #5
 801370a:	60fb      	str	r3, [r7, #12]
 801370c:	e007      	b.n	801371e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801370e:	2300      	movs	r3, #0
 8013710:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <osDelay+0x2c>
      vTaskDelay(ticks);
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f001 fd6b 	bl	80151f4 <vTaskDelay>
    }
  }

  return (stat);
 801371e:	68fb      	ldr	r3, [r7, #12]
}
 8013720:	4618      	mov	r0, r3
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013730:	2300      	movs	r3, #0
 8013732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013734:	f3ef 8305 	mrs	r3, IPSR
 8013738:	60fb      	str	r3, [r7, #12]
  return(result);
 801373a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801373c:	2b00      	cmp	r3, #0
 801373e:	d12d      	bne.n	801379c <osEventFlagsNew+0x74>
    mem = -1;
 8013740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013744:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d015      	beq.n	8013778 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	689b      	ldr	r3, [r3, #8]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d006      	beq.n	8013762 <osEventFlagsNew+0x3a>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	2b1f      	cmp	r3, #31
 801375a:	d902      	bls.n	8013762 <osEventFlagsNew+0x3a>
        mem = 1;
 801375c:	2301      	movs	r3, #1
 801375e:	613b      	str	r3, [r7, #16]
 8013760:	e00c      	b.n	801377c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	689b      	ldr	r3, [r3, #8]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d108      	bne.n	801377c <osEventFlagsNew+0x54>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	68db      	ldr	r3, [r3, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d104      	bne.n	801377c <osEventFlagsNew+0x54>
          mem = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	613b      	str	r3, [r7, #16]
 8013776:	e001      	b.n	801377c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	2b01      	cmp	r3, #1
 8013780:	d106      	bne.n	8013790 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	4618      	mov	r0, r3
 8013788:	f000 fa90 	bl	8013cac <xEventGroupCreateStatic>
 801378c:	6178      	str	r0, [r7, #20]
 801378e:	e005      	b.n	801379c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d102      	bne.n	801379c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013796:	f000 fac0 	bl	8013d1a <xEventGroupCreate>
 801379a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801379c:	697b      	ldr	r3, [r7, #20]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3718      	adds	r7, #24
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
	...

080137a8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d004      	beq.n	80137c6 <osEventFlagsSet+0x1e>
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d003      	beq.n	80137ce <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80137c6:	f06f 0303 	mvn.w	r3, #3
 80137ca:	617b      	str	r3, [r7, #20]
 80137cc:	e028      	b.n	8013820 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137ce:	f3ef 8305 	mrs	r3, IPSR
 80137d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80137d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d01d      	beq.n	8013816 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80137da:	2300      	movs	r3, #0
 80137dc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80137de:	f107 0308 	add.w	r3, r7, #8
 80137e2:	461a      	mov	r2, r3
 80137e4:	6839      	ldr	r1, [r7, #0]
 80137e6:	6938      	ldr	r0, [r7, #16]
 80137e8:	f000 fcb8 	bl	801415c <xEventGroupSetBitsFromISR>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d103      	bne.n	80137fa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80137f2:	f06f 0302 	mvn.w	r3, #2
 80137f6:	617b      	str	r3, [r7, #20]
 80137f8:	e012      	b.n	8013820 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00d      	beq.n	8013820 <osEventFlagsSet+0x78>
 8013804:	4b09      	ldr	r3, [pc, #36]	; (801382c <osEventFlagsSet+0x84>)
 8013806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801380a:	601a      	str	r2, [r3, #0]
 801380c:	f3bf 8f4f 	dsb	sy
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	e004      	b.n	8013820 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013816:	6839      	ldr	r1, [r7, #0]
 8013818:	6938      	ldr	r0, [r7, #16]
 801381a:	f000 fbd7 	bl	8013fcc <xEventGroupSetBits>
 801381e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013820:	697b      	ldr	r3, [r7, #20]
}
 8013822:	4618      	mov	r0, r3
 8013824:	3718      	adds	r7, #24
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	e000ed04 	.word	0xe000ed04

08013830 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d004      	beq.n	801384e <osEventFlagsClear+0x1e>
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801384a:	2b00      	cmp	r3, #0
 801384c:	d003      	beq.n	8013856 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 801384e:	f06f 0303 	mvn.w	r3, #3
 8013852:	617b      	str	r3, [r7, #20]
 8013854:	e019      	b.n	801388a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013856:	f3ef 8305 	mrs	r3, IPSR
 801385a:	60fb      	str	r3, [r7, #12]
  return(result);
 801385c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00e      	beq.n	8013880 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013862:	6938      	ldr	r0, [r7, #16]
 8013864:	f000 fb8e 	bl	8013f84 <xEventGroupGetBitsFromISR>
 8013868:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801386a:	6839      	ldr	r1, [r7, #0]
 801386c:	6938      	ldr	r0, [r7, #16]
 801386e:	f000 fb75 	bl	8013f5c <xEventGroupClearBitsFromISR>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d108      	bne.n	801388a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8013878:	f06f 0302 	mvn.w	r3, #2
 801387c:	617b      	str	r3, [r7, #20]
 801387e:	e004      	b.n	801388a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013880:	6839      	ldr	r1, [r7, #0]
 8013882:	6938      	ldr	r0, [r7, #16]
 8013884:	f000 fb32 	bl	8013eec <xEventGroupClearBits>
 8013888:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801388a:	697b      	ldr	r3, [r7, #20]
}
 801388c:	4618      	mov	r0, r3
 801388e:	3718      	adds	r7, #24
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013894:	b580      	push	{r7, lr}
 8013896:	b086      	sub	sp, #24
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d102      	bne.n	80138ac <osEventFlagsGet+0x18>
    rflags = 0U;
 80138a6:	2300      	movs	r3, #0
 80138a8:	617b      	str	r3, [r7, #20]
 80138aa:	e00f      	b.n	80138cc <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138ac:	f3ef 8305 	mrs	r3, IPSR
 80138b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80138b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d004      	beq.n	80138c2 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80138b8:	6938      	ldr	r0, [r7, #16]
 80138ba:	f000 fb63 	bl	8013f84 <xEventGroupGetBitsFromISR>
 80138be:	6178      	str	r0, [r7, #20]
 80138c0:	e004      	b.n	80138cc <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80138c2:	2100      	movs	r1, #0
 80138c4:	6938      	ldr	r0, [r7, #16]
 80138c6:	f000 fb11 	bl	8013eec <xEventGroupClearBits>
 80138ca:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80138cc:	697b      	ldr	r3, [r7, #20]
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3718      	adds	r7, #24
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b08c      	sub	sp, #48	; 0x30
 80138da:	af02      	add	r7, sp, #8
 80138dc:	60f8      	str	r0, [r7, #12]
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	607a      	str	r2, [r7, #4]
 80138e2:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d004      	beq.n	80138f8 <osEventFlagsWait+0x22>
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d003      	beq.n	8013900 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80138f8:	f06f 0303 	mvn.w	r3, #3
 80138fc:	61fb      	str	r3, [r7, #28]
 80138fe:	e04b      	b.n	8013998 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013900:	f3ef 8305 	mrs	r3, IPSR
 8013904:	617b      	str	r3, [r7, #20]
  return(result);
 8013906:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013908:	2b00      	cmp	r3, #0
 801390a:	d003      	beq.n	8013914 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801390c:	f06f 0305 	mvn.w	r3, #5
 8013910:	61fb      	str	r3, [r7, #28]
 8013912:	e041      	b.n	8013998 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f003 0301 	and.w	r3, r3, #1
 801391a:	2b00      	cmp	r3, #0
 801391c:	d002      	beq.n	8013924 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801391e:	2301      	movs	r3, #1
 8013920:	627b      	str	r3, [r7, #36]	; 0x24
 8013922:	e001      	b.n	8013928 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013924:	2300      	movs	r3, #0
 8013926:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f003 0302 	and.w	r3, r3, #2
 801392e:	2b00      	cmp	r3, #0
 8013930:	d002      	beq.n	8013938 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013932:	2300      	movs	r3, #0
 8013934:	623b      	str	r3, [r7, #32]
 8013936:	e001      	b.n	801393c <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013938:	2301      	movs	r3, #1
 801393a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013942:	6a3a      	ldr	r2, [r7, #32]
 8013944:	68b9      	ldr	r1, [r7, #8]
 8013946:	69b8      	ldr	r0, [r7, #24]
 8013948:	f000 fa02 	bl	8013d50 <xEventGroupWaitBits>
 801394c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f003 0301 	and.w	r3, r3, #1
 8013954:	2b00      	cmp	r3, #0
 8013956:	d010      	beq.n	801397a <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013958:	68ba      	ldr	r2, [r7, #8]
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	4013      	ands	r3, r2
 801395e:	68ba      	ldr	r2, [r7, #8]
 8013960:	429a      	cmp	r2, r3
 8013962:	d019      	beq.n	8013998 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d003      	beq.n	8013972 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801396a:	f06f 0301 	mvn.w	r3, #1
 801396e:	61fb      	str	r3, [r7, #28]
 8013970:	e012      	b.n	8013998 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013972:	f06f 0302 	mvn.w	r3, #2
 8013976:	61fb      	str	r3, [r7, #28]
 8013978:	e00e      	b.n	8013998 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801397a:	68ba      	ldr	r2, [r7, #8]
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	4013      	ands	r3, r2
 8013980:	2b00      	cmp	r3, #0
 8013982:	d109      	bne.n	8013998 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d003      	beq.n	8013992 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801398a:	f06f 0301 	mvn.w	r3, #1
 801398e:	61fb      	str	r3, [r7, #28]
 8013990:	e002      	b.n	8013998 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013992:	f06f 0302 	mvn.w	r3, #2
 8013996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013998:	69fb      	ldr	r3, [r7, #28]
}
 801399a:	4618      	mov	r0, r3
 801399c:	3728      	adds	r7, #40	; 0x28
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}

080139a2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80139a2:	b580      	push	{r7, lr}
 80139a4:	b08a      	sub	sp, #40	; 0x28
 80139a6:	af02      	add	r7, sp, #8
 80139a8:	60f8      	str	r0, [r7, #12]
 80139aa:	60b9      	str	r1, [r7, #8]
 80139ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80139ae:	2300      	movs	r3, #0
 80139b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139b2:	f3ef 8305 	mrs	r3, IPSR
 80139b6:	613b      	str	r3, [r7, #16]
  return(result);
 80139b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d15f      	bne.n	8013a7e <osMessageQueueNew+0xdc>
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d05c      	beq.n	8013a7e <osMessageQueueNew+0xdc>
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d059      	beq.n	8013a7e <osMessageQueueNew+0xdc>
    mem = -1;
 80139ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d029      	beq.n	8013a2a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	689b      	ldr	r3, [r3, #8]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d012      	beq.n	8013a04 <osMessageQueueNew+0x62>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	2b4f      	cmp	r3, #79	; 0x4f
 80139e4:	d90e      	bls.n	8013a04 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00a      	beq.n	8013a04 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	695a      	ldr	r2, [r3, #20]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	68b9      	ldr	r1, [r7, #8]
 80139f6:	fb01 f303 	mul.w	r3, r1, r3
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d302      	bcc.n	8013a04 <osMessageQueueNew+0x62>
        mem = 1;
 80139fe:	2301      	movs	r3, #1
 8013a00:	61bb      	str	r3, [r7, #24]
 8013a02:	e014      	b.n	8013a2e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	689b      	ldr	r3, [r3, #8]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d110      	bne.n	8013a2e <osMessageQueueNew+0x8c>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	68db      	ldr	r3, [r3, #12]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d10c      	bne.n	8013a2e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d108      	bne.n	8013a2e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	695b      	ldr	r3, [r3, #20]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d104      	bne.n	8013a2e <osMessageQueueNew+0x8c>
          mem = 0;
 8013a24:	2300      	movs	r3, #0
 8013a26:	61bb      	str	r3, [r7, #24]
 8013a28:	e001      	b.n	8013a2e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d10b      	bne.n	8013a4c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	691a      	ldr	r2, [r3, #16]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	689b      	ldr	r3, [r3, #8]
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	9100      	str	r1, [sp, #0]
 8013a40:	68b9      	ldr	r1, [r7, #8]
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f000 fcba 	bl	80143bc <xQueueGenericCreateStatic>
 8013a48:	61f8      	str	r0, [r7, #28]
 8013a4a:	e008      	b.n	8013a5e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d105      	bne.n	8013a5e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013a52:	2200      	movs	r2, #0
 8013a54:	68b9      	ldr	r1, [r7, #8]
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	f000 fd28 	bl	80144ac <xQueueGenericCreate>
 8013a5c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d00c      	beq.n	8013a7e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d003      	beq.n	8013a72 <osMessageQueueNew+0xd0>
        name = attr->name;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	617b      	str	r3, [r7, #20]
 8013a70:	e001      	b.n	8013a76 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013a76:	6979      	ldr	r1, [r7, #20]
 8013a78:	69f8      	ldr	r0, [r7, #28]
 8013a7a:	f001 f9bb 	bl	8014df4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013a7e:	69fb      	ldr	r3, [r7, #28]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3720      	adds	r7, #32
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b088      	sub	sp, #32
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	60b9      	str	r1, [r7, #8]
 8013a92:	603b      	str	r3, [r7, #0]
 8013a94:	4613      	mov	r3, r2
 8013a96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aa0:	f3ef 8305 	mrs	r3, IPSR
 8013aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8013aa6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d028      	beq.n	8013afe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d005      	beq.n	8013abe <osMessageQueuePut+0x36>
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d002      	beq.n	8013abe <osMessageQueuePut+0x36>
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d003      	beq.n	8013ac6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013abe:	f06f 0303 	mvn.w	r3, #3
 8013ac2:	61fb      	str	r3, [r7, #28]
 8013ac4:	e038      	b.n	8013b38 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013aca:	f107 0210 	add.w	r2, r7, #16
 8013ace:	2300      	movs	r3, #0
 8013ad0:	68b9      	ldr	r1, [r7, #8]
 8013ad2:	69b8      	ldr	r0, [r7, #24]
 8013ad4:	f000 fe46 	bl	8014764 <xQueueGenericSendFromISR>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d003      	beq.n	8013ae6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8013ade:	f06f 0302 	mvn.w	r3, #2
 8013ae2:	61fb      	str	r3, [r7, #28]
 8013ae4:	e028      	b.n	8013b38 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d025      	beq.n	8013b38 <osMessageQueuePut+0xb0>
 8013aec:	4b15      	ldr	r3, [pc, #84]	; (8013b44 <osMessageQueuePut+0xbc>)
 8013aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013af2:	601a      	str	r2, [r3, #0]
 8013af4:	f3bf 8f4f 	dsb	sy
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	e01c      	b.n	8013b38 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <osMessageQueuePut+0x82>
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d103      	bne.n	8013b12 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8013b0a:	f06f 0303 	mvn.w	r3, #3
 8013b0e:	61fb      	str	r3, [r7, #28]
 8013b10:	e012      	b.n	8013b38 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013b12:	2300      	movs	r3, #0
 8013b14:	683a      	ldr	r2, [r7, #0]
 8013b16:	68b9      	ldr	r1, [r7, #8]
 8013b18:	69b8      	ldr	r0, [r7, #24]
 8013b1a:	f000 fd25 	bl	8014568 <xQueueGenericSend>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b01      	cmp	r3, #1
 8013b22:	d009      	beq.n	8013b38 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d003      	beq.n	8013b32 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013b2a:	f06f 0301 	mvn.w	r3, #1
 8013b2e:	61fb      	str	r3, [r7, #28]
 8013b30:	e002      	b.n	8013b38 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013b32:	f06f 0302 	mvn.w	r3, #2
 8013b36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013b38:	69fb      	ldr	r3, [r7, #28]
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3720      	adds	r7, #32
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	e000ed04 	.word	0xe000ed04

08013b48 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b088      	sub	sp, #32
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	607a      	str	r2, [r7, #4]
 8013b54:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b5e:	f3ef 8305 	mrs	r3, IPSR
 8013b62:	617b      	str	r3, [r7, #20]
  return(result);
 8013b64:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d028      	beq.n	8013bbc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d005      	beq.n	8013b7c <osMessageQueueGet+0x34>
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <osMessageQueueGet+0x34>
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d003      	beq.n	8013b84 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013b7c:	f06f 0303 	mvn.w	r3, #3
 8013b80:	61fb      	str	r3, [r7, #28]
 8013b82:	e037      	b.n	8013bf4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013b84:	2300      	movs	r3, #0
 8013b86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013b88:	f107 0310 	add.w	r3, r7, #16
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	68b9      	ldr	r1, [r7, #8]
 8013b90:	69b8      	ldr	r0, [r7, #24]
 8013b92:	f000 ff63 	bl	8014a5c <xQueueReceiveFromISR>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d003      	beq.n	8013ba4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013b9c:	f06f 0302 	mvn.w	r3, #2
 8013ba0:	61fb      	str	r3, [r7, #28]
 8013ba2:	e027      	b.n	8013bf4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d024      	beq.n	8013bf4 <osMessageQueueGet+0xac>
 8013baa:	4b15      	ldr	r3, [pc, #84]	; (8013c00 <osMessageQueueGet+0xb8>)
 8013bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bb0:	601a      	str	r2, [r3, #0]
 8013bb2:	f3bf 8f4f 	dsb	sy
 8013bb6:	f3bf 8f6f 	isb	sy
 8013bba:	e01b      	b.n	8013bf4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d002      	beq.n	8013bc8 <osMessageQueueGet+0x80>
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d103      	bne.n	8013bd0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013bc8:	f06f 0303 	mvn.w	r3, #3
 8013bcc:	61fb      	str	r3, [r7, #28]
 8013bce:	e011      	b.n	8013bf4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013bd0:	683a      	ldr	r2, [r7, #0]
 8013bd2:	68b9      	ldr	r1, [r7, #8]
 8013bd4:	69b8      	ldr	r0, [r7, #24]
 8013bd6:	f000 fe61 	bl	801489c <xQueueReceive>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d009      	beq.n	8013bf4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d003      	beq.n	8013bee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013be6:	f06f 0301 	mvn.w	r3, #1
 8013bea:	61fb      	str	r3, [r7, #28]
 8013bec:	e002      	b.n	8013bf4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013bee:	f06f 0302 	mvn.w	r3, #2
 8013bf2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013bf4:	69fb      	ldr	r3, [r7, #28]
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3720      	adds	r7, #32
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	e000ed04 	.word	0xe000ed04

08013c04 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d102      	bne.n	8013c1c <osMessageQueueGetCount+0x18>
    count = 0U;
 8013c16:	2300      	movs	r3, #0
 8013c18:	617b      	str	r3, [r7, #20]
 8013c1a:	e00e      	b.n	8013c3a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c1c:	f3ef 8305 	mrs	r3, IPSR
 8013c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c22:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d004      	beq.n	8013c32 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8013c28:	6938      	ldr	r0, [r7, #16]
 8013c2a:	f000 ffb5 	bl	8014b98 <uxQueueMessagesWaitingFromISR>
 8013c2e:	6178      	str	r0, [r7, #20]
 8013c30:	e003      	b.n	8013c3a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8013c32:	6938      	ldr	r0, [r7, #16]
 8013c34:	f000 ff92 	bl	8014b5c <uxQueueMessagesWaiting>
 8013c38:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8013c3a:	697b      	ldr	r3, [r7, #20]
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3718      	adds	r7, #24
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013c44:	b480      	push	{r7}
 8013c46:	b085      	sub	sp, #20
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	4a07      	ldr	r2, [pc, #28]	; (8013c70 <vApplicationGetIdleTaskMemory+0x2c>)
 8013c54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	4a06      	ldr	r2, [pc, #24]	; (8013c74 <vApplicationGetIdleTaskMemory+0x30>)
 8013c5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2280      	movs	r2, #128	; 0x80
 8013c60:	601a      	str	r2, [r3, #0]
}
 8013c62:	bf00      	nop
 8013c64:	3714      	adds	r7, #20
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	2400116c 	.word	0x2400116c
 8013c74:	240011c8 	.word	0x240011c8

08013c78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013c78:	b480      	push	{r7}
 8013c7a:	b085      	sub	sp, #20
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	4a07      	ldr	r2, [pc, #28]	; (8013ca4 <vApplicationGetTimerTaskMemory+0x2c>)
 8013c88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	4a06      	ldr	r2, [pc, #24]	; (8013ca8 <vApplicationGetTimerTaskMemory+0x30>)
 8013c8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c96:	601a      	str	r2, [r3, #0]
}
 8013c98:	bf00      	nop
 8013c9a:	3714      	adds	r7, #20
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr
 8013ca4:	240013c8 	.word	0x240013c8
 8013ca8:	24001424 	.word	0x24001424

08013cac <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d10a      	bne.n	8013cd0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cbe:	f383 8811 	msr	BASEPRI, r3
 8013cc2:	f3bf 8f6f 	isb	sy
 8013cc6:	f3bf 8f4f 	dsb	sy
 8013cca:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013ccc:	bf00      	nop
 8013cce:	e7fe      	b.n	8013cce <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013cd0:	2320      	movs	r3, #32
 8013cd2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2b20      	cmp	r3, #32
 8013cd8:	d00a      	beq.n	8013cf0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cde:	f383 8811 	msr	BASEPRI, r3
 8013ce2:	f3bf 8f6f 	isb	sy
 8013ce6:	f3bf 8f4f 	dsb	sy
 8013cea:	60fb      	str	r3, [r7, #12]
}
 8013cec:	bf00      	nop
 8013cee:	e7fe      	b.n	8013cee <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d00a      	beq.n	8013d10 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	3304      	adds	r3, #4
 8013d04:	4618      	mov	r0, r3
 8013d06:	f000 fa3d 	bl	8014184 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013d10:	697b      	ldr	r3, [r7, #20]
	}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3718      	adds	r7, #24
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b082      	sub	sp, #8
 8013d1e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013d20:	2020      	movs	r0, #32
 8013d22:	f002 ff59 	bl	8016bd8 <pvPortMalloc>
 8013d26:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d00a      	beq.n	8013d44 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	3304      	adds	r3, #4
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f000 fa23 	bl	8014184 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2200      	movs	r2, #0
 8013d42:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013d44:	687b      	ldr	r3, [r7, #4]
	}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3708      	adds	r7, #8
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
	...

08013d50 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b090      	sub	sp, #64	; 0x40
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
 8013d5c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013d62:	2300      	movs	r3, #0
 8013d64:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013d66:	2300      	movs	r3, #0
 8013d68:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10a      	bne.n	8013d86 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	623b      	str	r3, [r7, #32]
}
 8013d82:	bf00      	nop
 8013d84:	e7fe      	b.n	8013d84 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d00a      	beq.n	8013da6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8013d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d94:	f383 8811 	msr	BASEPRI, r3
 8013d98:	f3bf 8f6f 	isb	sy
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	61fb      	str	r3, [r7, #28]
}
 8013da2:	bf00      	nop
 8013da4:	e7fe      	b.n	8013da4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10a      	bne.n	8013dc2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db0:	f383 8811 	msr	BASEPRI, r3
 8013db4:	f3bf 8f6f 	isb	sy
 8013db8:	f3bf 8f4f 	dsb	sy
 8013dbc:	61bb      	str	r3, [r7, #24]
}
 8013dbe:	bf00      	nop
 8013dc0:	e7fe      	b.n	8013dc0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dc2:	f002 f853 	bl	8015e6c <xTaskGetSchedulerState>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d102      	bne.n	8013dd2 <xEventGroupWaitBits+0x82>
 8013dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d101      	bne.n	8013dd6 <xEventGroupWaitBits+0x86>
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	e000      	b.n	8013dd8 <xEventGroupWaitBits+0x88>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d10a      	bne.n	8013df2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de0:	f383 8811 	msr	BASEPRI, r3
 8013de4:	f3bf 8f6f 	isb	sy
 8013de8:	f3bf 8f4f 	dsb	sy
 8013dec:	617b      	str	r3, [r7, #20]
}
 8013dee:	bf00      	nop
 8013df0:	e7fe      	b.n	8013df0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013df2:	f001 fbb3 	bl	801555c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013dfc:	683a      	ldr	r2, [r7, #0]
 8013dfe:	68b9      	ldr	r1, [r7, #8]
 8013e00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e02:	f000 f988 	bl	8014116 <prvTestWaitCondition>
 8013e06:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d00e      	beq.n	8013e2c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e10:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d028      	beq.n	8013e6e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e1e:	681a      	ldr	r2, [r3, #0]
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	43db      	mvns	r3, r3
 8013e24:	401a      	ands	r2, r3
 8013e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e28:	601a      	str	r2, [r3, #0]
 8013e2a:	e020      	b.n	8013e6e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d104      	bne.n	8013e3c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e34:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013e36:	2301      	movs	r3, #1
 8013e38:	633b      	str	r3, [r7, #48]	; 0x30
 8013e3a:	e018      	b.n	8013e6e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d003      	beq.n	8013e4a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013e48:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d003      	beq.n	8013e58 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013e56:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e5a:	1d18      	adds	r0, r3, #4
 8013e5c:	68ba      	ldr	r2, [r7, #8]
 8013e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e60:	4313      	orrs	r3, r2
 8013e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e64:	4619      	mov	r1, r3
 8013e66:	f001 fd79 	bl	801595c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013e6e:	f001 fb83 	bl	8015578 <xTaskResumeAll>
 8013e72:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d031      	beq.n	8013ede <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d107      	bne.n	8013e90 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013e80:	4b19      	ldr	r3, [pc, #100]	; (8013ee8 <xEventGroupWaitBits+0x198>)
 8013e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	f3bf 8f4f 	dsb	sy
 8013e8c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013e90:	f002 f878 	bl	8015f84 <uxTaskResetEventItemValue>
 8013e94:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d11a      	bne.n	8013ed6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013ea0:	f002 fd78 	bl	8016994 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013eaa:	683a      	ldr	r2, [r7, #0]
 8013eac:	68b9      	ldr	r1, [r7, #8]
 8013eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013eb0:	f000 f931 	bl	8014116 <prvTestWaitCondition>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d009      	beq.n	8013ece <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d006      	beq.n	8013ece <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	43db      	mvns	r3, r3
 8013ec8:	401a      	ands	r2, r3
 8013eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ecc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013ece:	2301      	movs	r3, #1
 8013ed0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013ed2:	f002 fd8f 	bl	80169f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013edc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3740      	adds	r7, #64	; 0x40
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	e000ed04 	.word	0xe000ed04

08013eec <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d10a      	bne.n	8013f16 <xEventGroupClearBits+0x2a>
	__asm volatile
 8013f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f04:	f383 8811 	msr	BASEPRI, r3
 8013f08:	f3bf 8f6f 	isb	sy
 8013f0c:	f3bf 8f4f 	dsb	sy
 8013f10:	60fb      	str	r3, [r7, #12]
}
 8013f12:	bf00      	nop
 8013f14:	e7fe      	b.n	8013f14 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d00a      	beq.n	8013f36 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f24:	f383 8811 	msr	BASEPRI, r3
 8013f28:	f3bf 8f6f 	isb	sy
 8013f2c:	f3bf 8f4f 	dsb	sy
 8013f30:	60bb      	str	r3, [r7, #8]
}
 8013f32:	bf00      	nop
 8013f34:	e7fe      	b.n	8013f34 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013f36:	f002 fd2d 	bl	8016994 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	43db      	mvns	r3, r3
 8013f48:	401a      	ands	r2, r3
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013f4e:	f002 fd51 	bl	80169f4 <vPortExitCritical>

	return uxReturn;
 8013f52:	693b      	ldr	r3, [r7, #16]
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3718      	adds	r7, #24
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013f66:	2300      	movs	r3, #0
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	6879      	ldr	r1, [r7, #4]
 8013f6c:	4804      	ldr	r0, [pc, #16]	; (8013f80 <xEventGroupClearBitsFromISR+0x24>)
 8013f6e:	f002 fbc3 	bl	80166f8 <xTimerPendFunctionCallFromISR>
 8013f72:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013f74:	68fb      	ldr	r3, [r7, #12]
	}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3710      	adds	r7, #16
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	080140fd 	.word	0x080140fd

08013f84 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013f84:	b480      	push	{r7}
 8013f86:	b089      	sub	sp, #36	; 0x24
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013f90:	f3ef 8211 	mrs	r2, BASEPRI
 8013f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f98:	f383 8811 	msr	BASEPRI, r3
 8013f9c:	f3bf 8f6f 	isb	sy
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	60fa      	str	r2, [r7, #12]
 8013fa6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013faa:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	617b      	str	r3, [r7, #20]
 8013fb2:	69bb      	ldr	r3, [r7, #24]
 8013fb4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013fbc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013fbe:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3724      	adds	r7, #36	; 0x24
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fca:	4770      	bx	lr

08013fcc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b08e      	sub	sp, #56	; 0x38
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d10a      	bne.n	8013ffe <xEventGroupSetBits+0x32>
	__asm volatile
 8013fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fec:	f383 8811 	msr	BASEPRI, r3
 8013ff0:	f3bf 8f6f 	isb	sy
 8013ff4:	f3bf 8f4f 	dsb	sy
 8013ff8:	613b      	str	r3, [r7, #16]
}
 8013ffa:	bf00      	nop
 8013ffc:	e7fe      	b.n	8013ffc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014004:	2b00      	cmp	r3, #0
 8014006:	d00a      	beq.n	801401e <xEventGroupSetBits+0x52>
	__asm volatile
 8014008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400c:	f383 8811 	msr	BASEPRI, r3
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	60fb      	str	r3, [r7, #12]
}
 801401a:	bf00      	nop
 801401c:	e7fe      	b.n	801401c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	3304      	adds	r3, #4
 8014022:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014026:	3308      	adds	r3, #8
 8014028:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801402a:	f001 fa97 	bl	801555c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8014034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	431a      	orrs	r2, r3
 801403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8014040:	e03c      	b.n	80140bc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8014042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8014048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801404e:	2300      	movs	r3, #0
 8014050:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8014052:	69bb      	ldr	r3, [r7, #24]
 8014054:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014058:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014060:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014068:	2b00      	cmp	r3, #0
 801406a:	d108      	bne.n	801407e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	4013      	ands	r3, r2
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00b      	beq.n	8014090 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8014078:	2301      	movs	r3, #1
 801407a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801407c:	e008      	b.n	8014090 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	69bb      	ldr	r3, [r7, #24]
 8014084:	4013      	ands	r3, r2
 8014086:	69ba      	ldr	r2, [r7, #24]
 8014088:	429a      	cmp	r2, r3
 801408a:	d101      	bne.n	8014090 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801408c:	2301      	movs	r3, #1
 801408e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	2b00      	cmp	r3, #0
 8014094:	d010      	beq.n	80140b8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801409c:	2b00      	cmp	r3, #0
 801409e:	d003      	beq.n	80140a8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80140a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	4313      	orrs	r3, r2
 80140a6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80140a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80140b0:	4619      	mov	r1, r3
 80140b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80140b4:	f001 fd1e 	bl	8015af4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80140bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140be:	6a3b      	ldr	r3, [r7, #32]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d1be      	bne.n	8014042 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80140c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ca:	43db      	mvns	r3, r3
 80140cc:	401a      	ands	r2, r3
 80140ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80140d2:	f001 fa51 	bl	8015578 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80140d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d8:	681b      	ldr	r3, [r3, #0]
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3738      	adds	r7, #56	; 0x38
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}

080140e2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80140ec:	6839      	ldr	r1, [r7, #0]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7ff ff6c 	bl	8013fcc <xEventGroupSetBits>
}
 80140f4:	bf00      	nop
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}

080140fc <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8014106:	6839      	ldr	r1, [r7, #0]
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7ff feef 	bl	8013eec <xEventGroupClearBits>
}
 801410e:	bf00      	nop
 8014110:	3708      	adds	r7, #8
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8014116:	b480      	push	{r7}
 8014118:	b087      	sub	sp, #28
 801411a:	af00      	add	r7, sp, #0
 801411c:	60f8      	str	r0, [r7, #12]
 801411e:	60b9      	str	r1, [r7, #8]
 8014120:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8014122:	2300      	movs	r3, #0
 8014124:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d107      	bne.n	801413c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	4013      	ands	r3, r2
 8014132:	2b00      	cmp	r3, #0
 8014134:	d00a      	beq.n	801414c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014136:	2301      	movs	r3, #1
 8014138:	617b      	str	r3, [r7, #20]
 801413a:	e007      	b.n	801414c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	4013      	ands	r3, r2
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	429a      	cmp	r2, r3
 8014146:	d101      	bne.n	801414c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014148:	2301      	movs	r3, #1
 801414a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801414c:	697b      	ldr	r3, [r7, #20]
}
 801414e:	4618      	mov	r0, r3
 8014150:	371c      	adds	r7, #28
 8014152:	46bd      	mov	sp, r7
 8014154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014158:	4770      	bx	lr
	...

0801415c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801415c:	b580      	push	{r7, lr}
 801415e:	b086      	sub	sp, #24
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	68f9      	ldr	r1, [r7, #12]
 801416e:	4804      	ldr	r0, [pc, #16]	; (8014180 <xEventGroupSetBitsFromISR+0x24>)
 8014170:	f002 fac2 	bl	80166f8 <xTimerPendFunctionCallFromISR>
 8014174:	6178      	str	r0, [r7, #20]

		return xReturn;
 8014176:	697b      	ldr	r3, [r7, #20]
	}
 8014178:	4618      	mov	r0, r3
 801417a:	3718      	adds	r7, #24
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	080140e3 	.word	0x080140e3

08014184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f103 0208 	add.w	r2, r3, #8
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801419c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f103 0208 	add.w	r2, r3, #8
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f103 0208 	add.w	r2, r3, #8
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2200      	movs	r2, #0
 80141b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80141b8:	bf00      	nop
 80141ba:	370c      	adds	r7, #12
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr

080141c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2200      	movs	r2, #0
 80141d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80141d2:	bf00      	nop
 80141d4:	370c      	adds	r7, #12
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr

080141de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80141de:	b480      	push	{r7}
 80141e0:	b085      	sub	sp, #20
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
 80141e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	689a      	ldr	r2, [r3, #8]
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	689b      	ldr	r3, [r3, #8]
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	683a      	ldr	r2, [r7, #0]
 8014208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	1c5a      	adds	r2, r3, #1
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	601a      	str	r2, [r3, #0]
}
 801421a:	bf00      	nop
 801421c:	3714      	adds	r7, #20
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr

08014226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014226:	b480      	push	{r7}
 8014228:	b085      	sub	sp, #20
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
 801422e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801423c:	d103      	bne.n	8014246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	691b      	ldr	r3, [r3, #16]
 8014242:	60fb      	str	r3, [r7, #12]
 8014244:	e00c      	b.n	8014260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	3308      	adds	r3, #8
 801424a:	60fb      	str	r3, [r7, #12]
 801424c:	e002      	b.n	8014254 <vListInsert+0x2e>
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	685b      	ldr	r3, [r3, #4]
 8014252:	60fb      	str	r3, [r7, #12]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	429a      	cmp	r2, r3
 801425e:	d2f6      	bcs.n	801424e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	685a      	ldr	r2, [r3, #4]
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	68fa      	ldr	r2, [r7, #12]
 8014274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	1c5a      	adds	r2, r3, #1
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	601a      	str	r2, [r3, #0]
}
 801428c:	bf00      	nop
 801428e:	3714      	adds	r7, #20
 8014290:	46bd      	mov	sp, r7
 8014292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014296:	4770      	bx	lr

08014298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014298:	b480      	push	{r7}
 801429a:	b085      	sub	sp, #20
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	691b      	ldr	r3, [r3, #16]
 80142a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	6892      	ldr	r2, [r2, #8]
 80142ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	689b      	ldr	r3, [r3, #8]
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	6852      	ldr	r2, [r2, #4]
 80142b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d103      	bne.n	80142cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	689a      	ldr	r2, [r3, #8]
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2200      	movs	r2, #0
 80142d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	1e5a      	subs	r2, r3, #1
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3714      	adds	r7, #20
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10a      	bne.n	8014316 <xQueueGenericReset+0x2a>
	__asm volatile
 8014300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014304:	f383 8811 	msr	BASEPRI, r3
 8014308:	f3bf 8f6f 	isb	sy
 801430c:	f3bf 8f4f 	dsb	sy
 8014310:	60bb      	str	r3, [r7, #8]
}
 8014312:	bf00      	nop
 8014314:	e7fe      	b.n	8014314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014316:	f002 fb3d 	bl	8016994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014322:	68f9      	ldr	r1, [r7, #12]
 8014324:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014326:	fb01 f303 	mul.w	r3, r1, r3
 801432a:	441a      	add	r2, r3
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2200      	movs	r2, #0
 8014334:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	681a      	ldr	r2, [r3, #0]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014346:	3b01      	subs	r3, #1
 8014348:	68f9      	ldr	r1, [r7, #12]
 801434a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801434c:	fb01 f303 	mul.w	r3, r1, r3
 8014350:	441a      	add	r2, r3
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	22ff      	movs	r2, #255	; 0xff
 801435a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	22ff      	movs	r2, #255	; 0xff
 8014362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d114      	bne.n	8014396 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	691b      	ldr	r3, [r3, #16]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d01a      	beq.n	80143aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	3310      	adds	r3, #16
 8014378:	4618      	mov	r0, r3
 801437a:	f001 fb57 	bl	8015a2c <xTaskRemoveFromEventList>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d012      	beq.n	80143aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014384:	4b0c      	ldr	r3, [pc, #48]	; (80143b8 <xQueueGenericReset+0xcc>)
 8014386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	f3bf 8f6f 	isb	sy
 8014394:	e009      	b.n	80143aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	3310      	adds	r3, #16
 801439a:	4618      	mov	r0, r3
 801439c:	f7ff fef2 	bl	8014184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	3324      	adds	r3, #36	; 0x24
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7ff feed 	bl	8014184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80143aa:	f002 fb23 	bl	80169f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80143ae:	2301      	movs	r3, #1
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	e000ed04 	.word	0xe000ed04

080143bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b08e      	sub	sp, #56	; 0x38
 80143c0:	af02      	add	r7, sp, #8
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	607a      	str	r2, [r7, #4]
 80143c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d10a      	bne.n	80143e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80143d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d4:	f383 8811 	msr	BASEPRI, r3
 80143d8:	f3bf 8f6f 	isb	sy
 80143dc:	f3bf 8f4f 	dsb	sy
 80143e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80143e2:	bf00      	nop
 80143e4:	e7fe      	b.n	80143e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d10a      	bne.n	8014402 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80143ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f0:	f383 8811 	msr	BASEPRI, r3
 80143f4:	f3bf 8f6f 	isb	sy
 80143f8:	f3bf 8f4f 	dsb	sy
 80143fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143fe:	bf00      	nop
 8014400:	e7fe      	b.n	8014400 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d002      	beq.n	801440e <xQueueGenericCreateStatic+0x52>
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d001      	beq.n	8014412 <xQueueGenericCreateStatic+0x56>
 801440e:	2301      	movs	r3, #1
 8014410:	e000      	b.n	8014414 <xQueueGenericCreateStatic+0x58>
 8014412:	2300      	movs	r3, #0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d10a      	bne.n	801442e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441c:	f383 8811 	msr	BASEPRI, r3
 8014420:	f3bf 8f6f 	isb	sy
 8014424:	f3bf 8f4f 	dsb	sy
 8014428:	623b      	str	r3, [r7, #32]
}
 801442a:	bf00      	nop
 801442c:	e7fe      	b.n	801442c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d102      	bne.n	801443a <xQueueGenericCreateStatic+0x7e>
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d101      	bne.n	801443e <xQueueGenericCreateStatic+0x82>
 801443a:	2301      	movs	r3, #1
 801443c:	e000      	b.n	8014440 <xQueueGenericCreateStatic+0x84>
 801443e:	2300      	movs	r3, #0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10a      	bne.n	801445a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014448:	f383 8811 	msr	BASEPRI, r3
 801444c:	f3bf 8f6f 	isb	sy
 8014450:	f3bf 8f4f 	dsb	sy
 8014454:	61fb      	str	r3, [r7, #28]
}
 8014456:	bf00      	nop
 8014458:	e7fe      	b.n	8014458 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801445a:	2350      	movs	r3, #80	; 0x50
 801445c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	2b50      	cmp	r3, #80	; 0x50
 8014462:	d00a      	beq.n	801447a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014468:	f383 8811 	msr	BASEPRI, r3
 801446c:	f3bf 8f6f 	isb	sy
 8014470:	f3bf 8f4f 	dsb	sy
 8014474:	61bb      	str	r3, [r7, #24]
}
 8014476:	bf00      	nop
 8014478:	e7fe      	b.n	8014478 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801447a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00d      	beq.n	80144a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014488:	2201      	movs	r2, #1
 801448a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801448e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	4613      	mov	r3, r2
 8014498:	687a      	ldr	r2, [r7, #4]
 801449a:	68b9      	ldr	r1, [r7, #8]
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	f000 f83f 	bl	8014520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80144a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3730      	adds	r7, #48	; 0x30
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b08a      	sub	sp, #40	; 0x28
 80144b0:	af02      	add	r7, sp, #8
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	4613      	mov	r3, r2
 80144b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10a      	bne.n	80144d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80144c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	613b      	str	r3, [r7, #16]
}
 80144d2:	bf00      	nop
 80144d4:	e7fe      	b.n	80144d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	68ba      	ldr	r2, [r7, #8]
 80144da:	fb02 f303 	mul.w	r3, r2, r3
 80144de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	3350      	adds	r3, #80	; 0x50
 80144e4:	4618      	mov	r0, r3
 80144e6:	f002 fb77 	bl	8016bd8 <pvPortMalloc>
 80144ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d011      	beq.n	8014516 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	3350      	adds	r3, #80	; 0x50
 80144fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	2200      	movs	r2, #0
 8014500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014504:	79fa      	ldrb	r2, [r7, #7]
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	4613      	mov	r3, r2
 801450c:	697a      	ldr	r2, [r7, #20]
 801450e:	68b9      	ldr	r1, [r7, #8]
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	f000 f805 	bl	8014520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014516:	69bb      	ldr	r3, [r7, #24]
	}
 8014518:	4618      	mov	r0, r3
 801451a:	3720      	adds	r7, #32
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}

08014520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
 801452c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d103      	bne.n	801453c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014534:	69bb      	ldr	r3, [r7, #24]
 8014536:	69ba      	ldr	r2, [r7, #24]
 8014538:	601a      	str	r2, [r3, #0]
 801453a:	e002      	b.n	8014542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801453c:	69bb      	ldr	r3, [r7, #24]
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014548:	69bb      	ldr	r3, [r7, #24]
 801454a:	68ba      	ldr	r2, [r7, #8]
 801454c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801454e:	2101      	movs	r1, #1
 8014550:	69b8      	ldr	r0, [r7, #24]
 8014552:	f7ff fecb 	bl	80142ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014556:	69bb      	ldr	r3, [r7, #24]
 8014558:	78fa      	ldrb	r2, [r7, #3]
 801455a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801455e:	bf00      	nop
 8014560:	3710      	adds	r7, #16
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b08e      	sub	sp, #56	; 0x38
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
 8014574:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014576:	2300      	movs	r3, #0
 8014578:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014580:	2b00      	cmp	r3, #0
 8014582:	d10a      	bne.n	801459a <xQueueGenericSend+0x32>
	__asm volatile
 8014584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014588:	f383 8811 	msr	BASEPRI, r3
 801458c:	f3bf 8f6f 	isb	sy
 8014590:	f3bf 8f4f 	dsb	sy
 8014594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014596:	bf00      	nop
 8014598:	e7fe      	b.n	8014598 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d103      	bne.n	80145a8 <xQueueGenericSend+0x40>
 80145a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d101      	bne.n	80145ac <xQueueGenericSend+0x44>
 80145a8:	2301      	movs	r3, #1
 80145aa:	e000      	b.n	80145ae <xQueueGenericSend+0x46>
 80145ac:	2300      	movs	r3, #0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10a      	bne.n	80145c8 <xQueueGenericSend+0x60>
	__asm volatile
 80145b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80145c4:	bf00      	nop
 80145c6:	e7fe      	b.n	80145c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	2b02      	cmp	r3, #2
 80145cc:	d103      	bne.n	80145d6 <xQueueGenericSend+0x6e>
 80145ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	d101      	bne.n	80145da <xQueueGenericSend+0x72>
 80145d6:	2301      	movs	r3, #1
 80145d8:	e000      	b.n	80145dc <xQueueGenericSend+0x74>
 80145da:	2300      	movs	r3, #0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d10a      	bne.n	80145f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80145e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e4:	f383 8811 	msr	BASEPRI, r3
 80145e8:	f3bf 8f6f 	isb	sy
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	623b      	str	r3, [r7, #32]
}
 80145f2:	bf00      	nop
 80145f4:	e7fe      	b.n	80145f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80145f6:	f001 fc39 	bl	8015e6c <xTaskGetSchedulerState>
 80145fa:	4603      	mov	r3, r0
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d102      	bne.n	8014606 <xQueueGenericSend+0x9e>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d101      	bne.n	801460a <xQueueGenericSend+0xa2>
 8014606:	2301      	movs	r3, #1
 8014608:	e000      	b.n	801460c <xQueueGenericSend+0xa4>
 801460a:	2300      	movs	r3, #0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d10a      	bne.n	8014626 <xQueueGenericSend+0xbe>
	__asm volatile
 8014610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014614:	f383 8811 	msr	BASEPRI, r3
 8014618:	f3bf 8f6f 	isb	sy
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	61fb      	str	r3, [r7, #28]
}
 8014622:	bf00      	nop
 8014624:	e7fe      	b.n	8014624 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014626:	f002 f9b5 	bl	8016994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014632:	429a      	cmp	r2, r3
 8014634:	d302      	bcc.n	801463c <xQueueGenericSend+0xd4>
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	2b02      	cmp	r3, #2
 801463a:	d129      	bne.n	8014690 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801463c:	683a      	ldr	r2, [r7, #0]
 801463e:	68b9      	ldr	r1, [r7, #8]
 8014640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014642:	f000 fac7 	bl	8014bd4 <prvCopyDataToQueue>
 8014646:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464c:	2b00      	cmp	r3, #0
 801464e:	d010      	beq.n	8014672 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014652:	3324      	adds	r3, #36	; 0x24
 8014654:	4618      	mov	r0, r3
 8014656:	f001 f9e9 	bl	8015a2c <xTaskRemoveFromEventList>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d013      	beq.n	8014688 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014660:	4b3f      	ldr	r3, [pc, #252]	; (8014760 <xQueueGenericSend+0x1f8>)
 8014662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014666:	601a      	str	r2, [r3, #0]
 8014668:	f3bf 8f4f 	dsb	sy
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	e00a      	b.n	8014688 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014674:	2b00      	cmp	r3, #0
 8014676:	d007      	beq.n	8014688 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014678:	4b39      	ldr	r3, [pc, #228]	; (8014760 <xQueueGenericSend+0x1f8>)
 801467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801467e:	601a      	str	r2, [r3, #0]
 8014680:	f3bf 8f4f 	dsb	sy
 8014684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014688:	f002 f9b4 	bl	80169f4 <vPortExitCritical>
				return pdPASS;
 801468c:	2301      	movs	r3, #1
 801468e:	e063      	b.n	8014758 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d103      	bne.n	801469e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014696:	f002 f9ad 	bl	80169f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801469a:	2300      	movs	r3, #0
 801469c:	e05c      	b.n	8014758 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d106      	bne.n	80146b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80146a4:	f107 0314 	add.w	r3, r7, #20
 80146a8:	4618      	mov	r0, r3
 80146aa:	f001 fa85 	bl	8015bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80146ae:	2301      	movs	r3, #1
 80146b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80146b2:	f002 f99f 	bl	80169f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80146b6:	f000 ff51 	bl	801555c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80146ba:	f002 f96b 	bl	8016994 <vPortEnterCritical>
 80146be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146c4:	b25b      	sxtb	r3, r3
 80146c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146ca:	d103      	bne.n	80146d4 <xQueueGenericSend+0x16c>
 80146cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ce:	2200      	movs	r2, #0
 80146d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146da:	b25b      	sxtb	r3, r3
 80146dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146e0:	d103      	bne.n	80146ea <xQueueGenericSend+0x182>
 80146e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e4:	2200      	movs	r2, #0
 80146e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80146ea:	f002 f983 	bl	80169f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80146ee:	1d3a      	adds	r2, r7, #4
 80146f0:	f107 0314 	add.w	r3, r7, #20
 80146f4:	4611      	mov	r1, r2
 80146f6:	4618      	mov	r0, r3
 80146f8:	f001 fa74 	bl	8015be4 <xTaskCheckForTimeOut>
 80146fc:	4603      	mov	r3, r0
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d124      	bne.n	801474c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014704:	f000 fb5e 	bl	8014dc4 <prvIsQueueFull>
 8014708:	4603      	mov	r3, r0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d018      	beq.n	8014740 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014710:	3310      	adds	r3, #16
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	4611      	mov	r1, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f001 f8fc 	bl	8015914 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801471c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801471e:	f000 fae9 	bl	8014cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014722:	f000 ff29 	bl	8015578 <xTaskResumeAll>
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	f47f af7c 	bne.w	8014626 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801472e:	4b0c      	ldr	r3, [pc, #48]	; (8014760 <xQueueGenericSend+0x1f8>)
 8014730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014734:	601a      	str	r2, [r3, #0]
 8014736:	f3bf 8f4f 	dsb	sy
 801473a:	f3bf 8f6f 	isb	sy
 801473e:	e772      	b.n	8014626 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014742:	f000 fad7 	bl	8014cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014746:	f000 ff17 	bl	8015578 <xTaskResumeAll>
 801474a:	e76c      	b.n	8014626 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801474c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801474e:	f000 fad1 	bl	8014cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014752:	f000 ff11 	bl	8015578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014756:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014758:	4618      	mov	r0, r3
 801475a:	3738      	adds	r7, #56	; 0x38
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}
 8014760:	e000ed04 	.word	0xe000ed04

08014764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b090      	sub	sp, #64	; 0x40
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
 8014770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014778:	2b00      	cmp	r3, #0
 801477a:	d10a      	bne.n	8014792 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014780:	f383 8811 	msr	BASEPRI, r3
 8014784:	f3bf 8f6f 	isb	sy
 8014788:	f3bf 8f4f 	dsb	sy
 801478c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801478e:	bf00      	nop
 8014790:	e7fe      	b.n	8014790 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014792:	68bb      	ldr	r3, [r7, #8]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d103      	bne.n	80147a0 <xQueueGenericSendFromISR+0x3c>
 8014798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801479c:	2b00      	cmp	r3, #0
 801479e:	d101      	bne.n	80147a4 <xQueueGenericSendFromISR+0x40>
 80147a0:	2301      	movs	r3, #1
 80147a2:	e000      	b.n	80147a6 <xQueueGenericSendFromISR+0x42>
 80147a4:	2300      	movs	r3, #0
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d10a      	bne.n	80147c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80147aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ae:	f383 8811 	msr	BASEPRI, r3
 80147b2:	f3bf 8f6f 	isb	sy
 80147b6:	f3bf 8f4f 	dsb	sy
 80147ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80147bc:	bf00      	nop
 80147be:	e7fe      	b.n	80147be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	2b02      	cmp	r3, #2
 80147c4:	d103      	bne.n	80147ce <xQueueGenericSendFromISR+0x6a>
 80147c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d101      	bne.n	80147d2 <xQueueGenericSendFromISR+0x6e>
 80147ce:	2301      	movs	r3, #1
 80147d0:	e000      	b.n	80147d4 <xQueueGenericSendFromISR+0x70>
 80147d2:	2300      	movs	r3, #0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d10a      	bne.n	80147ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80147d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147dc:	f383 8811 	msr	BASEPRI, r3
 80147e0:	f3bf 8f6f 	isb	sy
 80147e4:	f3bf 8f4f 	dsb	sy
 80147e8:	623b      	str	r3, [r7, #32]
}
 80147ea:	bf00      	nop
 80147ec:	e7fe      	b.n	80147ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147ee:	f002 f9b3 	bl	8016b58 <vPortValidateInterruptPriority>
	__asm volatile
 80147f2:	f3ef 8211 	mrs	r2, BASEPRI
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	61fa      	str	r2, [r7, #28]
 8014808:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801480a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801480c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014816:	429a      	cmp	r2, r3
 8014818:	d302      	bcc.n	8014820 <xQueueGenericSendFromISR+0xbc>
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	2b02      	cmp	r3, #2
 801481e:	d12f      	bne.n	8014880 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801482e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014830:	683a      	ldr	r2, [r7, #0]
 8014832:	68b9      	ldr	r1, [r7, #8]
 8014834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014836:	f000 f9cd 	bl	8014bd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801483a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801483e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014842:	d112      	bne.n	801486a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014848:	2b00      	cmp	r3, #0
 801484a:	d016      	beq.n	801487a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484e:	3324      	adds	r3, #36	; 0x24
 8014850:	4618      	mov	r0, r3
 8014852:	f001 f8eb 	bl	8015a2c <xTaskRemoveFromEventList>
 8014856:	4603      	mov	r3, r0
 8014858:	2b00      	cmp	r3, #0
 801485a:	d00e      	beq.n	801487a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00b      	beq.n	801487a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2201      	movs	r2, #1
 8014866:	601a      	str	r2, [r3, #0]
 8014868:	e007      	b.n	801487a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801486a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801486e:	3301      	adds	r3, #1
 8014870:	b2db      	uxtb	r3, r3
 8014872:	b25a      	sxtb	r2, r3
 8014874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801487a:	2301      	movs	r3, #1
 801487c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801487e:	e001      	b.n	8014884 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014880:	2300      	movs	r3, #0
 8014882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014886:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	f383 8811 	msr	BASEPRI, r3
}
 801488e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014892:	4618      	mov	r0, r3
 8014894:	3740      	adds	r7, #64	; 0x40
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
	...

0801489c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b08c      	sub	sp, #48	; 0x30
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80148a8:	2300      	movs	r3, #0
 80148aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80148b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d10a      	bne.n	80148cc <xQueueReceive+0x30>
	__asm volatile
 80148b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ba:	f383 8811 	msr	BASEPRI, r3
 80148be:	f3bf 8f6f 	isb	sy
 80148c2:	f3bf 8f4f 	dsb	sy
 80148c6:	623b      	str	r3, [r7, #32]
}
 80148c8:	bf00      	nop
 80148ca:	e7fe      	b.n	80148ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d103      	bne.n	80148da <xQueueReceive+0x3e>
 80148d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d101      	bne.n	80148de <xQueueReceive+0x42>
 80148da:	2301      	movs	r3, #1
 80148dc:	e000      	b.n	80148e0 <xQueueReceive+0x44>
 80148de:	2300      	movs	r3, #0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d10a      	bne.n	80148fa <xQueueReceive+0x5e>
	__asm volatile
 80148e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e8:	f383 8811 	msr	BASEPRI, r3
 80148ec:	f3bf 8f6f 	isb	sy
 80148f0:	f3bf 8f4f 	dsb	sy
 80148f4:	61fb      	str	r3, [r7, #28]
}
 80148f6:	bf00      	nop
 80148f8:	e7fe      	b.n	80148f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148fa:	f001 fab7 	bl	8015e6c <xTaskGetSchedulerState>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d102      	bne.n	801490a <xQueueReceive+0x6e>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d101      	bne.n	801490e <xQueueReceive+0x72>
 801490a:	2301      	movs	r3, #1
 801490c:	e000      	b.n	8014910 <xQueueReceive+0x74>
 801490e:	2300      	movs	r3, #0
 8014910:	2b00      	cmp	r3, #0
 8014912:	d10a      	bne.n	801492a <xQueueReceive+0x8e>
	__asm volatile
 8014914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014918:	f383 8811 	msr	BASEPRI, r3
 801491c:	f3bf 8f6f 	isb	sy
 8014920:	f3bf 8f4f 	dsb	sy
 8014924:	61bb      	str	r3, [r7, #24]
}
 8014926:	bf00      	nop
 8014928:	e7fe      	b.n	8014928 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801492a:	f002 f833 	bl	8016994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014932:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014936:	2b00      	cmp	r3, #0
 8014938:	d01f      	beq.n	801497a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801493a:	68b9      	ldr	r1, [r7, #8]
 801493c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801493e:	f000 f9b3 	bl	8014ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	1e5a      	subs	r2, r3, #1
 8014946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014948:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801494c:	691b      	ldr	r3, [r3, #16]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d00f      	beq.n	8014972 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014954:	3310      	adds	r3, #16
 8014956:	4618      	mov	r0, r3
 8014958:	f001 f868 	bl	8015a2c <xTaskRemoveFromEventList>
 801495c:	4603      	mov	r3, r0
 801495e:	2b00      	cmp	r3, #0
 8014960:	d007      	beq.n	8014972 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014962:	4b3d      	ldr	r3, [pc, #244]	; (8014a58 <xQueueReceive+0x1bc>)
 8014964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014968:	601a      	str	r2, [r3, #0]
 801496a:	f3bf 8f4f 	dsb	sy
 801496e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014972:	f002 f83f 	bl	80169f4 <vPortExitCritical>
				return pdPASS;
 8014976:	2301      	movs	r3, #1
 8014978:	e069      	b.n	8014a4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d103      	bne.n	8014988 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014980:	f002 f838 	bl	80169f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014984:	2300      	movs	r3, #0
 8014986:	e062      	b.n	8014a4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801498e:	f107 0310 	add.w	r3, r7, #16
 8014992:	4618      	mov	r0, r3
 8014994:	f001 f910 	bl	8015bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014998:	2301      	movs	r3, #1
 801499a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801499c:	f002 f82a 	bl	80169f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80149a0:	f000 fddc 	bl	801555c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80149a4:	f001 fff6 	bl	8016994 <vPortEnterCritical>
 80149a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80149ae:	b25b      	sxtb	r3, r3
 80149b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149b4:	d103      	bne.n	80149be <xQueueReceive+0x122>
 80149b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b8:	2200      	movs	r2, #0
 80149ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80149be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80149c4:	b25b      	sxtb	r3, r3
 80149c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149ca:	d103      	bne.n	80149d4 <xQueueReceive+0x138>
 80149cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ce:	2200      	movs	r2, #0
 80149d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149d4:	f002 f80e 	bl	80169f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80149d8:	1d3a      	adds	r2, r7, #4
 80149da:	f107 0310 	add.w	r3, r7, #16
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f001 f8ff 	bl	8015be4 <xTaskCheckForTimeOut>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d123      	bne.n	8014a34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149ee:	f000 f9d3 	bl	8014d98 <prvIsQueueEmpty>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d017      	beq.n	8014a28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80149f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fa:	3324      	adds	r3, #36	; 0x24
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	4611      	mov	r1, r2
 8014a00:	4618      	mov	r0, r3
 8014a02:	f000 ff87 	bl	8015914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a08:	f000 f974 	bl	8014cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014a0c:	f000 fdb4 	bl	8015578 <xTaskResumeAll>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d189      	bne.n	801492a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014a16:	4b10      	ldr	r3, [pc, #64]	; (8014a58 <xQueueReceive+0x1bc>)
 8014a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	f3bf 8f4f 	dsb	sy
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	e780      	b.n	801492a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a2a:	f000 f963 	bl	8014cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a2e:	f000 fda3 	bl	8015578 <xTaskResumeAll>
 8014a32:	e77a      	b.n	801492a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a36:	f000 f95d 	bl	8014cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014a3a:	f000 fd9d 	bl	8015578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a40:	f000 f9aa 	bl	8014d98 <prvIsQueueEmpty>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f43f af6f 	beq.w	801492a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014a4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3730      	adds	r7, #48	; 0x30
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	e000ed04 	.word	0xe000ed04

08014a5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b08e      	sub	sp, #56	; 0x38
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d10a      	bne.n	8014a88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a76:	f383 8811 	msr	BASEPRI, r3
 8014a7a:	f3bf 8f6f 	isb	sy
 8014a7e:	f3bf 8f4f 	dsb	sy
 8014a82:	623b      	str	r3, [r7, #32]
}
 8014a84:	bf00      	nop
 8014a86:	e7fe      	b.n	8014a86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d103      	bne.n	8014a96 <xQueueReceiveFromISR+0x3a>
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d101      	bne.n	8014a9a <xQueueReceiveFromISR+0x3e>
 8014a96:	2301      	movs	r3, #1
 8014a98:	e000      	b.n	8014a9c <xQueueReceiveFromISR+0x40>
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d10a      	bne.n	8014ab6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	61fb      	str	r3, [r7, #28]
}
 8014ab2:	bf00      	nop
 8014ab4:	e7fe      	b.n	8014ab4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ab6:	f002 f84f 	bl	8016b58 <vPortValidateInterruptPriority>
	__asm volatile
 8014aba:	f3ef 8211 	mrs	r2, BASEPRI
 8014abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac2:	f383 8811 	msr	BASEPRI, r3
 8014ac6:	f3bf 8f6f 	isb	sy
 8014aca:	f3bf 8f4f 	dsb	sy
 8014ace:	61ba      	str	r2, [r7, #24]
 8014ad0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014ad2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ada:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d02f      	beq.n	8014b42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014aec:	68b9      	ldr	r1, [r7, #8]
 8014aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014af0:	f000 f8da 	bl	8014ca8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af6:	1e5a      	subs	r2, r3, #1
 8014af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014afc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b04:	d112      	bne.n	8014b2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b08:	691b      	ldr	r3, [r3, #16]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d016      	beq.n	8014b3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b10:	3310      	adds	r3, #16
 8014b12:	4618      	mov	r0, r3
 8014b14:	f000 ff8a 	bl	8015a2c <xTaskRemoveFromEventList>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00e      	beq.n	8014b3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d00b      	beq.n	8014b3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2201      	movs	r2, #1
 8014b28:	601a      	str	r2, [r3, #0]
 8014b2a:	e007      	b.n	8014b3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b30:	3301      	adds	r3, #1
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	b25a      	sxtb	r2, r3
 8014b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8014b40:	e001      	b.n	8014b46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014b42:	2300      	movs	r3, #0
 8014b44:	637b      	str	r3, [r7, #52]	; 0x34
 8014b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	f383 8811 	msr	BASEPRI, r3
}
 8014b50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3738      	adds	r7, #56	; 0x38
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10a      	bne.n	8014b80 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8014b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b6e:	f383 8811 	msr	BASEPRI, r3
 8014b72:	f3bf 8f6f 	isb	sy
 8014b76:	f3bf 8f4f 	dsb	sy
 8014b7a:	60bb      	str	r3, [r7, #8]
}
 8014b7c:	bf00      	nop
 8014b7e:	e7fe      	b.n	8014b7e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014b80:	f001 ff08 	bl	8016994 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b88:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014b8a:	f001 ff33 	bl	80169f4 <vPortExitCritical>

	return uxReturn;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b90:	4618      	mov	r0, r3
 8014b92:	3710      	adds	r7, #16
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b087      	sub	sp, #28
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d10a      	bne.n	8014bc0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8014baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bae:	f383 8811 	msr	BASEPRI, r3
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	f3bf 8f4f 	dsb	sy
 8014bba:	60fb      	str	r3, [r7, #12]
}
 8014bbc:	bf00      	nop
 8014bbe:	e7fe      	b.n	8014bbe <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014bc0:	697b      	ldr	r3, [r7, #20]
 8014bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bc4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014bc6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014bc8:	4618      	mov	r0, r3
 8014bca:	371c      	adds	r7, #28
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd2:	4770      	bx	lr

08014bd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b086      	sub	sp, #24
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014be0:	2300      	movs	r3, #0
 8014be2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014be8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d10d      	bne.n	8014c0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d14d      	bne.n	8014c96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	689b      	ldr	r3, [r3, #8]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f001 f952 	bl	8015ea8 <xTaskPriorityDisinherit>
 8014c04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	609a      	str	r2, [r3, #8]
 8014c0c:	e043      	b.n	8014c96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d119      	bne.n	8014c48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6858      	ldr	r0, [r3, #4]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	68b9      	ldr	r1, [r7, #8]
 8014c20:	f002 f9fe 	bl	8017020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	685a      	ldr	r2, [r3, #4]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c2c:	441a      	add	r2, r3
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685a      	ldr	r2, [r3, #4]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	689b      	ldr	r3, [r3, #8]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d32b      	bcc.n	8014c96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	605a      	str	r2, [r3, #4]
 8014c46:	e026      	b.n	8014c96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	68d8      	ldr	r0, [r3, #12]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c50:	461a      	mov	r2, r3
 8014c52:	68b9      	ldr	r1, [r7, #8]
 8014c54:	f002 f9e4 	bl	8017020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	68da      	ldr	r2, [r3, #12]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c60:	425b      	negs	r3, r3
 8014c62:	441a      	add	r2, r3
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	68da      	ldr	r2, [r3, #12]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d207      	bcs.n	8014c84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	689a      	ldr	r2, [r3, #8]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c7c:	425b      	negs	r3, r3
 8014c7e:	441a      	add	r2, r3
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b02      	cmp	r3, #2
 8014c88:	d105      	bne.n	8014c96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d002      	beq.n	8014c96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	3b01      	subs	r3, #1
 8014c94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	1c5a      	adds	r2, r3, #1
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014c9e:	697b      	ldr	r3, [r7, #20]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3718      	adds	r7, #24
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d018      	beq.n	8014cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	68da      	ldr	r2, [r3, #12]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cc2:	441a      	add	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68da      	ldr	r2, [r3, #12]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	689b      	ldr	r3, [r3, #8]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d303      	bcc.n	8014cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	681a      	ldr	r2, [r3, #0]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	68d9      	ldr	r1, [r3, #12]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	6838      	ldr	r0, [r7, #0]
 8014ce8:	f002 f99a 	bl	8017020 <memcpy>
	}
}
 8014cec:	bf00      	nop
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014cfc:	f001 fe4a 	bl	8016994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014d08:	e011      	b.n	8014d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d012      	beq.n	8014d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	3324      	adds	r3, #36	; 0x24
 8014d16:	4618      	mov	r0, r3
 8014d18:	f000 fe88 	bl	8015a2c <xTaskRemoveFromEventList>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d001      	beq.n	8014d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014d22:	f000 ffc1 	bl	8015ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014d26:	7bfb      	ldrb	r3, [r7, #15]
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	dce9      	bgt.n	8014d0a <prvUnlockQueue+0x16>
 8014d36:	e000      	b.n	8014d3a <prvUnlockQueue+0x46>
					break;
 8014d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	22ff      	movs	r2, #255	; 0xff
 8014d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014d42:	f001 fe57 	bl	80169f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014d46:	f001 fe25 	bl	8016994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014d52:	e011      	b.n	8014d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	691b      	ldr	r3, [r3, #16]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d012      	beq.n	8014d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	3310      	adds	r3, #16
 8014d60:	4618      	mov	r0, r3
 8014d62:	f000 fe63 	bl	8015a2c <xTaskRemoveFromEventList>
 8014d66:	4603      	mov	r3, r0
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d001      	beq.n	8014d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014d6c:	f000 ff9c 	bl	8015ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014d70:	7bbb      	ldrb	r3, [r7, #14]
 8014d72:	3b01      	subs	r3, #1
 8014d74:	b2db      	uxtb	r3, r3
 8014d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	dce9      	bgt.n	8014d54 <prvUnlockQueue+0x60>
 8014d80:	e000      	b.n	8014d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	22ff      	movs	r2, #255	; 0xff
 8014d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014d8c:	f001 fe32 	bl	80169f4 <vPortExitCritical>
}
 8014d90:	bf00      	nop
 8014d92:	3710      	adds	r7, #16
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b084      	sub	sp, #16
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014da0:	f001 fdf8 	bl	8016994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d102      	bne.n	8014db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014dac:	2301      	movs	r3, #1
 8014dae:	60fb      	str	r3, [r7, #12]
 8014db0:	e001      	b.n	8014db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014db2:	2300      	movs	r3, #0
 8014db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014db6:	f001 fe1d 	bl	80169f4 <vPortExitCritical>

	return xReturn;
 8014dba:	68fb      	ldr	r3, [r7, #12]
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3710      	adds	r7, #16
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014dcc:	f001 fde2 	bl	8016994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d102      	bne.n	8014de2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014ddc:	2301      	movs	r3, #1
 8014dde:	60fb      	str	r3, [r7, #12]
 8014de0:	e001      	b.n	8014de6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014de2:	2300      	movs	r3, #0
 8014de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014de6:	f001 fe05 	bl	80169f4 <vPortExitCritical>

	return xReturn;
 8014dea:	68fb      	ldr	r3, [r7, #12]
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3710      	adds	r7, #16
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014df4:	b480      	push	{r7}
 8014df6:	b085      	sub	sp, #20
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014dfe:	2300      	movs	r3, #0
 8014e00:	60fb      	str	r3, [r7, #12]
 8014e02:	e014      	b.n	8014e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014e04:	4a0f      	ldr	r2, [pc, #60]	; (8014e44 <vQueueAddToRegistry+0x50>)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d10b      	bne.n	8014e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014e10:	490c      	ldr	r1, [pc, #48]	; (8014e44 <vQueueAddToRegistry+0x50>)
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	683a      	ldr	r2, [r7, #0]
 8014e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014e1a:	4a0a      	ldr	r2, [pc, #40]	; (8014e44 <vQueueAddToRegistry+0x50>)
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	00db      	lsls	r3, r3, #3
 8014e20:	4413      	add	r3, r2
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014e26:	e006      	b.n	8014e36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	60fb      	str	r3, [r7, #12]
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	2b07      	cmp	r3, #7
 8014e32:	d9e7      	bls.n	8014e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop
 8014e38:	3714      	adds	r7, #20
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	24001824 	.word	0x24001824

08014e48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b086      	sub	sp, #24
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014e58:	f001 fd9c 	bl	8016994 <vPortEnterCritical>
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e62:	b25b      	sxtb	r3, r3
 8014e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e68:	d103      	bne.n	8014e72 <vQueueWaitForMessageRestricted+0x2a>
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e78:	b25b      	sxtb	r3, r3
 8014e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e7e:	d103      	bne.n	8014e88 <vQueueWaitForMessageRestricted+0x40>
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	2200      	movs	r2, #0
 8014e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014e88:	f001 fdb4 	bl	80169f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d106      	bne.n	8014ea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	3324      	adds	r3, #36	; 0x24
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	68b9      	ldr	r1, [r7, #8]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 fd99 	bl	80159d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014ea2:	6978      	ldr	r0, [r7, #20]
 8014ea4:	f7ff ff26 	bl	8014cf4 <prvUnlockQueue>
	}
 8014ea8:	bf00      	nop
 8014eaa:	3718      	adds	r7, #24
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b08e      	sub	sp, #56	; 0x38
 8014eb4:	af04      	add	r7, sp, #16
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
 8014ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d10a      	bne.n	8014eda <xTaskCreateStatic+0x2a>
	__asm volatile
 8014ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec8:	f383 8811 	msr	BASEPRI, r3
 8014ecc:	f3bf 8f6f 	isb	sy
 8014ed0:	f3bf 8f4f 	dsb	sy
 8014ed4:	623b      	str	r3, [r7, #32]
}
 8014ed6:	bf00      	nop
 8014ed8:	e7fe      	b.n	8014ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d10a      	bne.n	8014ef6 <xTaskCreateStatic+0x46>
	__asm volatile
 8014ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee4:	f383 8811 	msr	BASEPRI, r3
 8014ee8:	f3bf 8f6f 	isb	sy
 8014eec:	f3bf 8f4f 	dsb	sy
 8014ef0:	61fb      	str	r3, [r7, #28]
}
 8014ef2:	bf00      	nop
 8014ef4:	e7fe      	b.n	8014ef4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014ef6:	235c      	movs	r3, #92	; 0x5c
 8014ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	2b5c      	cmp	r3, #92	; 0x5c
 8014efe:	d00a      	beq.n	8014f16 <xTaskCreateStatic+0x66>
	__asm volatile
 8014f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f04:	f383 8811 	msr	BASEPRI, r3
 8014f08:	f3bf 8f6f 	isb	sy
 8014f0c:	f3bf 8f4f 	dsb	sy
 8014f10:	61bb      	str	r3, [r7, #24]
}
 8014f12:	bf00      	nop
 8014f14:	e7fe      	b.n	8014f14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014f16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d01e      	beq.n	8014f5c <xTaskCreateStatic+0xac>
 8014f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d01b      	beq.n	8014f5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f30:	2202      	movs	r2, #2
 8014f32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014f36:	2300      	movs	r3, #0
 8014f38:	9303      	str	r3, [sp, #12]
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3c:	9302      	str	r3, [sp, #8]
 8014f3e:	f107 0314 	add.w	r3, r7, #20
 8014f42:	9301      	str	r3, [sp, #4]
 8014f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	68b9      	ldr	r1, [r7, #8]
 8014f4e:	68f8      	ldr	r0, [r7, #12]
 8014f50:	f000 f850 	bl	8014ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f56:	f000 f8dd 	bl	8015114 <prvAddNewTaskToReadyList>
 8014f5a:	e001      	b.n	8014f60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014f60:	697b      	ldr	r3, [r7, #20]
	}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3728      	adds	r7, #40	; 0x28
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b08c      	sub	sp, #48	; 0x30
 8014f6e:	af04      	add	r7, sp, #16
 8014f70:	60f8      	str	r0, [r7, #12]
 8014f72:	60b9      	str	r1, [r7, #8]
 8014f74:	603b      	str	r3, [r7, #0]
 8014f76:	4613      	mov	r3, r2
 8014f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014f7a:	88fb      	ldrh	r3, [r7, #6]
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f001 fe2a 	bl	8016bd8 <pvPortMalloc>
 8014f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d00e      	beq.n	8014faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014f8c:	205c      	movs	r0, #92	; 0x5c
 8014f8e:	f001 fe23 	bl	8016bd8 <pvPortMalloc>
 8014f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d003      	beq.n	8014fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	697a      	ldr	r2, [r7, #20]
 8014f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8014fa0:	e005      	b.n	8014fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014fa2:	6978      	ldr	r0, [r7, #20]
 8014fa4:	f001 fee4 	bl	8016d70 <vPortFree>
 8014fa8:	e001      	b.n	8014fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014faa:	2300      	movs	r3, #0
 8014fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d017      	beq.n	8014fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014fbc:	88fa      	ldrh	r2, [r7, #6]
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	9303      	str	r3, [sp, #12]
 8014fc2:	69fb      	ldr	r3, [r7, #28]
 8014fc4:	9302      	str	r3, [sp, #8]
 8014fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc8:	9301      	str	r3, [sp, #4]
 8014fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	68b9      	ldr	r1, [r7, #8]
 8014fd2:	68f8      	ldr	r0, [r7, #12]
 8014fd4:	f000 f80e 	bl	8014ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014fd8:	69f8      	ldr	r0, [r7, #28]
 8014fda:	f000 f89b 	bl	8015114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014fde:	2301      	movs	r3, #1
 8014fe0:	61bb      	str	r3, [r7, #24]
 8014fe2:	e002      	b.n	8014fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014fea:	69bb      	ldr	r3, [r7, #24]
	}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3720      	adds	r7, #32
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b088      	sub	sp, #32
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	607a      	str	r2, [r7, #4]
 8015000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	461a      	mov	r2, r3
 801500c:	21a5      	movs	r1, #165	; 0xa5
 801500e:	f002 f815 	bl	801703c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015016:	6879      	ldr	r1, [r7, #4]
 8015018:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801501c:	440b      	add	r3, r1
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	4413      	add	r3, r2
 8015022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	f023 0307 	bic.w	r3, r3, #7
 801502a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	f003 0307 	and.w	r3, r3, #7
 8015032:	2b00      	cmp	r3, #0
 8015034:	d00a      	beq.n	801504c <prvInitialiseNewTask+0x58>
	__asm volatile
 8015036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801503a:	f383 8811 	msr	BASEPRI, r3
 801503e:	f3bf 8f6f 	isb	sy
 8015042:	f3bf 8f4f 	dsb	sy
 8015046:	617b      	str	r3, [r7, #20]
}
 8015048:	bf00      	nop
 801504a:	e7fe      	b.n	801504a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d01f      	beq.n	8015092 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015052:	2300      	movs	r3, #0
 8015054:	61fb      	str	r3, [r7, #28]
 8015056:	e012      	b.n	801507e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015058:	68ba      	ldr	r2, [r7, #8]
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	4413      	add	r3, r2
 801505e:	7819      	ldrb	r1, [r3, #0]
 8015060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	4413      	add	r3, r2
 8015066:	3334      	adds	r3, #52	; 0x34
 8015068:	460a      	mov	r2, r1
 801506a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801506c:	68ba      	ldr	r2, [r7, #8]
 801506e:	69fb      	ldr	r3, [r7, #28]
 8015070:	4413      	add	r3, r2
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d006      	beq.n	8015086 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	3301      	adds	r3, #1
 801507c:	61fb      	str	r3, [r7, #28]
 801507e:	69fb      	ldr	r3, [r7, #28]
 8015080:	2b0f      	cmp	r3, #15
 8015082:	d9e9      	bls.n	8015058 <prvInitialiseNewTask+0x64>
 8015084:	e000      	b.n	8015088 <prvInitialiseNewTask+0x94>
			{
				break;
 8015086:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801508a:	2200      	movs	r2, #0
 801508c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015090:	e003      	b.n	801509a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015094:	2200      	movs	r2, #0
 8015096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509c:	2b37      	cmp	r3, #55	; 0x37
 801509e:	d901      	bls.n	80150a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80150a0:	2337      	movs	r3, #55	; 0x37
 80150a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80150a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80150aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80150b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b2:	2200      	movs	r2, #0
 80150b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80150b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b8:	3304      	adds	r3, #4
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7ff f882 	bl	80141c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80150c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c2:	3318      	adds	r3, #24
 80150c4:	4618      	mov	r0, r3
 80150c6:	f7ff f87d 	bl	80141c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80150ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80150da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80150e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e2:	2200      	movs	r2, #0
 80150e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80150e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e8:	2200      	movs	r2, #0
 80150ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80150ee:	683a      	ldr	r2, [r7, #0]
 80150f0:	68f9      	ldr	r1, [r7, #12]
 80150f2:	69b8      	ldr	r0, [r7, #24]
 80150f4:	f001 fb20 	bl	8016738 <pxPortInitialiseStack>
 80150f8:	4602      	mov	r2, r0
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80150fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015100:	2b00      	cmp	r3, #0
 8015102:	d002      	beq.n	801510a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801510a:	bf00      	nop
 801510c:	3720      	adds	r7, #32
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
	...

08015114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b082      	sub	sp, #8
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801511c:	f001 fc3a 	bl	8016994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015120:	4b2d      	ldr	r3, [pc, #180]	; (80151d8 <prvAddNewTaskToReadyList+0xc4>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	3301      	adds	r3, #1
 8015126:	4a2c      	ldr	r2, [pc, #176]	; (80151d8 <prvAddNewTaskToReadyList+0xc4>)
 8015128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801512a:	4b2c      	ldr	r3, [pc, #176]	; (80151dc <prvAddNewTaskToReadyList+0xc8>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d109      	bne.n	8015146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015132:	4a2a      	ldr	r2, [pc, #168]	; (80151dc <prvAddNewTaskToReadyList+0xc8>)
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015138:	4b27      	ldr	r3, [pc, #156]	; (80151d8 <prvAddNewTaskToReadyList+0xc4>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	2b01      	cmp	r3, #1
 801513e:	d110      	bne.n	8015162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015140:	f000 fdd6 	bl	8015cf0 <prvInitialiseTaskLists>
 8015144:	e00d      	b.n	8015162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015146:	4b26      	ldr	r3, [pc, #152]	; (80151e0 <prvAddNewTaskToReadyList+0xcc>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d109      	bne.n	8015162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801514e:	4b23      	ldr	r3, [pc, #140]	; (80151dc <prvAddNewTaskToReadyList+0xc8>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015158:	429a      	cmp	r2, r3
 801515a:	d802      	bhi.n	8015162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801515c:	4a1f      	ldr	r2, [pc, #124]	; (80151dc <prvAddNewTaskToReadyList+0xc8>)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015162:	4b20      	ldr	r3, [pc, #128]	; (80151e4 <prvAddNewTaskToReadyList+0xd0>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	3301      	adds	r3, #1
 8015168:	4a1e      	ldr	r2, [pc, #120]	; (80151e4 <prvAddNewTaskToReadyList+0xd0>)
 801516a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801516c:	4b1d      	ldr	r3, [pc, #116]	; (80151e4 <prvAddNewTaskToReadyList+0xd0>)
 801516e:	681a      	ldr	r2, [r3, #0]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015178:	4b1b      	ldr	r3, [pc, #108]	; (80151e8 <prvAddNewTaskToReadyList+0xd4>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	429a      	cmp	r2, r3
 801517e:	d903      	bls.n	8015188 <prvAddNewTaskToReadyList+0x74>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015184:	4a18      	ldr	r2, [pc, #96]	; (80151e8 <prvAddNewTaskToReadyList+0xd4>)
 8015186:	6013      	str	r3, [r2, #0]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801518c:	4613      	mov	r3, r2
 801518e:	009b      	lsls	r3, r3, #2
 8015190:	4413      	add	r3, r2
 8015192:	009b      	lsls	r3, r3, #2
 8015194:	4a15      	ldr	r2, [pc, #84]	; (80151ec <prvAddNewTaskToReadyList+0xd8>)
 8015196:	441a      	add	r2, r3
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	3304      	adds	r3, #4
 801519c:	4619      	mov	r1, r3
 801519e:	4610      	mov	r0, r2
 80151a0:	f7ff f81d 	bl	80141de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80151a4:	f001 fc26 	bl	80169f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80151a8:	4b0d      	ldr	r3, [pc, #52]	; (80151e0 <prvAddNewTaskToReadyList+0xcc>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00e      	beq.n	80151ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80151b0:	4b0a      	ldr	r3, [pc, #40]	; (80151dc <prvAddNewTaskToReadyList+0xc8>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d207      	bcs.n	80151ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80151be:	4b0c      	ldr	r3, [pc, #48]	; (80151f0 <prvAddNewTaskToReadyList+0xdc>)
 80151c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151c4:	601a      	str	r2, [r3, #0]
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80151ce:	bf00      	nop
 80151d0:	3708      	adds	r7, #8
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	24001d38 	.word	0x24001d38
 80151dc:	24001864 	.word	0x24001864
 80151e0:	24001d44 	.word	0x24001d44
 80151e4:	24001d54 	.word	0x24001d54
 80151e8:	24001d40 	.word	0x24001d40
 80151ec:	24001868 	.word	0x24001868
 80151f0:	e000ed04 	.word	0xe000ed04

080151f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b084      	sub	sp, #16
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80151fc:	2300      	movs	r3, #0
 80151fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d017      	beq.n	8015236 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015206:	4b13      	ldr	r3, [pc, #76]	; (8015254 <vTaskDelay+0x60>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d00a      	beq.n	8015224 <vTaskDelay+0x30>
	__asm volatile
 801520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015212:	f383 8811 	msr	BASEPRI, r3
 8015216:	f3bf 8f6f 	isb	sy
 801521a:	f3bf 8f4f 	dsb	sy
 801521e:	60bb      	str	r3, [r7, #8]
}
 8015220:	bf00      	nop
 8015222:	e7fe      	b.n	8015222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015224:	f000 f99a 	bl	801555c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015228:	2100      	movs	r1, #0
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 fec2 	bl	8015fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015230:	f000 f9a2 	bl	8015578 <xTaskResumeAll>
 8015234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d107      	bne.n	801524c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801523c:	4b06      	ldr	r3, [pc, #24]	; (8015258 <vTaskDelay+0x64>)
 801523e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015242:	601a      	str	r2, [r3, #0]
 8015244:	f3bf 8f4f 	dsb	sy
 8015248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801524c:	bf00      	nop
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	24001d60 	.word	0x24001d60
 8015258:	e000ed04 	.word	0xe000ed04

0801525c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015264:	f001 fb96 	bl	8016994 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d102      	bne.n	8015274 <vTaskSuspend+0x18>
 801526e:	4b30      	ldr	r3, [pc, #192]	; (8015330 <vTaskSuspend+0xd4>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	e000      	b.n	8015276 <vTaskSuspend+0x1a>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	3304      	adds	r3, #4
 801527c:	4618      	mov	r0, r3
 801527e:	f7ff f80b 	bl	8014298 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015286:	2b00      	cmp	r3, #0
 8015288:	d004      	beq.n	8015294 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	3318      	adds	r3, #24
 801528e:	4618      	mov	r0, r3
 8015290:	f7ff f802 	bl	8014298 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	3304      	adds	r3, #4
 8015298:	4619      	mov	r1, r3
 801529a:	4826      	ldr	r0, [pc, #152]	; (8015334 <vTaskSuspend+0xd8>)
 801529c:	f7fe ff9f 	bl	80141de <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	2b01      	cmp	r3, #1
 80152aa:	d103      	bne.n	80152b4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2200      	movs	r2, #0
 80152b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80152b4:	f001 fb9e 	bl	80169f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80152b8:	4b1f      	ldr	r3, [pc, #124]	; (8015338 <vTaskSuspend+0xdc>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d005      	beq.n	80152cc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80152c0:	f001 fb68 	bl	8016994 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80152c4:	f000 fdb2 	bl	8015e2c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80152c8:	f001 fb94 	bl	80169f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80152cc:	4b18      	ldr	r3, [pc, #96]	; (8015330 <vTaskSuspend+0xd4>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	68fa      	ldr	r2, [r7, #12]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d127      	bne.n	8015326 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80152d6:	4b18      	ldr	r3, [pc, #96]	; (8015338 <vTaskSuspend+0xdc>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d017      	beq.n	801530e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80152de:	4b17      	ldr	r3, [pc, #92]	; (801533c <vTaskSuspend+0xe0>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d00a      	beq.n	80152fc <vTaskSuspend+0xa0>
	__asm volatile
 80152e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ea:	f383 8811 	msr	BASEPRI, r3
 80152ee:	f3bf 8f6f 	isb	sy
 80152f2:	f3bf 8f4f 	dsb	sy
 80152f6:	60bb      	str	r3, [r7, #8]
}
 80152f8:	bf00      	nop
 80152fa:	e7fe      	b.n	80152fa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80152fc:	4b10      	ldr	r3, [pc, #64]	; (8015340 <vTaskSuspend+0xe4>)
 80152fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015302:	601a      	str	r2, [r3, #0]
 8015304:	f3bf 8f4f 	dsb	sy
 8015308:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801530c:	e00b      	b.n	8015326 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801530e:	4b09      	ldr	r3, [pc, #36]	; (8015334 <vTaskSuspend+0xd8>)
 8015310:	681a      	ldr	r2, [r3, #0]
 8015312:	4b0c      	ldr	r3, [pc, #48]	; (8015344 <vTaskSuspend+0xe8>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	429a      	cmp	r2, r3
 8015318:	d103      	bne.n	8015322 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801531a:	4b05      	ldr	r3, [pc, #20]	; (8015330 <vTaskSuspend+0xd4>)
 801531c:	2200      	movs	r2, #0
 801531e:	601a      	str	r2, [r3, #0]
	}
 8015320:	e001      	b.n	8015326 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8015322:	f000 fa99 	bl	8015858 <vTaskSwitchContext>
	}
 8015326:	bf00      	nop
 8015328:	3710      	adds	r7, #16
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	24001864 	.word	0x24001864
 8015334:	24001d24 	.word	0x24001d24
 8015338:	24001d44 	.word	0x24001d44
 801533c:	24001d60 	.word	0x24001d60
 8015340:	e000ed04 	.word	0xe000ed04
 8015344:	24001d38 	.word	0x24001d38

08015348 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015348:	b480      	push	{r7}
 801534a:	b087      	sub	sp, #28
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015350:	2300      	movs	r3, #0
 8015352:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10a      	bne.n	8015374 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015362:	f383 8811 	msr	BASEPRI, r3
 8015366:	f3bf 8f6f 	isb	sy
 801536a:	f3bf 8f4f 	dsb	sy
 801536e:	60fb      	str	r3, [r7, #12]
}
 8015370:	bf00      	nop
 8015372:	e7fe      	b.n	8015372 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	695b      	ldr	r3, [r3, #20]
 8015378:	4a0a      	ldr	r2, [pc, #40]	; (80153a4 <prvTaskIsTaskSuspended+0x5c>)
 801537a:	4293      	cmp	r3, r2
 801537c:	d10a      	bne.n	8015394 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015382:	4a09      	ldr	r2, [pc, #36]	; (80153a8 <prvTaskIsTaskSuspended+0x60>)
 8015384:	4293      	cmp	r3, r2
 8015386:	d005      	beq.n	8015394 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801538c:	2b00      	cmp	r3, #0
 801538e:	d101      	bne.n	8015394 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8015390:	2301      	movs	r3, #1
 8015392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015394:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015396:	4618      	mov	r0, r3
 8015398:	371c      	adds	r7, #28
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr
 80153a2:	bf00      	nop
 80153a4:	24001d24 	.word	0x24001d24
 80153a8:	24001cf8 	.word	0x24001cf8

080153ac <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b08a      	sub	sp, #40	; 0x28
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80153b4:	2300      	movs	r3, #0
 80153b6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d10a      	bne.n	80153d8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80153c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	61bb      	str	r3, [r7, #24]
}
 80153d4:	bf00      	nop
 80153d6:	e7fe      	b.n	80153d6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80153d8:	f001 fbbe 	bl	8016b58 <vPortValidateInterruptPriority>
	__asm volatile
 80153dc:	f3ef 8211 	mrs	r2, BASEPRI
 80153e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e4:	f383 8811 	msr	BASEPRI, r3
 80153e8:	f3bf 8f6f 	isb	sy
 80153ec:	f3bf 8f4f 	dsb	sy
 80153f0:	617a      	str	r2, [r7, #20]
 80153f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80153f4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80153f6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80153f8:	6a38      	ldr	r0, [r7, #32]
 80153fa:	f7ff ffa5 	bl	8015348 <prvTaskIsTaskSuspended>
 80153fe:	4603      	mov	r3, r0
 8015400:	2b00      	cmp	r3, #0
 8015402:	d030      	beq.n	8015466 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015404:	4b1d      	ldr	r3, [pc, #116]	; (801547c <xTaskResumeFromISR+0xd0>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d126      	bne.n	801545a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801540c:	6a3b      	ldr	r3, [r7, #32]
 801540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015410:	4b1b      	ldr	r3, [pc, #108]	; (8015480 <xTaskResumeFromISR+0xd4>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015416:	429a      	cmp	r2, r3
 8015418:	d301      	bcc.n	801541e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801541a:	2301      	movs	r3, #1
 801541c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801541e:	6a3b      	ldr	r3, [r7, #32]
 8015420:	3304      	adds	r3, #4
 8015422:	4618      	mov	r0, r3
 8015424:	f7fe ff38 	bl	8014298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015428:	6a3b      	ldr	r3, [r7, #32]
 801542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801542c:	4b15      	ldr	r3, [pc, #84]	; (8015484 <xTaskResumeFromISR+0xd8>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	429a      	cmp	r2, r3
 8015432:	d903      	bls.n	801543c <xTaskResumeFromISR+0x90>
 8015434:	6a3b      	ldr	r3, [r7, #32]
 8015436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015438:	4a12      	ldr	r2, [pc, #72]	; (8015484 <xTaskResumeFromISR+0xd8>)
 801543a:	6013      	str	r3, [r2, #0]
 801543c:	6a3b      	ldr	r3, [r7, #32]
 801543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015440:	4613      	mov	r3, r2
 8015442:	009b      	lsls	r3, r3, #2
 8015444:	4413      	add	r3, r2
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	4a0f      	ldr	r2, [pc, #60]	; (8015488 <xTaskResumeFromISR+0xdc>)
 801544a:	441a      	add	r2, r3
 801544c:	6a3b      	ldr	r3, [r7, #32]
 801544e:	3304      	adds	r3, #4
 8015450:	4619      	mov	r1, r3
 8015452:	4610      	mov	r0, r2
 8015454:	f7fe fec3 	bl	80141de <vListInsertEnd>
 8015458:	e005      	b.n	8015466 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801545a:	6a3b      	ldr	r3, [r7, #32]
 801545c:	3318      	adds	r3, #24
 801545e:	4619      	mov	r1, r3
 8015460:	480a      	ldr	r0, [pc, #40]	; (801548c <xTaskResumeFromISR+0xe0>)
 8015462:	f7fe febc 	bl	80141de <vListInsertEnd>
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f383 8811 	msr	BASEPRI, r3
}
 8015470:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8015472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015474:	4618      	mov	r0, r3
 8015476:	3728      	adds	r7, #40	; 0x28
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	24001d60 	.word	0x24001d60
 8015480:	24001864 	.word	0x24001864
 8015484:	24001d40 	.word	0x24001d40
 8015488:	24001868 	.word	0x24001868
 801548c:	24001cf8 	.word	0x24001cf8

08015490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b08a      	sub	sp, #40	; 0x28
 8015494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015496:	2300      	movs	r3, #0
 8015498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801549a:	2300      	movs	r3, #0
 801549c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801549e:	463a      	mov	r2, r7
 80154a0:	1d39      	adds	r1, r7, #4
 80154a2:	f107 0308 	add.w	r3, r7, #8
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fe fbcc 	bl	8013c44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80154ac:	6839      	ldr	r1, [r7, #0]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	68ba      	ldr	r2, [r7, #8]
 80154b2:	9202      	str	r2, [sp, #8]
 80154b4:	9301      	str	r3, [sp, #4]
 80154b6:	2300      	movs	r3, #0
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	2300      	movs	r3, #0
 80154bc:	460a      	mov	r2, r1
 80154be:	4921      	ldr	r1, [pc, #132]	; (8015544 <vTaskStartScheduler+0xb4>)
 80154c0:	4821      	ldr	r0, [pc, #132]	; (8015548 <vTaskStartScheduler+0xb8>)
 80154c2:	f7ff fcf5 	bl	8014eb0 <xTaskCreateStatic>
 80154c6:	4603      	mov	r3, r0
 80154c8:	4a20      	ldr	r2, [pc, #128]	; (801554c <vTaskStartScheduler+0xbc>)
 80154ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80154cc:	4b1f      	ldr	r3, [pc, #124]	; (801554c <vTaskStartScheduler+0xbc>)
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d002      	beq.n	80154da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80154d4:	2301      	movs	r3, #1
 80154d6:	617b      	str	r3, [r7, #20]
 80154d8:	e001      	b.n	80154de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80154da:	2300      	movs	r3, #0
 80154dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d102      	bne.n	80154ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80154e4:	f000 fdba 	bl	801605c <xTimerCreateTimerTask>
 80154e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	2b01      	cmp	r3, #1
 80154ee:	d116      	bne.n	801551e <vTaskStartScheduler+0x8e>
	__asm volatile
 80154f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f4:	f383 8811 	msr	BASEPRI, r3
 80154f8:	f3bf 8f6f 	isb	sy
 80154fc:	f3bf 8f4f 	dsb	sy
 8015500:	613b      	str	r3, [r7, #16]
}
 8015502:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015504:	4b12      	ldr	r3, [pc, #72]	; (8015550 <vTaskStartScheduler+0xc0>)
 8015506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801550a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801550c:	4b11      	ldr	r3, [pc, #68]	; (8015554 <vTaskStartScheduler+0xc4>)
 801550e:	2201      	movs	r2, #1
 8015510:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015512:	4b11      	ldr	r3, [pc, #68]	; (8015558 <vTaskStartScheduler+0xc8>)
 8015514:	2200      	movs	r2, #0
 8015516:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015518:	f001 f99a 	bl	8016850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801551c:	e00e      	b.n	801553c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015524:	d10a      	bne.n	801553c <vTaskStartScheduler+0xac>
	__asm volatile
 8015526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801552a:	f383 8811 	msr	BASEPRI, r3
 801552e:	f3bf 8f6f 	isb	sy
 8015532:	f3bf 8f4f 	dsb	sy
 8015536:	60fb      	str	r3, [r7, #12]
}
 8015538:	bf00      	nop
 801553a:	e7fe      	b.n	801553a <vTaskStartScheduler+0xaa>
}
 801553c:	bf00      	nop
 801553e:	3718      	adds	r7, #24
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}
 8015544:	08017cd4 	.word	0x08017cd4
 8015548:	08015cc1 	.word	0x08015cc1
 801554c:	24001d5c 	.word	0x24001d5c
 8015550:	24001d58 	.word	0x24001d58
 8015554:	24001d44 	.word	0x24001d44
 8015558:	24001d3c 	.word	0x24001d3c

0801555c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801555c:	b480      	push	{r7}
 801555e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015560:	4b04      	ldr	r3, [pc, #16]	; (8015574 <vTaskSuspendAll+0x18>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	3301      	adds	r3, #1
 8015566:	4a03      	ldr	r2, [pc, #12]	; (8015574 <vTaskSuspendAll+0x18>)
 8015568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801556a:	bf00      	nop
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	24001d60 	.word	0x24001d60

08015578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801557e:	2300      	movs	r3, #0
 8015580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015582:	2300      	movs	r3, #0
 8015584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015586:	4b42      	ldr	r3, [pc, #264]	; (8015690 <xTaskResumeAll+0x118>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d10a      	bne.n	80155a4 <xTaskResumeAll+0x2c>
	__asm volatile
 801558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015592:	f383 8811 	msr	BASEPRI, r3
 8015596:	f3bf 8f6f 	isb	sy
 801559a:	f3bf 8f4f 	dsb	sy
 801559e:	603b      	str	r3, [r7, #0]
}
 80155a0:	bf00      	nop
 80155a2:	e7fe      	b.n	80155a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80155a4:	f001 f9f6 	bl	8016994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80155a8:	4b39      	ldr	r3, [pc, #228]	; (8015690 <xTaskResumeAll+0x118>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	3b01      	subs	r3, #1
 80155ae:	4a38      	ldr	r2, [pc, #224]	; (8015690 <xTaskResumeAll+0x118>)
 80155b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80155b2:	4b37      	ldr	r3, [pc, #220]	; (8015690 <xTaskResumeAll+0x118>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d162      	bne.n	8015680 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80155ba:	4b36      	ldr	r3, [pc, #216]	; (8015694 <xTaskResumeAll+0x11c>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d05e      	beq.n	8015680 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80155c2:	e02f      	b.n	8015624 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155c4:	4b34      	ldr	r3, [pc, #208]	; (8015698 <xTaskResumeAll+0x120>)
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	68db      	ldr	r3, [r3, #12]
 80155ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	3318      	adds	r3, #24
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fe fe61 	bl	8014298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	3304      	adds	r3, #4
 80155da:	4618      	mov	r0, r3
 80155dc:	f7fe fe5c 	bl	8014298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155e4:	4b2d      	ldr	r3, [pc, #180]	; (801569c <xTaskResumeAll+0x124>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d903      	bls.n	80155f4 <xTaskResumeAll+0x7c>
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f0:	4a2a      	ldr	r2, [pc, #168]	; (801569c <xTaskResumeAll+0x124>)
 80155f2:	6013      	str	r3, [r2, #0]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155f8:	4613      	mov	r3, r2
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	4413      	add	r3, r2
 80155fe:	009b      	lsls	r3, r3, #2
 8015600:	4a27      	ldr	r2, [pc, #156]	; (80156a0 <xTaskResumeAll+0x128>)
 8015602:	441a      	add	r2, r3
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	3304      	adds	r3, #4
 8015608:	4619      	mov	r1, r3
 801560a:	4610      	mov	r0, r2
 801560c:	f7fe fde7 	bl	80141de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015614:	4b23      	ldr	r3, [pc, #140]	; (80156a4 <xTaskResumeAll+0x12c>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801561a:	429a      	cmp	r2, r3
 801561c:	d302      	bcc.n	8015624 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801561e:	4b22      	ldr	r3, [pc, #136]	; (80156a8 <xTaskResumeAll+0x130>)
 8015620:	2201      	movs	r2, #1
 8015622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015624:	4b1c      	ldr	r3, [pc, #112]	; (8015698 <xTaskResumeAll+0x120>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d1cb      	bne.n	80155c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d001      	beq.n	8015636 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015632:	f000 fbfb 	bl	8015e2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015636:	4b1d      	ldr	r3, [pc, #116]	; (80156ac <xTaskResumeAll+0x134>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d010      	beq.n	8015664 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015642:	f000 f847 	bl	80156d4 <xTaskIncrementTick>
 8015646:	4603      	mov	r3, r0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d002      	beq.n	8015652 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801564c:	4b16      	ldr	r3, [pc, #88]	; (80156a8 <xTaskResumeAll+0x130>)
 801564e:	2201      	movs	r2, #1
 8015650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	3b01      	subs	r3, #1
 8015656:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d1f1      	bne.n	8015642 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801565e:	4b13      	ldr	r3, [pc, #76]	; (80156ac <xTaskResumeAll+0x134>)
 8015660:	2200      	movs	r2, #0
 8015662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015664:	4b10      	ldr	r3, [pc, #64]	; (80156a8 <xTaskResumeAll+0x130>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d009      	beq.n	8015680 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801566c:	2301      	movs	r3, #1
 801566e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015670:	4b0f      	ldr	r3, [pc, #60]	; (80156b0 <xTaskResumeAll+0x138>)
 8015672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015676:	601a      	str	r2, [r3, #0]
 8015678:	f3bf 8f4f 	dsb	sy
 801567c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015680:	f001 f9b8 	bl	80169f4 <vPortExitCritical>

	return xAlreadyYielded;
 8015684:	68bb      	ldr	r3, [r7, #8]
}
 8015686:	4618      	mov	r0, r3
 8015688:	3710      	adds	r7, #16
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}
 801568e:	bf00      	nop
 8015690:	24001d60 	.word	0x24001d60
 8015694:	24001d38 	.word	0x24001d38
 8015698:	24001cf8 	.word	0x24001cf8
 801569c:	24001d40 	.word	0x24001d40
 80156a0:	24001868 	.word	0x24001868
 80156a4:	24001864 	.word	0x24001864
 80156a8:	24001d4c 	.word	0x24001d4c
 80156ac:	24001d48 	.word	0x24001d48
 80156b0:	e000ed04 	.word	0xe000ed04

080156b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80156b4:	b480      	push	{r7}
 80156b6:	b083      	sub	sp, #12
 80156b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80156ba:	4b05      	ldr	r3, [pc, #20]	; (80156d0 <xTaskGetTickCount+0x1c>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80156c0:	687b      	ldr	r3, [r7, #4]
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	370c      	adds	r7, #12
 80156c6:	46bd      	mov	sp, r7
 80156c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	24001d3c 	.word	0x24001d3c

080156d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b086      	sub	sp, #24
 80156d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80156da:	2300      	movs	r3, #0
 80156dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80156de:	4b53      	ldr	r3, [pc, #332]	; (801582c <xTaskIncrementTick+0x158>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	f040 8095 	bne.w	8015812 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80156e8:	4b51      	ldr	r3, [pc, #324]	; (8015830 <xTaskIncrementTick+0x15c>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	3301      	adds	r3, #1
 80156ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80156f0:	4a4f      	ldr	r2, [pc, #316]	; (8015830 <xTaskIncrementTick+0x15c>)
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d120      	bne.n	801573e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80156fc:	4b4d      	ldr	r3, [pc, #308]	; (8015834 <xTaskIncrementTick+0x160>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d00a      	beq.n	801571c <xTaskIncrementTick+0x48>
	__asm volatile
 8015706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801570a:	f383 8811 	msr	BASEPRI, r3
 801570e:	f3bf 8f6f 	isb	sy
 8015712:	f3bf 8f4f 	dsb	sy
 8015716:	603b      	str	r3, [r7, #0]
}
 8015718:	bf00      	nop
 801571a:	e7fe      	b.n	801571a <xTaskIncrementTick+0x46>
 801571c:	4b45      	ldr	r3, [pc, #276]	; (8015834 <xTaskIncrementTick+0x160>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	60fb      	str	r3, [r7, #12]
 8015722:	4b45      	ldr	r3, [pc, #276]	; (8015838 <xTaskIncrementTick+0x164>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4a43      	ldr	r2, [pc, #268]	; (8015834 <xTaskIncrementTick+0x160>)
 8015728:	6013      	str	r3, [r2, #0]
 801572a:	4a43      	ldr	r2, [pc, #268]	; (8015838 <xTaskIncrementTick+0x164>)
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6013      	str	r3, [r2, #0]
 8015730:	4b42      	ldr	r3, [pc, #264]	; (801583c <xTaskIncrementTick+0x168>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	3301      	adds	r3, #1
 8015736:	4a41      	ldr	r2, [pc, #260]	; (801583c <xTaskIncrementTick+0x168>)
 8015738:	6013      	str	r3, [r2, #0]
 801573a:	f000 fb77 	bl	8015e2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801573e:	4b40      	ldr	r3, [pc, #256]	; (8015840 <xTaskIncrementTick+0x16c>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	693a      	ldr	r2, [r7, #16]
 8015744:	429a      	cmp	r2, r3
 8015746:	d349      	bcc.n	80157dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015748:	4b3a      	ldr	r3, [pc, #232]	; (8015834 <xTaskIncrementTick+0x160>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d104      	bne.n	801575c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015752:	4b3b      	ldr	r3, [pc, #236]	; (8015840 <xTaskIncrementTick+0x16c>)
 8015754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015758:	601a      	str	r2, [r3, #0]
					break;
 801575a:	e03f      	b.n	80157dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801575c:	4b35      	ldr	r3, [pc, #212]	; (8015834 <xTaskIncrementTick+0x160>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	68db      	ldr	r3, [r3, #12]
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801576c:	693a      	ldr	r2, [r7, #16]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	429a      	cmp	r2, r3
 8015772:	d203      	bcs.n	801577c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015774:	4a32      	ldr	r2, [pc, #200]	; (8015840 <xTaskIncrementTick+0x16c>)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801577a:	e02f      	b.n	80157dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	3304      	adds	r3, #4
 8015780:	4618      	mov	r0, r3
 8015782:	f7fe fd89 	bl	8014298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801578a:	2b00      	cmp	r3, #0
 801578c:	d004      	beq.n	8015798 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	3318      	adds	r3, #24
 8015792:	4618      	mov	r0, r3
 8015794:	f7fe fd80 	bl	8014298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015798:	68bb      	ldr	r3, [r7, #8]
 801579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801579c:	4b29      	ldr	r3, [pc, #164]	; (8015844 <xTaskIncrementTick+0x170>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d903      	bls.n	80157ac <xTaskIncrementTick+0xd8>
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157a8:	4a26      	ldr	r2, [pc, #152]	; (8015844 <xTaskIncrementTick+0x170>)
 80157aa:	6013      	str	r3, [r2, #0]
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157b0:	4613      	mov	r3, r2
 80157b2:	009b      	lsls	r3, r3, #2
 80157b4:	4413      	add	r3, r2
 80157b6:	009b      	lsls	r3, r3, #2
 80157b8:	4a23      	ldr	r2, [pc, #140]	; (8015848 <xTaskIncrementTick+0x174>)
 80157ba:	441a      	add	r2, r3
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	3304      	adds	r3, #4
 80157c0:	4619      	mov	r1, r3
 80157c2:	4610      	mov	r0, r2
 80157c4:	f7fe fd0b 	bl	80141de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157cc:	4b1f      	ldr	r3, [pc, #124]	; (801584c <xTaskIncrementTick+0x178>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d3b8      	bcc.n	8015748 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80157d6:	2301      	movs	r3, #1
 80157d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157da:	e7b5      	b.n	8015748 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80157dc:	4b1b      	ldr	r3, [pc, #108]	; (801584c <xTaskIncrementTick+0x178>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157e2:	4919      	ldr	r1, [pc, #100]	; (8015848 <xTaskIncrementTick+0x174>)
 80157e4:	4613      	mov	r3, r2
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	4413      	add	r3, r2
 80157ea:	009b      	lsls	r3, r3, #2
 80157ec:	440b      	add	r3, r1
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d901      	bls.n	80157f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80157f4:	2301      	movs	r3, #1
 80157f6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80157f8:	4b15      	ldr	r3, [pc, #84]	; (8015850 <xTaskIncrementTick+0x17c>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d101      	bne.n	8015804 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8015800:	f7ea fef0 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015804:	4b13      	ldr	r3, [pc, #76]	; (8015854 <xTaskIncrementTick+0x180>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d009      	beq.n	8015820 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801580c:	2301      	movs	r3, #1
 801580e:	617b      	str	r3, [r7, #20]
 8015810:	e006      	b.n	8015820 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015812:	4b0f      	ldr	r3, [pc, #60]	; (8015850 <xTaskIncrementTick+0x17c>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	3301      	adds	r3, #1
 8015818:	4a0d      	ldr	r2, [pc, #52]	; (8015850 <xTaskIncrementTick+0x17c>)
 801581a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801581c:	f7ea fee2 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015820:	697b      	ldr	r3, [r7, #20]
}
 8015822:	4618      	mov	r0, r3
 8015824:	3718      	adds	r7, #24
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop
 801582c:	24001d60 	.word	0x24001d60
 8015830:	24001d3c 	.word	0x24001d3c
 8015834:	24001cf0 	.word	0x24001cf0
 8015838:	24001cf4 	.word	0x24001cf4
 801583c:	24001d50 	.word	0x24001d50
 8015840:	24001d58 	.word	0x24001d58
 8015844:	24001d40 	.word	0x24001d40
 8015848:	24001868 	.word	0x24001868
 801584c:	24001864 	.word	0x24001864
 8015850:	24001d48 	.word	0x24001d48
 8015854:	24001d4c 	.word	0x24001d4c

08015858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015858:	b480      	push	{r7}
 801585a:	b085      	sub	sp, #20
 801585c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801585e:	4b28      	ldr	r3, [pc, #160]	; (8015900 <vTaskSwitchContext+0xa8>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d003      	beq.n	801586e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015866:	4b27      	ldr	r3, [pc, #156]	; (8015904 <vTaskSwitchContext+0xac>)
 8015868:	2201      	movs	r2, #1
 801586a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801586c:	e041      	b.n	80158f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801586e:	4b25      	ldr	r3, [pc, #148]	; (8015904 <vTaskSwitchContext+0xac>)
 8015870:	2200      	movs	r2, #0
 8015872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015874:	4b24      	ldr	r3, [pc, #144]	; (8015908 <vTaskSwitchContext+0xb0>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	60fb      	str	r3, [r7, #12]
 801587a:	e010      	b.n	801589e <vTaskSwitchContext+0x46>
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d10a      	bne.n	8015898 <vTaskSwitchContext+0x40>
	__asm volatile
 8015882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015886:	f383 8811 	msr	BASEPRI, r3
 801588a:	f3bf 8f6f 	isb	sy
 801588e:	f3bf 8f4f 	dsb	sy
 8015892:	607b      	str	r3, [r7, #4]
}
 8015894:	bf00      	nop
 8015896:	e7fe      	b.n	8015896 <vTaskSwitchContext+0x3e>
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	3b01      	subs	r3, #1
 801589c:	60fb      	str	r3, [r7, #12]
 801589e:	491b      	ldr	r1, [pc, #108]	; (801590c <vTaskSwitchContext+0xb4>)
 80158a0:	68fa      	ldr	r2, [r7, #12]
 80158a2:	4613      	mov	r3, r2
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	4413      	add	r3, r2
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	440b      	add	r3, r1
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d0e4      	beq.n	801587c <vTaskSwitchContext+0x24>
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	4613      	mov	r3, r2
 80158b6:	009b      	lsls	r3, r3, #2
 80158b8:	4413      	add	r3, r2
 80158ba:	009b      	lsls	r3, r3, #2
 80158bc:	4a13      	ldr	r2, [pc, #76]	; (801590c <vTaskSwitchContext+0xb4>)
 80158be:	4413      	add	r3, r2
 80158c0:	60bb      	str	r3, [r7, #8]
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	685a      	ldr	r2, [r3, #4]
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	605a      	str	r2, [r3, #4]
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	685a      	ldr	r2, [r3, #4]
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	3308      	adds	r3, #8
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d104      	bne.n	80158e2 <vTaskSwitchContext+0x8a>
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	685a      	ldr	r2, [r3, #4]
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	605a      	str	r2, [r3, #4]
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	4a09      	ldr	r2, [pc, #36]	; (8015910 <vTaskSwitchContext+0xb8>)
 80158ea:	6013      	str	r3, [r2, #0]
 80158ec:	4a06      	ldr	r2, [pc, #24]	; (8015908 <vTaskSwitchContext+0xb0>)
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	6013      	str	r3, [r2, #0]
}
 80158f2:	bf00      	nop
 80158f4:	3714      	adds	r7, #20
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	24001d60 	.word	0x24001d60
 8015904:	24001d4c 	.word	0x24001d4c
 8015908:	24001d40 	.word	0x24001d40
 801590c:	24001868 	.word	0x24001868
 8015910:	24001864 	.word	0x24001864

08015914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d10a      	bne.n	801593a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015928:	f383 8811 	msr	BASEPRI, r3
 801592c:	f3bf 8f6f 	isb	sy
 8015930:	f3bf 8f4f 	dsb	sy
 8015934:	60fb      	str	r3, [r7, #12]
}
 8015936:	bf00      	nop
 8015938:	e7fe      	b.n	8015938 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801593a:	4b07      	ldr	r3, [pc, #28]	; (8015958 <vTaskPlaceOnEventList+0x44>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	3318      	adds	r3, #24
 8015940:	4619      	mov	r1, r3
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7fe fc6f 	bl	8014226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015948:	2101      	movs	r1, #1
 801594a:	6838      	ldr	r0, [r7, #0]
 801594c:	f000 fb32 	bl	8015fb4 <prvAddCurrentTaskToDelayedList>
}
 8015950:	bf00      	nop
 8015952:	3710      	adds	r7, #16
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	24001864 	.word	0x24001864

0801595c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b086      	sub	sp, #24
 8015960:	af00      	add	r7, sp, #0
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	60b9      	str	r1, [r7, #8]
 8015966:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d10a      	bne.n	8015984 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015972:	f383 8811 	msr	BASEPRI, r3
 8015976:	f3bf 8f6f 	isb	sy
 801597a:	f3bf 8f4f 	dsb	sy
 801597e:	617b      	str	r3, [r7, #20]
}
 8015980:	bf00      	nop
 8015982:	e7fe      	b.n	8015982 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015984:	4b11      	ldr	r3, [pc, #68]	; (80159cc <vTaskPlaceOnUnorderedEventList+0x70>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d10a      	bne.n	80159a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015990:	f383 8811 	msr	BASEPRI, r3
 8015994:	f3bf 8f6f 	isb	sy
 8015998:	f3bf 8f4f 	dsb	sy
 801599c:	613b      	str	r3, [r7, #16]
}
 801599e:	bf00      	nop
 80159a0:	e7fe      	b.n	80159a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80159a2:	4b0b      	ldr	r3, [pc, #44]	; (80159d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	68ba      	ldr	r2, [r7, #8]
 80159a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80159ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80159ae:	4b08      	ldr	r3, [pc, #32]	; (80159d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	3318      	adds	r3, #24
 80159b4:	4619      	mov	r1, r3
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f7fe fc11 	bl	80141de <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80159bc:	2101      	movs	r1, #1
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 faf8 	bl	8015fb4 <prvAddCurrentTaskToDelayedList>
}
 80159c4:	bf00      	nop
 80159c6:	3718      	adds	r7, #24
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	24001d60 	.word	0x24001d60
 80159d0:	24001864 	.word	0x24001864

080159d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b086      	sub	sp, #24
 80159d8:	af00      	add	r7, sp, #0
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d10a      	bne.n	80159fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80159e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ea:	f383 8811 	msr	BASEPRI, r3
 80159ee:	f3bf 8f6f 	isb	sy
 80159f2:	f3bf 8f4f 	dsb	sy
 80159f6:	617b      	str	r3, [r7, #20]
}
 80159f8:	bf00      	nop
 80159fa:	e7fe      	b.n	80159fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80159fc:	4b0a      	ldr	r3, [pc, #40]	; (8015a28 <vTaskPlaceOnEventListRestricted+0x54>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	3318      	adds	r3, #24
 8015a02:	4619      	mov	r1, r3
 8015a04:	68f8      	ldr	r0, [r7, #12]
 8015a06:	f7fe fbea 	bl	80141de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015a16:	6879      	ldr	r1, [r7, #4]
 8015a18:	68b8      	ldr	r0, [r7, #8]
 8015a1a:	f000 facb 	bl	8015fb4 <prvAddCurrentTaskToDelayedList>
	}
 8015a1e:	bf00      	nop
 8015a20:	3718      	adds	r7, #24
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}
 8015a26:	bf00      	nop
 8015a28:	24001864 	.word	0x24001864

08015a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	68db      	ldr	r3, [r3, #12]
 8015a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d10a      	bne.n	8015a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a46:	f383 8811 	msr	BASEPRI, r3
 8015a4a:	f3bf 8f6f 	isb	sy
 8015a4e:	f3bf 8f4f 	dsb	sy
 8015a52:	60fb      	str	r3, [r7, #12]
}
 8015a54:	bf00      	nop
 8015a56:	e7fe      	b.n	8015a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	3318      	adds	r3, #24
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7fe fc1b 	bl	8014298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a62:	4b1e      	ldr	r3, [pc, #120]	; (8015adc <xTaskRemoveFromEventList+0xb0>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d11d      	bne.n	8015aa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7fe fc12 	bl	8014298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015a74:	693b      	ldr	r3, [r7, #16]
 8015a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a78:	4b19      	ldr	r3, [pc, #100]	; (8015ae0 <xTaskRemoveFromEventList+0xb4>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d903      	bls.n	8015a88 <xTaskRemoveFromEventList+0x5c>
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a84:	4a16      	ldr	r2, [pc, #88]	; (8015ae0 <xTaskRemoveFromEventList+0xb4>)
 8015a86:	6013      	str	r3, [r2, #0]
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a8c:	4613      	mov	r3, r2
 8015a8e:	009b      	lsls	r3, r3, #2
 8015a90:	4413      	add	r3, r2
 8015a92:	009b      	lsls	r3, r3, #2
 8015a94:	4a13      	ldr	r2, [pc, #76]	; (8015ae4 <xTaskRemoveFromEventList+0xb8>)
 8015a96:	441a      	add	r2, r3
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	3304      	adds	r3, #4
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	4610      	mov	r0, r2
 8015aa0:	f7fe fb9d 	bl	80141de <vListInsertEnd>
 8015aa4:	e005      	b.n	8015ab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	3318      	adds	r3, #24
 8015aaa:	4619      	mov	r1, r3
 8015aac:	480e      	ldr	r0, [pc, #56]	; (8015ae8 <xTaskRemoveFromEventList+0xbc>)
 8015aae:	f7fe fb96 	bl	80141de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab6:	4b0d      	ldr	r3, [pc, #52]	; (8015aec <xTaskRemoveFromEventList+0xc0>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d905      	bls.n	8015acc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015ac0:	2301      	movs	r3, #1
 8015ac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015ac4:	4b0a      	ldr	r3, [pc, #40]	; (8015af0 <xTaskRemoveFromEventList+0xc4>)
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	601a      	str	r2, [r3, #0]
 8015aca:	e001      	b.n	8015ad0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015acc:	2300      	movs	r3, #0
 8015ace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015ad0:	697b      	ldr	r3, [r7, #20]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3718      	adds	r7, #24
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop
 8015adc:	24001d60 	.word	0x24001d60
 8015ae0:	24001d40 	.word	0x24001d40
 8015ae4:	24001868 	.word	0x24001868
 8015ae8:	24001cf8 	.word	0x24001cf8
 8015aec:	24001864 	.word	0x24001864
 8015af0:	24001d4c 	.word	0x24001d4c

08015af4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015afe:	4b29      	ldr	r3, [pc, #164]	; (8015ba4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10a      	bne.n	8015b1c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0a:	f383 8811 	msr	BASEPRI, r3
 8015b0e:	f3bf 8f6f 	isb	sy
 8015b12:	f3bf 8f4f 	dsb	sy
 8015b16:	613b      	str	r3, [r7, #16]
}
 8015b18:	bf00      	nop
 8015b1a:	e7fe      	b.n	8015b1a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d10a      	bne.n	8015b48 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8015b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b36:	f383 8811 	msr	BASEPRI, r3
 8015b3a:	f3bf 8f6f 	isb	sy
 8015b3e:	f3bf 8f4f 	dsb	sy
 8015b42:	60fb      	str	r3, [r7, #12]
}
 8015b44:	bf00      	nop
 8015b46:	e7fe      	b.n	8015b46 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f7fe fba5 	bl	8014298 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	3304      	adds	r3, #4
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fe fba0 	bl	8014298 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b5c:	4b12      	ldr	r3, [pc, #72]	; (8015ba8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d903      	bls.n	8015b6c <vTaskRemoveFromUnorderedEventList+0x78>
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b68:	4a0f      	ldr	r2, [pc, #60]	; (8015ba8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015b6a:	6013      	str	r3, [r2, #0]
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b70:	4613      	mov	r3, r2
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	4413      	add	r3, r2
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	4a0c      	ldr	r2, [pc, #48]	; (8015bac <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015b7a:	441a      	add	r2, r3
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	3304      	adds	r3, #4
 8015b80:	4619      	mov	r1, r3
 8015b82:	4610      	mov	r0, r2
 8015b84:	f7fe fb2b 	bl	80141de <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b8c:	4b08      	ldr	r3, [pc, #32]	; (8015bb0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d902      	bls.n	8015b9c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015b96:	4b07      	ldr	r3, [pc, #28]	; (8015bb4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015b98:	2201      	movs	r2, #1
 8015b9a:	601a      	str	r2, [r3, #0]
	}
}
 8015b9c:	bf00      	nop
 8015b9e:	3718      	adds	r7, #24
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}
 8015ba4:	24001d60 	.word	0x24001d60
 8015ba8:	24001d40 	.word	0x24001d40
 8015bac:	24001868 	.word	0x24001868
 8015bb0:	24001864 	.word	0x24001864
 8015bb4:	24001d4c 	.word	0x24001d4c

08015bb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015bc0:	4b06      	ldr	r3, [pc, #24]	; (8015bdc <vTaskInternalSetTimeOutState+0x24>)
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015bc8:	4b05      	ldr	r3, [pc, #20]	; (8015be0 <vTaskInternalSetTimeOutState+0x28>)
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	605a      	str	r2, [r3, #4]
}
 8015bd0:	bf00      	nop
 8015bd2:	370c      	adds	r7, #12
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bda:	4770      	bx	lr
 8015bdc:	24001d50 	.word	0x24001d50
 8015be0:	24001d3c 	.word	0x24001d3c

08015be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b088      	sub	sp, #32
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
 8015bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d10a      	bne.n	8015c0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf8:	f383 8811 	msr	BASEPRI, r3
 8015bfc:	f3bf 8f6f 	isb	sy
 8015c00:	f3bf 8f4f 	dsb	sy
 8015c04:	613b      	str	r3, [r7, #16]
}
 8015c06:	bf00      	nop
 8015c08:	e7fe      	b.n	8015c08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d10a      	bne.n	8015c26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c14:	f383 8811 	msr	BASEPRI, r3
 8015c18:	f3bf 8f6f 	isb	sy
 8015c1c:	f3bf 8f4f 	dsb	sy
 8015c20:	60fb      	str	r3, [r7, #12]
}
 8015c22:	bf00      	nop
 8015c24:	e7fe      	b.n	8015c24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015c26:	f000 feb5 	bl	8016994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015c2a:	4b1d      	ldr	r3, [pc, #116]	; (8015ca0 <xTaskCheckForTimeOut+0xbc>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	69ba      	ldr	r2, [r7, #24]
 8015c36:	1ad3      	subs	r3, r2, r3
 8015c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c42:	d102      	bne.n	8015c4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015c44:	2300      	movs	r3, #0
 8015c46:	61fb      	str	r3, [r7, #28]
 8015c48:	e023      	b.n	8015c92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	4b15      	ldr	r3, [pc, #84]	; (8015ca4 <xTaskCheckForTimeOut+0xc0>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d007      	beq.n	8015c66 <xTaskCheckForTimeOut+0x82>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	69ba      	ldr	r2, [r7, #24]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d302      	bcc.n	8015c66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015c60:	2301      	movs	r3, #1
 8015c62:	61fb      	str	r3, [r7, #28]
 8015c64:	e015      	b.n	8015c92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	697a      	ldr	r2, [r7, #20]
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d20b      	bcs.n	8015c88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	1ad2      	subs	r2, r2, r3
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7ff ff9b 	bl	8015bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015c82:	2300      	movs	r3, #0
 8015c84:	61fb      	str	r3, [r7, #28]
 8015c86:	e004      	b.n	8015c92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015c8e:	2301      	movs	r3, #1
 8015c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015c92:	f000 feaf 	bl	80169f4 <vPortExitCritical>

	return xReturn;
 8015c96:	69fb      	ldr	r3, [r7, #28]
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3720      	adds	r7, #32
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}
 8015ca0:	24001d3c 	.word	0x24001d3c
 8015ca4:	24001d50 	.word	0x24001d50

08015ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015ca8:	b480      	push	{r7}
 8015caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015cac:	4b03      	ldr	r3, [pc, #12]	; (8015cbc <vTaskMissedYield+0x14>)
 8015cae:	2201      	movs	r2, #1
 8015cb0:	601a      	str	r2, [r3, #0]
}
 8015cb2:	bf00      	nop
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr
 8015cbc:	24001d4c 	.word	0x24001d4c

08015cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b082      	sub	sp, #8
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015cc8:	f000 f852 	bl	8015d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015ccc:	4b06      	ldr	r3, [pc, #24]	; (8015ce8 <prvIdleTask+0x28>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	2b01      	cmp	r3, #1
 8015cd2:	d9f9      	bls.n	8015cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015cd4:	4b05      	ldr	r3, [pc, #20]	; (8015cec <prvIdleTask+0x2c>)
 8015cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cda:	601a      	str	r2, [r3, #0]
 8015cdc:	f3bf 8f4f 	dsb	sy
 8015ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015ce4:	e7f0      	b.n	8015cc8 <prvIdleTask+0x8>
 8015ce6:	bf00      	nop
 8015ce8:	24001868 	.word	0x24001868
 8015cec:	e000ed04 	.word	0xe000ed04

08015cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	607b      	str	r3, [r7, #4]
 8015cfa:	e00c      	b.n	8015d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	4613      	mov	r3, r2
 8015d00:	009b      	lsls	r3, r3, #2
 8015d02:	4413      	add	r3, r2
 8015d04:	009b      	lsls	r3, r3, #2
 8015d06:	4a12      	ldr	r2, [pc, #72]	; (8015d50 <prvInitialiseTaskLists+0x60>)
 8015d08:	4413      	add	r3, r2
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7fe fa3a 	bl	8014184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	3301      	adds	r3, #1
 8015d14:	607b      	str	r3, [r7, #4]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2b37      	cmp	r3, #55	; 0x37
 8015d1a:	d9ef      	bls.n	8015cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015d1c:	480d      	ldr	r0, [pc, #52]	; (8015d54 <prvInitialiseTaskLists+0x64>)
 8015d1e:	f7fe fa31 	bl	8014184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015d22:	480d      	ldr	r0, [pc, #52]	; (8015d58 <prvInitialiseTaskLists+0x68>)
 8015d24:	f7fe fa2e 	bl	8014184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015d28:	480c      	ldr	r0, [pc, #48]	; (8015d5c <prvInitialiseTaskLists+0x6c>)
 8015d2a:	f7fe fa2b 	bl	8014184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015d2e:	480c      	ldr	r0, [pc, #48]	; (8015d60 <prvInitialiseTaskLists+0x70>)
 8015d30:	f7fe fa28 	bl	8014184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015d34:	480b      	ldr	r0, [pc, #44]	; (8015d64 <prvInitialiseTaskLists+0x74>)
 8015d36:	f7fe fa25 	bl	8014184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015d3a:	4b0b      	ldr	r3, [pc, #44]	; (8015d68 <prvInitialiseTaskLists+0x78>)
 8015d3c:	4a05      	ldr	r2, [pc, #20]	; (8015d54 <prvInitialiseTaskLists+0x64>)
 8015d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015d40:	4b0a      	ldr	r3, [pc, #40]	; (8015d6c <prvInitialiseTaskLists+0x7c>)
 8015d42:	4a05      	ldr	r2, [pc, #20]	; (8015d58 <prvInitialiseTaskLists+0x68>)
 8015d44:	601a      	str	r2, [r3, #0]
}
 8015d46:	bf00      	nop
 8015d48:	3708      	adds	r7, #8
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	24001868 	.word	0x24001868
 8015d54:	24001cc8 	.word	0x24001cc8
 8015d58:	24001cdc 	.word	0x24001cdc
 8015d5c:	24001cf8 	.word	0x24001cf8
 8015d60:	24001d0c 	.word	0x24001d0c
 8015d64:	24001d24 	.word	0x24001d24
 8015d68:	24001cf0 	.word	0x24001cf0
 8015d6c:	24001cf4 	.word	0x24001cf4

08015d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015d76:	e019      	b.n	8015dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015d78:	f000 fe0c 	bl	8016994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d7c:	4b10      	ldr	r3, [pc, #64]	; (8015dc0 <prvCheckTasksWaitingTermination+0x50>)
 8015d7e:	68db      	ldr	r3, [r3, #12]
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	3304      	adds	r3, #4
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f7fe fa85 	bl	8014298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015d8e:	4b0d      	ldr	r3, [pc, #52]	; (8015dc4 <prvCheckTasksWaitingTermination+0x54>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	3b01      	subs	r3, #1
 8015d94:	4a0b      	ldr	r2, [pc, #44]	; (8015dc4 <prvCheckTasksWaitingTermination+0x54>)
 8015d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015d98:	4b0b      	ldr	r3, [pc, #44]	; (8015dc8 <prvCheckTasksWaitingTermination+0x58>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	3b01      	subs	r3, #1
 8015d9e:	4a0a      	ldr	r2, [pc, #40]	; (8015dc8 <prvCheckTasksWaitingTermination+0x58>)
 8015da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015da2:	f000 fe27 	bl	80169f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f000 f810 	bl	8015dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015dac:	4b06      	ldr	r3, [pc, #24]	; (8015dc8 <prvCheckTasksWaitingTermination+0x58>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d1e1      	bne.n	8015d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015db4:	bf00      	nop
 8015db6:	bf00      	nop
 8015db8:	3708      	adds	r7, #8
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	24001d0c 	.word	0x24001d0c
 8015dc4:	24001d38 	.word	0x24001d38
 8015dc8:	24001d20 	.word	0x24001d20

08015dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d108      	bne.n	8015df0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015de2:	4618      	mov	r0, r3
 8015de4:	f000 ffc4 	bl	8016d70 <vPortFree>
				vPortFree( pxTCB );
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f000 ffc1 	bl	8016d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015dee:	e018      	b.n	8015e22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015df6:	2b01      	cmp	r3, #1
 8015df8:	d103      	bne.n	8015e02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 ffb8 	bl	8016d70 <vPortFree>
	}
 8015e00:	e00f      	b.n	8015e22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015e08:	2b02      	cmp	r3, #2
 8015e0a:	d00a      	beq.n	8015e22 <prvDeleteTCB+0x56>
	__asm volatile
 8015e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e10:	f383 8811 	msr	BASEPRI, r3
 8015e14:	f3bf 8f6f 	isb	sy
 8015e18:	f3bf 8f4f 	dsb	sy
 8015e1c:	60fb      	str	r3, [r7, #12]
}
 8015e1e:	bf00      	nop
 8015e20:	e7fe      	b.n	8015e20 <prvDeleteTCB+0x54>
	}
 8015e22:	bf00      	nop
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
	...

08015e2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b083      	sub	sp, #12
 8015e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e32:	4b0c      	ldr	r3, [pc, #48]	; (8015e64 <prvResetNextTaskUnblockTime+0x38>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d104      	bne.n	8015e46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015e3c:	4b0a      	ldr	r3, [pc, #40]	; (8015e68 <prvResetNextTaskUnblockTime+0x3c>)
 8015e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015e44:	e008      	b.n	8015e58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e46:	4b07      	ldr	r3, [pc, #28]	; (8015e64 <prvResetNextTaskUnblockTime+0x38>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	68db      	ldr	r3, [r3, #12]
 8015e4c:	68db      	ldr	r3, [r3, #12]
 8015e4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	685b      	ldr	r3, [r3, #4]
 8015e54:	4a04      	ldr	r2, [pc, #16]	; (8015e68 <prvResetNextTaskUnblockTime+0x3c>)
 8015e56:	6013      	str	r3, [r2, #0]
}
 8015e58:	bf00      	nop
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr
 8015e64:	24001cf0 	.word	0x24001cf0
 8015e68:	24001d58 	.word	0x24001d58

08015e6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015e72:	4b0b      	ldr	r3, [pc, #44]	; (8015ea0 <xTaskGetSchedulerState+0x34>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d102      	bne.n	8015e80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	607b      	str	r3, [r7, #4]
 8015e7e:	e008      	b.n	8015e92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e80:	4b08      	ldr	r3, [pc, #32]	; (8015ea4 <xTaskGetSchedulerState+0x38>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d102      	bne.n	8015e8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015e88:	2302      	movs	r3, #2
 8015e8a:	607b      	str	r3, [r7, #4]
 8015e8c:	e001      	b.n	8015e92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015e92:	687b      	ldr	r3, [r7, #4]
	}
 8015e94:	4618      	mov	r0, r3
 8015e96:	370c      	adds	r7, #12
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9e:	4770      	bx	lr
 8015ea0:	24001d44 	.word	0x24001d44
 8015ea4:	24001d60 	.word	0x24001d60

08015ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b086      	sub	sp, #24
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d056      	beq.n	8015f6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015ebe:	4b2e      	ldr	r3, [pc, #184]	; (8015f78 <xTaskPriorityDisinherit+0xd0>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	693a      	ldr	r2, [r7, #16]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d00a      	beq.n	8015ede <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ecc:	f383 8811 	msr	BASEPRI, r3
 8015ed0:	f3bf 8f6f 	isb	sy
 8015ed4:	f3bf 8f4f 	dsb	sy
 8015ed8:	60fb      	str	r3, [r7, #12]
}
 8015eda:	bf00      	nop
 8015edc:	e7fe      	b.n	8015edc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d10a      	bne.n	8015efc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eea:	f383 8811 	msr	BASEPRI, r3
 8015eee:	f3bf 8f6f 	isb	sy
 8015ef2:	f3bf 8f4f 	dsb	sy
 8015ef6:	60bb      	str	r3, [r7, #8]
}
 8015ef8:	bf00      	nop
 8015efa:	e7fe      	b.n	8015efa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f00:	1e5a      	subs	r2, r3, #1
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d02c      	beq.n	8015f6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d128      	bne.n	8015f6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fe f9ba 	bl	8014298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f3c:	4b0f      	ldr	r3, [pc, #60]	; (8015f7c <xTaskPriorityDisinherit+0xd4>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d903      	bls.n	8015f4c <xTaskPriorityDisinherit+0xa4>
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f48:	4a0c      	ldr	r2, [pc, #48]	; (8015f7c <xTaskPriorityDisinherit+0xd4>)
 8015f4a:	6013      	str	r3, [r2, #0]
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f50:	4613      	mov	r3, r2
 8015f52:	009b      	lsls	r3, r3, #2
 8015f54:	4413      	add	r3, r2
 8015f56:	009b      	lsls	r3, r3, #2
 8015f58:	4a09      	ldr	r2, [pc, #36]	; (8015f80 <xTaskPriorityDisinherit+0xd8>)
 8015f5a:	441a      	add	r2, r3
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	3304      	adds	r3, #4
 8015f60:	4619      	mov	r1, r3
 8015f62:	4610      	mov	r0, r2
 8015f64:	f7fe f93b 	bl	80141de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015f68:	2301      	movs	r3, #1
 8015f6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015f6c:	697b      	ldr	r3, [r7, #20]
	}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3718      	adds	r7, #24
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	24001864 	.word	0x24001864
 8015f7c:	24001d40 	.word	0x24001d40
 8015f80:	24001868 	.word	0x24001868

08015f84 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015f8a:	4b09      	ldr	r3, [pc, #36]	; (8015fb0 <uxTaskResetEventItemValue+0x2c>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	699b      	ldr	r3, [r3, #24]
 8015f90:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f92:	4b07      	ldr	r3, [pc, #28]	; (8015fb0 <uxTaskResetEventItemValue+0x2c>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f98:	4b05      	ldr	r3, [pc, #20]	; (8015fb0 <uxTaskResetEventItemValue+0x2c>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015fa0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015fa2:	687b      	ldr	r3, [r7, #4]
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	370c      	adds	r7, #12
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fae:	4770      	bx	lr
 8015fb0:	24001864 	.word	0x24001864

08015fb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015fbe:	4b21      	ldr	r3, [pc, #132]	; (8016044 <prvAddCurrentTaskToDelayedList+0x90>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015fc4:	4b20      	ldr	r3, [pc, #128]	; (8016048 <prvAddCurrentTaskToDelayedList+0x94>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	3304      	adds	r3, #4
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7fe f964 	bl	8014298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fd6:	d10a      	bne.n	8015fee <prvAddCurrentTaskToDelayedList+0x3a>
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d007      	beq.n	8015fee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015fde:	4b1a      	ldr	r3, [pc, #104]	; (8016048 <prvAddCurrentTaskToDelayedList+0x94>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	3304      	adds	r3, #4
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	4819      	ldr	r0, [pc, #100]	; (801604c <prvAddCurrentTaskToDelayedList+0x98>)
 8015fe8:	f7fe f8f9 	bl	80141de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015fec:	e026      	b.n	801603c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015fee:	68fa      	ldr	r2, [r7, #12]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015ff6:	4b14      	ldr	r3, [pc, #80]	; (8016048 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68ba      	ldr	r2, [r7, #8]
 8015ffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015ffe:	68ba      	ldr	r2, [r7, #8]
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	429a      	cmp	r2, r3
 8016004:	d209      	bcs.n	801601a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016006:	4b12      	ldr	r3, [pc, #72]	; (8016050 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	4b0f      	ldr	r3, [pc, #60]	; (8016048 <prvAddCurrentTaskToDelayedList+0x94>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	3304      	adds	r3, #4
 8016010:	4619      	mov	r1, r3
 8016012:	4610      	mov	r0, r2
 8016014:	f7fe f907 	bl	8014226 <vListInsert>
}
 8016018:	e010      	b.n	801603c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801601a:	4b0e      	ldr	r3, [pc, #56]	; (8016054 <prvAddCurrentTaskToDelayedList+0xa0>)
 801601c:	681a      	ldr	r2, [r3, #0]
 801601e:	4b0a      	ldr	r3, [pc, #40]	; (8016048 <prvAddCurrentTaskToDelayedList+0x94>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	3304      	adds	r3, #4
 8016024:	4619      	mov	r1, r3
 8016026:	4610      	mov	r0, r2
 8016028:	f7fe f8fd 	bl	8014226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801602c:	4b0a      	ldr	r3, [pc, #40]	; (8016058 <prvAddCurrentTaskToDelayedList+0xa4>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	68ba      	ldr	r2, [r7, #8]
 8016032:	429a      	cmp	r2, r3
 8016034:	d202      	bcs.n	801603c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016036:	4a08      	ldr	r2, [pc, #32]	; (8016058 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	6013      	str	r3, [r2, #0]
}
 801603c:	bf00      	nop
 801603e:	3710      	adds	r7, #16
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	24001d3c 	.word	0x24001d3c
 8016048:	24001864 	.word	0x24001864
 801604c:	24001d24 	.word	0x24001d24
 8016050:	24001cf4 	.word	0x24001cf4
 8016054:	24001cf0 	.word	0x24001cf0
 8016058:	24001d58 	.word	0x24001d58

0801605c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b08a      	sub	sp, #40	; 0x28
 8016060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016062:	2300      	movs	r3, #0
 8016064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016066:	f000 fb07 	bl	8016678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801606a:	4b1c      	ldr	r3, [pc, #112]	; (80160dc <xTimerCreateTimerTask+0x80>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d021      	beq.n	80160b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016072:	2300      	movs	r3, #0
 8016074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016076:	2300      	movs	r3, #0
 8016078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801607a:	1d3a      	adds	r2, r7, #4
 801607c:	f107 0108 	add.w	r1, r7, #8
 8016080:	f107 030c 	add.w	r3, r7, #12
 8016084:	4618      	mov	r0, r3
 8016086:	f7fd fdf7 	bl	8013c78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801608a:	6879      	ldr	r1, [r7, #4]
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	68fa      	ldr	r2, [r7, #12]
 8016090:	9202      	str	r2, [sp, #8]
 8016092:	9301      	str	r3, [sp, #4]
 8016094:	2302      	movs	r3, #2
 8016096:	9300      	str	r3, [sp, #0]
 8016098:	2300      	movs	r3, #0
 801609a:	460a      	mov	r2, r1
 801609c:	4910      	ldr	r1, [pc, #64]	; (80160e0 <xTimerCreateTimerTask+0x84>)
 801609e:	4811      	ldr	r0, [pc, #68]	; (80160e4 <xTimerCreateTimerTask+0x88>)
 80160a0:	f7fe ff06 	bl	8014eb0 <xTaskCreateStatic>
 80160a4:	4603      	mov	r3, r0
 80160a6:	4a10      	ldr	r2, [pc, #64]	; (80160e8 <xTimerCreateTimerTask+0x8c>)
 80160a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80160aa:	4b0f      	ldr	r3, [pc, #60]	; (80160e8 <xTimerCreateTimerTask+0x8c>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d001      	beq.n	80160b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80160b2:	2301      	movs	r3, #1
 80160b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d10a      	bne.n	80160d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80160bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c0:	f383 8811 	msr	BASEPRI, r3
 80160c4:	f3bf 8f6f 	isb	sy
 80160c8:	f3bf 8f4f 	dsb	sy
 80160cc:	613b      	str	r3, [r7, #16]
}
 80160ce:	bf00      	nop
 80160d0:	e7fe      	b.n	80160d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80160d2:	697b      	ldr	r3, [r7, #20]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	24001d94 	.word	0x24001d94
 80160e0:	08017cdc 	.word	0x08017cdc
 80160e4:	08016221 	.word	0x08016221
 80160e8:	24001d98 	.word	0x24001d98

080160ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b08a      	sub	sp, #40	; 0x28
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
 80160f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80160fa:	2300      	movs	r3, #0
 80160fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d10a      	bne.n	801611a <xTimerGenericCommand+0x2e>
	__asm volatile
 8016104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016108:	f383 8811 	msr	BASEPRI, r3
 801610c:	f3bf 8f6f 	isb	sy
 8016110:	f3bf 8f4f 	dsb	sy
 8016114:	623b      	str	r3, [r7, #32]
}
 8016116:	bf00      	nop
 8016118:	e7fe      	b.n	8016118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801611a:	4b1a      	ldr	r3, [pc, #104]	; (8016184 <xTimerGenericCommand+0x98>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d02a      	beq.n	8016178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	2b05      	cmp	r3, #5
 8016132:	dc18      	bgt.n	8016166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016134:	f7ff fe9a 	bl	8015e6c <xTaskGetSchedulerState>
 8016138:	4603      	mov	r3, r0
 801613a:	2b02      	cmp	r3, #2
 801613c:	d109      	bne.n	8016152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801613e:	4b11      	ldr	r3, [pc, #68]	; (8016184 <xTimerGenericCommand+0x98>)
 8016140:	6818      	ldr	r0, [r3, #0]
 8016142:	f107 0110 	add.w	r1, r7, #16
 8016146:	2300      	movs	r3, #0
 8016148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801614a:	f7fe fa0d 	bl	8014568 <xQueueGenericSend>
 801614e:	6278      	str	r0, [r7, #36]	; 0x24
 8016150:	e012      	b.n	8016178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016152:	4b0c      	ldr	r3, [pc, #48]	; (8016184 <xTimerGenericCommand+0x98>)
 8016154:	6818      	ldr	r0, [r3, #0]
 8016156:	f107 0110 	add.w	r1, r7, #16
 801615a:	2300      	movs	r3, #0
 801615c:	2200      	movs	r2, #0
 801615e:	f7fe fa03 	bl	8014568 <xQueueGenericSend>
 8016162:	6278      	str	r0, [r7, #36]	; 0x24
 8016164:	e008      	b.n	8016178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016166:	4b07      	ldr	r3, [pc, #28]	; (8016184 <xTimerGenericCommand+0x98>)
 8016168:	6818      	ldr	r0, [r3, #0]
 801616a:	f107 0110 	add.w	r1, r7, #16
 801616e:	2300      	movs	r3, #0
 8016170:	683a      	ldr	r2, [r7, #0]
 8016172:	f7fe faf7 	bl	8014764 <xQueueGenericSendFromISR>
 8016176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801617a:	4618      	mov	r0, r3
 801617c:	3728      	adds	r7, #40	; 0x28
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	24001d94 	.word	0x24001d94

08016188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b088      	sub	sp, #32
 801618c:	af02      	add	r7, sp, #8
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016192:	4b22      	ldr	r3, [pc, #136]	; (801621c <prvProcessExpiredTimer+0x94>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	68db      	ldr	r3, [r3, #12]
 8016198:	68db      	ldr	r3, [r3, #12]
 801619a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	3304      	adds	r3, #4
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7fe f879 	bl	8014298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161ac:	f003 0304 	and.w	r3, r3, #4
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d022      	beq.n	80161fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	699a      	ldr	r2, [r3, #24]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	18d1      	adds	r1, r2, r3
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	683a      	ldr	r2, [r7, #0]
 80161c0:	6978      	ldr	r0, [r7, #20]
 80161c2:	f000 f8d1 	bl	8016368 <prvInsertTimerInActiveList>
 80161c6:	4603      	mov	r3, r0
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d01f      	beq.n	801620c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161cc:	2300      	movs	r3, #0
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	2300      	movs	r3, #0
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	2100      	movs	r1, #0
 80161d6:	6978      	ldr	r0, [r7, #20]
 80161d8:	f7ff ff88 	bl	80160ec <xTimerGenericCommand>
 80161dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80161de:	693b      	ldr	r3, [r7, #16]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d113      	bne.n	801620c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80161e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e8:	f383 8811 	msr	BASEPRI, r3
 80161ec:	f3bf 8f6f 	isb	sy
 80161f0:	f3bf 8f4f 	dsb	sy
 80161f4:	60fb      	str	r3, [r7, #12]
}
 80161f6:	bf00      	nop
 80161f8:	e7fe      	b.n	80161f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016200:	f023 0301 	bic.w	r3, r3, #1
 8016204:	b2da      	uxtb	r2, r3
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801620c:	697b      	ldr	r3, [r7, #20]
 801620e:	6a1b      	ldr	r3, [r3, #32]
 8016210:	6978      	ldr	r0, [r7, #20]
 8016212:	4798      	blx	r3
}
 8016214:	bf00      	nop
 8016216:	3718      	adds	r7, #24
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	24001d8c 	.word	0x24001d8c

08016220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016228:	f107 0308 	add.w	r3, r7, #8
 801622c:	4618      	mov	r0, r3
 801622e:	f000 f857 	bl	80162e0 <prvGetNextExpireTime>
 8016232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	4619      	mov	r1, r3
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f000 f803 	bl	8016244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801623e:	f000 f8d5 	bl	80163ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016242:	e7f1      	b.n	8016228 <prvTimerTask+0x8>

08016244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801624e:	f7ff f985 	bl	801555c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016252:	f107 0308 	add.w	r3, r7, #8
 8016256:	4618      	mov	r0, r3
 8016258:	f000 f866 	bl	8016328 <prvSampleTimeNow>
 801625c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801625e:	68bb      	ldr	r3, [r7, #8]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d130      	bne.n	80162c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d10a      	bne.n	8016280 <prvProcessTimerOrBlockTask+0x3c>
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	429a      	cmp	r2, r3
 8016270:	d806      	bhi.n	8016280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016272:	f7ff f981 	bl	8015578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016276:	68f9      	ldr	r1, [r7, #12]
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f7ff ff85 	bl	8016188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801627e:	e024      	b.n	80162ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d008      	beq.n	8016298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016286:	4b13      	ldr	r3, [pc, #76]	; (80162d4 <prvProcessTimerOrBlockTask+0x90>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d101      	bne.n	8016294 <prvProcessTimerOrBlockTask+0x50>
 8016290:	2301      	movs	r3, #1
 8016292:	e000      	b.n	8016296 <prvProcessTimerOrBlockTask+0x52>
 8016294:	2300      	movs	r3, #0
 8016296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016298:	4b0f      	ldr	r3, [pc, #60]	; (80162d8 <prvProcessTimerOrBlockTask+0x94>)
 801629a:	6818      	ldr	r0, [r3, #0]
 801629c:	687a      	ldr	r2, [r7, #4]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	1ad3      	subs	r3, r2, r3
 80162a2:	683a      	ldr	r2, [r7, #0]
 80162a4:	4619      	mov	r1, r3
 80162a6:	f7fe fdcf 	bl	8014e48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80162aa:	f7ff f965 	bl	8015578 <xTaskResumeAll>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d10a      	bne.n	80162ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80162b4:	4b09      	ldr	r3, [pc, #36]	; (80162dc <prvProcessTimerOrBlockTask+0x98>)
 80162b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162ba:	601a      	str	r2, [r3, #0]
 80162bc:	f3bf 8f4f 	dsb	sy
 80162c0:	f3bf 8f6f 	isb	sy
}
 80162c4:	e001      	b.n	80162ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80162c6:	f7ff f957 	bl	8015578 <xTaskResumeAll>
}
 80162ca:	bf00      	nop
 80162cc:	3710      	adds	r7, #16
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	24001d90 	.word	0x24001d90
 80162d8:	24001d94 	.word	0x24001d94
 80162dc:	e000ed04 	.word	0xe000ed04

080162e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80162e8:	4b0e      	ldr	r3, [pc, #56]	; (8016324 <prvGetNextExpireTime+0x44>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d101      	bne.n	80162f6 <prvGetNextExpireTime+0x16>
 80162f2:	2201      	movs	r2, #1
 80162f4:	e000      	b.n	80162f8 <prvGetNextExpireTime+0x18>
 80162f6:	2200      	movs	r2, #0
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d105      	bne.n	8016310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016304:	4b07      	ldr	r3, [pc, #28]	; (8016324 <prvGetNextExpireTime+0x44>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	68db      	ldr	r3, [r3, #12]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	60fb      	str	r3, [r7, #12]
 801630e:	e001      	b.n	8016314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016310:	2300      	movs	r3, #0
 8016312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016314:	68fb      	ldr	r3, [r7, #12]
}
 8016316:	4618      	mov	r0, r3
 8016318:	3714      	adds	r7, #20
 801631a:	46bd      	mov	sp, r7
 801631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016320:	4770      	bx	lr
 8016322:	bf00      	nop
 8016324:	24001d8c 	.word	0x24001d8c

08016328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016330:	f7ff f9c0 	bl	80156b4 <xTaskGetTickCount>
 8016334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016336:	4b0b      	ldr	r3, [pc, #44]	; (8016364 <prvSampleTimeNow+0x3c>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	68fa      	ldr	r2, [r7, #12]
 801633c:	429a      	cmp	r2, r3
 801633e:	d205      	bcs.n	801634c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016340:	f000 f936 	bl	80165b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2201      	movs	r2, #1
 8016348:	601a      	str	r2, [r3, #0]
 801634a:	e002      	b.n	8016352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2200      	movs	r2, #0
 8016350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016352:	4a04      	ldr	r2, [pc, #16]	; (8016364 <prvSampleTimeNow+0x3c>)
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016358:	68fb      	ldr	r3, [r7, #12]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3710      	adds	r7, #16
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	24001d9c 	.word	0x24001d9c

08016368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b086      	sub	sp, #24
 801636c:	af00      	add	r7, sp, #0
 801636e:	60f8      	str	r0, [r7, #12]
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	607a      	str	r2, [r7, #4]
 8016374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016376:	2300      	movs	r3, #0
 8016378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	68ba      	ldr	r2, [r7, #8]
 801637e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	68fa      	ldr	r2, [r7, #12]
 8016384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016386:	68ba      	ldr	r2, [r7, #8]
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	429a      	cmp	r2, r3
 801638c:	d812      	bhi.n	80163b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	1ad2      	subs	r2, r2, r3
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	699b      	ldr	r3, [r3, #24]
 8016398:	429a      	cmp	r2, r3
 801639a:	d302      	bcc.n	80163a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801639c:	2301      	movs	r3, #1
 801639e:	617b      	str	r3, [r7, #20]
 80163a0:	e01b      	b.n	80163da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80163a2:	4b10      	ldr	r3, [pc, #64]	; (80163e4 <prvInsertTimerInActiveList+0x7c>)
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	3304      	adds	r3, #4
 80163aa:	4619      	mov	r1, r3
 80163ac:	4610      	mov	r0, r2
 80163ae:	f7fd ff3a 	bl	8014226 <vListInsert>
 80163b2:	e012      	b.n	80163da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d206      	bcs.n	80163ca <prvInsertTimerInActiveList+0x62>
 80163bc:	68ba      	ldr	r2, [r7, #8]
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d302      	bcc.n	80163ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80163c4:	2301      	movs	r3, #1
 80163c6:	617b      	str	r3, [r7, #20]
 80163c8:	e007      	b.n	80163da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80163ca:	4b07      	ldr	r3, [pc, #28]	; (80163e8 <prvInsertTimerInActiveList+0x80>)
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	3304      	adds	r3, #4
 80163d2:	4619      	mov	r1, r3
 80163d4:	4610      	mov	r0, r2
 80163d6:	f7fd ff26 	bl	8014226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80163da:	697b      	ldr	r3, [r7, #20]
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3718      	adds	r7, #24
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	24001d90 	.word	0x24001d90
 80163e8:	24001d8c 	.word	0x24001d8c

080163ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b08e      	sub	sp, #56	; 0x38
 80163f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80163f2:	e0ca      	b.n	801658a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	da18      	bge.n	801642c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80163fa:	1d3b      	adds	r3, r7, #4
 80163fc:	3304      	adds	r3, #4
 80163fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016402:	2b00      	cmp	r3, #0
 8016404:	d10a      	bne.n	801641c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8016406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801640a:	f383 8811 	msr	BASEPRI, r3
 801640e:	f3bf 8f6f 	isb	sy
 8016412:	f3bf 8f4f 	dsb	sy
 8016416:	61fb      	str	r3, [r7, #28]
}
 8016418:	bf00      	nop
 801641a:	e7fe      	b.n	801641a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016422:	6850      	ldr	r0, [r2, #4]
 8016424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016426:	6892      	ldr	r2, [r2, #8]
 8016428:	4611      	mov	r1, r2
 801642a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2b00      	cmp	r3, #0
 8016430:	f2c0 80aa 	blt.w	8016588 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801643a:	695b      	ldr	r3, [r3, #20]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d004      	beq.n	801644a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016442:	3304      	adds	r3, #4
 8016444:	4618      	mov	r0, r3
 8016446:	f7fd ff27 	bl	8014298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801644a:	463b      	mov	r3, r7
 801644c:	4618      	mov	r0, r3
 801644e:	f7ff ff6b 	bl	8016328 <prvSampleTimeNow>
 8016452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2b09      	cmp	r3, #9
 8016458:	f200 8097 	bhi.w	801658a <prvProcessReceivedCommands+0x19e>
 801645c:	a201      	add	r2, pc, #4	; (adr r2, 8016464 <prvProcessReceivedCommands+0x78>)
 801645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016462:	bf00      	nop
 8016464:	0801648d 	.word	0x0801648d
 8016468:	0801648d 	.word	0x0801648d
 801646c:	0801648d 	.word	0x0801648d
 8016470:	08016501 	.word	0x08016501
 8016474:	08016515 	.word	0x08016515
 8016478:	0801655f 	.word	0x0801655f
 801647c:	0801648d 	.word	0x0801648d
 8016480:	0801648d 	.word	0x0801648d
 8016484:	08016501 	.word	0x08016501
 8016488:	08016515 	.word	0x08016515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016492:	f043 0301 	orr.w	r3, r3, #1
 8016496:	b2da      	uxtb	r2, r3
 8016498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801649e:	68ba      	ldr	r2, [r7, #8]
 80164a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a2:	699b      	ldr	r3, [r3, #24]
 80164a4:	18d1      	adds	r1, r2, r3
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164ac:	f7ff ff5c 	bl	8016368 <prvInsertTimerInActiveList>
 80164b0:	4603      	mov	r3, r0
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d069      	beq.n	801658a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80164b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b8:	6a1b      	ldr	r3, [r3, #32]
 80164ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80164be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164c4:	f003 0304 	and.w	r3, r3, #4
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d05e      	beq.n	801658a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80164cc:	68ba      	ldr	r2, [r7, #8]
 80164ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d0:	699b      	ldr	r3, [r3, #24]
 80164d2:	441a      	add	r2, r3
 80164d4:	2300      	movs	r3, #0
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	2300      	movs	r3, #0
 80164da:	2100      	movs	r1, #0
 80164dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164de:	f7ff fe05 	bl	80160ec <xTimerGenericCommand>
 80164e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80164e4:	6a3b      	ldr	r3, [r7, #32]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d14f      	bne.n	801658a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80164ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ee:	f383 8811 	msr	BASEPRI, r3
 80164f2:	f3bf 8f6f 	isb	sy
 80164f6:	f3bf 8f4f 	dsb	sy
 80164fa:	61bb      	str	r3, [r7, #24]
}
 80164fc:	bf00      	nop
 80164fe:	e7fe      	b.n	80164fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016506:	f023 0301 	bic.w	r3, r3, #1
 801650a:	b2da      	uxtb	r2, r3
 801650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016512:	e03a      	b.n	801658a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801651a:	f043 0301 	orr.w	r3, r3, #1
 801651e:	b2da      	uxtb	r2, r3
 8016520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016526:	68ba      	ldr	r2, [r7, #8]
 8016528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652e:	699b      	ldr	r3, [r3, #24]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d10a      	bne.n	801654a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016538:	f383 8811 	msr	BASEPRI, r3
 801653c:	f3bf 8f6f 	isb	sy
 8016540:	f3bf 8f4f 	dsb	sy
 8016544:	617b      	str	r3, [r7, #20]
}
 8016546:	bf00      	nop
 8016548:	e7fe      	b.n	8016548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654c:	699a      	ldr	r2, [r3, #24]
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	18d1      	adds	r1, r2, r3
 8016552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016558:	f7ff ff06 	bl	8016368 <prvInsertTimerInActiveList>
					break;
 801655c:	e015      	b.n	801658a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016564:	f003 0302 	and.w	r3, r3, #2
 8016568:	2b00      	cmp	r3, #0
 801656a:	d103      	bne.n	8016574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801656c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801656e:	f000 fbff 	bl	8016d70 <vPortFree>
 8016572:	e00a      	b.n	801658a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801657a:	f023 0301 	bic.w	r3, r3, #1
 801657e:	b2da      	uxtb	r2, r3
 8016580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016586:	e000      	b.n	801658a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801658a:	4b08      	ldr	r3, [pc, #32]	; (80165ac <prvProcessReceivedCommands+0x1c0>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	1d39      	adds	r1, r7, #4
 8016590:	2200      	movs	r2, #0
 8016592:	4618      	mov	r0, r3
 8016594:	f7fe f982 	bl	801489c <xQueueReceive>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	f47f af2a 	bne.w	80163f4 <prvProcessReceivedCommands+0x8>
	}
}
 80165a0:	bf00      	nop
 80165a2:	bf00      	nop
 80165a4:	3730      	adds	r7, #48	; 0x30
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	24001d94 	.word	0x24001d94

080165b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b088      	sub	sp, #32
 80165b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80165b6:	e048      	b.n	801664a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80165b8:	4b2d      	ldr	r3, [pc, #180]	; (8016670 <prvSwitchTimerLists+0xc0>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	68db      	ldr	r3, [r3, #12]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165c2:	4b2b      	ldr	r3, [pc, #172]	; (8016670 <prvSwitchTimerLists+0xc0>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	68db      	ldr	r3, [r3, #12]
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	3304      	adds	r3, #4
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7fd fe61 	bl	8014298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	6a1b      	ldr	r3, [r3, #32]
 80165da:	68f8      	ldr	r0, [r7, #12]
 80165dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80165e4:	f003 0304 	and.w	r3, r3, #4
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d02e      	beq.n	801664a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	699b      	ldr	r3, [r3, #24]
 80165f0:	693a      	ldr	r2, [r7, #16]
 80165f2:	4413      	add	r3, r2
 80165f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80165f6:	68ba      	ldr	r2, [r7, #8]
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d90e      	bls.n	801661c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	68ba      	ldr	r2, [r7, #8]
 8016602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	68fa      	ldr	r2, [r7, #12]
 8016608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801660a:	4b19      	ldr	r3, [pc, #100]	; (8016670 <prvSwitchTimerLists+0xc0>)
 801660c:	681a      	ldr	r2, [r3, #0]
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	3304      	adds	r3, #4
 8016612:	4619      	mov	r1, r3
 8016614:	4610      	mov	r0, r2
 8016616:	f7fd fe06 	bl	8014226 <vListInsert>
 801661a:	e016      	b.n	801664a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801661c:	2300      	movs	r3, #0
 801661e:	9300      	str	r3, [sp, #0]
 8016620:	2300      	movs	r3, #0
 8016622:	693a      	ldr	r2, [r7, #16]
 8016624:	2100      	movs	r1, #0
 8016626:	68f8      	ldr	r0, [r7, #12]
 8016628:	f7ff fd60 	bl	80160ec <xTimerGenericCommand>
 801662c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d10a      	bne.n	801664a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016638:	f383 8811 	msr	BASEPRI, r3
 801663c:	f3bf 8f6f 	isb	sy
 8016640:	f3bf 8f4f 	dsb	sy
 8016644:	603b      	str	r3, [r7, #0]
}
 8016646:	bf00      	nop
 8016648:	e7fe      	b.n	8016648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801664a:	4b09      	ldr	r3, [pc, #36]	; (8016670 <prvSwitchTimerLists+0xc0>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d1b1      	bne.n	80165b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016654:	4b06      	ldr	r3, [pc, #24]	; (8016670 <prvSwitchTimerLists+0xc0>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801665a:	4b06      	ldr	r3, [pc, #24]	; (8016674 <prvSwitchTimerLists+0xc4>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	4a04      	ldr	r2, [pc, #16]	; (8016670 <prvSwitchTimerLists+0xc0>)
 8016660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016662:	4a04      	ldr	r2, [pc, #16]	; (8016674 <prvSwitchTimerLists+0xc4>)
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	6013      	str	r3, [r2, #0]
}
 8016668:	bf00      	nop
 801666a:	3718      	adds	r7, #24
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	24001d8c 	.word	0x24001d8c
 8016674:	24001d90 	.word	0x24001d90

08016678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801667e:	f000 f989 	bl	8016994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016682:	4b15      	ldr	r3, [pc, #84]	; (80166d8 <prvCheckForValidListAndQueue+0x60>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d120      	bne.n	80166cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801668a:	4814      	ldr	r0, [pc, #80]	; (80166dc <prvCheckForValidListAndQueue+0x64>)
 801668c:	f7fd fd7a 	bl	8014184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016690:	4813      	ldr	r0, [pc, #76]	; (80166e0 <prvCheckForValidListAndQueue+0x68>)
 8016692:	f7fd fd77 	bl	8014184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016696:	4b13      	ldr	r3, [pc, #76]	; (80166e4 <prvCheckForValidListAndQueue+0x6c>)
 8016698:	4a10      	ldr	r2, [pc, #64]	; (80166dc <prvCheckForValidListAndQueue+0x64>)
 801669a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801669c:	4b12      	ldr	r3, [pc, #72]	; (80166e8 <prvCheckForValidListAndQueue+0x70>)
 801669e:	4a10      	ldr	r2, [pc, #64]	; (80166e0 <prvCheckForValidListAndQueue+0x68>)
 80166a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80166a2:	2300      	movs	r3, #0
 80166a4:	9300      	str	r3, [sp, #0]
 80166a6:	4b11      	ldr	r3, [pc, #68]	; (80166ec <prvCheckForValidListAndQueue+0x74>)
 80166a8:	4a11      	ldr	r2, [pc, #68]	; (80166f0 <prvCheckForValidListAndQueue+0x78>)
 80166aa:	2110      	movs	r1, #16
 80166ac:	200a      	movs	r0, #10
 80166ae:	f7fd fe85 	bl	80143bc <xQueueGenericCreateStatic>
 80166b2:	4603      	mov	r3, r0
 80166b4:	4a08      	ldr	r2, [pc, #32]	; (80166d8 <prvCheckForValidListAndQueue+0x60>)
 80166b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80166b8:	4b07      	ldr	r3, [pc, #28]	; (80166d8 <prvCheckForValidListAndQueue+0x60>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d005      	beq.n	80166cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80166c0:	4b05      	ldr	r3, [pc, #20]	; (80166d8 <prvCheckForValidListAndQueue+0x60>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	490b      	ldr	r1, [pc, #44]	; (80166f4 <prvCheckForValidListAndQueue+0x7c>)
 80166c6:	4618      	mov	r0, r3
 80166c8:	f7fe fb94 	bl	8014df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80166cc:	f000 f992 	bl	80169f4 <vPortExitCritical>
}
 80166d0:	bf00      	nop
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	24001d94 	.word	0x24001d94
 80166dc:	24001d64 	.word	0x24001d64
 80166e0:	24001d78 	.word	0x24001d78
 80166e4:	24001d8c 	.word	0x24001d8c
 80166e8:	24001d90 	.word	0x24001d90
 80166ec:	24001e40 	.word	0x24001e40
 80166f0:	24001da0 	.word	0x24001da0
 80166f4:	08017ce4 	.word	0x08017ce4

080166f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08a      	sub	sp, #40	; 0x28
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
 8016704:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016706:	f06f 0301 	mvn.w	r3, #1
 801670a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016718:	4b06      	ldr	r3, [pc, #24]	; (8016734 <xTimerPendFunctionCallFromISR+0x3c>)
 801671a:	6818      	ldr	r0, [r3, #0]
 801671c:	f107 0114 	add.w	r1, r7, #20
 8016720:	2300      	movs	r3, #0
 8016722:	683a      	ldr	r2, [r7, #0]
 8016724:	f7fe f81e 	bl	8014764 <xQueueGenericSendFromISR>
 8016728:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801672c:	4618      	mov	r0, r3
 801672e:	3728      	adds	r7, #40	; 0x28
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	24001d94 	.word	0x24001d94

08016738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016738:	b480      	push	{r7}
 801673a:	b085      	sub	sp, #20
 801673c:	af00      	add	r7, sp, #0
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	3b04      	subs	r3, #4
 8016748:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	3b04      	subs	r3, #4
 8016756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	f023 0201 	bic.w	r2, r3, #1
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	3b04      	subs	r3, #4
 8016766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016768:	4a0c      	ldr	r2, [pc, #48]	; (801679c <pxPortInitialiseStack+0x64>)
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	3b14      	subs	r3, #20
 8016772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	3b04      	subs	r3, #4
 801677e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	f06f 0202 	mvn.w	r2, #2
 8016786:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	3b20      	subs	r3, #32
 801678c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801678e:	68fb      	ldr	r3, [r7, #12]
}
 8016790:	4618      	mov	r0, r3
 8016792:	3714      	adds	r7, #20
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr
 801679c:	080167a1 	.word	0x080167a1

080167a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80167a0:	b480      	push	{r7}
 80167a2:	b085      	sub	sp, #20
 80167a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80167a6:	2300      	movs	r3, #0
 80167a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80167aa:	4b12      	ldr	r3, [pc, #72]	; (80167f4 <prvTaskExitError+0x54>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80167b2:	d00a      	beq.n	80167ca <prvTaskExitError+0x2a>
	__asm volatile
 80167b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b8:	f383 8811 	msr	BASEPRI, r3
 80167bc:	f3bf 8f6f 	isb	sy
 80167c0:	f3bf 8f4f 	dsb	sy
 80167c4:	60fb      	str	r3, [r7, #12]
}
 80167c6:	bf00      	nop
 80167c8:	e7fe      	b.n	80167c8 <prvTaskExitError+0x28>
	__asm volatile
 80167ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ce:	f383 8811 	msr	BASEPRI, r3
 80167d2:	f3bf 8f6f 	isb	sy
 80167d6:	f3bf 8f4f 	dsb	sy
 80167da:	60bb      	str	r3, [r7, #8]
}
 80167dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80167de:	bf00      	nop
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d0fc      	beq.n	80167e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80167e6:	bf00      	nop
 80167e8:	bf00      	nop
 80167ea:	3714      	adds	r7, #20
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr
 80167f4:	2400009c 	.word	0x2400009c
	...

08016800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016800:	4b07      	ldr	r3, [pc, #28]	; (8016820 <pxCurrentTCBConst2>)
 8016802:	6819      	ldr	r1, [r3, #0]
 8016804:	6808      	ldr	r0, [r1, #0]
 8016806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801680a:	f380 8809 	msr	PSP, r0
 801680e:	f3bf 8f6f 	isb	sy
 8016812:	f04f 0000 	mov.w	r0, #0
 8016816:	f380 8811 	msr	BASEPRI, r0
 801681a:	4770      	bx	lr
 801681c:	f3af 8000 	nop.w

08016820 <pxCurrentTCBConst2>:
 8016820:	24001864 	.word	0x24001864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016824:	bf00      	nop
 8016826:	bf00      	nop

08016828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016828:	4808      	ldr	r0, [pc, #32]	; (801684c <prvPortStartFirstTask+0x24>)
 801682a:	6800      	ldr	r0, [r0, #0]
 801682c:	6800      	ldr	r0, [r0, #0]
 801682e:	f380 8808 	msr	MSP, r0
 8016832:	f04f 0000 	mov.w	r0, #0
 8016836:	f380 8814 	msr	CONTROL, r0
 801683a:	b662      	cpsie	i
 801683c:	b661      	cpsie	f
 801683e:	f3bf 8f4f 	dsb	sy
 8016842:	f3bf 8f6f 	isb	sy
 8016846:	df00      	svc	0
 8016848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801684a:	bf00      	nop
 801684c:	e000ed08 	.word	0xe000ed08

08016850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016856:	4b46      	ldr	r3, [pc, #280]	; (8016970 <xPortStartScheduler+0x120>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4a46      	ldr	r2, [pc, #280]	; (8016974 <xPortStartScheduler+0x124>)
 801685c:	4293      	cmp	r3, r2
 801685e:	d10a      	bne.n	8016876 <xPortStartScheduler+0x26>
	__asm volatile
 8016860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016864:	f383 8811 	msr	BASEPRI, r3
 8016868:	f3bf 8f6f 	isb	sy
 801686c:	f3bf 8f4f 	dsb	sy
 8016870:	613b      	str	r3, [r7, #16]
}
 8016872:	bf00      	nop
 8016874:	e7fe      	b.n	8016874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016876:	4b3e      	ldr	r3, [pc, #248]	; (8016970 <xPortStartScheduler+0x120>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	4a3f      	ldr	r2, [pc, #252]	; (8016978 <xPortStartScheduler+0x128>)
 801687c:	4293      	cmp	r3, r2
 801687e:	d10a      	bne.n	8016896 <xPortStartScheduler+0x46>
	__asm volatile
 8016880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016884:	f383 8811 	msr	BASEPRI, r3
 8016888:	f3bf 8f6f 	isb	sy
 801688c:	f3bf 8f4f 	dsb	sy
 8016890:	60fb      	str	r3, [r7, #12]
}
 8016892:	bf00      	nop
 8016894:	e7fe      	b.n	8016894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016896:	4b39      	ldr	r3, [pc, #228]	; (801697c <xPortStartScheduler+0x12c>)
 8016898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	22ff      	movs	r2, #255	; 0xff
 80168a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80168b0:	78fb      	ldrb	r3, [r7, #3]
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	4b31      	ldr	r3, [pc, #196]	; (8016980 <xPortStartScheduler+0x130>)
 80168bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80168be:	4b31      	ldr	r3, [pc, #196]	; (8016984 <xPortStartScheduler+0x134>)
 80168c0:	2207      	movs	r2, #7
 80168c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168c4:	e009      	b.n	80168da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80168c6:	4b2f      	ldr	r3, [pc, #188]	; (8016984 <xPortStartScheduler+0x134>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	3b01      	subs	r3, #1
 80168cc:	4a2d      	ldr	r2, [pc, #180]	; (8016984 <xPortStartScheduler+0x134>)
 80168ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80168d0:	78fb      	ldrb	r3, [r7, #3]
 80168d2:	b2db      	uxtb	r3, r3
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168da:	78fb      	ldrb	r3, [r7, #3]
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168e2:	2b80      	cmp	r3, #128	; 0x80
 80168e4:	d0ef      	beq.n	80168c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80168e6:	4b27      	ldr	r3, [pc, #156]	; (8016984 <xPortStartScheduler+0x134>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f1c3 0307 	rsb	r3, r3, #7
 80168ee:	2b04      	cmp	r3, #4
 80168f0:	d00a      	beq.n	8016908 <xPortStartScheduler+0xb8>
	__asm volatile
 80168f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f6:	f383 8811 	msr	BASEPRI, r3
 80168fa:	f3bf 8f6f 	isb	sy
 80168fe:	f3bf 8f4f 	dsb	sy
 8016902:	60bb      	str	r3, [r7, #8]
}
 8016904:	bf00      	nop
 8016906:	e7fe      	b.n	8016906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016908:	4b1e      	ldr	r3, [pc, #120]	; (8016984 <xPortStartScheduler+0x134>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	021b      	lsls	r3, r3, #8
 801690e:	4a1d      	ldr	r2, [pc, #116]	; (8016984 <xPortStartScheduler+0x134>)
 8016910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016912:	4b1c      	ldr	r3, [pc, #112]	; (8016984 <xPortStartScheduler+0x134>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801691a:	4a1a      	ldr	r2, [pc, #104]	; (8016984 <xPortStartScheduler+0x134>)
 801691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	b2da      	uxtb	r2, r3
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016926:	4b18      	ldr	r3, [pc, #96]	; (8016988 <xPortStartScheduler+0x138>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	4a17      	ldr	r2, [pc, #92]	; (8016988 <xPortStartScheduler+0x138>)
 801692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016932:	4b15      	ldr	r3, [pc, #84]	; (8016988 <xPortStartScheduler+0x138>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	4a14      	ldr	r2, [pc, #80]	; (8016988 <xPortStartScheduler+0x138>)
 8016938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801693e:	f000 f8dd 	bl	8016afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016942:	4b12      	ldr	r3, [pc, #72]	; (801698c <xPortStartScheduler+0x13c>)
 8016944:	2200      	movs	r2, #0
 8016946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016948:	f000 f8fc 	bl	8016b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801694c:	4b10      	ldr	r3, [pc, #64]	; (8016990 <xPortStartScheduler+0x140>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	4a0f      	ldr	r2, [pc, #60]	; (8016990 <xPortStartScheduler+0x140>)
 8016952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016958:	f7ff ff66 	bl	8016828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801695c:	f7fe ff7c 	bl	8015858 <vTaskSwitchContext>
	prvTaskExitError();
 8016960:	f7ff ff1e 	bl	80167a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016964:	2300      	movs	r3, #0
}
 8016966:	4618      	mov	r0, r3
 8016968:	3718      	adds	r7, #24
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	e000ed00 	.word	0xe000ed00
 8016974:	410fc271 	.word	0x410fc271
 8016978:	410fc270 	.word	0x410fc270
 801697c:	e000e400 	.word	0xe000e400
 8016980:	24001e90 	.word	0x24001e90
 8016984:	24001e94 	.word	0x24001e94
 8016988:	e000ed20 	.word	0xe000ed20
 801698c:	2400009c 	.word	0x2400009c
 8016990:	e000ef34 	.word	0xe000ef34

08016994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
	__asm volatile
 801699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801699e:	f383 8811 	msr	BASEPRI, r3
 80169a2:	f3bf 8f6f 	isb	sy
 80169a6:	f3bf 8f4f 	dsb	sy
 80169aa:	607b      	str	r3, [r7, #4]
}
 80169ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80169ae:	4b0f      	ldr	r3, [pc, #60]	; (80169ec <vPortEnterCritical+0x58>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	3301      	adds	r3, #1
 80169b4:	4a0d      	ldr	r2, [pc, #52]	; (80169ec <vPortEnterCritical+0x58>)
 80169b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80169b8:	4b0c      	ldr	r3, [pc, #48]	; (80169ec <vPortEnterCritical+0x58>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d10f      	bne.n	80169e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <vPortEnterCritical+0x5c>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	b2db      	uxtb	r3, r3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d00a      	beq.n	80169e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80169ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ce:	f383 8811 	msr	BASEPRI, r3
 80169d2:	f3bf 8f6f 	isb	sy
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	603b      	str	r3, [r7, #0]
}
 80169dc:	bf00      	nop
 80169de:	e7fe      	b.n	80169de <vPortEnterCritical+0x4a>
	}
}
 80169e0:	bf00      	nop
 80169e2:	370c      	adds	r7, #12
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr
 80169ec:	2400009c 	.word	0x2400009c
 80169f0:	e000ed04 	.word	0xe000ed04

080169f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80169fa:	4b12      	ldr	r3, [pc, #72]	; (8016a44 <vPortExitCritical+0x50>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d10a      	bne.n	8016a18 <vPortExitCritical+0x24>
	__asm volatile
 8016a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a06:	f383 8811 	msr	BASEPRI, r3
 8016a0a:	f3bf 8f6f 	isb	sy
 8016a0e:	f3bf 8f4f 	dsb	sy
 8016a12:	607b      	str	r3, [r7, #4]
}
 8016a14:	bf00      	nop
 8016a16:	e7fe      	b.n	8016a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016a18:	4b0a      	ldr	r3, [pc, #40]	; (8016a44 <vPortExitCritical+0x50>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	3b01      	subs	r3, #1
 8016a1e:	4a09      	ldr	r2, [pc, #36]	; (8016a44 <vPortExitCritical+0x50>)
 8016a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016a22:	4b08      	ldr	r3, [pc, #32]	; (8016a44 <vPortExitCritical+0x50>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d105      	bne.n	8016a36 <vPortExitCritical+0x42>
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	f383 8811 	msr	BASEPRI, r3
}
 8016a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016a36:	bf00      	nop
 8016a38:	370c      	adds	r7, #12
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
 8016a42:	bf00      	nop
 8016a44:	2400009c 	.word	0x2400009c
	...

08016a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016a50:	f3ef 8009 	mrs	r0, PSP
 8016a54:	f3bf 8f6f 	isb	sy
 8016a58:	4b15      	ldr	r3, [pc, #84]	; (8016ab0 <pxCurrentTCBConst>)
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	f01e 0f10 	tst.w	lr, #16
 8016a60:	bf08      	it	eq
 8016a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a6a:	6010      	str	r0, [r2, #0]
 8016a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016a74:	f380 8811 	msr	BASEPRI, r0
 8016a78:	f3bf 8f4f 	dsb	sy
 8016a7c:	f3bf 8f6f 	isb	sy
 8016a80:	f7fe feea 	bl	8015858 <vTaskSwitchContext>
 8016a84:	f04f 0000 	mov.w	r0, #0
 8016a88:	f380 8811 	msr	BASEPRI, r0
 8016a8c:	bc09      	pop	{r0, r3}
 8016a8e:	6819      	ldr	r1, [r3, #0]
 8016a90:	6808      	ldr	r0, [r1, #0]
 8016a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a96:	f01e 0f10 	tst.w	lr, #16
 8016a9a:	bf08      	it	eq
 8016a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016aa0:	f380 8809 	msr	PSP, r0
 8016aa4:	f3bf 8f6f 	isb	sy
 8016aa8:	4770      	bx	lr
 8016aaa:	bf00      	nop
 8016aac:	f3af 8000 	nop.w

08016ab0 <pxCurrentTCBConst>:
 8016ab0:	24001864 	.word	0x24001864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ab4:	bf00      	nop
 8016ab6:	bf00      	nop

08016ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
	__asm volatile
 8016abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac2:	f383 8811 	msr	BASEPRI, r3
 8016ac6:	f3bf 8f6f 	isb	sy
 8016aca:	f3bf 8f4f 	dsb	sy
 8016ace:	607b      	str	r3, [r7, #4]
}
 8016ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ad2:	f7fe fdff 	bl	80156d4 <xTaskIncrementTick>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d003      	beq.n	8016ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016adc:	4b06      	ldr	r3, [pc, #24]	; (8016af8 <xPortSysTickHandler+0x40>)
 8016ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ae2:	601a      	str	r2, [r3, #0]
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	f383 8811 	msr	BASEPRI, r3
}
 8016aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016af0:	bf00      	nop
 8016af2:	3708      	adds	r7, #8
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	e000ed04 	.word	0xe000ed04

08016afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016afc:	b480      	push	{r7}
 8016afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016b00:	4b0b      	ldr	r3, [pc, #44]	; (8016b30 <vPortSetupTimerInterrupt+0x34>)
 8016b02:	2200      	movs	r2, #0
 8016b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016b06:	4b0b      	ldr	r3, [pc, #44]	; (8016b34 <vPortSetupTimerInterrupt+0x38>)
 8016b08:	2200      	movs	r2, #0
 8016b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016b0c:	4b0a      	ldr	r3, [pc, #40]	; (8016b38 <vPortSetupTimerInterrupt+0x3c>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4a0a      	ldr	r2, [pc, #40]	; (8016b3c <vPortSetupTimerInterrupt+0x40>)
 8016b12:	fba2 2303 	umull	r2, r3, r2, r3
 8016b16:	099b      	lsrs	r3, r3, #6
 8016b18:	4a09      	ldr	r2, [pc, #36]	; (8016b40 <vPortSetupTimerInterrupt+0x44>)
 8016b1a:	3b01      	subs	r3, #1
 8016b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016b1e:	4b04      	ldr	r3, [pc, #16]	; (8016b30 <vPortSetupTimerInterrupt+0x34>)
 8016b20:	2207      	movs	r2, #7
 8016b22:	601a      	str	r2, [r3, #0]
}
 8016b24:	bf00      	nop
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr
 8016b2e:	bf00      	nop
 8016b30:	e000e010 	.word	0xe000e010
 8016b34:	e000e018 	.word	0xe000e018
 8016b38:	2400008c 	.word	0x2400008c
 8016b3c:	10624dd3 	.word	0x10624dd3
 8016b40:	e000e014 	.word	0xe000e014

08016b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016b54 <vPortEnableVFP+0x10>
 8016b48:	6801      	ldr	r1, [r0, #0]
 8016b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016b4e:	6001      	str	r1, [r0, #0]
 8016b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016b52:	bf00      	nop
 8016b54:	e000ed88 	.word	0xe000ed88

08016b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016b58:	b480      	push	{r7}
 8016b5a:	b085      	sub	sp, #20
 8016b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016b5e:	f3ef 8305 	mrs	r3, IPSR
 8016b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2b0f      	cmp	r3, #15
 8016b68:	d914      	bls.n	8016b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016b6a:	4a17      	ldr	r2, [pc, #92]	; (8016bc8 <vPortValidateInterruptPriority+0x70>)
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	4413      	add	r3, r2
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016b74:	4b15      	ldr	r3, [pc, #84]	; (8016bcc <vPortValidateInterruptPriority+0x74>)
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	7afa      	ldrb	r2, [r7, #11]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d20a      	bcs.n	8016b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b82:	f383 8811 	msr	BASEPRI, r3
 8016b86:	f3bf 8f6f 	isb	sy
 8016b8a:	f3bf 8f4f 	dsb	sy
 8016b8e:	607b      	str	r3, [r7, #4]
}
 8016b90:	bf00      	nop
 8016b92:	e7fe      	b.n	8016b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016b94:	4b0e      	ldr	r3, [pc, #56]	; (8016bd0 <vPortValidateInterruptPriority+0x78>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016b9c:	4b0d      	ldr	r3, [pc, #52]	; (8016bd4 <vPortValidateInterruptPriority+0x7c>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d90a      	bls.n	8016bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba8:	f383 8811 	msr	BASEPRI, r3
 8016bac:	f3bf 8f6f 	isb	sy
 8016bb0:	f3bf 8f4f 	dsb	sy
 8016bb4:	603b      	str	r3, [r7, #0]
}
 8016bb6:	bf00      	nop
 8016bb8:	e7fe      	b.n	8016bb8 <vPortValidateInterruptPriority+0x60>
	}
 8016bba:	bf00      	nop
 8016bbc:	3714      	adds	r7, #20
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr
 8016bc6:	bf00      	nop
 8016bc8:	e000e3f0 	.word	0xe000e3f0
 8016bcc:	24001e90 	.word	0x24001e90
 8016bd0:	e000ed0c 	.word	0xe000ed0c
 8016bd4:	24001e94 	.word	0x24001e94

08016bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b08a      	sub	sp, #40	; 0x28
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016be0:	2300      	movs	r3, #0
 8016be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016be4:	f7fe fcba 	bl	801555c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016be8:	4b5b      	ldr	r3, [pc, #364]	; (8016d58 <pvPortMalloc+0x180>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d101      	bne.n	8016bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016bf0:	f000 f920 	bl	8016e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016bf4:	4b59      	ldr	r3, [pc, #356]	; (8016d5c <pvPortMalloc+0x184>)
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	f040 8093 	bne.w	8016d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d01d      	beq.n	8016c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016c08:	2208      	movs	r2, #8
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f003 0307 	and.w	r3, r3, #7
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d014      	beq.n	8016c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	f023 0307 	bic.w	r3, r3, #7
 8016c20:	3308      	adds	r3, #8
 8016c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f003 0307 	and.w	r3, r3, #7
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00a      	beq.n	8016c44 <pvPortMalloc+0x6c>
	__asm volatile
 8016c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c32:	f383 8811 	msr	BASEPRI, r3
 8016c36:	f3bf 8f6f 	isb	sy
 8016c3a:	f3bf 8f4f 	dsb	sy
 8016c3e:	617b      	str	r3, [r7, #20]
}
 8016c40:	bf00      	nop
 8016c42:	e7fe      	b.n	8016c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d06e      	beq.n	8016d28 <pvPortMalloc+0x150>
 8016c4a:	4b45      	ldr	r3, [pc, #276]	; (8016d60 <pvPortMalloc+0x188>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d869      	bhi.n	8016d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016c54:	4b43      	ldr	r3, [pc, #268]	; (8016d64 <pvPortMalloc+0x18c>)
 8016c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016c58:	4b42      	ldr	r3, [pc, #264]	; (8016d64 <pvPortMalloc+0x18c>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c5e:	e004      	b.n	8016c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d903      	bls.n	8016c7c <pvPortMalloc+0xa4>
 8016c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d1f1      	bne.n	8016c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016c7c:	4b36      	ldr	r3, [pc, #216]	; (8016d58 <pvPortMalloc+0x180>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d050      	beq.n	8016d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016c86:	6a3b      	ldr	r3, [r7, #32]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	2208      	movs	r2, #8
 8016c8c:	4413      	add	r3, r2
 8016c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c92:	681a      	ldr	r2, [r3, #0]
 8016c94:	6a3b      	ldr	r3, [r7, #32]
 8016c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9a:	685a      	ldr	r2, [r3, #4]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	1ad2      	subs	r2, r2, r3
 8016ca0:	2308      	movs	r3, #8
 8016ca2:	005b      	lsls	r3, r3, #1
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d91f      	bls.n	8016ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	4413      	add	r3, r2
 8016cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016cb0:	69bb      	ldr	r3, [r7, #24]
 8016cb2:	f003 0307 	and.w	r3, r3, #7
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d00a      	beq.n	8016cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8016cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cbe:	f383 8811 	msr	BASEPRI, r3
 8016cc2:	f3bf 8f6f 	isb	sy
 8016cc6:	f3bf 8f4f 	dsb	sy
 8016cca:	613b      	str	r3, [r7, #16]
}
 8016ccc:	bf00      	nop
 8016cce:	e7fe      	b.n	8016cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd2:	685a      	ldr	r2, [r3, #4]
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	1ad2      	subs	r2, r2, r3
 8016cd8:	69bb      	ldr	r3, [r7, #24]
 8016cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cde:	687a      	ldr	r2, [r7, #4]
 8016ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016ce2:	69b8      	ldr	r0, [r7, #24]
 8016ce4:	f000 f908 	bl	8016ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ce8:	4b1d      	ldr	r3, [pc, #116]	; (8016d60 <pvPortMalloc+0x188>)
 8016cea:	681a      	ldr	r2, [r3, #0]
 8016cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	1ad3      	subs	r3, r2, r3
 8016cf2:	4a1b      	ldr	r2, [pc, #108]	; (8016d60 <pvPortMalloc+0x188>)
 8016cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016cf6:	4b1a      	ldr	r3, [pc, #104]	; (8016d60 <pvPortMalloc+0x188>)
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	4b1b      	ldr	r3, [pc, #108]	; (8016d68 <pvPortMalloc+0x190>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d203      	bcs.n	8016d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016d02:	4b17      	ldr	r3, [pc, #92]	; (8016d60 <pvPortMalloc+0x188>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4a18      	ldr	r2, [pc, #96]	; (8016d68 <pvPortMalloc+0x190>)
 8016d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	685a      	ldr	r2, [r3, #4]
 8016d0e:	4b13      	ldr	r3, [pc, #76]	; (8016d5c <pvPortMalloc+0x184>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	431a      	orrs	r2, r3
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016d1e:	4b13      	ldr	r3, [pc, #76]	; (8016d6c <pvPortMalloc+0x194>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	3301      	adds	r3, #1
 8016d24:	4a11      	ldr	r2, [pc, #68]	; (8016d6c <pvPortMalloc+0x194>)
 8016d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016d28:	f7fe fc26 	bl	8015578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d2c:	69fb      	ldr	r3, [r7, #28]
 8016d2e:	f003 0307 	and.w	r3, r3, #7
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d00a      	beq.n	8016d4c <pvPortMalloc+0x174>
	__asm volatile
 8016d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3a:	f383 8811 	msr	BASEPRI, r3
 8016d3e:	f3bf 8f6f 	isb	sy
 8016d42:	f3bf 8f4f 	dsb	sy
 8016d46:	60fb      	str	r3, [r7, #12]
}
 8016d48:	bf00      	nop
 8016d4a:	e7fe      	b.n	8016d4a <pvPortMalloc+0x172>
	return pvReturn;
 8016d4c:	69fb      	ldr	r3, [r7, #28]
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3728      	adds	r7, #40	; 0x28
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	24005aa0 	.word	0x24005aa0
 8016d5c:	24005ab4 	.word	0x24005ab4
 8016d60:	24005aa4 	.word	0x24005aa4
 8016d64:	24005a98 	.word	0x24005a98
 8016d68:	24005aa8 	.word	0x24005aa8
 8016d6c:	24005aac 	.word	0x24005aac

08016d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b086      	sub	sp, #24
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d04d      	beq.n	8016e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016d82:	2308      	movs	r3, #8
 8016d84:	425b      	negs	r3, r3
 8016d86:	697a      	ldr	r2, [r7, #20]
 8016d88:	4413      	add	r3, r2
 8016d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	685a      	ldr	r2, [r3, #4]
 8016d94:	4b24      	ldr	r3, [pc, #144]	; (8016e28 <vPortFree+0xb8>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	4013      	ands	r3, r2
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d10a      	bne.n	8016db4 <vPortFree+0x44>
	__asm volatile
 8016d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016da2:	f383 8811 	msr	BASEPRI, r3
 8016da6:	f3bf 8f6f 	isb	sy
 8016daa:	f3bf 8f4f 	dsb	sy
 8016dae:	60fb      	str	r3, [r7, #12]
}
 8016db0:	bf00      	nop
 8016db2:	e7fe      	b.n	8016db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00a      	beq.n	8016dd2 <vPortFree+0x62>
	__asm volatile
 8016dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc0:	f383 8811 	msr	BASEPRI, r3
 8016dc4:	f3bf 8f6f 	isb	sy
 8016dc8:	f3bf 8f4f 	dsb	sy
 8016dcc:	60bb      	str	r3, [r7, #8]
}
 8016dce:	bf00      	nop
 8016dd0:	e7fe      	b.n	8016dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	685a      	ldr	r2, [r3, #4]
 8016dd6:	4b14      	ldr	r3, [pc, #80]	; (8016e28 <vPortFree+0xb8>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4013      	ands	r3, r2
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d01e      	beq.n	8016e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d11a      	bne.n	8016e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016de8:	693b      	ldr	r3, [r7, #16]
 8016dea:	685a      	ldr	r2, [r3, #4]
 8016dec:	4b0e      	ldr	r3, [pc, #56]	; (8016e28 <vPortFree+0xb8>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	43db      	mvns	r3, r3
 8016df2:	401a      	ands	r2, r3
 8016df4:	693b      	ldr	r3, [r7, #16]
 8016df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016df8:	f7fe fbb0 	bl	801555c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	685a      	ldr	r2, [r3, #4]
 8016e00:	4b0a      	ldr	r3, [pc, #40]	; (8016e2c <vPortFree+0xbc>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	4413      	add	r3, r2
 8016e06:	4a09      	ldr	r2, [pc, #36]	; (8016e2c <vPortFree+0xbc>)
 8016e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016e0a:	6938      	ldr	r0, [r7, #16]
 8016e0c:	f000 f874 	bl	8016ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016e10:	4b07      	ldr	r3, [pc, #28]	; (8016e30 <vPortFree+0xc0>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	3301      	adds	r3, #1
 8016e16:	4a06      	ldr	r2, [pc, #24]	; (8016e30 <vPortFree+0xc0>)
 8016e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016e1a:	f7fe fbad 	bl	8015578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016e1e:	bf00      	nop
 8016e20:	3718      	adds	r7, #24
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	24005ab4 	.word	0x24005ab4
 8016e2c:	24005aa4 	.word	0x24005aa4
 8016e30:	24005ab0 	.word	0x24005ab0

08016e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016e34:	b480      	push	{r7}
 8016e36:	b085      	sub	sp, #20
 8016e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016e40:	4b27      	ldr	r3, [pc, #156]	; (8016ee0 <prvHeapInit+0xac>)
 8016e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	f003 0307 	and.w	r3, r3, #7
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d00c      	beq.n	8016e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	3307      	adds	r3, #7
 8016e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	f023 0307 	bic.w	r3, r3, #7
 8016e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016e5c:	68ba      	ldr	r2, [r7, #8]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	1ad3      	subs	r3, r2, r3
 8016e62:	4a1f      	ldr	r2, [pc, #124]	; (8016ee0 <prvHeapInit+0xac>)
 8016e64:	4413      	add	r3, r2
 8016e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016e6c:	4a1d      	ldr	r2, [pc, #116]	; (8016ee4 <prvHeapInit+0xb0>)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016e72:	4b1c      	ldr	r3, [pc, #112]	; (8016ee4 <prvHeapInit+0xb0>)
 8016e74:	2200      	movs	r2, #0
 8016e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	4413      	add	r3, r2
 8016e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016e80:	2208      	movs	r2, #8
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	1a9b      	subs	r3, r3, r2
 8016e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	f023 0307 	bic.w	r3, r3, #7
 8016e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	4a15      	ldr	r2, [pc, #84]	; (8016ee8 <prvHeapInit+0xb4>)
 8016e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016e96:	4b14      	ldr	r3, [pc, #80]	; (8016ee8 <prvHeapInit+0xb4>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016e9e:	4b12      	ldr	r3, [pc, #72]	; (8016ee8 <prvHeapInit+0xb4>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	68fa      	ldr	r2, [r7, #12]
 8016eae:	1ad2      	subs	r2, r2, r3
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016eb4:	4b0c      	ldr	r3, [pc, #48]	; (8016ee8 <prvHeapInit+0xb4>)
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	4a0a      	ldr	r2, [pc, #40]	; (8016eec <prvHeapInit+0xb8>)
 8016ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4a09      	ldr	r2, [pc, #36]	; (8016ef0 <prvHeapInit+0xbc>)
 8016eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016ecc:	4b09      	ldr	r3, [pc, #36]	; (8016ef4 <prvHeapInit+0xc0>)
 8016ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016ed2:	601a      	str	r2, [r3, #0]
}
 8016ed4:	bf00      	nop
 8016ed6:	3714      	adds	r7, #20
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr
 8016ee0:	24001e98 	.word	0x24001e98
 8016ee4:	24005a98 	.word	0x24005a98
 8016ee8:	24005aa0 	.word	0x24005aa0
 8016eec:	24005aa8 	.word	0x24005aa8
 8016ef0:	24005aa4 	.word	0x24005aa4
 8016ef4:	24005ab4 	.word	0x24005ab4

08016ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b085      	sub	sp, #20
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016f00:	4b28      	ldr	r3, [pc, #160]	; (8016fa4 <prvInsertBlockIntoFreeList+0xac>)
 8016f02:	60fb      	str	r3, [r7, #12]
 8016f04:	e002      	b.n	8016f0c <prvInsertBlockIntoFreeList+0x14>
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	60fb      	str	r3, [r7, #12]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d8f7      	bhi.n	8016f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	68ba      	ldr	r2, [r7, #8]
 8016f20:	4413      	add	r3, r2
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d108      	bne.n	8016f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	685a      	ldr	r2, [r3, #4]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	441a      	add	r2, r3
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	68ba      	ldr	r2, [r7, #8]
 8016f44:	441a      	add	r2, r3
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d118      	bne.n	8016f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	4b15      	ldr	r3, [pc, #84]	; (8016fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d00d      	beq.n	8016f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	685a      	ldr	r2, [r3, #4]
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	441a      	add	r2, r3
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	601a      	str	r2, [r3, #0]
 8016f74:	e008      	b.n	8016f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016f76:	4b0c      	ldr	r3, [pc, #48]	; (8016fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	601a      	str	r2, [r3, #0]
 8016f7e:	e003      	b.n	8016f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016f88:	68fa      	ldr	r2, [r7, #12]
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d002      	beq.n	8016f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	687a      	ldr	r2, [r7, #4]
 8016f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f96:	bf00      	nop
 8016f98:	3714      	adds	r7, #20
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa0:	4770      	bx	lr
 8016fa2:	bf00      	nop
 8016fa4:	24005a98 	.word	0x24005a98
 8016fa8:	24005aa0 	.word	0x24005aa0

08016fac <__errno>:
 8016fac:	4b01      	ldr	r3, [pc, #4]	; (8016fb4 <__errno+0x8>)
 8016fae:	6818      	ldr	r0, [r3, #0]
 8016fb0:	4770      	bx	lr
 8016fb2:	bf00      	nop
 8016fb4:	240000a0 	.word	0x240000a0

08016fb8 <__libc_init_array>:
 8016fb8:	b570      	push	{r4, r5, r6, lr}
 8016fba:	4d0d      	ldr	r5, [pc, #52]	; (8016ff0 <__libc_init_array+0x38>)
 8016fbc:	4c0d      	ldr	r4, [pc, #52]	; (8016ff4 <__libc_init_array+0x3c>)
 8016fbe:	1b64      	subs	r4, r4, r5
 8016fc0:	10a4      	asrs	r4, r4, #2
 8016fc2:	2600      	movs	r6, #0
 8016fc4:	42a6      	cmp	r6, r4
 8016fc6:	d109      	bne.n	8016fdc <__libc_init_array+0x24>
 8016fc8:	4d0b      	ldr	r5, [pc, #44]	; (8016ff8 <__libc_init_array+0x40>)
 8016fca:	4c0c      	ldr	r4, [pc, #48]	; (8016ffc <__libc_init_array+0x44>)
 8016fcc:	f000 fd3c 	bl	8017a48 <_init>
 8016fd0:	1b64      	subs	r4, r4, r5
 8016fd2:	10a4      	asrs	r4, r4, #2
 8016fd4:	2600      	movs	r6, #0
 8016fd6:	42a6      	cmp	r6, r4
 8016fd8:	d105      	bne.n	8016fe6 <__libc_init_array+0x2e>
 8016fda:	bd70      	pop	{r4, r5, r6, pc}
 8016fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fe0:	4798      	blx	r3
 8016fe2:	3601      	adds	r6, #1
 8016fe4:	e7ee      	b.n	8016fc4 <__libc_init_array+0xc>
 8016fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fea:	4798      	blx	r3
 8016fec:	3601      	adds	r6, #1
 8016fee:	e7f2      	b.n	8016fd6 <__libc_init_array+0x1e>
 8016ff0:	08017f48 	.word	0x08017f48
 8016ff4:	08017f48 	.word	0x08017f48
 8016ff8:	08017f48 	.word	0x08017f48
 8016ffc:	08017f4c 	.word	0x08017f4c

08017000 <malloc>:
 8017000:	4b02      	ldr	r3, [pc, #8]	; (801700c <malloc+0xc>)
 8017002:	4601      	mov	r1, r0
 8017004:	6818      	ldr	r0, [r3, #0]
 8017006:	f000 b88d 	b.w	8017124 <_malloc_r>
 801700a:	bf00      	nop
 801700c:	240000a0 	.word	0x240000a0

08017010 <free>:
 8017010:	4b02      	ldr	r3, [pc, #8]	; (801701c <free+0xc>)
 8017012:	4601      	mov	r1, r0
 8017014:	6818      	ldr	r0, [r3, #0]
 8017016:	f000 b819 	b.w	801704c <_free_r>
 801701a:	bf00      	nop
 801701c:	240000a0 	.word	0x240000a0

08017020 <memcpy>:
 8017020:	440a      	add	r2, r1
 8017022:	4291      	cmp	r1, r2
 8017024:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017028:	d100      	bne.n	801702c <memcpy+0xc>
 801702a:	4770      	bx	lr
 801702c:	b510      	push	{r4, lr}
 801702e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017036:	4291      	cmp	r1, r2
 8017038:	d1f9      	bne.n	801702e <memcpy+0xe>
 801703a:	bd10      	pop	{r4, pc}

0801703c <memset>:
 801703c:	4402      	add	r2, r0
 801703e:	4603      	mov	r3, r0
 8017040:	4293      	cmp	r3, r2
 8017042:	d100      	bne.n	8017046 <memset+0xa>
 8017044:	4770      	bx	lr
 8017046:	f803 1b01 	strb.w	r1, [r3], #1
 801704a:	e7f9      	b.n	8017040 <memset+0x4>

0801704c <_free_r>:
 801704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801704e:	2900      	cmp	r1, #0
 8017050:	d044      	beq.n	80170dc <_free_r+0x90>
 8017052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017056:	9001      	str	r0, [sp, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	f1a1 0404 	sub.w	r4, r1, #4
 801705e:	bfb8      	it	lt
 8017060:	18e4      	addlt	r4, r4, r3
 8017062:	f000 fc39 	bl	80178d8 <__malloc_lock>
 8017066:	4a1e      	ldr	r2, [pc, #120]	; (80170e0 <_free_r+0x94>)
 8017068:	9801      	ldr	r0, [sp, #4]
 801706a:	6813      	ldr	r3, [r2, #0]
 801706c:	b933      	cbnz	r3, 801707c <_free_r+0x30>
 801706e:	6063      	str	r3, [r4, #4]
 8017070:	6014      	str	r4, [r2, #0]
 8017072:	b003      	add	sp, #12
 8017074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017078:	f000 bc34 	b.w	80178e4 <__malloc_unlock>
 801707c:	42a3      	cmp	r3, r4
 801707e:	d908      	bls.n	8017092 <_free_r+0x46>
 8017080:	6825      	ldr	r5, [r4, #0]
 8017082:	1961      	adds	r1, r4, r5
 8017084:	428b      	cmp	r3, r1
 8017086:	bf01      	itttt	eq
 8017088:	6819      	ldreq	r1, [r3, #0]
 801708a:	685b      	ldreq	r3, [r3, #4]
 801708c:	1949      	addeq	r1, r1, r5
 801708e:	6021      	streq	r1, [r4, #0]
 8017090:	e7ed      	b.n	801706e <_free_r+0x22>
 8017092:	461a      	mov	r2, r3
 8017094:	685b      	ldr	r3, [r3, #4]
 8017096:	b10b      	cbz	r3, 801709c <_free_r+0x50>
 8017098:	42a3      	cmp	r3, r4
 801709a:	d9fa      	bls.n	8017092 <_free_r+0x46>
 801709c:	6811      	ldr	r1, [r2, #0]
 801709e:	1855      	adds	r5, r2, r1
 80170a0:	42a5      	cmp	r5, r4
 80170a2:	d10b      	bne.n	80170bc <_free_r+0x70>
 80170a4:	6824      	ldr	r4, [r4, #0]
 80170a6:	4421      	add	r1, r4
 80170a8:	1854      	adds	r4, r2, r1
 80170aa:	42a3      	cmp	r3, r4
 80170ac:	6011      	str	r1, [r2, #0]
 80170ae:	d1e0      	bne.n	8017072 <_free_r+0x26>
 80170b0:	681c      	ldr	r4, [r3, #0]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	6053      	str	r3, [r2, #4]
 80170b6:	4421      	add	r1, r4
 80170b8:	6011      	str	r1, [r2, #0]
 80170ba:	e7da      	b.n	8017072 <_free_r+0x26>
 80170bc:	d902      	bls.n	80170c4 <_free_r+0x78>
 80170be:	230c      	movs	r3, #12
 80170c0:	6003      	str	r3, [r0, #0]
 80170c2:	e7d6      	b.n	8017072 <_free_r+0x26>
 80170c4:	6825      	ldr	r5, [r4, #0]
 80170c6:	1961      	adds	r1, r4, r5
 80170c8:	428b      	cmp	r3, r1
 80170ca:	bf04      	itt	eq
 80170cc:	6819      	ldreq	r1, [r3, #0]
 80170ce:	685b      	ldreq	r3, [r3, #4]
 80170d0:	6063      	str	r3, [r4, #4]
 80170d2:	bf04      	itt	eq
 80170d4:	1949      	addeq	r1, r1, r5
 80170d6:	6021      	streq	r1, [r4, #0]
 80170d8:	6054      	str	r4, [r2, #4]
 80170da:	e7ca      	b.n	8017072 <_free_r+0x26>
 80170dc:	b003      	add	sp, #12
 80170de:	bd30      	pop	{r4, r5, pc}
 80170e0:	24005ab8 	.word	0x24005ab8

080170e4 <sbrk_aligned>:
 80170e4:	b570      	push	{r4, r5, r6, lr}
 80170e6:	4e0e      	ldr	r6, [pc, #56]	; (8017120 <sbrk_aligned+0x3c>)
 80170e8:	460c      	mov	r4, r1
 80170ea:	6831      	ldr	r1, [r6, #0]
 80170ec:	4605      	mov	r5, r0
 80170ee:	b911      	cbnz	r1, 80170f6 <sbrk_aligned+0x12>
 80170f0:	f000 f902 	bl	80172f8 <_sbrk_r>
 80170f4:	6030      	str	r0, [r6, #0]
 80170f6:	4621      	mov	r1, r4
 80170f8:	4628      	mov	r0, r5
 80170fa:	f000 f8fd 	bl	80172f8 <_sbrk_r>
 80170fe:	1c43      	adds	r3, r0, #1
 8017100:	d00a      	beq.n	8017118 <sbrk_aligned+0x34>
 8017102:	1cc4      	adds	r4, r0, #3
 8017104:	f024 0403 	bic.w	r4, r4, #3
 8017108:	42a0      	cmp	r0, r4
 801710a:	d007      	beq.n	801711c <sbrk_aligned+0x38>
 801710c:	1a21      	subs	r1, r4, r0
 801710e:	4628      	mov	r0, r5
 8017110:	f000 f8f2 	bl	80172f8 <_sbrk_r>
 8017114:	3001      	adds	r0, #1
 8017116:	d101      	bne.n	801711c <sbrk_aligned+0x38>
 8017118:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801711c:	4620      	mov	r0, r4
 801711e:	bd70      	pop	{r4, r5, r6, pc}
 8017120:	24005abc 	.word	0x24005abc

08017124 <_malloc_r>:
 8017124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017128:	1ccd      	adds	r5, r1, #3
 801712a:	f025 0503 	bic.w	r5, r5, #3
 801712e:	3508      	adds	r5, #8
 8017130:	2d0c      	cmp	r5, #12
 8017132:	bf38      	it	cc
 8017134:	250c      	movcc	r5, #12
 8017136:	2d00      	cmp	r5, #0
 8017138:	4607      	mov	r7, r0
 801713a:	db01      	blt.n	8017140 <_malloc_r+0x1c>
 801713c:	42a9      	cmp	r1, r5
 801713e:	d905      	bls.n	801714c <_malloc_r+0x28>
 8017140:	230c      	movs	r3, #12
 8017142:	603b      	str	r3, [r7, #0]
 8017144:	2600      	movs	r6, #0
 8017146:	4630      	mov	r0, r6
 8017148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801714c:	4e2e      	ldr	r6, [pc, #184]	; (8017208 <_malloc_r+0xe4>)
 801714e:	f000 fbc3 	bl	80178d8 <__malloc_lock>
 8017152:	6833      	ldr	r3, [r6, #0]
 8017154:	461c      	mov	r4, r3
 8017156:	bb34      	cbnz	r4, 80171a6 <_malloc_r+0x82>
 8017158:	4629      	mov	r1, r5
 801715a:	4638      	mov	r0, r7
 801715c:	f7ff ffc2 	bl	80170e4 <sbrk_aligned>
 8017160:	1c43      	adds	r3, r0, #1
 8017162:	4604      	mov	r4, r0
 8017164:	d14d      	bne.n	8017202 <_malloc_r+0xde>
 8017166:	6834      	ldr	r4, [r6, #0]
 8017168:	4626      	mov	r6, r4
 801716a:	2e00      	cmp	r6, #0
 801716c:	d140      	bne.n	80171f0 <_malloc_r+0xcc>
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	4631      	mov	r1, r6
 8017172:	4638      	mov	r0, r7
 8017174:	eb04 0803 	add.w	r8, r4, r3
 8017178:	f000 f8be 	bl	80172f8 <_sbrk_r>
 801717c:	4580      	cmp	r8, r0
 801717e:	d13a      	bne.n	80171f6 <_malloc_r+0xd2>
 8017180:	6821      	ldr	r1, [r4, #0]
 8017182:	3503      	adds	r5, #3
 8017184:	1a6d      	subs	r5, r5, r1
 8017186:	f025 0503 	bic.w	r5, r5, #3
 801718a:	3508      	adds	r5, #8
 801718c:	2d0c      	cmp	r5, #12
 801718e:	bf38      	it	cc
 8017190:	250c      	movcc	r5, #12
 8017192:	4629      	mov	r1, r5
 8017194:	4638      	mov	r0, r7
 8017196:	f7ff ffa5 	bl	80170e4 <sbrk_aligned>
 801719a:	3001      	adds	r0, #1
 801719c:	d02b      	beq.n	80171f6 <_malloc_r+0xd2>
 801719e:	6823      	ldr	r3, [r4, #0]
 80171a0:	442b      	add	r3, r5
 80171a2:	6023      	str	r3, [r4, #0]
 80171a4:	e00e      	b.n	80171c4 <_malloc_r+0xa0>
 80171a6:	6822      	ldr	r2, [r4, #0]
 80171a8:	1b52      	subs	r2, r2, r5
 80171aa:	d41e      	bmi.n	80171ea <_malloc_r+0xc6>
 80171ac:	2a0b      	cmp	r2, #11
 80171ae:	d916      	bls.n	80171de <_malloc_r+0xba>
 80171b0:	1961      	adds	r1, r4, r5
 80171b2:	42a3      	cmp	r3, r4
 80171b4:	6025      	str	r5, [r4, #0]
 80171b6:	bf18      	it	ne
 80171b8:	6059      	strne	r1, [r3, #4]
 80171ba:	6863      	ldr	r3, [r4, #4]
 80171bc:	bf08      	it	eq
 80171be:	6031      	streq	r1, [r6, #0]
 80171c0:	5162      	str	r2, [r4, r5]
 80171c2:	604b      	str	r3, [r1, #4]
 80171c4:	4638      	mov	r0, r7
 80171c6:	f104 060b 	add.w	r6, r4, #11
 80171ca:	f000 fb8b 	bl	80178e4 <__malloc_unlock>
 80171ce:	f026 0607 	bic.w	r6, r6, #7
 80171d2:	1d23      	adds	r3, r4, #4
 80171d4:	1af2      	subs	r2, r6, r3
 80171d6:	d0b6      	beq.n	8017146 <_malloc_r+0x22>
 80171d8:	1b9b      	subs	r3, r3, r6
 80171da:	50a3      	str	r3, [r4, r2]
 80171dc:	e7b3      	b.n	8017146 <_malloc_r+0x22>
 80171de:	6862      	ldr	r2, [r4, #4]
 80171e0:	42a3      	cmp	r3, r4
 80171e2:	bf0c      	ite	eq
 80171e4:	6032      	streq	r2, [r6, #0]
 80171e6:	605a      	strne	r2, [r3, #4]
 80171e8:	e7ec      	b.n	80171c4 <_malloc_r+0xa0>
 80171ea:	4623      	mov	r3, r4
 80171ec:	6864      	ldr	r4, [r4, #4]
 80171ee:	e7b2      	b.n	8017156 <_malloc_r+0x32>
 80171f0:	4634      	mov	r4, r6
 80171f2:	6876      	ldr	r6, [r6, #4]
 80171f4:	e7b9      	b.n	801716a <_malloc_r+0x46>
 80171f6:	230c      	movs	r3, #12
 80171f8:	603b      	str	r3, [r7, #0]
 80171fa:	4638      	mov	r0, r7
 80171fc:	f000 fb72 	bl	80178e4 <__malloc_unlock>
 8017200:	e7a1      	b.n	8017146 <_malloc_r+0x22>
 8017202:	6025      	str	r5, [r4, #0]
 8017204:	e7de      	b.n	80171c4 <_malloc_r+0xa0>
 8017206:	bf00      	nop
 8017208:	24005ab8 	.word	0x24005ab8

0801720c <_puts_r>:
 801720c:	b570      	push	{r4, r5, r6, lr}
 801720e:	460e      	mov	r6, r1
 8017210:	4605      	mov	r5, r0
 8017212:	b118      	cbz	r0, 801721c <_puts_r+0x10>
 8017214:	6983      	ldr	r3, [r0, #24]
 8017216:	b90b      	cbnz	r3, 801721c <_puts_r+0x10>
 8017218:	f000 fa58 	bl	80176cc <__sinit>
 801721c:	69ab      	ldr	r3, [r5, #24]
 801721e:	68ac      	ldr	r4, [r5, #8]
 8017220:	b913      	cbnz	r3, 8017228 <_puts_r+0x1c>
 8017222:	4628      	mov	r0, r5
 8017224:	f000 fa52 	bl	80176cc <__sinit>
 8017228:	4b2c      	ldr	r3, [pc, #176]	; (80172dc <_puts_r+0xd0>)
 801722a:	429c      	cmp	r4, r3
 801722c:	d120      	bne.n	8017270 <_puts_r+0x64>
 801722e:	686c      	ldr	r4, [r5, #4]
 8017230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017232:	07db      	lsls	r3, r3, #31
 8017234:	d405      	bmi.n	8017242 <_puts_r+0x36>
 8017236:	89a3      	ldrh	r3, [r4, #12]
 8017238:	0598      	lsls	r0, r3, #22
 801723a:	d402      	bmi.n	8017242 <_puts_r+0x36>
 801723c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801723e:	f000 fae3 	bl	8017808 <__retarget_lock_acquire_recursive>
 8017242:	89a3      	ldrh	r3, [r4, #12]
 8017244:	0719      	lsls	r1, r3, #28
 8017246:	d51d      	bpl.n	8017284 <_puts_r+0x78>
 8017248:	6923      	ldr	r3, [r4, #16]
 801724a:	b1db      	cbz	r3, 8017284 <_puts_r+0x78>
 801724c:	3e01      	subs	r6, #1
 801724e:	68a3      	ldr	r3, [r4, #8]
 8017250:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017254:	3b01      	subs	r3, #1
 8017256:	60a3      	str	r3, [r4, #8]
 8017258:	bb39      	cbnz	r1, 80172aa <_puts_r+0x9e>
 801725a:	2b00      	cmp	r3, #0
 801725c:	da38      	bge.n	80172d0 <_puts_r+0xc4>
 801725e:	4622      	mov	r2, r4
 8017260:	210a      	movs	r1, #10
 8017262:	4628      	mov	r0, r5
 8017264:	f000 f858 	bl	8017318 <__swbuf_r>
 8017268:	3001      	adds	r0, #1
 801726a:	d011      	beq.n	8017290 <_puts_r+0x84>
 801726c:	250a      	movs	r5, #10
 801726e:	e011      	b.n	8017294 <_puts_r+0x88>
 8017270:	4b1b      	ldr	r3, [pc, #108]	; (80172e0 <_puts_r+0xd4>)
 8017272:	429c      	cmp	r4, r3
 8017274:	d101      	bne.n	801727a <_puts_r+0x6e>
 8017276:	68ac      	ldr	r4, [r5, #8]
 8017278:	e7da      	b.n	8017230 <_puts_r+0x24>
 801727a:	4b1a      	ldr	r3, [pc, #104]	; (80172e4 <_puts_r+0xd8>)
 801727c:	429c      	cmp	r4, r3
 801727e:	bf08      	it	eq
 8017280:	68ec      	ldreq	r4, [r5, #12]
 8017282:	e7d5      	b.n	8017230 <_puts_r+0x24>
 8017284:	4621      	mov	r1, r4
 8017286:	4628      	mov	r0, r5
 8017288:	f000 f898 	bl	80173bc <__swsetup_r>
 801728c:	2800      	cmp	r0, #0
 801728e:	d0dd      	beq.n	801724c <_puts_r+0x40>
 8017290:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017296:	07da      	lsls	r2, r3, #31
 8017298:	d405      	bmi.n	80172a6 <_puts_r+0x9a>
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	059b      	lsls	r3, r3, #22
 801729e:	d402      	bmi.n	80172a6 <_puts_r+0x9a>
 80172a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172a2:	f000 fab2 	bl	801780a <__retarget_lock_release_recursive>
 80172a6:	4628      	mov	r0, r5
 80172a8:	bd70      	pop	{r4, r5, r6, pc}
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	da04      	bge.n	80172b8 <_puts_r+0xac>
 80172ae:	69a2      	ldr	r2, [r4, #24]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	dc06      	bgt.n	80172c2 <_puts_r+0xb6>
 80172b4:	290a      	cmp	r1, #10
 80172b6:	d004      	beq.n	80172c2 <_puts_r+0xb6>
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	1c5a      	adds	r2, r3, #1
 80172bc:	6022      	str	r2, [r4, #0]
 80172be:	7019      	strb	r1, [r3, #0]
 80172c0:	e7c5      	b.n	801724e <_puts_r+0x42>
 80172c2:	4622      	mov	r2, r4
 80172c4:	4628      	mov	r0, r5
 80172c6:	f000 f827 	bl	8017318 <__swbuf_r>
 80172ca:	3001      	adds	r0, #1
 80172cc:	d1bf      	bne.n	801724e <_puts_r+0x42>
 80172ce:	e7df      	b.n	8017290 <_puts_r+0x84>
 80172d0:	6823      	ldr	r3, [r4, #0]
 80172d2:	250a      	movs	r5, #10
 80172d4:	1c5a      	adds	r2, r3, #1
 80172d6:	6022      	str	r2, [r4, #0]
 80172d8:	701d      	strb	r5, [r3, #0]
 80172da:	e7db      	b.n	8017294 <_puts_r+0x88>
 80172dc:	08017f00 	.word	0x08017f00
 80172e0:	08017f20 	.word	0x08017f20
 80172e4:	08017ee0 	.word	0x08017ee0

080172e8 <puts>:
 80172e8:	4b02      	ldr	r3, [pc, #8]	; (80172f4 <puts+0xc>)
 80172ea:	4601      	mov	r1, r0
 80172ec:	6818      	ldr	r0, [r3, #0]
 80172ee:	f7ff bf8d 	b.w	801720c <_puts_r>
 80172f2:	bf00      	nop
 80172f4:	240000a0 	.word	0x240000a0

080172f8 <_sbrk_r>:
 80172f8:	b538      	push	{r3, r4, r5, lr}
 80172fa:	4d06      	ldr	r5, [pc, #24]	; (8017314 <_sbrk_r+0x1c>)
 80172fc:	2300      	movs	r3, #0
 80172fe:	4604      	mov	r4, r0
 8017300:	4608      	mov	r0, r1
 8017302:	602b      	str	r3, [r5, #0]
 8017304:	f7ec ff72 	bl	80041ec <_sbrk>
 8017308:	1c43      	adds	r3, r0, #1
 801730a:	d102      	bne.n	8017312 <_sbrk_r+0x1a>
 801730c:	682b      	ldr	r3, [r5, #0]
 801730e:	b103      	cbz	r3, 8017312 <_sbrk_r+0x1a>
 8017310:	6023      	str	r3, [r4, #0]
 8017312:	bd38      	pop	{r3, r4, r5, pc}
 8017314:	24005ac4 	.word	0x24005ac4

08017318 <__swbuf_r>:
 8017318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801731a:	460e      	mov	r6, r1
 801731c:	4614      	mov	r4, r2
 801731e:	4605      	mov	r5, r0
 8017320:	b118      	cbz	r0, 801732a <__swbuf_r+0x12>
 8017322:	6983      	ldr	r3, [r0, #24]
 8017324:	b90b      	cbnz	r3, 801732a <__swbuf_r+0x12>
 8017326:	f000 f9d1 	bl	80176cc <__sinit>
 801732a:	4b21      	ldr	r3, [pc, #132]	; (80173b0 <__swbuf_r+0x98>)
 801732c:	429c      	cmp	r4, r3
 801732e:	d12b      	bne.n	8017388 <__swbuf_r+0x70>
 8017330:	686c      	ldr	r4, [r5, #4]
 8017332:	69a3      	ldr	r3, [r4, #24]
 8017334:	60a3      	str	r3, [r4, #8]
 8017336:	89a3      	ldrh	r3, [r4, #12]
 8017338:	071a      	lsls	r2, r3, #28
 801733a:	d52f      	bpl.n	801739c <__swbuf_r+0x84>
 801733c:	6923      	ldr	r3, [r4, #16]
 801733e:	b36b      	cbz	r3, 801739c <__swbuf_r+0x84>
 8017340:	6923      	ldr	r3, [r4, #16]
 8017342:	6820      	ldr	r0, [r4, #0]
 8017344:	1ac0      	subs	r0, r0, r3
 8017346:	6963      	ldr	r3, [r4, #20]
 8017348:	b2f6      	uxtb	r6, r6
 801734a:	4283      	cmp	r3, r0
 801734c:	4637      	mov	r7, r6
 801734e:	dc04      	bgt.n	801735a <__swbuf_r+0x42>
 8017350:	4621      	mov	r1, r4
 8017352:	4628      	mov	r0, r5
 8017354:	f000 f926 	bl	80175a4 <_fflush_r>
 8017358:	bb30      	cbnz	r0, 80173a8 <__swbuf_r+0x90>
 801735a:	68a3      	ldr	r3, [r4, #8]
 801735c:	3b01      	subs	r3, #1
 801735e:	60a3      	str	r3, [r4, #8]
 8017360:	6823      	ldr	r3, [r4, #0]
 8017362:	1c5a      	adds	r2, r3, #1
 8017364:	6022      	str	r2, [r4, #0]
 8017366:	701e      	strb	r6, [r3, #0]
 8017368:	6963      	ldr	r3, [r4, #20]
 801736a:	3001      	adds	r0, #1
 801736c:	4283      	cmp	r3, r0
 801736e:	d004      	beq.n	801737a <__swbuf_r+0x62>
 8017370:	89a3      	ldrh	r3, [r4, #12]
 8017372:	07db      	lsls	r3, r3, #31
 8017374:	d506      	bpl.n	8017384 <__swbuf_r+0x6c>
 8017376:	2e0a      	cmp	r6, #10
 8017378:	d104      	bne.n	8017384 <__swbuf_r+0x6c>
 801737a:	4621      	mov	r1, r4
 801737c:	4628      	mov	r0, r5
 801737e:	f000 f911 	bl	80175a4 <_fflush_r>
 8017382:	b988      	cbnz	r0, 80173a8 <__swbuf_r+0x90>
 8017384:	4638      	mov	r0, r7
 8017386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017388:	4b0a      	ldr	r3, [pc, #40]	; (80173b4 <__swbuf_r+0x9c>)
 801738a:	429c      	cmp	r4, r3
 801738c:	d101      	bne.n	8017392 <__swbuf_r+0x7a>
 801738e:	68ac      	ldr	r4, [r5, #8]
 8017390:	e7cf      	b.n	8017332 <__swbuf_r+0x1a>
 8017392:	4b09      	ldr	r3, [pc, #36]	; (80173b8 <__swbuf_r+0xa0>)
 8017394:	429c      	cmp	r4, r3
 8017396:	bf08      	it	eq
 8017398:	68ec      	ldreq	r4, [r5, #12]
 801739a:	e7ca      	b.n	8017332 <__swbuf_r+0x1a>
 801739c:	4621      	mov	r1, r4
 801739e:	4628      	mov	r0, r5
 80173a0:	f000 f80c 	bl	80173bc <__swsetup_r>
 80173a4:	2800      	cmp	r0, #0
 80173a6:	d0cb      	beq.n	8017340 <__swbuf_r+0x28>
 80173a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80173ac:	e7ea      	b.n	8017384 <__swbuf_r+0x6c>
 80173ae:	bf00      	nop
 80173b0:	08017f00 	.word	0x08017f00
 80173b4:	08017f20 	.word	0x08017f20
 80173b8:	08017ee0 	.word	0x08017ee0

080173bc <__swsetup_r>:
 80173bc:	4b32      	ldr	r3, [pc, #200]	; (8017488 <__swsetup_r+0xcc>)
 80173be:	b570      	push	{r4, r5, r6, lr}
 80173c0:	681d      	ldr	r5, [r3, #0]
 80173c2:	4606      	mov	r6, r0
 80173c4:	460c      	mov	r4, r1
 80173c6:	b125      	cbz	r5, 80173d2 <__swsetup_r+0x16>
 80173c8:	69ab      	ldr	r3, [r5, #24]
 80173ca:	b913      	cbnz	r3, 80173d2 <__swsetup_r+0x16>
 80173cc:	4628      	mov	r0, r5
 80173ce:	f000 f97d 	bl	80176cc <__sinit>
 80173d2:	4b2e      	ldr	r3, [pc, #184]	; (801748c <__swsetup_r+0xd0>)
 80173d4:	429c      	cmp	r4, r3
 80173d6:	d10f      	bne.n	80173f8 <__swsetup_r+0x3c>
 80173d8:	686c      	ldr	r4, [r5, #4]
 80173da:	89a3      	ldrh	r3, [r4, #12]
 80173dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80173e0:	0719      	lsls	r1, r3, #28
 80173e2:	d42c      	bmi.n	801743e <__swsetup_r+0x82>
 80173e4:	06dd      	lsls	r5, r3, #27
 80173e6:	d411      	bmi.n	801740c <__swsetup_r+0x50>
 80173e8:	2309      	movs	r3, #9
 80173ea:	6033      	str	r3, [r6, #0]
 80173ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80173f0:	81a3      	strh	r3, [r4, #12]
 80173f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173f6:	e03e      	b.n	8017476 <__swsetup_r+0xba>
 80173f8:	4b25      	ldr	r3, [pc, #148]	; (8017490 <__swsetup_r+0xd4>)
 80173fa:	429c      	cmp	r4, r3
 80173fc:	d101      	bne.n	8017402 <__swsetup_r+0x46>
 80173fe:	68ac      	ldr	r4, [r5, #8]
 8017400:	e7eb      	b.n	80173da <__swsetup_r+0x1e>
 8017402:	4b24      	ldr	r3, [pc, #144]	; (8017494 <__swsetup_r+0xd8>)
 8017404:	429c      	cmp	r4, r3
 8017406:	bf08      	it	eq
 8017408:	68ec      	ldreq	r4, [r5, #12]
 801740a:	e7e6      	b.n	80173da <__swsetup_r+0x1e>
 801740c:	0758      	lsls	r0, r3, #29
 801740e:	d512      	bpl.n	8017436 <__swsetup_r+0x7a>
 8017410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017412:	b141      	cbz	r1, 8017426 <__swsetup_r+0x6a>
 8017414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017418:	4299      	cmp	r1, r3
 801741a:	d002      	beq.n	8017422 <__swsetup_r+0x66>
 801741c:	4630      	mov	r0, r6
 801741e:	f7ff fe15 	bl	801704c <_free_r>
 8017422:	2300      	movs	r3, #0
 8017424:	6363      	str	r3, [r4, #52]	; 0x34
 8017426:	89a3      	ldrh	r3, [r4, #12]
 8017428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801742c:	81a3      	strh	r3, [r4, #12]
 801742e:	2300      	movs	r3, #0
 8017430:	6063      	str	r3, [r4, #4]
 8017432:	6923      	ldr	r3, [r4, #16]
 8017434:	6023      	str	r3, [r4, #0]
 8017436:	89a3      	ldrh	r3, [r4, #12]
 8017438:	f043 0308 	orr.w	r3, r3, #8
 801743c:	81a3      	strh	r3, [r4, #12]
 801743e:	6923      	ldr	r3, [r4, #16]
 8017440:	b94b      	cbnz	r3, 8017456 <__swsetup_r+0x9a>
 8017442:	89a3      	ldrh	r3, [r4, #12]
 8017444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801744c:	d003      	beq.n	8017456 <__swsetup_r+0x9a>
 801744e:	4621      	mov	r1, r4
 8017450:	4630      	mov	r0, r6
 8017452:	f000 fa01 	bl	8017858 <__smakebuf_r>
 8017456:	89a0      	ldrh	r0, [r4, #12]
 8017458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801745c:	f010 0301 	ands.w	r3, r0, #1
 8017460:	d00a      	beq.n	8017478 <__swsetup_r+0xbc>
 8017462:	2300      	movs	r3, #0
 8017464:	60a3      	str	r3, [r4, #8]
 8017466:	6963      	ldr	r3, [r4, #20]
 8017468:	425b      	negs	r3, r3
 801746a:	61a3      	str	r3, [r4, #24]
 801746c:	6923      	ldr	r3, [r4, #16]
 801746e:	b943      	cbnz	r3, 8017482 <__swsetup_r+0xc6>
 8017470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017474:	d1ba      	bne.n	80173ec <__swsetup_r+0x30>
 8017476:	bd70      	pop	{r4, r5, r6, pc}
 8017478:	0781      	lsls	r1, r0, #30
 801747a:	bf58      	it	pl
 801747c:	6963      	ldrpl	r3, [r4, #20]
 801747e:	60a3      	str	r3, [r4, #8]
 8017480:	e7f4      	b.n	801746c <__swsetup_r+0xb0>
 8017482:	2000      	movs	r0, #0
 8017484:	e7f7      	b.n	8017476 <__swsetup_r+0xba>
 8017486:	bf00      	nop
 8017488:	240000a0 	.word	0x240000a0
 801748c:	08017f00 	.word	0x08017f00
 8017490:	08017f20 	.word	0x08017f20
 8017494:	08017ee0 	.word	0x08017ee0

08017498 <__sflush_r>:
 8017498:	898a      	ldrh	r2, [r1, #12]
 801749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801749e:	4605      	mov	r5, r0
 80174a0:	0710      	lsls	r0, r2, #28
 80174a2:	460c      	mov	r4, r1
 80174a4:	d458      	bmi.n	8017558 <__sflush_r+0xc0>
 80174a6:	684b      	ldr	r3, [r1, #4]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	dc05      	bgt.n	80174b8 <__sflush_r+0x20>
 80174ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	dc02      	bgt.n	80174b8 <__sflush_r+0x20>
 80174b2:	2000      	movs	r0, #0
 80174b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174ba:	2e00      	cmp	r6, #0
 80174bc:	d0f9      	beq.n	80174b2 <__sflush_r+0x1a>
 80174be:	2300      	movs	r3, #0
 80174c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174c4:	682f      	ldr	r7, [r5, #0]
 80174c6:	602b      	str	r3, [r5, #0]
 80174c8:	d032      	beq.n	8017530 <__sflush_r+0x98>
 80174ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174cc:	89a3      	ldrh	r3, [r4, #12]
 80174ce:	075a      	lsls	r2, r3, #29
 80174d0:	d505      	bpl.n	80174de <__sflush_r+0x46>
 80174d2:	6863      	ldr	r3, [r4, #4]
 80174d4:	1ac0      	subs	r0, r0, r3
 80174d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174d8:	b10b      	cbz	r3, 80174de <__sflush_r+0x46>
 80174da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80174dc:	1ac0      	subs	r0, r0, r3
 80174de:	2300      	movs	r3, #0
 80174e0:	4602      	mov	r2, r0
 80174e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174e4:	6a21      	ldr	r1, [r4, #32]
 80174e6:	4628      	mov	r0, r5
 80174e8:	47b0      	blx	r6
 80174ea:	1c43      	adds	r3, r0, #1
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	d106      	bne.n	80174fe <__sflush_r+0x66>
 80174f0:	6829      	ldr	r1, [r5, #0]
 80174f2:	291d      	cmp	r1, #29
 80174f4:	d82c      	bhi.n	8017550 <__sflush_r+0xb8>
 80174f6:	4a2a      	ldr	r2, [pc, #168]	; (80175a0 <__sflush_r+0x108>)
 80174f8:	40ca      	lsrs	r2, r1
 80174fa:	07d6      	lsls	r6, r2, #31
 80174fc:	d528      	bpl.n	8017550 <__sflush_r+0xb8>
 80174fe:	2200      	movs	r2, #0
 8017500:	6062      	str	r2, [r4, #4]
 8017502:	04d9      	lsls	r1, r3, #19
 8017504:	6922      	ldr	r2, [r4, #16]
 8017506:	6022      	str	r2, [r4, #0]
 8017508:	d504      	bpl.n	8017514 <__sflush_r+0x7c>
 801750a:	1c42      	adds	r2, r0, #1
 801750c:	d101      	bne.n	8017512 <__sflush_r+0x7a>
 801750e:	682b      	ldr	r3, [r5, #0]
 8017510:	b903      	cbnz	r3, 8017514 <__sflush_r+0x7c>
 8017512:	6560      	str	r0, [r4, #84]	; 0x54
 8017514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017516:	602f      	str	r7, [r5, #0]
 8017518:	2900      	cmp	r1, #0
 801751a:	d0ca      	beq.n	80174b2 <__sflush_r+0x1a>
 801751c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017520:	4299      	cmp	r1, r3
 8017522:	d002      	beq.n	801752a <__sflush_r+0x92>
 8017524:	4628      	mov	r0, r5
 8017526:	f7ff fd91 	bl	801704c <_free_r>
 801752a:	2000      	movs	r0, #0
 801752c:	6360      	str	r0, [r4, #52]	; 0x34
 801752e:	e7c1      	b.n	80174b4 <__sflush_r+0x1c>
 8017530:	6a21      	ldr	r1, [r4, #32]
 8017532:	2301      	movs	r3, #1
 8017534:	4628      	mov	r0, r5
 8017536:	47b0      	blx	r6
 8017538:	1c41      	adds	r1, r0, #1
 801753a:	d1c7      	bne.n	80174cc <__sflush_r+0x34>
 801753c:	682b      	ldr	r3, [r5, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d0c4      	beq.n	80174cc <__sflush_r+0x34>
 8017542:	2b1d      	cmp	r3, #29
 8017544:	d001      	beq.n	801754a <__sflush_r+0xb2>
 8017546:	2b16      	cmp	r3, #22
 8017548:	d101      	bne.n	801754e <__sflush_r+0xb6>
 801754a:	602f      	str	r7, [r5, #0]
 801754c:	e7b1      	b.n	80174b2 <__sflush_r+0x1a>
 801754e:	89a3      	ldrh	r3, [r4, #12]
 8017550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017554:	81a3      	strh	r3, [r4, #12]
 8017556:	e7ad      	b.n	80174b4 <__sflush_r+0x1c>
 8017558:	690f      	ldr	r7, [r1, #16]
 801755a:	2f00      	cmp	r7, #0
 801755c:	d0a9      	beq.n	80174b2 <__sflush_r+0x1a>
 801755e:	0793      	lsls	r3, r2, #30
 8017560:	680e      	ldr	r6, [r1, #0]
 8017562:	bf08      	it	eq
 8017564:	694b      	ldreq	r3, [r1, #20]
 8017566:	600f      	str	r7, [r1, #0]
 8017568:	bf18      	it	ne
 801756a:	2300      	movne	r3, #0
 801756c:	eba6 0807 	sub.w	r8, r6, r7
 8017570:	608b      	str	r3, [r1, #8]
 8017572:	f1b8 0f00 	cmp.w	r8, #0
 8017576:	dd9c      	ble.n	80174b2 <__sflush_r+0x1a>
 8017578:	6a21      	ldr	r1, [r4, #32]
 801757a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801757c:	4643      	mov	r3, r8
 801757e:	463a      	mov	r2, r7
 8017580:	4628      	mov	r0, r5
 8017582:	47b0      	blx	r6
 8017584:	2800      	cmp	r0, #0
 8017586:	dc06      	bgt.n	8017596 <__sflush_r+0xfe>
 8017588:	89a3      	ldrh	r3, [r4, #12]
 801758a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801758e:	81a3      	strh	r3, [r4, #12]
 8017590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017594:	e78e      	b.n	80174b4 <__sflush_r+0x1c>
 8017596:	4407      	add	r7, r0
 8017598:	eba8 0800 	sub.w	r8, r8, r0
 801759c:	e7e9      	b.n	8017572 <__sflush_r+0xda>
 801759e:	bf00      	nop
 80175a0:	20400001 	.word	0x20400001

080175a4 <_fflush_r>:
 80175a4:	b538      	push	{r3, r4, r5, lr}
 80175a6:	690b      	ldr	r3, [r1, #16]
 80175a8:	4605      	mov	r5, r0
 80175aa:	460c      	mov	r4, r1
 80175ac:	b913      	cbnz	r3, 80175b4 <_fflush_r+0x10>
 80175ae:	2500      	movs	r5, #0
 80175b0:	4628      	mov	r0, r5
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	b118      	cbz	r0, 80175be <_fflush_r+0x1a>
 80175b6:	6983      	ldr	r3, [r0, #24]
 80175b8:	b90b      	cbnz	r3, 80175be <_fflush_r+0x1a>
 80175ba:	f000 f887 	bl	80176cc <__sinit>
 80175be:	4b14      	ldr	r3, [pc, #80]	; (8017610 <_fflush_r+0x6c>)
 80175c0:	429c      	cmp	r4, r3
 80175c2:	d11b      	bne.n	80175fc <_fflush_r+0x58>
 80175c4:	686c      	ldr	r4, [r5, #4]
 80175c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d0ef      	beq.n	80175ae <_fflush_r+0xa>
 80175ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175d0:	07d0      	lsls	r0, r2, #31
 80175d2:	d404      	bmi.n	80175de <_fflush_r+0x3a>
 80175d4:	0599      	lsls	r1, r3, #22
 80175d6:	d402      	bmi.n	80175de <_fflush_r+0x3a>
 80175d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175da:	f000 f915 	bl	8017808 <__retarget_lock_acquire_recursive>
 80175de:	4628      	mov	r0, r5
 80175e0:	4621      	mov	r1, r4
 80175e2:	f7ff ff59 	bl	8017498 <__sflush_r>
 80175e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175e8:	07da      	lsls	r2, r3, #31
 80175ea:	4605      	mov	r5, r0
 80175ec:	d4e0      	bmi.n	80175b0 <_fflush_r+0xc>
 80175ee:	89a3      	ldrh	r3, [r4, #12]
 80175f0:	059b      	lsls	r3, r3, #22
 80175f2:	d4dd      	bmi.n	80175b0 <_fflush_r+0xc>
 80175f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175f6:	f000 f908 	bl	801780a <__retarget_lock_release_recursive>
 80175fa:	e7d9      	b.n	80175b0 <_fflush_r+0xc>
 80175fc:	4b05      	ldr	r3, [pc, #20]	; (8017614 <_fflush_r+0x70>)
 80175fe:	429c      	cmp	r4, r3
 8017600:	d101      	bne.n	8017606 <_fflush_r+0x62>
 8017602:	68ac      	ldr	r4, [r5, #8]
 8017604:	e7df      	b.n	80175c6 <_fflush_r+0x22>
 8017606:	4b04      	ldr	r3, [pc, #16]	; (8017618 <_fflush_r+0x74>)
 8017608:	429c      	cmp	r4, r3
 801760a:	bf08      	it	eq
 801760c:	68ec      	ldreq	r4, [r5, #12]
 801760e:	e7da      	b.n	80175c6 <_fflush_r+0x22>
 8017610:	08017f00 	.word	0x08017f00
 8017614:	08017f20 	.word	0x08017f20
 8017618:	08017ee0 	.word	0x08017ee0

0801761c <std>:
 801761c:	2300      	movs	r3, #0
 801761e:	b510      	push	{r4, lr}
 8017620:	4604      	mov	r4, r0
 8017622:	e9c0 3300 	strd	r3, r3, [r0]
 8017626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801762a:	6083      	str	r3, [r0, #8]
 801762c:	8181      	strh	r1, [r0, #12]
 801762e:	6643      	str	r3, [r0, #100]	; 0x64
 8017630:	81c2      	strh	r2, [r0, #14]
 8017632:	6183      	str	r3, [r0, #24]
 8017634:	4619      	mov	r1, r3
 8017636:	2208      	movs	r2, #8
 8017638:	305c      	adds	r0, #92	; 0x5c
 801763a:	f7ff fcff 	bl	801703c <memset>
 801763e:	4b05      	ldr	r3, [pc, #20]	; (8017654 <std+0x38>)
 8017640:	6263      	str	r3, [r4, #36]	; 0x24
 8017642:	4b05      	ldr	r3, [pc, #20]	; (8017658 <std+0x3c>)
 8017644:	62a3      	str	r3, [r4, #40]	; 0x28
 8017646:	4b05      	ldr	r3, [pc, #20]	; (801765c <std+0x40>)
 8017648:	62e3      	str	r3, [r4, #44]	; 0x2c
 801764a:	4b05      	ldr	r3, [pc, #20]	; (8017660 <std+0x44>)
 801764c:	6224      	str	r4, [r4, #32]
 801764e:	6323      	str	r3, [r4, #48]	; 0x30
 8017650:	bd10      	pop	{r4, pc}
 8017652:	bf00      	nop
 8017654:	080178f1 	.word	0x080178f1
 8017658:	08017913 	.word	0x08017913
 801765c:	0801794b 	.word	0x0801794b
 8017660:	0801796f 	.word	0x0801796f

08017664 <_cleanup_r>:
 8017664:	4901      	ldr	r1, [pc, #4]	; (801766c <_cleanup_r+0x8>)
 8017666:	f000 b8af 	b.w	80177c8 <_fwalk_reent>
 801766a:	bf00      	nop
 801766c:	080175a5 	.word	0x080175a5

08017670 <__sfmoreglue>:
 8017670:	b570      	push	{r4, r5, r6, lr}
 8017672:	2268      	movs	r2, #104	; 0x68
 8017674:	1e4d      	subs	r5, r1, #1
 8017676:	4355      	muls	r5, r2
 8017678:	460e      	mov	r6, r1
 801767a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801767e:	f7ff fd51 	bl	8017124 <_malloc_r>
 8017682:	4604      	mov	r4, r0
 8017684:	b140      	cbz	r0, 8017698 <__sfmoreglue+0x28>
 8017686:	2100      	movs	r1, #0
 8017688:	e9c0 1600 	strd	r1, r6, [r0]
 801768c:	300c      	adds	r0, #12
 801768e:	60a0      	str	r0, [r4, #8]
 8017690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017694:	f7ff fcd2 	bl	801703c <memset>
 8017698:	4620      	mov	r0, r4
 801769a:	bd70      	pop	{r4, r5, r6, pc}

0801769c <__sfp_lock_acquire>:
 801769c:	4801      	ldr	r0, [pc, #4]	; (80176a4 <__sfp_lock_acquire+0x8>)
 801769e:	f000 b8b3 	b.w	8017808 <__retarget_lock_acquire_recursive>
 80176a2:	bf00      	nop
 80176a4:	24005ac1 	.word	0x24005ac1

080176a8 <__sfp_lock_release>:
 80176a8:	4801      	ldr	r0, [pc, #4]	; (80176b0 <__sfp_lock_release+0x8>)
 80176aa:	f000 b8ae 	b.w	801780a <__retarget_lock_release_recursive>
 80176ae:	bf00      	nop
 80176b0:	24005ac1 	.word	0x24005ac1

080176b4 <__sinit_lock_acquire>:
 80176b4:	4801      	ldr	r0, [pc, #4]	; (80176bc <__sinit_lock_acquire+0x8>)
 80176b6:	f000 b8a7 	b.w	8017808 <__retarget_lock_acquire_recursive>
 80176ba:	bf00      	nop
 80176bc:	24005ac2 	.word	0x24005ac2

080176c0 <__sinit_lock_release>:
 80176c0:	4801      	ldr	r0, [pc, #4]	; (80176c8 <__sinit_lock_release+0x8>)
 80176c2:	f000 b8a2 	b.w	801780a <__retarget_lock_release_recursive>
 80176c6:	bf00      	nop
 80176c8:	24005ac2 	.word	0x24005ac2

080176cc <__sinit>:
 80176cc:	b510      	push	{r4, lr}
 80176ce:	4604      	mov	r4, r0
 80176d0:	f7ff fff0 	bl	80176b4 <__sinit_lock_acquire>
 80176d4:	69a3      	ldr	r3, [r4, #24]
 80176d6:	b11b      	cbz	r3, 80176e0 <__sinit+0x14>
 80176d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176dc:	f7ff bff0 	b.w	80176c0 <__sinit_lock_release>
 80176e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80176e4:	6523      	str	r3, [r4, #80]	; 0x50
 80176e6:	4b13      	ldr	r3, [pc, #76]	; (8017734 <__sinit+0x68>)
 80176e8:	4a13      	ldr	r2, [pc, #76]	; (8017738 <__sinit+0x6c>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80176ee:	42a3      	cmp	r3, r4
 80176f0:	bf04      	itt	eq
 80176f2:	2301      	moveq	r3, #1
 80176f4:	61a3      	streq	r3, [r4, #24]
 80176f6:	4620      	mov	r0, r4
 80176f8:	f000 f820 	bl	801773c <__sfp>
 80176fc:	6060      	str	r0, [r4, #4]
 80176fe:	4620      	mov	r0, r4
 8017700:	f000 f81c 	bl	801773c <__sfp>
 8017704:	60a0      	str	r0, [r4, #8]
 8017706:	4620      	mov	r0, r4
 8017708:	f000 f818 	bl	801773c <__sfp>
 801770c:	2200      	movs	r2, #0
 801770e:	60e0      	str	r0, [r4, #12]
 8017710:	2104      	movs	r1, #4
 8017712:	6860      	ldr	r0, [r4, #4]
 8017714:	f7ff ff82 	bl	801761c <std>
 8017718:	68a0      	ldr	r0, [r4, #8]
 801771a:	2201      	movs	r2, #1
 801771c:	2109      	movs	r1, #9
 801771e:	f7ff ff7d 	bl	801761c <std>
 8017722:	68e0      	ldr	r0, [r4, #12]
 8017724:	2202      	movs	r2, #2
 8017726:	2112      	movs	r1, #18
 8017728:	f7ff ff78 	bl	801761c <std>
 801772c:	2301      	movs	r3, #1
 801772e:	61a3      	str	r3, [r4, #24]
 8017730:	e7d2      	b.n	80176d8 <__sinit+0xc>
 8017732:	bf00      	nop
 8017734:	08017edc 	.word	0x08017edc
 8017738:	08017665 	.word	0x08017665

0801773c <__sfp>:
 801773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801773e:	4607      	mov	r7, r0
 8017740:	f7ff ffac 	bl	801769c <__sfp_lock_acquire>
 8017744:	4b1e      	ldr	r3, [pc, #120]	; (80177c0 <__sfp+0x84>)
 8017746:	681e      	ldr	r6, [r3, #0]
 8017748:	69b3      	ldr	r3, [r6, #24]
 801774a:	b913      	cbnz	r3, 8017752 <__sfp+0x16>
 801774c:	4630      	mov	r0, r6
 801774e:	f7ff ffbd 	bl	80176cc <__sinit>
 8017752:	3648      	adds	r6, #72	; 0x48
 8017754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017758:	3b01      	subs	r3, #1
 801775a:	d503      	bpl.n	8017764 <__sfp+0x28>
 801775c:	6833      	ldr	r3, [r6, #0]
 801775e:	b30b      	cbz	r3, 80177a4 <__sfp+0x68>
 8017760:	6836      	ldr	r6, [r6, #0]
 8017762:	e7f7      	b.n	8017754 <__sfp+0x18>
 8017764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017768:	b9d5      	cbnz	r5, 80177a0 <__sfp+0x64>
 801776a:	4b16      	ldr	r3, [pc, #88]	; (80177c4 <__sfp+0x88>)
 801776c:	60e3      	str	r3, [r4, #12]
 801776e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017772:	6665      	str	r5, [r4, #100]	; 0x64
 8017774:	f000 f847 	bl	8017806 <__retarget_lock_init_recursive>
 8017778:	f7ff ff96 	bl	80176a8 <__sfp_lock_release>
 801777c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017784:	6025      	str	r5, [r4, #0]
 8017786:	61a5      	str	r5, [r4, #24]
 8017788:	2208      	movs	r2, #8
 801778a:	4629      	mov	r1, r5
 801778c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017790:	f7ff fc54 	bl	801703c <memset>
 8017794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801779c:	4620      	mov	r0, r4
 801779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177a0:	3468      	adds	r4, #104	; 0x68
 80177a2:	e7d9      	b.n	8017758 <__sfp+0x1c>
 80177a4:	2104      	movs	r1, #4
 80177a6:	4638      	mov	r0, r7
 80177a8:	f7ff ff62 	bl	8017670 <__sfmoreglue>
 80177ac:	4604      	mov	r4, r0
 80177ae:	6030      	str	r0, [r6, #0]
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d1d5      	bne.n	8017760 <__sfp+0x24>
 80177b4:	f7ff ff78 	bl	80176a8 <__sfp_lock_release>
 80177b8:	230c      	movs	r3, #12
 80177ba:	603b      	str	r3, [r7, #0]
 80177bc:	e7ee      	b.n	801779c <__sfp+0x60>
 80177be:	bf00      	nop
 80177c0:	08017edc 	.word	0x08017edc
 80177c4:	ffff0001 	.word	0xffff0001

080177c8 <_fwalk_reent>:
 80177c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177cc:	4606      	mov	r6, r0
 80177ce:	4688      	mov	r8, r1
 80177d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80177d4:	2700      	movs	r7, #0
 80177d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80177da:	f1b9 0901 	subs.w	r9, r9, #1
 80177de:	d505      	bpl.n	80177ec <_fwalk_reent+0x24>
 80177e0:	6824      	ldr	r4, [r4, #0]
 80177e2:	2c00      	cmp	r4, #0
 80177e4:	d1f7      	bne.n	80177d6 <_fwalk_reent+0xe>
 80177e6:	4638      	mov	r0, r7
 80177e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177ec:	89ab      	ldrh	r3, [r5, #12]
 80177ee:	2b01      	cmp	r3, #1
 80177f0:	d907      	bls.n	8017802 <_fwalk_reent+0x3a>
 80177f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80177f6:	3301      	adds	r3, #1
 80177f8:	d003      	beq.n	8017802 <_fwalk_reent+0x3a>
 80177fa:	4629      	mov	r1, r5
 80177fc:	4630      	mov	r0, r6
 80177fe:	47c0      	blx	r8
 8017800:	4307      	orrs	r7, r0
 8017802:	3568      	adds	r5, #104	; 0x68
 8017804:	e7e9      	b.n	80177da <_fwalk_reent+0x12>

08017806 <__retarget_lock_init_recursive>:
 8017806:	4770      	bx	lr

08017808 <__retarget_lock_acquire_recursive>:
 8017808:	4770      	bx	lr

0801780a <__retarget_lock_release_recursive>:
 801780a:	4770      	bx	lr

0801780c <__swhatbuf_r>:
 801780c:	b570      	push	{r4, r5, r6, lr}
 801780e:	460e      	mov	r6, r1
 8017810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017814:	2900      	cmp	r1, #0
 8017816:	b096      	sub	sp, #88	; 0x58
 8017818:	4614      	mov	r4, r2
 801781a:	461d      	mov	r5, r3
 801781c:	da08      	bge.n	8017830 <__swhatbuf_r+0x24>
 801781e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017822:	2200      	movs	r2, #0
 8017824:	602a      	str	r2, [r5, #0]
 8017826:	061a      	lsls	r2, r3, #24
 8017828:	d410      	bmi.n	801784c <__swhatbuf_r+0x40>
 801782a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801782e:	e00e      	b.n	801784e <__swhatbuf_r+0x42>
 8017830:	466a      	mov	r2, sp
 8017832:	f000 f8c3 	bl	80179bc <_fstat_r>
 8017836:	2800      	cmp	r0, #0
 8017838:	dbf1      	blt.n	801781e <__swhatbuf_r+0x12>
 801783a:	9a01      	ldr	r2, [sp, #4]
 801783c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017844:	425a      	negs	r2, r3
 8017846:	415a      	adcs	r2, r3
 8017848:	602a      	str	r2, [r5, #0]
 801784a:	e7ee      	b.n	801782a <__swhatbuf_r+0x1e>
 801784c:	2340      	movs	r3, #64	; 0x40
 801784e:	2000      	movs	r0, #0
 8017850:	6023      	str	r3, [r4, #0]
 8017852:	b016      	add	sp, #88	; 0x58
 8017854:	bd70      	pop	{r4, r5, r6, pc}
	...

08017858 <__smakebuf_r>:
 8017858:	898b      	ldrh	r3, [r1, #12]
 801785a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801785c:	079d      	lsls	r5, r3, #30
 801785e:	4606      	mov	r6, r0
 8017860:	460c      	mov	r4, r1
 8017862:	d507      	bpl.n	8017874 <__smakebuf_r+0x1c>
 8017864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017868:	6023      	str	r3, [r4, #0]
 801786a:	6123      	str	r3, [r4, #16]
 801786c:	2301      	movs	r3, #1
 801786e:	6163      	str	r3, [r4, #20]
 8017870:	b002      	add	sp, #8
 8017872:	bd70      	pop	{r4, r5, r6, pc}
 8017874:	ab01      	add	r3, sp, #4
 8017876:	466a      	mov	r2, sp
 8017878:	f7ff ffc8 	bl	801780c <__swhatbuf_r>
 801787c:	9900      	ldr	r1, [sp, #0]
 801787e:	4605      	mov	r5, r0
 8017880:	4630      	mov	r0, r6
 8017882:	f7ff fc4f 	bl	8017124 <_malloc_r>
 8017886:	b948      	cbnz	r0, 801789c <__smakebuf_r+0x44>
 8017888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801788c:	059a      	lsls	r2, r3, #22
 801788e:	d4ef      	bmi.n	8017870 <__smakebuf_r+0x18>
 8017890:	f023 0303 	bic.w	r3, r3, #3
 8017894:	f043 0302 	orr.w	r3, r3, #2
 8017898:	81a3      	strh	r3, [r4, #12]
 801789a:	e7e3      	b.n	8017864 <__smakebuf_r+0xc>
 801789c:	4b0d      	ldr	r3, [pc, #52]	; (80178d4 <__smakebuf_r+0x7c>)
 801789e:	62b3      	str	r3, [r6, #40]	; 0x28
 80178a0:	89a3      	ldrh	r3, [r4, #12]
 80178a2:	6020      	str	r0, [r4, #0]
 80178a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178a8:	81a3      	strh	r3, [r4, #12]
 80178aa:	9b00      	ldr	r3, [sp, #0]
 80178ac:	6163      	str	r3, [r4, #20]
 80178ae:	9b01      	ldr	r3, [sp, #4]
 80178b0:	6120      	str	r0, [r4, #16]
 80178b2:	b15b      	cbz	r3, 80178cc <__smakebuf_r+0x74>
 80178b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178b8:	4630      	mov	r0, r6
 80178ba:	f000 f891 	bl	80179e0 <_isatty_r>
 80178be:	b128      	cbz	r0, 80178cc <__smakebuf_r+0x74>
 80178c0:	89a3      	ldrh	r3, [r4, #12]
 80178c2:	f023 0303 	bic.w	r3, r3, #3
 80178c6:	f043 0301 	orr.w	r3, r3, #1
 80178ca:	81a3      	strh	r3, [r4, #12]
 80178cc:	89a0      	ldrh	r0, [r4, #12]
 80178ce:	4305      	orrs	r5, r0
 80178d0:	81a5      	strh	r5, [r4, #12]
 80178d2:	e7cd      	b.n	8017870 <__smakebuf_r+0x18>
 80178d4:	08017665 	.word	0x08017665

080178d8 <__malloc_lock>:
 80178d8:	4801      	ldr	r0, [pc, #4]	; (80178e0 <__malloc_lock+0x8>)
 80178da:	f7ff bf95 	b.w	8017808 <__retarget_lock_acquire_recursive>
 80178de:	bf00      	nop
 80178e0:	24005ac0 	.word	0x24005ac0

080178e4 <__malloc_unlock>:
 80178e4:	4801      	ldr	r0, [pc, #4]	; (80178ec <__malloc_unlock+0x8>)
 80178e6:	f7ff bf90 	b.w	801780a <__retarget_lock_release_recursive>
 80178ea:	bf00      	nop
 80178ec:	24005ac0 	.word	0x24005ac0

080178f0 <__sread>:
 80178f0:	b510      	push	{r4, lr}
 80178f2:	460c      	mov	r4, r1
 80178f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f8:	f000 f894 	bl	8017a24 <_read_r>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	bfab      	itete	ge
 8017900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017902:	89a3      	ldrhlt	r3, [r4, #12]
 8017904:	181b      	addge	r3, r3, r0
 8017906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801790a:	bfac      	ite	ge
 801790c:	6563      	strge	r3, [r4, #84]	; 0x54
 801790e:	81a3      	strhlt	r3, [r4, #12]
 8017910:	bd10      	pop	{r4, pc}

08017912 <__swrite>:
 8017912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017916:	461f      	mov	r7, r3
 8017918:	898b      	ldrh	r3, [r1, #12]
 801791a:	05db      	lsls	r3, r3, #23
 801791c:	4605      	mov	r5, r0
 801791e:	460c      	mov	r4, r1
 8017920:	4616      	mov	r6, r2
 8017922:	d505      	bpl.n	8017930 <__swrite+0x1e>
 8017924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017928:	2302      	movs	r3, #2
 801792a:	2200      	movs	r2, #0
 801792c:	f000 f868 	bl	8017a00 <_lseek_r>
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801793a:	81a3      	strh	r3, [r4, #12]
 801793c:	4632      	mov	r2, r6
 801793e:	463b      	mov	r3, r7
 8017940:	4628      	mov	r0, r5
 8017942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017946:	f000 b817 	b.w	8017978 <_write_r>

0801794a <__sseek>:
 801794a:	b510      	push	{r4, lr}
 801794c:	460c      	mov	r4, r1
 801794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017952:	f000 f855 	bl	8017a00 <_lseek_r>
 8017956:	1c43      	adds	r3, r0, #1
 8017958:	89a3      	ldrh	r3, [r4, #12]
 801795a:	bf15      	itete	ne
 801795c:	6560      	strne	r0, [r4, #84]	; 0x54
 801795e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017966:	81a3      	strheq	r3, [r4, #12]
 8017968:	bf18      	it	ne
 801796a:	81a3      	strhne	r3, [r4, #12]
 801796c:	bd10      	pop	{r4, pc}

0801796e <__sclose>:
 801796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017972:	f000 b813 	b.w	801799c <_close_r>
	...

08017978 <_write_r>:
 8017978:	b538      	push	{r3, r4, r5, lr}
 801797a:	4d07      	ldr	r5, [pc, #28]	; (8017998 <_write_r+0x20>)
 801797c:	4604      	mov	r4, r0
 801797e:	4608      	mov	r0, r1
 8017980:	4611      	mov	r1, r2
 8017982:	2200      	movs	r2, #0
 8017984:	602a      	str	r2, [r5, #0]
 8017986:	461a      	mov	r2, r3
 8017988:	f7ec fbdf 	bl	800414a <_write>
 801798c:	1c43      	adds	r3, r0, #1
 801798e:	d102      	bne.n	8017996 <_write_r+0x1e>
 8017990:	682b      	ldr	r3, [r5, #0]
 8017992:	b103      	cbz	r3, 8017996 <_write_r+0x1e>
 8017994:	6023      	str	r3, [r4, #0]
 8017996:	bd38      	pop	{r3, r4, r5, pc}
 8017998:	24005ac4 	.word	0x24005ac4

0801799c <_close_r>:
 801799c:	b538      	push	{r3, r4, r5, lr}
 801799e:	4d06      	ldr	r5, [pc, #24]	; (80179b8 <_close_r+0x1c>)
 80179a0:	2300      	movs	r3, #0
 80179a2:	4604      	mov	r4, r0
 80179a4:	4608      	mov	r0, r1
 80179a6:	602b      	str	r3, [r5, #0]
 80179a8:	f7ec fbeb 	bl	8004182 <_close>
 80179ac:	1c43      	adds	r3, r0, #1
 80179ae:	d102      	bne.n	80179b6 <_close_r+0x1a>
 80179b0:	682b      	ldr	r3, [r5, #0]
 80179b2:	b103      	cbz	r3, 80179b6 <_close_r+0x1a>
 80179b4:	6023      	str	r3, [r4, #0]
 80179b6:	bd38      	pop	{r3, r4, r5, pc}
 80179b8:	24005ac4 	.word	0x24005ac4

080179bc <_fstat_r>:
 80179bc:	b538      	push	{r3, r4, r5, lr}
 80179be:	4d07      	ldr	r5, [pc, #28]	; (80179dc <_fstat_r+0x20>)
 80179c0:	2300      	movs	r3, #0
 80179c2:	4604      	mov	r4, r0
 80179c4:	4608      	mov	r0, r1
 80179c6:	4611      	mov	r1, r2
 80179c8:	602b      	str	r3, [r5, #0]
 80179ca:	f7ec fbe6 	bl	800419a <_fstat>
 80179ce:	1c43      	adds	r3, r0, #1
 80179d0:	d102      	bne.n	80179d8 <_fstat_r+0x1c>
 80179d2:	682b      	ldr	r3, [r5, #0]
 80179d4:	b103      	cbz	r3, 80179d8 <_fstat_r+0x1c>
 80179d6:	6023      	str	r3, [r4, #0]
 80179d8:	bd38      	pop	{r3, r4, r5, pc}
 80179da:	bf00      	nop
 80179dc:	24005ac4 	.word	0x24005ac4

080179e0 <_isatty_r>:
 80179e0:	b538      	push	{r3, r4, r5, lr}
 80179e2:	4d06      	ldr	r5, [pc, #24]	; (80179fc <_isatty_r+0x1c>)
 80179e4:	2300      	movs	r3, #0
 80179e6:	4604      	mov	r4, r0
 80179e8:	4608      	mov	r0, r1
 80179ea:	602b      	str	r3, [r5, #0]
 80179ec:	f7ec fbe5 	bl	80041ba <_isatty>
 80179f0:	1c43      	adds	r3, r0, #1
 80179f2:	d102      	bne.n	80179fa <_isatty_r+0x1a>
 80179f4:	682b      	ldr	r3, [r5, #0]
 80179f6:	b103      	cbz	r3, 80179fa <_isatty_r+0x1a>
 80179f8:	6023      	str	r3, [r4, #0]
 80179fa:	bd38      	pop	{r3, r4, r5, pc}
 80179fc:	24005ac4 	.word	0x24005ac4

08017a00 <_lseek_r>:
 8017a00:	b538      	push	{r3, r4, r5, lr}
 8017a02:	4d07      	ldr	r5, [pc, #28]	; (8017a20 <_lseek_r+0x20>)
 8017a04:	4604      	mov	r4, r0
 8017a06:	4608      	mov	r0, r1
 8017a08:	4611      	mov	r1, r2
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	602a      	str	r2, [r5, #0]
 8017a0e:	461a      	mov	r2, r3
 8017a10:	f7ec fbde 	bl	80041d0 <_lseek>
 8017a14:	1c43      	adds	r3, r0, #1
 8017a16:	d102      	bne.n	8017a1e <_lseek_r+0x1e>
 8017a18:	682b      	ldr	r3, [r5, #0]
 8017a1a:	b103      	cbz	r3, 8017a1e <_lseek_r+0x1e>
 8017a1c:	6023      	str	r3, [r4, #0]
 8017a1e:	bd38      	pop	{r3, r4, r5, pc}
 8017a20:	24005ac4 	.word	0x24005ac4

08017a24 <_read_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4d07      	ldr	r5, [pc, #28]	; (8017a44 <_read_r+0x20>)
 8017a28:	4604      	mov	r4, r0
 8017a2a:	4608      	mov	r0, r1
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	602a      	str	r2, [r5, #0]
 8017a32:	461a      	mov	r2, r3
 8017a34:	f7ec fb6c 	bl	8004110 <_read>
 8017a38:	1c43      	adds	r3, r0, #1
 8017a3a:	d102      	bne.n	8017a42 <_read_r+0x1e>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	b103      	cbz	r3, 8017a42 <_read_r+0x1e>
 8017a40:	6023      	str	r3, [r4, #0]
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	24005ac4 	.word	0x24005ac4

08017a48 <_init>:
 8017a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a4a:	bf00      	nop
 8017a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a4e:	bc08      	pop	{r3}
 8017a50:	469e      	mov	lr, r3
 8017a52:	4770      	bx	lr

08017a54 <_fini>:
 8017a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a56:	bf00      	nop
 8017a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a5a:	bc08      	pop	{r3}
 8017a5c:	469e      	mov	lr, r3
 8017a5e:	4770      	bx	lr
