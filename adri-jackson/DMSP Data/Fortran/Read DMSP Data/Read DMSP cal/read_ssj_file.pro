;***************************************************************************************************function read_ssj_file, file, data;***************************************************************************************************; Reads the new APL SSJ/4/5 format; Tom Sotirelis     8/2004; returns 1 on success and 0 on ioerror failure;***************************************************************************************************;     BYTE     DESCRIPTION;       1       satellite number (BYTE);       2       Year: last two digits of year (BYTE);     3-4       Day number of year (INTEGER);     5-6       Latitude Position in tenths of Degree (INTEGER) ;                  (original or replaced by NORAD);     7-8       Longitude Position in tenths of Degree (INTEGER) ;                  (original or replaced by NORAD);    9-48       EFULX in counts (20 INTEGERS);   49-88       IFLUX in counts (20 INTEGERS);   89-92       SECONDS into the day (LONG INTEGER);   93-94       Version Number of data file (multiplied by 1000) (INTEGER);      95       Original Position Source flag ;                  (0-original data file, 1-replaced with NORAD position)(see note);      96       filler byte (zero);      97       NORAD error flag (0- good, 1- error) (BYTE);      98       Geomagnetic error flag (0- good, 1- error) (BYTE);   99-102      NORAD Latitude in ten-thousandths of degree (LONG INTEGER);  103-106      NORAD Longitude in ten-thousandths of degree (LONG INTEGER);  107-110      NORAD Altitude in decimeters (LONG INTEGER);  111-114      Magnetic Latitude in ten-thousandths of degree (LONG INTEGER);  115-118      Magnetic Longitude in ten-thousandths of degree (LONG INTEGER);  119-122      MLT in hundred-thousands of an hour (LONG INTEGER);  123-124      PACE Model Year used;  125-128      Filler (all zeros);***************************************************************************************************common read_ssj_file_sav, d0, init_qif not keyword_set(init_q) then begin    init_q  =  1    z       =  intarr(20)        d0  =  {apl_ssj_ty, sat:0B, yr:0B, doy:0, ilat:0, ilon:0, eflux:z, iflux:z, sod:0L $                      , ver:0, orig_pos_f:0B, f1:0B, norad_err_f:0B, geomag_err_f:0B $                      , nlat:0L, nlon:0L, nalt:0L, mlat:0L, mlon:0L, mlt:0L, aacgm_year:0, f2:0L}endifon_ioerror, errlab;***************************************************************************************************;openr, lun, file, /get_lun, /swap_if_little_endiansucc = 0openr, lun, file, /get_lun , /swap_if_big_endian     ; this works on the mac with data on linux;openr, lun, file, /get_lunfs     =  fstat(lun)nrecs  =  fs.size/128Lif( nrecs gt 0 )then begindata  =  replicate(d0, nrecs)readu,    lun, dataendiffree_lun, lunif( nrecs gt 0) then beginsucc   =  1endifreturn, succ  ;***************************************************************************************************errlab:print, 'ioerror: read_ssj_file: ', filereturn, 0end