This Python script is intended for processing and analyzing DMSP data, specifically from the SSJ instrument series. It can be used to find the maximum or mean electron count value for a specific set of data, it can plot data with time and location data, and it can plot data with certain energy bins filtered out to simulate the effects of the ERPA's screens, all filtered for location (defined by MLAT). 

The first function in this script, "read_data" reads in binary data files, using the DMSP format documentation to properly store each value. These values are time, location, and electron and ion raw counts sorted by energy bin. These are all generally stored as 2-byte integers. Some values require conversions to get useful values out of, and will be elaborated on later. Notably the location data was given on a per-minute basis, while the time, electron raw counts, and ion raw counts were given on a per-second basis. This made the filtering more challenging but this was overcome by repeating the minute-only data for each entry of the per-second data. When the files are read-in, the data is stored in a 2-D numpy array, with one "row" per second of data, and one "column" per data-type. The electron and ion entries also included 20 entries each (one for each energy bin). In filling this array, seconds are calculated from the millisecond value that is stored, magnetic latitude is converted to degrees, and geographic latitude is converted to degrees. The function to read the data files requires you to pass the filename to the function, and returns the data as described above in a numpy array.

After the data file is read and the values stored properly, the next functions perform filtering and calculations from the raw data to scientific units. First the data is filtered using the "fitler_data" function, iterating through the array passed to the function and then returning the electron data, time, mlat, and magnetic local time, when mlat is between 72 and 82 degrees. When you pass the raw electron data to the next function "calc_counts" it is converted to "counts" as defined in the DMSP documentation, and returns the converted array. To calculate geophysical quantities with the channels in order of ascending energy, the order of the counts array must be changed. I perform this change by adding the line:
counts = (counts[:,[16,17,18,19,12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3]])
before the next function-call. These counts can then be converted using the "calc_sci_units" function, calculating differential number flux, differential energy flux, integrated number flux, integrated energy flux, and average differential number flux (per energy bin). I added the last value to help visualize the distribution of electrons at different energy levels. The other formulas were defined in the DMSP documentation, and when you pass the array of counts, it returns the 5 arrays I described. These calculations required me adding arrays of the energy bin values, the energy bin widths, the energy bin geometric factors, and a constant for the accumulation time. These constants are called "E," "DE_i," "G_i," and "Dt" respectively.  
The next function, "mlt_interp" takes the magnetic local time hour and minute values that was stored earlier, and interpolates between values that are only changing each minute. When you pass the hour and minute arrays, the hours are converted to minutes and they are summed to be stored in one array. Next, arrays are made of the values recorded for each minute (rather than each second), the index of those values, and indexes for the length of the passed array. This creates the three needed arguments for the numpy interpolation function, which can now solve for values between the by-minute values. The function then separates hour and minute once again, and formats them into a hh:mm time entries in a list, which it returns. The next function takes the time, mlat, and mlt, and formats them into a multiline string for x-axis labels, which it returns in a list. The last function in the script is an alternative way of calculating the integrated number flux, but removing a certain number of energy bins first. You pass the differential number flux, the DE array, and the number of bins you'd like to remove. The function then removes that number of columns from the passed arrays, and calculates the integrated flux as normal, returning the integrated flux array. This can be used to simulate the effect of the ERPA's screens, by filtering out a number of energy bins corresponding to the different energy levels the ERPA is able to filter out. This will reduce the flux similar to the ERPA rejecting these lower energy particles. 

The script includes a block that executes when you run the first cell, prompting the user to enter a data file namw. When you do, it will ask if you want to enter more files, and stack as many as you choose to enter (one at a time). When you have entered the number of files you would like to, the block calls the functions up to and including "calc_sci_units" with the stacked data. It then prompts you if you would like to calculate the mean or average electron counts for the span of data you have entered. Once you choose one it presents the number in scientific notation, and again prompts the user, asking if they would like to calculate something else. If you do, the beginning of the loop will repeat. Below the first cell, are several cells plotting the integrated flux values for different days in April, 2000, to visualize the distribution of data. They also all calculate the maximum for each individual day as well. The cell after these plots calculates the average of values that are over 1E8, and what percentage of values are over 6E8. Lastly is a set of plots for January 1st, 2000. In each cell is 5 plots, all for different cusp crossings. These were identified by plotting 6+ minutes of data and seeing if there were any time jumps. If there were jumps I cut off the plot before the jump and tested the next several minutes. This unfortunately is the main way to figure out when there are different cusp crossings after the data has been filtered. Each different cell represents a different screen value of the ERPA, and it is labelled in the title for the set of plots.  

This script is useful to see DMSP electron data for the northern cusp region, and contextualize data gathered from the ERPA. The script can plot the distribution at different energy values, see flux values for different cusp crossings, and perform statistics with the flux values. The script can also simulate the effect of screening out electrons below a certain energy level.

You can use this script to find the maximum or average for a set of data by running the first cell, entering the file names, and then choosing which value you'd like to see. You can see plots for the month of April by running the subsequent cells until you get to the last 6. You can see the effect of the ERPA's screens by running the last 6 cells. 

Referencing the DMSP documentation can provide more information on how and why each step was performed, as well as referencing the comments for each function in the script. 

