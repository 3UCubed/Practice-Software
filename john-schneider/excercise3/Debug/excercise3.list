
excercise3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003110  08003110  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003110  08003110  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003110  08003110  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08003188  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003188  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b4f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159b  00000000  00000000  00028be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001239c  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000967b  00000000  00000000  0003d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006de4c  00000000  00000000  000468c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae4  00000000  00000000  000b4764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003074 	.word	0x08003074

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003074 	.word	0x08003074

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b0a7      	sub	sp, #156	; 0x9c
 8000238:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fac5 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f85d 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f957 	bl	80004f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000246:	f000 f8c3 	bl	80003d0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f923 	bl	8000494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* variable that specifies the Format of the RTC */
  uint8_t format = RTC_FORMAT_BIN;
 800024e:	2387      	movs	r3, #135	; 0x87
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]

  /* structure to store Date clock data */
  RTC_DateTypeDef sDate = {0};
 8000256:	237c      	movs	r3, #124	; 0x7c
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]

  /* Structure to store Time clock data*/
  RTC_TimeTypeDef sTime = {0};
 800025e:	2368      	movs	r3, #104	; 0x68
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	0018      	movs	r0, r3
 8000264:	2314      	movs	r3, #20
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f002 fa91 	bl	8002790 <memset>
	  /*
	  Get the time from the RTC and store it in the sTime variable

	  Get the date from the RTC and store it in the sDate variable
	  */
	  HAL_RTC_GetTime(&hrtc, &sTime, format);
 800026e:	2587      	movs	r5, #135	; 0x87
 8000270:	197b      	adds	r3, r7, r5
 8000272:	781a      	ldrb	r2, [r3, #0]
 8000274:	2468      	movs	r4, #104	; 0x68
 8000276:	1939      	adds	r1, r7, r4
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <main+0xbc>)
 800027a:	0018      	movs	r0, r3
 800027c:	f001 fbe8 	bl	8001a50 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, format);
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	257c      	movs	r5, #124	; 0x7c
 8000286:	1979      	adds	r1, r7, r5
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <main+0xbc>)
 800028a:	0018      	movs	r0, r3
 800028c:	f001 fcce 	bl	8001c2c <HAL_RTC_GetDate>
	  Format the string to the one specified in the documentation.

	  store the length to be used in transmission.
	  */
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
			  sDate.Year, sDate.Month, // Year and Month
 8000290:	002a      	movs	r2, r5
 8000292:	18bb      	adds	r3, r7, r2
 8000294:	78db      	ldrb	r3, [r3, #3]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
 8000296:	001e      	movs	r6, r3
			  sDate.Year, sDate.Month, // Year and Month
 8000298:	18bb      	adds	r3, r7, r2
 800029a:	785b      	ldrb	r3, [r3, #1]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
 800029c:	469c      	mov	ip, r3
			  sDate.Date, sTime.Hours, // Day and hours
 800029e:	18bb      	adds	r3, r7, r2
 80002a0:	789b      	ldrb	r3, [r3, #2]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
 80002a2:	001a      	movs	r2, r3
			  sDate.Date, sTime.Hours, // Day and hours
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	781b      	ldrb	r3, [r3, #0]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
 80002aa:	001c      	movs	r4, r3
			  sTime.Minutes, sTime.Seconds); // Minutes and Seconds
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	785b      	ldrb	r3, [r3, #1]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
 80002b0:	001d      	movs	r5, r3
			  sTime.Minutes, sTime.Seconds); // Minutes and Seconds
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	789b      	ldrb	r3, [r3, #2]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n",
 80002b6:	490f      	ldr	r1, [pc, #60]	; (80002f4 <main+0xc0>)
 80002b8:	1d38      	adds	r0, r7, #4
 80002ba:	9303      	str	r3, [sp, #12]
 80002bc:	9502      	str	r5, [sp, #8]
 80002be:	9401      	str	r4, [sp, #4]
 80002c0:	9200      	str	r2, [sp, #0]
 80002c2:	4663      	mov	r3, ip
 80002c4:	0032      	movs	r2, r6
 80002c6:	f002 fa6b 	bl	80027a0 <siprintf>
 80002ca:	0003      	movs	r3, r0
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	18b9      	adds	r1, r7, r2
 80002d0:	600b      	str	r3, [r1, #0]
	/*
	Transmit the data stored in the uart buffer which can be looked at on COM3 in putty

	Recur the loop every half a second to observe time change and reduce the rate of the uart output.
	*/
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, uart_buf_len, 1000);
 80002d2:	18bb      	adds	r3, r7, r2
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	1d39      	adds	r1, r7, #4
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <main+0xc4>)
 80002e0:	f001 fe1c 	bl	8001f1c <HAL_UART_Transmit>
	HAL_Delay(500);
 80002e4:	23fa      	movs	r3, #250	; 0xfa
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fad1 	bl	8000890 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, format);
 80002ee:	e7be      	b.n	800026e <main+0x3a>
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	0800308c 	.word	0x0800308c
 80002f8:	200000ac 	.word	0x200000ac

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b097      	sub	sp, #92	; 0x5c
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	2428      	movs	r4, #40	; 0x28
 8000304:	193b      	adds	r3, r7, r4
 8000306:	0018      	movs	r0, r3
 8000308:	2330      	movs	r3, #48	; 0x30
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 fa3f 	bl	8002790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000312:	2318      	movs	r3, #24
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	0018      	movs	r0, r3
 8000318:	2310      	movs	r3, #16
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f002 fa37 	bl	8002790 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	0018      	movs	r0, r3
 8000326:	2314      	movs	r3, #20
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 fa30 	bl	8002790 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000330:	0021      	movs	r1, r4
 8000332:	187b      	adds	r3, r7, r1
 8000334:	220a      	movs	r2, #10
 8000336:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2201      	movs	r2, #1
 800033c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2210      	movs	r2, #16
 8000342:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	22a0      	movs	r2, #160	; 0xa0
 800035a:	0392      	lsls	r2, r2, #14
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000364:	187b      	adds	r3, r7, r1
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fcf8 	bl	8000d5c <HAL_RCC_OscConfig>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000370:	f000 f91c 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	2118      	movs	r1, #24
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2207      	movs	r2, #7
 800037a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2202      	movs	r2, #2
 8000380:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2101      	movs	r1, #1
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fffc 	bl	8001390 <HAL_RCC_ClockConfig>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800039c:	f000 f906 	bl	80005ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <SystemClock_Config+0xd0>)
 80003a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 f92e 	bl	8001618 <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80003c0:	f000 f8f4 	bl	80005ac <Error_Handler>
  }
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b017      	add	sp, #92	; 0x5c
 80003ca:	bd90      	pop	{r4, r7, pc}
 80003cc:	00010001 	.word	0x00010001

080003d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	2314      	movs	r3, #20
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f002 f9d6 	bl	8002790 <memset>
  RTC_DateTypeDef sDate = {0};
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003ea:	4b28      	ldr	r3, [pc, #160]	; (800048c <MX_RTC_Init+0xbc>)
 80003ec:	4a28      	ldr	r2, [pc, #160]	; (8000490 <MX_RTC_Init+0xc0>)
 80003ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003f0:	4b26      	ldr	r3, [pc, #152]	; (800048c <MX_RTC_Init+0xbc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <MX_RTC_Init+0xbc>)
 80003f8:	227f      	movs	r2, #127	; 0x7f
 80003fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <MX_RTC_Init+0xbc>)
 80003fe:	22ff      	movs	r2, #255	; 0xff
 8000400:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <MX_RTC_Init+0xbc>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <MX_RTC_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_RTC_Init+0xbc>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <MX_RTC_Init+0xbc>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f9dc 	bl	80017d4 <HAL_RTC_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000420:	f000 f8c4 	bl	80005ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x26;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2226      	movs	r2, #38	; 0x26
 800042e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000442:	1d39      	adds	r1, r7, #4
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_RTC_Init+0xbc>)
 8000446:	2201      	movs	r2, #1
 8000448:	0018      	movs	r0, r3
 800044a:	f001 fa5b 	bl	8001904 <HAL_RTC_SetTime>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000452:	f000 f8ab 	bl	80005ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000456:	003b      	movs	r3, r7
 8000458:	2204      	movs	r2, #4
 800045a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 800045c:	003b      	movs	r3, r7
 800045e:	2205      	movs	r2, #5
 8000460:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x23;
 8000462:	003b      	movs	r3, r7
 8000464:	2223      	movs	r2, #35	; 0x23
 8000466:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8000468:	003b      	movs	r3, r7
 800046a:	2224      	movs	r2, #36	; 0x24
 800046c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800046e:	0039      	movs	r1, r7
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_RTC_Init+0xbc>)
 8000472:	2201      	movs	r2, #1
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fb49 	bl	8001b0c <HAL_RTC_SetDate>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800047e:	f000 f895 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b006      	add	sp, #24
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	2000008c 	.word	0x2000008c
 8000490:	40002800 	.word	0x40002800

08000494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART1_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART1_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004a0:	22e1      	movs	r2, #225	; 0xe1
 80004a2:	0252      	lsls	r2, r2, #9
 80004a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fccb 	bl	8001e74 <HAL_UART_Init>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f863 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000ac 	.word	0x200000ac
 80004f0:	40013800 	.word	0x40013800

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b089      	sub	sp, #36	; 0x24
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	240c      	movs	r4, #12
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 f943 	bl	8002790 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_GPIO_Init+0xb0>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_GPIO_Init+0xb0>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0289      	lsls	r1, r1, #10
 8000514:	430a      	orrs	r2, r1
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_GPIO_Init+0xb0>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	029b      	lsls	r3, r3, #10
 8000520:	4013      	ands	r3, r2
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <MX_GPIO_Init+0xb0>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_GPIO_Init+0xb0>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0309      	lsls	r1, r1, #12
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_GPIO_Init+0xb0>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	031b      	lsls	r3, r3, #12
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000542:	23c0      	movs	r3, #192	; 0xc0
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4818      	ldr	r0, [pc, #96]	; (80005a8 <MX_GPIO_Init+0xb4>)
 8000548:	2200      	movs	r2, #0
 800054a:	0019      	movs	r1, r3
 800054c:	f000 fbe8 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2290      	movs	r2, #144	; 0x90
 800055a:	0352      	lsls	r2, r2, #13
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000564:	193a      	adds	r2, r7, r4
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fa67 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22c0      	movs	r2, #192	; 0xc0
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2201      	movs	r2, #1
 8000580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058e:	187b      	adds	r3, r7, r1
 8000590:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <MX_GPIO_Init+0xb4>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f000 fa53 	bl	8000a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b009      	add	sp, #36	; 0x24
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48000800 	.word	0x48000800

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x44>)
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_MspInit+0x44>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	619a      	str	r2, [r3, #24]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x44>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_MspInit+0x44>)
 80005d8:	69da      	ldr	r2, [r3, #28]
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_MspInit+0x44>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0549      	lsls	r1, r1, #21
 80005e0:	430a      	orrs	r2, r1
 80005e2:	61da      	str	r2, [r3, #28]
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_MspInit+0x44>)
 80005e6:	69da      	ldr	r2, [r3, #28]
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	055b      	lsls	r3, r3, #21
 80005ec:	4013      	ands	r3, r2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_RTC_MspInit+0x28>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_RTC_MspInit+0x2c>)
 8000614:	6a1a      	ldr	r2, [r3, #32]
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_RTC_MspInit+0x2c>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0209      	lsls	r1, r1, #8
 800061c:	430a      	orrs	r2, r1
 800061e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40002800 	.word	0x40002800
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	2414      	movs	r4, #20
 800063a:	193b      	adds	r3, r7, r4
 800063c:	0018      	movs	r0, r3
 800063e:	2314      	movs	r3, #20
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f002 f8a4 	bl	8002790 <memset>
  if(huart->Instance==USART1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <HAL_UART_MspInit+0x94>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d133      	bne.n	80006ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <HAL_UART_MspInit+0x98>)
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_UART_MspInit+0x98>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	01c9      	lsls	r1, r1, #7
 800065c:	430a      	orrs	r2, r1
 800065e:	619a      	str	r2, [r3, #24]
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <HAL_UART_MspInit+0x98>)
 8000662:	699a      	ldr	r2, [r3, #24]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	01db      	lsls	r3, r3, #7
 8000668:	4013      	ands	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_UART_MspInit+0x98>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_UART_MspInit+0x98>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_UART_MspInit+0x98>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	00d2      	lsls	r2, r2, #3
 8000690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	0021      	movs	r1, r4
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2202      	movs	r2, #2
 8000698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2203      	movs	r2, #3
 80006a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 f9c3 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b00b      	add	sp, #44	; 0x2c
 80006c0:	bd90      	pop	{r4, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40013800 	.word	0x40013800
 80006c8:	40021000 	.word	0x40021000

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f8b2 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <_sbrk+0x5c>)
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_sbrk+0x60>)
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <_sbrk+0x64>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <_sbrk+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d207      	bcs.n	800073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800072c:	f002 f806 	bl	800273c <__errno>
 8000730:	0003      	movs	r3, r0
 8000732:	220c      	movs	r2, #12
 8000734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000736:	2301      	movs	r3, #1
 8000738:	425b      	negs	r3, r3
 800073a:	e009      	b.n	8000750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	18d2      	adds	r2, r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <_sbrk+0x64>)
 800074c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20002000 	.word	0x20002000
 800075c:	00000400 	.word	0x00000400
 8000760:	20000134 	.word	0x20000134
 8000764:	20000150 	.word	0x20000150

08000768 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f7ff fff6 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f001 ffd1 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fd45 	bl	8000234 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b8:	08003118 	.word	0x08003118
  ldr r2, =_sbss
 80007bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007c0:	2000014c 	.word	0x2000014c

080007c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_COMP_IRQHandler>
	...

080007c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <HAL_Init+0x24>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_Init+0x24>)
 80007d2:	2110      	movs	r1, #16
 80007d4:	430a      	orrs	r2, r1
 80007d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 f809 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007de:	f7ff feeb 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_InitTick+0x5c>)
 80007fa:	681c      	ldr	r4, [r3, #0]
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_InitTick+0x60>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	0019      	movs	r1, r3
 8000802:	23fa      	movs	r3, #250	; 0xfa
 8000804:	0098      	lsls	r0, r3, #2
 8000806:	f7ff fc89 	bl	800011c <__udivsi3>
 800080a:	0003      	movs	r3, r0
 800080c:	0019      	movs	r1, r3
 800080e:	0020      	movs	r0, r4
 8000810:	f7ff fc84 	bl	800011c <__udivsi3>
 8000814:	0003      	movs	r3, r0
 8000816:	0018      	movs	r0, r3
 8000818:	f000 f905 	bl	8000a26 <HAL_SYSTICK_Config>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e00f      	b.n	8000844 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d80b      	bhi.n	8000842 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2301      	movs	r3, #1
 800082e:	425b      	negs	r3, r3
 8000830:	2200      	movs	r2, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f8e2 	bl	80009fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_InitTick+0x64>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b003      	add	sp, #12
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x1c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	18d2      	adds	r2, r2, r3
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_IncTick+0x20>)
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000008 	.word	0x20000008
 8000878:	20000138 	.word	0x20000138

0800087c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_GetTick+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000138 	.word	0x20000138

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fff0 	bl	800087c <HAL_GetTick>
 800089c:	0003      	movs	r3, r0
 800089e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001a      	movs	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	f7ff ffe0 	bl	800087c <HAL_GetTick>
 80008bc:	0002      	movs	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0002      	movs	r2, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b7f      	cmp	r3, #127	; 0x7f
 80008ec:	d828      	bhi.n	8000940 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ee:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <__NVIC_SetPriority+0xd4>)
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	33c0      	adds	r3, #192	; 0xc0
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	589b      	ldr	r3, [r3, r2]
 80008fe:	1dfa      	adds	r2, r7, #7
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	0011      	movs	r1, r2
 8000904:	2203      	movs	r2, #3
 8000906:	400a      	ands	r2, r1
 8000908:	00d2      	lsls	r2, r2, #3
 800090a:	21ff      	movs	r1, #255	; 0xff
 800090c:	4091      	lsls	r1, r2
 800090e:	000a      	movs	r2, r1
 8000910:	43d2      	mvns	r2, r2
 8000912:	401a      	ands	r2, r3
 8000914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	019b      	lsls	r3, r3, #6
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	401a      	ands	r2, r3
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0018      	movs	r0, r3
 8000924:	2303      	movs	r3, #3
 8000926:	4003      	ands	r3, r0
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092c:	481f      	ldr	r0, [pc, #124]	; (80009ac <__NVIC_SetPriority+0xd4>)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b25b      	sxtb	r3, r3
 8000934:	089b      	lsrs	r3, r3, #2
 8000936:	430a      	orrs	r2, r1
 8000938:	33c0      	adds	r3, #192	; 0xc0
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800093e:	e031      	b.n	80009a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <__NVIC_SetPriority+0xd8>)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	0019      	movs	r1, r3
 8000948:	230f      	movs	r3, #15
 800094a:	400b      	ands	r3, r1
 800094c:	3b08      	subs	r3, #8
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	3306      	adds	r3, #6
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	3304      	adds	r3, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	1dfa      	adds	r2, r7, #7
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	0011      	movs	r1, r2
 8000960:	2203      	movs	r2, #3
 8000962:	400a      	ands	r2, r1
 8000964:	00d2      	lsls	r2, r2, #3
 8000966:	21ff      	movs	r1, #255	; 0xff
 8000968:	4091      	lsls	r1, r2
 800096a:	000a      	movs	r2, r1
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	401a      	ands	r2, r3
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0018      	movs	r0, r3
 8000980:	2303      	movs	r3, #3
 8000982:	4003      	ands	r3, r0
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <__NVIC_SetPriority+0xd8>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	001c      	movs	r4, r3
 8000990:	230f      	movs	r3, #15
 8000992:	4023      	ands	r3, r4
 8000994:	3b08      	subs	r3, #8
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	430a      	orrs	r2, r1
 800099a:	3306      	adds	r3, #6
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	18c3      	adds	r3, r0, r3
 80009a0:	3304      	adds	r3, #4
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b003      	add	sp, #12
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	045b      	lsls	r3, r3, #17
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d301      	bcc.n	80009cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c8:	2301      	movs	r3, #1
 80009ca:	e010      	b.n	80009ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <SysTick_Config+0x44>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	3a01      	subs	r2, #1
 80009d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d4:	2301      	movs	r3, #1
 80009d6:	425b      	negs	r3, r3
 80009d8:	2103      	movs	r1, #3
 80009da:	0018      	movs	r0, r3
 80009dc:	f7ff ff7c 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SysTick_Config+0x44>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Config+0x44>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	210f      	movs	r1, #15
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	1c02      	adds	r2, r0, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff5d 	bl	80008d8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b004      	add	sp, #16
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff ffbf 	bl	80009b4 <SysTick_Config>
 8000a36:	0003      	movs	r3, r0
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e14f      	b.n	8000cf0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	000a      	movs	r2, r1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d100      	bne.n	8000a68 <HAL_GPIO_Init+0x28>
 8000a66:	e140      	b.n	8000cea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	4013      	ands	r3, r2
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	43da      	mvns	r2, r3
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	2201      	movs	r2, #1
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	43da      	mvns	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2203      	movs	r2, #3
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	58d3      	ldr	r3, [r2, r3]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	2207      	movs	r2, #7
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	43da      	mvns	r2, r3
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2107      	movs	r1, #7
 8000b56:	400b      	ands	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	6939      	ldr	r1, [r7, #16]
 8000b70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	43da      	mvns	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2203      	movs	r2, #3
 8000b90:	401a      	ands	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	23c0      	movs	r3, #192	; 0xc0
 8000bac:	029b      	lsls	r3, r3, #10
 8000bae:	4013      	ands	r3, r2
 8000bb0:	d100      	bne.n	8000bb4 <HAL_GPIO_Init+0x174>
 8000bb2:	e09a      	b.n	8000cea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	619a      	str	r2, [r3, #24]
 8000bc0:	4b51      	ldr	r3, [pc, #324]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bcc:	4a4f      	ldr	r2, [pc, #316]	; (8000d0c <HAL_GPIO_Init+0x2cc>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	2390      	movs	r3, #144	; 0x90
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d013      	beq.n	8000c22 <HAL_GPIO_Init+0x1e2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a44      	ldr	r2, [pc, #272]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d00d      	beq.n	8000c1e <HAL_GPIO_Init+0x1de>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a43      	ldr	r2, [pc, #268]	; (8000d14 <HAL_GPIO_Init+0x2d4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d007      	beq.n	8000c1a <HAL_GPIO_Init+0x1da>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_GPIO_Init+0x1d6>
 8000c12:	2303      	movs	r3, #3
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c16:	2305      	movs	r3, #5
 8000c18:	e004      	b.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c22:	2300      	movs	r3, #0
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	2103      	movs	r1, #3
 8000c28:	400a      	ands	r2, r1
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4093      	lsls	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c34:	4935      	ldr	r1, [pc, #212]	; (8000d0c <HAL_GPIO_Init+0x2cc>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	035b      	lsls	r3, r3, #13
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	039b      	lsls	r3, r3, #14
 8000c84:	4013      	ands	r3, r2
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	029b      	lsls	r3, r3, #10
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43da      	mvns	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	40da      	lsrs	r2, r3
 8000cf8:	1e13      	subs	r3, r2, #0
 8000cfa:	d000      	beq.n	8000cfe <HAL_GPIO_Init+0x2be>
 8000cfc:	e6a8      	b.n	8000a50 <HAL_GPIO_Init+0x10>
  } 
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b006      	add	sp, #24
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	0008      	movs	r0, r1
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	1c7b      	adds	r3, r7, #1
 8000d34:	1c0a      	adds	r2, r1, #0
 8000d36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	1c7b      	adds	r3, r7, #1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d48:	e003      	b.n	8000d52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4a:	1cbb      	adds	r3, r7, #2
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e301      	b.n	8001372 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	d100      	bne.n	8000d7a <HAL_RCC_OscConfig+0x1e>
 8000d78:	e08d      	b.n	8000e96 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d7a:	4bc3      	ldr	r3, [pc, #780]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	220c      	movs	r2, #12
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d00e      	beq.n	8000da4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d86:	4bc0      	ldr	r3, [pc, #768]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d116      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x64>
 8000d92:	4bbd      	ldr	r3, [pc, #756]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	025b      	lsls	r3, r3, #9
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	025b      	lsls	r3, r3, #9
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d10d      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da4:	4bb8      	ldr	r3, [pc, #736]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	4013      	ands	r3, r2
 8000dae:	d100      	bne.n	8000db2 <HAL_RCC_OscConfig+0x56>
 8000db0:	e070      	b.n	8000e94 <HAL_RCC_OscConfig+0x138>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d000      	beq.n	8000dbc <HAL_RCC_OscConfig+0x60>
 8000dba:	e06b      	b.n	8000e94 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e2d8      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d107      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x7c>
 8000dc8:	4baf      	ldr	r3, [pc, #700]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4bae      	ldr	r3, [pc, #696]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	0249      	lsls	r1, r1, #9
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e02f      	b.n	8000e38 <HAL_RCC_OscConfig+0xdc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10c      	bne.n	8000dfa <HAL_RCC_OscConfig+0x9e>
 8000de0:	4ba9      	ldr	r3, [pc, #676]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4ba8      	ldr	r3, [pc, #672]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000de6:	49a9      	ldr	r1, [pc, #676]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000de8:	400a      	ands	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	4ba6      	ldr	r3, [pc, #664]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4ba5      	ldr	r3, [pc, #660]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000df2:	49a7      	ldr	r1, [pc, #668]	; (8001090 <HAL_RCC_OscConfig+0x334>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e01e      	b.n	8000e38 <HAL_RCC_OscConfig+0xdc>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d10e      	bne.n	8000e20 <HAL_RCC_OscConfig+0xc4>
 8000e02:	4ba1      	ldr	r3, [pc, #644]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4ba0      	ldr	r3, [pc, #640]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	4b9d      	ldr	r3, [pc, #628]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b9c      	ldr	r3, [pc, #624]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e00b      	b.n	8000e38 <HAL_RCC_OscConfig+0xdc>
 8000e20:	4b99      	ldr	r3, [pc, #612]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b98      	ldr	r3, [pc, #608]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	4999      	ldr	r1, [pc, #612]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	4b96      	ldr	r3, [pc, #600]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b95      	ldr	r3, [pc, #596]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	4997      	ldr	r1, [pc, #604]	; (8001090 <HAL_RCC_OscConfig+0x334>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d014      	beq.n	8000e6a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fd1c 	bl	800087c <HAL_GetTick>
 8000e44:	0003      	movs	r3, r0
 8000e46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fd17 	bl	800087c <HAL_GetTick>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b64      	cmp	r3, #100	; 0x64
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e28a      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5c:	4b8a      	ldr	r3, [pc, #552]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	4013      	ands	r3, r2
 8000e66:	d0f0      	beq.n	8000e4a <HAL_RCC_OscConfig+0xee>
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fd07 	bl	800087c <HAL_GetTick>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fd02 	bl	800087c <HAL_GetTick>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e275      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	4b80      	ldr	r3, [pc, #512]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x118>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d100      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x146>
 8000ea0:	e069      	b.n	8000f76 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea2:	4b79      	ldr	r3, [pc, #484]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eac:	4b76      	ldr	r3, [pc, #472]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d11c      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x196>
 8000eb8:	4b73      	ldr	r3, [pc, #460]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d116      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec4:	4b70      	ldr	r3, [pc, #448]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2202      	movs	r2, #2
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d005      	beq.n	8000eda <HAL_RCC_OscConfig+0x17e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d001      	beq.n	8000eda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e24b      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eda:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	22f8      	movs	r2, #248	; 0xf8
 8000ee0:	4393      	bics	r3, r2
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	00da      	lsls	r2, r3, #3
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef0:	e041      	b.n	8000f76 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d024      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efa:	4b63      	ldr	r3, [pc, #396]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b62      	ldr	r3, [pc, #392]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fcb9 	bl	800087c <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f10:	f7ff fcb4 	bl	800087c <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e227      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f22:	4b59      	ldr	r3, [pc, #356]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d0f1      	beq.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	22f8      	movs	r2, #248	; 0xf8
 8000f32:	4393      	bics	r3, r2
 8000f34:	0019      	movs	r1, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	00da      	lsls	r2, r3, #3
 8000f3c:	4b52      	ldr	r3, [pc, #328]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e018      	b.n	8000f76 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f44:	4b50      	ldr	r3, [pc, #320]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b4f      	ldr	r3, [pc, #316]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	438a      	bics	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fc94 	bl	800087c <HAL_GetTick>
 8000f54:	0003      	movs	r3, r0
 8000f56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fc8f 	bl	800087c <HAL_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e202      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6c:	4b46      	ldr	r3, [pc, #280]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2202      	movs	r2, #2
 8000f72:	4013      	ands	r3, r2
 8000f74:	d1f1      	bne.n	8000f5a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d036      	beq.n	8000fee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d019      	beq.n	8000fbc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f88:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f94:	f7ff fc72 	bl	800087c <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fc6d 	bl	800087c <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e1e0      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d0f1      	beq.n	8000f9e <HAL_RCC_OscConfig+0x242>
 8000fba:	e018      	b.n	8000fee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fc58 	bl	800087c <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fc53 	bl	800087c <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e1c6      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2202      	movs	r2, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d1f1      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <HAL_RCC_OscConfig+0x29e>
 8000ff8:	e0b4      	b.n	8001164 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	201f      	movs	r0, #31
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	055b      	lsls	r3, r3, #21
 800100a:	4013      	ands	r3, r2
 800100c:	d110      	bne.n	8001030 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0549      	lsls	r1, r1, #21
 8001018:	430a      	orrs	r2, r1
 800101a:	61da      	str	r2, [r3, #28]
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	055b      	lsls	r3, r3, #21
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800102a:	183b      	adds	r3, r7, r0
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_RCC_OscConfig+0x338>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4013      	ands	r3, r2
 800103a:	d11a      	bne.n	8001072 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_RCC_OscConfig+0x338>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0049      	lsls	r1, r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800104a:	f7ff fc17 	bl	800087c <HAL_GetTick>
 800104e:	0003      	movs	r3, r0
 8001050:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001054:	f7ff fc12 	bl	800087c <HAL_GetTick>
 8001058:	0002      	movs	r2, r0
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e185      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_RCC_OscConfig+0x338>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4013      	ands	r3, r2
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10e      	bne.n	8001098 <HAL_RCC_OscConfig+0x33c>
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	4b02      	ldr	r3, [pc, #8]	; (8001088 <HAL_RCC_OscConfig+0x32c>)
 8001080:	2101      	movs	r1, #1
 8001082:	430a      	orrs	r2, r1
 8001084:	621a      	str	r2, [r3, #32]
 8001086:	e035      	b.n	80010f4 <HAL_RCC_OscConfig+0x398>
 8001088:	40021000 	.word	0x40021000
 800108c:	fffeffff 	.word	0xfffeffff
 8001090:	fffbffff 	.word	0xfffbffff
 8001094:	40007000 	.word	0x40007000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10c      	bne.n	80010ba <HAL_RCC_OscConfig+0x35e>
 80010a0:	4bb6      	ldr	r3, [pc, #728]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	4bb5      	ldr	r3, [pc, #724]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	4bb3      	ldr	r3, [pc, #716]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	4bb2      	ldr	r3, [pc, #712]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010b2:	2104      	movs	r1, #4
 80010b4:	438a      	bics	r2, r1
 80010b6:	621a      	str	r2, [r3, #32]
 80010b8:	e01c      	b.n	80010f4 <HAL_RCC_OscConfig+0x398>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x380>
 80010c2:	4bae      	ldr	r3, [pc, #696]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010c4:	6a1a      	ldr	r2, [r3, #32]
 80010c6:	4bad      	ldr	r3, [pc, #692]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010c8:	2104      	movs	r1, #4
 80010ca:	430a      	orrs	r2, r1
 80010cc:	621a      	str	r2, [r3, #32]
 80010ce:	4bab      	ldr	r3, [pc, #684]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	4baa      	ldr	r3, [pc, #680]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	621a      	str	r2, [r3, #32]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0x398>
 80010dc:	4ba7      	ldr	r3, [pc, #668]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	4ba6      	ldr	r3, [pc, #664]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	438a      	bics	r2, r1
 80010e6:	621a      	str	r2, [r3, #32]
 80010e8:	4ba4      	ldr	r3, [pc, #656]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4ba3      	ldr	r3, [pc, #652]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80010ee:	2104      	movs	r1, #4
 80010f0:	438a      	bics	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d014      	beq.n	8001126 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fbbe 	bl	800087c <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001104:	e009      	b.n	800111a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fbb9 	bl	800087c <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	4a9b      	ldr	r2, [pc, #620]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e12b      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111a:	4b98      	ldr	r3, [pc, #608]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x3aa>
 8001124:	e013      	b.n	800114e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff fba9 	bl	800087c <HAL_GetTick>
 800112a:	0003      	movs	r3, r0
 800112c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800112e:	e009      	b.n	8001144 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001130:	f7ff fba4 	bl	800087c <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a91      	ldr	r2, [pc, #580]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e116      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001144:	4b8d      	ldr	r3, [pc, #564]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	2202      	movs	r2, #2
 800114a:	4013      	ands	r3, r2
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800114e:	231f      	movs	r3, #31
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d105      	bne.n	8001164 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001158:	4b88      	ldr	r3, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800115a:	69da      	ldr	r2, [r3, #28]
 800115c:	4b87      	ldr	r3, [pc, #540]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800115e:	4989      	ldr	r1, [pc, #548]	; (8001384 <HAL_RCC_OscConfig+0x628>)
 8001160:	400a      	ands	r2, r1
 8001162:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2210      	movs	r2, #16
 800116a:	4013      	ands	r3, r2
 800116c:	d063      	beq.n	8001236 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d12a      	bne.n	80011cc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001176:	4b81      	ldr	r3, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117a:	4b80      	ldr	r3, [pc, #512]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800117c:	2104      	movs	r1, #4
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001182:	4b7e      	ldr	r3, [pc, #504]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b7d      	ldr	r3, [pc, #500]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff fb75 	bl	800087c <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001198:	f7ff fb70 	bl	800087c <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e0e3      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011aa:	4b74      	ldr	r3, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d0f1      	beq.n	8001198 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011b4:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b8:	22f8      	movs	r2, #248	; 0xf8
 80011ba:	4393      	bics	r3, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	00da      	lsls	r2, r3, #3
 80011c4:	4b6d      	ldr	r3, [pc, #436]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011c6:	430a      	orrs	r2, r1
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ca:	e034      	b.n	8001236 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	3305      	adds	r3, #5
 80011d2:	d111      	bne.n	80011f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011d4:	4b69      	ldr	r3, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011da:	2104      	movs	r1, #4
 80011dc:	438a      	bics	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e0:	4b66      	ldr	r3, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	22f8      	movs	r2, #248	; 0xf8
 80011e6:	4393      	bics	r3, r2
 80011e8:	0019      	movs	r1, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	00da      	lsls	r2, r3, #3
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011f2:	430a      	orrs	r2, r1
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
 80011f6:	e01e      	b.n	8001236 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011f8:	4b60      	ldr	r3, [pc, #384]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fc:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80011fe:	2104      	movs	r1, #4
 8001200:	430a      	orrs	r2, r1
 8001202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001204:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fb34 	bl	800087c <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800121a:	f7ff fb2f 	bl	800087c <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0a2      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d1f1      	bne.n	800121a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_RCC_OscConfig+0x4e4>
 800123e:	e097      	b.n	8001370 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001240:	4b4e      	ldr	r3, [pc, #312]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
 8001248:	2b08      	cmp	r3, #8
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x4f2>
 800124c:	e06b      	b.n	8001326 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d14c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800125c:	494a      	ldr	r1, [pc, #296]	; (8001388 <HAL_RCC_OscConfig+0x62c>)
 800125e:	400a      	ands	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fb0b 	bl	800087c <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fb06 	bl	800087c <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e079      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	049b      	lsls	r3, r3, #18
 8001286:	4013      	ands	r3, r2
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	220f      	movs	r2, #15
 8001290:	4393      	bics	r3, r2
 8001292:	0019      	movs	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800129a:	430a      	orrs	r2, r1
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a3a      	ldr	r2, [pc, #232]	; (800138c <HAL_RCC_OscConfig+0x630>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	431a      	orrs	r2, r3
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0449      	lsls	r1, r1, #17
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fad9 	bl	800087c <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fad4 	bl	800087c <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e047      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	049b      	lsls	r3, r3, #18
 80012ea:	4013      	ands	r3, r2
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x574>
 80012ee:	e03f      	b.n	8001370 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_RCC_OscConfig+0x620>)
 80012f6:	4924      	ldr	r1, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x62c>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fabe 	bl	800087c <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff fab9 	bl	800087c <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e02c      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	049b      	lsls	r3, r3, #18
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x5aa>
 8001324:	e024      	b.n	8001370 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e01f      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_OscConfig+0x620>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_RCC_OscConfig+0x620>)
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	401a      	ands	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	429a      	cmp	r2, r3
 800134c:	d10e      	bne.n	800136c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	220f      	movs	r2, #15
 8001352:	401a      	ands	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d107      	bne.n	800136c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	23f0      	movs	r3, #240	; 0xf0
 8001360:	039b      	lsls	r3, r3, #14
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	0018      	movs	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	b008      	add	sp, #32
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40021000 	.word	0x40021000
 8001380:	00001388 	.word	0x00001388
 8001384:	efffffff 	.word	0xefffffff
 8001388:	feffffff 	.word	0xfeffffff
 800138c:	ffc2ffff 	.word	0xffc2ffff

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0b3      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d911      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4393      	bics	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	4b55      	ldr	r3, [pc, #340]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e09a      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d015      	beq.n	800140c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	4013      	ands	r3, r2
 80013e8:	d006      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ea:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 80013f0:	21e0      	movs	r1, #224	; 0xe0
 80013f2:	00c9      	lsls	r1, r1, #3
 80013f4:	430a      	orrs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	22f0      	movs	r2, #240	; 0xf0
 80013fe:	4393      	bics	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	d040      	beq.n	8001498 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d114      	bne.n	8001454 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e06e      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	049b      	lsls	r3, r3, #18
 800143e:	4013      	ands	r3, r2
 8001440:	d108      	bne.n	8001454 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e062      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e05b      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2203      	movs	r2, #3
 800145a:	4393      	bics	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fa08 	bl	800087c <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001470:	e009      	b.n	8001486 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001472:	f7ff fa03 	bl	800087c <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_RCC_ClockConfig+0x18c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e042      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	220c      	movs	r2, #12
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1ec      	bne.n	8001472 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d211      	bcs.n	80014ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4393      	bics	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_RCC_ClockConfig+0x184>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e020      	b.n	800150c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	d009      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_RCC_ClockConfig+0x190>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014e8:	f000 f820 	bl	800152c <HAL_RCC_GetSysClockFreq>
 80014ec:	0001      	movs	r1, r0
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_RCC_ClockConfig+0x188>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	220f      	movs	r2, #15
 80014f6:	4013      	ands	r3, r2
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_RCC_ClockConfig+0x194>)
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	000a      	movs	r2, r1
 80014fe:	40da      	lsrs	r2, r3
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_RCC_ClockConfig+0x198>)
 8001502:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff f973 	bl	80007f0 <HAL_InitTick>
  
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40022000 	.word	0x40022000
 8001518:	40021000 	.word	0x40021000
 800151c:	00001388 	.word	0x00001388
 8001520:	fffff8ff 	.word	0xfffff8ff
 8001524:	080030a4 	.word	0x080030a4
 8001528:	20000000 	.word	0x20000000

0800152c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	220c      	movs	r2, #12
 8001550:	4013      	ands	r3, r2
 8001552:	2b04      	cmp	r3, #4
 8001554:	d002      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x30>
 8001556:	2b08      	cmp	r3, #8
 8001558:	d003      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x36>
 800155a:	e02c      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800155e:	613b      	str	r3, [r7, #16]
      break;
 8001560:	e02c      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	220f      	movs	r2, #15
 8001568:	4013      	ands	r3, r2
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	220f      	movs	r2, #15
 8001576:	4013      	ands	r3, r2
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	4013      	ands	r3, r2
 8001586:	d009      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800158c:	f7fe fdc6 	bl	800011c <__udivsi3>
 8001590:	0003      	movs	r3, r0
 8001592:	001a      	movs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4353      	muls	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	000a      	movs	r2, r1
 80015a0:	0152      	lsls	r2, r2, #5
 80015a2:	1a52      	subs	r2, r2, r1
 80015a4:	0193      	lsls	r3, r2, #6
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	185b      	adds	r3, r3, r1
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
      break;
 80015b4:	e002      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_RCC_GetSysClockFreq+0xa0>)
 80015b8:	613b      	str	r3, [r7, #16]
      break;
 80015ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015bc:	693b      	ldr	r3, [r7, #16]
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b006      	add	sp, #24
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	40021000 	.word	0x40021000
 80015cc:	007a1200 	.word	0x007a1200
 80015d0:	080030bc 	.word	0x080030bc
 80015d4:	080030cc 	.word	0x080030cc

080015d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000000 	.word	0x20000000

080015ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015f0:	f7ff fff2 	bl	80015d8 <HAL_RCC_GetHCLKFreq>
 80015f4:	0001      	movs	r1, r0
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	2207      	movs	r2, #7
 80015fe:	4013      	ands	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	40d9      	lsrs	r1, r3
 8001606:	000b      	movs	r3, r1
}    
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	080030b4 	.word	0x080030b4

08001618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001634:	e08e      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2017      	movs	r0, #23
 8001638:	183b      	adds	r3, r7, r0
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	055b      	lsls	r3, r3, #21
 8001646:	4013      	ands	r3, r2
 8001648:	d110      	bne.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0549      	lsls	r1, r1, #21
 8001654:	430a      	orrs	r2, r1
 8001656:	61da      	str	r2, [r3, #28]
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	183b      	adds	r3, r7, r0
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d11a      	bne.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0049      	lsls	r1, r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff f8f9 	bl	800087c <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	e008      	b.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7ff f8f4 	bl	800087c <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d034      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	23c0      	movs	r3, #192	; 0xc0
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d02c      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0249      	lsls	r1, r1, #9
 80016e4:	430a      	orrs	r2, r1
 80016e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016e8:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ee:	4936      	ldr	r1, [pc, #216]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f8bb 	bl	800087c <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	e009      	b.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff f8b6 	bl	800087c <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e048      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d0f0      	beq.n	800170c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800173a:	430a      	orrs	r2, r1
 800173c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800173e:	2317      	movs	r3, #23
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800174e:	4920      	ldr	r1, [pc, #128]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001750:	400a      	ands	r2, r1
 8001752:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
 800175c:	d009      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	2203      	movs	r2, #3
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176e:	430a      	orrs	r2, r1
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2220      	movs	r2, #32
 8001778:	4013      	ands	r3, r2
 800177a:	d009      	beq.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	2210      	movs	r2, #16
 8001782:	4393      	bics	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800178c:	430a      	orrs	r2, r1
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4013      	ands	r3, r2
 800179a:	d009      	beq.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b006      	add	sp, #24
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	fffffcff 	.word	0xfffffcff
 80017c8:	fffeffff 	.word	0xfffeffff
 80017cc:	00001388 	.word	0x00001388
 80017d0:	efffffff 	.word	0xefffffff

080017d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017dc:	230f      	movs	r3, #15
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e081      	b.n	80018f2 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7f5b      	ldrb	r3, [r3, #29]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7fe fefd 	bl	8000600 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2210      	movs	r2, #16
 8001814:	4013      	ands	r3, r2
 8001816:	2b10      	cmp	r3, #16
 8001818:	d05c      	beq.n	80018d4 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	22ca      	movs	r2, #202	; 0xca
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2253      	movs	r2, #83	; 0x53
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800182a:	250f      	movs	r5, #15
 800182c:	197c      	adds	r4, r7, r5
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 fa73 	bl	8001d1c <RTC_EnterInitMode>
 8001836:	0003      	movs	r3, r0
 8001838:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800183a:	0028      	movs	r0, r5
 800183c:	183b      	adds	r3, r7, r0
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d12c      	bne.n	800189e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	492b      	ldr	r1, [pc, #172]	; (80018fc <HAL_RTC_Init+0x128>)
 8001850:	400a      	ands	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6899      	ldr	r1, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68d2      	ldr	r2, [r2, #12]
 800187a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6919      	ldr	r1, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	041a      	lsls	r2, r3, #16
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001890:	183c      	adds	r4, r7, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fa84 	bl	8001da2 <RTC_ExitInitMode>
 800189a:	0003      	movs	r3, r0
 800189c:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800189e:	230f      	movs	r3, #15
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d110      	bne.n	80018ca <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4913      	ldr	r1, [pc, #76]	; (8001900 <HAL_RTC_Init+0x12c>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
 80018d2:	e003      	b.n	80018dc <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80018d4:	230f      	movs	r3, #15
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80018dc:	230f      	movs	r3, #15
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80018ec:	230f      	movs	r3, #15
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	ff8fffbf 	.word	0xff8fffbf
 8001900:	fffbffff 	.word	0xfffbffff

08001904 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_RTC_SetTime+0x1c>
 800191c:	2302      	movs	r3, #2
 800191e:	e08e      	b.n	8001a3e <HAL_RTC_SetTime+0x13a>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2202      	movs	r2, #2
 800192a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d125      	bne.n	800197e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	4013      	ands	r3, r2
 800193c:	d102      	bne.n	8001944 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2200      	movs	r2, #0
 8001942:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	0018      	movs	r0, r3
 800194a:	f000 fa53 	bl	8001df4 <RTC_ByteToBcd2>
 800194e:	0003      	movs	r3, r0
 8001950:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fa4c 	bl	8001df4 <RTC_ByteToBcd2>
 800195c:	0003      	movs	r3, r0
 800195e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001960:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	789b      	ldrb	r3, [r3, #2]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 fa44 	bl	8001df4 <RTC_ByteToBcd2>
 800196c:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800196e:	0022      	movs	r2, r4
 8001970:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	78db      	ldrb	r3, [r3, #3]
 8001976:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e017      	b.n	80019ae <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	4013      	ands	r3, r2
 8001988:	d102      	bne.n	8001990 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2200      	movs	r2, #0
 800198e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800199c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80019a2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	78db      	ldrb	r3, [r3, #3]
 80019a8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	22ca      	movs	r2, #202	; 0xca
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2253      	movs	r2, #83	; 0x53
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019be:	2513      	movs	r5, #19
 80019c0:	197c      	adds	r4, r7, r5
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f9a9 	bl	8001d1c <RTC_EnterInitMode>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80019ce:	0028      	movs	r0, r5
 80019d0:	183b      	adds	r3, r7, r0
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d120      	bne.n	8001a1a <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	491a      	ldr	r1, [pc, #104]	; (8001a48 <HAL_RTC_SetTime+0x144>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4917      	ldr	r1, [pc, #92]	; (8001a4c <HAL_RTC_SetTime+0x148>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a0c:	183c      	adds	r4, r7, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f9c6 	bl	8001da2 <RTC_ExitInitMode>
 8001a16:	0003      	movs	r3, r0
 8001a18:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001a1a:	2313      	movs	r3, #19
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	22ff      	movs	r2, #255	; 0xff
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	771a      	strb	r2, [r3, #28]

  return status;
 8001a38:	2313      	movs	r3, #19
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b006      	add	sp, #24
 8001a44:	bdb0      	pop	{r4, r5, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	007f7f7f 	.word	0x007f7f7f
 8001a4c:	fffbffff 	.word	0xfffbffff

08001a50 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	045b      	lsls	r3, r3, #17
 8001a72:	0c5a      	lsrs	r2, r3, #17
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <HAL_RTC_GetTime+0xb8>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	223f      	movs	r2, #63	; 0x3f
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	227f      	movs	r2, #127	; 0x7f
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	227f      	movs	r2, #127	; 0x7f
 8001aaa:	4013      	ands	r3, r2
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	0d9b      	lsrs	r3, r3, #22
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 f9b2 	bl	8001e36 <RTC_Bcd2ToByte>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	785b      	ldrb	r3, [r3, #1]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 f9a9 	bl	8001e36 <RTC_Bcd2ToByte>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f9a0 	bl	8001e36 <RTC_Bcd2ToByte>
 8001af6:	0003      	movs	r3, r0
 8001af8:	001a      	movs	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b006      	add	sp, #24
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	007f7f7f 	.word	0x007f7f7f

08001b0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	7f1b      	ldrb	r3, [r3, #28]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_RTC_SetDate+0x1c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e07a      	b.n	8001c1e <HAL_RTC_SetDate+0x112>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10e      	bne.n	8001b58 <HAL_RTC_SetDate+0x4c>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	785b      	ldrb	r3, [r3, #1]
 8001b3e:	001a      	movs	r2, r3
 8001b40:	2310      	movs	r3, #16
 8001b42:	4013      	ands	r3, r2
 8001b44:	d008      	beq.n	8001b58 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	330a      	adds	r3, #10
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	78db      	ldrb	r3, [r3, #3]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f946 	bl	8001df4 <RTC_ByteToBcd2>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f93f 	bl	8001df4 <RTC_ByteToBcd2>
 8001b76:	0003      	movs	r3, r0
 8001b78:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b7a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f000 f937 	bl	8001df4 <RTC_ByteToBcd2>
 8001b86:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b88:	0022      	movs	r2, r4
 8001b8a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00e      	b.n	8001bb6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	78db      	ldrb	r3, [r3, #3]
 8001b9c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001ba4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001baa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	22ca      	movs	r2, #202	; 0xca
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2253      	movs	r2, #83	; 0x53
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001bc6:	2513      	movs	r5, #19
 8001bc8:	197c      	adds	r4, r7, r5
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 f8a5 	bl	8001d1c <RTC_EnterInitMode>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001bd6:	0028      	movs	r0, r5
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10c      	bne.n	8001bfa <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4910      	ldr	r1, [pc, #64]	; (8001c28 <HAL_RTC_SetDate+0x11c>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001bec:	183c      	adds	r4, r7, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 f8d6 	bl	8001da2 <RTC_ExitInitMode>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001bfa:	2313      	movs	r3, #19
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	22ff      	movs	r2, #255	; 0xff
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]

  return status;
 8001c18:	2313      	movs	r3, #19
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b006      	add	sp, #24
 8001c24:	bdb0      	pop	{r4, r5, r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	00ffff3f 	.word	0x00ffff3f

08001c2c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <HAL_RTC_GetDate+0x9c>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	221f      	movs	r2, #31
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	223f      	movs	r2, #63	; 0x3f
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	0b5b      	lsrs	r3, r3, #13
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2207      	movs	r2, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11a      	bne.n	8001cbc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f8d3 	bl	8001e36 <RTC_Bcd2ToByte>
 8001c90:	0003      	movs	r3, r0
 8001c92:	001a      	movs	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 f8ca 	bl	8001e36 <RTC_Bcd2ToByte>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	789b      	ldrb	r3, [r3, #2]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f8c1 	bl	8001e36 <RTC_Bcd2ToByte>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	00ffff3f 	.word	0x00ffff3f

08001ccc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_RTC_WaitForSynchro+0x4c>)
 8001cde:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce0:	f7fe fdcc 	bl	800087c <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001cea:	f7fe fdc7 	bl	800087c <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad2      	subs	r2, r2, r3
 8001cf4:	23fa      	movs	r3, #250	; 0xfa
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d901      	bls.n	8001d00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e006      	b.n	8001d0e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0ee      	beq.n	8001cea <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	00017959 	.word	0x00017959

08001d1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d12b      	bne.n	8001d94 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4c:	f7fe fd96 	bl	800087c <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001d54:	e013      	b.n	8001d7e <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d56:	f7fe fd91 	bl	800087c <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1ad2      	subs	r2, r2, r3
 8001d60:	200f      	movs	r0, #15
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	1839      	adds	r1, r7, r0
 8001d66:	7809      	ldrb	r1, [r1, #0]
 8001d68:	7019      	strb	r1, [r3, #0]
 8001d6a:	23fa      	movs	r3, #250	; 0xfa
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d905      	bls.n	8001d7e <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	4013      	ands	r3, r2
 8001d88:	d104      	bne.n	8001d94 <RTC_EnterInitMode+0x78>
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d1e0      	bne.n	8001d56 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8001d94:	230f      	movs	r3, #15
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	781b      	ldrb	r3, [r3, #0]
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001da2:	b590      	push	{r4, r7, lr}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	240f      	movs	r4, #15
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d10b      	bne.n	8001de6 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ff7b 	bl	8001ccc <HAL_RTC_WaitForSynchro>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d005      	beq.n	8001de6 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001de6:	230f      	movs	r3, #15
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b005      	add	sp, #20
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	1dfb      	adds	r3, r7, #7
 8001dfe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8001e04:	e007      	b.n	8001e16 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001e0c:	1dfb      	adds	r3, r7, #7
 8001e0e:	1dfa      	adds	r2, r7, #7
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	3a0a      	subs	r2, #10
 8001e14:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d8f3      	bhi.n	8001e06 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	001a      	movs	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	189b      	adds	r3, r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	210f      	movs	r1, #15
 8001e64:	400b      	ands	r3, r1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	18d3      	adds	r3, r2, r3
 8001e6a:	b2db      	uxtb	r3, r3
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e044      	b.n	8001f10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2278      	movs	r2, #120	; 0x78
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7fe fbc9 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2224      	movs	r2, #36	; 0x24
 8001ea2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 fa0c 	bl	80022dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 f8c8 	bl	800205c <UART_SetConfig>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e01c      	b.n	8001f10 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	490d      	ldr	r1, [pc, #52]	; (8001f18 <HAL_UART_Init+0xa4>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	212a      	movs	r1, #42	; 0x2a
 8001ef2:	438a      	bics	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fa9b 	bl	8002444 <UART_CheckIdleState>
 8001f0e:	0003      	movs	r3, r0
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	ffffb7ff 	.word	0xffffb7ff

08001f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	1dbb      	adds	r3, r7, #6
 8001f2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d000      	beq.n	8001f36 <HAL_UART_Transmit+0x1a>
 8001f34:	e08d      	b.n	8002052 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_UART_Transmit+0x28>
 8001f3c:	1dbb      	adds	r3, r7, #6
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e085      	b.n	8002054 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	015b      	lsls	r3, r3, #5
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d109      	bne.n	8001f68 <HAL_UART_Transmit+0x4c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e075      	b.n	8002054 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2284      	movs	r2, #132	; 0x84
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2221      	movs	r2, #33	; 0x21
 8001f74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f76:	f7fe fc81 	bl	800087c <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1dba      	adds	r2, r7, #6
 8001f82:	2150      	movs	r1, #80	; 0x50
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1dba      	adds	r2, r7, #6
 8001f8c:	2152      	movs	r1, #82	; 0x52
 8001f8e:	8812      	ldrh	r2, [r2, #0]
 8001f90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	015b      	lsls	r3, r3, #5
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d108      	bne.n	8001fb0 <HAL_UART_Transmit+0x94>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d104      	bne.n	8001fb0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	e003      	b.n	8001fb8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fb8:	e030      	b.n	800201c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	f000 fae4 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d004      	beq.n	8001fda <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e03c      	b.n	8002054 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	05d2      	lsls	r2, r2, #23
 8001fea:	0dd2      	lsrs	r2, r2, #23
 8001fec:	b292      	uxth	r2, r2
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	e008      	b.n	800200a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b292      	uxth	r2, r2
 8002002:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	3301      	adds	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2252      	movs	r2, #82	; 0x52
 800200e:	5a9b      	ldrh	r3, [r3, r2]
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b299      	uxth	r1, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2252      	movs	r2, #82	; 0x52
 800201a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2252      	movs	r2, #82	; 0x52
 8002020:	5a9b      	ldrh	r3, [r3, r2]
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1c8      	bne.n	8001fba <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	0013      	movs	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	f000 faad 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 800203a:	1e03      	subs	r3, r0, #0
 800203c:	d004      	beq.n	8002048 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e005      	b.n	8002054 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b008      	add	sp, #32
 800205a:	bd80      	pop	{r7, pc}

0800205c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002064:	231e      	movs	r3, #30
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a8d      	ldr	r2, [pc, #564]	; (80022c0 <UART_SetConfig+0x264>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a88      	ldr	r2, [pc, #544]	; (80022c4 <UART_SetConfig+0x268>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <UART_SetConfig+0x26c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7b      	ldr	r2, [pc, #492]	; (80022cc <UART_SetConfig+0x270>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d127      	bne.n	8002132 <UART_SetConfig+0xd6>
 80020e2:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <UART_SetConfig+0x274>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d00d      	beq.n	800210a <UART_SetConfig+0xae>
 80020ee:	d81b      	bhi.n	8002128 <UART_SetConfig+0xcc>
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d014      	beq.n	800211e <UART_SetConfig+0xc2>
 80020f4:	d818      	bhi.n	8002128 <UART_SetConfig+0xcc>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <UART_SetConfig+0xa4>
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d00a      	beq.n	8002114 <UART_SetConfig+0xb8>
 80020fe:	e013      	b.n	8002128 <UART_SetConfig+0xcc>
 8002100:	231f      	movs	r3, #31
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e021      	b.n	800214e <UART_SetConfig+0xf2>
 800210a:	231f      	movs	r3, #31
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e01c      	b.n	800214e <UART_SetConfig+0xf2>
 8002114:	231f      	movs	r3, #31
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2204      	movs	r2, #4
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e017      	b.n	800214e <UART_SetConfig+0xf2>
 800211e:	231f      	movs	r3, #31
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2208      	movs	r2, #8
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e012      	b.n	800214e <UART_SetConfig+0xf2>
 8002128:	231f      	movs	r3, #31
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2210      	movs	r2, #16
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e00d      	b.n	800214e <UART_SetConfig+0xf2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <UART_SetConfig+0x278>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d104      	bne.n	8002146 <UART_SetConfig+0xea>
 800213c:	231f      	movs	r3, #31
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e003      	b.n	800214e <UART_SetConfig+0xf2>
 8002146:	231f      	movs	r3, #31
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2210      	movs	r2, #16
 800214c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	429a      	cmp	r2, r3
 8002158:	d15c      	bne.n	8002214 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d015      	beq.n	8002190 <UART_SetConfig+0x134>
 8002164:	dc18      	bgt.n	8002198 <UART_SetConfig+0x13c>
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00d      	beq.n	8002186 <UART_SetConfig+0x12a>
 800216a:	dc15      	bgt.n	8002198 <UART_SetConfig+0x13c>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <UART_SetConfig+0x11a>
 8002170:	2b02      	cmp	r3, #2
 8002172:	d005      	beq.n	8002180 <UART_SetConfig+0x124>
 8002174:	e010      	b.n	8002198 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002176:	f7ff fa39 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 800217a:	0003      	movs	r3, r0
 800217c:	61bb      	str	r3, [r7, #24]
        break;
 800217e:	e012      	b.n	80021a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <UART_SetConfig+0x27c>)
 8002182:	61bb      	str	r3, [r7, #24]
        break;
 8002184:	e00f      	b.n	80021a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002186:	f7ff f9d1 	bl	800152c <HAL_RCC_GetSysClockFreq>
 800218a:	0003      	movs	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]
        break;
 800218e:	e00a      	b.n	80021a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	61bb      	str	r3, [r7, #24]
        break;
 8002196:	e006      	b.n	80021a6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800219c:	231e      	movs	r3, #30
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
        break;
 80021a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d100      	bne.n	80021ae <UART_SetConfig+0x152>
 80021ac:	e07a      	b.n	80022a4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	005a      	lsls	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	18d2      	adds	r2, r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	0019      	movs	r1, r3
 80021c0:	0010      	movs	r0, r2
 80021c2:	f7fd ffab 	bl	800011c <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d91c      	bls.n	800220a <UART_SetConfig+0x1ae>
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	025b      	lsls	r3, r3, #9
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d217      	bcs.n	800220a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	200e      	movs	r0, #14
 80021e0:	183b      	adds	r3, r7, r0
 80021e2:	210f      	movs	r1, #15
 80021e4:	438a      	bics	r2, r1
 80021e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2207      	movs	r2, #7
 80021f0:	4013      	ands	r3, r2
 80021f2:	b299      	uxth	r1, r3
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	183a      	adds	r2, r7, r0
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	183a      	adds	r2, r7, r0
 8002204:	8812      	ldrh	r2, [r2, #0]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	e04c      	b.n	80022a4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800220a:	231e      	movs	r3, #30
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e047      	b.n	80022a4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002214:	231f      	movs	r3, #31
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b08      	cmp	r3, #8
 800221c:	d015      	beq.n	800224a <UART_SetConfig+0x1ee>
 800221e:	dc18      	bgt.n	8002252 <UART_SetConfig+0x1f6>
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00d      	beq.n	8002240 <UART_SetConfig+0x1e4>
 8002224:	dc15      	bgt.n	8002252 <UART_SetConfig+0x1f6>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <UART_SetConfig+0x1d4>
 800222a:	2b02      	cmp	r3, #2
 800222c:	d005      	beq.n	800223a <UART_SetConfig+0x1de>
 800222e:	e010      	b.n	8002252 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002230:	f7ff f9dc 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002234:	0003      	movs	r3, r0
 8002236:	61bb      	str	r3, [r7, #24]
        break;
 8002238:	e012      	b.n	8002260 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <UART_SetConfig+0x27c>)
 800223c:	61bb      	str	r3, [r7, #24]
        break;
 800223e:	e00f      	b.n	8002260 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002240:	f7ff f974 	bl	800152c <HAL_RCC_GetSysClockFreq>
 8002244:	0003      	movs	r3, r0
 8002246:	61bb      	str	r3, [r7, #24]
        break;
 8002248:	e00a      	b.n	8002260 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	61bb      	str	r3, [r7, #24]
        break;
 8002250:	e006      	b.n	8002260 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002256:	231e      	movs	r3, #30
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
        break;
 800225e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01e      	beq.n	80022a4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	085a      	lsrs	r2, r3, #1
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	18d2      	adds	r2, r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	0019      	movs	r1, r3
 8002276:	0010      	movs	r0, r2
 8002278:	f7fd ff50 	bl	800011c <__udivsi3>
 800227c:	0003      	movs	r3, r0
 800227e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d90a      	bls.n	800229c <UART_SetConfig+0x240>
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	429a      	cmp	r2, r3
 800228e:	d205      	bcs.n	800229c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	b29a      	uxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	e003      	b.n	80022a4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800229c:	231e      	movs	r3, #30
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80022b0:	231e      	movs	r3, #30
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b008      	add	sp, #32
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	ffff69f3 	.word	0xffff69f3
 80022c4:	ffffcfff 	.word	0xffffcfff
 80022c8:	fffff4ff 	.word	0xfffff4ff
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40004400 	.word	0x40004400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2208      	movs	r2, #8
 80022ea:	4013      	ands	r3, r2
 80022ec:	d00b      	beq.n	8002306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a4a      	ldr	r2, [pc, #296]	; (8002420 <UART_AdvFeatureConfig+0x144>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2201      	movs	r2, #1
 800230c:	4013      	ands	r3, r2
 800230e:	d00b      	beq.n	8002328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a43      	ldr	r2, [pc, #268]	; (8002424 <UART_AdvFeatureConfig+0x148>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d00b      	beq.n	800234a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <UART_AdvFeatureConfig+0x14c>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	2204      	movs	r2, #4
 8002350:	4013      	ands	r3, r2
 8002352:	d00b      	beq.n	800236c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a34      	ldr	r2, [pc, #208]	; (800242c <UART_AdvFeatureConfig+0x150>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2210      	movs	r2, #16
 8002372:	4013      	ands	r3, r2
 8002374:	d00b      	beq.n	800238e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <UART_AdvFeatureConfig+0x154>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2220      	movs	r2, #32
 8002394:	4013      	ands	r3, r2
 8002396:	d00b      	beq.n	80023b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4a25      	ldr	r2, [pc, #148]	; (8002434 <UART_AdvFeatureConfig+0x158>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2240      	movs	r2, #64	; 0x40
 80023b6:	4013      	ands	r3, r2
 80023b8:	d01d      	beq.n	80023f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <UART_AdvFeatureConfig+0x15c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	035b      	lsls	r3, r3, #13
 80023da:	429a      	cmp	r2, r3
 80023dc:	d10b      	bne.n	80023f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a15      	ldr	r2, [pc, #84]	; (800243c <UART_AdvFeatureConfig+0x160>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	4013      	ands	r3, r2
 80023fe:	d00b      	beq.n	8002418 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <UART_AdvFeatureConfig+0x164>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
  }
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}
 8002420:	ffff7fff 	.word	0xffff7fff
 8002424:	fffdffff 	.word	0xfffdffff
 8002428:	fffeffff 	.word	0xfffeffff
 800242c:	fffbffff 	.word	0xfffbffff
 8002430:	ffffefff 	.word	0xffffefff
 8002434:	ffffdfff 	.word	0xffffdfff
 8002438:	ffefffff 	.word	0xffefffff
 800243c:	ff9fffff 	.word	0xff9fffff
 8002440:	fff7ffff 	.word	0xfff7ffff

08002444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b092      	sub	sp, #72	; 0x48
 8002448:	af02      	add	r7, sp, #8
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2284      	movs	r2, #132	; 0x84
 8002450:	2100      	movs	r1, #0
 8002452:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002454:	f7fe fa12 	bl	800087c <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2208      	movs	r2, #8
 8002464:	4013      	ands	r3, r2
 8002466:	2b08      	cmp	r3, #8
 8002468:	d12c      	bne.n	80024c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800246a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	0391      	lsls	r1, r2, #14
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <UART_CheckIdleState+0x148>)
 8002474:	9200      	str	r2, [sp, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	f000 f88c 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d021      	beq.n	80024c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002480:	f3ef 8310 	mrs	r3, PRIMASK
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
 800248a:	2301      	movs	r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	438a      	bics	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	f383 8810 	msr	PRIMASK, r3
}
 80024b0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2278      	movs	r2, #120	; 0x78
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e05f      	b.n	8002584 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2204      	movs	r2, #4
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d146      	bne.n	8002560 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	03d1      	lsls	r1, r2, #15
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <UART_CheckIdleState+0x148>)
 80024dc:	9200      	str	r2, [sp, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	f000 f858 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d03b      	beq.n	8002560 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e8:	f3ef 8310 	mrs	r3, PRIMASK
 80024ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
 80024f2:	2301      	movs	r3, #1
 80024f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f383 8810 	msr	PRIMASK, r3
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4921      	ldr	r1, [pc, #132]	; (8002590 <UART_CheckIdleState+0x14c>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f383 8810 	msr	PRIMASK, r3
}
 8002518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251a:	f3ef 8310 	mrs	r3, PRIMASK
 800251e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002520:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f383 8810 	msr	PRIMASK, r3
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	438a      	bics	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	f383 8810 	msr	PRIMASK, r3
}
 800254a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	2120      	movs	r1, #32
 8002552:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2278      	movs	r2, #120	; 0x78
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e011      	b.n	8002584 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	2120      	movs	r1, #32
 800256c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2278      	movs	r2, #120	; 0x78
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b010      	add	sp, #64	; 0x40
 800258a:	bd80      	pop	{r7, pc}
 800258c:	01ffffff 	.word	0x01ffffff
 8002590:	fffffedf 	.word	0xfffffedf

08002594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	1dfb      	adds	r3, r7, #7
 80025a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a4:	e051      	b.n	800264a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	3301      	adds	r3, #1
 80025aa:	d04e      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ac:	f7fe f966 	bl	800087c <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e051      	b.n	800266a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d03b      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0xb6>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d038      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0xb6>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	d035      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2208      	movs	r2, #8
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d111      	bne.n	8002610 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2208      	movs	r2, #8
 80025f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 f83c 	bl	8002674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2284      	movs	r2, #132	; 0x84
 8002600:	2108      	movs	r1, #8
 8002602:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2278      	movs	r2, #120	; 0x78
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e02c      	b.n	800266a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	401a      	ands	r2, r3
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	429a      	cmp	r2, r3
 8002622:	d112      	bne.n	800264a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f81f 	bl	8002674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2284      	movs	r2, #132	; 0x84
 800263a:	2120      	movs	r1, #32
 800263c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2278      	movs	r2, #120	; 0x78
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e00f      	b.n	800266a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	4013      	ands	r3, r2
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	425a      	negs	r2, r3
 800265a:	4153      	adcs	r3, r2
 800265c:	b2db      	uxtb	r3, r3
 800265e:	001a      	movs	r2, r3
 8002660:	1dfb      	adds	r3, r7, #7
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d09e      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267c:	f3ef 8310 	mrs	r3, PRIMASK
 8002680:	617b      	str	r3, [r7, #20]
  return(result);
 8002682:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
 8002686:	2301      	movs	r3, #1
 8002688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f383 8810 	msr	PRIMASK, r3
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4926      	ldr	r1, [pc, #152]	; (8002738 <UART_EndRxTransfer+0xc4>)
 800269e:	400a      	ands	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f383 8810 	msr	PRIMASK, r3
}
 80026ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ae:	f3ef 8310 	mrs	r3, PRIMASK
 80026b2:	623b      	str	r3, [r7, #32]
  return(result);
 80026b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	f383 8810 	msr	PRIMASK, r3
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	438a      	bics	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	f383 8810 	msr	PRIMASK, r3
}
 80026de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d118      	bne.n	800271a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e8:	f3ef 8310 	mrs	r3, PRIMASK
 80026ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80026ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f2:	2301      	movs	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2110      	movs	r1, #16
 800270a:	438a      	bics	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	2120      	movs	r1, #32
 8002720:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b00e      	add	sp, #56	; 0x38
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	fffffedf 	.word	0xfffffedf

0800273c <__errno>:
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <__errno+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	2000000c 	.word	0x2000000c

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2600      	movs	r6, #0
 800274c:	4d0c      	ldr	r5, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1b64      	subs	r4, r4, r5
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a6      	cmp	r6, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	2600      	movs	r6, #0
 800275a:	f000 fc8b 	bl	8003074 <_init>
 800275e:	4d0a      	ldr	r5, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4c0a      	ldr	r4, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a6      	cmp	r6, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	00b3      	lsls	r3, r6, #2
 800276e:	58eb      	ldr	r3, [r5, r3]
 8002770:	4798      	blx	r3
 8002772:	3601      	adds	r6, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	00b3      	lsls	r3, r6, #2
 8002778:	58eb      	ldr	r3, [r5, r3]
 800277a:	4798      	blx	r3
 800277c:	3601      	adds	r6, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	08003110 	.word	0x08003110
 8002784:	08003110 	.word	0x08003110
 8002788:	08003110 	.word	0x08003110
 800278c:	08003114 	.word	0x08003114

08002790 <memset>:
 8002790:	0003      	movs	r3, r0
 8002792:	1882      	adds	r2, r0, r2
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	7019      	strb	r1, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <siprintf>:
 80027a0:	b40e      	push	{r1, r2, r3}
 80027a2:	b500      	push	{lr}
 80027a4:	490b      	ldr	r1, [pc, #44]	; (80027d4 <siprintf+0x34>)
 80027a6:	b09c      	sub	sp, #112	; 0x70
 80027a8:	ab1d      	add	r3, sp, #116	; 0x74
 80027aa:	9002      	str	r0, [sp, #8]
 80027ac:	9006      	str	r0, [sp, #24]
 80027ae:	9107      	str	r1, [sp, #28]
 80027b0:	9104      	str	r1, [sp, #16]
 80027b2:	4809      	ldr	r0, [pc, #36]	; (80027d8 <siprintf+0x38>)
 80027b4:	4909      	ldr	r1, [pc, #36]	; (80027dc <siprintf+0x3c>)
 80027b6:	cb04      	ldmia	r3!, {r2}
 80027b8:	9105      	str	r1, [sp, #20]
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	a902      	add	r1, sp, #8
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	f000 f870 	bl	80028a4 <_svfiprintf_r>
 80027c4:	2300      	movs	r3, #0
 80027c6:	9a02      	ldr	r2, [sp, #8]
 80027c8:	7013      	strb	r3, [r2, #0]
 80027ca:	b01c      	add	sp, #112	; 0x70
 80027cc:	bc08      	pop	{r3}
 80027ce:	b003      	add	sp, #12
 80027d0:	4718      	bx	r3
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	7fffffff 	.word	0x7fffffff
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	ffff0208 	.word	0xffff0208

080027e0 <__ssputs_r>:
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	688e      	ldr	r6, [r1, #8]
 80027e4:	b085      	sub	sp, #20
 80027e6:	0007      	movs	r7, r0
 80027e8:	000c      	movs	r4, r1
 80027ea:	9203      	str	r2, [sp, #12]
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	429e      	cmp	r6, r3
 80027f0:	d83c      	bhi.n	800286c <__ssputs_r+0x8c>
 80027f2:	2390      	movs	r3, #144	; 0x90
 80027f4:	898a      	ldrh	r2, [r1, #12]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	421a      	tst	r2, r3
 80027fa:	d034      	beq.n	8002866 <__ssputs_r+0x86>
 80027fc:	6909      	ldr	r1, [r1, #16]
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	6960      	ldr	r0, [r4, #20]
 8002802:	1a5b      	subs	r3, r3, r1
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	2303      	movs	r3, #3
 8002808:	4343      	muls	r3, r0
 800280a:	0fdd      	lsrs	r5, r3, #31
 800280c:	18ed      	adds	r5, r5, r3
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	9802      	ldr	r0, [sp, #8]
 8002812:	3301      	adds	r3, #1
 8002814:	181b      	adds	r3, r3, r0
 8002816:	106d      	asrs	r5, r5, #1
 8002818:	42ab      	cmp	r3, r5
 800281a:	d900      	bls.n	800281e <__ssputs_r+0x3e>
 800281c:	001d      	movs	r5, r3
 800281e:	0553      	lsls	r3, r2, #21
 8002820:	d532      	bpl.n	8002888 <__ssputs_r+0xa8>
 8002822:	0029      	movs	r1, r5
 8002824:	0038      	movs	r0, r7
 8002826:	f000 fb53 	bl	8002ed0 <_malloc_r>
 800282a:	1e06      	subs	r6, r0, #0
 800282c:	d109      	bne.n	8002842 <__ssputs_r+0x62>
 800282e:	230c      	movs	r3, #12
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	2001      	movs	r0, #1
 8002836:	89a2      	ldrh	r2, [r4, #12]
 8002838:	4240      	negs	r0, r0
 800283a:	4313      	orrs	r3, r2
 800283c:	81a3      	strh	r3, [r4, #12]
 800283e:	b005      	add	sp, #20
 8002840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002842:	9a02      	ldr	r2, [sp, #8]
 8002844:	6921      	ldr	r1, [r4, #16]
 8002846:	f000 faba 	bl	8002dbe <memcpy>
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <__ssputs_r+0xc0>)
 800284e:	401a      	ands	r2, r3
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	4313      	orrs	r3, r2
 8002854:	81a3      	strh	r3, [r4, #12]
 8002856:	9b02      	ldr	r3, [sp, #8]
 8002858:	6126      	str	r6, [r4, #16]
 800285a:	18f6      	adds	r6, r6, r3
 800285c:	6026      	str	r6, [r4, #0]
 800285e:	6165      	str	r5, [r4, #20]
 8002860:	9e01      	ldr	r6, [sp, #4]
 8002862:	1aed      	subs	r5, r5, r3
 8002864:	60a5      	str	r5, [r4, #8]
 8002866:	9b01      	ldr	r3, [sp, #4]
 8002868:	429e      	cmp	r6, r3
 800286a:	d900      	bls.n	800286e <__ssputs_r+0x8e>
 800286c:	9e01      	ldr	r6, [sp, #4]
 800286e:	0032      	movs	r2, r6
 8002870:	9903      	ldr	r1, [sp, #12]
 8002872:	6820      	ldr	r0, [r4, #0]
 8002874:	f000 faac 	bl	8002dd0 <memmove>
 8002878:	68a3      	ldr	r3, [r4, #8]
 800287a:	2000      	movs	r0, #0
 800287c:	1b9b      	subs	r3, r3, r6
 800287e:	60a3      	str	r3, [r4, #8]
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	199e      	adds	r6, r3, r6
 8002884:	6026      	str	r6, [r4, #0]
 8002886:	e7da      	b.n	800283e <__ssputs_r+0x5e>
 8002888:	002a      	movs	r2, r5
 800288a:	0038      	movs	r0, r7
 800288c:	f000 fb96 	bl	8002fbc <_realloc_r>
 8002890:	1e06      	subs	r6, r0, #0
 8002892:	d1e0      	bne.n	8002856 <__ssputs_r+0x76>
 8002894:	0038      	movs	r0, r7
 8002896:	6921      	ldr	r1, [r4, #16]
 8002898:	f000 faae 	bl	8002df8 <_free_r>
 800289c:	e7c7      	b.n	800282e <__ssputs_r+0x4e>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	fffffb7f 	.word	0xfffffb7f

080028a4 <_svfiprintf_r>:
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	b0a1      	sub	sp, #132	; 0x84
 80028a8:	9003      	str	r0, [sp, #12]
 80028aa:	001d      	movs	r5, r3
 80028ac:	898b      	ldrh	r3, [r1, #12]
 80028ae:	000f      	movs	r7, r1
 80028b0:	0016      	movs	r6, r2
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	d511      	bpl.n	80028da <_svfiprintf_r+0x36>
 80028b6:	690b      	ldr	r3, [r1, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10e      	bne.n	80028da <_svfiprintf_r+0x36>
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	f000 fb07 	bl	8002ed0 <_malloc_r>
 80028c2:	6038      	str	r0, [r7, #0]
 80028c4:	6138      	str	r0, [r7, #16]
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d105      	bne.n	80028d6 <_svfiprintf_r+0x32>
 80028ca:	230c      	movs	r3, #12
 80028cc:	9a03      	ldr	r2, [sp, #12]
 80028ce:	3801      	subs	r0, #1
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	b021      	add	sp, #132	; 0x84
 80028d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d6:	2340      	movs	r3, #64	; 0x40
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	2300      	movs	r3, #0
 80028dc:	ac08      	add	r4, sp, #32
 80028de:	6163      	str	r3, [r4, #20]
 80028e0:	3320      	adds	r3, #32
 80028e2:	7663      	strb	r3, [r4, #25]
 80028e4:	3310      	adds	r3, #16
 80028e6:	76a3      	strb	r3, [r4, #26]
 80028e8:	9507      	str	r5, [sp, #28]
 80028ea:	0035      	movs	r5, r6
 80028ec:	782b      	ldrb	r3, [r5, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <_svfiprintf_r+0x52>
 80028f2:	2b25      	cmp	r3, #37	; 0x25
 80028f4:	d147      	bne.n	8002986 <_svfiprintf_r+0xe2>
 80028f6:	1bab      	subs	r3, r5, r6
 80028f8:	9305      	str	r3, [sp, #20]
 80028fa:	42b5      	cmp	r5, r6
 80028fc:	d00c      	beq.n	8002918 <_svfiprintf_r+0x74>
 80028fe:	0032      	movs	r2, r6
 8002900:	0039      	movs	r1, r7
 8002902:	9803      	ldr	r0, [sp, #12]
 8002904:	f7ff ff6c 	bl	80027e0 <__ssputs_r>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	d100      	bne.n	800290e <_svfiprintf_r+0x6a>
 800290c:	e0ae      	b.n	8002a6c <_svfiprintf_r+0x1c8>
 800290e:	6962      	ldr	r2, [r4, #20]
 8002910:	9b05      	ldr	r3, [sp, #20]
 8002912:	4694      	mov	ip, r2
 8002914:	4463      	add	r3, ip
 8002916:	6163      	str	r3, [r4, #20]
 8002918:	782b      	ldrb	r3, [r5, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d100      	bne.n	8002920 <_svfiprintf_r+0x7c>
 800291e:	e0a5      	b.n	8002a6c <_svfiprintf_r+0x1c8>
 8002920:	2201      	movs	r2, #1
 8002922:	2300      	movs	r3, #0
 8002924:	4252      	negs	r2, r2
 8002926:	6062      	str	r2, [r4, #4]
 8002928:	a904      	add	r1, sp, #16
 800292a:	3254      	adds	r2, #84	; 0x54
 800292c:	1852      	adds	r2, r2, r1
 800292e:	1c6e      	adds	r6, r5, #1
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	60e3      	str	r3, [r4, #12]
 8002934:	60a3      	str	r3, [r4, #8]
 8002936:	7013      	strb	r3, [r2, #0]
 8002938:	65a3      	str	r3, [r4, #88]	; 0x58
 800293a:	2205      	movs	r2, #5
 800293c:	7831      	ldrb	r1, [r6, #0]
 800293e:	4854      	ldr	r0, [pc, #336]	; (8002a90 <_svfiprintf_r+0x1ec>)
 8002940:	f000 fa32 	bl	8002da8 <memchr>
 8002944:	1c75      	adds	r5, r6, #1
 8002946:	2800      	cmp	r0, #0
 8002948:	d11f      	bne.n	800298a <_svfiprintf_r+0xe6>
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	06d3      	lsls	r3, r2, #27
 800294e:	d504      	bpl.n	800295a <_svfiprintf_r+0xb6>
 8002950:	2353      	movs	r3, #83	; 0x53
 8002952:	a904      	add	r1, sp, #16
 8002954:	185b      	adds	r3, r3, r1
 8002956:	2120      	movs	r1, #32
 8002958:	7019      	strb	r1, [r3, #0]
 800295a:	0713      	lsls	r3, r2, #28
 800295c:	d504      	bpl.n	8002968 <_svfiprintf_r+0xc4>
 800295e:	2353      	movs	r3, #83	; 0x53
 8002960:	a904      	add	r1, sp, #16
 8002962:	185b      	adds	r3, r3, r1
 8002964:	212b      	movs	r1, #43	; 0x2b
 8002966:	7019      	strb	r1, [r3, #0]
 8002968:	7833      	ldrb	r3, [r6, #0]
 800296a:	2b2a      	cmp	r3, #42	; 0x2a
 800296c:	d016      	beq.n	800299c <_svfiprintf_r+0xf8>
 800296e:	0035      	movs	r5, r6
 8002970:	2100      	movs	r1, #0
 8002972:	200a      	movs	r0, #10
 8002974:	68e3      	ldr	r3, [r4, #12]
 8002976:	782a      	ldrb	r2, [r5, #0]
 8002978:	1c6e      	adds	r6, r5, #1
 800297a:	3a30      	subs	r2, #48	; 0x30
 800297c:	2a09      	cmp	r2, #9
 800297e:	d94e      	bls.n	8002a1e <_svfiprintf_r+0x17a>
 8002980:	2900      	cmp	r1, #0
 8002982:	d111      	bne.n	80029a8 <_svfiprintf_r+0x104>
 8002984:	e017      	b.n	80029b6 <_svfiprintf_r+0x112>
 8002986:	3501      	adds	r5, #1
 8002988:	e7b0      	b.n	80028ec <_svfiprintf_r+0x48>
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <_svfiprintf_r+0x1ec>)
 800298c:	6822      	ldr	r2, [r4, #0]
 800298e:	1ac0      	subs	r0, r0, r3
 8002990:	2301      	movs	r3, #1
 8002992:	4083      	lsls	r3, r0
 8002994:	4313      	orrs	r3, r2
 8002996:	002e      	movs	r6, r5
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	e7ce      	b.n	800293a <_svfiprintf_r+0x96>
 800299c:	9b07      	ldr	r3, [sp, #28]
 800299e:	1d19      	adds	r1, r3, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	9107      	str	r1, [sp, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db01      	blt.n	80029ac <_svfiprintf_r+0x108>
 80029a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80029aa:	e004      	b.n	80029b6 <_svfiprintf_r+0x112>
 80029ac:	425b      	negs	r3, r3
 80029ae:	60e3      	str	r3, [r4, #12]
 80029b0:	2302      	movs	r3, #2
 80029b2:	4313      	orrs	r3, r2
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	782b      	ldrb	r3, [r5, #0]
 80029b8:	2b2e      	cmp	r3, #46	; 0x2e
 80029ba:	d10a      	bne.n	80029d2 <_svfiprintf_r+0x12e>
 80029bc:	786b      	ldrb	r3, [r5, #1]
 80029be:	2b2a      	cmp	r3, #42	; 0x2a
 80029c0:	d135      	bne.n	8002a2e <_svfiprintf_r+0x18a>
 80029c2:	9b07      	ldr	r3, [sp, #28]
 80029c4:	3502      	adds	r5, #2
 80029c6:	1d1a      	adds	r2, r3, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	9207      	str	r2, [sp, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db2b      	blt.n	8002a28 <_svfiprintf_r+0x184>
 80029d0:	9309      	str	r3, [sp, #36]	; 0x24
 80029d2:	4e30      	ldr	r6, [pc, #192]	; (8002a94 <_svfiprintf_r+0x1f0>)
 80029d4:	2203      	movs	r2, #3
 80029d6:	0030      	movs	r0, r6
 80029d8:	7829      	ldrb	r1, [r5, #0]
 80029da:	f000 f9e5 	bl	8002da8 <memchr>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d006      	beq.n	80029f0 <_svfiprintf_r+0x14c>
 80029e2:	2340      	movs	r3, #64	; 0x40
 80029e4:	1b80      	subs	r0, r0, r6
 80029e6:	4083      	lsls	r3, r0
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	3501      	adds	r5, #1
 80029ec:	4313      	orrs	r3, r2
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	7829      	ldrb	r1, [r5, #0]
 80029f2:	2206      	movs	r2, #6
 80029f4:	4828      	ldr	r0, [pc, #160]	; (8002a98 <_svfiprintf_r+0x1f4>)
 80029f6:	1c6e      	adds	r6, r5, #1
 80029f8:	7621      	strb	r1, [r4, #24]
 80029fa:	f000 f9d5 	bl	8002da8 <memchr>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d03c      	beq.n	8002a7c <_svfiprintf_r+0x1d8>
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <_svfiprintf_r+0x1f8>)
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d125      	bne.n	8002a54 <_svfiprintf_r+0x1b0>
 8002a08:	2207      	movs	r2, #7
 8002a0a:	9b07      	ldr	r3, [sp, #28]
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	4393      	bics	r3, r2
 8002a10:	3308      	adds	r3, #8
 8002a12:	9307      	str	r3, [sp, #28]
 8002a14:	6963      	ldr	r3, [r4, #20]
 8002a16:	9a04      	ldr	r2, [sp, #16]
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	6163      	str	r3, [r4, #20]
 8002a1c:	e765      	b.n	80028ea <_svfiprintf_r+0x46>
 8002a1e:	4343      	muls	r3, r0
 8002a20:	0035      	movs	r5, r6
 8002a22:	2101      	movs	r1, #1
 8002a24:	189b      	adds	r3, r3, r2
 8002a26:	e7a6      	b.n	8002976 <_svfiprintf_r+0xd2>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	425b      	negs	r3, r3
 8002a2c:	e7d0      	b.n	80029d0 <_svfiprintf_r+0x12c>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	200a      	movs	r0, #10
 8002a32:	001a      	movs	r2, r3
 8002a34:	3501      	adds	r5, #1
 8002a36:	6063      	str	r3, [r4, #4]
 8002a38:	7829      	ldrb	r1, [r5, #0]
 8002a3a:	1c6e      	adds	r6, r5, #1
 8002a3c:	3930      	subs	r1, #48	; 0x30
 8002a3e:	2909      	cmp	r1, #9
 8002a40:	d903      	bls.n	8002a4a <_svfiprintf_r+0x1a6>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0c5      	beq.n	80029d2 <_svfiprintf_r+0x12e>
 8002a46:	9209      	str	r2, [sp, #36]	; 0x24
 8002a48:	e7c3      	b.n	80029d2 <_svfiprintf_r+0x12e>
 8002a4a:	4342      	muls	r2, r0
 8002a4c:	0035      	movs	r5, r6
 8002a4e:	2301      	movs	r3, #1
 8002a50:	1852      	adds	r2, r2, r1
 8002a52:	e7f1      	b.n	8002a38 <_svfiprintf_r+0x194>
 8002a54:	ab07      	add	r3, sp, #28
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	003a      	movs	r2, r7
 8002a5a:	0021      	movs	r1, r4
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <_svfiprintf_r+0x1fc>)
 8002a5e:	9803      	ldr	r0, [sp, #12]
 8002a60:	e000      	b.n	8002a64 <_svfiprintf_r+0x1c0>
 8002a62:	bf00      	nop
 8002a64:	9004      	str	r0, [sp, #16]
 8002a66:	9b04      	ldr	r3, [sp, #16]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	d1d3      	bne.n	8002a14 <_svfiprintf_r+0x170>
 8002a6c:	89bb      	ldrh	r3, [r7, #12]
 8002a6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a70:	065b      	lsls	r3, r3, #25
 8002a72:	d400      	bmi.n	8002a76 <_svfiprintf_r+0x1d2>
 8002a74:	e72d      	b.n	80028d2 <_svfiprintf_r+0x2e>
 8002a76:	2001      	movs	r0, #1
 8002a78:	4240      	negs	r0, r0
 8002a7a:	e72a      	b.n	80028d2 <_svfiprintf_r+0x2e>
 8002a7c:	ab07      	add	r3, sp, #28
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	003a      	movs	r2, r7
 8002a82:	0021      	movs	r1, r4
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <_svfiprintf_r+0x1fc>)
 8002a86:	9803      	ldr	r0, [sp, #12]
 8002a88:	f000 f87c 	bl	8002b84 <_printf_i>
 8002a8c:	e7ea      	b.n	8002a64 <_svfiprintf_r+0x1c0>
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	080030dc 	.word	0x080030dc
 8002a94:	080030e2 	.word	0x080030e2
 8002a98:	080030e6 	.word	0x080030e6
 8002a9c:	00000000 	.word	0x00000000
 8002aa0:	080027e1 	.word	0x080027e1

08002aa4 <_printf_common>:
 8002aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aa6:	0015      	movs	r5, r2
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	688a      	ldr	r2, [r1, #8]
 8002aac:	690b      	ldr	r3, [r1, #16]
 8002aae:	000c      	movs	r4, r1
 8002ab0:	9000      	str	r0, [sp, #0]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	da00      	bge.n	8002ab8 <_printf_common+0x14>
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	0022      	movs	r2, r4
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	3243      	adds	r2, #67	; 0x43
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d001      	beq.n	8002ac8 <_printf_common+0x24>
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	069b      	lsls	r3, r3, #26
 8002acc:	d502      	bpl.n	8002ad4 <_printf_common+0x30>
 8002ace:	682b      	ldr	r3, [r5, #0]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	602b      	str	r3, [r5, #0]
 8002ad4:	6822      	ldr	r2, [r4, #0]
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	0017      	movs	r7, r2
 8002ada:	401f      	ands	r7, r3
 8002adc:	421a      	tst	r2, r3
 8002ade:	d027      	beq.n	8002b30 <_printf_common+0x8c>
 8002ae0:	0023      	movs	r3, r4
 8002ae2:	3343      	adds	r3, #67	; 0x43
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	1e5a      	subs	r2, r3, #1
 8002ae8:	4193      	sbcs	r3, r2
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	0692      	lsls	r2, r2, #26
 8002aee:	d430      	bmi.n	8002b52 <_printf_common+0xae>
 8002af0:	0022      	movs	r2, r4
 8002af2:	9901      	ldr	r1, [sp, #4]
 8002af4:	9800      	ldr	r0, [sp, #0]
 8002af6:	9e08      	ldr	r6, [sp, #32]
 8002af8:	3243      	adds	r2, #67	; 0x43
 8002afa:	47b0      	blx	r6
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d025      	beq.n	8002b4c <_printf_common+0xa8>
 8002b00:	2306      	movs	r3, #6
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	682a      	ldr	r2, [r5, #0]
 8002b06:	68e1      	ldr	r1, [r4, #12]
 8002b08:	2500      	movs	r5, #0
 8002b0a:	4003      	ands	r3, r0
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d103      	bne.n	8002b18 <_printf_common+0x74>
 8002b10:	1a8d      	subs	r5, r1, r2
 8002b12:	43eb      	mvns	r3, r5
 8002b14:	17db      	asrs	r3, r3, #31
 8002b16:	401d      	ands	r5, r3
 8002b18:	68a3      	ldr	r3, [r4, #8]
 8002b1a:	6922      	ldr	r2, [r4, #16]
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	dd01      	ble.n	8002b24 <_printf_common+0x80>
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	18ed      	adds	r5, r5, r3
 8002b24:	2700      	movs	r7, #0
 8002b26:	42bd      	cmp	r5, r7
 8002b28:	d120      	bne.n	8002b6c <_printf_common+0xc8>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e010      	b.n	8002b50 <_printf_common+0xac>
 8002b2e:	3701      	adds	r7, #1
 8002b30:	68e3      	ldr	r3, [r4, #12]
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	42bb      	cmp	r3, r7
 8002b38:	ddd2      	ble.n	8002ae0 <_printf_common+0x3c>
 8002b3a:	0022      	movs	r2, r4
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9901      	ldr	r1, [sp, #4]
 8002b40:	9800      	ldr	r0, [sp, #0]
 8002b42:	9e08      	ldr	r6, [sp, #32]
 8002b44:	3219      	adds	r2, #25
 8002b46:	47b0      	blx	r6
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d1f0      	bne.n	8002b2e <_printf_common+0x8a>
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	4240      	negs	r0, r0
 8002b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b52:	2030      	movs	r0, #48	; 0x30
 8002b54:	18e1      	adds	r1, r4, r3
 8002b56:	3143      	adds	r1, #67	; 0x43
 8002b58:	7008      	strb	r0, [r1, #0]
 8002b5a:	0021      	movs	r1, r4
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	3145      	adds	r1, #69	; 0x45
 8002b60:	7809      	ldrb	r1, [r1, #0]
 8002b62:	18a2      	adds	r2, r4, r2
 8002b64:	3243      	adds	r2, #67	; 0x43
 8002b66:	3302      	adds	r3, #2
 8002b68:	7011      	strb	r1, [r2, #0]
 8002b6a:	e7c1      	b.n	8002af0 <_printf_common+0x4c>
 8002b6c:	0022      	movs	r2, r4
 8002b6e:	2301      	movs	r3, #1
 8002b70:	9901      	ldr	r1, [sp, #4]
 8002b72:	9800      	ldr	r0, [sp, #0]
 8002b74:	9e08      	ldr	r6, [sp, #32]
 8002b76:	321a      	adds	r2, #26
 8002b78:	47b0      	blx	r6
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	d0e6      	beq.n	8002b4c <_printf_common+0xa8>
 8002b7e:	3701      	adds	r7, #1
 8002b80:	e7d1      	b.n	8002b26 <_printf_common+0x82>
	...

08002b84 <_printf_i>:
 8002b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b86:	b08b      	sub	sp, #44	; 0x2c
 8002b88:	9206      	str	r2, [sp, #24]
 8002b8a:	000a      	movs	r2, r1
 8002b8c:	3243      	adds	r2, #67	; 0x43
 8002b8e:	9307      	str	r3, [sp, #28]
 8002b90:	9005      	str	r0, [sp, #20]
 8002b92:	9204      	str	r2, [sp, #16]
 8002b94:	7e0a      	ldrb	r2, [r1, #24]
 8002b96:	000c      	movs	r4, r1
 8002b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b9a:	2a78      	cmp	r2, #120	; 0x78
 8002b9c:	d807      	bhi.n	8002bae <_printf_i+0x2a>
 8002b9e:	2a62      	cmp	r2, #98	; 0x62
 8002ba0:	d809      	bhi.n	8002bb6 <_printf_i+0x32>
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	d100      	bne.n	8002ba8 <_printf_i+0x24>
 8002ba6:	e0c1      	b.n	8002d2c <_printf_i+0x1a8>
 8002ba8:	2a58      	cmp	r2, #88	; 0x58
 8002baa:	d100      	bne.n	8002bae <_printf_i+0x2a>
 8002bac:	e08c      	b.n	8002cc8 <_printf_i+0x144>
 8002bae:	0026      	movs	r6, r4
 8002bb0:	3642      	adds	r6, #66	; 0x42
 8002bb2:	7032      	strb	r2, [r6, #0]
 8002bb4:	e022      	b.n	8002bfc <_printf_i+0x78>
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	3863      	subs	r0, #99	; 0x63
 8002bba:	2815      	cmp	r0, #21
 8002bbc:	d8f7      	bhi.n	8002bae <_printf_i+0x2a>
 8002bbe:	f7fd faa3 	bl	8000108 <__gnu_thumb1_case_shi>
 8002bc2:	0016      	.short	0x0016
 8002bc4:	fff6001f 	.word	0xfff6001f
 8002bc8:	fff6fff6 	.word	0xfff6fff6
 8002bcc:	001ffff6 	.word	0x001ffff6
 8002bd0:	fff6fff6 	.word	0xfff6fff6
 8002bd4:	fff6fff6 	.word	0xfff6fff6
 8002bd8:	003600a8 	.word	0x003600a8
 8002bdc:	fff6009a 	.word	0xfff6009a
 8002be0:	00b9fff6 	.word	0x00b9fff6
 8002be4:	0036fff6 	.word	0x0036fff6
 8002be8:	fff6fff6 	.word	0xfff6fff6
 8002bec:	009e      	.short	0x009e
 8002bee:	0026      	movs	r6, r4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	3642      	adds	r6, #66	; 0x42
 8002bf4:	1d11      	adds	r1, r2, #4
 8002bf6:	6019      	str	r1, [r3, #0]
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	7033      	strb	r3, [r6, #0]
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0a7      	b.n	8002d50 <_printf_i+0x1cc>
 8002c00:	6808      	ldr	r0, [r1, #0]
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	1d0a      	adds	r2, r1, #4
 8002c06:	0605      	lsls	r5, r0, #24
 8002c08:	d50b      	bpl.n	8002c22 <_printf_i+0x9e>
 8002c0a:	680d      	ldr	r5, [r1, #0]
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	da03      	bge.n	8002c1a <_printf_i+0x96>
 8002c12:	232d      	movs	r3, #45	; 0x2d
 8002c14:	9a04      	ldr	r2, [sp, #16]
 8002c16:	426d      	negs	r5, r5
 8002c18:	7013      	strb	r3, [r2, #0]
 8002c1a:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <_printf_i+0x21c>)
 8002c1c:	270a      	movs	r7, #10
 8002c1e:	9303      	str	r3, [sp, #12]
 8002c20:	e01b      	b.n	8002c5a <_printf_i+0xd6>
 8002c22:	680d      	ldr	r5, [r1, #0]
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	0641      	lsls	r1, r0, #25
 8002c28:	d5f1      	bpl.n	8002c0e <_printf_i+0x8a>
 8002c2a:	b22d      	sxth	r5, r5
 8002c2c:	e7ef      	b.n	8002c0e <_printf_i+0x8a>
 8002c2e:	680d      	ldr	r5, [r1, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	1d08      	adds	r0, r1, #4
 8002c34:	6018      	str	r0, [r3, #0]
 8002c36:	062e      	lsls	r6, r5, #24
 8002c38:	d501      	bpl.n	8002c3e <_printf_i+0xba>
 8002c3a:	680d      	ldr	r5, [r1, #0]
 8002c3c:	e003      	b.n	8002c46 <_printf_i+0xc2>
 8002c3e:	066d      	lsls	r5, r5, #25
 8002c40:	d5fb      	bpl.n	8002c3a <_printf_i+0xb6>
 8002c42:	680d      	ldr	r5, [r1, #0]
 8002c44:	b2ad      	uxth	r5, r5
 8002c46:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <_printf_i+0x21c>)
 8002c48:	2708      	movs	r7, #8
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	2a6f      	cmp	r2, #111	; 0x6f
 8002c4e:	d000      	beq.n	8002c52 <_printf_i+0xce>
 8002c50:	3702      	adds	r7, #2
 8002c52:	0023      	movs	r3, r4
 8002c54:	2200      	movs	r2, #0
 8002c56:	3343      	adds	r3, #67	; 0x43
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	6863      	ldr	r3, [r4, #4]
 8002c5c:	60a3      	str	r3, [r4, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db03      	blt.n	8002c6a <_printf_i+0xe6>
 8002c62:	2204      	movs	r2, #4
 8002c64:	6821      	ldr	r1, [r4, #0]
 8002c66:	4391      	bics	r1, r2
 8002c68:	6021      	str	r1, [r4, #0]
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	d102      	bne.n	8002c74 <_printf_i+0xf0>
 8002c6e:	9e04      	ldr	r6, [sp, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <_printf_i+0x10a>
 8002c74:	9e04      	ldr	r6, [sp, #16]
 8002c76:	0028      	movs	r0, r5
 8002c78:	0039      	movs	r1, r7
 8002c7a:	f7fd fad5 	bl	8000228 <__aeabi_uidivmod>
 8002c7e:	9b03      	ldr	r3, [sp, #12]
 8002c80:	3e01      	subs	r6, #1
 8002c82:	5c5b      	ldrb	r3, [r3, r1]
 8002c84:	7033      	strb	r3, [r6, #0]
 8002c86:	002b      	movs	r3, r5
 8002c88:	0005      	movs	r5, r0
 8002c8a:	429f      	cmp	r7, r3
 8002c8c:	d9f3      	bls.n	8002c76 <_printf_i+0xf2>
 8002c8e:	2f08      	cmp	r7, #8
 8002c90:	d109      	bne.n	8002ca6 <_printf_i+0x122>
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	07db      	lsls	r3, r3, #31
 8002c96:	d506      	bpl.n	8002ca6 <_printf_i+0x122>
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	6922      	ldr	r2, [r4, #16]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	dc02      	bgt.n	8002ca6 <_printf_i+0x122>
 8002ca0:	2330      	movs	r3, #48	; 0x30
 8002ca2:	3e01      	subs	r6, #1
 8002ca4:	7033      	strb	r3, [r6, #0]
 8002ca6:	9b04      	ldr	r3, [sp, #16]
 8002ca8:	1b9b      	subs	r3, r3, r6
 8002caa:	6123      	str	r3, [r4, #16]
 8002cac:	9b07      	ldr	r3, [sp, #28]
 8002cae:	0021      	movs	r1, r4
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	9805      	ldr	r0, [sp, #20]
 8002cb4:	9b06      	ldr	r3, [sp, #24]
 8002cb6:	aa09      	add	r2, sp, #36	; 0x24
 8002cb8:	f7ff fef4 	bl	8002aa4 <_printf_common>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	d14c      	bne.n	8002d5a <_printf_i+0x1d6>
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	4240      	negs	r0, r0
 8002cc4:	b00b      	add	sp, #44	; 0x2c
 8002cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc8:	3145      	adds	r1, #69	; 0x45
 8002cca:	700a      	strb	r2, [r1, #0]
 8002ccc:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <_printf_i+0x21c>)
 8002cce:	9203      	str	r2, [sp, #12]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	6821      	ldr	r1, [r4, #0]
 8002cd4:	ca20      	ldmia	r2!, {r5}
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	0608      	lsls	r0, r1, #24
 8002cda:	d516      	bpl.n	8002d0a <_printf_i+0x186>
 8002cdc:	07cb      	lsls	r3, r1, #31
 8002cde:	d502      	bpl.n	8002ce6 <_printf_i+0x162>
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	4319      	orrs	r1, r3
 8002ce4:	6021      	str	r1, [r4, #0]
 8002ce6:	2710      	movs	r7, #16
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	d1b2      	bne.n	8002c52 <_printf_i+0xce>
 8002cec:	2320      	movs	r3, #32
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	439a      	bics	r2, r3
 8002cf2:	6022      	str	r2, [r4, #0]
 8002cf4:	e7ad      	b.n	8002c52 <_printf_i+0xce>
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	6809      	ldr	r1, [r1, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	6022      	str	r2, [r4, #0]
 8002cfe:	0022      	movs	r2, r4
 8002d00:	2178      	movs	r1, #120	; 0x78
 8002d02:	3245      	adds	r2, #69	; 0x45
 8002d04:	7011      	strb	r1, [r2, #0]
 8002d06:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <_printf_i+0x220>)
 8002d08:	e7e1      	b.n	8002cce <_printf_i+0x14a>
 8002d0a:	0648      	lsls	r0, r1, #25
 8002d0c:	d5e6      	bpl.n	8002cdc <_printf_i+0x158>
 8002d0e:	b2ad      	uxth	r5, r5
 8002d10:	e7e4      	b.n	8002cdc <_printf_i+0x158>
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	680d      	ldr	r5, [r1, #0]
 8002d16:	1d10      	adds	r0, r2, #4
 8002d18:	6949      	ldr	r1, [r1, #20]
 8002d1a:	6018      	str	r0, [r3, #0]
 8002d1c:	6813      	ldr	r3, [r2, #0]
 8002d1e:	062e      	lsls	r6, r5, #24
 8002d20:	d501      	bpl.n	8002d26 <_printf_i+0x1a2>
 8002d22:	6019      	str	r1, [r3, #0]
 8002d24:	e002      	b.n	8002d2c <_printf_i+0x1a8>
 8002d26:	066d      	lsls	r5, r5, #25
 8002d28:	d5fb      	bpl.n	8002d22 <_printf_i+0x19e>
 8002d2a:	8019      	strh	r1, [r3, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9e04      	ldr	r6, [sp, #16]
 8002d30:	6123      	str	r3, [r4, #16]
 8002d32:	e7bb      	b.n	8002cac <_printf_i+0x128>
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	1d11      	adds	r1, r2, #4
 8002d38:	6019      	str	r1, [r3, #0]
 8002d3a:	6816      	ldr	r6, [r2, #0]
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	0030      	movs	r0, r6
 8002d40:	6862      	ldr	r2, [r4, #4]
 8002d42:	f000 f831 	bl	8002da8 <memchr>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d001      	beq.n	8002d4e <_printf_i+0x1ca>
 8002d4a:	1b80      	subs	r0, r0, r6
 8002d4c:	6060      	str	r0, [r4, #4]
 8002d4e:	6863      	ldr	r3, [r4, #4]
 8002d50:	6123      	str	r3, [r4, #16]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9a04      	ldr	r2, [sp, #16]
 8002d56:	7013      	strb	r3, [r2, #0]
 8002d58:	e7a8      	b.n	8002cac <_printf_i+0x128>
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	0032      	movs	r2, r6
 8002d5e:	9906      	ldr	r1, [sp, #24]
 8002d60:	9805      	ldr	r0, [sp, #20]
 8002d62:	9d07      	ldr	r5, [sp, #28]
 8002d64:	47a8      	blx	r5
 8002d66:	1c43      	adds	r3, r0, #1
 8002d68:	d0aa      	beq.n	8002cc0 <_printf_i+0x13c>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	079b      	lsls	r3, r3, #30
 8002d6e:	d415      	bmi.n	8002d9c <_printf_i+0x218>
 8002d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	4298      	cmp	r0, r3
 8002d76:	daa5      	bge.n	8002cc4 <_printf_i+0x140>
 8002d78:	0018      	movs	r0, r3
 8002d7a:	e7a3      	b.n	8002cc4 <_printf_i+0x140>
 8002d7c:	0022      	movs	r2, r4
 8002d7e:	2301      	movs	r3, #1
 8002d80:	9906      	ldr	r1, [sp, #24]
 8002d82:	9805      	ldr	r0, [sp, #20]
 8002d84:	9e07      	ldr	r6, [sp, #28]
 8002d86:	3219      	adds	r2, #25
 8002d88:	47b0      	blx	r6
 8002d8a:	1c43      	adds	r3, r0, #1
 8002d8c:	d098      	beq.n	8002cc0 <_printf_i+0x13c>
 8002d8e:	3501      	adds	r5, #1
 8002d90:	68e3      	ldr	r3, [r4, #12]
 8002d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	42ab      	cmp	r3, r5
 8002d98:	dcf0      	bgt.n	8002d7c <_printf_i+0x1f8>
 8002d9a:	e7e9      	b.n	8002d70 <_printf_i+0x1ec>
 8002d9c:	2500      	movs	r5, #0
 8002d9e:	e7f7      	b.n	8002d90 <_printf_i+0x20c>
 8002da0:	080030ed 	.word	0x080030ed
 8002da4:	080030fe 	.word	0x080030fe

08002da8 <memchr>:
 8002da8:	b2c9      	uxtb	r1, r1
 8002daa:	1882      	adds	r2, r0, r2
 8002dac:	4290      	cmp	r0, r2
 8002dae:	d101      	bne.n	8002db4 <memchr+0xc>
 8002db0:	2000      	movs	r0, #0
 8002db2:	4770      	bx	lr
 8002db4:	7803      	ldrb	r3, [r0, #0]
 8002db6:	428b      	cmp	r3, r1
 8002db8:	d0fb      	beq.n	8002db2 <memchr+0xa>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	e7f6      	b.n	8002dac <memchr+0x4>

08002dbe <memcpy>:
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d100      	bne.n	8002dc8 <memcpy+0xa>
 8002dc6:	bd10      	pop	{r4, pc}
 8002dc8:	5ccc      	ldrb	r4, [r1, r3]
 8002dca:	54c4      	strb	r4, [r0, r3]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	e7f8      	b.n	8002dc2 <memcpy+0x4>

08002dd0 <memmove>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	4288      	cmp	r0, r1
 8002dd4:	d902      	bls.n	8002ddc <memmove+0xc>
 8002dd6:	188b      	adds	r3, r1, r2
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	d303      	bcc.n	8002de4 <memmove+0x14>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e007      	b.n	8002df0 <memmove+0x20>
 8002de0:	5c8b      	ldrb	r3, [r1, r2]
 8002de2:	5483      	strb	r3, [r0, r2]
 8002de4:	3a01      	subs	r2, #1
 8002de6:	d2fb      	bcs.n	8002de0 <memmove+0x10>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	5ccc      	ldrb	r4, [r1, r3]
 8002dec:	54c4      	strb	r4, [r0, r3]
 8002dee:	3301      	adds	r3, #1
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1fa      	bne.n	8002dea <memmove+0x1a>
 8002df4:	e7f8      	b.n	8002de8 <memmove+0x18>
	...

08002df8 <_free_r>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	0005      	movs	r5, r0
 8002dfc:	2900      	cmp	r1, #0
 8002dfe:	d010      	beq.n	8002e22 <_free_r+0x2a>
 8002e00:	1f0c      	subs	r4, r1, #4
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	da00      	bge.n	8002e0a <_free_r+0x12>
 8002e08:	18e4      	adds	r4, r4, r3
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	f000 f918 	bl	8003040 <__malloc_lock>
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <_free_r+0x90>)
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <_free_r+0x2c>
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	6014      	str	r4, [r2, #0]
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	f000 f917 	bl	8003050 <__malloc_unlock>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	42a3      	cmp	r3, r4
 8002e26:	d908      	bls.n	8002e3a <_free_r+0x42>
 8002e28:	6821      	ldr	r1, [r4, #0]
 8002e2a:	1860      	adds	r0, r4, r1
 8002e2c:	4283      	cmp	r3, r0
 8002e2e:	d1f3      	bne.n	8002e18 <_free_r+0x20>
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	1841      	adds	r1, r0, r1
 8002e36:	6021      	str	r1, [r4, #0]
 8002e38:	e7ee      	b.n	8002e18 <_free_r+0x20>
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <_free_r+0x4e>
 8002e42:	42a3      	cmp	r3, r4
 8002e44:	d9f9      	bls.n	8002e3a <_free_r+0x42>
 8002e46:	6811      	ldr	r1, [r2, #0]
 8002e48:	1850      	adds	r0, r2, r1
 8002e4a:	42a0      	cmp	r0, r4
 8002e4c:	d10b      	bne.n	8002e66 <_free_r+0x6e>
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	1809      	adds	r1, r1, r0
 8002e52:	1850      	adds	r0, r2, r1
 8002e54:	6011      	str	r1, [r2, #0]
 8002e56:	4283      	cmp	r3, r0
 8002e58:	d1e0      	bne.n	8002e1c <_free_r+0x24>
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	1841      	adds	r1, r0, r1
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	6053      	str	r3, [r2, #4]
 8002e64:	e7da      	b.n	8002e1c <_free_r+0x24>
 8002e66:	42a0      	cmp	r0, r4
 8002e68:	d902      	bls.n	8002e70 <_free_r+0x78>
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	602b      	str	r3, [r5, #0]
 8002e6e:	e7d5      	b.n	8002e1c <_free_r+0x24>
 8002e70:	6821      	ldr	r1, [r4, #0]
 8002e72:	1860      	adds	r0, r4, r1
 8002e74:	4283      	cmp	r3, r0
 8002e76:	d103      	bne.n	8002e80 <_free_r+0x88>
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	1841      	adds	r1, r0, r1
 8002e7e:	6021      	str	r1, [r4, #0]
 8002e80:	6063      	str	r3, [r4, #4]
 8002e82:	6054      	str	r4, [r2, #4]
 8002e84:	e7ca      	b.n	8002e1c <_free_r+0x24>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	2000013c 	.word	0x2000013c

08002e8c <sbrk_aligned>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4e0f      	ldr	r6, [pc, #60]	; (8002ecc <sbrk_aligned+0x40>)
 8002e90:	000d      	movs	r5, r1
 8002e92:	6831      	ldr	r1, [r6, #0]
 8002e94:	0004      	movs	r4, r0
 8002e96:	2900      	cmp	r1, #0
 8002e98:	d102      	bne.n	8002ea0 <sbrk_aligned+0x14>
 8002e9a:	f000 f8bf 	bl	800301c <_sbrk_r>
 8002e9e:	6030      	str	r0, [r6, #0]
 8002ea0:	0029      	movs	r1, r5
 8002ea2:	0020      	movs	r0, r4
 8002ea4:	f000 f8ba 	bl	800301c <_sbrk_r>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d00a      	beq.n	8002ec2 <sbrk_aligned+0x36>
 8002eac:	2303      	movs	r3, #3
 8002eae:	1cc5      	adds	r5, r0, #3
 8002eb0:	439d      	bics	r5, r3
 8002eb2:	42a8      	cmp	r0, r5
 8002eb4:	d007      	beq.n	8002ec6 <sbrk_aligned+0x3a>
 8002eb6:	1a29      	subs	r1, r5, r0
 8002eb8:	0020      	movs	r0, r4
 8002eba:	f000 f8af 	bl	800301c <_sbrk_r>
 8002ebe:	1c43      	adds	r3, r0, #1
 8002ec0:	d101      	bne.n	8002ec6 <sbrk_aligned+0x3a>
 8002ec2:	2501      	movs	r5, #1
 8002ec4:	426d      	negs	r5, r5
 8002ec6:	0028      	movs	r0, r5
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	20000140 	.word	0x20000140

08002ed0 <_malloc_r>:
 8002ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	1ccb      	adds	r3, r1, #3
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	3308      	adds	r3, #8
 8002eda:	0006      	movs	r6, r0
 8002edc:	001f      	movs	r7, r3
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d232      	bcs.n	8002f48 <_malloc_r+0x78>
 8002ee2:	270c      	movs	r7, #12
 8002ee4:	42b9      	cmp	r1, r7
 8002ee6:	d831      	bhi.n	8002f4c <_malloc_r+0x7c>
 8002ee8:	0030      	movs	r0, r6
 8002eea:	f000 f8a9 	bl	8003040 <__malloc_lock>
 8002eee:	4d32      	ldr	r5, [pc, #200]	; (8002fb8 <_malloc_r+0xe8>)
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	001c      	movs	r4, r3
 8002ef4:	2c00      	cmp	r4, #0
 8002ef6:	d12e      	bne.n	8002f56 <_malloc_r+0x86>
 8002ef8:	0039      	movs	r1, r7
 8002efa:	0030      	movs	r0, r6
 8002efc:	f7ff ffc6 	bl	8002e8c <sbrk_aligned>
 8002f00:	0004      	movs	r4, r0
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d11e      	bne.n	8002f44 <_malloc_r+0x74>
 8002f06:	682c      	ldr	r4, [r5, #0]
 8002f08:	0025      	movs	r5, r4
 8002f0a:	2d00      	cmp	r5, #0
 8002f0c:	d14a      	bne.n	8002fa4 <_malloc_r+0xd4>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	0029      	movs	r1, r5
 8002f12:	18e3      	adds	r3, r4, r3
 8002f14:	0030      	movs	r0, r6
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	f000 f880 	bl	800301c <_sbrk_r>
 8002f1c:	9b01      	ldr	r3, [sp, #4]
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	d143      	bne.n	8002faa <_malloc_r+0xda>
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	3703      	adds	r7, #3
 8002f26:	1aff      	subs	r7, r7, r3
 8002f28:	2303      	movs	r3, #3
 8002f2a:	439f      	bics	r7, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	2f0c      	cmp	r7, #12
 8002f30:	d200      	bcs.n	8002f34 <_malloc_r+0x64>
 8002f32:	270c      	movs	r7, #12
 8002f34:	0039      	movs	r1, r7
 8002f36:	0030      	movs	r0, r6
 8002f38:	f7ff ffa8 	bl	8002e8c <sbrk_aligned>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d034      	beq.n	8002faa <_malloc_r+0xda>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	19df      	adds	r7, r3, r7
 8002f44:	6027      	str	r7, [r4, #0]
 8002f46:	e013      	b.n	8002f70 <_malloc_r+0xa0>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	dacb      	bge.n	8002ee4 <_malloc_r+0x14>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	2500      	movs	r5, #0
 8002f50:	6033      	str	r3, [r6, #0]
 8002f52:	0028      	movs	r0, r5
 8002f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	1bd1      	subs	r1, r2, r7
 8002f5a:	d420      	bmi.n	8002f9e <_malloc_r+0xce>
 8002f5c:	290b      	cmp	r1, #11
 8002f5e:	d917      	bls.n	8002f90 <_malloc_r+0xc0>
 8002f60:	19e2      	adds	r2, r4, r7
 8002f62:	6027      	str	r7, [r4, #0]
 8002f64:	42a3      	cmp	r3, r4
 8002f66:	d111      	bne.n	8002f8c <_malloc_r+0xbc>
 8002f68:	602a      	str	r2, [r5, #0]
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	6053      	str	r3, [r2, #4]
 8002f70:	0030      	movs	r0, r6
 8002f72:	0025      	movs	r5, r4
 8002f74:	f000 f86c 	bl	8003050 <__malloc_unlock>
 8002f78:	2207      	movs	r2, #7
 8002f7a:	350b      	adds	r5, #11
 8002f7c:	1d23      	adds	r3, r4, #4
 8002f7e:	4395      	bics	r5, r2
 8002f80:	1aea      	subs	r2, r5, r3
 8002f82:	429d      	cmp	r5, r3
 8002f84:	d0e5      	beq.n	8002f52 <_malloc_r+0x82>
 8002f86:	1b5b      	subs	r3, r3, r5
 8002f88:	50a3      	str	r3, [r4, r2]
 8002f8a:	e7e2      	b.n	8002f52 <_malloc_r+0x82>
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e7ec      	b.n	8002f6a <_malloc_r+0x9a>
 8002f90:	6862      	ldr	r2, [r4, #4]
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	d101      	bne.n	8002f9a <_malloc_r+0xca>
 8002f96:	602a      	str	r2, [r5, #0]
 8002f98:	e7ea      	b.n	8002f70 <_malloc_r+0xa0>
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	e7e8      	b.n	8002f70 <_malloc_r+0xa0>
 8002f9e:	0023      	movs	r3, r4
 8002fa0:	6864      	ldr	r4, [r4, #4]
 8002fa2:	e7a7      	b.n	8002ef4 <_malloc_r+0x24>
 8002fa4:	002c      	movs	r4, r5
 8002fa6:	686d      	ldr	r5, [r5, #4]
 8002fa8:	e7af      	b.n	8002f0a <_malloc_r+0x3a>
 8002faa:	230c      	movs	r3, #12
 8002fac:	0030      	movs	r0, r6
 8002fae:	6033      	str	r3, [r6, #0]
 8002fb0:	f000 f84e 	bl	8003050 <__malloc_unlock>
 8002fb4:	e7cd      	b.n	8002f52 <_malloc_r+0x82>
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	2000013c 	.word	0x2000013c

08002fbc <_realloc_r>:
 8002fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fbe:	0007      	movs	r7, r0
 8002fc0:	000e      	movs	r6, r1
 8002fc2:	0014      	movs	r4, r2
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d105      	bne.n	8002fd4 <_realloc_r+0x18>
 8002fc8:	0011      	movs	r1, r2
 8002fca:	f7ff ff81 	bl	8002ed0 <_malloc_r>
 8002fce:	0005      	movs	r5, r0
 8002fd0:	0028      	movs	r0, r5
 8002fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d103      	bne.n	8002fe0 <_realloc_r+0x24>
 8002fd8:	f7ff ff0e 	bl	8002df8 <_free_r>
 8002fdc:	0025      	movs	r5, r4
 8002fde:	e7f7      	b.n	8002fd0 <_realloc_r+0x14>
 8002fe0:	f000 f83e 	bl	8003060 <_malloc_usable_size_r>
 8002fe4:	9001      	str	r0, [sp, #4]
 8002fe6:	4284      	cmp	r4, r0
 8002fe8:	d803      	bhi.n	8002ff2 <_realloc_r+0x36>
 8002fea:	0035      	movs	r5, r6
 8002fec:	0843      	lsrs	r3, r0, #1
 8002fee:	42a3      	cmp	r3, r4
 8002ff0:	d3ee      	bcc.n	8002fd0 <_realloc_r+0x14>
 8002ff2:	0021      	movs	r1, r4
 8002ff4:	0038      	movs	r0, r7
 8002ff6:	f7ff ff6b 	bl	8002ed0 <_malloc_r>
 8002ffa:	1e05      	subs	r5, r0, #0
 8002ffc:	d0e8      	beq.n	8002fd0 <_realloc_r+0x14>
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	0022      	movs	r2, r4
 8003002:	429c      	cmp	r4, r3
 8003004:	d900      	bls.n	8003008 <_realloc_r+0x4c>
 8003006:	001a      	movs	r2, r3
 8003008:	0031      	movs	r1, r6
 800300a:	0028      	movs	r0, r5
 800300c:	f7ff fed7 	bl	8002dbe <memcpy>
 8003010:	0031      	movs	r1, r6
 8003012:	0038      	movs	r0, r7
 8003014:	f7ff fef0 	bl	8002df8 <_free_r>
 8003018:	e7da      	b.n	8002fd0 <_realloc_r+0x14>
	...

0800301c <_sbrk_r>:
 800301c:	2300      	movs	r3, #0
 800301e:	b570      	push	{r4, r5, r6, lr}
 8003020:	4d06      	ldr	r5, [pc, #24]	; (800303c <_sbrk_r+0x20>)
 8003022:	0004      	movs	r4, r0
 8003024:	0008      	movs	r0, r1
 8003026:	602b      	str	r3, [r5, #0]
 8003028:	f7fd fb68 	bl	80006fc <_sbrk>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d103      	bne.n	8003038 <_sbrk_r+0x1c>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d000      	beq.n	8003038 <_sbrk_r+0x1c>
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	bd70      	pop	{r4, r5, r6, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	20000144 	.word	0x20000144

08003040 <__malloc_lock>:
 8003040:	b510      	push	{r4, lr}
 8003042:	4802      	ldr	r0, [pc, #8]	; (800304c <__malloc_lock+0xc>)
 8003044:	f000 f814 	bl	8003070 <__retarget_lock_acquire_recursive>
 8003048:	bd10      	pop	{r4, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	20000148 	.word	0x20000148

08003050 <__malloc_unlock>:
 8003050:	b510      	push	{r4, lr}
 8003052:	4802      	ldr	r0, [pc, #8]	; (800305c <__malloc_unlock+0xc>)
 8003054:	f000 f80d 	bl	8003072 <__retarget_lock_release_recursive>
 8003058:	bd10      	pop	{r4, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	20000148 	.word	0x20000148

08003060 <_malloc_usable_size_r>:
 8003060:	1f0b      	subs	r3, r1, #4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1f18      	subs	r0, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	da01      	bge.n	800306e <_malloc_usable_size_r+0xe>
 800306a:	580b      	ldr	r3, [r1, r0]
 800306c:	18c0      	adds	r0, r0, r3
 800306e:	4770      	bx	lr

08003070 <__retarget_lock_acquire_recursive>:
 8003070:	4770      	bx	lr

08003072 <__retarget_lock_release_recursive>:
 8003072:	4770      	bx	lr

08003074 <_init>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr

08003080 <_fini>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr
