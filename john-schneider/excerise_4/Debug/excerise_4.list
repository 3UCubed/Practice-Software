
excerise_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004270  08004270  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004270  08004270  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004270  08004270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080042e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080042e8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac42  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fe  00000000  00000000  0002acda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ee1  00000000  00000000  0002d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6dd  00000000  00000000  0003f4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a279  00000000  00000000  0004bbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002448  00000000  00000000  000b5e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004100 	.word	0x08004100

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004100 	.word	0x08004100

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_f2uiz>:
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	b510      	push	{r4, lr}
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	1c04      	adds	r4, r0, #0
 800023c:	f000 fb76 	bl	800092c <__aeabi_fcmpge>
 8000240:	2800      	cmp	r0, #0
 8000242:	d103      	bne.n	800024c <__aeabi_f2uiz+0x18>
 8000244:	1c20      	adds	r0, r4, #0
 8000246:	f000 fad3 	bl	80007f0 <__aeabi_f2iz>
 800024a:	bd10      	pop	{r4, pc}
 800024c:	219e      	movs	r1, #158	; 0x9e
 800024e:	1c20      	adds	r0, r4, #0
 8000250:	05c9      	lsls	r1, r1, #23
 8000252:	f000 f91f 	bl	8000494 <__aeabi_fsub>
 8000256:	f000 facb 	bl	80007f0 <__aeabi_f2iz>
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	061b      	lsls	r3, r3, #24
 800025e:	469c      	mov	ip, r3
 8000260:	4460      	add	r0, ip
 8000262:	e7f2      	b.n	800024a <__aeabi_f2uiz+0x16>

08000264 <__aeabi_fdiv>:
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	464f      	mov	r7, r9
 8000268:	4646      	mov	r6, r8
 800026a:	46d6      	mov	lr, sl
 800026c:	0245      	lsls	r5, r0, #9
 800026e:	b5c0      	push	{r6, r7, lr}
 8000270:	0047      	lsls	r7, r0, #1
 8000272:	1c0c      	adds	r4, r1, #0
 8000274:	0a6d      	lsrs	r5, r5, #9
 8000276:	0e3f      	lsrs	r7, r7, #24
 8000278:	0fc6      	lsrs	r6, r0, #31
 800027a:	2f00      	cmp	r7, #0
 800027c:	d100      	bne.n	8000280 <__aeabi_fdiv+0x1c>
 800027e:	e070      	b.n	8000362 <__aeabi_fdiv+0xfe>
 8000280:	2fff      	cmp	r7, #255	; 0xff
 8000282:	d100      	bne.n	8000286 <__aeabi_fdiv+0x22>
 8000284:	e075      	b.n	8000372 <__aeabi_fdiv+0x10e>
 8000286:	00eb      	lsls	r3, r5, #3
 8000288:	2580      	movs	r5, #128	; 0x80
 800028a:	04ed      	lsls	r5, r5, #19
 800028c:	431d      	orrs	r5, r3
 800028e:	2300      	movs	r3, #0
 8000290:	4699      	mov	r9, r3
 8000292:	469a      	mov	sl, r3
 8000294:	3f7f      	subs	r7, #127	; 0x7f
 8000296:	0260      	lsls	r0, r4, #9
 8000298:	0a43      	lsrs	r3, r0, #9
 800029a:	4698      	mov	r8, r3
 800029c:	0063      	lsls	r3, r4, #1
 800029e:	0e1b      	lsrs	r3, r3, #24
 80002a0:	0fe4      	lsrs	r4, r4, #31
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d04e      	beq.n	8000344 <__aeabi_fdiv+0xe0>
 80002a6:	2bff      	cmp	r3, #255	; 0xff
 80002a8:	d046      	beq.n	8000338 <__aeabi_fdiv+0xd4>
 80002aa:	4642      	mov	r2, r8
 80002ac:	00d0      	lsls	r0, r2, #3
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	04d2      	lsls	r2, r2, #19
 80002b2:	4302      	orrs	r2, r0
 80002b4:	4690      	mov	r8, r2
 80002b6:	2200      	movs	r2, #0
 80002b8:	3b7f      	subs	r3, #127	; 0x7f
 80002ba:	0031      	movs	r1, r6
 80002bc:	1aff      	subs	r7, r7, r3
 80002be:	464b      	mov	r3, r9
 80002c0:	4061      	eors	r1, r4
 80002c2:	b2c9      	uxtb	r1, r1
 80002c4:	4313      	orrs	r3, r2
 80002c6:	2b0f      	cmp	r3, #15
 80002c8:	d900      	bls.n	80002cc <__aeabi_fdiv+0x68>
 80002ca:	e0b5      	b.n	8000438 <__aeabi_fdiv+0x1d4>
 80002cc:	486e      	ldr	r0, [pc, #440]	; (8000488 <__aeabi_fdiv+0x224>)
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	58c3      	ldr	r3, [r0, r3]
 80002d2:	469f      	mov	pc, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	4698      	mov	r8, r3
 80002d8:	0026      	movs	r6, r4
 80002da:	4645      	mov	r5, r8
 80002dc:	4692      	mov	sl, r2
 80002de:	4653      	mov	r3, sl
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	d100      	bne.n	80002e6 <__aeabi_fdiv+0x82>
 80002e4:	e089      	b.n	80003fa <__aeabi_fdiv+0x196>
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d100      	bne.n	80002ec <__aeabi_fdiv+0x88>
 80002ea:	e09e      	b.n	800042a <__aeabi_fdiv+0x1c6>
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d018      	beq.n	8000322 <__aeabi_fdiv+0xbe>
 80002f0:	003b      	movs	r3, r7
 80002f2:	337f      	adds	r3, #127	; 0x7f
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dd69      	ble.n	80003cc <__aeabi_fdiv+0x168>
 80002f8:	076a      	lsls	r2, r5, #29
 80002fa:	d004      	beq.n	8000306 <__aeabi_fdiv+0xa2>
 80002fc:	220f      	movs	r2, #15
 80002fe:	402a      	ands	r2, r5
 8000300:	2a04      	cmp	r2, #4
 8000302:	d000      	beq.n	8000306 <__aeabi_fdiv+0xa2>
 8000304:	3504      	adds	r5, #4
 8000306:	012a      	lsls	r2, r5, #4
 8000308:	d503      	bpl.n	8000312 <__aeabi_fdiv+0xae>
 800030a:	4b60      	ldr	r3, [pc, #384]	; (800048c <__aeabi_fdiv+0x228>)
 800030c:	401d      	ands	r5, r3
 800030e:	003b      	movs	r3, r7
 8000310:	3380      	adds	r3, #128	; 0x80
 8000312:	2bfe      	cmp	r3, #254	; 0xfe
 8000314:	dd00      	ble.n	8000318 <__aeabi_fdiv+0xb4>
 8000316:	e070      	b.n	80003fa <__aeabi_fdiv+0x196>
 8000318:	01ad      	lsls	r5, r5, #6
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	b2d8      	uxtb	r0, r3
 800031e:	e002      	b.n	8000326 <__aeabi_fdiv+0xc2>
 8000320:	000e      	movs	r6, r1
 8000322:	2000      	movs	r0, #0
 8000324:	2500      	movs	r5, #0
 8000326:	05c0      	lsls	r0, r0, #23
 8000328:	4328      	orrs	r0, r5
 800032a:	07f6      	lsls	r6, r6, #31
 800032c:	4330      	orrs	r0, r6
 800032e:	bce0      	pop	{r5, r6, r7}
 8000330:	46ba      	mov	sl, r7
 8000332:	46b1      	mov	r9, r6
 8000334:	46a8      	mov	r8, r5
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000338:	4643      	mov	r3, r8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d13f      	bne.n	80003be <__aeabi_fdiv+0x15a>
 800033e:	2202      	movs	r2, #2
 8000340:	3fff      	subs	r7, #255	; 0xff
 8000342:	e003      	b.n	800034c <__aeabi_fdiv+0xe8>
 8000344:	4643      	mov	r3, r8
 8000346:	2b00      	cmp	r3, #0
 8000348:	d12d      	bne.n	80003a6 <__aeabi_fdiv+0x142>
 800034a:	2201      	movs	r2, #1
 800034c:	0031      	movs	r1, r6
 800034e:	464b      	mov	r3, r9
 8000350:	4061      	eors	r1, r4
 8000352:	b2c9      	uxtb	r1, r1
 8000354:	4313      	orrs	r3, r2
 8000356:	2b0f      	cmp	r3, #15
 8000358:	d834      	bhi.n	80003c4 <__aeabi_fdiv+0x160>
 800035a:	484d      	ldr	r0, [pc, #308]	; (8000490 <__aeabi_fdiv+0x22c>)
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	58c3      	ldr	r3, [r0, r3]
 8000360:	469f      	mov	pc, r3
 8000362:	2d00      	cmp	r5, #0
 8000364:	d113      	bne.n	800038e <__aeabi_fdiv+0x12a>
 8000366:	2304      	movs	r3, #4
 8000368:	4699      	mov	r9, r3
 800036a:	3b03      	subs	r3, #3
 800036c:	2700      	movs	r7, #0
 800036e:	469a      	mov	sl, r3
 8000370:	e791      	b.n	8000296 <__aeabi_fdiv+0x32>
 8000372:	2d00      	cmp	r5, #0
 8000374:	d105      	bne.n	8000382 <__aeabi_fdiv+0x11e>
 8000376:	2308      	movs	r3, #8
 8000378:	4699      	mov	r9, r3
 800037a:	3b06      	subs	r3, #6
 800037c:	27ff      	movs	r7, #255	; 0xff
 800037e:	469a      	mov	sl, r3
 8000380:	e789      	b.n	8000296 <__aeabi_fdiv+0x32>
 8000382:	230c      	movs	r3, #12
 8000384:	4699      	mov	r9, r3
 8000386:	3b09      	subs	r3, #9
 8000388:	27ff      	movs	r7, #255	; 0xff
 800038a:	469a      	mov	sl, r3
 800038c:	e783      	b.n	8000296 <__aeabi_fdiv+0x32>
 800038e:	0028      	movs	r0, r5
 8000390:	f000 fad6 	bl	8000940 <__clzsi2>
 8000394:	2776      	movs	r7, #118	; 0x76
 8000396:	1f43      	subs	r3, r0, #5
 8000398:	409d      	lsls	r5, r3
 800039a:	2300      	movs	r3, #0
 800039c:	427f      	negs	r7, r7
 800039e:	4699      	mov	r9, r3
 80003a0:	469a      	mov	sl, r3
 80003a2:	1a3f      	subs	r7, r7, r0
 80003a4:	e777      	b.n	8000296 <__aeabi_fdiv+0x32>
 80003a6:	4640      	mov	r0, r8
 80003a8:	f000 faca 	bl	8000940 <__clzsi2>
 80003ac:	4642      	mov	r2, r8
 80003ae:	1f43      	subs	r3, r0, #5
 80003b0:	409a      	lsls	r2, r3
 80003b2:	2376      	movs	r3, #118	; 0x76
 80003b4:	425b      	negs	r3, r3
 80003b6:	4690      	mov	r8, r2
 80003b8:	1a1b      	subs	r3, r3, r0
 80003ba:	2200      	movs	r2, #0
 80003bc:	e77d      	b.n	80002ba <__aeabi_fdiv+0x56>
 80003be:	23ff      	movs	r3, #255	; 0xff
 80003c0:	2203      	movs	r2, #3
 80003c2:	e77a      	b.n	80002ba <__aeabi_fdiv+0x56>
 80003c4:	000e      	movs	r6, r1
 80003c6:	20ff      	movs	r0, #255	; 0xff
 80003c8:	2500      	movs	r5, #0
 80003ca:	e7ac      	b.n	8000326 <__aeabi_fdiv+0xc2>
 80003cc:	2001      	movs	r0, #1
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	281b      	cmp	r0, #27
 80003d2:	dca6      	bgt.n	8000322 <__aeabi_fdiv+0xbe>
 80003d4:	379e      	adds	r7, #158	; 0x9e
 80003d6:	002a      	movs	r2, r5
 80003d8:	40bd      	lsls	r5, r7
 80003da:	40c2      	lsrs	r2, r0
 80003dc:	1e6b      	subs	r3, r5, #1
 80003de:	419d      	sbcs	r5, r3
 80003e0:	4315      	orrs	r5, r2
 80003e2:	076b      	lsls	r3, r5, #29
 80003e4:	d004      	beq.n	80003f0 <__aeabi_fdiv+0x18c>
 80003e6:	230f      	movs	r3, #15
 80003e8:	402b      	ands	r3, r5
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d000      	beq.n	80003f0 <__aeabi_fdiv+0x18c>
 80003ee:	3504      	adds	r5, #4
 80003f0:	016b      	lsls	r3, r5, #5
 80003f2:	d544      	bpl.n	800047e <__aeabi_fdiv+0x21a>
 80003f4:	2001      	movs	r0, #1
 80003f6:	2500      	movs	r5, #0
 80003f8:	e795      	b.n	8000326 <__aeabi_fdiv+0xc2>
 80003fa:	20ff      	movs	r0, #255	; 0xff
 80003fc:	2500      	movs	r5, #0
 80003fe:	e792      	b.n	8000326 <__aeabi_fdiv+0xc2>
 8000400:	2580      	movs	r5, #128	; 0x80
 8000402:	2600      	movs	r6, #0
 8000404:	20ff      	movs	r0, #255	; 0xff
 8000406:	03ed      	lsls	r5, r5, #15
 8000408:	e78d      	b.n	8000326 <__aeabi_fdiv+0xc2>
 800040a:	2300      	movs	r3, #0
 800040c:	4698      	mov	r8, r3
 800040e:	2080      	movs	r0, #128	; 0x80
 8000410:	03c0      	lsls	r0, r0, #15
 8000412:	4205      	tst	r5, r0
 8000414:	d009      	beq.n	800042a <__aeabi_fdiv+0x1c6>
 8000416:	4643      	mov	r3, r8
 8000418:	4203      	tst	r3, r0
 800041a:	d106      	bne.n	800042a <__aeabi_fdiv+0x1c6>
 800041c:	4645      	mov	r5, r8
 800041e:	4305      	orrs	r5, r0
 8000420:	026d      	lsls	r5, r5, #9
 8000422:	0026      	movs	r6, r4
 8000424:	20ff      	movs	r0, #255	; 0xff
 8000426:	0a6d      	lsrs	r5, r5, #9
 8000428:	e77d      	b.n	8000326 <__aeabi_fdiv+0xc2>
 800042a:	2080      	movs	r0, #128	; 0x80
 800042c:	03c0      	lsls	r0, r0, #15
 800042e:	4305      	orrs	r5, r0
 8000430:	026d      	lsls	r5, r5, #9
 8000432:	20ff      	movs	r0, #255	; 0xff
 8000434:	0a6d      	lsrs	r5, r5, #9
 8000436:	e776      	b.n	8000326 <__aeabi_fdiv+0xc2>
 8000438:	4642      	mov	r2, r8
 800043a:	016b      	lsls	r3, r5, #5
 800043c:	0150      	lsls	r0, r2, #5
 800043e:	4283      	cmp	r3, r0
 8000440:	d219      	bcs.n	8000476 <__aeabi_fdiv+0x212>
 8000442:	221b      	movs	r2, #27
 8000444:	2500      	movs	r5, #0
 8000446:	3f01      	subs	r7, #1
 8000448:	2601      	movs	r6, #1
 800044a:	001c      	movs	r4, r3
 800044c:	006d      	lsls	r5, r5, #1
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	2c00      	cmp	r4, #0
 8000452:	db01      	blt.n	8000458 <__aeabi_fdiv+0x1f4>
 8000454:	4298      	cmp	r0, r3
 8000456:	d801      	bhi.n	800045c <__aeabi_fdiv+0x1f8>
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	4335      	orrs	r5, r6
 800045c:	3a01      	subs	r2, #1
 800045e:	2a00      	cmp	r2, #0
 8000460:	d1f3      	bne.n	800044a <__aeabi_fdiv+0x1e6>
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	4193      	sbcs	r3, r2
 8000466:	431d      	orrs	r5, r3
 8000468:	003b      	movs	r3, r7
 800046a:	337f      	adds	r3, #127	; 0x7f
 800046c:	000e      	movs	r6, r1
 800046e:	2b00      	cmp	r3, #0
 8000470:	dd00      	ble.n	8000474 <__aeabi_fdiv+0x210>
 8000472:	e741      	b.n	80002f8 <__aeabi_fdiv+0x94>
 8000474:	e7aa      	b.n	80003cc <__aeabi_fdiv+0x168>
 8000476:	221a      	movs	r2, #26
 8000478:	2501      	movs	r5, #1
 800047a:	1a1b      	subs	r3, r3, r0
 800047c:	e7e4      	b.n	8000448 <__aeabi_fdiv+0x1e4>
 800047e:	01ad      	lsls	r5, r5, #6
 8000480:	2000      	movs	r0, #0
 8000482:	0a6d      	lsrs	r5, r5, #9
 8000484:	e74f      	b.n	8000326 <__aeabi_fdiv+0xc2>
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	0800417c 	.word	0x0800417c
 800048c:	f7ffffff 	.word	0xf7ffffff
 8000490:	080041bc 	.word	0x080041bc

08000494 <__aeabi_fsub>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	46ce      	mov	lr, r9
 8000498:	4647      	mov	r7, r8
 800049a:	0243      	lsls	r3, r0, #9
 800049c:	0a5b      	lsrs	r3, r3, #9
 800049e:	024e      	lsls	r6, r1, #9
 80004a0:	00da      	lsls	r2, r3, #3
 80004a2:	4694      	mov	ip, r2
 80004a4:	0a72      	lsrs	r2, r6, #9
 80004a6:	4691      	mov	r9, r2
 80004a8:	0045      	lsls	r5, r0, #1
 80004aa:	004a      	lsls	r2, r1, #1
 80004ac:	b580      	push	{r7, lr}
 80004ae:	0e2d      	lsrs	r5, r5, #24
 80004b0:	001f      	movs	r7, r3
 80004b2:	0fc4      	lsrs	r4, r0, #31
 80004b4:	0e12      	lsrs	r2, r2, #24
 80004b6:	0fc9      	lsrs	r1, r1, #31
 80004b8:	09b6      	lsrs	r6, r6, #6
 80004ba:	2aff      	cmp	r2, #255	; 0xff
 80004bc:	d05b      	beq.n	8000576 <__aeabi_fsub+0xe2>
 80004be:	2001      	movs	r0, #1
 80004c0:	4041      	eors	r1, r0
 80004c2:	428c      	cmp	r4, r1
 80004c4:	d039      	beq.n	800053a <__aeabi_fsub+0xa6>
 80004c6:	1aa8      	subs	r0, r5, r2
 80004c8:	2800      	cmp	r0, #0
 80004ca:	dd5a      	ble.n	8000582 <__aeabi_fsub+0xee>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d06a      	beq.n	80005a6 <__aeabi_fsub+0x112>
 80004d0:	2dff      	cmp	r5, #255	; 0xff
 80004d2:	d100      	bne.n	80004d6 <__aeabi_fsub+0x42>
 80004d4:	e0d9      	b.n	800068a <__aeabi_fsub+0x1f6>
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	04d2      	lsls	r2, r2, #19
 80004da:	4316      	orrs	r6, r2
 80004dc:	281b      	cmp	r0, #27
 80004de:	dc00      	bgt.n	80004e2 <__aeabi_fsub+0x4e>
 80004e0:	e0e9      	b.n	80006b6 <__aeabi_fsub+0x222>
 80004e2:	2001      	movs	r0, #1
 80004e4:	4663      	mov	r3, ip
 80004e6:	1a18      	subs	r0, r3, r0
 80004e8:	0143      	lsls	r3, r0, #5
 80004ea:	d400      	bmi.n	80004ee <__aeabi_fsub+0x5a>
 80004ec:	e0b4      	b.n	8000658 <__aeabi_fsub+0x1c4>
 80004ee:	0180      	lsls	r0, r0, #6
 80004f0:	0987      	lsrs	r7, r0, #6
 80004f2:	0038      	movs	r0, r7
 80004f4:	f000 fa24 	bl	8000940 <__clzsi2>
 80004f8:	3805      	subs	r0, #5
 80004fa:	4087      	lsls	r7, r0
 80004fc:	4285      	cmp	r5, r0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fsub+0x6e>
 8000500:	e0cc      	b.n	800069c <__aeabi_fsub+0x208>
 8000502:	1a2d      	subs	r5, r5, r0
 8000504:	48b5      	ldr	r0, [pc, #724]	; (80007dc <__aeabi_fsub+0x348>)
 8000506:	4038      	ands	r0, r7
 8000508:	0743      	lsls	r3, r0, #29
 800050a:	d004      	beq.n	8000516 <__aeabi_fsub+0x82>
 800050c:	230f      	movs	r3, #15
 800050e:	4003      	ands	r3, r0
 8000510:	2b04      	cmp	r3, #4
 8000512:	d000      	beq.n	8000516 <__aeabi_fsub+0x82>
 8000514:	3004      	adds	r0, #4
 8000516:	0143      	lsls	r3, r0, #5
 8000518:	d400      	bmi.n	800051c <__aeabi_fsub+0x88>
 800051a:	e0a0      	b.n	800065e <__aeabi_fsub+0x1ca>
 800051c:	1c6a      	adds	r2, r5, #1
 800051e:	2dfe      	cmp	r5, #254	; 0xfe
 8000520:	d100      	bne.n	8000524 <__aeabi_fsub+0x90>
 8000522:	e08d      	b.n	8000640 <__aeabi_fsub+0x1ac>
 8000524:	0180      	lsls	r0, r0, #6
 8000526:	0a47      	lsrs	r7, r0, #9
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	05d0      	lsls	r0, r2, #23
 800052c:	4338      	orrs	r0, r7
 800052e:	07e4      	lsls	r4, r4, #31
 8000530:	4320      	orrs	r0, r4
 8000532:	bcc0      	pop	{r6, r7}
 8000534:	46b9      	mov	r9, r7
 8000536:	46b0      	mov	r8, r6
 8000538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800053a:	1aa8      	subs	r0, r5, r2
 800053c:	4680      	mov	r8, r0
 800053e:	2800      	cmp	r0, #0
 8000540:	dd45      	ble.n	80005ce <__aeabi_fsub+0x13a>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d070      	beq.n	8000628 <__aeabi_fsub+0x194>
 8000546:	2dff      	cmp	r5, #255	; 0xff
 8000548:	d100      	bne.n	800054c <__aeabi_fsub+0xb8>
 800054a:	e09e      	b.n	800068a <__aeabi_fsub+0x1f6>
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	04db      	lsls	r3, r3, #19
 8000550:	431e      	orrs	r6, r3
 8000552:	4643      	mov	r3, r8
 8000554:	2b1b      	cmp	r3, #27
 8000556:	dc00      	bgt.n	800055a <__aeabi_fsub+0xc6>
 8000558:	e0d2      	b.n	8000700 <__aeabi_fsub+0x26c>
 800055a:	2001      	movs	r0, #1
 800055c:	4460      	add	r0, ip
 800055e:	0143      	lsls	r3, r0, #5
 8000560:	d57a      	bpl.n	8000658 <__aeabi_fsub+0x1c4>
 8000562:	3501      	adds	r5, #1
 8000564:	2dff      	cmp	r5, #255	; 0xff
 8000566:	d06b      	beq.n	8000640 <__aeabi_fsub+0x1ac>
 8000568:	2301      	movs	r3, #1
 800056a:	4a9d      	ldr	r2, [pc, #628]	; (80007e0 <__aeabi_fsub+0x34c>)
 800056c:	4003      	ands	r3, r0
 800056e:	0840      	lsrs	r0, r0, #1
 8000570:	4010      	ands	r0, r2
 8000572:	4318      	orrs	r0, r3
 8000574:	e7c8      	b.n	8000508 <__aeabi_fsub+0x74>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d020      	beq.n	80005bc <__aeabi_fsub+0x128>
 800057a:	428c      	cmp	r4, r1
 800057c:	d023      	beq.n	80005c6 <__aeabi_fsub+0x132>
 800057e:	0028      	movs	r0, r5
 8000580:	38ff      	subs	r0, #255	; 0xff
 8000582:	2800      	cmp	r0, #0
 8000584:	d039      	beq.n	80005fa <__aeabi_fsub+0x166>
 8000586:	1b57      	subs	r7, r2, r5
 8000588:	2d00      	cmp	r5, #0
 800058a:	d000      	beq.n	800058e <__aeabi_fsub+0xfa>
 800058c:	e09d      	b.n	80006ca <__aeabi_fsub+0x236>
 800058e:	4663      	mov	r3, ip
 8000590:	2b00      	cmp	r3, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_fsub+0x102>
 8000594:	e0db      	b.n	800074e <__aeabi_fsub+0x2ba>
 8000596:	1e7b      	subs	r3, r7, #1
 8000598:	2f01      	cmp	r7, #1
 800059a:	d100      	bne.n	800059e <__aeabi_fsub+0x10a>
 800059c:	e10d      	b.n	80007ba <__aeabi_fsub+0x326>
 800059e:	2fff      	cmp	r7, #255	; 0xff
 80005a0:	d071      	beq.n	8000686 <__aeabi_fsub+0x1f2>
 80005a2:	001f      	movs	r7, r3
 80005a4:	e098      	b.n	80006d8 <__aeabi_fsub+0x244>
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fsub+0x118>
 80005aa:	e0a7      	b.n	80006fc <__aeabi_fsub+0x268>
 80005ac:	1e42      	subs	r2, r0, #1
 80005ae:	2801      	cmp	r0, #1
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fsub+0x120>
 80005b2:	e0e6      	b.n	8000782 <__aeabi_fsub+0x2ee>
 80005b4:	28ff      	cmp	r0, #255	; 0xff
 80005b6:	d068      	beq.n	800068a <__aeabi_fsub+0x1f6>
 80005b8:	0010      	movs	r0, r2
 80005ba:	e78f      	b.n	80004dc <__aeabi_fsub+0x48>
 80005bc:	2001      	movs	r0, #1
 80005be:	4041      	eors	r1, r0
 80005c0:	42a1      	cmp	r1, r4
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fsub+0x132>
 80005c4:	e77f      	b.n	80004c6 <__aeabi_fsub+0x32>
 80005c6:	20ff      	movs	r0, #255	; 0xff
 80005c8:	4240      	negs	r0, r0
 80005ca:	4680      	mov	r8, r0
 80005cc:	44a8      	add	r8, r5
 80005ce:	4640      	mov	r0, r8
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d038      	beq.n	8000646 <__aeabi_fsub+0x1b2>
 80005d4:	1b51      	subs	r1, r2, r5
 80005d6:	2d00      	cmp	r5, #0
 80005d8:	d100      	bne.n	80005dc <__aeabi_fsub+0x148>
 80005da:	e0ae      	b.n	800073a <__aeabi_fsub+0x2a6>
 80005dc:	2aff      	cmp	r2, #255	; 0xff
 80005de:	d100      	bne.n	80005e2 <__aeabi_fsub+0x14e>
 80005e0:	e0df      	b.n	80007a2 <__aeabi_fsub+0x30e>
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	4660      	mov	r0, ip
 80005e6:	04db      	lsls	r3, r3, #19
 80005e8:	4318      	orrs	r0, r3
 80005ea:	4684      	mov	ip, r0
 80005ec:	291b      	cmp	r1, #27
 80005ee:	dc00      	bgt.n	80005f2 <__aeabi_fsub+0x15e>
 80005f0:	e0d9      	b.n	80007a6 <__aeabi_fsub+0x312>
 80005f2:	2001      	movs	r0, #1
 80005f4:	0015      	movs	r5, r2
 80005f6:	1980      	adds	r0, r0, r6
 80005f8:	e7b1      	b.n	800055e <__aeabi_fsub+0xca>
 80005fa:	20fe      	movs	r0, #254	; 0xfe
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	4210      	tst	r0, r2
 8000600:	d171      	bne.n	80006e6 <__aeabi_fsub+0x252>
 8000602:	2d00      	cmp	r5, #0
 8000604:	d000      	beq.n	8000608 <__aeabi_fsub+0x174>
 8000606:	e0a6      	b.n	8000756 <__aeabi_fsub+0x2c2>
 8000608:	4663      	mov	r3, ip
 800060a:	2b00      	cmp	r3, #0
 800060c:	d100      	bne.n	8000610 <__aeabi_fsub+0x17c>
 800060e:	e0d9      	b.n	80007c4 <__aeabi_fsub+0x330>
 8000610:	2200      	movs	r2, #0
 8000612:	2e00      	cmp	r6, #0
 8000614:	d100      	bne.n	8000618 <__aeabi_fsub+0x184>
 8000616:	e788      	b.n	800052a <__aeabi_fsub+0x96>
 8000618:	1b98      	subs	r0, r3, r6
 800061a:	0143      	lsls	r3, r0, #5
 800061c:	d400      	bmi.n	8000620 <__aeabi_fsub+0x18c>
 800061e:	e0e1      	b.n	80007e4 <__aeabi_fsub+0x350>
 8000620:	4663      	mov	r3, ip
 8000622:	000c      	movs	r4, r1
 8000624:	1af0      	subs	r0, r6, r3
 8000626:	e76f      	b.n	8000508 <__aeabi_fsub+0x74>
 8000628:	2e00      	cmp	r6, #0
 800062a:	d100      	bne.n	800062e <__aeabi_fsub+0x19a>
 800062c:	e0b7      	b.n	800079e <__aeabi_fsub+0x30a>
 800062e:	0002      	movs	r2, r0
 8000630:	3a01      	subs	r2, #1
 8000632:	2801      	cmp	r0, #1
 8000634:	d100      	bne.n	8000638 <__aeabi_fsub+0x1a4>
 8000636:	e09c      	b.n	8000772 <__aeabi_fsub+0x2de>
 8000638:	28ff      	cmp	r0, #255	; 0xff
 800063a:	d026      	beq.n	800068a <__aeabi_fsub+0x1f6>
 800063c:	4690      	mov	r8, r2
 800063e:	e788      	b.n	8000552 <__aeabi_fsub+0xbe>
 8000640:	22ff      	movs	r2, #255	; 0xff
 8000642:	2700      	movs	r7, #0
 8000644:	e771      	b.n	800052a <__aeabi_fsub+0x96>
 8000646:	20fe      	movs	r0, #254	; 0xfe
 8000648:	1c6a      	adds	r2, r5, #1
 800064a:	4210      	tst	r0, r2
 800064c:	d064      	beq.n	8000718 <__aeabi_fsub+0x284>
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d0f6      	beq.n	8000640 <__aeabi_fsub+0x1ac>
 8000652:	0015      	movs	r5, r2
 8000654:	4466      	add	r6, ip
 8000656:	0870      	lsrs	r0, r6, #1
 8000658:	0743      	lsls	r3, r0, #29
 800065a:	d000      	beq.n	800065e <__aeabi_fsub+0x1ca>
 800065c:	e756      	b.n	800050c <__aeabi_fsub+0x78>
 800065e:	08c3      	lsrs	r3, r0, #3
 8000660:	2dff      	cmp	r5, #255	; 0xff
 8000662:	d012      	beq.n	800068a <__aeabi_fsub+0x1f6>
 8000664:	025b      	lsls	r3, r3, #9
 8000666:	0a5f      	lsrs	r7, r3, #9
 8000668:	b2ea      	uxtb	r2, r5
 800066a:	e75e      	b.n	800052a <__aeabi_fsub+0x96>
 800066c:	4662      	mov	r2, ip
 800066e:	2a00      	cmp	r2, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_fsub+0x1e0>
 8000672:	e096      	b.n	80007a2 <__aeabi_fsub+0x30e>
 8000674:	2e00      	cmp	r6, #0
 8000676:	d008      	beq.n	800068a <__aeabi_fsub+0x1f6>
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	03d2      	lsls	r2, r2, #15
 800067c:	4213      	tst	r3, r2
 800067e:	d004      	beq.n	800068a <__aeabi_fsub+0x1f6>
 8000680:	4648      	mov	r0, r9
 8000682:	4210      	tst	r0, r2
 8000684:	d101      	bne.n	800068a <__aeabi_fsub+0x1f6>
 8000686:	000c      	movs	r4, r1
 8000688:	464b      	mov	r3, r9
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0d8      	beq.n	8000640 <__aeabi_fsub+0x1ac>
 800068e:	2780      	movs	r7, #128	; 0x80
 8000690:	03ff      	lsls	r7, r7, #15
 8000692:	431f      	orrs	r7, r3
 8000694:	027f      	lsls	r7, r7, #9
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	0a7f      	lsrs	r7, r7, #9
 800069a:	e746      	b.n	800052a <__aeabi_fsub+0x96>
 800069c:	2320      	movs	r3, #32
 800069e:	003a      	movs	r2, r7
 80006a0:	1b45      	subs	r5, r0, r5
 80006a2:	0038      	movs	r0, r7
 80006a4:	3501      	adds	r5, #1
 80006a6:	40ea      	lsrs	r2, r5
 80006a8:	1b5d      	subs	r5, r3, r5
 80006aa:	40a8      	lsls	r0, r5
 80006ac:	1e43      	subs	r3, r0, #1
 80006ae:	4198      	sbcs	r0, r3
 80006b0:	2500      	movs	r5, #0
 80006b2:	4310      	orrs	r0, r2
 80006b4:	e728      	b.n	8000508 <__aeabi_fsub+0x74>
 80006b6:	2320      	movs	r3, #32
 80006b8:	1a1b      	subs	r3, r3, r0
 80006ba:	0032      	movs	r2, r6
 80006bc:	409e      	lsls	r6, r3
 80006be:	40c2      	lsrs	r2, r0
 80006c0:	0030      	movs	r0, r6
 80006c2:	1e43      	subs	r3, r0, #1
 80006c4:	4198      	sbcs	r0, r3
 80006c6:	4310      	orrs	r0, r2
 80006c8:	e70c      	b.n	80004e4 <__aeabi_fsub+0x50>
 80006ca:	2aff      	cmp	r2, #255	; 0xff
 80006cc:	d0db      	beq.n	8000686 <__aeabi_fsub+0x1f2>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	4660      	mov	r0, ip
 80006d2:	04db      	lsls	r3, r3, #19
 80006d4:	4318      	orrs	r0, r3
 80006d6:	4684      	mov	ip, r0
 80006d8:	2f1b      	cmp	r7, #27
 80006da:	dd56      	ble.n	800078a <__aeabi_fsub+0x2f6>
 80006dc:	2001      	movs	r0, #1
 80006de:	000c      	movs	r4, r1
 80006e0:	0015      	movs	r5, r2
 80006e2:	1a30      	subs	r0, r6, r0
 80006e4:	e700      	b.n	80004e8 <__aeabi_fsub+0x54>
 80006e6:	4663      	mov	r3, ip
 80006e8:	1b9f      	subs	r7, r3, r6
 80006ea:	017b      	lsls	r3, r7, #5
 80006ec:	d43d      	bmi.n	800076a <__aeabi_fsub+0x2d6>
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fsub+0x260>
 80006f2:	e6fe      	b.n	80004f2 <__aeabi_fsub+0x5e>
 80006f4:	2400      	movs	r4, #0
 80006f6:	2200      	movs	r2, #0
 80006f8:	2700      	movs	r7, #0
 80006fa:	e716      	b.n	800052a <__aeabi_fsub+0x96>
 80006fc:	0005      	movs	r5, r0
 80006fe:	e7af      	b.n	8000660 <__aeabi_fsub+0x1cc>
 8000700:	0032      	movs	r2, r6
 8000702:	4643      	mov	r3, r8
 8000704:	4641      	mov	r1, r8
 8000706:	40da      	lsrs	r2, r3
 8000708:	2320      	movs	r3, #32
 800070a:	1a5b      	subs	r3, r3, r1
 800070c:	409e      	lsls	r6, r3
 800070e:	0030      	movs	r0, r6
 8000710:	1e43      	subs	r3, r0, #1
 8000712:	4198      	sbcs	r0, r3
 8000714:	4310      	orrs	r0, r2
 8000716:	e721      	b.n	800055c <__aeabi_fsub+0xc8>
 8000718:	2d00      	cmp	r5, #0
 800071a:	d1a7      	bne.n	800066c <__aeabi_fsub+0x1d8>
 800071c:	4663      	mov	r3, ip
 800071e:	2b00      	cmp	r3, #0
 8000720:	d059      	beq.n	80007d6 <__aeabi_fsub+0x342>
 8000722:	2200      	movs	r2, #0
 8000724:	2e00      	cmp	r6, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fsub+0x296>
 8000728:	e6ff      	b.n	800052a <__aeabi_fsub+0x96>
 800072a:	0030      	movs	r0, r6
 800072c:	4460      	add	r0, ip
 800072e:	0143      	lsls	r3, r0, #5
 8000730:	d592      	bpl.n	8000658 <__aeabi_fsub+0x1c4>
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <__aeabi_fsub+0x348>)
 8000734:	3501      	adds	r5, #1
 8000736:	4018      	ands	r0, r3
 8000738:	e78e      	b.n	8000658 <__aeabi_fsub+0x1c4>
 800073a:	4663      	mov	r3, ip
 800073c:	2b00      	cmp	r3, #0
 800073e:	d047      	beq.n	80007d0 <__aeabi_fsub+0x33c>
 8000740:	1e4b      	subs	r3, r1, #1
 8000742:	2901      	cmp	r1, #1
 8000744:	d015      	beq.n	8000772 <__aeabi_fsub+0x2de>
 8000746:	29ff      	cmp	r1, #255	; 0xff
 8000748:	d02b      	beq.n	80007a2 <__aeabi_fsub+0x30e>
 800074a:	0019      	movs	r1, r3
 800074c:	e74e      	b.n	80005ec <__aeabi_fsub+0x158>
 800074e:	000c      	movs	r4, r1
 8000750:	464b      	mov	r3, r9
 8000752:	003d      	movs	r5, r7
 8000754:	e784      	b.n	8000660 <__aeabi_fsub+0x1cc>
 8000756:	4662      	mov	r2, ip
 8000758:	2a00      	cmp	r2, #0
 800075a:	d18b      	bne.n	8000674 <__aeabi_fsub+0x1e0>
 800075c:	2e00      	cmp	r6, #0
 800075e:	d192      	bne.n	8000686 <__aeabi_fsub+0x1f2>
 8000760:	2780      	movs	r7, #128	; 0x80
 8000762:	2400      	movs	r4, #0
 8000764:	22ff      	movs	r2, #255	; 0xff
 8000766:	03ff      	lsls	r7, r7, #15
 8000768:	e6df      	b.n	800052a <__aeabi_fsub+0x96>
 800076a:	4663      	mov	r3, ip
 800076c:	000c      	movs	r4, r1
 800076e:	1af7      	subs	r7, r6, r3
 8000770:	e6bf      	b.n	80004f2 <__aeabi_fsub+0x5e>
 8000772:	0030      	movs	r0, r6
 8000774:	4460      	add	r0, ip
 8000776:	2501      	movs	r5, #1
 8000778:	0143      	lsls	r3, r0, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fsub+0x2ea>
 800077c:	e76c      	b.n	8000658 <__aeabi_fsub+0x1c4>
 800077e:	2502      	movs	r5, #2
 8000780:	e6f2      	b.n	8000568 <__aeabi_fsub+0xd4>
 8000782:	4663      	mov	r3, ip
 8000784:	2501      	movs	r5, #1
 8000786:	1b98      	subs	r0, r3, r6
 8000788:	e6ae      	b.n	80004e8 <__aeabi_fsub+0x54>
 800078a:	2320      	movs	r3, #32
 800078c:	4664      	mov	r4, ip
 800078e:	4660      	mov	r0, ip
 8000790:	40fc      	lsrs	r4, r7
 8000792:	1bdf      	subs	r7, r3, r7
 8000794:	40b8      	lsls	r0, r7
 8000796:	1e43      	subs	r3, r0, #1
 8000798:	4198      	sbcs	r0, r3
 800079a:	4320      	orrs	r0, r4
 800079c:	e79f      	b.n	80006de <__aeabi_fsub+0x24a>
 800079e:	0005      	movs	r5, r0
 80007a0:	e75e      	b.n	8000660 <__aeabi_fsub+0x1cc>
 80007a2:	464b      	mov	r3, r9
 80007a4:	e771      	b.n	800068a <__aeabi_fsub+0x1f6>
 80007a6:	2320      	movs	r3, #32
 80007a8:	4665      	mov	r5, ip
 80007aa:	4660      	mov	r0, ip
 80007ac:	40cd      	lsrs	r5, r1
 80007ae:	1a59      	subs	r1, r3, r1
 80007b0:	4088      	lsls	r0, r1
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4328      	orrs	r0, r5
 80007b8:	e71c      	b.n	80005f4 <__aeabi_fsub+0x160>
 80007ba:	4663      	mov	r3, ip
 80007bc:	000c      	movs	r4, r1
 80007be:	2501      	movs	r5, #1
 80007c0:	1af0      	subs	r0, r6, r3
 80007c2:	e691      	b.n	80004e8 <__aeabi_fsub+0x54>
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d095      	beq.n	80006f4 <__aeabi_fsub+0x260>
 80007c8:	000c      	movs	r4, r1
 80007ca:	464f      	mov	r7, r9
 80007cc:	2200      	movs	r2, #0
 80007ce:	e6ac      	b.n	800052a <__aeabi_fsub+0x96>
 80007d0:	464b      	mov	r3, r9
 80007d2:	000d      	movs	r5, r1
 80007d4:	e744      	b.n	8000660 <__aeabi_fsub+0x1cc>
 80007d6:	464f      	mov	r7, r9
 80007d8:	2200      	movs	r2, #0
 80007da:	e6a6      	b.n	800052a <__aeabi_fsub+0x96>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d000      	beq.n	80007ea <__aeabi_fsub+0x356>
 80007e8:	e736      	b.n	8000658 <__aeabi_fsub+0x1c4>
 80007ea:	2400      	movs	r4, #0
 80007ec:	2700      	movs	r7, #0
 80007ee:	e69c      	b.n	800052a <__aeabi_fsub+0x96>

080007f0 <__aeabi_f2iz>:
 80007f0:	0241      	lsls	r1, r0, #9
 80007f2:	0042      	lsls	r2, r0, #1
 80007f4:	0fc3      	lsrs	r3, r0, #31
 80007f6:	0a49      	lsrs	r1, r1, #9
 80007f8:	2000      	movs	r0, #0
 80007fa:	0e12      	lsrs	r2, r2, #24
 80007fc:	2a7e      	cmp	r2, #126	; 0x7e
 80007fe:	dd03      	ble.n	8000808 <__aeabi_f2iz+0x18>
 8000800:	2a9d      	cmp	r2, #157	; 0x9d
 8000802:	dd02      	ble.n	800080a <__aeabi_f2iz+0x1a>
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <__aeabi_f2iz+0x3c>)
 8000806:	1898      	adds	r0, r3, r2
 8000808:	4770      	bx	lr
 800080a:	2080      	movs	r0, #128	; 0x80
 800080c:	0400      	lsls	r0, r0, #16
 800080e:	4301      	orrs	r1, r0
 8000810:	2a95      	cmp	r2, #149	; 0x95
 8000812:	dc07      	bgt.n	8000824 <__aeabi_f2iz+0x34>
 8000814:	2096      	movs	r0, #150	; 0x96
 8000816:	1a82      	subs	r2, r0, r2
 8000818:	40d1      	lsrs	r1, r2
 800081a:	4248      	negs	r0, r1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f3      	bne.n	8000808 <__aeabi_f2iz+0x18>
 8000820:	0008      	movs	r0, r1
 8000822:	e7f1      	b.n	8000808 <__aeabi_f2iz+0x18>
 8000824:	3a96      	subs	r2, #150	; 0x96
 8000826:	4091      	lsls	r1, r2
 8000828:	e7f7      	b.n	800081a <__aeabi_f2iz+0x2a>
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	7fffffff 	.word	0x7fffffff

08000830 <__aeabi_i2f>:
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	2800      	cmp	r0, #0
 8000834:	d013      	beq.n	800085e <__aeabi_i2f+0x2e>
 8000836:	17c3      	asrs	r3, r0, #31
 8000838:	18c6      	adds	r6, r0, r3
 800083a:	405e      	eors	r6, r3
 800083c:	0fc4      	lsrs	r4, r0, #31
 800083e:	0030      	movs	r0, r6
 8000840:	f000 f87e 	bl	8000940 <__clzsi2>
 8000844:	239e      	movs	r3, #158	; 0x9e
 8000846:	0005      	movs	r5, r0
 8000848:	1a1b      	subs	r3, r3, r0
 800084a:	2b96      	cmp	r3, #150	; 0x96
 800084c:	dc0f      	bgt.n	800086e <__aeabi_i2f+0x3e>
 800084e:	2808      	cmp	r0, #8
 8000850:	dd01      	ble.n	8000856 <__aeabi_i2f+0x26>
 8000852:	3d08      	subs	r5, #8
 8000854:	40ae      	lsls	r6, r5
 8000856:	0276      	lsls	r6, r6, #9
 8000858:	0a76      	lsrs	r6, r6, #9
 800085a:	b2d8      	uxtb	r0, r3
 800085c:	e002      	b.n	8000864 <__aeabi_i2f+0x34>
 800085e:	2400      	movs	r4, #0
 8000860:	2000      	movs	r0, #0
 8000862:	2600      	movs	r6, #0
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	4330      	orrs	r0, r6
 8000868:	07e4      	lsls	r4, r4, #31
 800086a:	4320      	orrs	r0, r4
 800086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800086e:	2b99      	cmp	r3, #153	; 0x99
 8000870:	dd0c      	ble.n	800088c <__aeabi_i2f+0x5c>
 8000872:	2205      	movs	r2, #5
 8000874:	0031      	movs	r1, r6
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	40d1      	lsrs	r1, r2
 800087a:	000a      	movs	r2, r1
 800087c:	0001      	movs	r1, r0
 800087e:	0030      	movs	r0, r6
 8000880:	311b      	adds	r1, #27
 8000882:	4088      	lsls	r0, r1
 8000884:	1e41      	subs	r1, r0, #1
 8000886:	4188      	sbcs	r0, r1
 8000888:	4302      	orrs	r2, r0
 800088a:	0016      	movs	r6, r2
 800088c:	2d05      	cmp	r5, #5
 800088e:	dc12      	bgt.n	80008b6 <__aeabi_i2f+0x86>
 8000890:	0031      	movs	r1, r6
 8000892:	4f0d      	ldr	r7, [pc, #52]	; (80008c8 <__aeabi_i2f+0x98>)
 8000894:	4039      	ands	r1, r7
 8000896:	0772      	lsls	r2, r6, #29
 8000898:	d009      	beq.n	80008ae <__aeabi_i2f+0x7e>
 800089a:	200f      	movs	r0, #15
 800089c:	4030      	ands	r0, r6
 800089e:	2804      	cmp	r0, #4
 80008a0:	d005      	beq.n	80008ae <__aeabi_i2f+0x7e>
 80008a2:	3104      	adds	r1, #4
 80008a4:	014a      	lsls	r2, r1, #5
 80008a6:	d502      	bpl.n	80008ae <__aeabi_i2f+0x7e>
 80008a8:	239f      	movs	r3, #159	; 0x9f
 80008aa:	4039      	ands	r1, r7
 80008ac:	1b5b      	subs	r3, r3, r5
 80008ae:	0189      	lsls	r1, r1, #6
 80008b0:	0a4e      	lsrs	r6, r1, #9
 80008b2:	b2d8      	uxtb	r0, r3
 80008b4:	e7d6      	b.n	8000864 <__aeabi_i2f+0x34>
 80008b6:	1f6a      	subs	r2, r5, #5
 80008b8:	4096      	lsls	r6, r2
 80008ba:	0031      	movs	r1, r6
 80008bc:	4f02      	ldr	r7, [pc, #8]	; (80008c8 <__aeabi_i2f+0x98>)
 80008be:	4039      	ands	r1, r7
 80008c0:	0772      	lsls	r2, r6, #29
 80008c2:	d0f4      	beq.n	80008ae <__aeabi_i2f+0x7e>
 80008c4:	e7e9      	b.n	800089a <__aeabi_i2f+0x6a>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	fbffffff 	.word	0xfbffffff

080008cc <__aeabi_cfrcmple>:
 80008cc:	4684      	mov	ip, r0
 80008ce:	0008      	movs	r0, r1
 80008d0:	4661      	mov	r1, ip
 80008d2:	e7ff      	b.n	80008d4 <__aeabi_cfcmpeq>

080008d4 <__aeabi_cfcmpeq>:
 80008d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80008d6:	f000 f8bd 	bl	8000a54 <__lesf2>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d401      	bmi.n	80008e2 <__aeabi_cfcmpeq+0xe>
 80008de:	2100      	movs	r1, #0
 80008e0:	42c8      	cmn	r0, r1
 80008e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080008e4 <__aeabi_fcmpeq>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	f000 f849 	bl	800097c <__eqsf2>
 80008ea:	4240      	negs	r0, r0
 80008ec:	3001      	adds	r0, #1
 80008ee:	bd10      	pop	{r4, pc}

080008f0 <__aeabi_fcmplt>:
 80008f0:	b510      	push	{r4, lr}
 80008f2:	f000 f8af 	bl	8000a54 <__lesf2>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	db01      	blt.n	80008fe <__aeabi_fcmplt+0xe>
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	2001      	movs	r0, #1
 8000900:	bd10      	pop	{r4, pc}
 8000902:	46c0      	nop			; (mov r8, r8)

08000904 <__aeabi_fcmple>:
 8000904:	b510      	push	{r4, lr}
 8000906:	f000 f8a5 	bl	8000a54 <__lesf2>
 800090a:	2800      	cmp	r0, #0
 800090c:	dd01      	ble.n	8000912 <__aeabi_fcmple+0xe>
 800090e:	2000      	movs	r0, #0
 8000910:	bd10      	pop	{r4, pc}
 8000912:	2001      	movs	r0, #1
 8000914:	bd10      	pop	{r4, pc}
 8000916:	46c0      	nop			; (mov r8, r8)

08000918 <__aeabi_fcmpgt>:
 8000918:	b510      	push	{r4, lr}
 800091a:	f000 f855 	bl	80009c8 <__gesf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	dc01      	bgt.n	8000926 <__aeabi_fcmpgt+0xe>
 8000922:	2000      	movs	r0, #0
 8000924:	bd10      	pop	{r4, pc}
 8000926:	2001      	movs	r0, #1
 8000928:	bd10      	pop	{r4, pc}
 800092a:	46c0      	nop			; (mov r8, r8)

0800092c <__aeabi_fcmpge>:
 800092c:	b510      	push	{r4, lr}
 800092e:	f000 f84b 	bl	80009c8 <__gesf2>
 8000932:	2800      	cmp	r0, #0
 8000934:	da01      	bge.n	800093a <__aeabi_fcmpge+0xe>
 8000936:	2000      	movs	r0, #0
 8000938:	bd10      	pop	{r4, pc}
 800093a:	2001      	movs	r0, #1
 800093c:	bd10      	pop	{r4, pc}
 800093e:	46c0      	nop			; (mov r8, r8)

08000940 <__clzsi2>:
 8000940:	211c      	movs	r1, #28
 8000942:	2301      	movs	r3, #1
 8000944:	041b      	lsls	r3, r3, #16
 8000946:	4298      	cmp	r0, r3
 8000948:	d301      	bcc.n	800094e <__clzsi2+0xe>
 800094a:	0c00      	lsrs	r0, r0, #16
 800094c:	3910      	subs	r1, #16
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	4298      	cmp	r0, r3
 8000952:	d301      	bcc.n	8000958 <__clzsi2+0x18>
 8000954:	0a00      	lsrs	r0, r0, #8
 8000956:	3908      	subs	r1, #8
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	4298      	cmp	r0, r3
 800095c:	d301      	bcc.n	8000962 <__clzsi2+0x22>
 800095e:	0900      	lsrs	r0, r0, #4
 8000960:	3904      	subs	r1, #4
 8000962:	a202      	add	r2, pc, #8	; (adr r2, 800096c <__clzsi2+0x2c>)
 8000964:	5c10      	ldrb	r0, [r2, r0]
 8000966:	1840      	adds	r0, r0, r1
 8000968:	4770      	bx	lr
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	02020304 	.word	0x02020304
 8000970:	01010101 	.word	0x01010101
	...

0800097c <__eqsf2>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	0042      	lsls	r2, r0, #1
 8000980:	0245      	lsls	r5, r0, #9
 8000982:	024e      	lsls	r6, r1, #9
 8000984:	004c      	lsls	r4, r1, #1
 8000986:	0fc3      	lsrs	r3, r0, #31
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	2001      	movs	r0, #1
 800098c:	0e12      	lsrs	r2, r2, #24
 800098e:	0a76      	lsrs	r6, r6, #9
 8000990:	0e24      	lsrs	r4, r4, #24
 8000992:	0fc9      	lsrs	r1, r1, #31
 8000994:	2aff      	cmp	r2, #255	; 0xff
 8000996:	d006      	beq.n	80009a6 <__eqsf2+0x2a>
 8000998:	2cff      	cmp	r4, #255	; 0xff
 800099a:	d003      	beq.n	80009a4 <__eqsf2+0x28>
 800099c:	42a2      	cmp	r2, r4
 800099e:	d101      	bne.n	80009a4 <__eqsf2+0x28>
 80009a0:	42b5      	cmp	r5, r6
 80009a2:	d006      	beq.n	80009b2 <__eqsf2+0x36>
 80009a4:	bd70      	pop	{r4, r5, r6, pc}
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d1fc      	bne.n	80009a4 <__eqsf2+0x28>
 80009aa:	2cff      	cmp	r4, #255	; 0xff
 80009ac:	d1fa      	bne.n	80009a4 <__eqsf2+0x28>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d1f8      	bne.n	80009a4 <__eqsf2+0x28>
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d006      	beq.n	80009c4 <__eqsf2+0x48>
 80009b6:	2001      	movs	r0, #1
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d1f3      	bne.n	80009a4 <__eqsf2+0x28>
 80009bc:	0028      	movs	r0, r5
 80009be:	1e43      	subs	r3, r0, #1
 80009c0:	4198      	sbcs	r0, r3
 80009c2:	e7ef      	b.n	80009a4 <__eqsf2+0x28>
 80009c4:	2000      	movs	r0, #0
 80009c6:	e7ed      	b.n	80009a4 <__eqsf2+0x28>

080009c8 <__gesf2>:
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	0042      	lsls	r2, r0, #1
 80009cc:	0245      	lsls	r5, r0, #9
 80009ce:	024e      	lsls	r6, r1, #9
 80009d0:	004c      	lsls	r4, r1, #1
 80009d2:	0fc3      	lsrs	r3, r0, #31
 80009d4:	0a6d      	lsrs	r5, r5, #9
 80009d6:	0e12      	lsrs	r2, r2, #24
 80009d8:	0a76      	lsrs	r6, r6, #9
 80009da:	0e24      	lsrs	r4, r4, #24
 80009dc:	0fc8      	lsrs	r0, r1, #31
 80009de:	2aff      	cmp	r2, #255	; 0xff
 80009e0:	d01b      	beq.n	8000a1a <__gesf2+0x52>
 80009e2:	2cff      	cmp	r4, #255	; 0xff
 80009e4:	d00e      	beq.n	8000a04 <__gesf2+0x3c>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d11b      	bne.n	8000a22 <__gesf2+0x5a>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d101      	bne.n	80009f2 <__gesf2+0x2a>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d01c      	beq.n	8000a2c <__gesf2+0x64>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d00c      	beq.n	8000a10 <__gesf2+0x48>
 80009f6:	4283      	cmp	r3, r0
 80009f8:	d01c      	beq.n	8000a34 <__gesf2+0x6c>
 80009fa:	2102      	movs	r1, #2
 80009fc:	1e58      	subs	r0, r3, #1
 80009fe:	4008      	ands	r0, r1
 8000a00:	3801      	subs	r0, #1
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d122      	bne.n	8000a4e <__gesf2+0x86>
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d1f4      	bne.n	80009f6 <__gesf2+0x2e>
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d1f2      	bne.n	80009f6 <__gesf2+0x2e>
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d1f6      	bne.n	8000a02 <__gesf2+0x3a>
 8000a14:	2001      	movs	r0, #1
 8000a16:	4240      	negs	r0, r0
 8000a18:	e7f3      	b.n	8000a02 <__gesf2+0x3a>
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d117      	bne.n	8000a4e <__gesf2+0x86>
 8000a1e:	2cff      	cmp	r4, #255	; 0xff
 8000a20:	d0f0      	beq.n	8000a04 <__gesf2+0x3c>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d1e7      	bne.n	80009f6 <__gesf2+0x2e>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d1e5      	bne.n	80009f6 <__gesf2+0x2e>
 8000a2a:	e7e6      	b.n	80009fa <__gesf2+0x32>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d0e7      	beq.n	8000a02 <__gesf2+0x3a>
 8000a32:	e7e2      	b.n	80009fa <__gesf2+0x32>
 8000a34:	42a2      	cmp	r2, r4
 8000a36:	dc05      	bgt.n	8000a44 <__gesf2+0x7c>
 8000a38:	dbea      	blt.n	8000a10 <__gesf2+0x48>
 8000a3a:	42b5      	cmp	r5, r6
 8000a3c:	d802      	bhi.n	8000a44 <__gesf2+0x7c>
 8000a3e:	d3e7      	bcc.n	8000a10 <__gesf2+0x48>
 8000a40:	2000      	movs	r0, #0
 8000a42:	e7de      	b.n	8000a02 <__gesf2+0x3a>
 8000a44:	4243      	negs	r3, r0
 8000a46:	4158      	adcs	r0, r3
 8000a48:	0040      	lsls	r0, r0, #1
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7d9      	b.n	8000a02 <__gesf2+0x3a>
 8000a4e:	2002      	movs	r0, #2
 8000a50:	4240      	negs	r0, r0
 8000a52:	e7d6      	b.n	8000a02 <__gesf2+0x3a>

08000a54 <__lesf2>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	0042      	lsls	r2, r0, #1
 8000a58:	0245      	lsls	r5, r0, #9
 8000a5a:	024e      	lsls	r6, r1, #9
 8000a5c:	004c      	lsls	r4, r1, #1
 8000a5e:	0fc3      	lsrs	r3, r0, #31
 8000a60:	0a6d      	lsrs	r5, r5, #9
 8000a62:	0e12      	lsrs	r2, r2, #24
 8000a64:	0a76      	lsrs	r6, r6, #9
 8000a66:	0e24      	lsrs	r4, r4, #24
 8000a68:	0fc8      	lsrs	r0, r1, #31
 8000a6a:	2aff      	cmp	r2, #255	; 0xff
 8000a6c:	d00b      	beq.n	8000a86 <__lesf2+0x32>
 8000a6e:	2cff      	cmp	r4, #255	; 0xff
 8000a70:	d00d      	beq.n	8000a8e <__lesf2+0x3a>
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d11f      	bne.n	8000ab6 <__lesf2+0x62>
 8000a76:	2c00      	cmp	r4, #0
 8000a78:	d116      	bne.n	8000aa8 <__lesf2+0x54>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d114      	bne.n	8000aa8 <__lesf2+0x54>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d010      	beq.n	8000aa6 <__lesf2+0x52>
 8000a84:	e009      	b.n	8000a9a <__lesf2+0x46>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d10c      	bne.n	8000aa4 <__lesf2+0x50>
 8000a8a:	2cff      	cmp	r4, #255	; 0xff
 8000a8c:	d113      	bne.n	8000ab6 <__lesf2+0x62>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d108      	bne.n	8000aa4 <__lesf2+0x50>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d008      	beq.n	8000aa8 <__lesf2+0x54>
 8000a96:	4283      	cmp	r3, r0
 8000a98:	d012      	beq.n	8000ac0 <__lesf2+0x6c>
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	1e58      	subs	r0, r3, #1
 8000a9e:	4008      	ands	r0, r1
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e000      	b.n	8000aa6 <__lesf2+0x52>
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d1f4      	bne.n	8000a96 <__lesf2+0x42>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d1fa      	bne.n	8000aa6 <__lesf2+0x52>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	e7f7      	b.n	8000aa6 <__lesf2+0x52>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d1ed      	bne.n	8000a96 <__lesf2+0x42>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1eb      	bne.n	8000a96 <__lesf2+0x42>
 8000abe:	e7ec      	b.n	8000a9a <__lesf2+0x46>
 8000ac0:	42a2      	cmp	r2, r4
 8000ac2:	dc05      	bgt.n	8000ad0 <__lesf2+0x7c>
 8000ac4:	dbf2      	blt.n	8000aac <__lesf2+0x58>
 8000ac6:	42b5      	cmp	r5, r6
 8000ac8:	d802      	bhi.n	8000ad0 <__lesf2+0x7c>
 8000aca:	d3ef      	bcc.n	8000aac <__lesf2+0x58>
 8000acc:	2000      	movs	r0, #0
 8000ace:	e7ea      	b.n	8000aa6 <__lesf2+0x52>
 8000ad0:	4243      	negs	r3, r0
 8000ad2:	4158      	adcs	r0, r3
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7e5      	b.n	8000aa6 <__lesf2+0x52>
 8000ada:	46c0      	nop			; (mov r8, r8)

08000adc <tempSensorGetData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void tempSensorGetData(I2C_HandleTypeDef I2C_handle,const uint8_t TMP_ADDR, UART_HandleTypeDef UART_handle){
 8000adc:	b084      	sub	sp, #16
 8000ade:	b5b0      	push	{r4, r5, r7, lr}
 8000ae0:	b096      	sub	sp, #88	; 0x58
 8000ae2:	af02      	add	r7, sp, #8
 8000ae4:	2560      	movs	r5, #96	; 0x60
 8000ae6:	197c      	adds	r4, r7, r5
 8000ae8:	6020      	str	r0, [r4, #0]
 8000aea:	6061      	str	r1, [r4, #4]
 8000aec:	60a2      	str	r2, [r4, #8]
 8000aee:	60e3      	str	r3, [r4, #12]
		  char uart_buf[50];

		  int buf_len;
		  static const uint8_t REG_TEMP = 0x00;

		 buf[0] = REG_TEMP;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <tempSensorGetData+0x144>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	2038      	movs	r0, #56	; 0x38
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	701a      	strb	r2, [r3, #0]
	/*
		  Send a write request to the I2C and check successful return.
		  */
		  if (HAL_I2C_Master_Transmit(&hi2c1, TMP_ADDR, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000afa:	2354      	movs	r3, #84	; 0x54
 8000afc:	195b      	adds	r3, r3, r5
 8000afe:	19db      	adds	r3, r3, r7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b299      	uxth	r1, r3
 8000b04:	183a      	adds	r2, r7, r0
 8000b06:	4847      	ldr	r0, [pc, #284]	; (8000c24 <tempSensorGetData+0x148>)
 8000b08:	2301      	movs	r3, #1
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f000 ff14 	bl	800193c <HAL_I2C_Master_Transmit>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d008      	beq.n	8000b2a <tempSensorGetData+0x4e>

			  /*
			   Load an error message into the UART buffer.
			   */
			  buf_len = sprintf(uart_buf,"Master Transmit Returned a problem\r\n");
 8000b18:	4a43      	ldr	r2, [pc, #268]	; (8000c28 <tempSensorGetData+0x14c>)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f002 fe8e 	bl	8003840 <siprintf>
 8000b24:	0003      	movs	r3, r0
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b28:	e06a      	b.n	8000c00 <tempSensorGetData+0x124>
		  } else if

		  /*
		   Receive the Data from the specified address and check successful return.
		   */
		  (HAL_I2C_Master_Receive(&hi2c1, TMP_ADDR, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000b2a:	2354      	movs	r3, #84	; 0x54
 8000b2c:	2260      	movs	r2, #96	; 0x60
 8000b2e:	189b      	adds	r3, r3, r2
 8000b30:	19db      	adds	r3, r3, r7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b299      	uxth	r1, r3
 8000b36:	2338      	movs	r3, #56	; 0x38
 8000b38:	18fa      	adds	r2, r7, r3
 8000b3a:	483a      	ldr	r0, [pc, #232]	; (8000c24 <tempSensorGetData+0x148>)
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	425b      	negs	r3, r3
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2302      	movs	r3, #2
 8000b44:	f001 f824 	bl	8001b90 <HAL_I2C_Master_Receive>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d008      	beq.n	8000b5e <tempSensorGetData+0x82>

			  /*
			  Load an error message into the UART buffer.
			  */
			  buf_len = sprintf(uart_buf,"Master Receive Returned a problem\r\n");
 8000b4c:	4a37      	ldr	r2, [pc, #220]	; (8000c2c <tempSensorGetData+0x150>)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 fe74 	bl	8003840 <siprintf>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b5c:	e050      	b.n	8000c00 <tempSensorGetData+0x124>
			  /*
			   Move the bytes into value by shifting the two buffer values.

			   Convert to two's compliment by shifting it to two's compliment.
			   */
			  val = ((int16_t)buf[0] << 5) | (buf[1] >> 3);
 8000b5e:	2138      	movs	r1, #56	; 0x38
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	015b      	lsls	r3, r3, #5
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	214e      	movs	r1, #78	; 0x4e
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	801a      	strh	r2, [r3, #0]
			  if ( val > 0x7FF ) {
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	881a      	ldrh	r2, [r3, #0]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d305      	bcc.n	8000b94 <tempSensorGetData+0xb8>
				val |= 0xF000;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	187a      	adds	r2, r7, r1
 8000b8c:	8812      	ldrh	r2, [r2, #0]
 8000b8e:	4928      	ldr	r1, [pc, #160]	; (8000c30 <tempSensorGetData+0x154>)
 8000b90:	430a      	orrs	r2, r1
 8000b92:	801a      	strh	r2, [r3, #0]
			  /*
			   Convert value into unit celsius temperature

			   converting it to decimal format
			   */
			  temperature_celsius = val * 625;
 8000b94:	234e      	movs	r3, #78	; 0x4e
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	189b      	adds	r3, r3, r2
 8000ba4:	009a      	lsls	r2, r3, #2
 8000ba6:	189b      	adds	r3, r3, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fe41 	bl	8000830 <__aeabi_i2f>
 8000bae:	1c03      	adds	r3, r0, #0
 8000bb0:	647b      	str	r3, [r7, #68]	; 0x44
			  temperature_celsius /= 100;
 8000bb2:	4920      	ldr	r1, [pc, #128]	; (8000c34 <tempSensorGetData+0x158>)
 8000bb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000bb6:	f7ff fb55 	bl	8000264 <__aeabi_fdiv>
 8000bba:	1c03      	adds	r3, r0, #0
 8000bbc:	647b      	str	r3, [r7, #68]	; 0x44

			  /*
				Create the string to be printed by the UART to the computer
			   */
			  buf_len = sprintf(uart_buf,"[%u] %u.%u Celsius\r\n",TMP_ADDR,(unsigned int)temperature_celsius/100,(unsigned int)temperature_celsius%100);
 8000bbe:	2354      	movs	r3, #84	; 0x54
 8000bc0:	2260      	movs	r2, #96	; 0x60
 8000bc2:	189b      	adds	r3, r3, r2
 8000bc4:	19db      	adds	r3, r3, r7
 8000bc6:	781c      	ldrb	r4, [r3, #0]
 8000bc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000bca:	f7ff fb33 	bl	8000234 <__aeabi_f2uiz>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	2164      	movs	r1, #100	; 0x64
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff faa2 	bl	800011c <__udivsi3>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001d      	movs	r5, r3
 8000bdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000bde:	f7ff fb29 	bl	8000234 <__aeabi_f2uiz>
 8000be2:	0003      	movs	r3, r0
 8000be4:	2164      	movs	r1, #100	; 0x64
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fb1e 	bl	8000228 <__aeabi_uidivmod>
 8000bec:	000b      	movs	r3, r1
 8000bee:	4912      	ldr	r1, [pc, #72]	; (8000c38 <tempSensorGetData+0x15c>)
 8000bf0:	1d38      	adds	r0, r7, #4
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	002b      	movs	r3, r5
 8000bf6:	0022      	movs	r2, r4
 8000bf8:	f002 fe22 	bl	8003840 <siprintf>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
		  }

		  /*
		   Transmit the correct message out through UART
		   */
		  HAL_UART_Transmit(&huart1, uart_buf, buf_len, HAL_MAX_DELAY);
 8000c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	1d39      	adds	r1, r7, #4
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <tempSensorGetData+0x160>)
 8000c0c:	f002 f9cc 	bl	8002fa8 <HAL_UART_Transmit>

}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b014      	add	sp, #80	; 0x50
 8000c16:	bcb0      	pop	{r4, r5, r7}
 8000c18:	bc08      	pop	{r3}
 8000c1a:	b004      	add	sp, #16
 8000c1c:	4718      	bx	r3
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	080041fc 	.word	0x080041fc
 8000c24:	2000008c 	.word	0x2000008c
 8000c28:	08004118 	.word	0x08004118
 8000c2c:	08004140 	.word	0x08004140
 8000c30:	fffff000 	.word	0xfffff000
 8000c34:	42c80000 	.word	0x42c80000
 8000c38:	08004164 	.word	0x08004164
 8000c3c:	200000e0 	.word	0x200000e0

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b0b4      	sub	sp, #208	; 0xd0
 8000c44:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c46:	f000 fb09 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4a:	f000 f885 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 f957 	bl	8000f00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c52:	f000 f925 	bl	8000ea0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000c56:	f000 f8e3 	bl	8000e20 <MX_I2C1_Init>
    /* USER CODE END WHILE */

	  /*
	   Method to find and transmit the data for a specific temp sensor.
	   */
	  tempSensorGetData(hi2c1,TMP48_ADDR, huart1);
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <main+0x100>)
 8000c5c:	781d      	ldrb	r5, [r3, #0]
 8000c5e:	4c39      	ldr	r4, [pc, #228]	; (8000d44 <main+0x104>)
 8000c60:	4a39      	ldr	r2, [pc, #228]	; (8000d48 <main+0x108>)
 8000c62:	2348      	movs	r3, #72	; 0x48
 8000c64:	446b      	add	r3, sp
 8000c66:	0018      	movs	r0, r3
 8000c68:	0011      	movs	r1, r2
 8000c6a:	2388      	movs	r3, #136	; 0x88
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	f002 fdd5 	bl	800381c <memcpy>
 8000c72:	9511      	str	r5, [sp, #68]	; 0x44
 8000c74:	466b      	mov	r3, sp
 8000c76:	0018      	movs	r0, r3
 8000c78:	0023      	movs	r3, r4
 8000c7a:	3310      	adds	r3, #16
 8000c7c:	2244      	movs	r2, #68	; 0x44
 8000c7e:	0019      	movs	r1, r3
 8000c80:	f002 fdcc 	bl	800381c <memcpy>
 8000c84:	6820      	ldr	r0, [r4, #0]
 8000c86:	6861      	ldr	r1, [r4, #4]
 8000c88:	68a2      	ldr	r2, [r4, #8]
 8000c8a:	68e3      	ldr	r3, [r4, #12]
 8000c8c:	f7ff ff26 	bl	8000adc <tempSensorGetData>

	  tempSensorGetData(hi2c1,TMP49_ADDR, huart1);
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <main+0x10c>)
 8000c92:	781d      	ldrb	r5, [r3, #0]
 8000c94:	4c2b      	ldr	r4, [pc, #172]	; (8000d44 <main+0x104>)
 8000c96:	4a2c      	ldr	r2, [pc, #176]	; (8000d48 <main+0x108>)
 8000c98:	2348      	movs	r3, #72	; 0x48
 8000c9a:	446b      	add	r3, sp
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	2388      	movs	r3, #136	; 0x88
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	f002 fdba 	bl	800381c <memcpy>
 8000ca8:	9511      	str	r5, [sp, #68]	; 0x44
 8000caa:	466b      	mov	r3, sp
 8000cac:	0018      	movs	r0, r3
 8000cae:	0023      	movs	r3, r4
 8000cb0:	3310      	adds	r3, #16
 8000cb2:	2244      	movs	r2, #68	; 0x44
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	f002 fdb1 	bl	800381c <memcpy>
 8000cba:	6820      	ldr	r0, [r4, #0]
 8000cbc:	6861      	ldr	r1, [r4, #4]
 8000cbe:	68a2      	ldr	r2, [r4, #8]
 8000cc0:	68e3      	ldr	r3, [r4, #12]
 8000cc2:	f7ff ff0b 	bl	8000adc <tempSensorGetData>

	  tempSensorGetData(hi2c1,TMP4A_ADDR, huart1);
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <main+0x110>)
 8000cc8:	781d      	ldrb	r5, [r3, #0]
 8000cca:	4c1e      	ldr	r4, [pc, #120]	; (8000d44 <main+0x104>)
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <main+0x108>)
 8000cce:	2348      	movs	r3, #72	; 0x48
 8000cd0:	446b      	add	r3, sp
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	2388      	movs	r3, #136	; 0x88
 8000cd8:	001a      	movs	r2, r3
 8000cda:	f002 fd9f 	bl	800381c <memcpy>
 8000cde:	9511      	str	r5, [sp, #68]	; 0x44
 8000ce0:	466b      	mov	r3, sp
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	3310      	adds	r3, #16
 8000ce8:	2244      	movs	r2, #68	; 0x44
 8000cea:	0019      	movs	r1, r3
 8000cec:	f002 fd96 	bl	800381c <memcpy>
 8000cf0:	6820      	ldr	r0, [r4, #0]
 8000cf2:	6861      	ldr	r1, [r4, #4]
 8000cf4:	68a2      	ldr	r2, [r4, #8]
 8000cf6:	68e3      	ldr	r3, [r4, #12]
 8000cf8:	f7ff fef0 	bl	8000adc <tempSensorGetData>

	  tempSensorGetData(hi2c1,TMP4B_ADDR, huart1);
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <main+0x114>)
 8000cfe:	781d      	ldrb	r5, [r3, #0]
 8000d00:	4c10      	ldr	r4, [pc, #64]	; (8000d44 <main+0x104>)
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <main+0x108>)
 8000d04:	2348      	movs	r3, #72	; 0x48
 8000d06:	446b      	add	r3, sp
 8000d08:	0018      	movs	r0, r3
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	2388      	movs	r3, #136	; 0x88
 8000d0e:	001a      	movs	r2, r3
 8000d10:	f002 fd84 	bl	800381c <memcpy>
 8000d14:	9511      	str	r5, [sp, #68]	; 0x44
 8000d16:	466b      	mov	r3, sp
 8000d18:	0018      	movs	r0, r3
 8000d1a:	0023      	movs	r3, r4
 8000d1c:	3310      	adds	r3, #16
 8000d1e:	2244      	movs	r2, #68	; 0x44
 8000d20:	0019      	movs	r1, r3
 8000d22:	f002 fd7b 	bl	800381c <memcpy>
 8000d26:	6820      	ldr	r0, [r4, #0]
 8000d28:	6861      	ldr	r1, [r4, #4]
 8000d2a:	68a2      	ldr	r2, [r4, #8]
 8000d2c:	68e3      	ldr	r3, [r4, #12]
 8000d2e:	f7ff fed5 	bl	8000adc <tempSensorGetData>

	  /*
	   Have the loop recur every  second to reduce rate of temperature output especially with 4 pieces of data.
	   */
	  HAL_Delay(1000);
 8000d32:	23fa      	movs	r3, #250	; 0xfa
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 faf4 	bl	8001324 <HAL_Delay>
	  tempSensorGetData(hi2c1,TMP48_ADDR, huart1);
 8000d3c:	e78d      	b.n	8000c5a <main+0x1a>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	080041fd 	.word	0x080041fd
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	200000e0 	.word	0x200000e0
 8000d4c:	080041fe 	.word	0x080041fe
 8000d50:	080041ff 	.word	0x080041ff
 8000d54:	08004200 	.word	0x08004200

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b097      	sub	sp, #92	; 0x5c
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	2428      	movs	r4, #40	; 0x28
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	0018      	movs	r0, r3
 8000d64:	2330      	movs	r3, #48	; 0x30
 8000d66:	001a      	movs	r2, r3
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f002 fd60 	bl	800382e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6e:	2318      	movs	r3, #24
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	0018      	movs	r0, r3
 8000d74:	2310      	movs	r3, #16
 8000d76:	001a      	movs	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f002 fd58 	bl	800382e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f002 fd51 	bl	800382e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8c:	0021      	movs	r1, r4
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2202      	movs	r2, #2
 8000d92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2201      	movs	r2, #1
 8000d98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2202      	movs	r2, #2
 8000da4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	22a0      	movs	r2, #160	; 0xa0
 8000db0:	0392      	lsls	r2, r2, #14
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 fb63 	bl	8002488 <HAL_RCC_OscConfig>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f905 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	2118      	movs	r1, #24
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2207      	movs	r2, #7
 8000dd0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2101      	movs	r1, #1
 8000de8:	0018      	movs	r0, r3
 8000dea:	f001 fe67 	bl	8002abc <HAL_RCC_ClockConfig>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000df2:	f000 f8ef 	bl	8000fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2221      	movs	r2, #33	; 0x21
 8000dfa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f001 ff9a 	bl	8002d44 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e14:	f000 f8de 	bl	8000fd4 <Error_Handler>
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b017      	add	sp, #92	; 0x5c
 8000e1e:	bd90      	pop	{r4, r7, pc}

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_I2C1_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_I2C1_Init+0x7c>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 fcc7 	bl	80017f0 <HAL_I2C_Init>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e66:	f000 f8b5 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 fa72 	bl	8002358 <HAL_I2CEx_ConfigAnalogFilter>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f000 f8ac 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <MX_I2C1_Init+0x74>)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fab5 	bl	80023f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 f8a3 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	2000090e 	.word	0x2000090e

08000ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_USART1_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000eac:	22e1      	movs	r2, #225	; 0xe1
 8000eae:	0252      	lsls	r2, r2, #9
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <MX_USART1_UART_Init+0x58>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f002 f80b 	bl	8002f00 <HAL_UART_Init>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 f871 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000e0 	.word	0x200000e0
 8000efc:	40013800 	.word	0x40013800

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	240c      	movs	r4, #12
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2314      	movs	r3, #20
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	f002 fc8c 	bl	800382e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0289      	lsls	r1, r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0309      	lsls	r1, r1, #12
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	031b      	lsls	r3, r3, #12
 8000f48:	4013      	ands	r3, r2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	02c9      	lsls	r1, r1, #11
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_GPIO_Init+0xcc>)
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	02db      	lsls	r3, r3, #11
 8000f64:	4013      	ands	r3, r2
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	0019      	movs	r1, r3
 8000f74:	f000 fc1e 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2290      	movs	r2, #144	; 0x90
 8000f82:	0352      	lsls	r2, r2, #13
 8000f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	193a      	adds	r2, r7, r4
 8000f8e:	2390      	movs	r3, #144	; 0x90
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 fa9d 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	22c0      	movs	r2, #192	; 0xc0
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0xd0>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f000 fa89 	bl	80014d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b009      	add	sp, #36	; 0x24
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000800 	.word	0x48000800

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x44>)
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_MspInit+0x44>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x44>)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x44>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_MspInit+0x44>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2414      	movs	r4, #20
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2314      	movs	r3, #20
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f002 fbf7 	bl	800382e <memset>
  if(hi2c->Instance==I2C1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_I2C_MspInit+0x90>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d131      	bne.n	80010ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_I2C_MspInit+0x94>)
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_I2C_MspInit+0x94>)
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	02c9      	lsls	r1, r1, #11
 8001054:	430a      	orrs	r2, r1
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_I2C_MspInit+0x94>)
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	02db      	lsls	r3, r3, #11
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	22c0      	movs	r2, #192	; 0xc0
 800106c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2212      	movs	r2, #18
 8001072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2203      	movs	r2, #3
 800107e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2201      	movs	r2, #1
 8001084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	187b      	adds	r3, r7, r1
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <HAL_I2C_MspInit+0x98>)
 800108a:	0019      	movs	r1, r3
 800108c:	0010      	movs	r0, r2
 800108e:	f000 fa21 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_I2C_MspInit+0x94>)
 8001094:	69da      	ldr	r2, [r3, #28]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0x94>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0389      	lsls	r1, r1, #14
 800109c:	430a      	orrs	r2, r1
 800109e:	61da      	str	r2, [r3, #28]
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0x94>)
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	039b      	lsls	r3, r3, #14
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b00b      	add	sp, #44	; 0x2c
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b08b      	sub	sp, #44	; 0x2c
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	2414      	movs	r4, #20
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	0018      	movs	r0, r3
 80010d2:	2314      	movs	r3, #20
 80010d4:	001a      	movs	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	f002 fba9 	bl	800382e <memset>
  if(huart->Instance==USART1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <HAL_UART_MspInit+0x94>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d133      	bne.n	800114e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_UART_MspInit+0x98>)
 80010e8:	699a      	ldr	r2, [r3, #24]
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_UART_MspInit+0x98>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	01c9      	lsls	r1, r1, #7
 80010f0:	430a      	orrs	r2, r1
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_UART_MspInit+0x98>)
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	01db      	lsls	r3, r3, #7
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_UART_MspInit+0x98>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0x98>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0289      	lsls	r1, r1, #10
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_UART_MspInit+0x98>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	029b      	lsls	r3, r3, #10
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	22c0      	movs	r2, #192	; 0xc0
 8001122:	00d2      	lsls	r2, r2, #3
 8001124:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	0021      	movs	r1, r4
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2202      	movs	r2, #2
 800112c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2203      	movs	r2, #3
 8001138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2201      	movs	r2, #1
 800113e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	187a      	adds	r2, r7, r1
 8001142:	2390      	movs	r3, #144	; 0x90
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f000 f9c3 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b00b      	add	sp, #44	; 0x2c
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40013800 	.word	0x40013800
 800115c:	40021000 	.word	0x40021000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f8b2 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f002 fb02 	bl	80037c8 <__errno>
 80011c4:	0003      	movs	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	425b      	negs	r3, r3
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	18d2      	adds	r2, r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20002000 	.word	0x20002000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000168 	.word	0x20000168
 80011f8:	20000180 	.word	0x20000180

080011fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800120c:	f7ff fff6 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001236:	f002 facd 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123a:	f7ff fd01 	bl	8000c40 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   r0, =_estack
 8001240:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800124c:	08004278 	.word	0x08004278
  ldr r2, =_sbss
 8001250:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001254:	20000180 	.word	0x20000180

08001258 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_COMP_IRQHandler>
	...

0800125c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_Init+0x24>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_Init+0x24>)
 8001266:	2110      	movs	r1, #16
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 f809 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001272:	f7ff feb5 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_InitTick+0x5c>)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_InitTick+0x60>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	0019      	movs	r1, r3
 8001296:	23fa      	movs	r3, #250	; 0xfa
 8001298:	0098      	lsls	r0, r3, #2
 800129a:	f7fe ff3f 	bl	800011c <__udivsi3>
 800129e:	0003      	movs	r3, r0
 80012a0:	0019      	movs	r1, r3
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7fe ff3a 	bl	800011c <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f905 	bl	80014ba <HAL_SYSTICK_Config>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00f      	b.n	80012d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d80b      	bhi.n	80012d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	2301      	movs	r3, #1
 80012c2:	425b      	negs	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f8e2 	bl	8001490 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_InitTick+0x64>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b003      	add	sp, #12
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x1c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	001a      	movs	r2, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x20>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	18d2      	adds	r2, r2, r3
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_IncTick+0x20>)
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	20000008 	.word	0x20000008
 800130c:	2000016c 	.word	0x2000016c

08001310 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_GetTick+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	2000016c 	.word	0x2000016c

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff fff0 	bl	8001310 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	001a      	movs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	189b      	adds	r3, r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	f7ff ffe0 	bl	8001310 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000008 	.word	0x20000008

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b7f      	cmp	r3, #127	; 0x7f
 8001380:	d828      	bhi.n	80013d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <__NVIC_SetPriority+0xd4>)
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b25b      	sxtb	r3, r3
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	33c0      	adds	r3, #192	; 0xc0
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	589b      	ldr	r3, [r3, r2]
 8001392:	1dfa      	adds	r2, r7, #7
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	0011      	movs	r1, r2
 8001398:	2203      	movs	r2, #3
 800139a:	400a      	ands	r2, r1
 800139c:	00d2      	lsls	r2, r2, #3
 800139e:	21ff      	movs	r1, #255	; 0xff
 80013a0:	4091      	lsls	r1, r2
 80013a2:	000a      	movs	r2, r1
 80013a4:	43d2      	mvns	r2, r2
 80013a6:	401a      	ands	r2, r3
 80013a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	401a      	ands	r2, r3
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	0018      	movs	r0, r3
 80013b8:	2303      	movs	r3, #3
 80013ba:	4003      	ands	r3, r0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c0:	481f      	ldr	r0, [pc, #124]	; (8001440 <__NVIC_SetPriority+0xd4>)
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	430a      	orrs	r2, r1
 80013cc:	33c0      	adds	r3, #192	; 0xc0
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013d2:	e031      	b.n	8001438 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <__NVIC_SetPriority+0xd8>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0019      	movs	r1, r3
 80013dc:	230f      	movs	r3, #15
 80013de:	400b      	ands	r3, r1
 80013e0:	3b08      	subs	r3, #8
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3306      	adds	r3, #6
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	18d3      	adds	r3, r2, r3
 80013ea:	3304      	adds	r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1dfa      	adds	r2, r7, #7
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	0011      	movs	r1, r2
 80013f4:	2203      	movs	r2, #3
 80013f6:	400a      	ands	r2, r1
 80013f8:	00d2      	lsls	r2, r2, #3
 80013fa:	21ff      	movs	r1, #255	; 0xff
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	43d2      	mvns	r2, r2
 8001402:	401a      	ands	r2, r3
 8001404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	019b      	lsls	r3, r3, #6
 800140a:	22ff      	movs	r2, #255	; 0xff
 800140c:	401a      	ands	r2, r3
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	2303      	movs	r3, #3
 8001416:	4003      	ands	r3, r0
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <__NVIC_SetPriority+0xd8>)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	001c      	movs	r4, r3
 8001424:	230f      	movs	r3, #15
 8001426:	4023      	ands	r3, r4
 8001428:	3b08      	subs	r3, #8
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	430a      	orrs	r2, r1
 800142e:	3306      	adds	r3, #6
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	18c3      	adds	r3, r0, r3
 8001434:	3304      	adds	r3, #4
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b003      	add	sp, #12
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	045b      	lsls	r3, r3, #17
 8001458:	429a      	cmp	r2, r3
 800145a:	d301      	bcc.n	8001460 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145c:	2301      	movs	r3, #1
 800145e:	e010      	b.n	8001482 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <SysTick_Config+0x44>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	3a01      	subs	r2, #1
 8001466:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001468:	2301      	movs	r3, #1
 800146a:	425b      	negs	r3, r3
 800146c:	2103      	movs	r1, #3
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff ff7c 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x44>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	210f      	movs	r1, #15
 800149c:	187b      	adds	r3, r7, r1
 800149e:	1c02      	adds	r2, r0, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ffbf 	bl	8001448 <SysTick_Config>
 80014ca:	0003      	movs	r3, r0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e14f      	b.n	8001784 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4091      	lsls	r1, r2
 80014ee:	000a      	movs	r2, r1
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <HAL_GPIO_Init+0x28>
 80014fa:	e140      	b.n	800177e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	409a      	lsls	r2, r3
 8001522:	0013      	movs	r3, r2
 8001524:	43da      	mvns	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	2201      	movs	r2, #1
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	4013      	ands	r3, r2
 800157e:	2b03      	cmp	r3, #3
 8001580:	d017      	beq.n	80015b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	58d3      	ldr	r3, [r2, r3]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2207      	movs	r2, #7
 80015d0:	4013      	ands	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2107      	movs	r1, #7
 80015ea:	400b      	ands	r3, r1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	6939      	ldr	r1, [r7, #16]
 8001604:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	401a      	ands	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	029b      	lsls	r3, r3, #10
 8001642:	4013      	ands	r3, r2
 8001644:	d100      	bne.n	8001648 <HAL_GPIO_Init+0x174>
 8001646:	e09a      	b.n	800177e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	619a      	str	r2, [r3, #24]
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001660:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	589b      	ldr	r3, [r3, r2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2203      	movs	r2, #3
 8001672:	4013      	ands	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	43da      	mvns	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	2390      	movs	r3, #144	; 0x90
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	429a      	cmp	r2, r3
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x1e2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <HAL_GPIO_Init+0x2d0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x1de>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a43      	ldr	r2, [pc, #268]	; (80017a8 <HAL_GPIO_Init+0x2d4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x1da>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a42      	ldr	r2, [pc, #264]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x1d6>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x1e4>
 80016b6:	2300      	movs	r3, #0
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	2103      	movs	r1, #3
 80016bc:	400a      	ands	r2, r1
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	035b      	lsls	r3, r3, #13
 80016ee:	4013      	ands	r3, r2
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43da      	mvns	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	039b      	lsls	r3, r3, #14
 8001718:	4013      	ands	r3, r2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	4013      	ands	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	40da      	lsrs	r2, r3
 800178c:	1e13      	subs	r3, r2, #0
 800178e:	d000      	beq.n	8001792 <HAL_GPIO_Init+0x2be>
 8001790:	e6a8      	b.n	80014e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b006      	add	sp, #24
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000800 	.word	0x48000800
 80017ac:	48000c00 	.word	0x48000c00
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	0008      	movs	r0, r1
 80017be:	0011      	movs	r1, r2
 80017c0:	1cbb      	adds	r3, r7, #2
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	1c7b      	adds	r3, r7, #1
 80017c8:	1c0a      	adds	r2, r1, #0
 80017ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017cc:	1c7b      	adds	r3, r7, #1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d4:	1cbb      	adds	r3, r7, #2
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017de:	1cbb      	adds	r3, r7, #2
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e08f      	b.n	8001922 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2241      	movs	r2, #65	; 0x41
 8001806:	5c9b      	ldrb	r3, [r3, r2]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	2100      	movs	r1, #0
 8001814:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff fc05 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2241      	movs	r2, #65	; 0x41
 8001822:	2124      	movs	r1, #36	; 0x24
 8001824:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	438a      	bics	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	493b      	ldr	r1, [pc, #236]	; (800192c <HAL_I2C_Init+0x13c>)
 8001840:	400a      	ands	r2, r1
 8001842:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4938      	ldr	r1, [pc, #224]	; (8001930 <HAL_I2C_Init+0x140>)
 8001850:	400a      	ands	r2, r1
 8001852:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0209      	lsls	r1, r1, #8
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e007      	b.n	800187e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2184      	movs	r1, #132	; 0x84
 8001878:	0209      	lsls	r1, r1, #8
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d109      	bne.n	800189a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0109      	lsls	r1, r1, #4
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	e007      	b.n	80018aa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4923      	ldr	r1, [pc, #140]	; (8001934 <HAL_I2C_Init+0x144>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4920      	ldr	r1, [pc, #128]	; (8001938 <HAL_I2C_Init+0x148>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	491a      	ldr	r1, [pc, #104]	; (8001930 <HAL_I2C_Init+0x140>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69d9      	ldr	r1, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2241      	movs	r2, #65	; 0x41
 800190e:	2120      	movs	r1, #32
 8001910:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2242      	movs	r2, #66	; 0x42
 800191c:	2100      	movs	r1, #0
 800191e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	f0ffffff 	.word	0xf0ffffff
 8001930:	ffff7fff 	.word	0xffff7fff
 8001934:	fffff7ff 	.word	0xfffff7ff
 8001938:	02008000 	.word	0x02008000

0800193c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	0008      	movs	r0, r1
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	0019      	movs	r1, r3
 800194a:	230a      	movs	r3, #10
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	1c02      	adds	r2, r0, #0
 8001950:	801a      	strh	r2, [r3, #0]
 8001952:	2308      	movs	r3, #8
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	1c0a      	adds	r2, r1, #0
 8001958:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2241      	movs	r2, #65	; 0x41
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	d000      	beq.n	8001968 <HAL_I2C_Master_Transmit+0x2c>
 8001966:	e10a      	b.n	8001b7e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_I2C_Master_Transmit+0x3a>
 8001972:	2302      	movs	r3, #2
 8001974:	e104      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x244>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800197e:	f7ff fcc7 	bl	8001310 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	0219      	lsls	r1, r3, #8
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2319      	movs	r3, #25
 8001992:	2201      	movs	r2, #1
 8001994:	f000 fa26 	bl	8001de4 <I2C_WaitOnFlagUntilTimeout>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0ef      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2241      	movs	r2, #65	; 0x41
 80019a4:	2121      	movs	r1, #33	; 0x21
 80019a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2242      	movs	r2, #66	; 0x42
 80019ac:	2110      	movs	r1, #16
 80019ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2208      	movs	r2, #8
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d906      	bls.n	80019e4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	22ff      	movs	r2, #255	; 0xff
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	045b      	lsls	r3, r3, #17
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e007      	b.n	80019f4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	049b      	lsls	r3, r3, #18
 80019f2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d027      	beq.n	8001a4c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	697c      	ldr	r4, [r7, #20]
 8001a38:	230a      	movs	r3, #10
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	8819      	ldrh	r1, [r3, #0]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <HAL_I2C_Master_Transmit+0x24c>)
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 fc4d 	bl	80022e4 <I2C_TransferConfig>
 8001a4a:	e06f      	b.n	8001b2c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	697c      	ldr	r4, [r7, #20]
 8001a54:	230a      	movs	r3, #10
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	8819      	ldrh	r1, [r3, #0]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_I2C_Master_Transmit+0x24c>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	0023      	movs	r3, r4
 8001a62:	f000 fc3f 	bl	80022e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a66:	e061      	b.n	8001b2c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fa10 	bl	8001e94 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e081      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03a      	beq.n	8001b2c <HAL_I2C_Master_Transmit+0x1f0>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d136      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	f000 f98a 	bl	8001de4 <I2C_WaitOnFlagUntilTimeout>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e053      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2bff      	cmp	r3, #255	; 0xff
 8001ae0:	d911      	bls.n	8001b06 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	22ff      	movs	r2, #255	; 0xff
 8001ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	045c      	lsls	r4, r3, #17
 8001af2:	230a      	movs	r3, #10
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	8819      	ldrh	r1, [r3, #0]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	2300      	movs	r3, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	0023      	movs	r3, r4
 8001b00:	f000 fbf0 	bl	80022e4 <I2C_TransferConfig>
 8001b04:	e012      	b.n	8001b2c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	049c      	lsls	r4, r3, #18
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	8819      	ldrh	r1, [r3, #0]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	2300      	movs	r3, #0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	0023      	movs	r3, r4
 8001b28:	f000 fbdc 	bl	80022e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d198      	bne.n	8001a68 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 f9ef 	bl	8001f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e01a      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	490b      	ldr	r1, [pc, #44]	; (8001b8c <HAL_I2C_Master_Transmit+0x250>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2241      	movs	r2, #65	; 0x41
 8001b66:	2120      	movs	r1, #32
 8001b68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2242      	movs	r2, #66	; 0x42
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001b7e:	2302      	movs	r3, #2
  }
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b007      	add	sp, #28
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	80002000 	.word	0x80002000
 8001b8c:	fe00e800 	.word	0xfe00e800

08001b90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	0008      	movs	r0, r1
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	1c02      	adds	r2, r0, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	1c0a      	adds	r2, r1, #0
 8001bac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2241      	movs	r2, #65	; 0x41
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d000      	beq.n	8001bbc <HAL_I2C_Master_Receive+0x2c>
 8001bba:	e0e8      	b.n	8001d8e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	5c9b      	ldrb	r3, [r3, r2]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_I2C_Master_Receive+0x3a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e0e2      	b.n	8001d90 <HAL_I2C_Master_Receive+0x200>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	2101      	movs	r1, #1
 8001bd0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bd2:	f7ff fb9d 	bl	8001310 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	0219      	lsls	r1, r3, #8
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2319      	movs	r3, #25
 8001be6:	2201      	movs	r2, #1
 8001be8:	f000 f8fc 	bl	8001de4 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0cd      	b.n	8001d90 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2241      	movs	r2, #65	; 0x41
 8001bf8:	2122      	movs	r1, #34	; 0x22
 8001bfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2242      	movs	r2, #66	; 0x42
 8001c00:	2110      	movs	r1, #16
 8001c02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2208      	movs	r2, #8
 8001c14:	18ba      	adds	r2, r7, r2
 8001c16:	8812      	ldrh	r2, [r2, #0]
 8001c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2bff      	cmp	r3, #255	; 0xff
 8001c28:	d911      	bls.n	8001c4e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	045c      	lsls	r4, r3, #17
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	8819      	ldrh	r1, [r3, #0]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <HAL_I2C_Master_Receive+0x208>)
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	0023      	movs	r3, r4
 8001c48:	f000 fb4c 	bl	80022e4 <I2C_TransferConfig>
 8001c4c:	e076      	b.n	8001d3c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	049c      	lsls	r4, r3, #18
 8001c62:	230a      	movs	r3, #10
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	8819      	ldrh	r1, [r3, #0]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <HAL_I2C_Master_Receive+0x208>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	0023      	movs	r3, r4
 8001c70:	f000 fb38 	bl	80022e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c74:	e062      	b.n	8001d3c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f993 	bl	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e082      	b.n	8001d90 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03a      	beq.n	8001d3c <HAL_I2C_Master_Receive+0x1ac>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d136      	bne.n	8001d3c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	f000 f882 	bl	8001de4 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e053      	b.n	8001d90 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d911      	bls.n	8001d16 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	22ff      	movs	r2, #255	; 0xff
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	045c      	lsls	r4, r3, #17
 8001d02:	230a      	movs	r3, #10
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	8819      	ldrh	r1, [r3, #0]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	0023      	movs	r3, r4
 8001d10:	f000 fae8 	bl	80022e4 <I2C_TransferConfig>
 8001d14:	e012      	b.n	8001d3c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	049c      	lsls	r4, r3, #18
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	8819      	ldrh	r1, [r3, #0]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	0023      	movs	r3, r4
 8001d38:	f000 fad4 	bl	80022e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d197      	bne.n	8001c76 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 f8e7 	bl	8001f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d52:	1e03      	subs	r3, r0, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e01a      	b.n	8001d90 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	490b      	ldr	r1, [pc, #44]	; (8001d9c <HAL_I2C_Master_Receive+0x20c>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2241      	movs	r2, #65	; 0x41
 8001d76:	2120      	movs	r1, #32
 8001d78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2242      	movs	r2, #66	; 0x42
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
  }
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b007      	add	sp, #28
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	80002400 	.word	0x80002400
 8001d9c:	fe00e800 	.word	0xfe00e800

08001da0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d103      	bne.n	8001dbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d007      	beq.n	8001ddc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
  }
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df4:	e03a      	b.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f971 	bl	80020e4 <I2C_IsErrorOccurred>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e040      	b.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	d02d      	beq.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e10:	f7ff fa7e 	bl	8001310 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d302      	bcc.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d122      	bne.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	425a      	negs	r2, r3
 8001e36:	4153      	adcs	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d113      	bne.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	2220      	movs	r2, #32
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2241      	movs	r2, #65	; 0x41
 8001e54:	2120      	movs	r1, #32
 8001e56:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2242      	movs	r2, #66	; 0x42
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e00f      	b.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4013      	ands	r3, r2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	425a      	negs	r2, r3
 8001e7c:	4153      	adcs	r3, r2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	001a      	movs	r2, r3
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d0b5      	beq.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ea0:	e032      	b.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f91b 	bl	80020e4 <I2C_IsErrorOccurred>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e030      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	d025      	beq.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7ff fa28 	bl	8001310 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11a      	bne.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d013      	beq.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2241      	movs	r2, #65	; 0x41
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2242      	movs	r2, #66	; 0x42
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e007      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d1c5      	bne.n	8001ea2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f2c:	e02f      	b.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 f8d5 	bl	80020e4 <I2C_IsErrorOccurred>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e02d      	b.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f42:	f7ff f9e5 	bl	8001310 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d302      	bcc.n	8001f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d11a      	bne.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d013      	beq.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2241      	movs	r2, #65	; 0x41
 8001f76:	2120      	movs	r1, #32
 8001f78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2242      	movs	r2, #66	; 0x42
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e007      	b.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2220      	movs	r2, #32
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d1c8      	bne.n	8001f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2317      	movs	r3, #23
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001fbc:	e07b      	b.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f88d 	bl	80020e4 <I2C_IsErrorOccurred>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d003      	beq.n	8001fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8001fce:	2317      	movs	r3, #23
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d140      	bne.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8001fe4:	2117      	movs	r1, #23
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d13b      	bne.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d106      	bne.n	800200a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2210      	movs	r2, #16
 8002012:	4013      	ands	r3, r2
 8002014:	2b10      	cmp	r3, #16
 8002016:	d123      	bne.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2210      	movs	r2, #16
 800201e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2204      	movs	r2, #4
 8002024:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2220      	movs	r2, #32
 800202c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4929      	ldr	r1, [pc, #164]	; (80020e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800203a:	400a      	ands	r2, r1
 800203c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	2120      	movs	r1, #32
 8002044:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2242      	movs	r2, #66	; 0x42
 800204a:	2100      	movs	r1, #0
 800204c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002056:	2317      	movs	r3, #23
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e002      	b.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002066:	f7ff f953 	bl	8001310 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d302      	bcc.n	800207c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11c      	bne.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800207c:	2017      	movs	r0, #23
 800207e:	183b      	adds	r3, r7, r0
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d117      	bne.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	2b04      	cmp	r3, #4
 8002092:	d010      	beq.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	2220      	movs	r2, #32
 800209a:	431a      	orrs	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2241      	movs	r2, #65	; 0x41
 80020a4:	2120      	movs	r1, #32
 80020a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80020b0:	183b      	adds	r3, r7, r0
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d005      	beq.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80020c4:	2317      	movs	r3, #23
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d100      	bne.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80020ce:	e776      	b.n	8001fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80020d0:	2317      	movs	r3, #23
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b006      	add	sp, #24
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	fe00e800 	.word	0xfe00e800

080020e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2327      	movs	r3, #39	; 0x27
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2210      	movs	r2, #16
 800210c:	4013      	ands	r3, r2
 800210e:	d100      	bne.n	8002112 <I2C_IsErrorOccurred+0x2e>
 8002110:	e082      	b.n	8002218 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2210      	movs	r2, #16
 8002118:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800211a:	e060      	b.n	80021de <I2C_IsErrorOccurred+0xfa>
 800211c:	2427      	movs	r4, #39	; 0x27
 800211e:	193b      	adds	r3, r7, r4
 8002120:	193a      	adds	r2, r7, r4
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	d058      	beq.n	80021de <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800212c:	f7ff f8f0 	bl	8001310 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d306      	bcc.n	800214a <I2C_IsErrorOccurred+0x66>
 800213c:	193b      	adds	r3, r7, r4
 800213e:	193a      	adds	r2, r7, r4
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d149      	bne.n	80021de <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	01db      	lsls	r3, r3, #7
 8002154:	4013      	ands	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002158:	2013      	movs	r0, #19
 800215a:	183b      	adds	r3, r7, r0
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	2142      	movs	r1, #66	; 0x42
 8002160:	5c52      	ldrb	r2, [r2, r1]
 8002162:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	401a      	ands	r2, r3
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	429a      	cmp	r2, r3
 8002176:	d126      	bne.n	80021c6 <I2C_IsErrorOccurred+0xe2>
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	01db      	lsls	r3, r3, #7
 800217e:	429a      	cmp	r2, r3
 8002180:	d021      	beq.n	80021c6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002182:	183b      	adds	r3, r7, r0
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b20      	cmp	r3, #32
 8002188:	d01d      	beq.n	80021c6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	01c9      	lsls	r1, r1, #7
 8002198:	430a      	orrs	r2, r1
 800219a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800219c:	f7ff f8b8 	bl	8001310 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a4:	e00f      	b.n	80021c6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021a6:	f7ff f8b3 	bl	8001310 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b19      	cmp	r3, #25
 80021b2:	d908      	bls.n	80021c6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	2220      	movs	r2, #32
 80021b8:	4313      	orrs	r3, r2
 80021ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021bc:	2327      	movs	r3, #39	; 0x27
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]

              break;
 80021c4:	e00b      	b.n	80021de <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2220      	movs	r2, #32
 80021ce:	4013      	ands	r3, r2
 80021d0:	2127      	movs	r1, #39	; 0x27
 80021d2:	187a      	adds	r2, r7, r1
 80021d4:	1879      	adds	r1, r7, r1
 80021d6:	7809      	ldrb	r1, [r1, #0]
 80021d8:	7011      	strb	r1, [r2, #0]
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d1e3      	bne.n	80021a6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2220      	movs	r2, #32
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d004      	beq.n	80021f6 <I2C_IsErrorOccurred+0x112>
 80021ec:	2327      	movs	r3, #39	; 0x27
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d092      	beq.n	800211c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021f6:	2327      	movs	r3, #39	; 0x27
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d103      	bne.n	8002208 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2220      	movs	r2, #32
 8002206:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	2204      	movs	r2, #4
 800220c:	4313      	orrs	r3, r2
 800220e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002210:	2327      	movs	r3, #39	; 0x27
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d00c      	beq.n	8002244 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2201      	movs	r2, #1
 800222e:	4313      	orrs	r3, r2
 8002230:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0052      	lsls	r2, r2, #1
 800223a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800223c:	2327      	movs	r3, #39	; 0x27
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4013      	ands	r3, r2
 800224c:	d00c      	beq.n	8002268 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2208      	movs	r2, #8
 8002252:	4313      	orrs	r3, r2
 8002254:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	00d2      	lsls	r2, r2, #3
 800225e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002260:	2327      	movs	r3, #39	; 0x27
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d00c      	beq.n	800228c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2202      	movs	r2, #2
 8002276:	4313      	orrs	r3, r2
 8002278:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002284:	2327      	movs	r3, #39	; 0x27
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800228c:	2327      	movs	r3, #39	; 0x27
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01d      	beq.n	80022d2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff fd81 	bl	8001da0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	490d      	ldr	r1, [pc, #52]	; (80022e0 <I2C_IsErrorOccurred+0x1fc>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2241      	movs	r2, #65	; 0x41
 80022be:	2120      	movs	r1, #32
 80022c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2242      	movs	r2, #66	; 0x42
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2240      	movs	r2, #64	; 0x40
 80022ce:	2100      	movs	r1, #0
 80022d0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80022d2:	2327      	movs	r3, #39	; 0x27
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b00b      	add	sp, #44	; 0x2c
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	fe00e800 	.word	0xfe00e800

080022e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	0008      	movs	r0, r1
 80022ee:	0011      	movs	r1, r2
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	240a      	movs	r4, #10
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	1c02      	adds	r2, r0, #0
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	2009      	movs	r0, #9
 80022fc:	183b      	adds	r3, r7, r0
 80022fe:	1c0a      	adds	r2, r1, #0
 8002300:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002302:	193b      	adds	r3, r7, r4
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	059b      	lsls	r3, r3, #22
 8002308:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800230a:	183b      	adds	r3, r7, r0
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	0419      	lsls	r1, r3, #16
 8002310:	23ff      	movs	r3, #255	; 0xff
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002316:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	4313      	orrs	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800232e:	0d51      	lsrs	r1, r2, #21
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	00d2      	lsls	r2, r2, #3
 8002334:	400a      	ands	r2, r1
 8002336:	4907      	ldr	r1, [pc, #28]	; (8002354 <I2C_TransferConfig+0x70>)
 8002338:	430a      	orrs	r2, r1
 800233a:	43d2      	mvns	r2, r2
 800233c:	401a      	ands	r2, r3
 800233e:	0011      	movs	r1, r2
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b007      	add	sp, #28
 8002350:	bd90      	pop	{r4, r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	03ff63ff 	.word	0x03ff63ff

08002358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2241      	movs	r2, #65	; 0x41
 8002366:	5c9b      	ldrb	r3, [r3, r2]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	d138      	bne.n	80023e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	5c9b      	ldrb	r3, [r3, r2]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002378:	2302      	movs	r3, #2
 800237a:	e032      	b.n	80023e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	2101      	movs	r1, #1
 8002382:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2241      	movs	r2, #65	; 0x41
 8002388:	2124      	movs	r1, #36	; 0x24
 800238a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	438a      	bics	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4911      	ldr	r1, [pc, #68]	; (80023ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2241      	movs	r2, #65	; 0x41
 80023d0:	2120      	movs	r1, #32
 80023d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	2100      	movs	r1, #0
 80023da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
  }
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	ffffefff 	.word	0xffffefff

080023f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2241      	movs	r2, #65	; 0x41
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b20      	cmp	r3, #32
 8002404:	d139      	bne.n	800247a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002410:	2302      	movs	r3, #2
 8002412:	e033      	b.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2241      	movs	r2, #65	; 0x41
 8002420:	2124      	movs	r1, #36	; 0x24
 8002422:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2241      	movs	r2, #65	; 0x41
 800246a:	2120      	movs	r1, #32
 800246c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
  }
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}
 8002484:	fffff0ff 	.word	0xfffff0ff

08002488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e301      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1e>
 80024a4:	e08d      	b.n	80025c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024a6:	4bc3      	ldr	r3, [pc, #780]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	220c      	movs	r2, #12
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d00e      	beq.n	80024d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b2:	4bc0      	ldr	r3, [pc, #768]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	220c      	movs	r2, #12
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d116      	bne.n	80024ec <HAL_RCC_OscConfig+0x64>
 80024be:	4bbd      	ldr	r3, [pc, #756]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	401a      	ands	r2, r3
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	025b      	lsls	r3, r3, #9
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	4bb8      	ldr	r3, [pc, #736]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x56>
 80024dc:	e070      	b.n	80025c0 <HAL_RCC_OscConfig+0x138>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d000      	beq.n	80024e8 <HAL_RCC_OscConfig+0x60>
 80024e6:	e06b      	b.n	80025c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e2d8      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x7c>
 80024f4:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4bae      	ldr	r3, [pc, #696]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	0249      	lsls	r1, r1, #9
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e02f      	b.n	8002564 <HAL_RCC_OscConfig+0xdc>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x9e>
 800250c:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002512:	49a9      	ldr	r1, [pc, #676]	; (80027b8 <HAL_RCC_OscConfig+0x330>)
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4ba5      	ldr	r3, [pc, #660]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800251e:	49a7      	ldr	r1, [pc, #668]	; (80027bc <HAL_RCC_OscConfig+0x334>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e01e      	b.n	8002564 <HAL_RCC_OscConfig+0xdc>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d10e      	bne.n	800254c <HAL_RCC_OscConfig+0xc4>
 800252e:	4ba1      	ldr	r3, [pc, #644]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	02c9      	lsls	r1, r1, #11
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	4b9d      	ldr	r3, [pc, #628]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b9c      	ldr	r3, [pc, #624]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0249      	lsls	r1, r1, #9
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xdc>
 800254c:	4b99      	ldr	r3, [pc, #612]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002552:	4999      	ldr	r1, [pc, #612]	; (80027b8 <HAL_RCC_OscConfig+0x330>)
 8002554:	400a      	ands	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4b96      	ldr	r3, [pc, #600]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b95      	ldr	r3, [pc, #596]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800255e:	4997      	ldr	r1, [pc, #604]	; (80027bc <HAL_RCC_OscConfig+0x334>)
 8002560:	400a      	ands	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d014      	beq.n	8002596 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fed0 	bl	8001310 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002576:	f7fe fecb 	bl	8001310 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	; 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e28a      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0xee>
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe febb 	bl	8001310 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe feb6 	bl	8001310 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e275      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	4b80      	ldr	r3, [pc, #512]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x118>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2202      	movs	r2, #2
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x146>
 80025cc:	e069      	b.n	80026a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025ce:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	220c      	movs	r2, #12
 80025d4:	4013      	ands	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025d8:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	220c      	movs	r2, #12
 80025de:	4013      	ands	r3, r2
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d11c      	bne.n	800261e <HAL_RCC_OscConfig+0x196>
 80025e4:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	4013      	ands	r3, r2
 80025ee:	d116      	bne.n	800261e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f0:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x17e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e24b      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	22f8      	movs	r2, #248	; 0xf8
 800260c:	4393      	bics	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	00da      	lsls	r2, r3, #3
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261c:	e041      	b.n	80026a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fe6d 	bl	8001310 <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe fe68 	bl	8001310 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e227      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d0f1      	beq.n	800263c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	22f8      	movs	r2, #248	; 0xf8
 800265e:	4393      	bics	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00da      	lsls	r2, r3, #3
 8002668:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fe48 	bl	8001310 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fe43 	bl	8001310 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e202      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f1      	bne.n	8002686 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2208      	movs	r2, #8
 80026a8:	4013      	ands	r3, r2
 80026aa:	d036      	beq.n	800271a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d019      	beq.n	80026e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b8:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe fe26 	bl	8001310 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fe21 	bl	8001310 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1e0      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d0f1      	beq.n	80026ca <HAL_RCC_OscConfig+0x242>
 80026e6:	e018      	b.n	800271a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	438a      	bics	r2, r1
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe0c 	bl	8001310 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fe07 	bl	8001310 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1c6      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d1f1      	bne.n	80026fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2204      	movs	r2, #4
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_RCC_OscConfig+0x29e>
 8002724:	e0b4      	b.n	8002890 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	201f      	movs	r0, #31
 8002728:	183b      	adds	r3, r7, r0
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	055b      	lsls	r3, r3, #21
 8002736:	4013      	ands	r3, r2
 8002738:	d110      	bne.n	800275c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0549      	lsls	r1, r1, #21
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	055b      	lsls	r3, r3, #21
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002756:	183b      	adds	r3, r7, r0
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_RCC_OscConfig+0x338>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d11a      	bne.n	800279e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCC_OscConfig+0x338>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	0049      	lsls	r1, r1, #1
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe fdcb 	bl	8001310 <HAL_GetTick>
 800277a:	0003      	movs	r3, r0
 800277c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fdc6 	bl	8001310 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e185      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_OscConfig+0x338>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10e      	bne.n	80027c4 <HAL_RCC_OscConfig+0x33c>
 80027a6:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	e035      	b.n	8002820 <HAL_RCC_OscConfig+0x398>
 80027b4:	40021000 	.word	0x40021000
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	fffbffff 	.word	0xfffbffff
 80027c0:	40007000 	.word	0x40007000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x35e>
 80027cc:	4bb6      	ldr	r3, [pc, #728]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	4bb5      	ldr	r3, [pc, #724]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	621a      	str	r2, [r3, #32]
 80027d8:	4bb3      	ldr	r3, [pc, #716]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	4bb2      	ldr	r3, [pc, #712]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027de:	2104      	movs	r1, #4
 80027e0:	438a      	bics	r2, r1
 80027e2:	621a      	str	r2, [r3, #32]
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x398>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x380>
 80027ee:	4bae      	ldr	r3, [pc, #696]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	4bad      	ldr	r3, [pc, #692]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027f4:	2104      	movs	r1, #4
 80027f6:	430a      	orrs	r2, r1
 80027f8:	621a      	str	r2, [r3, #32]
 80027fa:	4bab      	ldr	r3, [pc, #684]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	4baa      	ldr	r3, [pc, #680]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x398>
 8002808:	4ba7      	ldr	r3, [pc, #668]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	4ba6      	ldr	r3, [pc, #664]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	4ba4      	ldr	r3, [pc, #656]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	4ba3      	ldr	r3, [pc, #652]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800281a:	2104      	movs	r1, #4
 800281c:	438a      	bics	r2, r1
 800281e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d014      	beq.n	8002852 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7fe fd72 	bl	8001310 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e009      	b.n	8002846 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fd6d 	bl	8001310 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	4a9b      	ldr	r2, [pc, #620]	; (8002aac <HAL_RCC_OscConfig+0x624>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e12b      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	4b98      	ldr	r3, [pc, #608]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x3aa>
 8002850:	e013      	b.n	800287a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe fd5d 	bl	8001310 <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285a:	e009      	b.n	8002870 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fd58 	bl	8001310 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	4a91      	ldr	r2, [pc, #580]	; (8002aac <HAL_RCC_OscConfig+0x624>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e116      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	4b8d      	ldr	r3, [pc, #564]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287a:	231f      	movs	r3, #31
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800288a:	4989      	ldr	r1, [pc, #548]	; (8002ab0 <HAL_RCC_OscConfig+0x628>)
 800288c:	400a      	ands	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	4013      	ands	r3, r2
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d12a      	bne.n	80028f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028a2:	4b81      	ldr	r3, [pc, #516]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a6:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028a8:	2104      	movs	r1, #4
 80028aa:	430a      	orrs	r2, r1
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028ae:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	4b7d      	ldr	r3, [pc, #500]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fd29 	bl	8001310 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028c4:	f7fe fd24 	bl	8001310 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0e3      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028d6:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d0f1      	beq.n	80028c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028e0:	4b71      	ldr	r3, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	22f8      	movs	r2, #248	; 0xf8
 80028e6:	4393      	bics	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	00da      	lsls	r2, r3, #3
 80028f0:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
 80028f6:	e034      	b.n	8002962 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	3305      	adds	r3, #5
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002906:	2104      	movs	r1, #4
 8002908:	438a      	bics	r2, r1
 800290a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	22f8      	movs	r2, #248	; 0xf8
 8002912:	4393      	bics	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	00da      	lsls	r2, r3, #3
 800291c:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800291e:	430a      	orrs	r2, r1
 8002920:	635a      	str	r2, [r3, #52]	; 0x34
 8002922:	e01e      	b.n	8002962 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002928:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800292a:	2104      	movs	r1, #4
 800292c:	430a      	orrs	r2, r1
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002930:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002934:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002936:	2101      	movs	r1, #1
 8002938:	438a      	bics	r2, r1
 800293a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7fe fce8 	bl	8001310 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002946:	f7fe fce3 	bl	8001310 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0a2      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d1f1      	bne.n	8002946 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d100      	bne.n	800296c <HAL_RCC_OscConfig+0x4e4>
 800296a:	e097      	b.n	8002a9c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	220c      	movs	r2, #12
 8002972:	4013      	ands	r3, r2
 8002974:	2b08      	cmp	r3, #8
 8002976:	d100      	bne.n	800297a <HAL_RCC_OscConfig+0x4f2>
 8002978:	e06b      	b.n	8002a52 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d14c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002988:	494a      	ldr	r1, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x62c>)
 800298a:	400a      	ands	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fcbf 	bl	8001310 <HAL_GetTick>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fcba 	bl	8001310 <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e079      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029aa:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	049b      	lsls	r3, r3, #18
 80029b2:	4013      	ands	r3, r2
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b6:	4b3c      	ldr	r3, [pc, #240]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	220f      	movs	r2, #15
 80029bc:	4393      	bics	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <HAL_RCC_OscConfig+0x630>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	431a      	orrs	r2, r3
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	0449      	lsls	r1, r1, #17
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fc8d 	bl	8001310 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fc88 	bl	8001310 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e047      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	049b      	lsls	r3, r3, #18
 8002a16:	4013      	ands	r3, r2
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x574>
 8002a1a:	e03f      	b.n	8002a9c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002a22:	4924      	ldr	r1, [pc, #144]	; (8002ab4 <HAL_RCC_OscConfig+0x62c>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe fc72 	bl	8001310 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fc6d 	bl	8001310 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e02c      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	049b      	lsls	r3, r3, #18
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5aa>
 8002a50:	e024      	b.n	8002a9c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e01f      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_OscConfig+0x620>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	025b      	lsls	r3, r3, #9
 8002a70:	401a      	ands	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d10e      	bne.n	8002a98 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	401a      	ands	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	23f0      	movs	r3, #240	; 0xf0
 8002a8c:	039b      	lsls	r3, r3, #14
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b008      	add	sp, #32
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	00001388 	.word	0x00001388
 8002ab0:	efffffff 	.word	0xefffffff
 8002ab4:	feffffff 	.word	0xfeffffff
 8002ab8:	ffc2ffff 	.word	0xffc2ffff

08002abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b3      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d911      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e09a      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d015      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	d006      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b1c:	21e0      	movs	r1, #224	; 0xe0
 8002b1e:	00c9      	lsls	r1, r1, #3
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	22f0      	movs	r2, #240	; 0xf0
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	029b      	lsls	r3, r3, #10
 8002b52:	4013      	ands	r3, r2
 8002b54:	d114      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06e      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	049b      	lsls	r3, r3, #18
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e062      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e05b      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2203      	movs	r2, #3
 8002b86:	4393      	bics	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fe fbbc 	bl	8001310 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9c:	e009      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9e:	f7fe fbb7 	bl	8001310 <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_RCC_ClockConfig+0x18c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e042      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1ec      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d211      	bcs.n	8002bf6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4393      	bics	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCC_ClockConfig+0x184>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e020      	b.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c14:	f000 f820 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c18:	0001      	movs	r1, r0
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x188>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	220f      	movs	r2, #15
 8002c22:	4013      	ands	r3, r2
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x194>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	000a      	movs	r2, r1
 8002c2a:	40da      	lsrs	r2, r3
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x198>)
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fe fb27 	bl	8001284 <HAL_InitTick>
  
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	00001388 	.word	0x00001388
 8002c4c:	fffff8ff 	.word	0xfffff8ff
 8002c50:	08004204 	.word	0x08004204
 8002c54:	20000000 	.word	0x20000000

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x30>
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x36>
 8002c86:	e02c      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8a:	613b      	str	r3, [r7, #16]
      break;
 8002c8c:	e02c      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0c9b      	lsrs	r3, r3, #18
 8002c92:	220f      	movs	r2, #15
 8002c94:	4013      	ands	r3, r2
 8002c96:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	025b      	lsls	r3, r3, #9
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cb8:	f7fd fa30 	bl	800011c <__udivsi3>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4353      	muls	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e009      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	000a      	movs	r2, r1
 8002ccc:	0152      	lsls	r2, r2, #5
 8002cce:	1a52      	subs	r2, r2, r1
 8002cd0:	0193      	lsls	r3, r2, #6
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	185b      	adds	r3, r3, r1
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ce4:	613b      	str	r3, [r7, #16]
      break;
 8002ce6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ce8:	693b      	ldr	r3, [r7, #16]
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b006      	add	sp, #24
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	007a1200 	.word	0x007a1200
 8002cfc:	0800421c 	.word	0x0800421c
 8002d00:	0800422c 	.word	0x0800422c

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d1c:	f7ff fff2 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d20:	0001      	movs	r1, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	2207      	movs	r2, #7
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	40d9      	lsrs	r1, r3
 8002d32:	000b      	movs	r3, r1
}    
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08004214 	.word	0x08004214

08002d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	025b      	lsls	r3, r3, #9
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d100      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d60:	e08e      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2017      	movs	r0, #23
 8002d64:	183b      	adds	r3, r7, r0
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	055b      	lsls	r3, r3, #21
 8002d72:	4013      	ands	r3, r2
 8002d74:	d110      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0549      	lsls	r1, r1, #21
 8002d80:	430a      	orrs	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]
 8002d84:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	055b      	lsls	r3, r3, #21
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b54      	ldr	r3, [pc, #336]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	d11a      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da4:	4b51      	ldr	r3, [pc, #324]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0049      	lsls	r1, r1, #1
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db2:	f7fe faad 	bl	8001310 <HAL_GetTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	e008      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe faa8 	bl	8001310 <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e087      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	23c0      	movs	r3, #192	; 0xc0
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4013      	ands	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d034      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	23c0      	movs	r3, #192	; 0xc0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d02c      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e06:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0249      	lsls	r1, r1, #9
 8002e10:	430a      	orrs	r2, r1
 8002e12:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e1a:	4936      	ldr	r1, [pc, #216]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fa6f 	bl	8001310 <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	e009      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe fa6a 	bl	8001310 <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e048      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e6a:	2317      	movs	r3, #23
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e7a:	4920      	ldr	r1, [pc, #128]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	2203      	movs	r2, #3
 8002e90:	4393      	bics	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2210      	movs	r2, #16
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	2240      	movs	r2, #64	; 0x40
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b006      	add	sp, #24
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	fffffcff 	.word	0xfffffcff
 8002ef4:	fffeffff 	.word	0xfffeffff
 8002ef8:	00001388 	.word	0x00001388
 8002efc:	efffffff 	.word	0xefffffff

08002f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e044      	b.n	8002f9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2278      	movs	r2, #120	; 0x78
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fe f8cd 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2224      	movs	r2, #36	; 0x24
 8002f2e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 fa0c 	bl	8003368 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 f8c8 	bl	80030e8 <UART_SetConfig>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e01c      	b.n	8002f9c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <HAL_UART_Init+0xa4>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	212a      	movs	r1, #42	; 0x2a
 8002f7e:	438a      	bics	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fa9b 	bl	80034d0 <UART_CheckIdleState>
 8002f9a:	0003      	movs	r3, r0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	ffffb7ff 	.word	0xffffb7ff

08002fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d000      	beq.n	8002fc2 <HAL_UART_Transmit+0x1a>
 8002fc0:	e08d      	b.n	80030de <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_UART_Transmit+0x28>
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e085      	b.n	80030e0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	015b      	lsls	r3, r3, #5
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d109      	bne.n	8002ff4 <HAL_UART_Transmit+0x4c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2201      	movs	r2, #1
 8002fec:	4013      	ands	r3, r2
 8002fee:	d001      	beq.n	8002ff4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e075      	b.n	80030e0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2284      	movs	r2, #132	; 0x84
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	; 0x21
 8003000:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fe f985 	bl	8001310 <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1dba      	adds	r2, r7, #6
 800300e:	2150      	movs	r1, #80	; 0x50
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1dba      	adds	r2, r7, #6
 8003018:	2152      	movs	r1, #82	; 0x52
 800301a:	8812      	ldrh	r2, [r2, #0]
 800301c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	015b      	lsls	r3, r3, #5
 8003026:	429a      	cmp	r2, r3
 8003028:	d108      	bne.n	800303c <HAL_UART_Transmit+0x94>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e003      	b.n	8003044 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003044:	e030      	b.n	80030a8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	0013      	movs	r3, r2
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	f000 fae4 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d004      	beq.n	8003066 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e03c      	b.n	80030e0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	05d2      	lsls	r2, r2, #23
 8003076:	0dd2      	lsrs	r2, r2, #23
 8003078:	b292      	uxth	r2, r2
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	3302      	adds	r3, #2
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e008      	b.n	8003096 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b292      	uxth	r2, r2
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2252      	movs	r2, #82	; 0x52
 800309a:	5a9b      	ldrh	r3, [r3, r2]
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b299      	uxth	r1, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2252      	movs	r2, #82	; 0x52
 80030a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2252      	movs	r2, #82	; 0x52
 80030ac:	5a9b      	ldrh	r3, [r3, r2]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1c8      	bne.n	8003046 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	0013      	movs	r3, r2
 80030be:	2200      	movs	r2, #0
 80030c0:	2140      	movs	r1, #64	; 0x40
 80030c2:	f000 faad 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d004      	beq.n	80030d4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e005      	b.n	80030e0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b008      	add	sp, #32
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030f0:	231e      	movs	r3, #30
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a8d      	ldr	r2, [pc, #564]	; (800334c <UART_SetConfig+0x264>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a88      	ldr	r2, [pc, #544]	; (8003350 <UART_SetConfig+0x268>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a7f      	ldr	r2, [pc, #508]	; (8003354 <UART_SetConfig+0x26c>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a7b      	ldr	r2, [pc, #492]	; (8003358 <UART_SetConfig+0x270>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d127      	bne.n	80031be <UART_SetConfig+0xd6>
 800316e:	4b7b      	ldr	r3, [pc, #492]	; (800335c <UART_SetConfig+0x274>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	2203      	movs	r2, #3
 8003174:	4013      	ands	r3, r2
 8003176:	2b03      	cmp	r3, #3
 8003178:	d00d      	beq.n	8003196 <UART_SetConfig+0xae>
 800317a:	d81b      	bhi.n	80031b4 <UART_SetConfig+0xcc>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d014      	beq.n	80031aa <UART_SetConfig+0xc2>
 8003180:	d818      	bhi.n	80031b4 <UART_SetConfig+0xcc>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <UART_SetConfig+0xa4>
 8003186:	2b01      	cmp	r3, #1
 8003188:	d00a      	beq.n	80031a0 <UART_SetConfig+0xb8>
 800318a:	e013      	b.n	80031b4 <UART_SetConfig+0xcc>
 800318c:	231f      	movs	r3, #31
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e021      	b.n	80031da <UART_SetConfig+0xf2>
 8003196:	231f      	movs	r3, #31
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e01c      	b.n	80031da <UART_SetConfig+0xf2>
 80031a0:	231f      	movs	r3, #31
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2204      	movs	r2, #4
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e017      	b.n	80031da <UART_SetConfig+0xf2>
 80031aa:	231f      	movs	r3, #31
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2208      	movs	r2, #8
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e012      	b.n	80031da <UART_SetConfig+0xf2>
 80031b4:	231f      	movs	r3, #31
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2210      	movs	r2, #16
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e00d      	b.n	80031da <UART_SetConfig+0xf2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a67      	ldr	r2, [pc, #412]	; (8003360 <UART_SetConfig+0x278>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d104      	bne.n	80031d2 <UART_SetConfig+0xea>
 80031c8:	231f      	movs	r3, #31
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e003      	b.n	80031da <UART_SetConfig+0xf2>
 80031d2:	231f      	movs	r3, #31
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2210      	movs	r2, #16
 80031d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d15c      	bne.n	80032a0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80031e6:	231f      	movs	r3, #31
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d015      	beq.n	800321c <UART_SetConfig+0x134>
 80031f0:	dc18      	bgt.n	8003224 <UART_SetConfig+0x13c>
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00d      	beq.n	8003212 <UART_SetConfig+0x12a>
 80031f6:	dc15      	bgt.n	8003224 <UART_SetConfig+0x13c>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <UART_SetConfig+0x11a>
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d005      	beq.n	800320c <UART_SetConfig+0x124>
 8003200:	e010      	b.n	8003224 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003202:	f7ff fd89 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8003206:	0003      	movs	r3, r0
 8003208:	61bb      	str	r3, [r7, #24]
        break;
 800320a:	e012      	b.n	8003232 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800320c:	4b55      	ldr	r3, [pc, #340]	; (8003364 <UART_SetConfig+0x27c>)
 800320e:	61bb      	str	r3, [r7, #24]
        break;
 8003210:	e00f      	b.n	8003232 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003212:	f7ff fd21 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8003216:	0003      	movs	r3, r0
 8003218:	61bb      	str	r3, [r7, #24]
        break;
 800321a:	e00a      	b.n	8003232 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	61bb      	str	r3, [r7, #24]
        break;
 8003222:	e006      	b.n	8003232 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003228:	231e      	movs	r3, #30
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
        break;
 8003230:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d100      	bne.n	800323a <UART_SetConfig+0x152>
 8003238:	e07a      	b.n	8003330 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	005a      	lsls	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	18d2      	adds	r2, r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	0019      	movs	r1, r3
 800324c:	0010      	movs	r0, r2
 800324e:	f7fc ff65 	bl	800011c <__udivsi3>
 8003252:	0003      	movs	r3, r0
 8003254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b0f      	cmp	r3, #15
 800325a:	d91c      	bls.n	8003296 <UART_SetConfig+0x1ae>
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	025b      	lsls	r3, r3, #9
 8003262:	429a      	cmp	r2, r3
 8003264:	d217      	bcs.n	8003296 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	b29a      	uxth	r2, r3
 800326a:	200e      	movs	r0, #14
 800326c:	183b      	adds	r3, r7, r0
 800326e:	210f      	movs	r1, #15
 8003270:	438a      	bics	r2, r1
 8003272:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	b29b      	uxth	r3, r3
 800327a:	2207      	movs	r2, #7
 800327c:	4013      	ands	r3, r2
 800327e:	b299      	uxth	r1, r3
 8003280:	183b      	adds	r3, r7, r0
 8003282:	183a      	adds	r2, r7, r0
 8003284:	8812      	ldrh	r2, [r2, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	183a      	adds	r2, r7, r0
 8003290:	8812      	ldrh	r2, [r2, #0]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e04c      	b.n	8003330 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003296:	231e      	movs	r3, #30
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e047      	b.n	8003330 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a0:	231f      	movs	r3, #31
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d015      	beq.n	80032d6 <UART_SetConfig+0x1ee>
 80032aa:	dc18      	bgt.n	80032de <UART_SetConfig+0x1f6>
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00d      	beq.n	80032cc <UART_SetConfig+0x1e4>
 80032b0:	dc15      	bgt.n	80032de <UART_SetConfig+0x1f6>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <UART_SetConfig+0x1d4>
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d005      	beq.n	80032c6 <UART_SetConfig+0x1de>
 80032ba:	e010      	b.n	80032de <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032bc:	f7ff fd2c 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 80032c0:	0003      	movs	r3, r0
 80032c2:	61bb      	str	r3, [r7, #24]
        break;
 80032c4:	e012      	b.n	80032ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c6:	4b27      	ldr	r3, [pc, #156]	; (8003364 <UART_SetConfig+0x27c>)
 80032c8:	61bb      	str	r3, [r7, #24]
        break;
 80032ca:	e00f      	b.n	80032ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032cc:	f7ff fcc4 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 80032d0:	0003      	movs	r3, r0
 80032d2:	61bb      	str	r3, [r7, #24]
        break;
 80032d4:	e00a      	b.n	80032ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e006      	b.n	80032ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032e2:	231e      	movs	r3, #30
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
        break;
 80032ea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01e      	beq.n	8003330 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	085a      	lsrs	r2, r3, #1
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	18d2      	adds	r2, r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0019      	movs	r1, r3
 8003302:	0010      	movs	r0, r2
 8003304:	f7fc ff0a 	bl	800011c <__udivsi3>
 8003308:	0003      	movs	r3, r0
 800330a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	d90a      	bls.n	8003328 <UART_SetConfig+0x240>
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	429a      	cmp	r2, r3
 800331a:	d205      	bcs.n	8003328 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	e003      	b.n	8003330 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003328:	231e      	movs	r3, #30
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800333c:	231e      	movs	r3, #30
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	781b      	ldrb	r3, [r3, #0]
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	b008      	add	sp, #32
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	ffff69f3 	.word	0xffff69f3
 8003350:	ffffcfff 	.word	0xffffcfff
 8003354:	fffff4ff 	.word	0xfffff4ff
 8003358:	40013800 	.word	0x40013800
 800335c:	40021000 	.word	0x40021000
 8003360:	40004400 	.word	0x40004400
 8003364:	007a1200 	.word	0x007a1200

08003368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2208      	movs	r2, #8
 8003376:	4013      	ands	r3, r2
 8003378:	d00b      	beq.n	8003392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <UART_AdvFeatureConfig+0x144>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2201      	movs	r2, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d00b      	beq.n	80033b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <UART_AdvFeatureConfig+0x148>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2202      	movs	r2, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <UART_AdvFeatureConfig+0x14c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2204      	movs	r2, #4
 80033dc:	4013      	ands	r3, r2
 80033de:	d00b      	beq.n	80033f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <UART_AdvFeatureConfig+0x150>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2210      	movs	r2, #16
 80033fe:	4013      	ands	r3, r2
 8003400:	d00b      	beq.n	800341a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <UART_AdvFeatureConfig+0x154>)
 800340a:	4013      	ands	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2220      	movs	r2, #32
 8003420:	4013      	ands	r3, r2
 8003422:	d00b      	beq.n	800343c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4a25      	ldr	r2, [pc, #148]	; (80034c0 <UART_AdvFeatureConfig+0x158>)
 800342c:	4013      	ands	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	4013      	ands	r3, r2
 8003444:	d01d      	beq.n	8003482 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <UART_AdvFeatureConfig+0x15c>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	035b      	lsls	r3, r3, #13
 8003466:	429a      	cmp	r2, r3
 8003468:	d10b      	bne.n	8003482 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <UART_AdvFeatureConfig+0x160>)
 8003472:	4013      	ands	r3, r2
 8003474:	0019      	movs	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	4013      	ands	r3, r2
 800348a:	d00b      	beq.n	80034a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <UART_AdvFeatureConfig+0x164>)
 8003494:	4013      	ands	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	ffff7fff 	.word	0xffff7fff
 80034b0:	fffdffff 	.word	0xfffdffff
 80034b4:	fffeffff 	.word	0xfffeffff
 80034b8:	fffbffff 	.word	0xfffbffff
 80034bc:	ffffefff 	.word	0xffffefff
 80034c0:	ffffdfff 	.word	0xffffdfff
 80034c4:	ffefffff 	.word	0xffefffff
 80034c8:	ff9fffff 	.word	0xff9fffff
 80034cc:	fff7ffff 	.word	0xfff7ffff

080034d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b092      	sub	sp, #72	; 0x48
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2284      	movs	r2, #132	; 0x84
 80034dc:	2100      	movs	r1, #0
 80034de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e0:	f7fd ff16 	bl	8001310 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d12c      	bne.n	8003550 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	0391      	lsls	r1, r2, #14
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4a46      	ldr	r2, [pc, #280]	; (8003618 <UART_CheckIdleState+0x148>)
 8003500:	9200      	str	r2, [sp, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	f000 f88c 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d021      	beq.n	8003550 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
 8003516:	2301      	movs	r3, #1
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	438a      	bics	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2278      	movs	r2, #120	; 0x78
 8003548:	2100      	movs	r1, #0
 800354a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e05f      	b.n	8003610 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
 800355a:	2b04      	cmp	r3, #4
 800355c:	d146      	bne.n	80035ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	03d1      	lsls	r1, r2, #15
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4a2c      	ldr	r2, [pc, #176]	; (8003618 <UART_CheckIdleState+0x148>)
 8003568:	9200      	str	r2, [sp, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	f000 f858 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d03b      	beq.n	80035ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	60fb      	str	r3, [r7, #12]
  return(result);
 800357a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
 800357e:	2301      	movs	r3, #1
 8003580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4921      	ldr	r1, [pc, #132]	; (800361c <UART_CheckIdleState+0x14c>)
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80035ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
 80035b0:	2301      	movs	r3, #1
 80035b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	438a      	bics	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	2120      	movs	r1, #32
 80035de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2278      	movs	r2, #120	; 0x78
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e011      	b.n	8003610 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	2120      	movs	r1, #32
 80035f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2278      	movs	r2, #120	; 0x78
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b010      	add	sp, #64	; 0x40
 8003616:	bd80      	pop	{r7, pc}
 8003618:	01ffffff 	.word	0x01ffffff
 800361c:	fffffedf 	.word	0xfffffedf

08003620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	1dfb      	adds	r3, r7, #7
 800362e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	e051      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3301      	adds	r3, #1
 8003636:	d04e      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003638:	f7fd fe6a 	bl	8001310 <HAL_GetTick>
 800363c:	0002      	movs	r2, r0
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e051      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2204      	movs	r2, #4
 800365a:	4013      	ands	r3, r2
 800365c:	d03b      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d038      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d035      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2208      	movs	r2, #8
 8003672:	4013      	ands	r3, r2
 8003674:	2b08      	cmp	r3, #8
 8003676:	d111      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	0018      	movs	r0, r3
 8003684:	f000 f83c 	bl	8003700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2284      	movs	r2, #132	; 0x84
 800368c:	2108      	movs	r1, #8
 800368e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2278      	movs	r2, #120	; 0x78
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e02c      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	401a      	ands	r2, r3
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d112      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f81f 	bl	8003700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2284      	movs	r2, #132	; 0x84
 80036c6:	2120      	movs	r1, #32
 80036c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2278      	movs	r2, #120	; 0x78
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e00f      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	425a      	negs	r2, r3
 80036e6:	4153      	adcs	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	001a      	movs	r2, r3
 80036ec:	1dfb      	adds	r3, r7, #7
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d09e      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08e      	sub	sp, #56	; 0x38
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	617b      	str	r3, [r7, #20]
  return(result);
 800370e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
 8003712:	2301      	movs	r3, #1
 8003714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4926      	ldr	r1, [pc, #152]	; (80037c4 <UART_EndRxTransfer+0xc4>)
 800372a:	400a      	ands	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373a:	f3ef 8310 	mrs	r3, PRIMASK
 800373e:	623b      	str	r3, [r7, #32]
  return(result);
 8003740:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
 8003744:	2301      	movs	r3, #1
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f383 8810 	msr	PRIMASK, r3
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	438a      	bics	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	2b01      	cmp	r3, #1
 8003772:	d118      	bne.n	80037a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	60bb      	str	r3, [r7, #8]
  return(result);
 800377a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	2301      	movs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2110      	movs	r1, #16
 8003796:	438a      	bics	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	2120      	movs	r1, #32
 80037ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b00e      	add	sp, #56	; 0x38
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	fffffedf 	.word	0xfffffedf

080037c8 <__errno>:
 80037c8:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <__errno+0x8>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	4770      	bx	lr
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	2000000c 	.word	0x2000000c

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	2600      	movs	r6, #0
 80037d8:	4d0c      	ldr	r5, [pc, #48]	; (800380c <__libc_init_array+0x38>)
 80037da:	4c0d      	ldr	r4, [pc, #52]	; (8003810 <__libc_init_array+0x3c>)
 80037dc:	1b64      	subs	r4, r4, r5
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	2600      	movs	r6, #0
 80037e6:	f000 fc8b 	bl	8004100 <_init>
 80037ea:	4d0a      	ldr	r5, [pc, #40]	; (8003814 <__libc_init_array+0x40>)
 80037ec:	4c0a      	ldr	r4, [pc, #40]	; (8003818 <__libc_init_array+0x44>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	42a6      	cmp	r6, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	00b3      	lsls	r3, r6, #2
 80037fa:	58eb      	ldr	r3, [r5, r3]
 80037fc:	4798      	blx	r3
 80037fe:	3601      	adds	r6, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	00b3      	lsls	r3, r6, #2
 8003804:	58eb      	ldr	r3, [r5, r3]
 8003806:	4798      	blx	r3
 8003808:	3601      	adds	r6, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	08004270 	.word	0x08004270
 8003810:	08004270 	.word	0x08004270
 8003814:	08004270 	.word	0x08004270
 8003818:	08004274 	.word	0x08004274

0800381c <memcpy>:
 800381c:	2300      	movs	r3, #0
 800381e:	b510      	push	{r4, lr}
 8003820:	429a      	cmp	r2, r3
 8003822:	d100      	bne.n	8003826 <memcpy+0xa>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	5ccc      	ldrb	r4, [r1, r3]
 8003828:	54c4      	strb	r4, [r0, r3]
 800382a:	3301      	adds	r3, #1
 800382c:	e7f8      	b.n	8003820 <memcpy+0x4>

0800382e <memset>:
 800382e:	0003      	movs	r3, r0
 8003830:	1882      	adds	r2, r0, r2
 8003832:	4293      	cmp	r3, r2
 8003834:	d100      	bne.n	8003838 <memset+0xa>
 8003836:	4770      	bx	lr
 8003838:	7019      	strb	r1, [r3, #0]
 800383a:	3301      	adds	r3, #1
 800383c:	e7f9      	b.n	8003832 <memset+0x4>
	...

08003840 <siprintf>:
 8003840:	b40e      	push	{r1, r2, r3}
 8003842:	b500      	push	{lr}
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <siprintf+0x34>)
 8003846:	b09c      	sub	sp, #112	; 0x70
 8003848:	ab1d      	add	r3, sp, #116	; 0x74
 800384a:	9002      	str	r0, [sp, #8]
 800384c:	9006      	str	r0, [sp, #24]
 800384e:	9107      	str	r1, [sp, #28]
 8003850:	9104      	str	r1, [sp, #16]
 8003852:	4809      	ldr	r0, [pc, #36]	; (8003878 <siprintf+0x38>)
 8003854:	4909      	ldr	r1, [pc, #36]	; (800387c <siprintf+0x3c>)
 8003856:	cb04      	ldmia	r3!, {r2}
 8003858:	9105      	str	r1, [sp, #20]
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	a902      	add	r1, sp, #8
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f000 f870 	bl	8003944 <_svfiprintf_r>
 8003864:	2300      	movs	r3, #0
 8003866:	9a02      	ldr	r2, [sp, #8]
 8003868:	7013      	strb	r3, [r2, #0]
 800386a:	b01c      	add	sp, #112	; 0x70
 800386c:	bc08      	pop	{r3}
 800386e:	b003      	add	sp, #12
 8003870:	4718      	bx	r3
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	7fffffff 	.word	0x7fffffff
 8003878:	2000000c 	.word	0x2000000c
 800387c:	ffff0208 	.word	0xffff0208

08003880 <__ssputs_r>:
 8003880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003882:	688e      	ldr	r6, [r1, #8]
 8003884:	b085      	sub	sp, #20
 8003886:	0007      	movs	r7, r0
 8003888:	000c      	movs	r4, r1
 800388a:	9203      	str	r2, [sp, #12]
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	429e      	cmp	r6, r3
 8003890:	d83c      	bhi.n	800390c <__ssputs_r+0x8c>
 8003892:	2390      	movs	r3, #144	; 0x90
 8003894:	898a      	ldrh	r2, [r1, #12]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	421a      	tst	r2, r3
 800389a:	d034      	beq.n	8003906 <__ssputs_r+0x86>
 800389c:	6909      	ldr	r1, [r1, #16]
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	6960      	ldr	r0, [r4, #20]
 80038a2:	1a5b      	subs	r3, r3, r1
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	2303      	movs	r3, #3
 80038a8:	4343      	muls	r3, r0
 80038aa:	0fdd      	lsrs	r5, r3, #31
 80038ac:	18ed      	adds	r5, r5, r3
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	9802      	ldr	r0, [sp, #8]
 80038b2:	3301      	adds	r3, #1
 80038b4:	181b      	adds	r3, r3, r0
 80038b6:	106d      	asrs	r5, r5, #1
 80038b8:	42ab      	cmp	r3, r5
 80038ba:	d900      	bls.n	80038be <__ssputs_r+0x3e>
 80038bc:	001d      	movs	r5, r3
 80038be:	0553      	lsls	r3, r2, #21
 80038c0:	d532      	bpl.n	8003928 <__ssputs_r+0xa8>
 80038c2:	0029      	movs	r1, r5
 80038c4:	0038      	movs	r0, r7
 80038c6:	f000 fb49 	bl	8003f5c <_malloc_r>
 80038ca:	1e06      	subs	r6, r0, #0
 80038cc:	d109      	bne.n	80038e2 <__ssputs_r+0x62>
 80038ce:	230c      	movs	r3, #12
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	2340      	movs	r3, #64	; 0x40
 80038d4:	2001      	movs	r0, #1
 80038d6:	89a2      	ldrh	r2, [r4, #12]
 80038d8:	4240      	negs	r0, r0
 80038da:	4313      	orrs	r3, r2
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	b005      	add	sp, #20
 80038e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038e2:	9a02      	ldr	r2, [sp, #8]
 80038e4:	6921      	ldr	r1, [r4, #16]
 80038e6:	f7ff ff99 	bl	800381c <memcpy>
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <__ssputs_r+0xc0>)
 80038ee:	401a      	ands	r2, r3
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	4313      	orrs	r3, r2
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	9b02      	ldr	r3, [sp, #8]
 80038f8:	6126      	str	r6, [r4, #16]
 80038fa:	18f6      	adds	r6, r6, r3
 80038fc:	6026      	str	r6, [r4, #0]
 80038fe:	6165      	str	r5, [r4, #20]
 8003900:	9e01      	ldr	r6, [sp, #4]
 8003902:	1aed      	subs	r5, r5, r3
 8003904:	60a5      	str	r5, [r4, #8]
 8003906:	9b01      	ldr	r3, [sp, #4]
 8003908:	429e      	cmp	r6, r3
 800390a:	d900      	bls.n	800390e <__ssputs_r+0x8e>
 800390c:	9e01      	ldr	r6, [sp, #4]
 800390e:	0032      	movs	r2, r6
 8003910:	9903      	ldr	r1, [sp, #12]
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	f000 faa3 	bl	8003e5e <memmove>
 8003918:	68a3      	ldr	r3, [r4, #8]
 800391a:	2000      	movs	r0, #0
 800391c:	1b9b      	subs	r3, r3, r6
 800391e:	60a3      	str	r3, [r4, #8]
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	199e      	adds	r6, r3, r6
 8003924:	6026      	str	r6, [r4, #0]
 8003926:	e7da      	b.n	80038de <__ssputs_r+0x5e>
 8003928:	002a      	movs	r2, r5
 800392a:	0038      	movs	r0, r7
 800392c:	f000 fb8c 	bl	8004048 <_realloc_r>
 8003930:	1e06      	subs	r6, r0, #0
 8003932:	d1e0      	bne.n	80038f6 <__ssputs_r+0x76>
 8003934:	0038      	movs	r0, r7
 8003936:	6921      	ldr	r1, [r4, #16]
 8003938:	f000 faa4 	bl	8003e84 <_free_r>
 800393c:	e7c7      	b.n	80038ce <__ssputs_r+0x4e>
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	fffffb7f 	.word	0xfffffb7f

08003944 <_svfiprintf_r>:
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b0a1      	sub	sp, #132	; 0x84
 8003948:	9003      	str	r0, [sp, #12]
 800394a:	001d      	movs	r5, r3
 800394c:	898b      	ldrh	r3, [r1, #12]
 800394e:	000f      	movs	r7, r1
 8003950:	0016      	movs	r6, r2
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	d511      	bpl.n	800397a <_svfiprintf_r+0x36>
 8003956:	690b      	ldr	r3, [r1, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10e      	bne.n	800397a <_svfiprintf_r+0x36>
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	f000 fafd 	bl	8003f5c <_malloc_r>
 8003962:	6038      	str	r0, [r7, #0]
 8003964:	6138      	str	r0, [r7, #16]
 8003966:	2800      	cmp	r0, #0
 8003968:	d105      	bne.n	8003976 <_svfiprintf_r+0x32>
 800396a:	230c      	movs	r3, #12
 800396c:	9a03      	ldr	r2, [sp, #12]
 800396e:	3801      	subs	r0, #1
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	b021      	add	sp, #132	; 0x84
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003976:	2340      	movs	r3, #64	; 0x40
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	2300      	movs	r3, #0
 800397c:	ac08      	add	r4, sp, #32
 800397e:	6163      	str	r3, [r4, #20]
 8003980:	3320      	adds	r3, #32
 8003982:	7663      	strb	r3, [r4, #25]
 8003984:	3310      	adds	r3, #16
 8003986:	76a3      	strb	r3, [r4, #26]
 8003988:	9507      	str	r5, [sp, #28]
 800398a:	0035      	movs	r5, r6
 800398c:	782b      	ldrb	r3, [r5, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <_svfiprintf_r+0x52>
 8003992:	2b25      	cmp	r3, #37	; 0x25
 8003994:	d147      	bne.n	8003a26 <_svfiprintf_r+0xe2>
 8003996:	1bab      	subs	r3, r5, r6
 8003998:	9305      	str	r3, [sp, #20]
 800399a:	42b5      	cmp	r5, r6
 800399c:	d00c      	beq.n	80039b8 <_svfiprintf_r+0x74>
 800399e:	0032      	movs	r2, r6
 80039a0:	0039      	movs	r1, r7
 80039a2:	9803      	ldr	r0, [sp, #12]
 80039a4:	f7ff ff6c 	bl	8003880 <__ssputs_r>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d100      	bne.n	80039ae <_svfiprintf_r+0x6a>
 80039ac:	e0ae      	b.n	8003b0c <_svfiprintf_r+0x1c8>
 80039ae:	6962      	ldr	r2, [r4, #20]
 80039b0:	9b05      	ldr	r3, [sp, #20]
 80039b2:	4694      	mov	ip, r2
 80039b4:	4463      	add	r3, ip
 80039b6:	6163      	str	r3, [r4, #20]
 80039b8:	782b      	ldrb	r3, [r5, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d100      	bne.n	80039c0 <_svfiprintf_r+0x7c>
 80039be:	e0a5      	b.n	8003b0c <_svfiprintf_r+0x1c8>
 80039c0:	2201      	movs	r2, #1
 80039c2:	2300      	movs	r3, #0
 80039c4:	4252      	negs	r2, r2
 80039c6:	6062      	str	r2, [r4, #4]
 80039c8:	a904      	add	r1, sp, #16
 80039ca:	3254      	adds	r2, #84	; 0x54
 80039cc:	1852      	adds	r2, r2, r1
 80039ce:	1c6e      	adds	r6, r5, #1
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	60e3      	str	r3, [r4, #12]
 80039d4:	60a3      	str	r3, [r4, #8]
 80039d6:	7013      	strb	r3, [r2, #0]
 80039d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80039da:	2205      	movs	r2, #5
 80039dc:	7831      	ldrb	r1, [r6, #0]
 80039de:	4854      	ldr	r0, [pc, #336]	; (8003b30 <_svfiprintf_r+0x1ec>)
 80039e0:	f000 fa32 	bl	8003e48 <memchr>
 80039e4:	1c75      	adds	r5, r6, #1
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d11f      	bne.n	8003a2a <_svfiprintf_r+0xe6>
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	06d3      	lsls	r3, r2, #27
 80039ee:	d504      	bpl.n	80039fa <_svfiprintf_r+0xb6>
 80039f0:	2353      	movs	r3, #83	; 0x53
 80039f2:	a904      	add	r1, sp, #16
 80039f4:	185b      	adds	r3, r3, r1
 80039f6:	2120      	movs	r1, #32
 80039f8:	7019      	strb	r1, [r3, #0]
 80039fa:	0713      	lsls	r3, r2, #28
 80039fc:	d504      	bpl.n	8003a08 <_svfiprintf_r+0xc4>
 80039fe:	2353      	movs	r3, #83	; 0x53
 8003a00:	a904      	add	r1, sp, #16
 8003a02:	185b      	adds	r3, r3, r1
 8003a04:	212b      	movs	r1, #43	; 0x2b
 8003a06:	7019      	strb	r1, [r3, #0]
 8003a08:	7833      	ldrb	r3, [r6, #0]
 8003a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0c:	d016      	beq.n	8003a3c <_svfiprintf_r+0xf8>
 8003a0e:	0035      	movs	r5, r6
 8003a10:	2100      	movs	r1, #0
 8003a12:	200a      	movs	r0, #10
 8003a14:	68e3      	ldr	r3, [r4, #12]
 8003a16:	782a      	ldrb	r2, [r5, #0]
 8003a18:	1c6e      	adds	r6, r5, #1
 8003a1a:	3a30      	subs	r2, #48	; 0x30
 8003a1c:	2a09      	cmp	r2, #9
 8003a1e:	d94e      	bls.n	8003abe <_svfiprintf_r+0x17a>
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d111      	bne.n	8003a48 <_svfiprintf_r+0x104>
 8003a24:	e017      	b.n	8003a56 <_svfiprintf_r+0x112>
 8003a26:	3501      	adds	r5, #1
 8003a28:	e7b0      	b.n	800398c <_svfiprintf_r+0x48>
 8003a2a:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <_svfiprintf_r+0x1ec>)
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	1ac0      	subs	r0, r0, r3
 8003a30:	2301      	movs	r3, #1
 8003a32:	4083      	lsls	r3, r0
 8003a34:	4313      	orrs	r3, r2
 8003a36:	002e      	movs	r6, r5
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	e7ce      	b.n	80039da <_svfiprintf_r+0x96>
 8003a3c:	9b07      	ldr	r3, [sp, #28]
 8003a3e:	1d19      	adds	r1, r3, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	9107      	str	r1, [sp, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db01      	blt.n	8003a4c <_svfiprintf_r+0x108>
 8003a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a4a:	e004      	b.n	8003a56 <_svfiprintf_r+0x112>
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	60e3      	str	r3, [r4, #12]
 8003a50:	2302      	movs	r3, #2
 8003a52:	4313      	orrs	r3, r2
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	782b      	ldrb	r3, [r5, #0]
 8003a58:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5a:	d10a      	bne.n	8003a72 <_svfiprintf_r+0x12e>
 8003a5c:	786b      	ldrb	r3, [r5, #1]
 8003a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a60:	d135      	bne.n	8003ace <_svfiprintf_r+0x18a>
 8003a62:	9b07      	ldr	r3, [sp, #28]
 8003a64:	3502      	adds	r5, #2
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	9207      	str	r2, [sp, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db2b      	blt.n	8003ac8 <_svfiprintf_r+0x184>
 8003a70:	9309      	str	r3, [sp, #36]	; 0x24
 8003a72:	4e30      	ldr	r6, [pc, #192]	; (8003b34 <_svfiprintf_r+0x1f0>)
 8003a74:	2203      	movs	r2, #3
 8003a76:	0030      	movs	r0, r6
 8003a78:	7829      	ldrb	r1, [r5, #0]
 8003a7a:	f000 f9e5 	bl	8003e48 <memchr>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d006      	beq.n	8003a90 <_svfiprintf_r+0x14c>
 8003a82:	2340      	movs	r3, #64	; 0x40
 8003a84:	1b80      	subs	r0, r0, r6
 8003a86:	4083      	lsls	r3, r0
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	3501      	adds	r5, #1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	7829      	ldrb	r1, [r5, #0]
 8003a92:	2206      	movs	r2, #6
 8003a94:	4828      	ldr	r0, [pc, #160]	; (8003b38 <_svfiprintf_r+0x1f4>)
 8003a96:	1c6e      	adds	r6, r5, #1
 8003a98:	7621      	strb	r1, [r4, #24]
 8003a9a:	f000 f9d5 	bl	8003e48 <memchr>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d03c      	beq.n	8003b1c <_svfiprintf_r+0x1d8>
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <_svfiprintf_r+0x1f8>)
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d125      	bne.n	8003af4 <_svfiprintf_r+0x1b0>
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	9b07      	ldr	r3, [sp, #28]
 8003aac:	3307      	adds	r3, #7
 8003aae:	4393      	bics	r3, r2
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	9307      	str	r3, [sp, #28]
 8003ab4:	6963      	ldr	r3, [r4, #20]
 8003ab6:	9a04      	ldr	r2, [sp, #16]
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	6163      	str	r3, [r4, #20]
 8003abc:	e765      	b.n	800398a <_svfiprintf_r+0x46>
 8003abe:	4343      	muls	r3, r0
 8003ac0:	0035      	movs	r5, r6
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	189b      	adds	r3, r3, r2
 8003ac6:	e7a6      	b.n	8003a16 <_svfiprintf_r+0xd2>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	425b      	negs	r3, r3
 8003acc:	e7d0      	b.n	8003a70 <_svfiprintf_r+0x12c>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	200a      	movs	r0, #10
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	6063      	str	r3, [r4, #4]
 8003ad8:	7829      	ldrb	r1, [r5, #0]
 8003ada:	1c6e      	adds	r6, r5, #1
 8003adc:	3930      	subs	r1, #48	; 0x30
 8003ade:	2909      	cmp	r1, #9
 8003ae0:	d903      	bls.n	8003aea <_svfiprintf_r+0x1a6>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0c5      	beq.n	8003a72 <_svfiprintf_r+0x12e>
 8003ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae8:	e7c3      	b.n	8003a72 <_svfiprintf_r+0x12e>
 8003aea:	4342      	muls	r2, r0
 8003aec:	0035      	movs	r5, r6
 8003aee:	2301      	movs	r3, #1
 8003af0:	1852      	adds	r2, r2, r1
 8003af2:	e7f1      	b.n	8003ad8 <_svfiprintf_r+0x194>
 8003af4:	ab07      	add	r3, sp, #28
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	003a      	movs	r2, r7
 8003afa:	0021      	movs	r1, r4
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_svfiprintf_r+0x1fc>)
 8003afe:	9803      	ldr	r0, [sp, #12]
 8003b00:	e000      	b.n	8003b04 <_svfiprintf_r+0x1c0>
 8003b02:	bf00      	nop
 8003b04:	9004      	str	r0, [sp, #16]
 8003b06:	9b04      	ldr	r3, [sp, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	d1d3      	bne.n	8003ab4 <_svfiprintf_r+0x170>
 8003b0c:	89bb      	ldrh	r3, [r7, #12]
 8003b0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b10:	065b      	lsls	r3, r3, #25
 8003b12:	d400      	bmi.n	8003b16 <_svfiprintf_r+0x1d2>
 8003b14:	e72d      	b.n	8003972 <_svfiprintf_r+0x2e>
 8003b16:	2001      	movs	r0, #1
 8003b18:	4240      	negs	r0, r0
 8003b1a:	e72a      	b.n	8003972 <_svfiprintf_r+0x2e>
 8003b1c:	ab07      	add	r3, sp, #28
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	003a      	movs	r2, r7
 8003b22:	0021      	movs	r1, r4
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <_svfiprintf_r+0x1fc>)
 8003b26:	9803      	ldr	r0, [sp, #12]
 8003b28:	f000 f87c 	bl	8003c24 <_printf_i>
 8003b2c:	e7ea      	b.n	8003b04 <_svfiprintf_r+0x1c0>
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	0800423c 	.word	0x0800423c
 8003b34:	08004242 	.word	0x08004242
 8003b38:	08004246 	.word	0x08004246
 8003b3c:	00000000 	.word	0x00000000
 8003b40:	08003881 	.word	0x08003881

08003b44 <_printf_common>:
 8003b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b46:	0015      	movs	r5, r2
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	688a      	ldr	r2, [r1, #8]
 8003b4c:	690b      	ldr	r3, [r1, #16]
 8003b4e:	000c      	movs	r4, r1
 8003b50:	9000      	str	r0, [sp, #0]
 8003b52:	4293      	cmp	r3, r2
 8003b54:	da00      	bge.n	8003b58 <_printf_common+0x14>
 8003b56:	0013      	movs	r3, r2
 8003b58:	0022      	movs	r2, r4
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	3243      	adds	r2, #67	; 0x43
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d001      	beq.n	8003b68 <_printf_common+0x24>
 8003b64:	3301      	adds	r3, #1
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	069b      	lsls	r3, r3, #26
 8003b6c:	d502      	bpl.n	8003b74 <_printf_common+0x30>
 8003b6e:	682b      	ldr	r3, [r5, #0]
 8003b70:	3302      	adds	r3, #2
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	2306      	movs	r3, #6
 8003b78:	0017      	movs	r7, r2
 8003b7a:	401f      	ands	r7, r3
 8003b7c:	421a      	tst	r2, r3
 8003b7e:	d027      	beq.n	8003bd0 <_printf_common+0x8c>
 8003b80:	0023      	movs	r3, r4
 8003b82:	3343      	adds	r3, #67	; 0x43
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	4193      	sbcs	r3, r2
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	0692      	lsls	r2, r2, #26
 8003b8e:	d430      	bmi.n	8003bf2 <_printf_common+0xae>
 8003b90:	0022      	movs	r2, r4
 8003b92:	9901      	ldr	r1, [sp, #4]
 8003b94:	9800      	ldr	r0, [sp, #0]
 8003b96:	9e08      	ldr	r6, [sp, #32]
 8003b98:	3243      	adds	r2, #67	; 0x43
 8003b9a:	47b0      	blx	r6
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d025      	beq.n	8003bec <_printf_common+0xa8>
 8003ba0:	2306      	movs	r3, #6
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	682a      	ldr	r2, [r5, #0]
 8003ba6:	68e1      	ldr	r1, [r4, #12]
 8003ba8:	2500      	movs	r5, #0
 8003baa:	4003      	ands	r3, r0
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d103      	bne.n	8003bb8 <_printf_common+0x74>
 8003bb0:	1a8d      	subs	r5, r1, r2
 8003bb2:	43eb      	mvns	r3, r5
 8003bb4:	17db      	asrs	r3, r3, #31
 8003bb6:	401d      	ands	r5, r3
 8003bb8:	68a3      	ldr	r3, [r4, #8]
 8003bba:	6922      	ldr	r2, [r4, #16]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	dd01      	ble.n	8003bc4 <_printf_common+0x80>
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	18ed      	adds	r5, r5, r3
 8003bc4:	2700      	movs	r7, #0
 8003bc6:	42bd      	cmp	r5, r7
 8003bc8:	d120      	bne.n	8003c0c <_printf_common+0xc8>
 8003bca:	2000      	movs	r0, #0
 8003bcc:	e010      	b.n	8003bf0 <_printf_common+0xac>
 8003bce:	3701      	adds	r7, #1
 8003bd0:	68e3      	ldr	r3, [r4, #12]
 8003bd2:	682a      	ldr	r2, [r5, #0]
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	42bb      	cmp	r3, r7
 8003bd8:	ddd2      	ble.n	8003b80 <_printf_common+0x3c>
 8003bda:	0022      	movs	r2, r4
 8003bdc:	2301      	movs	r3, #1
 8003bde:	9901      	ldr	r1, [sp, #4]
 8003be0:	9800      	ldr	r0, [sp, #0]
 8003be2:	9e08      	ldr	r6, [sp, #32]
 8003be4:	3219      	adds	r2, #25
 8003be6:	47b0      	blx	r6
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d1f0      	bne.n	8003bce <_printf_common+0x8a>
 8003bec:	2001      	movs	r0, #1
 8003bee:	4240      	negs	r0, r0
 8003bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bf2:	2030      	movs	r0, #48	; 0x30
 8003bf4:	18e1      	adds	r1, r4, r3
 8003bf6:	3143      	adds	r1, #67	; 0x43
 8003bf8:	7008      	strb	r0, [r1, #0]
 8003bfa:	0021      	movs	r1, r4
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	3145      	adds	r1, #69	; 0x45
 8003c00:	7809      	ldrb	r1, [r1, #0]
 8003c02:	18a2      	adds	r2, r4, r2
 8003c04:	3243      	adds	r2, #67	; 0x43
 8003c06:	3302      	adds	r3, #2
 8003c08:	7011      	strb	r1, [r2, #0]
 8003c0a:	e7c1      	b.n	8003b90 <_printf_common+0x4c>
 8003c0c:	0022      	movs	r2, r4
 8003c0e:	2301      	movs	r3, #1
 8003c10:	9901      	ldr	r1, [sp, #4]
 8003c12:	9800      	ldr	r0, [sp, #0]
 8003c14:	9e08      	ldr	r6, [sp, #32]
 8003c16:	321a      	adds	r2, #26
 8003c18:	47b0      	blx	r6
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	d0e6      	beq.n	8003bec <_printf_common+0xa8>
 8003c1e:	3701      	adds	r7, #1
 8003c20:	e7d1      	b.n	8003bc6 <_printf_common+0x82>
	...

08003c24 <_printf_i>:
 8003c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c26:	b08b      	sub	sp, #44	; 0x2c
 8003c28:	9206      	str	r2, [sp, #24]
 8003c2a:	000a      	movs	r2, r1
 8003c2c:	3243      	adds	r2, #67	; 0x43
 8003c2e:	9307      	str	r3, [sp, #28]
 8003c30:	9005      	str	r0, [sp, #20]
 8003c32:	9204      	str	r2, [sp, #16]
 8003c34:	7e0a      	ldrb	r2, [r1, #24]
 8003c36:	000c      	movs	r4, r1
 8003c38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c3a:	2a78      	cmp	r2, #120	; 0x78
 8003c3c:	d807      	bhi.n	8003c4e <_printf_i+0x2a>
 8003c3e:	2a62      	cmp	r2, #98	; 0x62
 8003c40:	d809      	bhi.n	8003c56 <_printf_i+0x32>
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	d100      	bne.n	8003c48 <_printf_i+0x24>
 8003c46:	e0c1      	b.n	8003dcc <_printf_i+0x1a8>
 8003c48:	2a58      	cmp	r2, #88	; 0x58
 8003c4a:	d100      	bne.n	8003c4e <_printf_i+0x2a>
 8003c4c:	e08c      	b.n	8003d68 <_printf_i+0x144>
 8003c4e:	0026      	movs	r6, r4
 8003c50:	3642      	adds	r6, #66	; 0x42
 8003c52:	7032      	strb	r2, [r6, #0]
 8003c54:	e022      	b.n	8003c9c <_printf_i+0x78>
 8003c56:	0010      	movs	r0, r2
 8003c58:	3863      	subs	r0, #99	; 0x63
 8003c5a:	2815      	cmp	r0, #21
 8003c5c:	d8f7      	bhi.n	8003c4e <_printf_i+0x2a>
 8003c5e:	f7fc fa53 	bl	8000108 <__gnu_thumb1_case_shi>
 8003c62:	0016      	.short	0x0016
 8003c64:	fff6001f 	.word	0xfff6001f
 8003c68:	fff6fff6 	.word	0xfff6fff6
 8003c6c:	001ffff6 	.word	0x001ffff6
 8003c70:	fff6fff6 	.word	0xfff6fff6
 8003c74:	fff6fff6 	.word	0xfff6fff6
 8003c78:	003600a8 	.word	0x003600a8
 8003c7c:	fff6009a 	.word	0xfff6009a
 8003c80:	00b9fff6 	.word	0x00b9fff6
 8003c84:	0036fff6 	.word	0x0036fff6
 8003c88:	fff6fff6 	.word	0xfff6fff6
 8003c8c:	009e      	.short	0x009e
 8003c8e:	0026      	movs	r6, r4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	3642      	adds	r6, #66	; 0x42
 8003c94:	1d11      	adds	r1, r2, #4
 8003c96:	6019      	str	r1, [r3, #0]
 8003c98:	6813      	ldr	r3, [r2, #0]
 8003c9a:	7033      	strb	r3, [r6, #0]
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0a7      	b.n	8003df0 <_printf_i+0x1cc>
 8003ca0:	6808      	ldr	r0, [r1, #0]
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	1d0a      	adds	r2, r1, #4
 8003ca6:	0605      	lsls	r5, r0, #24
 8003ca8:	d50b      	bpl.n	8003cc2 <_printf_i+0x9e>
 8003caa:	680d      	ldr	r5, [r1, #0]
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	da03      	bge.n	8003cba <_printf_i+0x96>
 8003cb2:	232d      	movs	r3, #45	; 0x2d
 8003cb4:	9a04      	ldr	r2, [sp, #16]
 8003cb6:	426d      	negs	r5, r5
 8003cb8:	7013      	strb	r3, [r2, #0]
 8003cba:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <_printf_i+0x21c>)
 8003cbc:	270a      	movs	r7, #10
 8003cbe:	9303      	str	r3, [sp, #12]
 8003cc0:	e01b      	b.n	8003cfa <_printf_i+0xd6>
 8003cc2:	680d      	ldr	r5, [r1, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	0641      	lsls	r1, r0, #25
 8003cc8:	d5f1      	bpl.n	8003cae <_printf_i+0x8a>
 8003cca:	b22d      	sxth	r5, r5
 8003ccc:	e7ef      	b.n	8003cae <_printf_i+0x8a>
 8003cce:	680d      	ldr	r5, [r1, #0]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	1d08      	adds	r0, r1, #4
 8003cd4:	6018      	str	r0, [r3, #0]
 8003cd6:	062e      	lsls	r6, r5, #24
 8003cd8:	d501      	bpl.n	8003cde <_printf_i+0xba>
 8003cda:	680d      	ldr	r5, [r1, #0]
 8003cdc:	e003      	b.n	8003ce6 <_printf_i+0xc2>
 8003cde:	066d      	lsls	r5, r5, #25
 8003ce0:	d5fb      	bpl.n	8003cda <_printf_i+0xb6>
 8003ce2:	680d      	ldr	r5, [r1, #0]
 8003ce4:	b2ad      	uxth	r5, r5
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <_printf_i+0x21c>)
 8003ce8:	2708      	movs	r7, #8
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	2a6f      	cmp	r2, #111	; 0x6f
 8003cee:	d000      	beq.n	8003cf2 <_printf_i+0xce>
 8003cf0:	3702      	adds	r7, #2
 8003cf2:	0023      	movs	r3, r4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	3343      	adds	r3, #67	; 0x43
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	6863      	ldr	r3, [r4, #4]
 8003cfc:	60a3      	str	r3, [r4, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db03      	blt.n	8003d0a <_printf_i+0xe6>
 8003d02:	2204      	movs	r2, #4
 8003d04:	6821      	ldr	r1, [r4, #0]
 8003d06:	4391      	bics	r1, r2
 8003d08:	6021      	str	r1, [r4, #0]
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	d102      	bne.n	8003d14 <_printf_i+0xf0>
 8003d0e:	9e04      	ldr	r6, [sp, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <_printf_i+0x10a>
 8003d14:	9e04      	ldr	r6, [sp, #16]
 8003d16:	0028      	movs	r0, r5
 8003d18:	0039      	movs	r1, r7
 8003d1a:	f7fc fa85 	bl	8000228 <__aeabi_uidivmod>
 8003d1e:	9b03      	ldr	r3, [sp, #12]
 8003d20:	3e01      	subs	r6, #1
 8003d22:	5c5b      	ldrb	r3, [r3, r1]
 8003d24:	7033      	strb	r3, [r6, #0]
 8003d26:	002b      	movs	r3, r5
 8003d28:	0005      	movs	r5, r0
 8003d2a:	429f      	cmp	r7, r3
 8003d2c:	d9f3      	bls.n	8003d16 <_printf_i+0xf2>
 8003d2e:	2f08      	cmp	r7, #8
 8003d30:	d109      	bne.n	8003d46 <_printf_i+0x122>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	07db      	lsls	r3, r3, #31
 8003d36:	d506      	bpl.n	8003d46 <_printf_i+0x122>
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	6922      	ldr	r2, [r4, #16]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	dc02      	bgt.n	8003d46 <_printf_i+0x122>
 8003d40:	2330      	movs	r3, #48	; 0x30
 8003d42:	3e01      	subs	r6, #1
 8003d44:	7033      	strb	r3, [r6, #0]
 8003d46:	9b04      	ldr	r3, [sp, #16]
 8003d48:	1b9b      	subs	r3, r3, r6
 8003d4a:	6123      	str	r3, [r4, #16]
 8003d4c:	9b07      	ldr	r3, [sp, #28]
 8003d4e:	0021      	movs	r1, r4
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	9805      	ldr	r0, [sp, #20]
 8003d54:	9b06      	ldr	r3, [sp, #24]
 8003d56:	aa09      	add	r2, sp, #36	; 0x24
 8003d58:	f7ff fef4 	bl	8003b44 <_printf_common>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d14c      	bne.n	8003dfa <_printf_i+0x1d6>
 8003d60:	2001      	movs	r0, #1
 8003d62:	4240      	negs	r0, r0
 8003d64:	b00b      	add	sp, #44	; 0x2c
 8003d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d68:	3145      	adds	r1, #69	; 0x45
 8003d6a:	700a      	strb	r2, [r1, #0]
 8003d6c:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <_printf_i+0x21c>)
 8003d6e:	9203      	str	r2, [sp, #12]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	6821      	ldr	r1, [r4, #0]
 8003d74:	ca20      	ldmia	r2!, {r5}
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	0608      	lsls	r0, r1, #24
 8003d7a:	d516      	bpl.n	8003daa <_printf_i+0x186>
 8003d7c:	07cb      	lsls	r3, r1, #31
 8003d7e:	d502      	bpl.n	8003d86 <_printf_i+0x162>
 8003d80:	2320      	movs	r3, #32
 8003d82:	4319      	orrs	r1, r3
 8003d84:	6021      	str	r1, [r4, #0]
 8003d86:	2710      	movs	r7, #16
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	d1b2      	bne.n	8003cf2 <_printf_i+0xce>
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	439a      	bics	r2, r3
 8003d92:	6022      	str	r2, [r4, #0]
 8003d94:	e7ad      	b.n	8003cf2 <_printf_i+0xce>
 8003d96:	2220      	movs	r2, #32
 8003d98:	6809      	ldr	r1, [r1, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	6022      	str	r2, [r4, #0]
 8003d9e:	0022      	movs	r2, r4
 8003da0:	2178      	movs	r1, #120	; 0x78
 8003da2:	3245      	adds	r2, #69	; 0x45
 8003da4:	7011      	strb	r1, [r2, #0]
 8003da6:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <_printf_i+0x220>)
 8003da8:	e7e1      	b.n	8003d6e <_printf_i+0x14a>
 8003daa:	0648      	lsls	r0, r1, #25
 8003dac:	d5e6      	bpl.n	8003d7c <_printf_i+0x158>
 8003dae:	b2ad      	uxth	r5, r5
 8003db0:	e7e4      	b.n	8003d7c <_printf_i+0x158>
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	680d      	ldr	r5, [r1, #0]
 8003db6:	1d10      	adds	r0, r2, #4
 8003db8:	6949      	ldr	r1, [r1, #20]
 8003dba:	6018      	str	r0, [r3, #0]
 8003dbc:	6813      	ldr	r3, [r2, #0]
 8003dbe:	062e      	lsls	r6, r5, #24
 8003dc0:	d501      	bpl.n	8003dc6 <_printf_i+0x1a2>
 8003dc2:	6019      	str	r1, [r3, #0]
 8003dc4:	e002      	b.n	8003dcc <_printf_i+0x1a8>
 8003dc6:	066d      	lsls	r5, r5, #25
 8003dc8:	d5fb      	bpl.n	8003dc2 <_printf_i+0x19e>
 8003dca:	8019      	strh	r1, [r3, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9e04      	ldr	r6, [sp, #16]
 8003dd0:	6123      	str	r3, [r4, #16]
 8003dd2:	e7bb      	b.n	8003d4c <_printf_i+0x128>
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	1d11      	adds	r1, r2, #4
 8003dd8:	6019      	str	r1, [r3, #0]
 8003dda:	6816      	ldr	r6, [r2, #0]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	0030      	movs	r0, r6
 8003de0:	6862      	ldr	r2, [r4, #4]
 8003de2:	f000 f831 	bl	8003e48 <memchr>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d001      	beq.n	8003dee <_printf_i+0x1ca>
 8003dea:	1b80      	subs	r0, r0, r6
 8003dec:	6060      	str	r0, [r4, #4]
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9a04      	ldr	r2, [sp, #16]
 8003df6:	7013      	strb	r3, [r2, #0]
 8003df8:	e7a8      	b.n	8003d4c <_printf_i+0x128>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	0032      	movs	r2, r6
 8003dfe:	9906      	ldr	r1, [sp, #24]
 8003e00:	9805      	ldr	r0, [sp, #20]
 8003e02:	9d07      	ldr	r5, [sp, #28]
 8003e04:	47a8      	blx	r5
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d0aa      	beq.n	8003d60 <_printf_i+0x13c>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	079b      	lsls	r3, r3, #30
 8003e0e:	d415      	bmi.n	8003e3c <_printf_i+0x218>
 8003e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e12:	68e0      	ldr	r0, [r4, #12]
 8003e14:	4298      	cmp	r0, r3
 8003e16:	daa5      	bge.n	8003d64 <_printf_i+0x140>
 8003e18:	0018      	movs	r0, r3
 8003e1a:	e7a3      	b.n	8003d64 <_printf_i+0x140>
 8003e1c:	0022      	movs	r2, r4
 8003e1e:	2301      	movs	r3, #1
 8003e20:	9906      	ldr	r1, [sp, #24]
 8003e22:	9805      	ldr	r0, [sp, #20]
 8003e24:	9e07      	ldr	r6, [sp, #28]
 8003e26:	3219      	adds	r2, #25
 8003e28:	47b0      	blx	r6
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d098      	beq.n	8003d60 <_printf_i+0x13c>
 8003e2e:	3501      	adds	r5, #1
 8003e30:	68e3      	ldr	r3, [r4, #12]
 8003e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	42ab      	cmp	r3, r5
 8003e38:	dcf0      	bgt.n	8003e1c <_printf_i+0x1f8>
 8003e3a:	e7e9      	b.n	8003e10 <_printf_i+0x1ec>
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	e7f7      	b.n	8003e30 <_printf_i+0x20c>
 8003e40:	0800424d 	.word	0x0800424d
 8003e44:	0800425e 	.word	0x0800425e

08003e48 <memchr>:
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	1882      	adds	r2, r0, r2
 8003e4c:	4290      	cmp	r0, r2
 8003e4e:	d101      	bne.n	8003e54 <memchr+0xc>
 8003e50:	2000      	movs	r0, #0
 8003e52:	4770      	bx	lr
 8003e54:	7803      	ldrb	r3, [r0, #0]
 8003e56:	428b      	cmp	r3, r1
 8003e58:	d0fb      	beq.n	8003e52 <memchr+0xa>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	e7f6      	b.n	8003e4c <memchr+0x4>

08003e5e <memmove>:
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	4288      	cmp	r0, r1
 8003e62:	d902      	bls.n	8003e6a <memmove+0xc>
 8003e64:	188b      	adds	r3, r1, r2
 8003e66:	4298      	cmp	r0, r3
 8003e68:	d303      	bcc.n	8003e72 <memmove+0x14>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e007      	b.n	8003e7e <memmove+0x20>
 8003e6e:	5c8b      	ldrb	r3, [r1, r2]
 8003e70:	5483      	strb	r3, [r0, r2]
 8003e72:	3a01      	subs	r2, #1
 8003e74:	d2fb      	bcs.n	8003e6e <memmove+0x10>
 8003e76:	bd10      	pop	{r4, pc}
 8003e78:	5ccc      	ldrb	r4, [r1, r3]
 8003e7a:	54c4      	strb	r4, [r0, r3]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d1fa      	bne.n	8003e78 <memmove+0x1a>
 8003e82:	e7f8      	b.n	8003e76 <memmove+0x18>

08003e84 <_free_r>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	0005      	movs	r5, r0
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d010      	beq.n	8003eae <_free_r+0x2a>
 8003e8c:	1f0c      	subs	r4, r1, #4
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da00      	bge.n	8003e96 <_free_r+0x12>
 8003e94:	18e4      	adds	r4, r4, r3
 8003e96:	0028      	movs	r0, r5
 8003e98:	f000 f918 	bl	80040cc <__malloc_lock>
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <_free_r+0x90>)
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <_free_r+0x2c>
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	6014      	str	r4, [r2, #0]
 8003ea8:	0028      	movs	r0, r5
 8003eaa:	f000 f917 	bl	80040dc <__malloc_unlock>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	d908      	bls.n	8003ec6 <_free_r+0x42>
 8003eb4:	6821      	ldr	r1, [r4, #0]
 8003eb6:	1860      	adds	r0, r4, r1
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	d1f3      	bne.n	8003ea4 <_free_r+0x20>
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	1841      	adds	r1, r0, r1
 8003ec2:	6021      	str	r1, [r4, #0]
 8003ec4:	e7ee      	b.n	8003ea4 <_free_r+0x20>
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <_free_r+0x4e>
 8003ece:	42a3      	cmp	r3, r4
 8003ed0:	d9f9      	bls.n	8003ec6 <_free_r+0x42>
 8003ed2:	6811      	ldr	r1, [r2, #0]
 8003ed4:	1850      	adds	r0, r2, r1
 8003ed6:	42a0      	cmp	r0, r4
 8003ed8:	d10b      	bne.n	8003ef2 <_free_r+0x6e>
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	1809      	adds	r1, r1, r0
 8003ede:	1850      	adds	r0, r2, r1
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	4283      	cmp	r3, r0
 8003ee4:	d1e0      	bne.n	8003ea8 <_free_r+0x24>
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	1841      	adds	r1, r0, r1
 8003eec:	6011      	str	r1, [r2, #0]
 8003eee:	6053      	str	r3, [r2, #4]
 8003ef0:	e7da      	b.n	8003ea8 <_free_r+0x24>
 8003ef2:	42a0      	cmp	r0, r4
 8003ef4:	d902      	bls.n	8003efc <_free_r+0x78>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	e7d5      	b.n	8003ea8 <_free_r+0x24>
 8003efc:	6821      	ldr	r1, [r4, #0]
 8003efe:	1860      	adds	r0, r4, r1
 8003f00:	4283      	cmp	r3, r0
 8003f02:	d103      	bne.n	8003f0c <_free_r+0x88>
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	1841      	adds	r1, r0, r1
 8003f0a:	6021      	str	r1, [r4, #0]
 8003f0c:	6063      	str	r3, [r4, #4]
 8003f0e:	6054      	str	r4, [r2, #4]
 8003f10:	e7ca      	b.n	8003ea8 <_free_r+0x24>
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	20000170 	.word	0x20000170

08003f18 <sbrk_aligned>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4e0f      	ldr	r6, [pc, #60]	; (8003f58 <sbrk_aligned+0x40>)
 8003f1c:	000d      	movs	r5, r1
 8003f1e:	6831      	ldr	r1, [r6, #0]
 8003f20:	0004      	movs	r4, r0
 8003f22:	2900      	cmp	r1, #0
 8003f24:	d102      	bne.n	8003f2c <sbrk_aligned+0x14>
 8003f26:	f000 f8bf 	bl	80040a8 <_sbrk_r>
 8003f2a:	6030      	str	r0, [r6, #0]
 8003f2c:	0029      	movs	r1, r5
 8003f2e:	0020      	movs	r0, r4
 8003f30:	f000 f8ba 	bl	80040a8 <_sbrk_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d00a      	beq.n	8003f4e <sbrk_aligned+0x36>
 8003f38:	2303      	movs	r3, #3
 8003f3a:	1cc5      	adds	r5, r0, #3
 8003f3c:	439d      	bics	r5, r3
 8003f3e:	42a8      	cmp	r0, r5
 8003f40:	d007      	beq.n	8003f52 <sbrk_aligned+0x3a>
 8003f42:	1a29      	subs	r1, r5, r0
 8003f44:	0020      	movs	r0, r4
 8003f46:	f000 f8af 	bl	80040a8 <_sbrk_r>
 8003f4a:	1c43      	adds	r3, r0, #1
 8003f4c:	d101      	bne.n	8003f52 <sbrk_aligned+0x3a>
 8003f4e:	2501      	movs	r5, #1
 8003f50:	426d      	negs	r5, r5
 8003f52:	0028      	movs	r0, r5
 8003f54:	bd70      	pop	{r4, r5, r6, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20000174 	.word	0x20000174

08003f5c <_malloc_r>:
 8003f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f5e:	2203      	movs	r2, #3
 8003f60:	1ccb      	adds	r3, r1, #3
 8003f62:	4393      	bics	r3, r2
 8003f64:	3308      	adds	r3, #8
 8003f66:	0006      	movs	r6, r0
 8003f68:	001f      	movs	r7, r3
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d232      	bcs.n	8003fd4 <_malloc_r+0x78>
 8003f6e:	270c      	movs	r7, #12
 8003f70:	42b9      	cmp	r1, r7
 8003f72:	d831      	bhi.n	8003fd8 <_malloc_r+0x7c>
 8003f74:	0030      	movs	r0, r6
 8003f76:	f000 f8a9 	bl	80040cc <__malloc_lock>
 8003f7a:	4d32      	ldr	r5, [pc, #200]	; (8004044 <_malloc_r+0xe8>)
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	001c      	movs	r4, r3
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	d12e      	bne.n	8003fe2 <_malloc_r+0x86>
 8003f84:	0039      	movs	r1, r7
 8003f86:	0030      	movs	r0, r6
 8003f88:	f7ff ffc6 	bl	8003f18 <sbrk_aligned>
 8003f8c:	0004      	movs	r4, r0
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	d11e      	bne.n	8003fd0 <_malloc_r+0x74>
 8003f92:	682c      	ldr	r4, [r5, #0]
 8003f94:	0025      	movs	r5, r4
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	d14a      	bne.n	8004030 <_malloc_r+0xd4>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	18e3      	adds	r3, r4, r3
 8003fa0:	0030      	movs	r0, r6
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	f000 f880 	bl	80040a8 <_sbrk_r>
 8003fa8:	9b01      	ldr	r3, [sp, #4]
 8003faa:	4283      	cmp	r3, r0
 8003fac:	d143      	bne.n	8004036 <_malloc_r+0xda>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	3703      	adds	r7, #3
 8003fb2:	1aff      	subs	r7, r7, r3
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	439f      	bics	r7, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	2f0c      	cmp	r7, #12
 8003fbc:	d200      	bcs.n	8003fc0 <_malloc_r+0x64>
 8003fbe:	270c      	movs	r7, #12
 8003fc0:	0039      	movs	r1, r7
 8003fc2:	0030      	movs	r0, r6
 8003fc4:	f7ff ffa8 	bl	8003f18 <sbrk_aligned>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d034      	beq.n	8004036 <_malloc_r+0xda>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	19df      	adds	r7, r3, r7
 8003fd0:	6027      	str	r7, [r4, #0]
 8003fd2:	e013      	b.n	8003ffc <_malloc_r+0xa0>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dacb      	bge.n	8003f70 <_malloc_r+0x14>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	2500      	movs	r5, #0
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	0028      	movs	r0, r5
 8003fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	1bd1      	subs	r1, r2, r7
 8003fe6:	d420      	bmi.n	800402a <_malloc_r+0xce>
 8003fe8:	290b      	cmp	r1, #11
 8003fea:	d917      	bls.n	800401c <_malloc_r+0xc0>
 8003fec:	19e2      	adds	r2, r4, r7
 8003fee:	6027      	str	r7, [r4, #0]
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d111      	bne.n	8004018 <_malloc_r+0xbc>
 8003ff4:	602a      	str	r2, [r5, #0]
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	6011      	str	r1, [r2, #0]
 8003ffa:	6053      	str	r3, [r2, #4]
 8003ffc:	0030      	movs	r0, r6
 8003ffe:	0025      	movs	r5, r4
 8004000:	f000 f86c 	bl	80040dc <__malloc_unlock>
 8004004:	2207      	movs	r2, #7
 8004006:	350b      	adds	r5, #11
 8004008:	1d23      	adds	r3, r4, #4
 800400a:	4395      	bics	r5, r2
 800400c:	1aea      	subs	r2, r5, r3
 800400e:	429d      	cmp	r5, r3
 8004010:	d0e5      	beq.n	8003fde <_malloc_r+0x82>
 8004012:	1b5b      	subs	r3, r3, r5
 8004014:	50a3      	str	r3, [r4, r2]
 8004016:	e7e2      	b.n	8003fde <_malloc_r+0x82>
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e7ec      	b.n	8003ff6 <_malloc_r+0x9a>
 800401c:	6862      	ldr	r2, [r4, #4]
 800401e:	42a3      	cmp	r3, r4
 8004020:	d101      	bne.n	8004026 <_malloc_r+0xca>
 8004022:	602a      	str	r2, [r5, #0]
 8004024:	e7ea      	b.n	8003ffc <_malloc_r+0xa0>
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e7e8      	b.n	8003ffc <_malloc_r+0xa0>
 800402a:	0023      	movs	r3, r4
 800402c:	6864      	ldr	r4, [r4, #4]
 800402e:	e7a7      	b.n	8003f80 <_malloc_r+0x24>
 8004030:	002c      	movs	r4, r5
 8004032:	686d      	ldr	r5, [r5, #4]
 8004034:	e7af      	b.n	8003f96 <_malloc_r+0x3a>
 8004036:	230c      	movs	r3, #12
 8004038:	0030      	movs	r0, r6
 800403a:	6033      	str	r3, [r6, #0]
 800403c:	f000 f84e 	bl	80040dc <__malloc_unlock>
 8004040:	e7cd      	b.n	8003fde <_malloc_r+0x82>
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	20000170 	.word	0x20000170

08004048 <_realloc_r>:
 8004048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404a:	0007      	movs	r7, r0
 800404c:	000e      	movs	r6, r1
 800404e:	0014      	movs	r4, r2
 8004050:	2900      	cmp	r1, #0
 8004052:	d105      	bne.n	8004060 <_realloc_r+0x18>
 8004054:	0011      	movs	r1, r2
 8004056:	f7ff ff81 	bl	8003f5c <_malloc_r>
 800405a:	0005      	movs	r5, r0
 800405c:	0028      	movs	r0, r5
 800405e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004060:	2a00      	cmp	r2, #0
 8004062:	d103      	bne.n	800406c <_realloc_r+0x24>
 8004064:	f7ff ff0e 	bl	8003e84 <_free_r>
 8004068:	0025      	movs	r5, r4
 800406a:	e7f7      	b.n	800405c <_realloc_r+0x14>
 800406c:	f000 f83e 	bl	80040ec <_malloc_usable_size_r>
 8004070:	9001      	str	r0, [sp, #4]
 8004072:	4284      	cmp	r4, r0
 8004074:	d803      	bhi.n	800407e <_realloc_r+0x36>
 8004076:	0035      	movs	r5, r6
 8004078:	0843      	lsrs	r3, r0, #1
 800407a:	42a3      	cmp	r3, r4
 800407c:	d3ee      	bcc.n	800405c <_realloc_r+0x14>
 800407e:	0021      	movs	r1, r4
 8004080:	0038      	movs	r0, r7
 8004082:	f7ff ff6b 	bl	8003f5c <_malloc_r>
 8004086:	1e05      	subs	r5, r0, #0
 8004088:	d0e8      	beq.n	800405c <_realloc_r+0x14>
 800408a:	9b01      	ldr	r3, [sp, #4]
 800408c:	0022      	movs	r2, r4
 800408e:	429c      	cmp	r4, r3
 8004090:	d900      	bls.n	8004094 <_realloc_r+0x4c>
 8004092:	001a      	movs	r2, r3
 8004094:	0031      	movs	r1, r6
 8004096:	0028      	movs	r0, r5
 8004098:	f7ff fbc0 	bl	800381c <memcpy>
 800409c:	0031      	movs	r1, r6
 800409e:	0038      	movs	r0, r7
 80040a0:	f7ff fef0 	bl	8003e84 <_free_r>
 80040a4:	e7da      	b.n	800405c <_realloc_r+0x14>
	...

080040a8 <_sbrk_r>:
 80040a8:	2300      	movs	r3, #0
 80040aa:	b570      	push	{r4, r5, r6, lr}
 80040ac:	4d06      	ldr	r5, [pc, #24]	; (80040c8 <_sbrk_r+0x20>)
 80040ae:	0004      	movs	r4, r0
 80040b0:	0008      	movs	r0, r1
 80040b2:	602b      	str	r3, [r5, #0]
 80040b4:	f7fd f86c 	bl	8001190 <_sbrk>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d103      	bne.n	80040c4 <_sbrk_r+0x1c>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d000      	beq.n	80040c4 <_sbrk_r+0x1c>
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	20000178 	.word	0x20000178

080040cc <__malloc_lock>:
 80040cc:	b510      	push	{r4, lr}
 80040ce:	4802      	ldr	r0, [pc, #8]	; (80040d8 <__malloc_lock+0xc>)
 80040d0:	f000 f814 	bl	80040fc <__retarget_lock_acquire_recursive>
 80040d4:	bd10      	pop	{r4, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	2000017c 	.word	0x2000017c

080040dc <__malloc_unlock>:
 80040dc:	b510      	push	{r4, lr}
 80040de:	4802      	ldr	r0, [pc, #8]	; (80040e8 <__malloc_unlock+0xc>)
 80040e0:	f000 f80d 	bl	80040fe <__retarget_lock_release_recursive>
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	2000017c 	.word	0x2000017c

080040ec <_malloc_usable_size_r>:
 80040ec:	1f0b      	subs	r3, r1, #4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1f18      	subs	r0, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da01      	bge.n	80040fa <_malloc_usable_size_r+0xe>
 80040f6:	580b      	ldr	r3, [r1, r0]
 80040f8:	18c0      	adds	r0, r0, r3
 80040fa:	4770      	bx	lr

080040fc <__retarget_lock_acquire_recursive>:
 80040fc:	4770      	bx	lr

080040fe <__retarget_lock_release_recursive>:
 80040fe:	4770      	bx	lr

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
